[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.10526290717280662,0.18908337029189337,0.7056537225353],[11,0.07017527144853775,0.2300189453035404,0.6998057832479219],[10,0.046783514299025164,0.2826503988899437,0.6705660868110311],[9,0.031189009532683443,0.32748460009317615,0.6413263903741404],[8,0.031189009532683443,0.40545712392488475,0.5633538665424318],[7,0.0,0.46783514299025164,0.5321648570097484],[6,0.0,0.6237801906536689,0.37621980934633115],[5,0.0,0.7485362287844026,0.2514637712155974],[4,0.0,0.7485362287844026,0.2514637712155974],[3,0.0,0.7485362287844026,0.2514637712155974],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":57.79296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",82.489990234375,1523],["body",256,"valid",540.0009765625,8256]],"time":631.092041015625,"type":"sample"},{"compiler":[[15,10]],"egraph":[[0,4,4,2.375e-6],[14,7682,105,0.13880487500000002],[13,7682,105,0.12307316700000001],[12,7682,105,0.1088115],[11,7682,105,0.094015125],[10,7610,105,0.080171959],[9,7581,105,0.070210209],[8,7546,105,0.060291459],[7,7375,105,0.051103667],[6,6897,105,0.041339542],[5,5222,105,0.028722167],[4,2439,105,0.01554125],[3,945,105,0.005927667],[2,315,119,0.0018391669999999998],[1,97,119,0.000530542],[0,35,119,0.000132375]],"inputs":[["0","1","2","3"],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 y (log.f64 x)) x) z) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 z (log.f64 y)) y) x) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 t (log.f64 y)) y) z) (log.f64 x))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 z)) z) y) (log.f64 t))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 t)) t) z) (log.f64 y))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) t) (log.f64 z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))","(+.f64 (-.f64 (fma.f64 x (log.f64 y) (neg.f64 y)) z) (log.f64 t))","(-.f64 (*.f64 x (log.f64 y)) (+.f64 y (-.f64 z (log.f64 t))))","(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","(+.f64 (-.f64 (-.f64 (*.f64 y (log.f64 x)) x) z) (log.f64 t))","(+.f64 (log.f64 t) (-.f64 (-.f64 (*.f64 y (log.f64 x)) x) z))","(-.f64 (fma.f64 y (log.f64 x) (neg.f64 x)) (-.f64 z (log.f64 t)))","(+.f64 (log.f64 t) (-.f64 (*.f64 y (log.f64 x)) (+.f64 x z)))","(-.f64 (fma.f64 y (log.f64 x) (-.f64 (log.f64 t) z)) x)","(+.f64 (-.f64 (-.f64 (*.f64 z (log.f64 y)) y) x) (log.f64 t))","(+.f64 (log.f64 t) (-.f64 (*.f64 (log.f64 y) z) (+.f64 y x)))","(+.f64 (log.f64 t) (-.f64 (fma.f64 (log.f64 y) z (neg.f64 y)) x))","(fma.f64 (log.f64 y) z (-.f64 (neg.f64 y) (-.f64 x (log.f64 t))))","(-.f64 (fma.f64 (log.f64 y) z (log.f64 t)) (+.f64 x y))","(fma.f64 (log.f64 y) z (-.f64 (log.f64 t) (+.f64 x y)))","(+.f64 (-.f64 (-.f64 (*.f64 t (log.f64 y)) y) z) (log.f64 x))","(+.f64 (log.f64 x) (-.f64 (*.f64 (log.f64 y) t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) t (log.f64 x)) (+.f64 y z))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 z)) z) y) (log.f64 t))","(+.f64 (log.f64 t) (-.f64 (*.f64 x (log.f64 z)) (+.f64 z y)))","(+.f64 (log.f64 t) (-.f64 (*.f64 x (log.f64 z)) (+.f64 y z)))","(fma.f64 x (log.f64 z) (-.f64 (-.f64 (log.f64 t) z) y))","(-.f64 (fma.f64 x (log.f64 z) (-.f64 (log.f64 t) z)) y)","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 t)) t) z) (log.f64 y))","(+.f64 (log.f64 y) (-.f64 (-.f64 (*.f64 x (log.f64 t)) t) z))","(-.f64 (fma.f64 x (log.f64 t) (neg.f64 t)) (-.f64 z (log.f64 y)))","(+.f64 (log.f64 y) (-.f64 (*.f64 x (log.f64 t)) (+.f64 z t)))","(-.f64 (fma.f64 x (log.f64 t) (log.f64 y)) (+.f64 z t))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) t) (log.f64 z))","(+.f64 (log.f64 z) (-.f64 (*.f64 x (log.f64 y)) (+.f64 y t)))","(+.f64 (log.f64 z) (-.f64 (fma.f64 x (log.f64 y) (neg.f64 y)) t))","(-.f64 (fma.f64 x (log.f64 y) (log.f64 z)) (+.f64 y t))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":166.1240234375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[21,5822,15,0.16874333199999997],[20,5822,15,0.14585854099999998],[19,5812,15,0.13424566599999999],[18,5726,15,0.12241954099999999],[17,5596,15,0.110398499],[16,5404,15,0.09872479099999999],[15,5316,15,0.08769029099999999],[14,5314,15,0.07669974899999998],[13,5308,15,0.06855745699999999],[12,5298,15,0.06104333199999999],[11,5206,15,0.053330540999999995],[10,4795,15,0.044421666],[9,2988,15,0.035230999],[8,2118,15,0.025776291],[7,1837,15,0.018976083],[6,1382,15,0.012752249],[5,929,15,0.007461874],[4,411,15,0.0031336660000000002],[3,163,15,0.001080666],[2,59,17,0.000404416],[1,22,17,0.00014904099999999998],[0,11,17,4.7208e-5]],"inputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))","(+.f64 (-.f64 (fma.f64 x (log.f64 y) (neg.f64 y)) z) (log.f64 t))","(-.f64 (*.f64 x (log.f64 y)) (+.f64 y (-.f64 z (log.f64 t))))","(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))"]],"stop":[["node limit",1]],"time":181.302001953125,"type":"simplify"},{"compiler":[[25,13]],"time":0.3759765625,"type":"eval"},{"alts":[["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","next",0.0859375]],"compiler":[[14,9],[14,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0859375],"time":0.90087890625,"type":"prune"},{"compiler":[[31,9]],"locations":[["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))",0.00390625,true],["(fma.f64 x (log.f64 y) (log.f64 t))",0.13671875,true]],"time":7.64111328125,"type":"localize"},{"count":[[2,84]],"series":[["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","z","-inf",0.201904296875],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","z","inf",0.26806640625],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","z","0",1.9560546875],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","t","-inf",0.219970703125],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","t","inf",0.218017578125],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","t","0",0.19189453125],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","y","-inf",0.2529296875],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","y","inf",0.219970703125],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","y","0",0.219970703125],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","x","-inf",0.173095703125],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","x","inf",0.201171875],["(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","x","0",0.211181640625],["(fma.f64 x (log.f64 y) (log.f64 t))","t","-inf",4.56103515625],["(fma.f64 x (log.f64 y) (log.f64 t))","t","inf",4.27783203125],["(fma.f64 x (log.f64 y) (log.f64 t))","t","0",13.7529296875],["(fma.f64 x (log.f64 y) (log.f64 t))","y","-inf",6.718994140625],["(fma.f64 x (log.f64 y) (log.f64 t))","y","inf",6.240966796875],["(fma.f64 x (log.f64 y) (log.f64 t))","y","0",20.218994140625],["(fma.f64 x (log.f64 y) (log.f64 t))","x","-inf",0.31298828125],["(fma.f64 x (log.f64 y) (log.f64 t))","x","inf",0.322998046875],["(fma.f64 x (log.f64 y) (log.f64 t))","x","0",5.927001953125]],"time":67.5078125,"type":"series"},{"count":[[2,160]],"egraph":[[2,3077,24,0.025953708000000002],[1,215,24,0.003994125],[0,10,24,0.000220875]],"inputs":[["(fma.f64 x (log.f64 y) (log.f64 t))","(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 y)) 1) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t)) 2)) (log.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t))) (log.f64 (sqrt.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 (log.f64 t) 3)) (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (-.f64 (pow.f64 (log.f64 t) 2) (*.f64 (*.f64 x (log.f64 y)) (log.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (log.f64 t) 2)) (-.f64 (*.f64 x (log.f64 y)) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 t (exp.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 t 1)) (exp.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) (+.f64 1 (-.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (log.f64 y) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (log.f64 y) (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (+.f64 y z)) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3)) (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2)) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3))) (neg.f64 (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2))) (neg.f64 (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) 3) (pow.f64 z 3)) (+.f64 (pow.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) 2) (fma.f64 z z (*.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (neg.f64 (+.f64 y z)) 3)) (+.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (-.f64 (pow.f64 (neg.f64 (+.f64 y z)) 2) (*.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (neg.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) 2) (*.f64 z z)) (+.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (neg.f64 (+.f64 y z)) 2)) (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t) (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (/.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t) (exp.f64 y)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) (exp.f64 (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t)))) (/.f64 1 (exp.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (+.f64 y z))) (*.f64 (exp.f64 (*.f64 x (log.f64 y))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (+.f64 y z))) (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (+.f64 y z))) (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (log.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 1 (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 1 (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 1 (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 1 (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 1 (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (log.f64 t)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (log.f64 t)) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (+.f64 y z)) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (neg.f64 (cbrt.f64 (+.f64 y z))) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z))) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y z)) (neg.f64 (sqrt.f64 (+.f64 y z))) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) (+.f64 y z)))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z)))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (fma.f64 x (log.f64 y) (+.f64 (log.f64 t) (+.f64 y z)))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) 2) (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) 2) (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) 2) (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) 2) (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (+.f64 y z))) 2) (cbrt.f64 (neg.f64 (+.f64 y z))) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (cbrt.f64 (*.f64 x (log.f64 y))) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) y)) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (+.f64 y z))) (sqrt.f64 (neg.f64 (+.f64 y z))) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (sqrt.f64 (+.f64 y z)) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 y z) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 y)) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (sqrt.f64 (+.f64 y z))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 y z)) 2)) (cbrt.f64 (+.f64 y z)) (fma.f64 x (log.f64 y) (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))))))"]],"rules":[["egg-rr",127],["egg-rr",33]],"stop":[["node limit",1]],"time":54.423095703125,"type":"rewrite"},{"count":[[244,185]],"egraph":[[11,7985,954,0.07804354100000001],[10,7899,954,0.06682558300000001],[9,7897,954,0.059299041000000004],[8,7811,954,0.051777250000000004],[7,7550,954,0.045043792000000006],[6,6888,954,0.037465584],[5,5866,954,0.027163167000000002],[4,4108,954,0.017536042],[3,1128,954,0.009654875],[2,347,954,0.002674167],[1,144,954,0.0008938329999999999],[0,51,954,0.000276541]],"inputs":[["(log.f64 t)","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)"]],"method":["egg-herbie"],"outputs":[["(log.f64 t)","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (log.f64 t))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t))))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(fma.f64 (log.f64 y) x (log.f64 t))","(+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))","(fma.f64 (log.f64 y) x (log.f64 t))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y)","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))"]],"stop":[["node limit",1]],"time":114.708984375,"type":"simplify"},{"compiler":[[3587,833]],"time":21.740966796875,"type":"eval"},{"alts":[["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","next",0.08203125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.16701127930532605],["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 3) (+.f64 y z))","fresh",0.2627525879159781],["(fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.22369008791597814],["(-.f64 (/.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (log.f64 t) 2)) (-.f64 (*.f64 x (log.f64 y)) (log.f64 t))) (+.f64 y z))","fresh",15.8046875],["(fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",35.57326127930533],["(fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (neg.f64 (+.f64 y z)))","fresh",15.796875]],"compiler":[[14,9],[21,14],[17,12],[20,13],[27,16],[21,11],[25,14],[14,9],[21,14],[17,12],[20,13],[27,16],[21,11],[25,14]],"count":[[186,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[185,7],"picked":[1,0]}],"min-error":[0.015625],"time":52.107177734375,"type":"prune"},{"compiler":[[31,9]],"locations":[["(-.f64 (log.f64 t) (+.f64 y z))",0.00390625,true],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))",0.078125,true]],"time":7.639892578125,"type":"localize"},{"count":[[2,80]],"series":[["(-.f64 (log.f64 t) (+.f64 y z))","z","-inf",0.159912109375],["(-.f64 (log.f64 t) (+.f64 y z))","z","inf",0.14697265625],["(-.f64 (log.f64 t) (+.f64 y z))","z","0",0.15087890625],["(-.f64 (log.f64 t) (+.f64 y z))","y","-inf",0.160888671875],["(-.f64 (log.f64 t) (+.f64 y z))","y","inf",0.14794921875],["(-.f64 (log.f64 t) (+.f64 y z))","y","0",0.15283203125],["(-.f64 (log.f64 t) (+.f64 y z))","t","-inf",0.18408203125],["(-.f64 (log.f64 t) (+.f64 y z))","t","inf",0.16015625],["(-.f64 (log.f64 t) (+.f64 y z))","t","0",0.1611328125],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","z","-inf",0.233154296875],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","z","inf",0.197998046875],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","z","0",0.215087890625],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","t","-inf",0.234130859375],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","t","inf",0.2138671875],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","t","0",0.281005859375],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","x","-inf",0.242919921875],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","x","inf",8.114013671875],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","x","0",0.2529296875],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","y","-inf",0.2880859375],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","y","inf",0.268798828125],["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","y","0",0.35791015625]],"time":12.587890625,"type":"series"},{"count":[[2,153]],"egraph":[[2,3074,24,0.025893624999999997],[1,215,24,0.003909958],[0,10,24,0.000219125]],"inputs":[["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (log.f64 t) (+.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) (+.f64 y z)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 y) x) 1) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 2)) (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 3) (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 3)) (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 2) (-.f64 (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 2) (*.f64 (*.f64 (log.f64 y) x) (-.f64 (log.f64 t) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (log.f64 y) x) 2) (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 2)) (-.f64 (*.f64 (log.f64 y) x) (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 t (exp.f64 (+.f64 y z))) (exp.f64 (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (log.f64 t) (+.f64 y z)))) (exp.f64 (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (log.f64 y) x)) (+.f64 1 (expm1.f64 (-.f64 (log.f64 t) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 t) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 t) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) (+.f64 y z)) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (+.f64 y z)) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) y) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) y) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z z))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) y) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 t (exp.f64 (+.f64 y z)))) 2)) (log.f64 (cbrt.f64 (/.f64 t (exp.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 t (exp.f64 (+.f64 y z))))) (log.f64 (sqrt.f64 (/.f64 t (exp.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log.f64 t) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2) (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2)) (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (log.f64 t) (+.f64 y z)) (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3)) (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2)) (+.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3))) (neg.f64 (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2))) (neg.f64 (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (log.f64 t) y) 3) (pow.f64 z 3)) (+.f64 (pow.f64 (-.f64 (log.f64 t) y) 2) (fma.f64 z z (*.f64 (-.f64 (log.f64 t) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (neg.f64 (+.f64 y z)) 3)) (+.f64 (pow.f64 (log.f64 t) 2) (-.f64 (pow.f64 (neg.f64 (+.f64 y z)) 2) (*.f64 (log.f64 t) (neg.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (log.f64 t) y) 2) (*.f64 z z)) (+.f64 (-.f64 (log.f64 t) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (neg.f64 (+.f64 y z)) 2)) (-.f64 (log.f64 t) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2)) (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (log.f64 t) (+.f64 y z)) (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 t (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 t 1)) (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 t (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 t 1)) (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (-.f64 (log.f64 t) y)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (/.f64 t (exp.f64 y)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 t 1)) (exp.f64 (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 t 1)) (/.f64 1 (exp.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (+.f64 y z))) t))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (+.f64 y z))) (+.f64 1 (-.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (+.f64 y z))) (+.f64 1 (-.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (log.f64 t) (+.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 (log.f64 t) (+.f64 y z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 t) 1 (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 t) 1 (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log.f64 t) (+.f64 y z)) 1 (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log.f64 t) (+.f64 y z)) 1 (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log.f64 t) (+.f64 y z)) 1 (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 t) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 t) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 t) (+.f64 y z)) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (+.f64 y z)) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 t) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 t) y) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 t) y) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z z))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 t) y) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (neg.f64 (cbrt.f64 (+.f64 y z))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2) (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2) (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) 2) (cbrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y z)) (neg.f64 (sqrt.f64 (+.f64 y z))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (sqrt.f64 (-.f64 (log.f64 t) (+.f64 y z))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (*.f64 (neg.f64 (+.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3)) (/.f64 1 (fma.f64 (+.f64 y z) (+.f64 (log.f64 t) (+.f64 y z)) (pow.f64 (log.f64 t) 2))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (+.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (+.f64 (log.f64 t) (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2)) (/.f64 1 (+.f64 (log.f64 t) (+.f64 y z))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) y)) 2) (cbrt.f64 (-.f64 (log.f64 t) y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) y)) 2) (cbrt.f64 (-.f64 (log.f64 t) y)) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) y)) 2) (cbrt.f64 (-.f64 (log.f64 t) y)) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z z))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 t) y)) 2) (cbrt.f64 (-.f64 (log.f64 t) y)) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (+.f64 y z))) 2) (cbrt.f64 (neg.f64 (+.f64 y z))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 t) y)) (sqrt.f64 (-.f64 (log.f64 t) y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 t) y)) (sqrt.f64 (-.f64 (log.f64 t) y)) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 t) y)) (sqrt.f64 (-.f64 (log.f64 t) y)) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z z))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 t) y)) (sqrt.f64 (-.f64 (log.f64 t) y)) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (+.f64 y z))) (sqrt.f64 (neg.f64 (+.f64 y z))) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (sqrt.f64 (+.f64 y z)) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 y z) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))) (fma.f64 (neg.f64 (+.f64 y z)) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 y z)) 2) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (+.f64 y z))) (+.f64 (neg.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z z))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 y)) (*.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 y z)) 2)) (cbrt.f64 (+.f64 y z)) (log.f64 t))))))"]],"rules":[["egg-rr",117],["egg-rr",36]],"stop":[["node limit",1]],"time":52.8251953125,"type":"rewrite"},{"count":[[233,177]],"egraph":[[6,7976,900,0.03933299900000001],[5,6913,900,0.031799666000000004],[4,4367,900,0.020191999000000002],[3,1302,900,0.010707791000000001],[2,390,900,0.002997833],[1,169,900,0.000962416],[0,56,900,0.00028525]],"inputs":[["(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (log.f64 t) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) z)","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (log.f64 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (log.f64 t)) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (log.f64 t) z)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (log.f64 t)) z)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (log.f64 t) y)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (log.f64 t)) y)","(-.f64 (log.f64 t) (+.f64 y z))"]],"stop":[["node limit",1]],"time":65.2939453125,"type":"simplify"},{"compiler":[[3209,861]],"time":23.635009765625,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 3) (+.f64 y z))","fresh",0.2627525879159781],["(fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.22369008791597814],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.16701127930532605],["(-.f64 (/.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (log.f64 t) 2)) (-.f64 (*.f64 x (log.f64 y)) (log.f64 t))) (+.f64 y z))","fresh",15.8046875],["(fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",35.57326127930533],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","next",0.13738251953688405]],"compiler":[[17,12],[20,13],[21,14],[27,16],[21,11],[21,13],[17,12],[20,13],[21,14],[27,16],[21,11],[21,13]],"count":[[184,6]],"kept":[{"done":[0,0],"fresh":[6,5],"new":[177,1],"picked":[1,0]}],"min-error":[0.015625],"time":47.65185546875,"type":"prune"},{"compiler":[[58,19]],"locations":[["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))",0.078125,true],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))",0.08203125,true],["(cbrt.f64 (log.f64 t))",0.10546875,true],["(pow.f64 (cbrt.f64 (log.f64 t)) 2)",0.49742128907376804,true]],"time":13.93017578125,"type":"localize"},{"count":[[4,108]],"series":[["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","z","-inf",0.195068359375],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","z","inf",0.18505859375],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","z","0",0.197998046875],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","t","-inf",0.251953125],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","t","inf",0.238037109375],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","t","0",0.18994140625],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","x","-inf",0.180908203125],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","x","inf",0.205078125],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","x","0",0.546142578125],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","y","-inf",0.261962890625],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","y","inf",0.223876953125],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","y","0",0.22900390625],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","z","-inf",0.18310546875],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","z","inf",0.196044921875],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","z","0",0.528076171875],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","y","-inf",0.181884765625],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","y","inf",0.195068359375],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","y","0",0.538818359375],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","t","-inf",0.37109375],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","t","inf",0.385986328125],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","t","0",0.326904296875],["(cbrt.f64 (log.f64 t))","t","-inf",0.203857421875],["(cbrt.f64 (log.f64 t))","t","inf",0.181884765625],["(cbrt.f64 (log.f64 t))","t","0",0.166015625],["(pow.f64 (cbrt.f64 (log.f64 t)) 2)","t","-inf",1.22607421875],["(pow.f64 (cbrt.f64 (log.f64 t)) 2)","t","inf",1.571044921875],["(pow.f64 (cbrt.f64 (log.f64 t)) 2)","t","0",1.453857421875]],"time":11.0048828125,"type":"series"},{"count":[[4,172]],"egraph":[[2,3608,37,0.026667791000000003],[1,291,37,0.005119916],[0,14,41,0.000337541]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 t)) 2)","(cbrt.f64 (log.f64 t))","(fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z)))","(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (log.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2))) (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 t)) (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (log.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 t)) (pow.f64 (log.f64 t) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 t) 1/6) (*.f64 (pow.f64 (log.f64 t) 1/6) (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 t))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (log.f64 t)))) (cbrt.f64 (exp.f64 (cbrt.f64 (log.f64 t)))))) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (log.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (log.f64 t))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (log.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (log.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 t) 1/6) (pow.f64 (log.f64 t) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (log.f64 t)) 1/3) (pow.f64 (sqrt.f64 (log.f64 t)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 t) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 t) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (log.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 t)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (log.f64 t))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 t) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y z) (log.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 -1 (+.f64 y z) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 1 (+.f64 y z) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (+.f64 y z) 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (cbrt.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (sqrt.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 y z)))) (sqrt.f64 (+.f64 y z)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (+.f64 y z) -1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (neg.f64 (sqrt.f64 (+.f64 y z))) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 t) 1 (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (log.f64 t) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (log.f64 t) 1/6)) (pow.f64 (log.f64 t) 1/6) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2))))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (+.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)) (*.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 t) 1 (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (log.f64 t) (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (log.f64 t) 1/6)) (pow.f64 (log.f64 t) 1/6) (neg.f64 (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3))))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y)))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 1 (fma.f64 z (-.f64 z y) (*.f64 y y))) (+.f64 (pow.f64 y 3) (pow.f64 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 t) 1 (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (log.f64 t) (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (log.f64 t) 1/6)) (pow.f64 (log.f64 t) 1/6) (neg.f64 (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z))))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 y z))) (-.f64 (*.f64 y y) (*.f64 z z)) (*.f64 (/.f64 1 (-.f64 y z)) (-.f64 (*.f64 y y) (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 t) 1 (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (log.f64 t) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (log.f64 t) 1/6)) (pow.f64 (log.f64 t) 1/6) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 t) 1 (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (log.f64 t) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (log.f64 t) 1/6)) (pow.f64 (log.f64 t) 1/6) (neg.f64 (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 y z))) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (*.f64 (cbrt.f64 (+.f64 y z)) (*.f64 -1 (cbrt.f64 (pow.f64 (+.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 t) 1 (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (log.f64 t)) (pow.f64 (cbrt.f64 (log.f64 t)) 2) (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (log.f64 t) (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2) (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (log.f64 t)) (sqrt.f64 (log.f64 t)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 t))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (pow.f64 (log.f64 t) 1/6)) (pow.f64 (log.f64 t) 1/6) (neg.f64 (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z)))))) (fma.f64 (neg.f64 (sqrt.f64 (+.f64 y z))) (*.f64 -1 (sqrt.f64 (+.f64 y z))) (*.f64 (sqrt.f64 (+.f64 y z)) (*.f64 -1 (sqrt.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (*.f64 t (exp.f64 (+.f64 y z)))) (cbrt.f64 (*.f64 t (exp.f64 (+.f64 y z)))))) (log.f64 (cbrt.f64 (*.f64 t (exp.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (*.f64 t (exp.f64 (+.f64 y z))))) (log.f64 (sqrt.f64 (*.f64 t (exp.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 t) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (log.f64 t) (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (log.f64 t) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (log.f64 t) (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 (log.f64 t) (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 t) (+.f64 y z))) 2) (cbrt.f64 (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (log.f64 t) (+.f64 y z))) (sqrt.f64 (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 t) 3) (pow.f64 (+.f64 y z) 3)) (+.f64 (pow.f64 (log.f64 t) 2) (-.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (log.f64 t) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 t) 2) (pow.f64 (+.f64 y z) 2)) (+.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (log.f64 t) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (log.f64 t) (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (log.f64 t) (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (log.f64 t) (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (log.f64 t) (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 t (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (fma.f64 t (exp.f64 (+.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 t (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 t 1)) (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 t (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 t 1)) (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 t 1)) (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 t (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 t 1)) (+.f64 1 (expm1.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y z))) t))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 y z)) (+.f64 1 (-.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y z))) (+.f64 1 (-.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (log.f64 t) (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (fma.f64 t (exp.f64 (+.f64 y z)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (log.f64 t) (+.f64 y z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 t) (+.f64 y z)) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 y) x) 1) (+.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))) (cbrt.f64 (exp.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))))) (log.f64 (cbrt.f64 (exp.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 2) (cbrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) (sqrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 3) (pow.f64 (+.f64 (log.f64 t) (+.f64 y z)) 3)) (fma.f64 (*.f64 (log.f64 y) x) (*.f64 (log.f64 y) x) (-.f64 (pow.f64 (+.f64 (log.f64 t) (+.f64 y z)) 2) (*.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 t) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (log.f64 y) x) (*.f64 (log.f64 y) x)) (pow.f64 (+.f64 (log.f64 t) (+.f64 y z)) 2)) (-.f64 (*.f64 (log.f64 y) x) (+.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 t (exp.f64 (+.f64 y z))) (exp.f64 (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (fma.f64 t (exp.f64 (+.f64 y z)) -1)) (exp.f64 (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (log.f64 y) x)) (+.f64 1 (fma.f64 t (exp.f64 (+.f64 y z)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",95],["egg-rr",26],["egg-rr",21]],"stop":[["node limit",1]],"time":62.072021484375,"type":"rewrite"},{"count":[[280,206]],"egraph":[[4,6013,1152,0.025461708],[3,1880,1152,0.014564125],[2,681,1152,0.004492083],[1,255,1152,0.001562833],[0,77,1382,0.000471417]],"inputs":[["(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(pow.f64 (log.f64 t) 1/3)","(pow.f64 (log.f64 t) 1/3)","(pow.f64 (log.f64 t) 1/3)","(pow.f64 (log.f64 t) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(pow.f64 (pow.f64 (log.f64 t) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 t)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 t)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 t)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 t)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 t)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 t) 2)) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 t) 2))","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (log.f64 t) 1/3)","(cbrt.f64 (log.f64 t))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 t))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 t))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 t))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 t))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 t))))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))) 1/3)","(cbrt.f64 (log.f64 t))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t))))) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) z)","(fma.f64 1 (log.f64 t) (neg.f64 z))","(-.f64 (log.f64 t) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) y)","(fma.f64 1 (log.f64 t) (neg.f64 y))","(-.f64 (log.f64 t) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) z)","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (*.f64 -1 y))) z)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 t)) (+.f64 y z))","(-.f64 (*.f64 (log.f64 t) 1) (+.f64 y z))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 t)))) (*.f64 (log.f64 y) x)) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 t)))))) (+.f64 y z))","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y)","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (log.f64 y) x) (*.f64 (pow.f64 1 1/3) (log.f64 t)))) y)","(-.f64 (fma.f64 (log.f64 y) x (*.f64 (log.f64 t) 1)) (+.f64 y z))","(-.f64 (-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (log.f64 y) x (-.f64 (log.f64 t) z)) y)"]],"stop":[["node limit",1]],"time":53.616943359375,"type":"simplify"},{"compiler":[[6198,2182]],"time":46.802978515625,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 3) (+.f64 y z))","fresh",0.2627525879159781],["(fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.22369008791597814],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","next",0.16701127930532605],["(-.f64 (/.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (log.f64 t) 2)) (-.f64 (*.f64 x (log.f64 y)) (log.f64 t))) (+.f64 y z))","fresh",15.8046875],["(fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",35.57326127930533],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","done",0.13738251953688405]],"compiler":[[17,12],[20,13],[21,14],[27,16],[21,11],[21,13],[17,12],[20,13],[21,14],[27,16],[21,11]],"count":[[242,6]],"kept":[{"done":[0,0],"fresh":[5,5],"new":[236,0],"picked":[1,1]}],"min-error":[0.015625],"time":72.85009765625,"type":"prune"},{"compiler":[[58,24]],"locations":[["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))",0.11328125,true],["(cbrt.f64 (pow.f64 (log.f64 y) 2))",0.12890625,true],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))",0.27734375,true],["(pow.f64 (log.f64 y) 2)",0.4716987793053261,true]],"time":15.43994140625,"type":"localize"},{"count":[[4,92]],"series":[["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","z","-inf",0.22216796875],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","z","inf",1.19189453125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","z","0",0.884033203125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","t","-inf",0.261962890625],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","t","inf",0.22900390625],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","t","0",1.791015625],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","y","-inf",0.715087890625],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","y","inf",0.721923828125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","y","0",0.547119140625],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","x","-inf",0.298828125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","x","inf",0.235107421875],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","x","0",0.7490234375],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","-inf",0.922119140625],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","inf",0.762939453125],["(cbrt.f64 (pow.f64 (log.f64 y) 2))","y","0",0.755859375],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","-inf",1.2958984375],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","inf",0.943115234375],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","0",0.962158203125],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","-inf",0.32177734375],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","inf",0.35205078125],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","0",8.953125],["(pow.f64 (log.f64 y) 2)","y","-inf",0.381103515625],["(pow.f64 (log.f64 y) 2)","y","inf",0.3291015625],["(pow.f64 (log.f64 y) 2)","y","0",0.426025390625]],"time":24.614990234375,"type":"series"},{"count":[[4,102]],"egraph":[[2,4113,40,0.03040425],[1,314,42,0.00565275],[0,15,52,0.00034225]],"inputs":[["(pow.f64 (log.f64 y) 2)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 y (log.f64 y))) (cbrt.f64 (pow.f64 y (log.f64 y))))) (log.f64 (cbrt.f64 (pow.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (log.f64 y)))) (log.f64 (sqrt.f64 (pow.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (log.f64 y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (cbrt.f64 (pow.f64 (log.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (log.f64 y)) 3) (sqrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) 1) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (cbrt.f64 (log.f64 y))) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (log.f64 y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (log.f64 y) 2)))) (cbrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (log.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (log.f64 y) 2))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (log.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 y) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 (pow.f64 (log.f64 y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 x) (*.f64 2/3 (log.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 2/3 (log.f64 (log.f64 y)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)))) (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 1/6) (*.f64 (pow.f64 (log.f64 y) 1/6) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)))) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (log.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 t) (+.f64 y z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 y)) 1) (-.f64 (log.f64 t) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)))) (cbrt.f64 (exp.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)))))) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (log.f64 y) (-.f64 (log.f64 t) y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))) (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))) 2) (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))) (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 3)) (fma.f64 (*.f64 x (log.f64 y)) (*.f64 x (log.f64 y)) (-.f64 (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 2) (*.f64 (*.f64 x (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (log.f64 y)) (*.f64 x (log.f64 y))) (pow.f64 (-.f64 (log.f64 t) (+.f64 y z)) 2)) (-.f64 (*.f64 x (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 t (exp.f64 (+.f64 y z))) (exp.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (log.f64 t) (+.f64 y z)))) (exp.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x (log.f64 y))) (+.f64 1 (expm1.f64 (-.f64 (log.f64 t) (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))) 1))))))"]],"rules":[["egg-rr",32],["egg-rr",27],["egg-rr",20],["egg-rr",23]],"stop":[["node limit",1]],"time":55.612060546875,"type":"rewrite"},{"count":[[194,133]],"egraph":[[4,6250,1071,0.025149625],[3,1720,1071,0.013950708],[2,564,1071,0.003961],[1,216,1071,0.00132225],[0,72,1219,0.000407]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t)) (+.f64 y z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 (/.f64 1 y)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(-.f64 (log.f64 t) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t)) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 (*.f64 1 (log.f64 y)) x)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 (*.f64 1 (log.f64 y)) x)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) z)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) z)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) z)","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x)) (fma.f64 -1 y (log.f64 t))) z)","(-.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x) (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (neg.f64 (log.f64 y)) (*.f64 x (cbrt.f64 -1)) (-.f64 (log.f64 t) y)) z)","(-.f64 (log.f64 t) (+.f64 (+.f64 y z) (*.f64 (log.f64 y) (*.f64 x (cbrt.f64 -1)))))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x)) (fma.f64 -1 y (log.f64 t))) z)","(-.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x) (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (neg.f64 (log.f64 y)) (*.f64 x (cbrt.f64 -1)) (-.f64 (log.f64 t) y)) z)","(-.f64 (log.f64 t) (+.f64 (+.f64 y z) (*.f64 (log.f64 y) (*.f64 x (cbrt.f64 -1)))))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x)) (fma.f64 -1 y (log.f64 t))) z)","(-.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x) (-.f64 (log.f64 t) y)) z)","(-.f64 (fma.f64 (neg.f64 (log.f64 y)) (*.f64 x (cbrt.f64 -1)) (-.f64 (log.f64 t) y)) z)","(-.f64 (log.f64 t) (+.f64 (+.f64 y z) (*.f64 (log.f64 y) (*.f64 x (cbrt.f64 -1)))))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) (+.f64 (*.f64 -1 y) (log.f64 t))) z)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 t))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))) (+.f64 y z))","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (log.f64 t) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) y)","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) y)","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) y))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) (log.f64 t))) y)","(-.f64 (fma.f64 1 (*.f64 (log.f64 y) x) (log.f64 t)) (+.f64 y z))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (fma.f64 (log.f64 y) x (log.f64 t)) (+.f64 y z))"]],"stop":[["node limit",1]],"time":50.868896484375,"type":"simplify"},{"compiler":[[2501,887]],"time":20.359130859375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 3) (+.f64 y z))","fresh",0.2627525879159781],["(fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.22369008791597814],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","done",0.16701127930532605],["(-.f64 (/.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (log.f64 t) 2)) (-.f64 (*.f64 x (log.f64 y)) (log.f64 t))) (+.f64 y z))","fresh",15.8046875],["(fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",35.57326127930533],["(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","done",0.13738251953688405],["(fma.f64 (*.f64 x (-.f64 (exp.f64 (log1p.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)))) 1)) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.27676270745261006],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))) 3) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","fresh",0.26011022930482175]],"compiler":[[17,12],[20,13],[21,14],[27,16],[21,11],[21,13],[25,18],[24,17]],"count":[[139,8]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[133,2],"picked":[1,1]}],"min-error":[0.00390625],"time":34.5849609375,"type":"prune"},{"accuracy":[0.08203125],"baseline":[0.08203125],"branch":[["x",0.08203125,1],["y",0.08203125,1],["z",0.08203125,1],["t",0.08203125,1],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))",0.08203125,1],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z)",0.08203125,1],["(-.f64 (*.f64 x (log.f64 y)) y)",0.08203125,1],["(log.f64 t)",0.08203125,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[15,10],[12,8],[10,7],[6,5],[200,67]],"count":[[12,1]],"inputs":[["(fma.f64 (*.f64 x (-.f64 (exp.f64 (log1p.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)))) 1)) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))) 3) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","(fma.f64 (log.f64 y) x (fma.f64 (pow.f64 (cbrt.f64 (log.f64 t)) 2) (cbrt.f64 (log.f64 t)) (neg.f64 (+.f64 y z))))","(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))","(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) 3) (+.f64 y z))","(fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (-.f64 (log.f64 t) (+.f64 y z)))","(-.f64 (/.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (log.f64 t) 2)) (-.f64 (*.f64 x (log.f64 y)) (log.f64 t))) (+.f64 y z))","(fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (-.f64 (log.f64 t) (+.f64 y z)))","(fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (log.f64 t)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (log.f64 t))) (neg.f64 (+.f64 y z)))","(-.f64 (fma.f64 x (log.f64 y) (log.f64 t)) (+.f64 y z))","(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))"]],"link":["."],"name":["Numeric.SpecFunctions:incompleteGamma from math-functions-0.1.5.2, A"],"oracle":[42.124936352315075],"outputs":[["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))"]],"time":44.25390625,"times":[["x",5.0888671875],["y",4.971923828125],["z",5.05810546875],["t",4.97021484375],["(+.f64 (-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z) (log.f64 t))",5.3349609375],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) y) z)",5.195068359375],["(-.f64 (*.f64 x (log.f64 y)) y)",5.0830078125],["(log.f64 t)",5.20703125]],"type":"regimes"},{"compiler":[[14,9]],"egraph":[[5,37,15,0.000204667],[4,35,15,0.000161958],[3,30,15,0.000119875],[2,22,15,8.0667e-5],[1,13,15,4.6e-5],[0,10,15,1.8375e-5]],"inputs":[["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (log.f64 y) x (-.f64 (log.f64 t) (+.f64 y z)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.53515625,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[14,9]],"remove-preprocessing":[[]],"time":8.569091796875,"type":"end"}]
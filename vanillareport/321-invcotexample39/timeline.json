[{"compiler":[[16,12]],"method":["search"],"sampling":[[12,0.4964209899902344,0.00048526000976562505,0.50309375],[11,0.49593572998046875,0.00097052001953125,0.50309375],[10,0.4949652099609375,0.0019410400390625,0.50309375],[9,0.493024169921875,0.003882080078125,0.5030937500000001],[8,0.48914208984375,0.00776416015625,0.50309375],[7,0.4813779296875,0.0155283203125,0.50309375],[6,0.465849609375,0.031056640625,0.50309375],[5,0.43479296875,0.06211328125,0.5030937499999999],[4,0.3726796875,0.1242265625,0.50309375],[3,0.248453125,0.248453125,0.5030937500000001],[2,0.0,0.49690625,0.50309375],[1,0.0,0.49690625,0.50309375],[0,0.0,0.49690625,0.50309375]],"time":2.10009765625,"type":"analyze"},{"outcomes":[["body",4096,"valid",105.25634765625,224],["body",512,"valid",115.908203125,1075],["body",1024,"valid",578.66015625,2151],["body",256,"valid",39.831298828125,750],["body",2048,"valid",3997.15087890625,4056]],"time":4845.330810546875,"type":"sample"},{"compiler":[[9,7]],"egraph":[[0,1,1,1e-6],[11,232,12,0.003651416],[10,230,12,0.0031453740000000003],[9,204,12,0.002618416],[8,168,12,0.002008624],[7,124,12,0.001446791],[6,90,12,0.000995999],[5,53,12,0.000595208],[4,35,12,0.000363416],[3,25,12,0.000247582],[2,17,12,0.00015724899999999998],[1,11,12,9.5416e-5],[0,7,12,4.6708e-5]],"inputs":[["0"],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":26.43310546875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,232,12,0.00363879],[10,230,12,0.0031244149999999997],[9,204,12,0.00260029],[8,168,12,0.0019948319999999998],[7,124,12,0.0014356649999999998],[6,90,12,0.0009897489999999998],[5,53,12,0.0005914569999999999],[4,35,12,0.00036274899999999994],[3,25,12,0.00024641599999999995],[2,17,12,0.00015579099999999999],[1,11,12,9.383199999999999e-5],[0,7,12,4.5666e-5]],"inputs":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))"]],"stop":[["saturated",1]],"time":14.35791015625,"type":"simplify"},{"compiler":[[17,12]],"time":0.38720703125,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","next",59.96451796393683]],"compiler":[[9,7],[9,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[59.96451796393683],"time":0.86181640625,"type":"prune"},{"compiler":[[20,12]],"locations":[["(/.f64 1 (tan.f64 x))",0.00390625,true],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))",2.291866200877253,true]],"time":4.795166015625,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 1 (tan.f64 x))","x","-inf",0.33984375],["(/.f64 1 (tan.f64 x))","x","inf",0.35498046875],["(/.f64 1 (tan.f64 x))","x","0",0.197998046875],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","x","-inf",0.590087890625],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","x","inf",0.659912109375],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","x","0",0.5859375]],"time":2.81494140625,"type":"series"},{"count":[[2,64]],"egraph":[[2,2365,18,0.020590583000000003],[1,160,18,0.003062416],[0,7,18,0.00021425]],"inputs":[["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))","(/.f64 1 (tan.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (*.f64 (/.f64 -1 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) (fma.f64 (/.f64 -1 (tan.f64 x)) 1 (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (tan.f64 x)))) (cbrt.f64 (pow.f64 (tan.f64 x) -2)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) (fma.f64 (neg.f64 (pow.f64 (tan.f64 x) -1/2)) (pow.f64 (tan.f64 x) -1/2) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (tan.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))) 2) (cbrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))) (sqrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 x) x) (/.f64 (/.f64 1 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x -3) (pow.f64 (tan.f64 x) -3)) (/.f64 1 (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 (tan.f64 x) -2) (/.f64 (/.f64 1 x) (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x -2) (pow.f64 (tan.f64 x) -2)) (/.f64 1 (+.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x -1/2) (pow.f64 (tan.f64 x) -1/2)) (-.f64 (pow.f64 x -1/2) (pow.f64 (tan.f64 x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (tan.f64 x) x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 (tan.f64 x) -2) (/.f64 (/.f64 1 x) (tan.f64 x)))) (-.f64 (pow.f64 x -3) (pow.f64 (tan.f64 x) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) (-.f64 (pow.f64 x -2) (pow.f64 (tan.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (tan.f64 x) x) (*.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -3) (pow.f64 (tan.f64 x) -3)) (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 (tan.f64 x) -2) (/.f64 (/.f64 1 x) (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -2) (pow.f64 (tan.f64 x) -2)) (+.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (tan.f64 x) x)) (neg.f64 (*.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x -3) (pow.f64 (tan.f64 x) -3))) (neg.f64 (+.f64 (pow.f64 x -2) (+.f64 (pow.f64 (tan.f64 x) -2) (/.f64 (/.f64 1 x) (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x -2) (pow.f64 (tan.f64 x) -2))) (neg.f64 (+.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (tan.f64 x)) (*.f64 (neg.f64 x) 1)) (*.f64 (neg.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (tan.f64 x)) (*.f64 x -1)) (*.f64 x (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1 (neg.f64 (tan.f64 x))) (*.f64 (neg.f64 x) -1)) (*.f64 (neg.f64 x) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x -3) (pow.f64 (/.f64 -1 (tan.f64 x)) 3)) (+.f64 (pow.f64 x -2) (-.f64 (*.f64 (/.f64 -1 (tan.f64 x)) (/.f64 -1 (tan.f64 x))) (*.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -2) (*.f64 (/.f64 -1 (tan.f64 x)) (/.f64 -1 (tan.f64 x)))) (-.f64 (/.f64 1 x) (/.f64 -1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 x) x) x) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 1 (cbrt.f64 x)) (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 -1 (tan.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) -2)) (/.f64 1 (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 x) -1/2) (pow.f64 (tan.f64 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) -1) (pow.f64 (cbrt.f64 (tan.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (tan.f64 x)) -1) (pow.f64 (sqrt.f64 (tan.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (tan.f64 x))))))))"]],"rules":[["egg-rr",21],["egg-rr",43]],"stop":[["node limit",1]],"time":41.919921875,"type":"rewrite"},{"count":[[88,83]],"egraph":[[9,6495,275,0.045705250999999995],[8,4570,275,0.032720042],[7,4072,275,0.023253667],[6,3046,275,0.016679626],[5,2187,275,0.010850001],[4,1054,275,0.006366793],[3,571,275,0.003182876],[2,220,275,0.0015493759999999999],[1,96,275,0.000638543],[0,39,281,0.000197834]],"inputs":[["(*.f64 1/3 x)","(+.f64 (*.f64 1/3 x) (*.f64 1/45 (pow.f64 x 3)))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (*.f64 1/45 (pow.f64 x 3))))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(/.f64 1 x)","(+.f64 (*.f64 -1/3 x) (/.f64 1 x))","(+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x)))","(+.f64 (*.f64 -2/945 (pow.f64 x 5)) (+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x))))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 x)","(+.f64 (*.f64 1/3 x) (*.f64 1/45 (pow.f64 x 3)))","(fma.f64 1/3 x (*.f64 1/45 (pow.f64 x 3)))","(fma.f64 1/45 (pow.f64 x 3) (*.f64 1/3 x))","(*.f64 x (fma.f64 1/45 (*.f64 x x) 1/3))","(*.f64 x (fma.f64 x (*.f64 x 1/45) 1/3))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (*.f64 1/45 (pow.f64 x 3))))","(fma.f64 1/3 x (fma.f64 2/945 (pow.f64 x 5) (*.f64 1/45 (pow.f64 x 3))))","(fma.f64 1/3 x (fma.f64 1/45 (pow.f64 x 3) (*.f64 2/945 (pow.f64 x 5))))","(fma.f64 2/945 (pow.f64 x 5) (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/3 x)))","(fma.f64 x (fma.f64 1/45 (*.f64 x x) 1/3) (*.f64 2/945 (pow.f64 x 5)))","(fma.f64 1/45 (pow.f64 x 3) (fma.f64 2/945 (pow.f64 x 5) (*.f64 1/3 x)))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(fma.f64 1/3 x (fma.f64 2/945 (pow.f64 x 5) (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))))","(fma.f64 1/3 x (fma.f64 1/45 (pow.f64 x 3) (fma.f64 2/945 (pow.f64 x 5) (*.f64 1/4725 (pow.f64 x 7)))))","(fma.f64 x (fma.f64 1/45 (*.f64 x x) 1/3) (fma.f64 2/945 (pow.f64 x 5) (*.f64 1/4725 (pow.f64 x 7))))","(fma.f64 2/945 (pow.f64 x 5) (fma.f64 1/3 x (fma.f64 1/45 (pow.f64 x 3) (*.f64 1/4725 (pow.f64 x 7)))))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(neg.f64 (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(fma.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(fma.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(fma.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)))","(neg.f64 (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 (neg.f64 (cos.f64 x)) (sin.f64 x))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(fma.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(fma.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (*.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 1 x))","(fma.f64 -1 (/.f64 (cos.f64 x) (sin.f64 x)) (/.f64 1 x))","(-.f64 (/.f64 1 x) (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 1 x)","(+.f64 (*.f64 -1/3 x) (/.f64 1 x))","(fma.f64 -1/3 x (/.f64 1 x))","(fma.f64 x -1/3 (/.f64 1 x))","(+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x)))","(fma.f64 -1/45 (pow.f64 x 3) (fma.f64 -1/3 x (/.f64 1 x)))","(fma.f64 (pow.f64 x 3) -1/45 (fma.f64 x -1/3 (/.f64 1 x)))","(fma.f64 x -1/3 (fma.f64 (pow.f64 x 3) -1/45 (/.f64 1 x)))","(fma.f64 x (fma.f64 -1/45 (*.f64 x x) -1/3) (/.f64 1 x))","(+.f64 (*.f64 -2/945 (pow.f64 x 5)) (+.f64 (*.f64 -1/45 (pow.f64 x 3)) (+.f64 (*.f64 -1/3 x) (/.f64 1 x))))","(fma.f64 -2/945 (pow.f64 x 5) (fma.f64 -1/45 (pow.f64 x 3) (fma.f64 -1/3 x (/.f64 1 x))))","(fma.f64 (pow.f64 x 5) -2/945 (fma.f64 (pow.f64 x 3) -1/45 (fma.f64 x -1/3 (/.f64 1 x))))","(fma.f64 (pow.f64 x 3) -1/45 (fma.f64 (pow.f64 x 5) -2/945 (fma.f64 x -1/3 (/.f64 1 x))))","(fma.f64 x -1/3 (fma.f64 (pow.f64 x 3) -1/45 (fma.f64 (pow.f64 x 5) -2/945 (/.f64 1 x))))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))","(/.f64 (cos.f64 x) (sin.f64 x))"]],"stop":[["node limit",1]],"time":62.93212890625,"type":"simplify"},{"compiler":[[1123,727]],"time":14.972900390625,"type":"eval"},{"alts":[["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","next",0.359375]],"compiler":[[22,18],[22,18]],"count":[[84,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[83,1],"picked":[1,0]}],"min-error":[0.359375],"time":6.8291015625,"type":"prune"},{"compiler":[[85,68]],"locations":[["(*.f64 1/4725 (pow.f64 x 7))",0.05078125,true],["(*.f64 1/45 (pow.f64 x 3))",0.09765625,true],["(*.f64 2/945 (pow.f64 x 5))",0.11328125,true],["(*.f64 1/3 x)",0.359375,true]],"time":20.044921875,"type":"localize"},{"count":[[4,0]],"series":[["(*.f64 1/4725 (pow.f64 x 7))","x","-inf",0.3369140625],["(*.f64 1/4725 (pow.f64 x 7))","x","inf",0.345947265625],["(*.f64 1/4725 (pow.f64 x 7))","x","0",0.498046875],["(*.f64 1/45 (pow.f64 x 3))","x","-inf",0.342041015625],["(*.f64 1/45 (pow.f64 x 3))","x","inf",0.320068359375],["(*.f64 1/45 (pow.f64 x 3))","x","0",0.3779296875],["(*.f64 2/945 (pow.f64 x 5))","x","-inf",0.343017578125],["(*.f64 2/945 (pow.f64 x 5))","x","inf",0.362060546875],["(*.f64 2/945 (pow.f64 x 5))","x","0",0.52392578125],["(*.f64 1/3 x)","x","-inf",0.707763671875],["(*.f64 1/3 x)","x","inf",0.294921875],["(*.f64 1/3 x)","x","0",0.31201171875]],"time":4.886962890625,"type":"series"},{"count":[[4,80]],"egraph":[[2,3538,25,0.028227875],[1,344,25,0.005716291],[0,16,25,0.000634]],"inputs":[["(*.f64 1/3 x)","(*.f64 2/945 (pow.f64 x 5))","(*.f64 1/45 (pow.f64 x 3))","(*.f64 1/4725 (pow.f64 x 7))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2)) (log.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (cbrt.f64 (exp.f64 x)))) (log.f64 (sqrt.f64 (cbrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 1/9) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/3 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 1/3 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 1/3 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 1/3 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 1/3 x))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 2/945 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 2/945) (pow.f64 x 5))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 2/945) (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 2/945) (pow.f64 x 5)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 2/945) (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 2/945 (pow.f64 x 5)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/945 (pow.f64 x 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 4/893025 (pow.f64 x 10)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2/945 (pow.f64 x 5)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/945 (pow.f64 x 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2/945) (pow.f64 x 5/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4/893025 (pow.f64 x 10)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 2/945) (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 2/945 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2/945 (pow.f64 x 5)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2/945 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2/945 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2/945 (pow.f64 x 5))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 2/945 (pow.f64 x 5))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 2/945 (pow.f64 x 5)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 2/945 (pow.f64 x 5)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 2/945) (pow.f64 x 5/2))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/45 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 1/45) (pow.f64 x 3))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 1/45) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/45) (pow.f64 x 3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/45) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/45 (pow.f64 x 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/45 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2025 (pow.f64 x 6)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cbrt.f64 1/45)) 9) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 1/45)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/45) (pow.f64 x 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/2025 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/45) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/45 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cbrt.f64 1/45)) 9))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/45 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/45 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 3 (log.f64 x) (log.f64 1/45)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 3 (log.f64 x) (log.f64 1/45)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 x (cbrt.f64 1/45)) 9)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (cbrt.f64 1/45))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 1/45) (pow.f64 x 3/2))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/4725 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 1/4725) (pow.f64 x 7))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 1/4725) (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/4725) (pow.f64 x 7)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/4725) (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/4725 (pow.f64 x 7)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/4725 (pow.f64 x 7)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 14) 1/22325625) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/4725 (pow.f64 x 7)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/4725) (pow.f64 x 7/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 14) 1/22325625))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/4725) (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/4725 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/4725 (pow.f64 x 7)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/4725 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 7 (log.f64 x) (log.f64 1/4725)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 7 (log.f64 x) (log.f64 1/4725)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (fma.f64 7 (log.f64 x) (log.f64 1/4725))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 1/4725 (pow.f64 x 7)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 1/4725) (pow.f64 x 7/2))) 2))))))"]],"rules":[["egg-rr",20],["egg-rr",20],["egg-rr",20],["egg-rr",20]],"stop":[["node limit",1]],"time":50.89306640625,"type":"rewrite"},{"count":[[80,80]],"egraph":[[0,0,0,2.0208e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.633056640625,"type":"simplify"},{"compiler":[[1997,1651]],"time":27.06298828125,"type":"eval"},{"alts":[["(+.f64 (sqrt.f64 (*.f64 (*.f64 x x) 1/9)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",43.55300063067893],["(+.f64 (pow.f64 (sqrt.f64 (*.f64 1/3 x)) 2) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",31.81353383791598],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","next",0.7150728516639131],["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","done",0.359375]],"compiler":[[25,20],[25,21],[25,21],[22,18],[25,20],[25,21],[25,21]],"count":[[81,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[80,3],"picked":[1,1]}],"min-error":[0.1640625],"time":15.239990234375,"type":"prune"},{"compiler":[[98,79]],"locations":[["(*.f64 2/945 (pow.f64 x 5))",0.11328125,false],["(cbrt.f64 (*.f64 1/3 x))",0.14128876953688402,true],["(*.f64 1/3 x)",0.359375,false],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)",0.6723978028217028,true]],"time":24.0009765625,"type":"localize"},{"count":[[2,0]],"series":[["(cbrt.f64 (*.f64 1/3 x))","x","-inf",0.31396484375],["(cbrt.f64 (*.f64 1/3 x))","x","inf",0.27783203125],["(cbrt.f64 (*.f64 1/3 x))","x","0",0.31591796875],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)","x","-inf",1.005859375],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)","x","inf",0.609130859375],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)","x","0",1.929931640625]],"time":4.532958984375,"type":"series"},{"count":[[2,49]],"egraph":[[2,1376,10,0.014971292],[1,148,10,0.002241875],[0,7,10,0.000253958]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)","(cbrt.f64 (*.f64 1/3 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 x)) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) (cbrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/3 x) 1/6) (*.f64 (pow.f64 (*.f64 1/3 x) 1/6) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/3 x)) (sqrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) 3) (cbrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 1/3) 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 1/3 x) 1/6) 3) (pow.f64 (pow.f64 (*.f64 1/3 x) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) 1) (cbrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) (cbrt.f64 1/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) (pow.f64 (*.f64 1/3 x) 1/6)) (pow.f64 (*.f64 1/3 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 1/3 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/3 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 1/3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) (pow.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/3 x) 1/6) (pow.f64 (*.f64 1/3 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 1/3 x)) 1/3) (pow.f64 (sqrt.f64 (*.f64 1/3 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/3 x) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 1/3 x))))))))"]],"rules":[["egg-rr",21],["egg-rr",28]],"stop":[["node limit",1]],"time":34.412109375,"type":"rewrite"},{"count":[[49,49]],"egraph":[[0,0,0,2.0209e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":11.0029296875,"type":"simplify"},{"compiler":[[2482,2072]],"time":33.60302734375,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","done",0.7150728516639131],["(+.f64 (*.f64 (sqrt.f64 (*.f64 1/3 x)) (sqrt.f64 (*.f64 1/3 x))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",31.80962758791598],["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","done",0.359375],["(+.f64 (pow.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 x)) 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",1.0185931950687521],["(+.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 1/3 x)))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",1.0250332511557736],["(+.f64 (*.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.7704241212007971],["(+.f64 (sqrt.f64 (*.f64 (*.f64 x x) 1/9)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",43.55300063067893],["(+.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","next",0.7078477539794926],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.992071972357579],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1/3)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.7961466309692392],["(+.f64 (*.f64 (cbrt.f64 (*.f64 1/3 x)) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.7336466309692391]],"compiler":[[25,21],[28,23],[22,18],[26,22],[39,33],[28,22],[25,20],[31,26],[39,33],[28,22],[30,25],[28,23],[26,22],[39,33],[28,22],[25,20],[31,26],[39,33],[28,22],[30,25]],"count":[[93,11]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[89,8],"picked":[1,1]}],"min-error":[0.04296875],"time":21.0869140625,"type":"prune"},{"compiler":[[130,102]],"locations":[["(*.f64 1/3 x)",0.359375,false],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))",0.375,true],["(*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))",0.4225387695368841,true],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)",0.48046875,true]],"time":31.904052734375,"type":"localize"},{"count":[[3,24]],"series":[["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))","x","-inf",0.616943359375],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))","x","inf",0.410888671875],["(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))","x","0",0.526123046875],["(*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))","x","-inf",2.221923828125],["(*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))","x","inf",0.283935546875],["(*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))","x","0",1.6298828125],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)","x","-inf",0.413818359375],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)","x","inf",0.398193359375],["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)","x","0",0.474853515625]],"time":7.10693359375,"type":"series"},{"count":[[3,45]],"egraph":[[2,2330,25,0.019100709],[1,217,25,0.003463584],[0,11,40,0.000314584]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)","(*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))","(*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 x)) (cbrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/9) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/3 x) 1/6) (sqrt.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/3 x)) (pow.f64 (*.f64 1/3 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 1/3 x)) (cbrt.f64 1/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 1/3 x)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (*.f64 1/3 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/3 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/3 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (*.f64 1/3 x)) (pow.f64 x 1/6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x (*.f64 1/9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x))))))))"]],"rules":[["egg-rr",13],["egg-rr",13],["egg-rr",19]],"stop":[["node limit",1]],"time":40.930908203125,"type":"rewrite"},{"count":[[69,52]],"egraph":[[7,7281,252,0.044291917],[6,5364,252,0.032431625],[5,3380,252,0.018637292],[4,2100,252,0.008805083],[3,521,252,0.003965167],[2,135,252,0.001053167],[1,46,252,0.000355167],[0,20,252,0.000113458]],"inputs":[["(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 (*.f64 x (*.f64 (cbrt.f64 1/3) (pow.f64 (cbrt.f64 -1/3) 2))) (neg.f64 (cbrt.f64 -1)))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 (*.f64 x (cbrt.f64 -1)))))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 (*.f64 x (*.f64 (cbrt.f64 1/3) (pow.f64 (cbrt.f64 -1/3) 2))) (neg.f64 (cbrt.f64 -1)))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 (*.f64 x (cbrt.f64 -1)))))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 (*.f64 x (*.f64 (cbrt.f64 1/3) (pow.f64 (cbrt.f64 -1/3) 2))) (neg.f64 (cbrt.f64 -1)))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 (*.f64 x (cbrt.f64 -1)))))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 x (cbrt.f64 1/3)))))","(*.f64 (*.f64 x (*.f64 (cbrt.f64 1/3) (pow.f64 (cbrt.f64 -1/3) 2))) (neg.f64 (cbrt.f64 -1)))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 1/3) (neg.f64 x))))","(*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (*.f64 (cbrt.f64 1/3) (neg.f64 (*.f64 x (cbrt.f64 -1)))))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 (pow.f64 (cbrt.f64 1/3) 2) x)","(*.f64 x (pow.f64 (cbrt.f64 1/3) 2))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2)) (neg.f64 (cbrt.f64 -1)))","(*.f64 x (neg.f64 (*.f64 (cbrt.f64 -1) (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (neg.f64 x)))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2)) (neg.f64 (cbrt.f64 -1)))","(*.f64 x (neg.f64 (*.f64 (cbrt.f64 -1) (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (neg.f64 x)))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2)) (neg.f64 (cbrt.f64 -1)))","(*.f64 x (neg.f64 (*.f64 (cbrt.f64 -1) (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (neg.f64 x)))","(*.f64 -1 (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) x)))","(neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (*.f64 x (pow.f64 (cbrt.f64 -1/3) 2)) (neg.f64 (cbrt.f64 -1)))","(*.f64 x (neg.f64 (*.f64 (cbrt.f64 -1) (pow.f64 (cbrt.f64 -1/3) 2))))","(*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 (cbrt.f64 -1/3) 2) (neg.f64 x)))"]],"stop":[["node limit",1]],"time":60.029052734375,"type":"simplify"},{"compiler":[[2257,1815]],"time":28.322998046875,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","done",0.7150728516639131],["(+.f64 (*.f64 (sqrt.f64 (*.f64 1/3 x)) (sqrt.f64 (*.f64 1/3 x))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",31.80962758791598],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1/3)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.7961466309692392],["(+.f64 (cbrt.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 3))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",42.019154482280285],["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","done",0.359375],["(+.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 1/3 x)))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",1.0250332511557736],["(+.f64 (*.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.7704241212007971],["(+.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 1/3 x)))))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.8268092286536595],["(+.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 1/9 (*.f64 x x))))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",29.995177019357286],["(+.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","done",0.7078477539794926],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.992071972357579],["(+.f64 (*.f64 (cbrt.f64 (*.f64 1/3 x)) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","fresh",0.7336466309692391]],"compiler":[[25,21],[28,23],[28,22],[32,26],[22,18],[39,33],[28,22],[35,28],[31,25],[31,26],[39,33],[30,25]],"count":[[83,12]],"kept":[{"done":[2,2],"fresh":[8,6],"new":[72,3],"picked":[1,1]}],"min-error":[0.0234375],"time":13.97705078125,"type":"prune"},{"accuracy":[0.359375],"baseline":[0.359375],"branch":[["x",0.359375,1],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))",0.359375,1]],"compiler":[[2,1],[9,7],[438,350]],"count":[[16,1]],"inputs":[["(+.f64 (cbrt.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 (*.f64 (*.f64 1/9 (*.f64 x x)) x)) 3))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 1/3 x)))))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 1/9 (*.f64 x x))))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (sqrt.f64 (*.f64 1/3 x)) (sqrt.f64 (*.f64 1/3 x))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (pow.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 x)) 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 1/3 x)))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/3 x))) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2))) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1/3)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 (cbrt.f64 (*.f64 1/3 x)) (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 2)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (sqrt.f64 (*.f64 (*.f64 x x) 1/9)) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (pow.f64 (sqrt.f64 (*.f64 1/3 x)) 2) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 x)) 3) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))","(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))"]],"link":["."],"name":["invcot (example 3.9)"],"oracle":[61.98149191716502],"outputs":[["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))"]],"time":16.078125,"times":[["x",6.323974609375],["(-.f64 (/.f64 1 x) (/.f64 1 (tan.f64 x)))",2.055908203125]],"type":"regimes"},{"compiler":[[22,18]],"egraph":[[1,26,31,5.3708e-5],[0,19,31,2.9875e-5]],"inputs":[["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 1/3 x) (+.f64 (*.f64 2/945 (pow.f64 x 5)) (+.f64 (*.f64 1/45 (pow.f64 x 3)) (*.f64 1/4725 (pow.f64 x 7)))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.634765625,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[22,18]],"remove-preprocessing":[[]],"time":12.64794921875,"type":"end"}]
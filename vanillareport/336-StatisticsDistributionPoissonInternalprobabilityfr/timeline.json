[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.16430985774326246,0.18332494513788333,0.6523651971188542],[11,0.15504609721767793,0.2827884792020541,0.562165423580268],[10,0.14822016840935248,0.30424139831393404,0.5475384332767135],[9,0.1404191069141234,0.36664989027576667,0.49293100281010993],[8,0.1404191069141234,0.5616764276564936,0.297904465429383],[7,0.1404191069141234,0.6084827966278681,0.2510980964580085],[6,0.09361273794274894,0.6552891655992426,0.2510980964580085],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":53.25390625,"type":"analyze"},{"outcomes":[["body",256,"invalid",251.543701171875,5424],["body",256,"valid",422.22119140625,8256]],"time":685.588134765625,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,2e-6],[6,5004,48,0.025967833000000003],[5,1226,48,0.012907708],[4,540,48,0.00428425],[3,299,48,0.001965208],[2,133,48,0.000902417],[1,55,48,0.000336708],[0,22,56,0.00010275]],"inputs":[["0","1","2"],["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","(exp.f64 (-.f64 (+.f64 y (*.f64 x (log.f64 x))) z))","(exp.f64 (-.f64 (+.f64 z (*.f64 y (log.f64 y))) x))","(exp.f64 (-.f64 (+.f64 x (*.f64 z (log.f64 z))) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","(exp.f64 (+.f64 x (-.f64 (*.f64 y (log.f64 y)) z)))","(exp.f64 (-.f64 (fma.f64 y (log.f64 y) x) z))","(/.f64 (pow.f64 y y) (exp.f64 (-.f64 z x)))","(exp.f64 (fma.f64 y (log.f64 y) (-.f64 x z)))","(exp.f64 (-.f64 (+.f64 y (*.f64 x (log.f64 x))) z))","(exp.f64 (-.f64 (fma.f64 x (log.f64 x) y) z))","(*.f64 (pow.f64 x x) (exp.f64 (-.f64 y z)))","(exp.f64 (-.f64 (+.f64 z (*.f64 y (log.f64 y))) x))","(exp.f64 (-.f64 (+.f64 (*.f64 y (log.f64 y)) z) x))","(exp.f64 (-.f64 (fma.f64 y (log.f64 y) z) x))","(*.f64 (pow.f64 y y) (exp.f64 (-.f64 z x)))","(/.f64 (pow.f64 y y) (exp.f64 (-.f64 x z)))","(exp.f64 (-.f64 (+.f64 x (*.f64 z (log.f64 z))) y))","(exp.f64 (-.f64 (fma.f64 z (log.f64 z) x) y))","(*.f64 (pow.f64 z z) (exp.f64 (-.f64 x y)))","(/.f64 (pow.f64 z z) (exp.f64 (-.f64 y x)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":49.925048828125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,7426,12,0.045462417000000005],[9,5979,12,0.034905125],[8,5281,12,0.02415625],[7,2562,12,0.015661167],[6,968,12,0.007361792],[5,313,12,0.003016584],[4,157,12,0.001301625],[3,89,12,0.000672708],[2,41,12,0.00032550000000000005],[1,18,12,0.00013700000000000002],[0,9,14,4.9917e-5]],"inputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","(exp.f64 (+.f64 x (-.f64 (*.f64 y (log.f64 y)) z)))","(exp.f64 (-.f64 (fma.f64 y (log.f64 y) x) z))","(*.f64 (pow.f64 y y) (exp.f64 (-.f64 x z)))","(/.f64 (pow.f64 y y) (exp.f64 (-.f64 z x)))"]],"stop":[["node limit",1]],"time":56.642822265625,"type":"simplify"},{"compiler":[[20,12]],"time":0.364990234375,"type":"eval"},{"alts":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","next",0]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0],"time":0.819091796875,"type":"prune"},{"compiler":[[35,8]],"locations":[["(+.f64 x (*.f64 y (log.f64 y)))",0.00390625,true],["(*.f64 y (log.f64 y))",0.32421875,true]],"time":6.799072265625,"type":"localize"},{"count":[[2,32]],"series":[["(+.f64 x (*.f64 y (log.f64 y)))","y","-inf",0.173095703125],["(+.f64 x (*.f64 y (log.f64 y)))","y","inf",0.1689453125],["(+.f64 x (*.f64 y (log.f64 y)))","y","0",0.181884765625],["(+.f64 x (*.f64 y (log.f64 y)))","x","-inf",0.171875],["(+.f64 x (*.f64 y (log.f64 y)))","x","inf",0.240966796875],["(+.f64 x (*.f64 y (log.f64 y)))","x","0",1.80712890625],["(*.f64 y (log.f64 y))","y","-inf",9.8251953125],["(*.f64 y (log.f64 y))","y","inf",5.9580078125],["(*.f64 y (log.f64 y))","y","0",17.10693359375]],"time":35.783935546875,"type":"series"},{"count":[[2,46]],"egraph":[[2,1744,13,0.017558249],[1,126,13,0.002362749],[0,6,15,0.000144916]],"inputs":[["(*.f64 y (log.f64 y))","(+.f64 x (*.f64 y (log.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (log.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (log.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 y (log.f64 y)))) (/.f64 (pow.f64 (*.f64 y (log.f64 y)) 2) (-.f64 x (*.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (log.f64 y) x)) (pow.f64 (cbrt.f64 (fma.f64 y (log.f64 y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (log.f64 y) x)) 2) (cbrt.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (log.f64 y) x)) (sqrt.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (log.f64 y)) 3)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 y (log.f64 y)) (-.f64 (*.f64 y (log.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (log.f64 y)) 2)) (/.f64 1 (-.f64 x (*.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 y (log.f64 y)) (-.f64 (*.f64 y (log.f64 y)) x))) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (log.f64 y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (*.f64 y (log.f64 y))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (log.f64 y)) 3)) (fma.f64 x x (*.f64 (*.f64 y (log.f64 y)) (-.f64 (*.f64 y (log.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (log.f64 y)) 3)) (+.f64 (pow.f64 (*.f64 y (log.f64 y)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 x y) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (log.f64 y)) 2)) (-.f64 x (*.f64 y (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (log.f64 y)) 3))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 y (log.f64 y)) (-.f64 (*.f64 y (log.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (log.f64 y)) 2))) (neg.f64 (-.f64 x (*.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (log.f64 y)) 2) (*.f64 x x)) (-.f64 (*.f64 y (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (log.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (log.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (log.f64 y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (log.f64 y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (pow.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (log.f64 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (log.f64 y))) 2) (cbrt.f64 (*.f64 y (log.f64 y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (log.f64 y))) (sqrt.f64 (*.f64 y (log.f64 y))) x)))))"]],"rules":[["egg-rr",35],["egg-rr",11]],"stop":[["node limit",1]],"time":40.19091796875,"type":"rewrite"},{"count":[[78,54]],"egraph":[[11,5924,195,0.061059792],[10,5740,195,0.045867417],[9,5604,195,0.038934709],[8,5326,195,0.032400667],[7,4280,195,0.025646],[6,2715,195,0.017461499999999998],[5,796,195,0.009869833],[4,348,195,0.0030395],[3,178,195,0.001398167],[2,77,195,0.000623292],[1,43,239,0.000274875],[0,20,239,0.000107375]],"inputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 y (log.f64 y))","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(*.f64 y (log.f64 y))","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","x","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 y (log.f64 y)) x)","(fma.f64 y (log.f64 y) x)","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))) x)","(fma.f64 y (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 (neg.f64 (log.f64 y)) (neg.f64 y))","(*.f64 y (log.f64 y))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(fma.f64 y (log.f64 y) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y) x)","(fma.f64 y (log.f64 y) x)"]],"stop":[["node limit",1]],"time":78.236083984375,"type":"simplify"},{"compiler":[[785,330]],"time":7.18798828125,"type":"eval"},{"alts":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))","done",0]],"compiler":[[12,8],[12,8]],"count":[[55,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[54,0],"picked":[1,1]}],"min-error":[0],"time":9.759033203125,"type":"prune"},{"compiler":[[12,8]],"egraph":[[4,21,14,0.000113624],[3,20,14,9.0749e-5],[2,18,14,6.7499e-5],[1,13,14,4.3874e-5],[0,9,14,1.8916e-5]],"inputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (-.f64 (+.f64 x (*.f64 y (log.f64 y))) z))"]],"stop":[["done",1],["saturated",1]],"time":8.3330078125,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":8.259033203125,"type":"end"}]
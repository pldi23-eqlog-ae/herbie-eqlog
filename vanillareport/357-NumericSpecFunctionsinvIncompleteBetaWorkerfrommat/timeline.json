[{"compiler":[[17,11]],"method":["search"],"sampling":[[12,0.17064822020813608,0.7113592950962015,0.11799248469566237],[11,0.04095557284995266,0.8951718065775367,0.06387262057251064],[10,0.03510477672853085,0.9010226026989585,0.06387262057251064],[9,0.023403184485687234,0.9439284409227184,0.03266837459159433],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":177.80517578125,"type":"analyze"},{"outcomes":[["body",512,"invalid",31.180908203125,224],["body",256,"invalid",124.822509765625,2303],["body",1024,"valid",231.82861328125,914],["body",1024,"invalid",50.086181640625,210],["body",512,"valid",84.329345703125,589],["body",2048,"valid",1.382080078125,3],["body",256,"valid",443.707275390625,6750]],"time":977.708984375,"type":"sample"},{"compiler":[[16,10]],"egraph":[[0,3,3,2.334e-6],[6,3245,64,0.020533043],[5,1187,64,0.008431376],[4,482,64,0.003349293],[3,194,64,0.001514876],[2,94,64,0.000569417],[1,62,64,0.00027537600000000003],[0,32,80,0.000118042]],"inputs":[["0","1","2"],["(+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y))","(+.f64 y (/.f64 (exp.f64 (*.f64 x (log.f64 (/.f64 x (+.f64 z x))))) x))","(+.f64 z (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 x y))))) y))","(+.f64 x (/.f64 (exp.f64 (*.f64 z (log.f64 (/.f64 z (+.f64 y z))))) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y))","(+.f64 x (/.f64 (pow.f64 (exp.f64 y) (log.f64 (/.f64 y (+.f64 y z)))) y))","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 y (/.f64 (exp.f64 (*.f64 x (log.f64 (/.f64 x (+.f64 z x))))) x))","(+.f64 y (/.f64 (pow.f64 (exp.f64 x) (log.f64 (/.f64 x (+.f64 x z)))) x))","(+.f64 y (/.f64 (pow.f64 (/.f64 x (+.f64 x z)) x) x))","(+.f64 z (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 x y))))) y))","(+.f64 z (/.f64 (pow.f64 (exp.f64 y) (log.f64 (/.f64 y (+.f64 x y)))) y))","(+.f64 z (/.f64 (pow.f64 (/.f64 y (+.f64 x y)) y) y))","(+.f64 x (/.f64 (exp.f64 (*.f64 z (log.f64 (/.f64 z (+.f64 y z))))) z))","(+.f64 x (/.f64 (pow.f64 (exp.f64 z) (log.f64 (/.f64 z (+.f64 y z)))) z))","(+.f64 x (/.f64 (pow.f64 (/.f64 z (+.f64 y z)) z) z))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":45.327880859375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[8,6716,16,0.029993],[7,3333,16,0.017176417],[6,881,16,0.007107626000000001],[5,331,16,0.002446209],[4,136,16,0.001018751],[3,57,16,0.000452334],[2,28,16,0.000219084],[1,19,16,0.000115834],[0,11,20,5.2084e-5]],"inputs":[["(+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y))","(+.f64 x (/.f64 (pow.f64 (exp.f64 y) (log.f64 (/.f64 y (+.f64 y z)))) y))","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))"]],"stop":[["node limit",1]],"time":41.385009765625,"type":"simplify"},{"compiler":[[27,15]],"time":0.39794921875,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","next",5.440442030053174]],"compiler":[[14,8],[14,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[5.440442030053174],"time":0.8720703125,"type":"prune"},{"compiler":[[41,8]],"locations":[["(/.f64 y (+.f64 y z))",0.00390625,true],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))",0.0078125,true],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)",0.015625,true],["(pow.f64 (/.f64 y (+.f64 y z)) y)",5.3228609069272155,true]],"time":6.5400390625,"type":"localize"},{"count":[[4,108]],"series":[["(/.f64 y (+.f64 y z))","z","-inf",0.225830078125],["(/.f64 y (+.f64 y z))","z","inf",0.200927734375],["(/.f64 y (+.f64 y z))","z","0",0.19091796875],["(/.f64 y (+.f64 y z))","y","-inf",0.1708984375],["(/.f64 y (+.f64 y z))","y","inf",0.23193359375],["(/.f64 y (+.f64 y z))","y","0",0.237060546875],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","z","-inf",0.4560546875],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","z","inf",0.424072265625],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","z","0",0.260986328125],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","y","-inf",0.296875],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","y","inf",0.281005859375],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","y","0",0.286865234375],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","x","-inf",0.216064453125],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","x","inf",0.251953125],["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","x","0",4.697998046875],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","z","-inf",0.658935546875],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","z","inf",0.64306640625],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","z","0",0.341796875],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","y","-inf",1.217041015625],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","y","inf",1.614990234375],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","y","0",0.326904296875],["(pow.f64 (/.f64 y (+.f64 y z)) y)","z","-inf",0.969970703125],["(pow.f64 (/.f64 y (+.f64 y z)) y)","z","inf",1.19091796875],["(pow.f64 (/.f64 y (+.f64 y z)) y)","z","0",0.572998046875],["(pow.f64 (/.f64 y (+.f64 y z)) y)","y","-inf",1.529052734375],["(pow.f64 (/.f64 y (+.f64 y z)) y)","y","inf",1.430908203125],["(pow.f64 (/.f64 y (+.f64 y z)) y)","y","0",1.031005859375]],"time":20.554931640625,"type":"series"},{"count":[[4,160]],"egraph":[[2,3370,46,0.027652542],[1,214,46,0.004309292],[0,9,46,0.000222375]],"inputs":[["(pow.f64 (/.f64 y (+.f64 y z)) y)","(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(/.f64 y (+.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 y (+.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (/.f64 y (+.f64 y z)) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (/.f64 y (+.f64 y z)) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 y (+.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y y) (pow.f64 (+.f64 y z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 y) (pow.f64 (/.f64 y (+.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y z))) (*.f64 2 y)) (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 y (+.f64 y z))) y) (pow.f64 (sqrt.f64 (/.f64 y (+.f64 y z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 y (+.f64 y z)) (exp.f64 (log1p.f64 y))) (/.f64 y (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (/.f64 y (+.f64 y z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 y z)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (pow.f64 (/.f64 y (+.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (*.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) 1) (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) 1) (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (sqrt.f64 y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))) (/.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2) (-.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)) (pow.f64 (cbrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)) 2) (cbrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)) (sqrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3)) (/.f64 1 (fma.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) (-.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2)) (/.f64 1 (-.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) (-.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) (-.f64 (*.f64 x x) (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3)) (fma.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) (-.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3)) (+.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2) (-.f64 (*.f64 x x) (*.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2)) (-.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3))) (neg.f64 (fma.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) (-.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2))) (neg.f64 (-.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2) (*.f64 x x)) (-.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) (-.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (pow.f64 (/.f64 y (+.f64 y z)) y)) -3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) (-.f64 (*.f64 x x) (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (/.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) 2)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 (neg.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (pow.f64 (/.f64 y (+.f64 y z)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (*.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (sqrt.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) 1) (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) 1) (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (sqrt.f64 y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (sqrt.f64 y)) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 y (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 y (+.f64 y z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 y (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (+.f64 y z))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 y (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y z))) 2) (cbrt.f64 (/.f64 y (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 1 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (+.f64 y z))) (sqrt.f64 (/.f64 y (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y z)) -2) (/.f64 y (cbrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (cbrt.f64 (/.f64 y (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 (pow.f64 (+.f64 y z) 2))) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y z) -1/2) (/.f64 y (sqrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y z))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 z 3))) (fma.f64 y y (*.f64 z (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (-.f64 (*.f64 y y) (*.f64 z z))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y z) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) (pow.f64 (+.f64 y z) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (+.f64 y z) y) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 y (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (+.f64 y z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) 1))))))"]],"rules":[["egg-rr",41],["egg-rr",60],["egg-rr",37],["egg-rr",22]],"stop":[["node limit",1]],"time":58.70703125,"type":"rewrite"},{"count":[[268,294]],"egraph":[[2,4148,3441,0.021698208],[1,1049,3998,0.007621083000000001],[0,322,4617,0.0016015]],"inputs":[["1","(+.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y) 1)","(+.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) (pow.f64 y 2))))","(+.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 z 2))) (+.f64 (*.f64 1/6 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 3)) (*.f64 -1 (/.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) z)))) (pow.f64 y 3)) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) (pow.f64 y 2)))))","(exp.f64 (*.f64 -1 z))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (exp.f64 (*.f64 -1 z))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (+.f64 (*.f64 1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3)) (*.f64 1/12 (*.f64 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3)))) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (exp.f64 (*.f64 -1 z)))))","(exp.f64 (*.f64 -1 z))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z)))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 1/12 (*.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (+.f64 (*.f64 -1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (*.f64 -1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3))))) (pow.f64 y 3))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z)))))","1","(+.f64 (*.f64 -1 z) 1)","(+.f64 (*.f64 -1 z) (+.f64 1 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2))))","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3))) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2)))))","(exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3)) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2)))))","(exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) (+.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) (+.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3))) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2)))))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y))))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 z 2))) (+.f64 (*.f64 1/6 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 3)) (*.f64 -1 (/.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) z)))) (pow.f64 y 2))))))","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))))","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3))))","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (/.f64 (*.f64 (+.f64 (*.f64 1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (+.f64 (*.f64 1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3)) (*.f64 1/12 (*.f64 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3)))) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 4)))))","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2)))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 1/12 (*.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (+.f64 (*.f64 -1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (*.f64 -1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3))))) (pow.f64 y 4))))))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)) y)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2)))))","(/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y))))","(/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3)))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)))))","(/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","x","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","x","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(/.f64 1 y)","(+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) x)))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) x))))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) (+.f64 x (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 z 2))) (+.f64 (*.f64 1/6 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 3)) (*.f64 -1 (/.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) z)))) (pow.f64 y 2)))))))","x","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) x))","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) x)))","x","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) x))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)))) (pow.f64 y 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) x)))","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) x))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2)) x)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)) y)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2)) x))))","(+.f64 x (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y) x))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y) x)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y) x))))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) x))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) x)))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3)))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) x))))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z)))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (/.f64 y z))))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z)))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (/.f64 y z))))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z)))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (/.f64 y z))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y) 1)","(fma.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) y 1)","(fma.f64 y (-.f64 (log.f64 y) (log.f64 z)) 1)","(+.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) (pow.f64 y 2))))","(+.f64 (fma.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) y 1) (*.f64 (fma.f64 1/2 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 2) (neg.f64 (/.f64 1 z))) (*.f64 y y)))","(fma.f64 y (-.f64 (log.f64 y) (log.f64 z)) (fma.f64 (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (*.f64 y y) 1))","(+.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 z 2))) (+.f64 (*.f64 1/6 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 3)) (*.f64 -1 (/.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) z)))) (pow.f64 y 3)) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) (pow.f64 y 2)))))","(fma.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) y (fma.f64 (+.f64 (/.f64 1/2 (*.f64 z z)) (fma.f64 1/6 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 3) (neg.f64 (/.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) z)))) (pow.f64 y 3) (+.f64 1 (*.f64 (fma.f64 1/2 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 2) (neg.f64 (/.f64 1 z))) (*.f64 y y)))))","(fma.f64 y (-.f64 (log.f64 y) (log.f64 z)) (fma.f64 (+.f64 (/.f64 1/2 (*.f64 z z)) (-.f64 (*.f64 1/6 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 3)) (/.f64 (-.f64 (log.f64 y) (log.f64 z)) z))) (pow.f64 y 3) (fma.f64 (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (*.f64 y y) 1)))","(fma.f64 y (-.f64 (log.f64 y) (log.f64 z)) (fma.f64 (+.f64 (-.f64 (/.f64 (/.f64 1/2 z) z) (/.f64 (-.f64 (log.f64 y) (log.f64 z)) z)) (*.f64 1/6 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 3))) (pow.f64 y 3) (fma.f64 (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (*.f64 y y) 1)))","(exp.f64 (*.f64 -1 z))","(exp.f64 (neg.f64 z))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z)))","(fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 y (*.f64 (*.f64 z z) 1))) (exp.f64 (neg.f64 z)))","(fma.f64 1/2 (/.f64 (*.f64 z z) (/.f64 y (exp.f64 (neg.f64 z)))) (exp.f64 (neg.f64 z)))","(fma.f64 1/2 (/.f64 z (/.f64 (*.f64 y (exp.f64 z)) z)) (exp.f64 (neg.f64 z)))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (exp.f64 (*.f64 -1 z))))","(fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 y (*.f64 (*.f64 z z) 1))) (+.f64 (exp.f64 (neg.f64 z)) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (*.f64 y y) (exp.f64 (neg.f64 z))))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (/.f64 y (exp.f64 (neg.f64 z)))) (exp.f64 (neg.f64 z))) (*.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) y)))","(fma.f64 1/2 (/.f64 z (/.f64 (*.f64 y (exp.f64 z)) z)) (*.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 y y)) 1) (exp.f64 (neg.f64 z))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (+.f64 (*.f64 1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3)) (*.f64 1/12 (*.f64 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3)))) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (exp.f64 (*.f64 -1 z)))))","(+.f64 (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 y (*.f64 (*.f64 z z) 1))) (+.f64 (exp.f64 (neg.f64 z)) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (*.f64 y y) (exp.f64 (neg.f64 z)))))) (/.f64 (fma.f64 1/24 (fma.f64 -12 (pow.f64 z 4) (fma.f64 -24 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 42))) (fma.f64 1/48 (pow.f64 (*.f64 (*.f64 z z) 1) 3) (*.f64 1/12 (*.f64 (*.f64 (*.f64 z z) 1) (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)))))) (/.f64 (pow.f64 y 3) (exp.f64 (neg.f64 z)))))","(+.f64 (+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (/.f64 y (exp.f64 (neg.f64 z)))) (exp.f64 (neg.f64 z))) (*.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) y))) (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (pow.f64 y 3) (fma.f64 1/24 (fma.f64 -12 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 18)) (fma.f64 1/48 (pow.f64 (*.f64 z z) 3) (*.f64 (*.f64 (pow.f64 z 3) -2) (*.f64 (*.f64 z z) 1/12)))))))","(+.f64 (fma.f64 1/2 (/.f64 z (/.f64 (*.f64 y (exp.f64 z)) z)) (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 (*.f64 y (exp.f64 z)) y))) (*.f64 (+.f64 (/.f64 (fma.f64 1/24 (*.f64 (pow.f64 z 4) 6) (*.f64 (*.f64 z z) (+.f64 (*.f64 1/48 (pow.f64 z 4)) (*.f64 (*.f64 (pow.f64 z 3) -2) 1/12)))) (pow.f64 y 3)) 1) (exp.f64 (neg.f64 z))))","(exp.f64 (*.f64 -1 z))","(exp.f64 (neg.f64 z))","(+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z)))","(fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 y (*.f64 (*.f64 z z) 1))) (exp.f64 (neg.f64 z)))","(fma.f64 1/2 (/.f64 (*.f64 z z) (/.f64 y (exp.f64 (neg.f64 z)))) (exp.f64 (neg.f64 z)))","(fma.f64 1/2 (/.f64 z (/.f64 (*.f64 y (exp.f64 z)) z)) (exp.f64 (neg.f64 z)))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z))))","(fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 y (*.f64 (*.f64 z z) 1))) (+.f64 (exp.f64 (neg.f64 z)) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (*.f64 y y) (exp.f64 (neg.f64 z))))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (/.f64 y (exp.f64 (neg.f64 z)))) (exp.f64 (neg.f64 z))) (*.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) y)))","(fma.f64 1/2 (/.f64 z (/.f64 (*.f64 y (exp.f64 z)) z)) (*.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 y y)) 1) (exp.f64 (neg.f64 z))))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 1/12 (*.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (+.f64 (*.f64 -1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (*.f64 -1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3))))) (pow.f64 y 3))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) y)) (exp.f64 (*.f64 -1 z)))))","(+.f64 (/.f64 (fma.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2) (*.f64 -1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -4)))) (/.f64 (*.f64 y y) (exp.f64 (neg.f64 z)))) (fma.f64 -1 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (pow.f64 y 3) (fma.f64 1/12 (*.f64 (*.f64 (*.f64 z z) 1) (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -4))) (fma.f64 -1/24 (fma.f64 -12 (pow.f64 z 4) (fma.f64 -24 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 42))) (*.f64 (pow.f64 (*.f64 (*.f64 z z) 1) 3) -1/48))))) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 y (*.f64 (*.f64 z z) 1))) (exp.f64 (neg.f64 z)))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (/.f64 y (exp.f64 (neg.f64 z)))) (exp.f64 (neg.f64 z))) (-.f64 (*.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 -1/6 (*.f64 2 (pow.f64 z 3)))) y)) (*.f64 (/.f64 (exp.f64 (neg.f64 z)) (pow.f64 y 3)) (fma.f64 1/12 (*.f64 (*.f64 z z) (*.f64 2 (pow.f64 z 3))) (fma.f64 (fma.f64 -12 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 18)) -1/24 (*.f64 -1/48 (pow.f64 (*.f64 z z) 3)))))))","(+.f64 (fma.f64 1/2 (/.f64 z (/.f64 (*.f64 y (exp.f64 z)) z)) (exp.f64 (neg.f64 z))) (*.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (-.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) y) (/.f64 (fma.f64 1/12 (*.f64 (*.f64 z z) (*.f64 2 (pow.f64 z 3))) (fma.f64 (*.f64 (pow.f64 z 4) 6) -1/24 (*.f64 -1/48 (pow.f64 (*.f64 z z) 3)))) (*.f64 y y)))))","1","(+.f64 (*.f64 -1 z) 1)","(fma.f64 -1 z 1)","(-.f64 1 z)","(+.f64 (*.f64 -1 z) (+.f64 1 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2))))","(+.f64 (fma.f64 -1 z 1) (*.f64 (*.f64 z z) (+.f64 1/2 (/.f64 1/2 y))))","(-.f64 (fma.f64 (*.f64 z z) (+.f64 1/2 (/.f64 1/2 y)) 1) z)","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3))) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2)))))","(+.f64 (fma.f64 -1 z 1) (fma.f64 -1 (*.f64 (pow.f64 z 3) (+.f64 (+.f64 (/.f64 1/2 y) 1/6) (/.f64 1/3 (*.f64 y y)))) (*.f64 (*.f64 z z) (+.f64 1/2 (/.f64 1/2 y)))))","(+.f64 (-.f64 1 z) (-.f64 (*.f64 (*.f64 z z) (+.f64 1/2 (/.f64 1/2 y))) (*.f64 (pow.f64 z 3) (+.f64 (/.f64 1/2 y) (+.f64 1/6 (/.f64 1/3 (*.f64 y y)))))))","(+.f64 1 (-.f64 (*.f64 (*.f64 z z) (-.f64 (+.f64 1/2 (/.f64 1/2 y)) (*.f64 (+.f64 1/6 (+.f64 (/.f64 1/3 (*.f64 y y)) (/.f64 1/2 y))) z))) z))","(exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))","(exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))","(pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))","(pow.f64 (*.f64 (/.f64 1 z) y) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))","(-.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 (/.f64 (*.f64 y y) z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))))","(-.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) (*.f64 (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y)) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))) (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))))","(+.f64 (-.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 (/.f64 (*.f64 y y) z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 3) (pow.f64 y 4))) (*.f64 z z)) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))))","(-.f64 (*.f64 (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) 1) (pow.f64 (*.f64 (/.f64 1 z) y) y)) (*.f64 (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y)) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3)) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2)))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))) (+.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (/.f64 (pow.f64 z 3) (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 4))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (*.f64 (*.f64 y y) 1)))))))))","(+.f64 (-.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 (/.f64 (*.f64 y y) z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))) (+.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 3) (pow.f64 y 4))) (*.f64 z z)) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))) (*.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (pow.f64 z 3)) (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y (pow.f64 y 4)) (*.f64 (*.f64 (pow.f64 y 3) -2) (*.f64 y 1/6)))))))","(+.f64 (-.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) (*.f64 (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y)) y)) (*.f64 (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) z) (+.f64 (/.f64 (+.f64 (pow.f64 y 3) (pow.f64 y 4)) (/.f64 z 1/2)) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 (pow.f64 y 4) -2) (*.f64 -1/2 (pow.f64 y 5)))) (*.f64 z z)))))","(exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))","(pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))","(*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))","(-.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 (/.f64 (*.f64 y y) z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))","(-.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) (*.f64 (*.f64 (/.f64 y z) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y))) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) (+.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))) (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))))","(+.f64 (-.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 (/.f64 (*.f64 y y) z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 3) (pow.f64 y 4))) (*.f64 z z)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))","(-.f64 (*.f64 (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) 1) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y))) (*.f64 (*.f64 (/.f64 y z) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y))) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) (+.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3))) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2)))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))) (fma.f64 -1 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (/.f64 (pow.f64 z 3) (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 8))) (*.f64 (*.f64 1/2 (pow.f64 y 3)) (*.f64 (*.f64 y y) 1)))))) (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))))","(-.f64 (+.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 3) (pow.f64 y 4))) (*.f64 z z)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))) (-.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (/.f64 (pow.f64 z 3) (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (*.f64 y (pow.f64 y 4)) (*.f64 y (*.f64 (*.f64 2 (pow.f64 y 3)) 1/6)))))))) (*.f64 (/.f64 (*.f64 y y) z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))","(+.f64 (-.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) (*.f64 (*.f64 (/.f64 y z) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y))) y)) (*.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) z) (-.f64 (/.f64 (+.f64 (pow.f64 y 3) (pow.f64 y 4)) (/.f64 z 1/2)) (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (pow.f64 y 5) (*.f64 1/6 (*.f64 (pow.f64 y 4) 2)))) (*.f64 z z)))))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)))","(+.f64 (+.f64 (/.f64 1 y) (neg.f64 (log.f64 z))) (log.f64 y))","(+.f64 (log.f64 y) (-.f64 (/.f64 1 y) (log.f64 z)))","(+.f64 (-.f64 (log.f64 y) (log.f64 z)) (/.f64 1 y))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y))))","(fma.f64 (fma.f64 1/2 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 2) (neg.f64 (/.f64 1 z))) y (+.f64 (+.f64 (/.f64 1 y) (neg.f64 (log.f64 z))) (log.f64 y)))","(fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (+.f64 (log.f64 y) (-.f64 (/.f64 1 y) (log.f64 z))))","(fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (+.f64 (-.f64 (log.f64 y) (log.f64 z)) (/.f64 1 y)))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 z 2))) (+.f64 (*.f64 1/6 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 3)) (*.f64 -1 (/.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) z)))) (pow.f64 y 2))))))","(fma.f64 (fma.f64 1/2 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 2) (neg.f64 (/.f64 1 z))) y (+.f64 (/.f64 1 y) (+.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) (*.f64 (*.f64 y y) (+.f64 (/.f64 1/2 (*.f64 z z)) (fma.f64 1/6 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 3) (neg.f64 (/.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) z))))))))","(+.f64 (-.f64 (fma.f64 (*.f64 y y) (+.f64 (/.f64 1/2 (*.f64 z z)) (-.f64 (*.f64 1/6 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 3)) (/.f64 (-.f64 (log.f64 y) (log.f64 z)) z))) (log.f64 y)) (log.f64 z)) (fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (/.f64 1 y)))","(+.f64 (-.f64 (fma.f64 (*.f64 y y) (+.f64 (-.f64 (/.f64 (/.f64 1/2 z) z) (/.f64 (-.f64 (log.f64 y) (log.f64 z)) z)) (*.f64 1/6 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 3))) (log.f64 y)) (log.f64 z)) (fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (/.f64 1 y)))","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (*.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1)))))","(fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (/.f64 (exp.f64 (neg.f64 z)) y))","(fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) (/.f64 (exp.f64 (neg.f64 z)) y))","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (pow.f64 y 3) (exp.f64 (neg.f64 z))))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (*.f64 (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) (pow.f64 y 3)) (exp.f64 (neg.f64 z)))))","(+.f64 (/.f64 (/.f64 1/2 (exp.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (*.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 y y)) 1) (/.f64 (exp.f64 (neg.f64 z)) y)))","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (/.f64 (*.f64 (+.f64 (*.f64 1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (+.f64 (*.f64 1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3)) (*.f64 1/12 (*.f64 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3)))) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 4)))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (+.f64 (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (pow.f64 y 3) (exp.f64 (neg.f64 z))))) (/.f64 (fma.f64 1/24 (fma.f64 -12 (pow.f64 z 4) (fma.f64 -24 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 42))) (fma.f64 1/48 (pow.f64 (*.f64 (*.f64 z z) 1) 3) (*.f64 1/12 (*.f64 (*.f64 (*.f64 z z) 1) (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)))))) (/.f64 (pow.f64 y 4) (exp.f64 (neg.f64 z))))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (+.f64 (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (*.f64 (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) (pow.f64 y 3)) (exp.f64 (neg.f64 z)))) (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (pow.f64 y 4) (fma.f64 1/24 (fma.f64 -12 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 18)) (fma.f64 1/48 (pow.f64 (*.f64 z z) 3) (*.f64 (*.f64 (pow.f64 z 3) -2) (*.f64 (*.f64 z z) 1/12))))))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) (/.f64 (exp.f64 (neg.f64 z)) y)) (*.f64 (exp.f64 (neg.f64 z)) (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (pow.f64 y 3)) (/.f64 (fma.f64 1/24 (*.f64 (pow.f64 z 4) 6) (*.f64 (*.f64 z z) (+.f64 (*.f64 1/48 (pow.f64 z 4)) (*.f64 (*.f64 (pow.f64 z 3) -2) 1/12)))) (pow.f64 y 4)))))","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (*.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1)))))","(fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (/.f64 (exp.f64 (neg.f64 z)) y))","(fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) (/.f64 (exp.f64 (neg.f64 z)) y))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2)))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (pow.f64 y 3) (exp.f64 (neg.f64 z))))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (*.f64 (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) (pow.f64 y 3)) (exp.f64 (neg.f64 z)))))","(+.f64 (/.f64 (/.f64 1/2 (exp.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (*.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 y y)) 1) (/.f64 (exp.f64 (neg.f64 z)) y)))","(+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)) (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 1/12 (*.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3)))))) (+.f64 (*.f64 -1/24 (+.f64 (*.f64 -12 (pow.f64 z 4)) (+.f64 (*.f64 -24 (pow.f64 z 4)) (+.f64 (*.f64 48 (pow.f64 z 4)) (*.f64 -6 (pow.f64 z 4)))))) (*.f64 -1/48 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 3))))) (pow.f64 y 4))))))","(+.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2) (*.f64 -1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -4)))) (/.f64 (pow.f64 y 3) (exp.f64 (neg.f64 z)))) (/.f64 (exp.f64 (neg.f64 z)) y)) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) (neg.f64 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (pow.f64 y 4) (fma.f64 1/12 (*.f64 (*.f64 (*.f64 z z) 1) (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -4))) (fma.f64 -1/24 (fma.f64 -12 (pow.f64 z 4) (fma.f64 -24 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 42))) (*.f64 (pow.f64 (*.f64 (*.f64 z z) 1) 3) -1/48))))))))","(+.f64 (*.f64 (/.f64 (exp.f64 (neg.f64 z)) (pow.f64 y 3)) (fma.f64 1/8 (pow.f64 z 4) (*.f64 -1/6 (*.f64 2 (pow.f64 z 3))))) (-.f64 (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (/.f64 (exp.f64 (neg.f64 z)) y)) (*.f64 (/.f64 (exp.f64 (neg.f64 z)) (pow.f64 y 4)) (fma.f64 1/12 (*.f64 (*.f64 z z) (*.f64 2 (pow.f64 z 3))) (fma.f64 (fma.f64 -12 (pow.f64 z 4) (*.f64 (pow.f64 z 4) 18)) -1/24 (*.f64 -1/48 (pow.f64 (*.f64 z z) 3)))))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) (*.f64 (/.f64 (/.f64 -1 (exp.f64 z)) (pow.f64 y 4)) (fma.f64 1/12 (*.f64 (*.f64 z z) (*.f64 2 (pow.f64 z 3))) (fma.f64 (*.f64 (pow.f64 z 4) 6) -1/24 (*.f64 -1/48 (pow.f64 (*.f64 z z) 3)))))) (*.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 y y)) 1) (/.f64 (exp.f64 (neg.f64 z)) y)))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 1 y) (neg.f64 (/.f64 z y)))","(-.f64 (/.f64 1 y) (/.f64 z y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2))))","(+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 z y) (*.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))))))","(+.f64 (/.f64 1 y) (-.f64 (*.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y)))) (/.f64 z y)))","(+.f64 (/.f64 1 y) (fma.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) (/.f64 (neg.f64 z) y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)) y)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2)))))","(+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 (+.f64 (+.f64 (/.f64 1/2 y) 1/6) (/.f64 1/3 (*.f64 y y))) (/.f64 y (pow.f64 z 3))) (fma.f64 -1 (/.f64 z y) (*.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y)))))))","(+.f64 (/.f64 1 y) (-.f64 (-.f64 (*.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y)))) (/.f64 z y)) (/.f64 (+.f64 (/.f64 1/2 y) (+.f64 1/6 (/.f64 1/3 (*.f64 y y)))) (/.f64 y (pow.f64 z 3)))))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) (/.f64 (neg.f64 z) y)) (*.f64 (/.f64 (pow.f64 z 3) y) (+.f64 1/6 (+.f64 (/.f64 1/3 (*.f64 y y)) (/.f64 1/2 y))))))","(/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)","(/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y)","(/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y)","(/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y))","(fma.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y))","(-.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y) (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)))","(fma.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (*.f64 z z)))))","(-.f64 (fma.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 z z)) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))))","(-.f64 (*.f64 (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) 1) (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y)) (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y))))","(+.f64 (fma.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (*.f64 z z))))) (*.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 4))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (*.f64 (*.f64 y y) 1))))) (pow.f64 z 3))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y (pow.f64 y 4)) (*.f64 (*.f64 (pow.f64 y 3) -2) (*.f64 y 1/6)))) (pow.f64 z 3)) (-.f64 (fma.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 z z)) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 (pow.f64 y 4) -2) (*.f64 -1/2 (pow.f64 y 5)))) (pow.f64 z 3)) (-.f64 (*.f64 (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) 1) (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y)) (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y))))","(/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)","(/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y)","(/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y)","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (neg.f64 (/.f64 y (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (*.f64 (/.f64 y z) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y))))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))))","(+.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z)))) (neg.f64 (/.f64 y (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (-.f64 (*.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z))) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))))","(+.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (*.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) (-.f64 (/.f64 1/2 (/.f64 (*.f64 z (*.f64 z y)) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 y z))))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3)))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)))))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (fma.f64 -1 (*.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 8))) (*.f64 (*.f64 1/2 (pow.f64 y 3)) (*.f64 (*.f64 y y) 1)))) (pow.f64 z 3))) (+.f64 (neg.f64 (/.f64 y (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z))))))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (-.f64 (-.f64 (*.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z))) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (*.f64 y (pow.f64 y 4)) (*.f64 y (*.f64 (*.f64 2 (pow.f64 y 3)) 1/6)))) y) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (pow.f64 z 3)))))","(+.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (neg.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (pow.f64 y 5) (*.f64 1/6 (*.f64 (pow.f64 y 4) 2))))) (pow.f64 z 3)))) (*.f64 (/.f64 y z) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)))))","(/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)","(/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","x","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","x","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y) x)","(+.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 z y)) y) y) x)","(/.f64 1 y)","(+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) x)))","(+.f64 (/.f64 1 y) (+.f64 (neg.f64 (log.f64 z)) (+.f64 (log.f64 y) x)))","(+.f64 (-.f64 (log.f64 y) (log.f64 z)) (+.f64 (/.f64 1 y) x))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) x))))","(fma.f64 (fma.f64 1/2 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 2) (neg.f64 (/.f64 1 z))) y (+.f64 (/.f64 1 y) (+.f64 (neg.f64 (log.f64 z)) (+.f64 (log.f64 y) x))))","(fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (+.f64 (-.f64 (log.f64 y) (log.f64 z)) (+.f64 (/.f64 1 y) x)))","(+.f64 (fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (+.f64 (-.f64 (log.f64 y) (log.f64 z)) (/.f64 1 y))) x)","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 2)) (/.f64 1 z)) y) (+.f64 (/.f64 1 y) (+.f64 (log.f64 (/.f64 1 z)) (+.f64 (log.f64 y) (+.f64 x (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 z 2))) (+.f64 (*.f64 1/6 (pow.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) 3)) (*.f64 -1 (/.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) z)))) (pow.f64 y 2)))))))","(fma.f64 (fma.f64 1/2 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 2) (neg.f64 (/.f64 1 z))) y (+.f64 (+.f64 (/.f64 1 y) (neg.f64 (log.f64 z))) (+.f64 (+.f64 (log.f64 y) x) (*.f64 (*.f64 y y) (+.f64 (/.f64 1/2 (*.f64 z z)) (fma.f64 1/6 (pow.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) 3) (neg.f64 (/.f64 (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)) z))))))))","(+.f64 (fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (+.f64 (log.f64 y) (-.f64 (/.f64 1 y) (log.f64 z)))) (fma.f64 (*.f64 y y) (+.f64 (/.f64 1/2 (*.f64 z z)) (-.f64 (*.f64 1/6 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 3)) (/.f64 (-.f64 (log.f64 y) (log.f64 z)) z))) x))","(+.f64 (fma.f64 y (fma.f64 1/2 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 2) (/.f64 -1 z)) (+.f64 (-.f64 (log.f64 y) (log.f64 z)) (/.f64 1 y))) (fma.f64 (*.f64 y y) (+.f64 (-.f64 (/.f64 (/.f64 1/2 z) z) (/.f64 (-.f64 (log.f64 y) (log.f64 z)) z)) (*.f64 1/6 (pow.f64 (-.f64 (log.f64 y) (log.f64 z)) 3))) x))","x","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) x))","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -2 (pow.f64 z 3)) (*.f64 -6 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2))) (exp.f64 (*.f64 -1 z))) (pow.f64 y 3)) x)))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (+.f64 (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (pow.f64 y 3) (exp.f64 (neg.f64 z))))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (+.f64 (*.f64 (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) (pow.f64 y 3)) (exp.f64 (neg.f64 z))) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) x)))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) x) (*.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 y y)) 1) (/.f64 (exp.f64 (neg.f64 z)) y)))","x","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) x))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1/6 (+.f64 (*.f64 6 (pow.f64 z 3)) (+.f64 (*.f64 -6 (pow.f64 z 3)) (*.f64 2 (pow.f64 z 3))))) (*.f64 1/8 (pow.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2))) 2)))) (pow.f64 y 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 (*.f64 -1 z)) (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 2 (pow.f64 z 2)))) (pow.f64 y 2))) x)))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (+.f64 (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (/.f64 (*.f64 y y) (*.f64 (*.f64 z z) 1))) (/.f64 (fma.f64 1/6 (fma.f64 6 (pow.f64 z 3) (*.f64 (pow.f64 z 3) -8)) (*.f64 1/8 (pow.f64 (*.f64 (*.f64 z z) 1) 2))) (/.f64 (pow.f64 y 3) (exp.f64 (neg.f64 z))))) x))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) (+.f64 (*.f64 (/.f64 (fma.f64 1/6 (*.f64 (pow.f64 z 3) -2) (*.f64 1/8 (pow.f64 z 4))) (pow.f64 y 3)) (exp.f64 (neg.f64 z))) (fma.f64 1/2 (/.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 y z) (/.f64 y z))) x)))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (*.f64 y (exp.f64 z)) y)) x) (*.f64 (+.f64 (/.f64 (fma.f64 1/8 (pow.f64 z 4) (*.f64 (pow.f64 z 3) -1/3)) (*.f64 y y)) 1) (/.f64 (exp.f64 (neg.f64 z)) y)))","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) x))","(+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 z y) x))","(+.f64 (/.f64 1 y) (-.f64 x (/.f64 z y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2)) x)))","(+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 z y) (fma.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) (*.f64 z z) x)))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) x) (/.f64 z y)))","(+.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) (fma.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) x))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)) y)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 (pow.f64 y 2)))) (pow.f64 z 2)) x))))","(+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 (+.f64 (+.f64 (/.f64 1/2 y) 1/6) (/.f64 1/3 (*.f64 y y))) (/.f64 y (pow.f64 z 3))) (fma.f64 -1 (/.f64 z y) (fma.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) (*.f64 z z) x))))","(+.f64 (/.f64 1 y) (-.f64 (-.f64 (fma.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) x) (/.f64 z y)) (/.f64 (+.f64 (/.f64 1/2 y) (+.f64 1/6 (/.f64 1/3 (*.f64 y y)))) (/.f64 y (pow.f64 z 3)))))","(-.f64 (+.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) (fma.f64 (*.f64 z z) (+.f64 (/.f64 1/2 y) (/.f64 1/2 (*.f64 y y))) x)) (*.f64 (/.f64 (pow.f64 z 3) y) (+.f64 1/6 (+.f64 (/.f64 1/3 (*.f64 y y)) (/.f64 1/2 y)))))","(+.f64 x (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x)","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y) x)","(+.f64 (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y) x))","(fma.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x))","(+.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))) x)","(+.f64 (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y) x)))","(fma.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (+.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (*.f64 z z))) (+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x)))","(-.f64 (fma.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 z z)) (+.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y) x)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))))","(+.f64 (*.f64 (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) 1) (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y)) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y))))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2))) (+.f64 (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y) x))))","(+.f64 (*.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 4))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (*.f64 (*.f64 y y) 1))))) (pow.f64 z 3))) (fma.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (+.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (*.f64 z z))) (+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y (pow.f64 y 4)) (*.f64 (*.f64 (pow.f64 y 3) -2) (*.f64 y 1/6)))) (pow.f64 z 3)) (-.f64 (fma.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 z z)) (+.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y) x)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 (pow.f64 y 4) -2) (*.f64 -1/2 (pow.f64 y 5)))) (pow.f64 z 3)) (+.f64 (*.f64 (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) 1) (/.f64 (pow.f64 (*.f64 (/.f64 1 z) y) y) y)) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (*.f64 (/.f64 1 z) y) y)))))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) x)","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) x)","(+.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) x))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (fma.f64 -1 (/.f64 y (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) x))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))))","(+.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (-.f64 x (*.f64 (/.f64 y z) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)))))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) x)))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (+.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z))) (fma.f64 -1 (/.f64 y (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) x)))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (fma.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z)) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))))","(+.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (+.f64 (*.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) (-.f64 (/.f64 1/2 (/.f64 (*.f64 z (*.f64 z y)) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 y z))) x))","(+.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y) (+.f64 (*.f64 -1 (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3)))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z)) x))))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (fma.f64 -1 (*.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 8))) (*.f64 (*.f64 1/2 (pow.f64 y 3)) (*.f64 (*.f64 y y) 1)))) (pow.f64 z 3))) (+.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) y) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z))) (fma.f64 -1 (/.f64 y (/.f64 z (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) x))))","(+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (-.f64 (fma.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 z z)) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))) (*.f64 (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (*.f64 y (pow.f64 y 4)) (*.f64 y (*.f64 (*.f64 2 (pow.f64 y 3)) 1/6)))) y) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (pow.f64 z 3)))))","(+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (+.f64 (pow.f64 y 3) (pow.f64 y 4)))) (/.f64 (neg.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (pow.f64 y 5) (*.f64 1/6 (*.f64 (pow.f64 y 4) 2))))) (pow.f64 z 3)))) (+.f64 (/.f64 (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y)) y) (-.f64 x (*.f64 (/.f64 y z) (*.f64 (pow.f64 (/.f64 -1 z) y) (pow.f64 (neg.f64 y) y))))))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z))","(fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (/.f64 y z))","(-.f64 (/.f64 y z) (*.f64 (/.f64 y z) (/.f64 y z)))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z)))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (/.f64 y z)) (/.f64 (pow.f64 y 3) (pow.f64 z 3)))","(+.f64 (/.f64 y z) (-.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 y z) (/.f64 y z))))","(+.f64 (-.f64 (/.f64 y z) (*.f64 (/.f64 y z) (/.f64 y z))) (pow.f64 (/.f64 y z) 3))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (/.f64 y z))))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (fma.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4)) (/.f64 y z))))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (-.f64 (-.f64 (/.f64 y z) (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (*.f64 (/.f64 y z) (/.f64 y z))))","(+.f64 (-.f64 (/.f64 y z) (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (-.f64 (pow.f64 (/.f64 y z) 3) (*.f64 (/.f64 y z) (/.f64 y z))))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (neg.f64 (/.f64 z y)))","(-.f64 1 (/.f64 z y))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 1 (fma.f64 -1 (/.f64 z y) (/.f64 (*.f64 z z) (*.f64 y y))))","(+.f64 1 (-.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 z y)))","(+.f64 1 (*.f64 (/.f64 z y) (+.f64 -1 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(+.f64 1 (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3)) (/.f64 (*.f64 z z) (*.f64 y y)))))","(+.f64 1 (-.f64 (-.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 z y)))","(+.f64 1 (-.f64 (*.f64 (/.f64 z y) (+.f64 -1 (/.f64 z y))) (pow.f64 (/.f64 z y) 3)))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (neg.f64 (/.f64 z y)))","(-.f64 1 (/.f64 z y))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 1 (fma.f64 -1 (/.f64 z y) (/.f64 (*.f64 z z) (*.f64 y y))))","(+.f64 1 (-.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 z y)))","(+.f64 1 (*.f64 (/.f64 z y) (+.f64 -1 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(+.f64 1 (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3)) (/.f64 (*.f64 z z) (*.f64 y y)))))","(+.f64 1 (-.f64 (-.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 z y)))","(+.f64 1 (-.f64 (*.f64 (/.f64 z y) (+.f64 -1 (/.f64 z y))) (pow.f64 (/.f64 z y) 3)))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (neg.f64 (/.f64 z y)))","(-.f64 1 (/.f64 z y))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))","(+.f64 1 (fma.f64 -1 (/.f64 z y) (/.f64 (*.f64 z z) (*.f64 y y))))","(+.f64 1 (-.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 z y)))","(+.f64 1 (*.f64 (/.f64 z y) (+.f64 -1 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(+.f64 1 (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (/.f64 (pow.f64 z 3) (pow.f64 y 3)) (/.f64 (*.f64 z z) (*.f64 y y)))))","(+.f64 1 (-.f64 (-.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 (pow.f64 z 3) (pow.f64 y 3))) (/.f64 z y)))","(+.f64 1 (-.f64 (*.f64 (/.f64 z y) (+.f64 -1 (/.f64 z y))) (pow.f64 (/.f64 z y) 3)))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z))","(fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (/.f64 y z))","(-.f64 (/.f64 y z) (*.f64 (/.f64 y z) (/.f64 y z)))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z)))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (/.f64 y z)) (/.f64 (pow.f64 y 3) (pow.f64 z 3)))","(+.f64 (/.f64 y z) (-.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 y z) (/.f64 y z))))","(+.f64 (-.f64 (/.f64 y z) (*.f64 (/.f64 y z) (/.f64 y z))) (pow.f64 (/.f64 y z) 3))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (/.f64 y z))))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (fma.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4)) (/.f64 y z))))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (-.f64 (-.f64 (/.f64 y z) (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (*.f64 (/.f64 y z) (/.f64 y z))))","(+.f64 (-.f64 (/.f64 y z) (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (-.f64 (pow.f64 (/.f64 y z) 3) (*.f64 (/.f64 y z) (/.f64 y z))))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z))","(fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (/.f64 y z))","(-.f64 (/.f64 y z) (*.f64 (/.f64 y z) (/.f64 y z)))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (/.f64 y z)))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (/.f64 y z)) (/.f64 (pow.f64 y 3) (pow.f64 z 3)))","(+.f64 (/.f64 y z) (-.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (*.f64 (/.f64 y z) (/.f64 y z))))","(+.f64 (-.f64 (/.f64 y z) (*.f64 (/.f64 y z) (/.f64 y z))) (pow.f64 (/.f64 y z) 3))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (/.f64 y z))))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (fma.f64 -1 (/.f64 (*.f64 y y) (*.f64 z z)) (fma.f64 -1 (/.f64 (pow.f64 y 4) (pow.f64 z 4)) (/.f64 y z))))","(+.f64 (/.f64 (pow.f64 y 3) (pow.f64 z 3)) (-.f64 (-.f64 (/.f64 y z) (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (*.f64 (/.f64 y z) (/.f64 y z))))","(+.f64 (-.f64 (/.f64 y z) (/.f64 (pow.f64 y 4) (pow.f64 z 4))) (-.f64 (pow.f64 (/.f64 y z) 3) (*.f64 (/.f64 y z) (/.f64 y z))))"]],"stop":[["node limit",1]],"time":67.759033203125,"type":"simplify"},{"compiler":[[8537,4455]],"time":75.827880859375,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","done",5.440442030053174],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","fresh",8.456746476695377],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","fresh",5.718524180933477],["(+.f64 x (/.f64 1 y))","next",3.002976040835856]],"compiler":[[14,8],[10,7],[19,11],[8,6],[10,7],[19,11],[8,6]],"count":[[295,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[294,3],"picked":[1,1]}],"min-error":[0],"time":114.796142578125,"type":"prune"},{"compiler":[[14,9]],"locations":[["(+.f64 x (/.f64 1 y))",0.0078125,true]],"time":3.427001953125,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 x (/.f64 1 y))","y","-inf",0.241943359375],["(+.f64 x (/.f64 1 y))","y","inf",0.15283203125],["(+.f64 x (/.f64 1 y))","y","0",0.215087890625],["(+.f64 x (/.f64 1 y))","x","-inf",0.153076171875],["(+.f64 x (/.f64 1 y))","x","inf",0.15478515625],["(+.f64 x (/.f64 1 y))","x","0",0.31103515625]],"time":1.296875,"type":"series"},{"count":[[1,33]],"egraph":[[2,1716,7,0.016648376],[1,128,7,0.002370751],[0,6,7,0.000183709]],"inputs":[["(+.f64 x (/.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x (/.f64 1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (/.f64 1 y))) (/.f64 (pow.f64 y -2) (-.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (/.f64 1 y))) (pow.f64 (cbrt.f64 (+.f64 x (/.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (/.f64 1 y))) 2) (cbrt.f64 (+.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (/.f64 1 y))) (sqrt.f64 (+.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 y -3)) (/.f64 1 (fma.f64 x x (-.f64 (pow.f64 y -2) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 y -2)) (/.f64 1 (-.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (-.f64 (pow.f64 y -2) (/.f64 x y))) (+.f64 (pow.f64 x 3) (pow.f64 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (/.f64 1 y)) (-.f64 (*.f64 x x) (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 y -3)) (fma.f64 x x (-.f64 (pow.f64 y -2) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 y -3)) (+.f64 (pow.f64 y -2) (-.f64 (*.f64 x x) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 y -2)) (-.f64 x (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 y -3))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 y -2) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 y -2))) (neg.f64 (-.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y -2) (*.f64 x x)) (-.f64 (/.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (/.f64 1 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (/.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (/.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 y -2)) (/.f64 1 (cbrt.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/2) (pow.f64 y -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (/.f64 1 y))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":34.2451171875,"type":"rewrite"},{"count":[[57,36]],"egraph":[[1,9,138,8.729199999999999e-5],[0,6,138,5.15e-5]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(/.f64 1 y)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(/.f64 1 y)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","x","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) x)"]],"stop":[["saturated",1]],"time":12.60595703125,"type":"simplify"},{"compiler":[[389,252]],"time":5.18994140625,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","done",5.440442030053174],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","fresh",8.456746476695377],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","next",5.718524180933477],["(+.f64 x (/.f64 1 y))","done",3.002976040835856]],"compiler":[[14,8],[10,7],[19,11],[8,6],[10,7],[19,11]],"count":[[40,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[36,0],"picked":[1,1]}],"min-error":[0],"time":6.362060546875,"type":"prune"},{"compiler":[[54,14]],"locations":[["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)",0.15234375,true],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))",0.234375,true],["(pow.f64 (cbrt.f64 y) -2)",0.46521381837909415,true],["(pow.f64 (/.f64 y (+.f64 y z)) y)",5.3228609069272155,false]],"time":10.160888671875,"type":"localize"},{"count":[[3,36]],"series":[["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","x","-inf",0.264892578125],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","x","inf",0.198974609375],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","x","0",1.489013671875],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","z","-inf",0.81201171875],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","z","inf",0.760009765625],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","z","0",0.579833984375],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","y","-inf",6.968994140625],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","y","inf",2.888916015625],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","y","0",2.2841796875],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))","z","-inf",0.716064453125],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))","z","inf",0.677001953125],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))","z","0",0.468017578125],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))","y","-inf",1.765869140625],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))","y","inf",1.255126953125],["(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))","y","0",1.1318359375],["(pow.f64 (cbrt.f64 y) -2)","y","-inf",0.8837890625],["(pow.f64 (cbrt.f64 y) -2)","y","inf",0.35498046875],["(pow.f64 (cbrt.f64 y) -2)","y","0",0.836181640625]],"time":24.68603515625,"type":"series"},{"count":[[3,86]],"egraph":[[2,3728,45,0.029051458000000002],[1,270,45,0.005242208],[0,12,45,0.000329541]],"inputs":[["(pow.f64 (cbrt.f64 y) -2)","(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))","(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) -2))) (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) -2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 y) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (pow.f64 (cbrt.f64 y) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 y) -4)) (cbrt.f64 (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 1 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) -2) (pow.f64 (cbrt.f64 (cbrt.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 y 1/6) -2) (pow.f64 (pow.f64 y 1/6) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 y) -4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 y) -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2/3 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2/3 (log.f64 y)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)))) (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (/.f64 1 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))) 2) (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))) (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 y)) (pow.f64 (/.f64 y (+.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (*.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (/.f64 1 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) 1) (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) 1) (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (sqrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 y 1/6)) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (pow.f64 y 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) (+.f64 y y))) (pow.f64 y 1/6)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y z)) y)) (pow.f64 y 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) (pow.f64 (/.f64 y (+.f64 y z)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cbrt.f64 y) (pow.f64 (/.f64 y (+.f64 y z)) y)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) 3) y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x))) (cbrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)) 2) (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)) (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) 3) (pow.f64 x 3)) (fma.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) (neg.f64 (*.f64 x x))) (-.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (exp.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (pow.f64 (/.f64 y (+.f64 y z)) y)) (cbrt.f64 y))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)) 1))))))"]],"rules":[["egg-rr",29],["egg-rr",37],["egg-rr",20]],"stop":[["node limit",1]],"time":55.09814453125,"type":"rewrite"},{"count":[[122,140]],"egraph":[[2,2465,1340,0.016087667],[1,629,1629,0.00451075],[0,180,1845,0.000942333]],"inputs":[["(pow.f64 (/.f64 1 y) 1/3)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) z)) (pow.f64 (/.f64 1 y) 1/3))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) z)) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2))) (pow.f64 (/.f64 1 y) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) z)) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)))) (pow.f64 (/.f64 1 y) 1/3))))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) z))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2)))))","(+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2))))))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) z))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3)))))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2)) y)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)) y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2)) y)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x))))","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)) x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3)))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)) x))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2)))) x)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3))))) x))))","(*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y))","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)))","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)))","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)))","x","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (/.f64 1 y) 1/3)","(cbrt.f64 (/.f64 1 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) z)) (pow.f64 (/.f64 1 y) 1/3))","(fma.f64 -1 (*.f64 (cbrt.f64 (/.f64 1 y)) z) (cbrt.f64 (/.f64 1 y)))","(fma.f64 (neg.f64 (cbrt.f64 (/.f64 1 y))) z (cbrt.f64 (/.f64 1 y)))","(*.f64 (+.f64 (neg.f64 z) 1) (cbrt.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) z)) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2))) (pow.f64 (/.f64 1 y) 1/3)))","(fma.f64 -1 (*.f64 (cbrt.f64 (/.f64 1 y)) z) (fma.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (+.f64 1/2 (/.f64 1/2 y)) (*.f64 z z)) (cbrt.f64 (/.f64 1 y))))","(-.f64 (*.f64 (+.f64 (*.f64 z (*.f64 z (+.f64 1/2 (/.f64 1/2 y)))) 1) (cbrt.f64 (/.f64 1 y))) (*.f64 (cbrt.f64 (/.f64 1 y)) z))","(*.f64 (cbrt.f64 (/.f64 1 y)) (-.f64 (+.f64 (*.f64 z (*.f64 z (+.f64 1/2 (/.f64 1/2 y)))) 1) z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) z)) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)))) (pow.f64 (/.f64 1 y) 1/3))))","(fma.f64 -1 (*.f64 (cbrt.f64 (/.f64 1 y)) z) (fma.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (+.f64 1/2 (/.f64 1/2 y)) (*.f64 z z)) (fma.f64 -1 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1/2 y) (+.f64 1/6 (/.f64 1/3 (*.f64 y y)))) (pow.f64 z 3))) (cbrt.f64 (/.f64 1 y)))))","(+.f64 (-.f64 (*.f64 (+.f64 (*.f64 z (*.f64 z (+.f64 1/2 (/.f64 1/2 y)))) 1) (cbrt.f64 (/.f64 1 y))) (*.f64 (cbrt.f64 (/.f64 1 y)) z)) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (/.f64 1/2 y) (+.f64 1/6 (/.f64 1/3 (*.f64 y y))))) (neg.f64 (pow.f64 z 3))))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (-.f64 (+.f64 (*.f64 z (*.f64 z (+.f64 1/2 (/.f64 1/2 y)))) 1) z)) (*.f64 (pow.f64 z 3) (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (/.f64 1/3 (*.f64 y y)) (+.f64 (/.f64 1/2 y) 1/6)))))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)))","(*.f64 (cbrt.f64 (/.f64 1 y)) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))","(*.f64 (cbrt.f64 (/.f64 1 y)) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))","(*.f64 (cbrt.f64 (/.f64 1 y)) (pow.f64 (*.f64 y (/.f64 1 z)) y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) z))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))))","(fma.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) z)) (*.f64 (cbrt.f64 (/.f64 1 y)) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))) (/.f64 (*.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (cbrt.f64 (pow.f64 y 5))) z))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (pow.f64 (*.f64 y (/.f64 1 z)) y)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 y 5)) z) (pow.f64 (*.f64 y (/.f64 1 z)) y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2)))))","(fma.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) z)) (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 4) (pow.f64 y 3))) (*.f64 z z)) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))) (/.f64 (*.f64 (neg.f64 (cbrt.f64 (pow.f64 y 5))) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))) z))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 y 3) (+.f64 1 y)))) 1))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 y 5)) z) (pow.f64 (*.f64 y (/.f64 1 z)) y)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (pow.f64 z 2))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (/.f64 (pow.f64 z 3) (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 4))) (*.f64 (*.f64 -1/2 (pow.f64 y 3)) (*.f64 (*.f64 y y) 1)))))) (fma.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) z)) (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (pow.f64 z 3)) (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y (pow.f64 y 4)) (*.f64 y (*.f64 (*.f64 (pow.f64 y 3) -2) 1/6))))) (fma.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 4) (pow.f64 y 3))) (*.f64 z z)) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))) (/.f64 (*.f64 (neg.f64 (cbrt.f64 (pow.f64 y 5))) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))) z)))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) (pow.f64 z 3)) (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 (pow.f64 y 4) -2) (*.f64 -1/2 (pow.f64 y 5))))) (*.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 y 3) (+.f64 1 y)))) 1)))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 y 5)) z) (pow.f64 (*.f64 y (/.f64 1 z)) y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))))","(*.f64 (cbrt.f64 (/.f64 1 y)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))","(*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) z))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))))","(fma.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) z)) (*.f64 (cbrt.f64 (/.f64 1 y)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))) (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) z)))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y))) (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2))) (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))))))","(fma.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) z)) (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 4) (pow.f64 y 3))) (*.f64 z z)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))) (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) z)))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 y 3) (+.f64 1 y)))) 1))) (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) z))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 z 2))) (+.f64 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (pow.f64 z 3)))))))","(fma.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) z)) (+.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 z z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (/.f64 (pow.f64 z 3) (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 8))) (*.f64 1/2 (*.f64 (*.f64 (*.f64 y y) 1) (pow.f64 y 3)))))))))))","(-.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (*.f64 (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 4) (pow.f64 y 3))) (*.f64 z z)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))) (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (pow.f64 z 3)) (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (*.f64 y (pow.f64 y 4)) (*.f64 (*.f64 2 (pow.f64 y 3)) (*.f64 y 1/6))))))) (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) z)))","(-.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (-.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 y 3) (+.f64 1 y)))) 1)) (*.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (pow.f64 y 5) (*.f64 1/6 (*.f64 (pow.f64 y 4) 2)))) (pow.f64 z 3))))) (*.f64 (cbrt.f64 (pow.f64 y 5)) (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) z)))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x))","(+.f64 (+.f64 (/.f64 1 y) x) (*.f64 -1 (/.f64 z y)))","(-.f64 (+.f64 (/.f64 1 y) x) (/.f64 z y))","(+.f64 (/.f64 1 y) (-.f64 x (/.f64 z y)))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2)) y)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x)))","(fma.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/2 y)) (/.f64 y (*.f64 z z))) (+.f64 (+.f64 (/.f64 1 y) x) (*.f64 -1 (/.f64 z y))))","(+.f64 (+.f64 (/.f64 1 y) x) (-.f64 (/.f64 (+.f64 1/2 (/.f64 1/2 y)) (/.f64 y (*.f64 z z))) (/.f64 z y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) (+.f64 1/6 (*.f64 1/3 (/.f64 1 (pow.f64 y 2))))) (pow.f64 z 3)) y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 1 y)) 1/2) (pow.f64 z 2)) y)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 1 y)) x))))","(+.f64 (fma.f64 1 (/.f64 (+.f64 1/2 (/.f64 1/2 y)) (/.f64 y (*.f64 z z))) (+.f64 (+.f64 (/.f64 1 y) x) (*.f64 -1 (/.f64 z y)))) (*.f64 -1 (/.f64 (+.f64 (/.f64 1/2 y) (+.f64 1/6 (/.f64 1/3 (*.f64 y y)))) (/.f64 y (pow.f64 z 3)))))","(-.f64 (+.f64 (+.f64 (/.f64 1 y) x) (-.f64 (/.f64 (+.f64 1/2 (/.f64 1/2 y)) (/.f64 y (*.f64 z z))) (/.f64 z y))) (*.f64 (/.f64 (+.f64 (/.f64 1/2 y) (+.f64 1/6 (/.f64 1/3 (*.f64 y y)))) y) (pow.f64 z 3)))","(+.f64 (+.f64 (/.f64 1 y) x) (-.f64 (-.f64 (/.f64 (+.f64 1/2 (/.f64 1/2 y)) (/.f64 y (*.f64 z z))) (/.f64 z y)) (*.f64 (/.f64 (pow.f64 z 3) y) (+.f64 (/.f64 1/3 (*.f64 y y)) (+.f64 (/.f64 1/2 y) 1/6)))))","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)))","(fma.f64 1 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x)","(+.f64 x (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y))","(+.f64 x (/.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)) x))","(+.f64 (*.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))))) (fma.f64 1 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x))","(-.f64 (+.f64 x (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z)))))","(+.f64 (/.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) y) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (*.f64 y (/.f64 1 z)) y))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)) x)))","(fma.f64 1 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 y (*.f64 z z)) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (+.f64 (*.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))))) (fma.f64 1 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x)))","(+.f64 (+.f64 x (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y)) (-.f64 (*.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 4) (pow.f64 y 3)))) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 z z))) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))))","(+.f64 (+.f64 x (/.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) y)) (*.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) (-.f64 (/.f64 (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 1 y))) (*.f64 y (*.f64 z z))) (/.f64 y z))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) (+.f64 (*.f64 -1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 -2 (pow.f64 y 3)))))) (*.f64 -1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3)))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) (*.f64 y (pow.f64 z 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 z)) (log.f64 y)) y)) y)) x))))","(fma.f64 1 (*.f64 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 4))) (*.f64 (*.f64 -1/2 (pow.f64 y 3)) (*.f64 (*.f64 y y) 1)))) (pow.f64 z 3))) (fma.f64 1 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 y (*.f64 z z)) (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))))) (+.f64 (*.f64 -1 (/.f64 y (/.f64 z (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y))))))) (fma.f64 1 (/.f64 (exp.f64 (*.f64 y (+.f64 (neg.f64 (log.f64 z)) (log.f64 y)))) y) x))))","(+.f64 (-.f64 (+.f64 x (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) y)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))))) (+.f64 (*.f64 (/.f64 1/2 (/.f64 y (+.f64 (pow.f64 y 4) (pow.f64 y 3)))) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (*.f64 z z))) (*.f64 (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y (pow.f64 y 4)) (*.f64 y (*.f64 (*.f64 (pow.f64 y 3) -2) 1/6)))) y) (/.f64 (pow.f64 (exp.f64 y) (-.f64 (log.f64 y) (log.f64 z))) (pow.f64 z 3)))))","(+.f64 (+.f64 (/.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) y) (-.f64 x (*.f64 (/.f64 y z) (pow.f64 (*.f64 y (/.f64 1 z)) y)))) (*.f64 (/.f64 (pow.f64 (*.f64 y (/.f64 1 z)) y) y) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 y 3) (+.f64 1 y)))) (/.f64 (fma.f64 -1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 (pow.f64 y 4) -2) (*.f64 -1/2 (pow.f64 y 5)))) (pow.f64 z 3)))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) x)","(fma.f64 1 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) x)","(+.f64 x (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y))","(+.f64 x (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) x))","(+.f64 (fma.f64 1 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) x) (*.f64 -1 (/.f64 (*.f64 y (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))) z)))","(-.f64 (+.f64 x (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))","(+.f64 x (-.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) y) (*.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) z) y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2)))) x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))) z)) (fma.f64 1 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (fma.f64 1 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 y (*.f64 z z)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) x)))","(+.f64 (-.f64 (+.f64 x (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y)) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 4) (pow.f64 y 3))) (*.f64 z z))))","(+.f64 x (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) y) (+.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 y 3) (+.f64 1 y)))) 1)) (*.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) z) y)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) z))) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) y)) (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 y (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2))))) (*.f64 1/2 (pow.f64 y 4))) (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z)))))) (*.f64 y (pow.f64 z 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 (exp.f64 (*.f64 y (+.f64 (log.f64 (*.f64 -1 y)) (log.f64 (/.f64 -1 z))))) (+.f64 (*.f64 1/6 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (*.f64 y (+.f64 (*.f64 -6 (pow.f64 y 3)) (+.f64 (*.f64 6 (pow.f64 y 3)) (*.f64 2 (pow.f64 y 3)))))) (*.f64 1/2 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 2 (pow.f64 y 2)))))))) (*.f64 y (pow.f64 z 3))))) x))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))) z)) (fma.f64 1 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (fma.f64 1 (/.f64 (*.f64 1/2 (+.f64 (*.f64 y (*.f64 (*.f64 y y) 1)) (pow.f64 y 4))) (/.f64 (*.f64 y (*.f64 z z)) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))))) (+.f64 x (*.f64 -1 (/.f64 (*.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y (fma.f64 -6 (pow.f64 y 3) (*.f64 (pow.f64 y 3) 8))) (*.f64 1/2 (*.f64 (*.f64 (*.f64 y y) 1) (pow.f64 y 3)))))) (*.f64 y (pow.f64 z 3))))))))","(-.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (+.f64 x (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (/.f64 (*.f64 1/2 (+.f64 (pow.f64 y 4) (pow.f64 y 3))) (*.f64 z z))) (*.f64 (/.f64 (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z)))) y) (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (*.f64 y (pow.f64 y 4)) (*.f64 (*.f64 2 (pow.f64 y 3)) (*.f64 y 1/6)))) (pow.f64 z 3)))))) (*.f64 (/.f64 y z) (pow.f64 (exp.f64 y) (+.f64 (log.f64 (neg.f64 y)) (log.f64 (/.f64 -1 z))))))","(+.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) y) (-.f64 (+.f64 x (*.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) y) (-.f64 (/.f64 1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 y 3) (+.f64 1 y)))) (/.f64 (fma.f64 1/6 (pow.f64 y 6) (fma.f64 1/2 (pow.f64 y 5) (*.f64 1/6 (*.f64 (pow.f64 y 4) 2)))) (pow.f64 z 3))))) (*.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 y) y) (pow.f64 (/.f64 -1 z) y)) z) y)))","(*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y))","(*.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y)","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)))","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)))","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 x (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)))","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","x","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","x","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 y z))) y)) y)) x)","(fma.f64 1 (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y) x)","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))"]],"stop":[["node limit",1]],"time":41.94189453125,"type":"simplify"},{"compiler":[[7025,3831]],"time":65.24609375,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","done",5.440442030053174],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","next",8.456746476695377],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","done",5.718524180933477],["(+.f64 x (/.f64 1 y))","done",3.002976040835856]],"compiler":[[14,8],[10,7],[19,11],[8,6],[10,7]],"count":[[206,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[202,0],"picked":[1,1]}],"min-error":[0],"time":50.949951171875,"type":"prune"},{"compiler":[[23,7]],"locations":[["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))",0.0078125,true],["(/.f64 (exp.f64 (neg.f64 z)) y)",0.01171875,true]],"time":4.736083984375,"type":"localize"},{"count":[[2,38]],"series":[["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","y","-inf",0.15185546875],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","y","inf",0.152099609375],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","y","0",0.16796875],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","z","-inf",0.174072265625],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","z","inf",0.18701171875],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","z","0",0.18896484375],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","x","-inf",0.157958984375],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","x","inf",0.177978515625],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","x","0",0.2958984375],["(/.f64 (exp.f64 (neg.f64 z)) y)","y","-inf",0.2900390625],["(/.f64 (exp.f64 (neg.f64 z)) y)","y","inf",0.305908203125],["(/.f64 (exp.f64 (neg.f64 z)) y)","y","0",0.34912109375],["(/.f64 (exp.f64 (neg.f64 z)) y)","z","-inf",0.344970703125],["(/.f64 (exp.f64 (neg.f64 z)) y)","z","inf",0.333984375],["(/.f64 (exp.f64 (neg.f64 z)) y)","z","0",0.35693359375]],"time":3.7939453125,"type":"series"},{"count":[[2,64]],"egraph":[[2,2524,15,0.021302375],[1,174,15,0.0033006249999999997],[0,8,19,0.00019325]],"inputs":[["(/.f64 (exp.f64 (neg.f64 z)) y)","(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (exp.f64 z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 z) y)) (pow.f64 (cbrt.f64 (/.f64 (exp.f64 z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (exp.f64 z) y)) 2) (cbrt.f64 (/.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 z)) 2) (*.f64 (cbrt.f64 (exp.f64 z)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (exp.f64 z) y)) (sqrt.f64 (/.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 z)) (*.f64 (sqrt.f64 (exp.f64 z)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 z)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (exp.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 z)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 z)) 1) (/.f64 (sqrt.f64 (exp.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (exp.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 z)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 z)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (exp.f64 z)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (exp.f64 z) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 z)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (exp.f64 z)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (exp.f64 z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (exp.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (exp.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (exp.f64 z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 z (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (/.f64 (exp.f64 z) y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (/.f64 (exp.f64 z) y))) (/.f64 (pow.f64 (/.f64 (exp.f64 z) y) 2) (-.f64 x (/.f64 (exp.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (exp.f64 z) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (exp.f64 z) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)) (pow.f64 (cbrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)) 2) (cbrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)) (sqrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (exp.f64 z) y) 3)) (/.f64 1 (fma.f64 x x (*.f64 (/.f64 (exp.f64 z) y) (-.f64 (/.f64 (exp.f64 z) y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (exp.f64 z) y) 2)) (/.f64 1 (-.f64 x (/.f64 (exp.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (/.f64 (exp.f64 z) y) (-.f64 (/.f64 (exp.f64 z) y) x))) (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (exp.f64 z) y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (/.f64 (exp.f64 z) y)) (-.f64 (*.f64 x x) (pow.f64 (/.f64 (exp.f64 z) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (exp.f64 z) y) 3)) (fma.f64 x x (*.f64 (/.f64 (exp.f64 z) y) (-.f64 (/.f64 (exp.f64 z) y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (exp.f64 z) y) 3)) (+.f64 (pow.f64 (/.f64 (exp.f64 z) y) 2) (-.f64 (*.f64 x x) (/.f64 (*.f64 x (exp.f64 z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (exp.f64 z) y) 2)) (-.f64 x (/.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (exp.f64 z) y) 3))) (neg.f64 (fma.f64 x x (*.f64 (/.f64 (exp.f64 z) y) (-.f64 (/.f64 (exp.f64 z) y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (exp.f64 z) y) 2))) (neg.f64 (-.f64 x (/.f64 (exp.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (exp.f64 z) y) 2) (*.f64 x x)) (-.f64 (/.f64 (exp.f64 z) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (exp.f64 z) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (exp.f64 z) y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 (exp.f64 z) y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 (exp.f64 z) y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 (exp.f64 z) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (exp.f64 z) y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 (exp.f64 z) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 (exp.f64 z) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 (exp.f64 z) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 z) (/.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (exp.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (exp.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (exp.f64 z) y)) 2) (cbrt.f64 (/.f64 (exp.f64 z) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (/.f64 (exp.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (exp.f64 z) y)) (sqrt.f64 (/.f64 (exp.f64 z) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (/.f64 (exp.f64 z) y))))))"]],"rules":[["egg-rr",34],["egg-rr",30]],"stop":[["node limit",1]],"time":43.156982421875,"type":"rewrite"},{"count":[[102,83]],"egraph":[[5,6052,406,0.026334291000000003],[4,1552,406,0.013115166000000001],[3,583,412,0.004128958],[2,224,412,0.001608166],[1,98,414,0.000623958],[0,39,421,0.000196833]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 z 3) y)) (*.f64 -1 (/.f64 z y)))))","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) x))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) x)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 z 3) y)) (+.f64 (*.f64 -1 (/.f64 z y)) x))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(/.f64 (exp.f64 (neg.f64 z)) y)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 1 y) (neg.f64 (/.f64 z y)))","(-.f64 (/.f64 1 y) (/.f64 z y))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))))","(fma.f64 1/2 (/.f64 (*.f64 z z) y) (+.f64 (/.f64 1 y) (neg.f64 (/.f64 z y))))","(fma.f64 1/2 (/.f64 z (/.f64 y z)) (-.f64 (/.f64 1 y) (/.f64 z y)))","(fma.f64 1/2 (*.f64 (/.f64 z y) z) (-.f64 (/.f64 1 y) (/.f64 z y)))","(-.f64 (fma.f64 1/2 (*.f64 z (/.f64 z y)) (/.f64 1 y)) (/.f64 z y))","(+.f64 (/.f64 1 y) (*.f64 (/.f64 z y) (+.f64 -1 (*.f64 z 1/2))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 z 3) y)) (*.f64 -1 (/.f64 z y)))))","(fma.f64 1/2 (/.f64 (*.f64 z z) y) (+.f64 (/.f64 1 y) (fma.f64 -1/6 (/.f64 (pow.f64 z 3) y) (neg.f64 (/.f64 z y)))))","(+.f64 (fma.f64 1/2 (/.f64 z (/.f64 y z)) (-.f64 (/.f64 1 y) (/.f64 z y))) (*.f64 -1/6 (/.f64 (pow.f64 z 3) y)))","(-.f64 (fma.f64 1/2 (*.f64 (/.f64 z y) z) (fma.f64 -1/6 (/.f64 (pow.f64 z 3) y) (/.f64 1 y))) (/.f64 z y))","(fma.f64 (/.f64 1/2 y) (*.f64 z z) (-.f64 (fma.f64 (/.f64 -1/6 y) (pow.f64 z 3) (/.f64 1 y)) (/.f64 z y)))","(+.f64 (/.f64 1 y) (-.f64 (*.f64 (*.f64 z (/.f64 z y)) (+.f64 1/2 (*.f64 z -1/6))) (/.f64 z y)))","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","(/.f64 (exp.f64 (*.f64 -1 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","(/.f64 (exp.f64 (neg.f64 z)) y)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 1 y) x)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) x))","(+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 z y) x))","(+.f64 (/.f64 1 y) (-.f64 x (/.f64 z y)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 z y)) x)))","(fma.f64 1/2 (/.f64 (*.f64 z z) y) (+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 z y) x)))","(+.f64 (fma.f64 1/2 (/.f64 z (/.f64 y z)) (-.f64 (/.f64 1 y) (/.f64 z y))) x)","(+.f64 (/.f64 1 y) (fma.f64 1/2 (*.f64 (/.f64 z y) z) (-.f64 x (/.f64 z y))))","(+.f64 (/.f64 1 y) (fma.f64 1/2 (*.f64 z (/.f64 z y)) (-.f64 x (/.f64 z y))))","(+.f64 (/.f64 1 y) (+.f64 x (*.f64 (/.f64 z y) (+.f64 -1 (*.f64 z 1/2)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 z 2) y)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 z 3) y)) (+.f64 (*.f64 -1 (/.f64 z y)) x))))","(fma.f64 1/2 (/.f64 (*.f64 z z) y) (+.f64 (/.f64 1 y) (fma.f64 -1/6 (/.f64 (pow.f64 z 3) y) (fma.f64 -1 (/.f64 z y) x))))","(+.f64 (fma.f64 -1/6 (/.f64 (pow.f64 z 3) y) (-.f64 x (/.f64 z y))) (fma.f64 1/2 (/.f64 z (/.f64 y z)) (/.f64 1 y)))","(+.f64 (fma.f64 1/2 (*.f64 (/.f64 z y) z) (-.f64 (/.f64 1 y) (/.f64 z y))) (fma.f64 -1/6 (/.f64 (pow.f64 z 3) y) x))","(+.f64 (fma.f64 (/.f64 1/2 y) (*.f64 z z) (-.f64 (fma.f64 (/.f64 -1/6 y) (pow.f64 z 3) (/.f64 1 y)) (/.f64 z y))) x)","(+.f64 (/.f64 1 y) (+.f64 x (-.f64 (*.f64 (*.f64 z (/.f64 z y)) (+.f64 1/2 (*.f64 z -1/6))) (/.f64 z y))))","(+.f64 (-.f64 x (/.f64 z y)) (+.f64 (/.f64 1 y) (*.f64 (*.f64 z (/.f64 z y)) (+.f64 1/2 (*.f64 z -1/6)))))","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (*.f64 -1 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(/.f64 (exp.f64 (neg.f64 z)) y)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","x","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)","(+.f64 (/.f64 (exp.f64 (neg.f64 z)) y) x)"]],"stop":[["node limit",1]],"time":43.31201171875,"type":"simplify"},{"compiler":[[1055,420]],"time":10.10107421875,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","done",5.440442030053174],["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","done",8.456746476695377],["(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","done",5.718524180933477],["(+.f64 x (/.f64 1 y))","done",3.002976040835856]],"compiler":[[14,8],[10,7],[19,11],[8,6]],"count":[[87,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[83,0],"picked":[1,1]}],"min-error":[0],"time":15.706787109375,"type":"prune"},{"accuracy":[0.8074175198472052],"baseline":[3.002976040835856],"branch":[["x",3.0029760408358563,1],["y",1.0446371195725344,2],["z",1.5643396088764505,3],["(+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y))",0.8074175198472052,3],["(/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y)",3.002976040835856,1]],"compiler":[[4,3],[4,3],[4,3],[16,10],[14,9],[55,27]],"count":[[5,3]],"inputs":[["(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","(fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) (cbrt.f64 y)) x)","(+.f64 x (/.f64 1 y))","(+.f64 x (/.f64 (pow.f64 (/.f64 y (+.f64 y z)) y) y))","(+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, G"],"oracle":[11.617514405515449],"outputs":[["(+.f64 x (/.f64 1 y))","(+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y))","(+.f64 x (/.f64 1 y))"]],"time":38.09521484375,"times":[["x",3.846923828125],["y",6.8720703125],["z",9.952880859375],["(+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y))",12.68603515625],["(/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y)",3.5009765625]],"type":"regimes"},{"bstep":[[1.797629170292409e-33,2.3231698787527113e-32,0.034912109375],[-17832662020579283000.0,-1560496810167538700.0,0.095947265625]],"compiler":[[6,5],[16,10]],"method":["left-value","left-value"],"time":0.2138671875,"type":"bsearch"},{"compiler":[[52,26]],"egraph":[[3,38,75,0.00018175],[2,37,75,0.000139916],[1,35,75,9.8416e-5],[0,25,75,5.6e-5]],"inputs":[["(if (<=.f64 (+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y)) -10000000000000000000) (+.f64 x (/.f64 1 y)) (if (<=.f64 (+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y)) 1461501637330903/730750818665451459101842416358141509827966271488) (+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y)) (+.f64 x (/.f64 1 y))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y)) -10000000000000000000) (+.f64 x (/.f64 1 y)) (if (<=.f64 (+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 z y))))) y)) 1461501637330903/730750818665451459101842416358141509827966271488) (+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y)) (+.f64 x (/.f64 1 y))))","(if (<=.f64 (+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 y z))))) y)) -10000000000000000000) (+.f64 x (/.f64 1 y)) (if (<=.f64 (+.f64 x (/.f64 (exp.f64 (*.f64 y (log.f64 (/.f64 y (+.f64 y z))))) y)) 1461501637330903/730750818665451459101842416358141509827966271488) (+.f64 x (/.f64 (exp.f64 (neg.f64 z)) y)) (+.f64 x (/.f64 1 y))))"]],"stop":[["done",1],["saturated",1]],"time":9.319091796875,"type":"simplify"},{"time":0.02001953125,"type":"soundness"},{"compiler":[[52,26]],"remove-preprocessing":[[]],"time":14.134033203125,"type":"end"}]
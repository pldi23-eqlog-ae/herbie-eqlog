[{"compiler":[[21,16]],"method":["search"],"sampling":[[12,0.4987797737121582,0.0009760856628417969,0.500244140625],[11,0.4978036880493164,0.0019521713256835938,0.500244140625],[10,0.4958515167236328,0.0039043426513671875,0.500244140625],[9,0.4919471740722656,0.007808685302734375,0.500244140625],[8,0.48413848876953125,0.01561737060546875,0.500244140625],[7,0.4685211181640625,0.0312347412109375,0.500244140625],[6,0.437286376953125,0.062469482421875,0.500244140625],[5,0.37481689453125,0.12493896484375,0.500244140625],[4,0.2498779296875,0.2498779296875,0.500244140625],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.240966796875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.348876953125,8],["body",256,"valid",405.693115234375,8256]],"time":413.56201171875,"type":"sample"},{"compiler":[[20,15]],"egraph":[[0,1,1,1.792e-6],[8,7541,25,0.041929874],[7,5200,25,0.033429624],[6,2917,25,0.019067666],[5,1689,25,0.010415041],[4,711,27,0.005288041],[3,238,27,0.001723916],[2,89,27,0.000609208],[1,37,29,0.000220125],[0,15,29,8.225e-5]],"inputs":[["0"],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))","(*.f64 (/.f64 (sqrt.f64 2) 4) (*.f64 (sqrt.f64 (+.f64 1 (*.f64 -3 (*.f64 v v)))) (-.f64 1 (*.f64 v v))))","(*.f64 (/.f64 (sqrt.f64 2) 4) (*.f64 (sqrt.f64 (+.f64 1 (*.f64 (*.f64 v v) -3))) (-.f64 1 (*.f64 v v))))","(*.f64 (/.f64 (sqrt.f64 2) 4) (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (-.f64 1 (*.f64 v v))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (/.f64 (sqrt.f64 2) 4) (-.f64 1 (*.f64 v v))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (fma.f64 v v -1) (/.f64 (sqrt.f64 2) -4)))","(*.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)) (*.f64 (sqrt.f64 2) (*.f64 -1/4 (fma.f64 v v -1))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":66.2529296875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[8,7541,25,0.041968041],[7,5200,25,0.033465416],[6,2917,25,0.019056083],[5,1689,25,0.010400624],[4,711,27,0.005278708],[3,238,27,0.001707542],[2,89,27,0.000604208],[1,37,29,0.00021725],[0,15,29,7.85e-5]],"inputs":[["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))","(*.f64 (/.f64 (sqrt.f64 2) 4) (*.f64 (sqrt.f64 (+.f64 1 (*.f64 -3 (*.f64 v v)))) (-.f64 1 (*.f64 v v))))","(*.f64 (/.f64 (sqrt.f64 2) 4) (*.f64 (sqrt.f64 (+.f64 1 (*.f64 (*.f64 v v) -3))) (-.f64 1 (*.f64 v v))))","(*.f64 (/.f64 (sqrt.f64 2) 4) (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (-.f64 1 (*.f64 v v))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (/.f64 (sqrt.f64 2) 4) (-.f64 1 (*.f64 v v))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (fma.f64 v v -1) (/.f64 (sqrt.f64 2) -4)))","(*.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)) (*.f64 (sqrt.f64 2) (*.f64 -1/4 (fma.f64 v v -1))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))"]],"stop":[["node limit",1]],"time":53.734130859375,"type":"simplify"},{"compiler":[[37,26]],"time":0.5888671875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))","next",0.01171875]],"compiler":[[18,13],[18,13]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01171875],"time":1.054931640625,"type":"prune"},{"compiler":[[57,36]],"locations":[["(sqrt.f64 (fma.f64 (*.f64 v v) -3 1))",0.00390625,true],["(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))",0.015625,true]],"time":12.426025390625,"type":"localize"},{"count":[[2,16]],"series":[["(sqrt.f64 (fma.f64 (*.f64 v v) -3 1))","v","-inf",0.322998046875],["(sqrt.f64 (fma.f64 (*.f64 v v) -3 1))","v","inf",0.4990234375],["(sqrt.f64 (fma.f64 (*.f64 v v) -3 1))","v","0",0.402099609375],["(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","v","-inf",0.201904296875],["(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","v","inf",0.47705078125],["(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","v","0",0.64697265625]],"time":2.651123046875,"type":"series"},{"count":[[2,84]],"egraph":[[2,2580,23,0.023611501],[1,255,23,0.0038423759999999998],[0,13,23,0.000449709]],"inputs":[["(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(sqrt.f64 (fma.f64 (*.f64 v v) -3 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/4 (*.f64 v v)) (sqrt.f64 2)) (*.f64 1/4 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 -1/4 (*.f64 v v))) (*.f64 (sqrt.f64 2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (sqrt.f64 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (sqrt.f64 2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))))) (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 2) 1/2) (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 2)) 1) (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sqrt.f64 2)) (*.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 2) 1/2) (*.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 2)) 1) (*.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 1) (log.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (*.f64 (log.f64 2) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 1) (*.f64 (log.f64 2) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (*.f64 (log.f64 (sqrt.f64 2)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 1) (*.f64 (log.f64 (sqrt.f64 2)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (*.f64 -1/4 (*.f64 v v)) (*.f64 (sqrt.f64 2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/4 (*.f64 v v)) (sqrt.f64 2) (*.f64 1/4 (sqrt.f64 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 v (*.f64 v -3) 1)) (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6) (cbrt.f64 (fma.f64 v (*.f64 v -3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/4) (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 2))) (pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 5/6) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/4)) (pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 3/4) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 3/4) 1/2) (sqrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 5/6) 1/2) (sqrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 v (*.f64 v -3) 1)) 4) 1/3) (cbrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 5/4) 1/3) (cbrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6)) 2) 3) (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6)) 3) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 v (*.f64 v -3) 1)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/2) (log1p.f64 (*.f64 v (*.f64 v -3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3))))) 2)) (cbrt.f64 (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3)))))) (sqrt.f64 (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 (*.f64 v (*.f64 v -3))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 v (*.f64 v -3) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (*.f64 v (*.f64 v -3))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3/2 (log1p.f64 (*.f64 v (*.f64 v -3)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 v (*.f64 v -3) 1) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/4 (log1p.f64 (*.f64 v (*.f64 v -3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (*.f64 v (*.f64 v -3))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (*.f64 v (*.f64 v -3))) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/2 (log1p.f64 (*.f64 v (*.f64 v -3)))) 1) 1))))))"]],"rules":[["egg-rr",46],["egg-rr",38]],"stop":[["node limit",1]],"time":45.553955078125,"type":"rewrite"},{"count":[[100,96]],"egraph":[[18,7919,193,0.118849914],[17,7647,193,0.110243706],[16,7385,193,0.100767206],[15,7133,193,0.09143804],[14,6881,193,0.082148331],[13,6276,193,0.07235383100000001],[12,5785,193,0.06208529000000001],[11,5320,193,0.053173248000000006],[10,4894,193,0.044482456000000004],[9,4507,193,0.036090248000000005],[8,4170,193,0.028839373],[7,3943,193,0.022677664],[6,3743,193,0.017187039],[5,3158,193,0.012035581],[4,1345,193,0.006899373],[3,382,193,0.002858332],[2,141,213,0.001047832],[1,63,242,0.00043479099999999996],[0,28,244,0.000144166]],"inputs":[["(*.f64 1/4 (sqrt.f64 2))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2)))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2)))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","1","(+.f64 1 (*.f64 -3/2 (pow.f64 v 2)))","(+.f64 1 (+.f64 (*.f64 -3/2 (pow.f64 v 2)) (*.f64 -9/8 (pow.f64 v 4))))","(+.f64 1 (+.f64 (*.f64 -3/2 (pow.f64 v 2)) (+.f64 (*.f64 -27/16 (pow.f64 v 6)) (*.f64 -9/8 (pow.f64 v 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/4 (sqrt.f64 2))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2)))","(*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v)))","(*.f64 (sqrt.f64 2) (*.f64 -1/4 (*.f64 v v)))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2)))","(*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v)))","(*.f64 (sqrt.f64 2) (*.f64 -1/4 (*.f64 v v)))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","(+.f64 (*.f64 1/4 (sqrt.f64 2)) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (pow.f64 v 2))))","(fma.f64 1/4 (sqrt.f64 2) (*.f64 -1/4 (*.f64 (sqrt.f64 2) (*.f64 v v))))","(*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 -1/4 (*.f64 v v))))","(*.f64 (sqrt.f64 2) (fma.f64 v (*.f64 -1/4 v) 1/4))","(*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4))","1","(+.f64 1 (*.f64 -3/2 (pow.f64 v 2)))","(+.f64 1 (*.f64 (*.f64 v v) -3/2))","(fma.f64 (*.f64 v v) -3/2 1)","(fma.f64 v (*.f64 v -3/2) 1)","(+.f64 1 (+.f64 (*.f64 -3/2 (pow.f64 v 2)) (*.f64 -9/8 (pow.f64 v 4))))","(+.f64 1 (fma.f64 -3/2 (*.f64 v v) (*.f64 -9/8 (pow.f64 v 4))))","(+.f64 1 (fma.f64 (*.f64 v v) -3/2 (*.f64 -9/8 (pow.f64 v 4))))","(fma.f64 (*.f64 v v) -3/2 (fma.f64 -9/8 (pow.f64 v 4) 1))","(fma.f64 v (*.f64 v -3/2) (fma.f64 -9/8 (pow.f64 v 4) 1))","(fma.f64 v (*.f64 v (fma.f64 v (*.f64 v -9/8) -3/2)) 1)","(+.f64 1 (+.f64 (*.f64 -3/2 (pow.f64 v 2)) (+.f64 (*.f64 -27/16 (pow.f64 v 6)) (*.f64 -9/8 (pow.f64 v 4)))))","(+.f64 1 (fma.f64 -3/2 (*.f64 v v) (fma.f64 -27/16 (pow.f64 v 6) (*.f64 -9/8 (pow.f64 v 4)))))","(+.f64 1 (fma.f64 (*.f64 v v) -3/2 (fma.f64 -9/8 (pow.f64 v 4) (*.f64 -27/16 (pow.f64 v 6)))))","(+.f64 (fma.f64 (*.f64 v v) -3/2 1) (fma.f64 -27/16 (pow.f64 v 6) (*.f64 -9/8 (pow.f64 v 4))))","(fma.f64 -27/16 (pow.f64 v 6) (fma.f64 v (*.f64 v -3/2) (fma.f64 -9/8 (pow.f64 v 4) 1)))","(fma.f64 v (*.f64 v (fma.f64 (pow.f64 v 4) -27/16 -3/2)) (fma.f64 -9/8 (pow.f64 v 4) 1))","(fma.f64 -27/16 (pow.f64 v 6) (fma.f64 v (*.f64 v (fma.f64 v (*.f64 v -9/8) -3/2)) 1))"]],"stop":[["node limit",1]],"time":137.97802734375,"type":"simplify"},{"compiler":[[2140,1579]],"time":28.6220703125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))","done",0.01171875],["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (sqrt.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2))))","next",0.00390625]],"compiler":[[18,13],[20,15],[20,15]],"count":[[97,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[96,1],"picked":[1,1]}],"min-error":[0],"time":20.5888671875,"type":"prune"},{"compiler":[[77,50]],"locations":[["(sqrt.f64 (fma.f64 (*.f64 v v) -3 1))",0.00390625,false],["(pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)",0.01171875,true]],"time":16.1279296875,"type":"localize"},{"count":[[1,12]],"series":[["(pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)","v","-inf",0.182861328125],["(pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)","v","inf",0.297119140625],["(pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)","v","0",0.31787109375]],"time":0.85009765625,"type":"series"},{"count":[[1,18]],"egraph":[[2,1661,11,0.016455542],[1,165,11,0.002651917],[0,8,11,0.00032]],"inputs":[["(pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/4 (*.f64 v v)) (fma.f64 -1/4 (*.f64 v v) 1/4)) (*.f64 1/4 (fma.f64 -1/4 (*.f64 v v) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) (*.f64 -1/4 (*.f64 v v))) (*.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) (fma.f64 -1/4 (*.f64 v v) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 4)) (pow.f64 (cbrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 2) (cbrt.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 2) (*.f64 (cbrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (fma.f64 -1/4 (*.f64 v v) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (*.f64 (sqrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) (fma.f64 -1/4 (*.f64 v v) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) (sqrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4))) (sqrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) (pow.f64 (cbrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)) 2)) (cbrt.f64 (fma.f64 -1/4 (*.f64 v v) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (fma.f64 -1/4 (*.f64 v v) 1/4))))))))"]],"rules":[["egg-rr",18]],"stop":[["node limit",1]],"time":34.14404296875,"type":"rewrite"},{"count":[[30,26]],"egraph":[[20,7570,141,0.12930829300000002],[19,7546,141,0.11574233400000003],[18,7486,141,0.10488508400000003],[17,7288,141,0.09546820900000003],[16,7062,141,0.08592433400000002],[15,6750,141,0.07666937500000001],[14,5999,141,0.066909167],[13,5369,141,0.05640041700000001],[12,4836,141,0.047549083000000006],[11,4384,141,0.039687167],[10,4025,141,0.03257675],[9,3754,141,0.0263075],[8,3555,141,0.020833875],[7,3380,141,0.015726375],[6,2890,141,0.011180667],[5,1514,141,0.006761209],[4,427,141,0.003195084],[3,152,141,0.001199084],[2,63,141,0.000546209],[1,31,141,0.00025837500000000003],[0,14,153,9.2917e-5]],"inputs":[["1/16","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) 1/16)","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(*.f64 1/16 (pow.f64 v 4))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (*.f64 1/16 (pow.f64 v 4)))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(*.f64 1/16 (pow.f64 v 4))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (*.f64 1/16 (pow.f64 v 4)))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))"]],"method":["egg-herbie"],"outputs":[["1/16","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) 1/16)","(fma.f64 -1/8 (*.f64 v v) 1/16)","(fma.f64 v (*.f64 -1/8 v) 1/16)","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (fma.f64 -1/8 (*.f64 v v) 1/16) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (fma.f64 1/16 (pow.f64 v 4) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 -1/8 (*.f64 v v) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 v (*.f64 -1/8 v) 1/16))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (fma.f64 -1/8 (*.f64 v v) 1/16) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (fma.f64 1/16 (pow.f64 v 4) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 -1/8 (*.f64 v v) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 v (*.f64 -1/8 v) 1/16))","(*.f64 1/16 (pow.f64 v 4))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 1/16 (pow.f64 v 4) (*.f64 -1/8 (*.f64 v v)))","(*.f64 (*.f64 v v) (fma.f64 1/16 (*.f64 v v) -1/8))","(*.f64 v (fma.f64 1/16 (pow.f64 v 3) (*.f64 -1/8 v)))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (fma.f64 -1/8 (*.f64 v v) 1/16) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (fma.f64 1/16 (pow.f64 v 4) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 -1/8 (*.f64 v v) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 v (*.f64 -1/8 v) 1/16))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (fma.f64 -1/8 (*.f64 v v) 1/16) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (fma.f64 1/16 (pow.f64 v 4) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 -1/8 (*.f64 v v) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 v (*.f64 -1/8 v) 1/16))","(*.f64 1/16 (pow.f64 v 4))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 1/16 (pow.f64 v 4) (*.f64 -1/8 (*.f64 v v)))","(*.f64 (*.f64 v v) (fma.f64 1/16 (*.f64 v v) -1/8))","(*.f64 v (fma.f64 1/16 (pow.f64 v 3) (*.f64 -1/8 v)))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (fma.f64 -1/8 (*.f64 v v) 1/16) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (fma.f64 1/16 (pow.f64 v 4) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 -1/8 (*.f64 v v) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 v (*.f64 -1/8 v) 1/16))","(+.f64 (*.f64 -1/8 (pow.f64 v 2)) (+.f64 1/16 (*.f64 1/16 (pow.f64 v 4))))","(+.f64 (fma.f64 -1/8 (*.f64 v v) 1/16) (*.f64 1/16 (pow.f64 v 4)))","(fma.f64 -1/8 (*.f64 v v) (fma.f64 1/16 (pow.f64 v 4) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 -1/8 (*.f64 v v) 1/16))","(fma.f64 1/16 (pow.f64 v 4) (fma.f64 v (*.f64 -1/8 v) 1/16))"]],"stop":[["node limit",1]],"time":146.0380859375,"type":"simplify"},{"compiler":[[1944,1456]],"time":26.21484375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))","done",0.01171875],["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (sqrt.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2))))","done",0.00390625]],"compiler":[[18,13],[20,15]],"count":[[81,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[79,0],"picked":[1,1]}],"min-error":[0],"time":16.4990234375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["v",0.00390625,1],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))",0.00390625,1],["(*.f64 v v)",0.00390625,1]],"compiler":[[2,1],[20,15],[4,2],[56,39]],"count":[[3,1]],"inputs":[["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (sqrt.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (*.f64 (sqrt.f64 2) (fma.f64 -1/4 (*.f64 v v) 1/4)))","(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))"]],"link":["."],"name":["Falkner and Boettcher, Appendix B, 2"],"oracle":[0.01953125],"outputs":[["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (sqrt.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2))))"]],"time":9.776123046875,"times":[["v",4.22998046875],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))",2.18603515625],["(*.f64 v v)",2.196044921875]],"type":"regimes"},{"compiler":[[20,15]],"egraph":[[1,19,28,5.2000000000000004e-5],[0,15,28,3.05e-5]],"inputs":[["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (sqrt.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -3 1)) (sqrt.f64 (*.f64 2 (pow.f64 (fma.f64 -1/4 (*.f64 v v) 1/4) 2))))"]],"stop":[["done",1],["saturated",1]],"time":8.304931640625,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[20,15]],"remove-preprocessing":[[]],"time":11.89111328125,"type":"end"}]
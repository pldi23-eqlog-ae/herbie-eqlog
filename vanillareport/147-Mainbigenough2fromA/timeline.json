[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4319837802983102,0.09995252998794513],[11,0.40565519775191206,0.5129197933113119,0.08142500893677607],[10,0.34324670579007943,0.5928806736374099,0.06387262057251064],[9,0.2496339678473305,0.7254987190563043,0.02486731309636525],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":75.4521484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",39.67578125,1102],["body",256,"valid",300.418212890625,8256]],"time":348.79296875,"type":"sample"},{"compiler":[[10,6]],"egraph":[[0,3,3,1.667e-6],[10,418,32,0.005367416999999999],[9,414,32,0.004536584],[8,395,32,0.003688209],[7,322,32,0.002855584],[6,250,32,0.002025959],[5,226,32,0.001543709],[4,200,32,0.001128875],[3,181,32,0.0007881660000000001],[2,130,32,0.00048158300000000005],[1,42,32,0.000230208],[0,16,40,7.2708e-5]],"inputs":[["0","1","2"],["(+.f64 x (*.f64 y (+.f64 z x)))","(+.f64 y (*.f64 x (+.f64 z y)))","(+.f64 z (*.f64 y (+.f64 x z)))","(+.f64 x (*.f64 z (+.f64 y x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (*.f64 y (+.f64 z x)))","(+.f64 x (*.f64 y (+.f64 x z)))","(fma.f64 y (+.f64 x z) x)","(+.f64 y (*.f64 x (+.f64 z y)))","(+.f64 y (*.f64 x (+.f64 y z)))","(fma.f64 x (+.f64 y z) y)","(+.f64 z (*.f64 y (+.f64 x z)))","(fma.f64 y (+.f64 x z) z)","(+.f64 x (*.f64 z (+.f64 y x)))","(+.f64 x (*.f64 z (+.f64 x y)))","(fma.f64 z (+.f64 x y) x)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":27.509033203125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,147,8,0.002287333],[11,146,8,0.002009583],[10,139,8,0.0017229580000000001],[9,121,8,0.0014387080000000001],[8,107,8,0.001153167],[7,91,8,0.0009393330000000001],[6,72,8,0.0007104170000000001],[5,66,8,0.000553292],[4,59,8,0.000416375],[3,50,8,0.000300292],[2,35,8,0.000191458],[1,16,8,0.000104375],[0,7,10,3.9875e-5]],"inputs":[["(+.f64 x (*.f64 y (+.f64 z x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 y (+.f64 z x)))","(+.f64 x (*.f64 y (+.f64 x z)))","(fma.f64 y (+.f64 x z) x)"]],"stop":[["saturated",1]],"time":12.494873046875,"type":"simplify"},{"compiler":[[16,8]],"time":0.298095703125,"type":"eval"},{"alts":[["(fma.f64 y (+.f64 x z) x)","next",0.015625]],"compiler":[[9,5],[9,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.015625],"time":2.034912109375,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 y (+.f64 x z) x)",0.015625,true]],"time":3.427978515625,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 y (+.f64 x z) x)","z","-inf",0.260009765625],["(fma.f64 y (+.f64 x z) x)","z","inf",0.307861328125],["(fma.f64 y (+.f64 x z) x)","z","0",0.363037109375],["(fma.f64 y (+.f64 x z) x)","x","-inf",0.341064453125],["(fma.f64 y (+.f64 x z) x)","x","inf",0.291015625],["(fma.f64 y (+.f64 x z) x)","x","0",0.27392578125],["(fma.f64 y (+.f64 x z) x)","y","-inf",0.38916015625],["(fma.f64 y (+.f64 x z) x)","y","inf",0.321044921875],["(fma.f64 y (+.f64 x z) x)","y","0",0.341064453125]],"time":2.998046875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1789,8,0.017802333],[1,129,8,0.0023375],[0,6,8,0.000152791]],"inputs":[["(fma.f64 y (+.f64 x z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 x z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 x z)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (+.f64 x z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (+.f64 x z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (+.f64 x z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (+.f64 x z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (+.f64 x z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (+.f64 x z) x)) 2) (cbrt.f64 (fma.f64 y (+.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (+.f64 x z) x)) (sqrt.f64 (fma.f64 y (+.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (+.f64 x z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 y (+.f64 x z)) (*.f64 y (+.f64 x z))) (-.f64 (*.f64 x x) (*.f64 (*.f64 y (+.f64 x z)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (+.f64 x z)) (*.f64 y (+.f64 x z))) (*.f64 x x)) (-.f64 (*.f64 y (+.f64 x z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (+.f64 x z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (+.f64 x z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (+.f64 x z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (+.f64 x z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (+.f64 x z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (+.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (+.f64 x z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (+.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (+.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (+.f64 x z) x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":34.777099609375,"type":"rewrite"},{"count":[[57,34]],"egraph":[[8,1447,258,0.016451373999999998],[7,1423,258,0.013472208],[6,1099,258,0.010339124],[5,659,258,0.006484083],[4,349,258,0.003218041],[3,202,258,0.001476541],[2,101,258,0.0007291660000000001],[1,52,258,0.000334916],[0,21,258,0.000125958]],"inputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(*.f64 y (+.f64 z x))","(*.f64 y (+.f64 x z))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(*.f64 y (+.f64 z x))","(*.f64 y (+.f64 x z))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(fma.f64 x y x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y x) x)","(fma.f64 y x x)","(fma.f64 x y x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)"]],"stop":[["saturated",1]],"time":31.85791015625,"type":"simplify"},{"compiler":[[326,96]],"time":3.177978515625,"type":"eval"},{"alts":[["(fma.f64 y (+.f64 x z) x)","done",0.015625],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","next",0.01953125]],"compiler":[[9,5],[12,7],[12,7]],"count":[[35,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[34,1],"picked":[1,1]}],"min-error":[0.0078125],"time":5.27099609375,"type":"prune"},{"compiler":[[26,7]],"locations":[["(+.f64 (*.f64 y x) x)",0.00390625,true],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))",0.01953125,true]],"time":4.89599609375,"type":"localize"},{"count":[[2,42]],"series":[["(+.f64 (*.f64 y x) x)","x","-inf",0.216796875],["(+.f64 (*.f64 y x) x)","x","inf",0.26611328125],["(+.f64 (*.f64 y x) x)","x","0",0.215087890625],["(+.f64 (*.f64 y x) x)","y","-inf",0.14990234375],["(+.f64 (*.f64 y x) x)","y","inf",0.14599609375],["(+.f64 (*.f64 y x) x)","y","0",0.162109375],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","x","-inf",0.216064453125],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","x","inf",0.23779296875],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","x","0",0.23193359375],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","z","-inf",0.2470703125],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","z","inf",0.25390625],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","z","0",0.285888671875],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","y","-inf",0.571044921875],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","y","inf",0.366943359375],["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","y","0",0.365966796875]],"time":4.090087890625,"type":"series"},{"count":[[2,166]],"egraph":[[2,2808,13,0.02501625],[1,184,14,0.003410958],[0,8,14,0.000182917]],"inputs":[["(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (+.f64 z x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (-.f64 (*.f64 y z) (fma.f64 y x x))) (/.f64 (pow.f64 (fma.f64 y x x) 2) (-.f64 (*.f64 y z) (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (+.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (+.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (+.f64 z x) x)) (pow.f64 (cbrt.f64 (fma.f64 y (+.f64 z x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (+.f64 z x) x)) 2) (cbrt.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (+.f64 z x) x)) (sqrt.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (fma.f64 y x x) 3)) (/.f64 1 (fma.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) (*.f64 y z)) (pow.f64 (*.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (fma.f64 y x x) 2)) (/.f64 1 (-.f64 (*.f64 y z) (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) (*.f64 y z)) (pow.f64 (*.f64 y z) 2)) (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (fma.f64 y x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 y z) (fma.f64 y x x)) (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (fma.f64 y x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (fma.f64 y x x) 3)) (fma.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) (*.f64 y z)) (pow.f64 (*.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (fma.f64 y x x) 3)) (+.f64 (pow.f64 (fma.f64 y x x) 2) (-.f64 (pow.f64 (*.f64 y z) 2) (*.f64 y (*.f64 z (fma.f64 y x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (fma.f64 y x x) 2)) (-.f64 (*.f64 y z) (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (fma.f64 y x x) 3))) (neg.f64 (fma.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) (*.f64 y z)) (pow.f64 (*.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (fma.f64 y x x) 2))) (neg.f64 (-.f64 (*.f64 y z) (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (+.f64 z x)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 y (+.f64 z x)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 y (+.f64 z x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 y x x) 2) (pow.f64 (*.f64 y z) 2)) (-.f64 (fma.f64 y x x) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (+.f64 z x)) 2) (*.f64 x x)) (fma.f64 y (+.f64 z x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (+.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (+.f64 z x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (+.f64 z x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) (*.f64 y z)) (pow.f64 (*.f64 y z) 2)) (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (fma.f64 y x x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 y z) (fma.f64 y x x)) (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (fma.f64 y x x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (+.f64 z x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y z))) (exp.f64 (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) z) (+.f64 1 (expm1.f64 (fma.f64 y x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y z))) (+.f64 1 (expm1.f64 (fma.f64 y x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 y) (+.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 y x x))) (pow.f64 (exp.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 y x x)) (+.f64 1 (expm1.f64 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 y x x))) (+.f64 1 (expm1.f64 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) (+.f64 z x)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (+.f64 z x) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 y (+.f64 z x) x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 y (+.f64 z x) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y (+.f64 z x) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y (+.f64 z x) x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y 1) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 y x x) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y x x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (+.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) y) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) z) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (cbrt.f64 (*.f64 y x)) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y x x)) (pow.f64 (cbrt.f64 (fma.f64 y x x)) 2) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y x x)) 2) (cbrt.f64 (fma.f64 y x x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (cbrt.f64 (*.f64 y z)) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) z) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y x)) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) y) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 y x x)) (sqrt.f64 (fma.f64 y x x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 y z)) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (-.f64 x (*.f64 y x)) (pow.f64 (*.f64 y x) 2))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 x x)) (/.f64 1 (*.f64 x (-.f64 y 1))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (+.f64 z x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (+.f64 z x))) 2) (cbrt.f64 (*.f64 y (+.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (+.f64 z x))) (sqrt.f64 (*.f64 y (+.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1) 1) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 z)) (sqrt.f64 z) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 y)) (sqrt.f64 y) (fma.f64 y x x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (*.f64 x (-.f64 y 1))) (/.f64 (*.f64 x x) (*.f64 x (-.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y x x)) (pow.f64 (cbrt.f64 (fma.f64 y x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y x x)) 2) (cbrt.f64 (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y x x)) (sqrt.f64 (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (-.f64 x (*.f64 y x)) (pow.f64 (*.f64 y x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 x x)) (/.f64 1 (*.f64 x (-.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (-.f64 x (*.f64 y x)) (pow.f64 (*.f64 y x) 2)) (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x (-.f64 y 1)) (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 x 3)) (fma.f64 x (-.f64 x (*.f64 y x)) (pow.f64 (*.f64 y x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 x 3)) (fma.f64 x x (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 y (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 x x)) (*.f64 x (-.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 x 3))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 y x)) (pow.f64 (*.f64 y x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 x x))) (neg.f64 (*.f64 x (-.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 y x) 2)) (-.f64 x (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y x x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y x x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 y x)) (pow.f64 (*.f64 y x) 2)) (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 x 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (-.f64 y 1)) (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) y) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y x))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 y x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 y x x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y x x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y x x)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 (*.f64 y x)) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (cbrt.f64 (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) x)))))"]],"rules":[["egg-rr",68],["egg-rr",98]],"stop":[["node limit",1]],"time":49.555908203125,"type":"rewrite"},{"count":[[208,181]],"egraph":[[7,1244,255,0.016614666],[6,1238,255,0.013658916],[5,1144,255,0.010641374],[4,809,255,0.007371124000000001],[3,349,255,0.0033745830000000004],[2,177,255,0.001288541],[1,74,255,0.000519708],[0,26,255,0.000148625]],"inputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 y x) x)","(*.f64 y z)","(*.f64 y z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","x","(*.f64 y x)","(*.f64 y x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 1 y) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(*.f64 y (+.f64 z x))","(*.f64 y (+.f64 x z))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 x z) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (+.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y x) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 y z)","(*.f64 y z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 x z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(fma.f64 x y x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 x z) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 x z) x)","x","(*.f64 y x)","(*.f64 x y)","(*.f64 y x)","(*.f64 x y)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(fma.f64 x y x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(fma.f64 x y x)"]],"stop":[["saturated",1]],"time":32.72607421875,"type":"simplify"},{"compiler":[[2476,817]],"time":22.19384765625,"type":"eval"},{"alts":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))","next",0.01171875],["(fma.f64 y (+.f64 x z) x)","done",0.015625]],"compiler":[[11,7],[9,5],[11,7]],"count":[[183,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[181,1],"picked":[1,0]}],"min-error":[0],"time":44.4091796875,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))",0.01171875,true]],"time":4.718017578125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))","z","-inf",0.159912109375],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","z","inf",0.17578125],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","z","0",0.22412109375],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","y","-inf",0.274169921875],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","y","inf",0.2001953125],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","y","0",0.244140625],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","x","-inf",0.241943359375],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","x","inf",0.226806640625],["(fma.f64 x (+.f64 y 1) (*.f64 y z))","x","0",0.31396484375]],"time":2.1669921875,"type":"series"},{"count":[[1,21]],"egraph":[[2,2012,11,0.019807709],[1,162,11,0.002732292],[0,8,11,0.000210792]],"inputs":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (+.f64 x (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (*.f64 y x)) 1) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (+.f64 y 1) (*.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 y 1) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))) 2) (cbrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))) (sqrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x (*.f64 y x)) 3) (pow.f64 (*.f64 y z) 3)) (+.f64 (*.f64 (+.f64 x (*.f64 y x)) (+.f64 x (*.f64 y x))) (-.f64 (pow.f64 (*.f64 y z) 2) (*.f64 (+.f64 x (*.f64 y x)) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x (*.f64 y x)) (+.f64 x (*.f64 y x))) (pow.f64 (*.f64 y z) 2)) (-.f64 (+.f64 x (*.f64 y x)) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (+.f64 y 1) (*.f64 y z))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":37.9228515625,"type":"rewrite"},{"count":[[57,31]],"egraph":[[8,1355,258,0.01858],[7,1353,258,0.01559725],[6,1253,258,0.0124605],[5,948,258,0.009067792],[4,583,258,0.005251083],[3,288,258,0.0025035],[2,154,258,0.000996083],[1,55,345,0.000395667],[0,19,345,0.000120042]],"inputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","x","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 y 1) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 y 1) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","x","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 y 1) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y z (*.f64 (+.f64 y 1) x))","(fma.f64 y (+.f64 z x) x)"]],"stop":[["saturated",1]],"time":34.026123046875,"type":"simplify"},{"compiler":[[363,161]],"time":3.94384765625,"type":"eval"},{"alts":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))","done",0.01171875],["(fma.f64 y (+.f64 x z) x)","done",0.015625]],"compiler":[[11,7],[9,5]],"count":[[33,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[31,0],"picked":[1,1]}],"min-error":[0],"time":4.489013671875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["z",0.01171875,1],["(+.f64 x (*.f64 y (+.f64 z x)))",0.01171875,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[33,15]],"count":[[4,1]],"inputs":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 x z) x)","(+.f64 x (*.f64 y (+.f64 z x)))"]],"link":["."],"name":["Main:bigenough2 from A"],"oracle":[0.02734375],"outputs":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))"]],"time":13.68115234375,"times":[["x",3.22998046875],["y",3.22314453125],["z",3.1640625],["(+.f64 x (*.f64 y (+.f64 z x)))",3.255859375]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[1,12,11,3.4541e-5],[0,8,11,2.1166e-5]],"inputs":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (+.f64 y 1) (*.f64 y z))"]],"stop":[["done",1],["saturated",1]],"time":8.072021484375,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.092041015625,"type":"end"}]
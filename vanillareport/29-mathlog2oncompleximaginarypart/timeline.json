[{"compiler":[[32,21]],"method":["search"],"sampling":[[12,0.37445095177099574,0.2496339678473305,0.37591508038167376],[11,0.37445095177099574,0.2496339678473305,0.37591508038167376],[10,0.37445095177099574,0.2496339678473305,0.37591508038167376],[9,0.2496339678473305,0.499267935694661,0.2510980964580085],[8,0.2496339678473305,0.499267935694661,0.2510980964580085],[7,0.2496339678473305,0.499267935694661,0.2510980964580085],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":98.112060546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",172.056396484375,2105],["body",256,"valid",726.7587890625,8256]],"time":908.248046875,"type":"sample"},{"compiler":[[31,20]],"egraph":[[0,3,3,2.041e-6],[12,6813,36,0.050822250000000006],[11,4932,36,0.040823250000000005],[10,4417,36,0.032770875000000005],[9,4215,36,0.027291417000000002],[8,4108,36,0.023479167000000002],[7,3503,36,0.020019167],[6,2435,36,0.015055125],[5,993,36,0.008786417000000001],[4,407,36,0.003454375],[3,329,36,0.0017842500000000002],[2,227,48,0.0010963330000000001],[1,137,76,0.000585667],[0,50,80,0.00020375]],"inputs":[["0","1","2"],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (-.f64 (*.f64 (atan2.f64 re im) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (-.f64 (*.f64 (atan2.f64 im base) (log.f64 re)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 base base) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 re) (log.f64 re)) (*.f64 0 0)))","(/.f64 (-.f64 (*.f64 (atan2.f64 base re) (log.f64 im)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 base base)))) 0)) (+.f64 (*.f64 (log.f64 im) (log.f64 im)) (*.f64 0 0)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (fma.f64 (atan2.f64 im re) (log.f64 base) 0) (*.f64 (log.f64 base) (log.f64 base)))","(*.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) (/.f64 (log.f64 base) (log.f64 base)))","(/.f64 (/.f64 (atan2.f64 im re) 1) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (-.f64 (*.f64 (atan2.f64 re im) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (fma.f64 (atan2.f64 re im) (log.f64 base) 0) (*.f64 (log.f64 base) (log.f64 base)))","(*.f64 (/.f64 (log.f64 base) (log.f64 base)) (/.f64 (atan2.f64 re im) (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 re im) (log.f64 base)))","(/.f64 (atan2.f64 re im) (log.f64 base))","(/.f64 (-.f64 (*.f64 (atan2.f64 im base) (log.f64 re)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 base base) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 re) (log.f64 re)) (*.f64 0 0)))","(/.f64 (fma.f64 (atan2.f64 im base) (log.f64 re) 0) (*.f64 (log.f64 re) (log.f64 re)))","(/.f64 (atan2.f64 im base) (/.f64 (*.f64 (log.f64 re) (log.f64 re)) (log.f64 re)))","(/.f64 (atan2.f64 im base) (/.f64 (log.f64 re) 1))","(/.f64 (atan2.f64 im base) (log.f64 re))","(/.f64 (-.f64 (*.f64 (atan2.f64 base re) (log.f64 im)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 base base)))) 0)) (+.f64 (*.f64 (log.f64 im) (log.f64 im)) (*.f64 0 0)))","(/.f64 (fma.f64 (atan2.f64 base re) (log.f64 im) 0) (*.f64 (log.f64 im) (log.f64 im)))","(/.f64 (atan2.f64 base re) (/.f64 (*.f64 (log.f64 im) (log.f64 im)) (log.f64 im)))","(/.f64 (atan2.f64 base re) (/.f64 (log.f64 im) 1))","(/.f64 (atan2.f64 base re) (log.f64 im))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":74.926025390625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,6963,9,0.040917],[10,5872,9,0.031530292],[9,5281,9,0.02449325],[8,3522,9,0.01786975],[7,2455,9,0.011811792000000002],[6,1068,9,0.007700792000000001],[5,273,9,0.003529583],[4,115,9,0.0011052500000000001],[3,94,9,0.000619583],[2,68,12,0.000392208],[1,41,19,0.00022408300000000003],[0,19,20,8.3083e-5]],"inputs":[["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (fma.f64 (atan2.f64 im re) (log.f64 base) 0) (*.f64 (log.f64 base) (log.f64 base)))","(*.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) (/.f64 (log.f64 base) (log.f64 base)))","(/.f64 (/.f64 (atan2.f64 im re) 1) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))"]],"stop":[["node limit",1]],"time":52.718994140625,"type":"simplify"},{"compiler":[[37,21]],"time":0.509033203125,"type":"eval"},{"alts":[["(/.f64 (atan2.f64 im re) (log.f64 base))","next",0.3046875],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","fresh",32.496757519536885]],"compiler":[[9,6],[31,20],[9,6],[31,20]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.26171875],"time":1.516845703125,"type":"prune"},{"compiler":[[17,6]],"locations":[["(/.f64 (atan2.f64 im re) (log.f64 base))",0.3046875,true]],"time":4.6201171875,"type":"localize"},{"count":[[1,8]],"series":[["(/.f64 (atan2.f64 im re) (log.f64 base))","base","-inf",6.718994140625],["(/.f64 (atan2.f64 im re) (log.f64 base))","base","inf",6.76904296875],["(/.f64 (atan2.f64 im re) (log.f64 base))","base","0",9.309814453125],["(/.f64 (atan2.f64 im re) (log.f64 base))","re","-inf",0.373046875],["(/.f64 (atan2.f64 im re) (log.f64 base))","re","inf",0.368896484375],["(/.f64 (atan2.f64 im re) (log.f64 base))","re","0",4.114013671875],["(/.f64 (atan2.f64 im re) (log.f64 base))","im","-inf",0.367919921875],["(/.f64 (atan2.f64 im re) (log.f64 base))","im","inf",0.380126953125],["(/.f64 (atan2.f64 im re) (log.f64 base))","im","0",14.97900390625]],"time":43.4970703125,"type":"series"},{"count":[[1,31]],"egraph":[[2,1734,9,0.017571626],[1,139,9,0.002259001],[0,7,9,0.000150459]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (*.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 im re)) (*.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) 1) (/.f64 (sqrt.f64 (atan2.f64 im re)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 base))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (sqrt.f64 (log.f64 base))) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 base) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))))"]],"rules":[["egg-rr",31]],"stop":[["node limit",1]],"time":35.371826171875,"type":"rewrite"},{"count":[[39,34]],"egraph":[[11,6746,72,0.070106165],[10,6638,72,0.055362832],[9,6497,72,0.046575457],[8,6238,72,0.037448999],[7,4951,72,0.028387874],[6,2428,72,0.016513707],[5,597,72,0.006643499],[4,195,72,0.001784707],[3,90,72,0.000728666],[2,44,96,0.000345541],[1,31,104,0.000176041],[0,17,104,8.0541e-5]],"inputs":[["(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (log.f64 base))))","(/.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))","(*.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))","(/.f64 (atan2.f64 im re) (log.f64 base))"]],"stop":[["node limit",1]],"time":85.01904296875,"type":"simplify"},{"compiler":[[392,134]],"time":3.719970703125,"type":"eval"},{"alts":[["(cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 base) 3)))","fresh",6.106103286135821],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","fresh",0.9668468263380798],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","fresh",0.40072250976844204],["(/.f64 (atan2.f64 im re) (log.f64 base))","done",0.3046875],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","next",0.3979950955577042],["(pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2)","fresh",31.046287597684426],["(pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)","fresh",0.7447016114323551],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (sqrt.f64 (log.f64 base))) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 base))))","fresh",34.42262785629458],["(*.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))","fresh",31.57278935462915],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","fresh",0.7981379395798913]],"compiler":[[14,11],[19,12],[11,8],[9,6],[11,8],[12,9],[12,9],[22,12],[22,12],[18,12],[14,11],[19,12],[11,8],[11,8],[12,9],[12,9],[22,12],[22,12],[18,12]],"count":[[36,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[34,9],"picked":[1,1]}],"min-error":[0.01953125],"time":9.358154296875,"type":"prune"},{"compiler":[[26,9]],"locations":[["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)",0.28567131625237807,true],["(/.f64 (log.f64 base) (atan2.f64 im re))",0.34994125976844204,true]],"time":5.809814453125,"type":"localize"},{"count":[[2,44]],"series":[["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","re","-inf",0.427001953125],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","re","inf",0.428955078125],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","re","0",0.265869140625],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","im","-inf",0.423095703125],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","im","inf",0.426025390625],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","im","0",0.28515625],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","base","-inf",0.47705078125],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","base","inf",0.43701171875],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","base","0",0.429931640625],["(/.f64 (log.f64 base) (atan2.f64 im re))","re","-inf",0.39208984375],["(/.f64 (log.f64 base) (atan2.f64 im re))","re","inf",0.384033203125],["(/.f64 (log.f64 base) (atan2.f64 im re))","re","0",0.265869140625],["(/.f64 (log.f64 base) (atan2.f64 im re))","im","-inf",0.3720703125],["(/.f64 (log.f64 base) (atan2.f64 im re))","im","inf",0.387939453125],["(/.f64 (log.f64 base) (atan2.f64 im re))","im","0",0.26904296875],["(/.f64 (log.f64 base) (atan2.f64 im re))","base","-inf",0.398193359375],["(/.f64 (log.f64 base) (atan2.f64 im re))","base","inf",0.39404296875],["(/.f64 (log.f64 base) (atan2.f64 im re))","base","0",0.39599609375]],"time":7.080078125,"type":"series"},{"count":[[2,71]],"egraph":[[2,2188,18,0.020047125000000002],[1,181,18,0.0030284580000000004],[0,9,21,0.000222625]],"inputs":[["(/.f64 (log.f64 base) (atan2.f64 im re))","(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (log.f64 base) (atan2.f64 im re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (/.f64 1 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 base) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (*.f64 (cbrt.f64 (log.f64 base)) (/.f64 1 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) (pow.f64 (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2) (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 base)) (*.f64 (sqrt.f64 (log.f64 base)) (/.f64 1 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 base)) (/.f64 1 (neg.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (atan2.f64 im re)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) 1) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log.f64 base)) 1) (/.f64 (sqrt.f64 (log.f64 base)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2))) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (cbrt.f64 (pow.f64 (atan2.f64 im re) 2))) (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log.f64 base)) (cbrt.f64 (pow.f64 (atan2.f64 im re) 2))) (/.f64 (sqrt.f64 (log.f64 base)) (cbrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (atan2.f64 im re))) (/.f64 (log.f64 base) (sqrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (sqrt.f64 (atan2.f64 im re))) (/.f64 (cbrt.f64 (log.f64 base)) (sqrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log.f64 base) (neg.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 base (/.f64 1 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log.f64 base) 3) (pow.f64 (atan2.f64 im re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1) (pow.f64 (/.f64 1 (atan2.f64 im re)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2) -1) (pow.f64 (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) -1) (pow.f64 (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) 1) (/.f64 (sqrt.f64 (atan2.f64 im re)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (cbrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 base))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) (sqrt.f64 (log.f64 base))) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 base))) (/.f64 (sqrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 (log.f64 base))) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (log.f64 base) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 (log.f64 base) (sqrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 base))) (sqrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) 1) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (log.f64 base)) (/.f64 1 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2)) (cbrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 base) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))))"]],"rules":[["egg-rr",40],["egg-rr",31]],"stop":[["node limit",1]],"time":41.89404296875,"type":"rewrite"},{"count":[[115,76]],"egraph":[[11,7554,396,0.070856917],[10,7448,396,0.058722875],[9,7263,396,0.049760625],[8,6983,396,0.040433625],[7,5706,396,0.031856125],[6,2817,396,0.020272125000000002],[5,888,396,0.009077458],[4,282,396,0.002858458],[3,123,396,0.001141208],[2,60,396,0.0005405],[1,39,428,0.000266542],[0,22,428,0.000118208]],"inputs":[["(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 base)) (atan2.f64 im re)))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) (atan2.f64 im re))","(neg.f64 (/.f64 (neg.f64 (log.f64 base)) (atan2.f64 im re)))","(/.f64 (neg.f64 (neg.f64 (log.f64 base))) (atan2.f64 im re))","(/.f64 (log.f64 base) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))"]],"stop":[["node limit",1]],"time":94.221923828125,"type":"simplify"},{"compiler":[[972,371]],"time":9.546142578125,"type":"eval"},{"alts":[["(pow.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) 1) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re))) -1)","fresh",0.6100428006949867],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","fresh",0.5801926758319564],["(/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))","fresh",4.1682020545551675],["(pow.f64 (pow.f64 (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2) -1)","fresh",32.080486376989754],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","next",0.40072250976844204],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (cbrt.f64 (log.f64 base)))","fresh",0.5854264649057246],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","done",0.3979950955577042],["(*.f64 (/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","fresh",4.177977446510365],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","fresh",0.9668468263380798]],"compiler":[[20,15],[18,13],[17,11],[14,11],[11,8],[16,11],[11,8],[19,13],[19,12],[20,15],[18,13],[17,11],[14,11],[11,8],[16,11],[19,13],[19,12]],"count":[[86,9]],"kept":[{"done":[1,0],"fresh":[8,2],"new":[76,6],"picked":[1,1]}],"min-error":[0.00390625],"time":17.4609375,"type":"prune"},{"compiler":[[24,11]],"locations":[["(/.f64 1 (log.f64 base))",0.30078125,true],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))",0.328125,true]],"time":5.98388671875,"type":"localize"},{"count":[[2,44]],"series":[["(/.f64 1 (log.f64 base))","base","-inf",0.448974609375],["(/.f64 1 (log.f64 base))","base","inf",0.412109375],["(/.f64 1 (log.f64 base))","base","0",0.362060546875],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","re","-inf",0.1689453125],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","re","inf",0.153076171875],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","re","0",0.162109375],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","im","-inf",0.15380859375],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","im","inf",0.156005859375],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","im","0",0.164794921875],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","base","-inf",0.176025390625],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","base","inf",0.19384765625],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","base","0",0.2001953125]],"time":2.904052734375,"type":"series"},{"count":[[2,44]],"egraph":[[2,1993,15,0.01902925],[1,173,15,0.002726333],[0,9,15,0.0002165]],"inputs":[["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","(/.f64 1 (log.f64 base))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (log.f64 base) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 (log.f64 base) (sqrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 base))) (sqrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) 1) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (atan2.f64 im re)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) -1) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 base) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 3) (pow.f64 (atan2.f64 im re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (/.f64 1 (log.f64 base)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (log.f64 base))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (/.f64 1 (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/2) (pow.f64 (log.f64 base) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 base)) 2) -1) (pow.f64 (cbrt.f64 (log.f64 base)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (log.f64 base)) -1) (pow.f64 (sqrt.f64 (log.f64 base)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (log.f64 base)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (log.f64 base))))))))"]],"rules":[["egg-rr",20],["egg-rr",24]],"stop":[["node limit",1]],"time":38.5869140625,"type":"rewrite"},{"count":[[88,49]],"egraph":[[11,6710,372,0.07027525],[10,6602,372,0.055497917],[9,6466,372,0.046620833],[8,6203,372,0.037442458],[7,4939,372,0.028328333],[6,2425,372,0.016335833],[5,598,372,0.006749958],[4,196,372,0.0019204159999999999],[3,92,372,0.00084575],[2,47,372,0.00043475],[1,34,388,0.000234083],[0,21,388,0.00011175]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 -1 (neg.f64 (log.f64 base)))","(/.f64 1 (log.f64 base))"]],"stop":[["node limit",1]],"time":91.383056640625,"type":"simplify"},{"compiler":[[518,234]],"time":5.964111328125,"type":"eval"},{"alts":[["(pow.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) 1) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re))) -1)","fresh",0.6100428006949867],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","next",0.5801926758319564],["(/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))","fresh",4.1682020545551675],["(pow.f64 (pow.f64 (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2) -1)","fresh",32.080486376989754],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","done",0.40072250976844204],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (cbrt.f64 (log.f64 base)))","fresh",0.5854264649057246],["(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","done",0.3979950955577042],["(*.f64 (/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","fresh",4.177977446510365],["(*.f64 (pow.f64 (/.f64 1 (cbrt.f64 (log.f64 base))) 3) (atan2.f64 im re))","fresh",0.9809469844413488],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","fresh",0.9668468263380798]],"compiler":[[20,15],[18,13],[17,11],[14,11],[11,8],[16,11],[11,8],[19,13],[14,11],[19,12],[20,15],[18,13],[17,11],[14,11],[16,11],[19,13],[14,11],[19,12]],"count":[[58,10]],"kept":[{"done":[1,1],"fresh":[7,7],"new":[49,1],"picked":[1,1]}],"min-error":[0],"time":12.259033203125,"type":"prune"},{"compiler":[[54,25]],"locations":[["(/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2)))",0.27734375,true],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))",0.32421875,true],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))",0.34765625,true],["(pow.f64 (log.f64 base) 2)",0.5436325195368841,true]],"time":13.768798828125,"type":"localize"},{"count":[[4,92]],"series":[["(/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2)))","base","-inf",1.427001953125],["(/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2)))","base","inf",1.06591796875],["(/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2)))","base","0",1.280029296875],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","re","-inf",0.273193359375],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","re","inf",0.286865234375],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","re","0",1.56201171875],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","im","-inf",0.282958984375],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","im","inf",0.265869140625],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","im","0",0.93212890625],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","base","-inf",0.327880859375],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","base","inf",0.38916015625],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","base","0",1.070068359375],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","base","-inf",1.43896484375],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","base","inf",1.4169921875],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","base","0",1.01611328125],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","re","-inf",0.31982421875],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","re","inf",0.30615234375],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","re","0",1.037841796875],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","im","-inf",0.31787109375],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","im","inf",0.328125],["(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","im","0",1.571044921875],["(pow.f64 (log.f64 base) 2)","base","-inf",0.387939453125],["(pow.f64 (log.f64 base) 2)","base","inf",0.33203125],["(pow.f64 (log.f64 base) 2)","base","0",0.405029296875]],"time":18.385009765625,"type":"series"},{"count":[[4,152]],"egraph":[[2,3462,34,0.028160789999999998],[1,282,37,0.004750457],[0,14,49,0.000357166]],"inputs":[["(pow.f64 (log.f64 base) 2)","(/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))","(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","(/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 base (log.f64 base))) 2)) (log.f64 (cbrt.f64 (pow.f64 base (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 base (log.f64 base)))) (log.f64 (sqrt.f64 (pow.f64 base (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (log.f64 base) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (pow.f64 (cbrt.f64 (log.f64 base)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 base)) 4) (cbrt.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 base)) (pow.f64 (log.f64 base) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 3/2) (sqrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 base)) 5) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 base)) 4) 1) (cbrt.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2) 4) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 base) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 base (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 base) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 base) 2)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (*.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 1 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) -2) (/.f64 (atan2.f64 im re) (cbrt.f64 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) 2) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 im re)) (*.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 1 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (log.f64 base))) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) (sqrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (neg.f64 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) 1) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2)) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2)) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/6) (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (log.f64 base) 1/6)) (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 base) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (log.f64 base)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 base)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (log.f64 base) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 (log.f64 base)) (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) 2) (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 (log.f64 base) (sqrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (sqrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (neg.f64 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2)))) (neg.f64 (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) 1) (*.f64 (neg.f64 (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) -1) (*.f64 (cbrt.f64 (log.f64 base)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) -1) (*.f64 (neg.f64 (cbrt.f64 (log.f64 base))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (atan2.f64 im re))) (*.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (neg.f64 (cbrt.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (log.f64 base))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 1) (cbrt.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) 1) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (pow.f64 (log.f64 base) 1/6)) (pow.f64 (log.f64 base) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (cbrt.f64 (log.f64 base)) -2)) (neg.f64 (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) -1) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2) (neg.f64 (atan2.f64 im re))) (neg.f64 (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 3) (pow.f64 (log.f64 base) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 base) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (log.f64 base)) (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) 3) (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (log.f64 base)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (log.f64 base)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) -2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -4)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (log.f64 base))) (/.f64 1 (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2) -2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 base)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 6) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 base)) 4) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (log.f64 base) 2) -1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) -2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (log.f64 base))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 base)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (*.f64 2/3 (log.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 base))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (*.f64 2/3 (log.f64 (log.f64 base)))) 1))))))"]],"rules":[["egg-rr",33],["egg-rr",58],["egg-rr",39],["egg-rr",22]],"stop":[["node limit",1]],"time":59.8291015625,"type":"rewrite"},{"count":[[244,166]],"egraph":[[5,4771,1028,0.023313167],[4,1583,1028,0.010771666999999999],[3,419,1028,0.0037351249999999997],[2,163,1028,0.001399625],[1,90,1036,0.000649334],[0,41,1052,0.000257292]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (neg.f64 (log.f64 base)) 2)","(pow.f64 (log.f64 base) 2)","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 base)) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (cbrt.f64 (/.f64 1 (neg.f64 (log.f64 base)))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (cbrt.f64 -1)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (cbrt.f64 (/.f64 1 (neg.f64 (log.f64 base)))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (cbrt.f64 -1)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (cbrt.f64 (/.f64 1 (neg.f64 (log.f64 base)))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (cbrt.f64 -1)))","(*.f64 (pow.f64 (/.f64 1 (log.f64 (/.f64 1 base))) 1/3) (*.f64 (cbrt.f64 -1) (atan2.f64 im re)))","(*.f64 (cbrt.f64 (/.f64 1 (neg.f64 (log.f64 base)))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (*.f64 (atan2.f64 im re) (cbrt.f64 -1)))","(*.f64 (atan2.f64 im re) (*.f64 (cbrt.f64 (/.f64 -1 (log.f64 base))) (cbrt.f64 -1)))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base))))) 1/3) (atan2.f64 im re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 base))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))","(pow.f64 (/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)) 1/3)","(cbrt.f64 (/.f64 1 (pow.f64 (log.f64 base) 2)))"]],"stop":[["node limit",1]],"time":49.593017578125,"type":"simplify"},{"compiler":[[2837,1205]],"time":26.114013671875,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2)) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))","fresh",0.7484742062943164],["(/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))","fresh",4.1682020545551675],["(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","done",0.40072250976844204],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","done",0.5801926758319564],["(*.f64 (/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","fresh",4.177977446510365],["(/.f64 (atan2.f64 im re) (log.f64 base))","fresh",0.3046875],["(*.f64 (/.f64 1 (cbrt.f64 (exp.f64 (log.f64 (pow.f64 (log.f64 base) 2))))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","fresh",0.9055343505056193],["(*.f64 (pow.f64 (pow.f64 (log.f64 base) 2) -1/3) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","fresh",0.8935855470327535]],"compiler":[[33,22],[17,11],[11,8],[18,13],[19,13],[9,6],[20,15],[17,12]],"count":[[176,8]],"kept":[{"done":[2,1],"fresh":[7,2],"new":[166,4],"picked":[1,1]}],"min-error":[0],"time":37.9970703125,"type":"prune"},{"accuracy":[0.3046875],"baseline":[0.3046875],"branch":[["re",0.3046875,1],["im",0.3046875,1],["base",0.3046875,1],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))",0.3046875,1],["(log.f64 base)",0.3046875,1]],"compiler":[[4,3],[4,3],[4,3],[31,20],[5,4],[315,133]],"count":[[22,1]],"inputs":[["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 base))) 2)) (cbrt.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 (/.f64 1 (cbrt.f64 (exp.f64 (log.f64 (pow.f64 (log.f64 base) 2))))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","(*.f64 (pow.f64 (pow.f64 (log.f64 base) 2) -1/3) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","(*.f64 (pow.f64 (/.f64 1 (cbrt.f64 (log.f64 base))) 3) (atan2.f64 im re))","(pow.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2)) 1) (/.f64 (cbrt.f64 (log.f64 base)) (atan2.f64 im re))) -1)","(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 base) 2))) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","(/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) (/.f64 (log.f64 base) (cbrt.f64 (atan2.f64 im re))))","(pow.f64 (pow.f64 (sqrt.f64 (/.f64 (log.f64 base) (atan2.f64 im re))) 2) -1)","(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) 2))) (cbrt.f64 (log.f64 base)))","(*.f64 (/.f64 (cbrt.f64 (pow.f64 (atan2.f64 im re) 2)) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","(cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 base) 3)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))","(*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))","(pow.f64 (/.f64 (log.f64 base) (atan2.f64 im re)) -1)","(pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 2)","(pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (sqrt.f64 (log.f64 base))) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 base))))","(*.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))","(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 base)) 2)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))"]],"link":["."],"name":["math.log/2 on complex, imaginary part"],"oracle":[57.39025916126174],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"time":40.351806640625,"times":[["re",7.158935546875],["im",7.117919921875],["base",7.27783203125],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))",6.240966796875],["(log.f64 base)",7.3408203125]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[0,7,9,1.2667e-5]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"stop":[["fuel",1],["saturated",1]],"time":8.172119140625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.76611328125,"type":"end"}]
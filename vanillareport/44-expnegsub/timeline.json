[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.5017080307006836,0.0009760856628417969,0.4973158836364746],[11,0.5017080307006836,0.0019521713256835938,0.4963397979736328],[10,0.499755859375,0.0039043426513671875,0.4963397979736328],[9,0.499755859375,0.007808685302734375,0.4924354553222656],[8,0.499755859375,0.01561737060546875,0.48462677001953125],[7,0.499755859375,0.0312347412109375,0.4690093994140625],[6,0.499755859375,0.062469482421875,0.437774658203125],[5,0.499755859375,0.12493896484375,0.37530517578125],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.47900390625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.70703125,19],["body",256,"valid",305.405029296875,8256]],"time":313.59814453125,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.75e-6],[7,5640,7,0.026224875],[6,1618,7,0.014881458],[5,531,7,0.005091875],[4,236,7,0.002130417],[3,111,7,0.0009570830000000001],[2,50,9,0.00041691700000000005],[1,19,9,0.000175333],[0,7,11,5.7958e-5]],"inputs":[["0"],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","(exp.f64 (+.f64 -1 (*.f64 x x)))","(exp.f64 (+.f64 (*.f64 x x) -1))","(exp.f64 (fma.f64 x x -1))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":49.87890625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[7,5640,7,0.025869166],[6,1618,7,0.014674458000000001],[5,531,7,0.005016499],[4,236,7,0.002115541],[3,111,7,0.00094175],[2,50,9,0.000411791],[1,19,9,0.000171791],[0,7,11,5.6625e-5]],"inputs":[["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","(exp.f64 (+.f64 -1 (*.f64 x x)))","(exp.f64 (+.f64 (*.f64 x x) -1))","(exp.f64 (fma.f64 x x -1))"]],"stop":[["node limit",1]],"time":37.01513671875,"type":"simplify"},{"compiler":[[13,9]],"time":0.31689453125,"type":"eval"},{"alts":[["(exp.f64 (fma.f64 x x -1))","next",0.04891250171767081]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.04891250171767081],"time":0.79296875,"type":"prune"},{"compiler":[[12,7]],"locations":[["(exp.f64 (fma.f64 x x -1))",0.0489125017176708,true]],"time":4.2080078125,"type":"localize"},{"count":[[1,4]],"series":[["(exp.f64 (fma.f64 x x -1))","x","-inf",0.2099609375],["(exp.f64 (fma.f64 x x -1))","x","inf",0.177001953125],["(exp.f64 (fma.f64 x x -1))","x","0",0.43505859375]],"time":0.865966796875,"type":"series"},{"count":[[1,49]],"egraph":[[2,971,7,0.013311249],[1,90,7,0.001360124],[0,5,7,0.000150041]],"inputs":[["(exp.f64 (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (exp.f64 (fma.f64 x x -1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (exp.f64 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (fma.f64 x x -1))))) (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1))) 2) (cbrt.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (fma.f64 x x -1))) (sqrt.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) (exp.f64 -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (exp.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (exp.f64 (fma.f64 x x -1)) (cbrt.f64 (exp.f64 (fma.f64 x x -1)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (exp.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1)))) 2) 3) (cbrt.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 1) -1) (pow.f64 (exp.f64 1) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 1) (*.f64 1/2 (fma.f64 x x -1))) (pow.f64 (exp.f64 1) (*.f64 1/2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 1) (*.f64 2 (*.f64 1/3 (fma.f64 x x -1)))) (pow.f64 (exp.f64 1) (*.f64 1/3 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 1) (+.f64 1 (fma.f64 x x -1))) (exp.f64 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (*.f64 (cbrt.f64 (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))) (*.f64 (sqrt.f64 (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (cbrt.f64 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (+.f64 x 1)) (-.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x -1))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2))) (cbrt.f64 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1)))) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x -1)))) (sqrt.f64 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1))) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2))) (sqrt.f64 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (sqrt.f64 (fma.f64 x x -1)))) (sqrt.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (fma.f64 x x -1))))))))"]],"rules":[["egg-rr",49]],"stop":[["node limit",1]],"time":31.501953125,"type":"rewrite"},{"count":[[53,56]],"egraph":[[10,7734,56,0.069821043],[9,7379,56,0.058354168],[8,6076,56,0.045823959],[7,5078,56,0.033333834],[6,4583,56,0.023846292],[5,3575,56,0.015869375],[4,1856,56,0.008581792000000001],[3,429,56,0.003383792],[2,128,63,0.000994375],[1,51,75,0.000360583],[0,21,79,0.000110917]],"inputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(fma.f64 (exp.f64 -1) (*.f64 x x) (exp.f64 -1))","(*.f64 (exp.f64 -1) (fma.f64 x x 1))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (fma.f64 (exp.f64 -1) (*.f64 x x) (exp.f64 -1)) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))","(fma.f64 (exp.f64 -1) (*.f64 x x) (fma.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)) (exp.f64 -1)))","(*.f64 (exp.f64 -1) (+.f64 (fma.f64 x x 1) (*.f64 1/2 (pow.f64 x 4))))","(*.f64 (exp.f64 -1) (fma.f64 1/2 (pow.f64 x 4) (fma.f64 x x 1)))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))","(fma.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6)) (+.f64 (fma.f64 (exp.f64 -1) (*.f64 x x) (exp.f64 -1)) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(fma.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6)) (fma.f64 (exp.f64 -1) (*.f64 x x) (fma.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)) (exp.f64 -1))))","(fma.f64 (fma.f64 x x 1) (exp.f64 -1) (*.f64 (exp.f64 -1) (+.f64 (*.f64 1/2 (pow.f64 x 4)) (*.f64 1/6 (pow.f64 x 6)))))","(*.f64 (exp.f64 -1) (+.f64 (fma.f64 1/2 (pow.f64 x 4) (*.f64 1/6 (pow.f64 x 6))) (fma.f64 x x 1)))","(*.f64 (exp.f64 -1) (+.f64 (*.f64 1/2 (pow.f64 x 4)) (fma.f64 1/6 (pow.f64 x 6) (fma.f64 x x 1))))","(*.f64 (exp.f64 -1) (+.f64 (fma.f64 x x 1) (fma.f64 1/2 (pow.f64 x 4) (*.f64 1/6 (pow.f64 x 6)))))"]],"stop":[["node limit",1]],"time":82.501220703125,"type":"simplify"},{"compiler":[[763,578]],"time":12.166015625,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1))) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))))","fresh",63.530497480164286],["(exp.f64 (fma.f64 x x -1))","done",0.04891250171767081],["(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))","next",0.03593622009701705]],"compiler":[[20,14],[6,4],[12,10],[20,14],[12,10]],"count":[[57,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[56,2],"picked":[1,1]}],"min-error":[0.01953125],"time":9.6669921875,"type":"prune"},{"compiler":[[30,21]],"locations":[["(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))",0.0078125,true],["(pow.f64 (exp.f64 1) (*.f64 x x))",0.02595256324130752,true]],"time":13.337890625,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))","x","-inf",0.15185546875],["(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))","x","inf",0.43212890625],["(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))","x","0",0.343017578125],["(pow.f64 (exp.f64 1) (*.f64 x x))","x","-inf",0.1640625],["(pow.f64 (exp.f64 1) (*.f64 x x))","x","inf",0.25],["(pow.f64 (exp.f64 1) (*.f64 x x))","x","0",0.47509765625]],"time":1.903076171875,"type":"series"},{"count":[[2,31]],"egraph":[[2,1902,13,0.017759833],[1,174,13,0.002814458],[0,9,17,0.00026075]],"inputs":[["(pow.f64 (exp.f64 1) (*.f64 x x))","(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) 2) (cbrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (*.f64 x x)) (pow.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 2)) (*.f64 x x)) (pow.f64 (cbrt.f64 (E.f64)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (E.f64)) (*.f64 x x)) (pow.f64 (sqrt.f64 (E.f64)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 x) x) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3) (pow.f64 (exp.f64 -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (exp.f64 -1) 3) (pow.f64 (pow.f64 (exp.f64 x) x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 x x -1))))))"]],"rules":[["egg-rr",15],["egg-rr",16]],"stop":[["node limit",1]],"time":37.492919921875,"type":"rewrite"},{"count":[[55,49]],"egraph":[[5,6416,206,0.021552875],[4,1707,210,0.0114555],[3,461,210,0.0034973749999999996],[2,180,216,0.001261208],[1,74,220,0.000511167],[0,30,242,0.000166708]],"inputs":[["1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(/.f64 1 (exp.f64 1))","(+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1))))","(+.f64 (*.f64 1/6 (/.f64 (pow.f64 x 6) (exp.f64 1))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (*.f64 x x))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 x x) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (fma.f64 x x (*.f64 1/2 (pow.f64 x 4))))","(fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) 1))","(fma.f64 x (fma.f64 1/2 (pow.f64 x 3) x) 1)","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (+.f64 (*.f64 x x) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (fma.f64 x x (*.f64 1/2 (pow.f64 x 4)))))","(fma.f64 1/6 (pow.f64 x 6) (fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) 1)))","(fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) (fma.f64 1/6 (pow.f64 x 6) 1)))","(fma.f64 x (fma.f64 1/2 (pow.f64 x 3) x) (fma.f64 1/6 (pow.f64 x 6) 1))","(fma.f64 x x (fma.f64 1/6 (pow.f64 x 6) (fma.f64 1/2 (pow.f64 x 4) 1)))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(/.f64 1 (exp.f64 1))","(exp.f64 -1)","(+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))","(+.f64 (exp.f64 -1) (/.f64 (*.f64 x x) (E.f64)))","(+.f64 (exp.f64 -1) (*.f64 (/.f64 x (E.f64)) x))","(fma.f64 (/.f64 x (E.f64)) x (exp.f64 -1))","(fma.f64 x (/.f64 x (E.f64)) (exp.f64 -1))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1))))","(fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (+.f64 (exp.f64 -1) (/.f64 (*.f64 x x) (E.f64))))","(+.f64 (exp.f64 -1) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (/.f64 (*.f64 x x) (E.f64))))","(+.f64 (exp.f64 -1) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (*.f64 (/.f64 x (E.f64)) x)))","(fma.f64 (/.f64 x (E.f64)) x (fma.f64 (/.f64 1/2 (E.f64)) (pow.f64 x 4) (exp.f64 -1)))","(fma.f64 x (/.f64 x (E.f64)) (fma.f64 (pow.f64 x 4) (/.f64 1/2 (E.f64)) (exp.f64 -1)))","(+.f64 (exp.f64 -1) (*.f64 (/.f64 x (E.f64)) (fma.f64 1/2 (pow.f64 x 3) x)))","(+.f64 (*.f64 1/6 (/.f64 (pow.f64 x 6) (exp.f64 1))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))))","(fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (+.f64 (exp.f64 -1) (/.f64 (*.f64 x x) (E.f64)))))","(fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (+.f64 (exp.f64 -1) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (/.f64 (*.f64 x x) (E.f64)))))","(+.f64 (exp.f64 -1) (fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (*.f64 (/.f64 x (E.f64)) x))))","(fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (fma.f64 (/.f64 x (E.f64)) x (fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (exp.f64 -1))))","(fma.f64 (pow.f64 x 4) (/.f64 1/2 (E.f64)) (fma.f64 x (/.f64 x (E.f64)) (fma.f64 (pow.f64 x 6) (/.f64 1/6 (E.f64)) (exp.f64 -1))))","(+.f64 (exp.f64 -1) (fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (*.f64 (/.f64 x (E.f64)) (fma.f64 1/2 (pow.f64 x 3) x))))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))"]],"stop":[["node limit",1]],"time":35.970947265625,"type":"simplify"},{"compiler":[[563,397]],"time":8.783935546875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))","next",0.03125],["(exp.f64 (fma.f64 x x -1))","done",0.04891250171767081],["(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))","done",0.03593622009701705]],"compiler":[[17,10],[6,4],[12,10],[17,10]],"count":[[52,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[49,1],"picked":[1,1]}],"min-error":[0.0078125],"time":9.105224609375,"type":"prune"},{"compiler":[[48,18]],"locations":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))",0.0078125,true],["(sqrt.f64 (pow.f64 (exp.f64 x) x))",0.0078125,true],["(pow.f64 (exp.f64 x) x)",0.01171875,true],["(*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))",0.015625,true]],"time":10.367919921875,"type":"localize"},{"count":[[4,48]],"series":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))","x","-inf",0.257080078125],["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))","x","inf",0.251953125],["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))","x","0",0.218017578125],["(sqrt.f64 (pow.f64 (exp.f64 x) x))","x","-inf",0.18408203125],["(sqrt.f64 (pow.f64 (exp.f64 x) x))","x","inf",0.448974609375],["(sqrt.f64 (pow.f64 (exp.f64 x) x))","x","0",0.236083984375],["(pow.f64 (exp.f64 x) x)","x","-inf",0.158203125],["(pow.f64 (exp.f64 x) x)","x","inf",0.137939453125],["(pow.f64 (exp.f64 x) x)","x","0",0.178955078125],["(*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))","x","-inf",0.193115234375],["(*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))","x","inf",0.2060546875],["(*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))","x","0",0.473876953125]],"time":3.1220703125,"type":"series"},{"count":[[4,80]],"egraph":[[2,2075,29,0.019905001],[1,209,29,0.0031614589999999997],[0,11,31,0.000296917]],"inputs":[["(*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))","(pow.f64 (exp.f64 x) x)","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 (*.f64 x 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (+.f64 (*.f64 x 1/2) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 2 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 2) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) (*.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))) (sqrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 1/4) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 1/4) (sqrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (pow.f64 (pow.f64 (exp.f64 x) x) 1/4)) (pow.f64 (pow.f64 (exp.f64 x) x) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 x) (pow.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) x) (pow.f64 (cbrt.f64 (exp.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) x) (pow.f64 (sqrt.f64 (exp.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (cbrt.f64 (pow.f64 (exp.f64 x) x))) (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (pow.f64 (exp.f64 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))) (cbrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 1/4) (pow.f64 (pow.f64 (exp.f64 x) x) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x)))) (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (*.f64 x 1/2)) (sqrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 1/2)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) 1/2) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 (*.f64 x 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) (+.f64 x x)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 x x) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (+.f64 -1 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 x) x) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 -1 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (+.f64 -1 (*.f64 x x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (+.f64 -1 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (+.f64 -1 (*.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (+.f64 -1 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (+.f64 -1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (+.f64 -1 (*.f64 x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) 3) (pow.f64 (exp.f64 -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (exp.f64 -1) 3) (pow.f64 (pow.f64 (exp.f64 x) x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (+.f64 -1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (+.f64 -1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 -1 (*.f64 x x)))))))"]],"rules":[["egg-rr",14],["egg-rr",26],["egg-rr",20],["egg-rr",20]],"stop":[["node limit",1]],"time":45.8740234375,"type":"rewrite"},{"count":[[128,98]],"egraph":[[5,6975,405,0.02465025],[4,2580,405,0.013959332999999999],[3,680,405,0.005104833],[2,249,411,0.001758749],[1,100,421,0.000696666],[0,41,453,0.000217208]],"inputs":[["1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","(exp.f64 (pow.f64 x 2))","1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(+.f64 (*.f64 1/8 (pow.f64 x 4)) (+.f64 1 (*.f64 1/2 (pow.f64 x 2))))","(+.f64 (*.f64 1/8 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 1/48 (pow.f64 x 6)))))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(/.f64 1 (exp.f64 1))","(+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1))))","(+.f64 (*.f64 1/6 (/.f64 (pow.f64 x 6) (exp.f64 1))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (*.f64 x x))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 x x) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 (fma.f64 x x 1) (*.f64 1/2 (pow.f64 x 4)))","(fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (+.f64 (*.f64 x x) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (fma.f64 x x (*.f64 1/2 (pow.f64 x 4)))))","(fma.f64 1/6 (pow.f64 x 6) (fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) 1)))","(fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) (fma.f64 1/6 (pow.f64 x 6) 1)))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (*.f64 x x))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 x x) (*.f64 1/2 (pow.f64 x 4))))","(+.f64 (fma.f64 x x 1) (*.f64 1/2 (pow.f64 x 4)))","(fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (+.f64 (*.f64 x x) (*.f64 1/2 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/6 (pow.f64 x 6) (fma.f64 x x (*.f64 1/2 (pow.f64 x 4)))))","(fma.f64 1/6 (pow.f64 x 6) (fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) 1)))","(fma.f64 x x (fma.f64 1/2 (pow.f64 x 4) (fma.f64 1/6 (pow.f64 x 6) 1)))","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","(exp.f64 (pow.f64 x 2))","(exp.f64 (*.f64 x x))","(pow.f64 (exp.f64 x) x)","1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) 1/2))","(fma.f64 (*.f64 x x) 1/2 1)","(fma.f64 x (*.f64 x 1/2) 1)","(+.f64 (*.f64 1/8 (pow.f64 x 4)) (+.f64 1 (*.f64 1/2 (pow.f64 x 2))))","(fma.f64 1/8 (pow.f64 x 4) (+.f64 1 (*.f64 (*.f64 x x) 1/2)))","(fma.f64 (pow.f64 x 4) 1/8 (fma.f64 (*.f64 x x) 1/2 1))","(fma.f64 (*.f64 x x) 1/2 (fma.f64 (pow.f64 x 4) 1/8 1))","(fma.f64 x (*.f64 x 1/2) (fma.f64 (pow.f64 x 4) 1/8 1))","(+.f64 (*.f64 1/8 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 1/48 (pow.f64 x 6)))))","(fma.f64 1/8 (pow.f64 x 4) (+.f64 1 (fma.f64 1/2 (*.f64 x x) (*.f64 (pow.f64 x 6) 1/48))))","(+.f64 (fma.f64 (*.f64 x x) 1/2 (*.f64 (pow.f64 x 6) 1/48)) (fma.f64 (pow.f64 x 4) 1/8 1))","(fma.f64 (pow.f64 x 4) 1/8 (fma.f64 x (*.f64 x 1/2) (fma.f64 (pow.f64 x 6) 1/48 1)))","(fma.f64 x (*.f64 x 1/2) (fma.f64 (pow.f64 x 4) 1/8 (fma.f64 (pow.f64 x 6) 1/48 1)))","(fma.f64 x (*.f64 x 1/2) (fma.f64 (pow.f64 x 6) 1/48 (fma.f64 (pow.f64 x 4) 1/8 1)))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(sqrt.f64 (exp.f64 (pow.f64 x 2)))","(sqrt.f64 (exp.f64 (*.f64 x x)))","(sqrt.f64 (pow.f64 (exp.f64 x) x))","(/.f64 1 (exp.f64 1))","(exp.f64 -1)","(+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))","(+.f64 (exp.f64 -1) (/.f64 (*.f64 x x) (E.f64)))","(fma.f64 (/.f64 x (E.f64)) x (exp.f64 -1))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1))))","(fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (+.f64 (exp.f64 -1) (/.f64 (*.f64 x x) (E.f64))))","(+.f64 (exp.f64 -1) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (/.f64 (*.f64 x x) (E.f64))))","(fma.f64 (/.f64 x (E.f64)) x (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (exp.f64 -1)))","(+.f64 (*.f64 1/6 (/.f64 (pow.f64 x 6) (exp.f64 1))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 4) (exp.f64 1))) (+.f64 (/.f64 (pow.f64 x 2) (exp.f64 1)) (/.f64 1 (exp.f64 1)))))","(fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (+.f64 (exp.f64 -1) (/.f64 (*.f64 x x) (E.f64)))))","(fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (+.f64 (exp.f64 -1) (fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (/.f64 (*.f64 x x) (E.f64)))))","(fma.f64 1/2 (/.f64 (pow.f64 x 4) (E.f64)) (fma.f64 (/.f64 x (E.f64)) x (fma.f64 1/6 (/.f64 (pow.f64 x 6) (E.f64)) (exp.f64 -1))))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (pow.f64 x 2)) (exp.f64 1))","(exp.f64 (-.f64 (*.f64 x x) 1))","(exp.f64 (fma.f64 x x -1))"]],"stop":[["node limit",1]],"time":42.23193359375,"type":"simplify"},{"compiler":[[2587,1335]],"time":27.98095703125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))","done",0.03125],["(exp.f64 (fma.f64 x x -1))","done",0.04891250171767081],["(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))","done",0.03593622009701705]],"compiler":[[17,10],[6,4],[12,10]],"count":[[147,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[144,0],"picked":[1,1]}],"min-error":[0.0078125],"time":42.471923828125,"type":"prune"},{"accuracy":[0.03125],"baseline":[0.03125],"branch":[["x",0.03125,1],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))",0.03125,1],["(neg.f64 (-.f64 1 (*.f64 x x)))",0.03125,1],["(-.f64 1 (*.f64 x x))",0.03125,1],["(*.f64 x x)",0.03125,1],["(*.f64 x x)",0.03125,1]],"compiler":[[2,1],[8,6],[7,5],[6,4],[4,2],[4,2],[59,39]],"count":[[5,1]],"inputs":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))","(pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1))) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))))","(*.f64 (pow.f64 (exp.f64 1) (*.f64 x x)) (pow.f64 (exp.f64 1) -1))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))"]],"link":["."],"name":["exp neg sub"],"oracle":[63.5390899502613],"outputs":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))"]],"time":14.399169921875,"times":[["x",3.449951171875],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))",1.7041015625],["(neg.f64 (-.f64 1 (*.f64 x x)))",1.68798828125],["(-.f64 1 (*.f64 x x))",2.130859375],["(*.f64 x x)",2.009033203125],["(*.f64 x x)",2.04296875]],"type":"regimes"},{"compiler":[[16,9]],"egraph":[[1,15,25,4.5584e-5],[0,11,25,2.7709e-5]],"inputs":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (exp.f64 1) -1))","(*.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) x)) (sqrt.f64 (pow.f64 (exp.f64 x) x))) (pow.f64 (E.f64) -1))"]],"stop":[["done",1],["saturated",1]],"time":8.433837890625,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[16,9]],"remove-preprocessing":[[]],"time":9.68701171875,"type":"end"}]
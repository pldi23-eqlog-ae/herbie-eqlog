[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.52852191630177,0.41345625924714113,0.05802182445108883],[11,0.46416315896613014,0.49536740494704645,0.04046943608682341],[10,0.3822520132662248,0.5772785506469518,0.04046943608682341],[9,0.29644033681870496,0.6864934115801589,0.017066251601136173],[8,0.21842972186641418,0.7801061495229078,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":69.163818359375,"type":"analyze"},{"outcomes":[["body",256,"invalid",40.060791015625,1072],["body",256,"valid",313.908203125,8256]],"time":362.80712890625,"type":"sample"},{"compiler":[[8,5]],"egraph":[[1,3,3,5.625e-6],[0,3,3,4.75e-6],[4,38,28,0.000328542],[3,36,28,0.00025625],[2,30,28,0.000174875],[1,22,28,0.0001095],[0,12,28,5.575e-5]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x y) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 z y) x)","(/.f64 (*.f64 x z) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2"],["(/.f64 (*.f64 x y) z)","(/.f64 x (/.f64 z y))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 z y) x)","(/.f64 z (/.f64 x y))","(*.f64 (/.f64 z x) y)","(*.f64 (/.f64 y x) z)","(*.f64 z (/.f64 y x))","(/.f64 (*.f64 x z) y)","(/.f64 x (/.f64 y z))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":22.671875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[4,17,7,0.00017712499999999998],[3,16,7,0.000139],[2,13,7,0.000100916],[1,9,7,6.4125e-5],[0,6,7,3.375e-5]],"inputs":[["(/.f64 (*.f64 x y) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x y) z)","(/.f64 x (/.f64 z y))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(*.f64 x (/.f64 y z))"]],"stop":[["saturated",1]],"time":11.094970703125,"type":"simplify"},{"compiler":[[13,7]],"time":0.256103515625,"type":"eval"},{"alts":[["(*.f64 x (/.f64 y z))","next",5.5697051351140106],["(/.f64 (*.f64 x y) z)","fresh",5.757409516054081]],"compiler":[[8,5],[8,5],[8,5],[8,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.09765625],"time":1.06591796875,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 x (/.f64 y z))",5.375476928031226,true]],"time":3.029052734375,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 x (/.f64 y z))","z","-inf",0.31494140625],["(*.f64 x (/.f64 y z))","z","inf",0.3369140625],["(*.f64 x (/.f64 y z))","z","0",0.410888671875],["(*.f64 x (/.f64 y z))","y","-inf",0.302978515625],["(*.f64 x (/.f64 y z))","y","inf",0.600830078125],["(*.f64 x (/.f64 y z))","y","0",0.5009765625],["(*.f64 x (/.f64 y z))","x","-inf",0.365966796875],["(*.f64 x (/.f64 y z))","x","inf",0.382080078125],["(*.f64 x (/.f64 y z))","x","0",0.544921875]],"time":3.863037109375,"type":"series"},{"count":[[1,22]],"egraph":[[2,1672,7,0.016729958],[1,125,7,0.002161375],[0,6,7,0.000138792]],"inputs":[["(*.f64 x (/.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (/.f64 y z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 y z))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":33.41796875,"type":"rewrite"},{"count":[[58,24]],"egraph":[[4,17,252,0.000279042],[3,16,252,0.000220542],[2,13,252,0.000162167],[1,9,252,0.00010575],[0,6,252,5.5917e-5]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))"]],"stop":[["saturated",1]],"time":14.240966796875,"type":"simplify"},{"compiler":[[183,78]],"time":2.428955078125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (*.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))","fresh",6.142366059107341],["(*.f64 x (/.f64 y z))","done",5.5697051351140106],["(/.f64 x (/.f64 z y))","next",5.344121433637657],["(*.f64 y (/.f64 x z))","fresh",6.509268050387929],["(/.f64 (*.f64 y x) z)","fresh",5.757409516054081]],"compiler":[[14,9],[8,5],[8,5],[8,5],[8,5],[14,9],[8,5],[8,5],[8,5]],"count":[[26,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[24,4],"picked":[1,1]}],"min-error":[0],"time":4.980224609375,"type":"prune"},{"compiler":[[14,5]],"locations":[["(/.f64 x (/.f64 z y))",5.167580687530414,true]],"time":3.122802734375,"type":"localize"},{"count":[[1,36]],"series":[["(/.f64 x (/.f64 z y))","y","-inf",0.545166015625],["(/.f64 x (/.f64 z y))","y","inf",0.177978515625],["(/.f64 x (/.f64 z y))","y","0",0.140869140625],["(/.f64 x (/.f64 z y))","z","-inf",0.151123046875],["(/.f64 x (/.f64 z y))","z","inf",0.18603515625],["(/.f64 x (/.f64 z y))","z","0",0.140869140625],["(/.f64 x (/.f64 z y))","x","-inf",0.153076171875],["(/.f64 x (/.f64 z y))","x","inf",0.18115234375],["(/.f64 x (/.f64 z y))","x","0",0.18994140625]],"time":1.95703125,"type":"series"},{"count":[[1,41]],"egraph":[[2,1915,7,0.019035082999999998],[1,131,7,0.002387041],[0,6,7,0.000139958]],"inputs":[["(/.f64 x (/.f64 z y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 2) (cbrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) (sqrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) z) (/.f64 (cbrt.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) z) (/.f64 (sqrt.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (/.f64 x (cbrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (cbrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 z y))) (/.f64 x (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (/.f64 z y))) (/.f64 (cbrt.f64 x) (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 z y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 y z))))))))"]],"rules":[["egg-rr",41]],"stop":[["node limit",1]],"time":37.4150390625,"type":"rewrite"},{"count":[[77,42]],"egraph":[[4,17,252,0.000273292],[3,16,252,0.000215459],[2,13,252,0.00015691700000000002],[1,9,252,0.000100334],[0,6,252,5.1459e-5]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))"]],"stop":[["saturated",1]],"time":13.881103515625,"type":"simplify"},{"compiler":[[401,153]],"time":4.325927734375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","next",5.726497553098663],["(*.f64 y (/.f64 x z))","fresh",6.509268050387929],["(*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))","fresh",5.8791670355909655],["(*.f64 x (/.f64 y z))","done",5.5697051351140106],["(/.f64 x (/.f64 z y))","done",5.344121433637657],["(/.f64 (*.f64 y x) z)","fresh",5.757409516054081]],"compiler":[[16,11],[8,5],[12,9],[8,5],[8,5],[8,5],[16,11],[8,5],[12,9],[8,5]],"count":[[47,6]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[42,3],"picked":[1,1]}],"min-error":[0],"time":8.511962890625,"type":"prune"},{"compiler":[[42,19]],"locations":[["(cbrt.f64 x)",0.08984375,true],["(pow.f64 (cbrt.f64 x) 2)",0.51953125,true],["(/.f64 (cbrt.f64 x) (/.f64 z y))",2.6383783287739395,true],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))",2.7798369901003577,true]],"time":9.134033203125,"type":"localize"},{"count":[[4,60]],"series":[["(cbrt.f64 x)","x","-inf",0.303955078125],["(cbrt.f64 x)","x","inf",0.26416015625],["(cbrt.f64 x)","x","0",0.22216796875],["(pow.f64 (cbrt.f64 x) 2)","x","-inf",0.5869140625],["(pow.f64 (cbrt.f64 x) 2)","x","inf",0.35302734375],["(pow.f64 (cbrt.f64 x) 2)","x","0",0.4521484375],["(/.f64 (cbrt.f64 x) (/.f64 z y))","y","-inf",0.47314453125],["(/.f64 (cbrt.f64 x) (/.f64 z y))","y","inf",0.4599609375],["(/.f64 (cbrt.f64 x) (/.f64 z y))","y","0",1.22998046875],["(/.f64 (cbrt.f64 x) (/.f64 z y))","z","-inf",0.31103515625],["(/.f64 (cbrt.f64 x) (/.f64 z y))","z","inf",0.48095703125],["(/.f64 (cbrt.f64 x) (/.f64 z y))","z","0",1.474853515625],["(/.f64 (cbrt.f64 x) (/.f64 z y))","x","-inf",0.524169921875],["(/.f64 (cbrt.f64 x) (/.f64 z y))","x","inf",0.381103515625],["(/.f64 (cbrt.f64 x) (/.f64 z y))","x","0",1.55712890625],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","y","-inf",0.22802734375],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","y","inf",0.262939453125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","y","0",1.68017578125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","z","-inf",0.237060546875],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","z","inf",0.44091796875],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","z","0",1.033203125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","x","-inf",1.760009765625],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","x","inf",0.268798828125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","x","0",1.43896484375]],"time":16.842041015625,"type":"series"},{"count":[[4,189]],"egraph":[[2,3077,25,0.028795375],[1,260,25,0.005032333],[0,12,25,0.000444625]],"inputs":[["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(pow.f64 (cbrt.f64 x) 2)","(cbrt.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (/.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (*.f64 (/.f64 z y) (pow.f64 (cbrt.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 (/.f64 z y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (/.f64 (/.f64 z y) (cbrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 (/.f64 z y) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (/.f64 z y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 2) (/.f64 1 (cbrt.f64 (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 (/.f64 z y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) (pow.f64 (*.f64 x (/.f64 y z)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 x)) (*.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (*.f64 -1 (/.f64 (/.f64 z y) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (*.f64 (/.f64 (/.f64 z y) (cbrt.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (/.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (neg.f64 (cbrt.f64 x))) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (neg.f64 (cbrt.f64 x))) (*.f64 -1 (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 x)) 1) (*.f64 (/.f64 (neg.f64 z) y) (pow.f64 (cbrt.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (neg.f64 (pow.f64 (cbrt.f64 x) 2))) (*.f64 (/.f64 z y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (pow.f64 (cbrt.f64 x) 2))) (*.f64 (/.f64 (neg.f64 z) y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (sqrt.f64 (/.f64 z y))) (sqrt.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (cbrt.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (*.f64 (cbrt.f64 x) (/.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) (neg.f64 (pow.f64 (cbrt.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 z y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 (/.f64 z y) (cbrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (/.f64 z y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (*.f64 x (/.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 z y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x (/.f64 y z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (/.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (/.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (/.f64 y z))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cbrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 y z)) (cbrt.f64 x))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 y z)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 y z)) (cbrt.f64 x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 y z)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (cbrt.f64 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))) (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 2)) (cbrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (/.f64 (cbrt.f64 (cbrt.f64 x)) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (*.f64 (cbrt.f64 (cbrt.f64 x)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))) (sqrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 x)) (/.f64 1 (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 1/6) 1) (/.f64 (pow.f64 x 1/6) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (cbrt.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) z) (/.f64 (cbrt.f64 (cbrt.f64 x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 1/6) z) (/.f64 (pow.f64 x 1/6) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z y)) -2) (cbrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (cbrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 1/6) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (/.f64 (pow.f64 x 1/6) (cbrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 z y) -1/2) (/.f64 (cbrt.f64 x) (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (sqrt.f64 (/.f64 z y))) (/.f64 (cbrt.f64 (cbrt.f64 x)) (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (cbrt.f64 x) z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (cbrt.f64 x) z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (cbrt.f64 x) z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z y) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (pow.f64 (/.f64 z y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (/.f64 z y) (cbrt.f64 x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 x) (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (/.f64 y z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 x (pow.f64 (/.f64 z y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (cbrt.f64 x) (/.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 z y) (cbrt.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) (/.f64 y z))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 5) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (/.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4) (pow.f64 (cbrt.f64 (cbrt.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (*.f64 2/3 (log.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 x)))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4)) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (pow.f64 (cbrt.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2))) (sqrt.f64 -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 x) -2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (cbrt.f64 x) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1) 1/2))))))"]],"rules":[["egg-rr",40],["egg-rr",37],["egg-rr",53],["egg-rr",59]],"stop":[["node limit",1]],"time":59.06787109375,"type":"rewrite"},{"count":[[249,193]],"egraph":[[17,7674,468,0.089433748],[16,6887,468,0.07967437299999999],[15,6214,468,0.066923915],[14,5681,468,0.057060624000000004],[13,5254,468,0.048849207000000006],[12,3627,468,0.040071832],[11,3372,468,0.032171874],[10,3166,468,0.026711040000000002],[9,3039,468,0.021724249],[8,2937,468,0.018061041],[7,2867,468,0.014825708],[6,1941,468,0.010777708],[5,865,468,0.0055359580000000005],[4,264,468,0.002298458],[3,105,468,0.000922208],[2,57,468,0.00048275],[1,30,468,0.0002585],[0,12,468,0.000112791]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) (/.f64 y z))","(*.f64 (cbrt.f64 x) (/.f64 y z))","(/.f64 y (/.f64 z (cbrt.f64 x)))","(*.f64 y (/.f64 (cbrt.f64 x) z))","(/.f64 (cbrt.f64 x) (/.f64 z y))"]],"stop":[["node limit",1]],"time":121.947021484375,"type":"simplify"},{"compiler":[[3628,1729]],"time":41.2900390625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","done",5.726497553098663],["(*.f64 y (/.f64 x z))","fresh",6.509268050387929],["(/.f64 (*.f64 y x) z)","next",5.757409516054081],["(*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))","fresh",5.8791670355909655],["(*.f64 x (/.f64 y z))","done",5.5697051351140106],["(/.f64 x (/.f64 z y))","done",5.344121433637657]],"compiler":[[16,11],[8,5],[8,5],[12,9],[8,5],[8,5],[8,5],[8,5],[12,9]],"count":[[239,6]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[233,2],"picked":[1,1]}],"min-error":[0],"time":58.363037109375,"type":"prune"},{"compiler":[[14,5]],"locations":[["(/.f64 (*.f64 y x) z)",5.65024039682047,true]],"time":3.0830078125,"type":"localize"},{"count":[[1,0]],"series":[["(/.f64 (*.f64 y x) z)","z","-inf",0.14697265625],["(/.f64 (*.f64 y x) z)","z","inf",0.175048828125],["(/.f64 (*.f64 y x) z)","z","0",0.155029296875],["(/.f64 (*.f64 y x) z)","x","-inf",0.2001953125],["(/.f64 (*.f64 y x) z)","x","inf",0.212158203125],["(/.f64 (*.f64 y x) z)","x","0",0.14013671875],["(/.f64 (*.f64 y x) z)","y","-inf",0.179931640625],["(/.f64 (*.f64 y x) z)","y","inf",0.200927734375],["(/.f64 (*.f64 y x) z)","y","0",0.179931640625]],"time":1.6728515625,"type":"series"},{"count":[[1,41]],"egraph":[[2,1731,7,0.017795709],[1,125,7,0.002219251],[0,6,7,0.000142042]],"inputs":[["(/.f64 (*.f64 y x) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) 2) (cbrt.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 y z) x)) (sqrt.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (sqrt.f64 (*.f64 y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 y)) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y 1) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y x)) 1) (/.f64 (sqrt.f64 (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 (cbrt.f64 z) 2)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 (*.f64 y x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (*.f64 y x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 z)) (/.f64 x (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 (*.f64 y x) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (*.f64 y x)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 y z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 y z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 y z) x)))))))"]],"rules":[["egg-rr",41]],"stop":[["node limit",1]],"time":36.59912109375,"type":"rewrite"},{"count":[[41,41]],"egraph":[[0,0,0,2.0208e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.56591796875,"type":"simplify"},{"compiler":[[404,153]],"time":4.26611328125,"type":"eval"},{"alts":[["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","done",5.726497553098663],["(*.f64 y (/.f64 x z))","fresh",6.509268050387929],["(*.f64 (/.f64 1 z) (*.f64 y x))","fresh",5.810475775822524],["(*.f64 x (/.f64 y z))","done",5.5697051351140106],["(/.f64 (*.f64 y x) z)","done",5.757409516054081],["(/.f64 x (/.f64 z y))","done",5.344121433637657]],"compiler":[[16,11],[8,5],[10,7],[8,5],[8,5],[8,5]],"count":[[47,6]],"kept":[{"done":[3,3],"fresh":[2,1],"new":[41,1],"picked":[1,1]}],"min-error":[0],"time":7.514892578125,"type":"prune"},{"accuracy":[0.66796875],"baseline":[5.344121433637657],"branch":[["x",4.178283658340272,3],["y",3.0618926351140114,2],["z",3.9425743002290305,2],["(/.f64 (*.f64 x y) z)",1.4635411712932251,4],["(*.f64 x y)",0.66796875,4],["(*.f64 x y)",0.66796875,4]],"compiler":[[4,3],[4,3],[4,3],[8,5],[6,4],[6,4],[83,34]],"count":[[12,4]],"inputs":[["(*.f64 (/.f64 1 z) (*.f64 y x))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))","(*.f64 y (/.f64 x z))","(*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))","(/.f64 (/.f64 (*.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))","(/.f64 x (/.f64 z y))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 x y) z)"]],"link":["."],"name":["Diagrams.Solve.Tridiagonal:solveCyclicTriDiagonal from diagrams-solve-0.1, A"],"oracle":[18.093689812070693],"outputs":[["(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)"]],"time":90.795166015625,"times":[["x",15.328125],["y",14.4541015625],["z",9.940185546875],["(/.f64 (*.f64 x y) z)",15.64013671875],["(*.f64 x y)",16.6650390625],["(*.f64 x y)",16.885009765625]],"type":"regimes"},{"bstep":[[1.1946878600465953e-118,1.462646922555955e-115,0.028076171875],[-7.051661773618477e-71,-7.035263377355139e-92,0.048095703125],[-3.3546608878689483e+304,-2.284342513954632e+267,0.110107421875]],"compiler":[[8,6],[6,4]],"method":["left-value","left-value","left-value"],"time":0.291015625,"type":"bsearch"},{"compiler":[[41,18]],"egraph":[[1,24,55,7.179199999999999e-5],[0,21,55,4.0084e-5]],"inputs":[["(if (<=.f64 (*.f64 x y) -19999999999999998785071050110729243720080574440234649906381543142646409126026467805686618514881015496873712236112324345157434387485272061060471597681733765549974602883364022082135420506324881811687439605097103198153279365101643665319098224539215899610692069837325144812815208761691919724149808696276287488) (*.f64 x (/.f64 y z)) (if (<=.f64 (*.f64 x y) -6216540455122333/124330809102446660538845562036705210025114037699336929360115994223289874253133343883264) (/.f64 (*.f64 y x) z) (if (<=.f64 (*.f64 x y) 4542742026847543/22713710134237715329666368996500141698551292521478689383796568724394977753543685103943470334805111423773828800195818060422956300894208) (*.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 x y) -19999999999999998785071050110729243720080574440234649906381543142646409126026467805686618514881015496873712236112324345157434387485272061060471597681733765549974602883364022082135420506324881811687439605097103198153279365101643665319098224539215899610692069837325144812815208761691919724149808696276287488) (*.f64 x (/.f64 y z)) (if (<=.f64 (*.f64 x y) -6216540455122333/124330809102446660538845562036705210025114037699336929360115994223289874253133343883264) (/.f64 (*.f64 y x) z) (if (<=.f64 (*.f64 x y) 4542742026847543/22713710134237715329666368996500141698551292521478689383796568724394977753543685103943470334805111423773828800195818060422956300894208) (*.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))))","(if (<=.f64 (*.f64 x y) -19999999999999998785071050110729243720080574440234649906381543142646409126026467805686618514881015496873712236112324345157434387485272061060471597681733765549974602883364022082135420506324881811687439605097103198153279365101643665319098224539215899610692069837325144812815208761691919724149808696276287488) (*.f64 x (/.f64 y z)) (if (<=.f64 (*.f64 x y) -6216540455122333/124330809102446660538845562036705210025114037699336929360115994223289874253133343883264) (/.f64 (*.f64 x y) z) (if (<=.f64 (*.f64 x y) 4542742026847543/22713710134237715329666368996500141698551292521478689383796568724394977753543685103943470334805111423773828800195818060422956300894208) (*.f64 y (/.f64 x z)) (/.f64 (*.f64 x y) z))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.016845703125,"type":"simplify"},{"time":0.026123046875,"type":"soundness"},{"compiler":[[41,18],[41,18],[41,18]],"remove-preprocessing":[[]],"time":19.71484375,"type":"end"}]
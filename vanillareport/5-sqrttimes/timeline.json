[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.2493898868560791,0.0009760856628417969,0.7496340274810791],[11,0.2489018440246582,0.0019521713256835938,0.7491459846496582],[10,0.2479257583618164,0.0039043426513671875,0.7481698989868164],[9,0.2459735870361328,0.007808685302734375,0.7462177276611328],[8,0.24206924438476563,0.01561737060546875,0.7423133850097656],[7,0.23426055908203125,0.0312347412109375,0.7345046997070313],[6,0.2186431884765625,0.062469482421875,0.7188873291015625],[5,0.187408447265625,0.12493896484375,0.687652587890625],[4,0.12493896484375,0.2498779296875,0.62518310546875],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.499755859375,0.500244140625],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.419189453125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.71875,19],["body",256,"valid",289.463134765625,8256]],"time":297.90087890625,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.458e-6],[2,14,11,0.00011466599999999999],[1,13,11,8.45e-5],[0,7,11,5.2625e-5]],"inputs":[["0"],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.635986328125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,14,11,0.00010849999999999998],[1,13,11,7.858299999999999e-5],[0,7,11,4.7208e-5]],"inputs":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))"]],"stop":[["saturated",1]],"time":11.10107421875,"type":"simplify"},{"compiler":[[15,10]],"time":0.343994140625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))","next",0.46875]],"compiler":[[8,6],[8,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.46875],"time":0.803955078125,"type":"prune"},{"compiler":[[19,12]],"locations":[["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))",0.46875,true]],"time":4.85791015625,"type":"localize"},{"count":[[1,4]],"series":[["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))","x","-inf",0.426025390625],["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))","x","inf",0.343017578125],["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))","x","0",0.6220703125]],"time":1.440185546875,"type":"series"},{"count":[[1,14]],"egraph":[[2,1776,9,0.017713209],[1,146,9,0.002515126],[0,7,9,0.000190417]],"inputs":[["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (*.f64 x (+.f64 x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 x -1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 (*.f64 x (+.f64 x -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x (+.f64 x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 x (+.f64 x -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (*.f64 x (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sqrt.f64 (*.f64 x (+.f64 x -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 x -1) 3/2) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3/2) (pow.f64 (+.f64 x -1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (*.f64 x (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (*.f64 x (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (*.f64 x (+.f64 x -1)))))))))"]],"rules":[["egg-rr",14]],"stop":[["node limit",1]],"time":34.766845703125,"type":"rewrite"},{"count":[[18,21]],"egraph":[[6,7336,34,0.027625042],[5,1866,34,0.016687833],[4,652,34,0.005035417],[3,256,34,0.001923042],[2,102,34,0.000746708],[1,45,34,0.00030037499999999997],[0,18,34,0.000108792]],"inputs":[["x","(-.f64 x 1/2)","(-.f64 x (+.f64 1/2 (*.f64 1/8 (/.f64 1 x))))","(-.f64 x (+.f64 1/2 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 2))) (*.f64 1/8 (/.f64 1 x)))))"]],"method":["egg-herbie"],"outputs":[["x","(-.f64 x 1/2)","(+.f64 x -1/2)","(-.f64 x (+.f64 1/2 (*.f64 1/8 (/.f64 1 x))))","(-.f64 (+.f64 x -1/2) (/.f64 1/8 x))","(+.f64 x (-.f64 -1/2 (/.f64 1/8 x)))","(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))","(+.f64 -1/2 (-.f64 x (/.f64 1/8 x)))","(+.f64 x (+.f64 -1/2 (/.f64 -1/8 x)))","(-.f64 x (+.f64 1/2 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 2))) (*.f64 1/8 (/.f64 1 x)))))","(-.f64 (+.f64 x -1/2) (+.f64 (/.f64 1/8 x) (/.f64 1/16 (*.f64 x x))))","(+.f64 x (-.f64 -1/2 (+.f64 (/.f64 1/8 x) (/.f64 1/16 (*.f64 x x)))))","(+.f64 (+.f64 -1/2 (-.f64 x (/.f64 1/8 x))) (/.f64 -1/16 (*.f64 x x)))","(-.f64 (/.f64 -1/16 (*.f64 x x)) (+.f64 (/.f64 1/8 x) (-.f64 1/2 x)))","(+.f64 x (+.f64 (+.f64 -1/2 (/.f64 -1/8 x)) (/.f64 -1/16 (*.f64 x x))))"]],"stop":[["node limit",1]],"time":39.1689453125,"type":"simplify"},{"compiler":[[174,132]],"time":2.815185546875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))","done",0.46875],["(+.f64 x (+.f64 -1/2 (/.f64 -1/8 x)))","next",0.23496757853726058]],"compiler":[[8,6],[8,6],[8,6]],"count":[[22,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[21,1],"picked":[1,1]}],"min-error":[0],"time":2.89599609375,"type":"prune"},{"compiler":[[19,14]],"time":4.56103515625,"type":"localize"},{"compiler":[[1,1]],"time":0.117919921875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))","done",0.46875],["(+.f64 x (+.f64 -1/2 (/.f64 -1/8 x)))","done",0.23496757853726058]],"compiler":[[8,6],[8,6]],"count":[[2,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.862060546875,"type":"prune"},{"accuracy":[0.23496757853726058],"baseline":[0.23496757853726058],"branch":[["x",0.23496757853726058,1],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))",0.23496757853726058,1]],"compiler":[[2,1],[8,6],[22,15]],"count":[[3,1]],"inputs":[["(+.f64 x (+.f64 -1/2 (/.f64 -1/8 x)))","(*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))","(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))"]],"link":["."],"name":["sqrt times"],"oracle":[0.7037175785372607],"outputs":[["(+.f64 x (+.f64 -1/2 (/.f64 -1/8 x)))"]],"time":6.73486328125,"times":[["x",2.98291015625],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))",3.11279296875]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[1,9,10,2.8001000000000002e-5],[0,7,10,1.7084e-5]],"inputs":[["(+.f64 x (+.f64 -1/2 (/.f64 -1/8 x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (+.f64 -1/2 (/.f64 -1/8 x)))"]],"stop":[["done",1],["saturated",1]],"time":8.200927734375,"type":"simplify"},{"time":0.01904296875,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.22412109375,"type":"end"}]
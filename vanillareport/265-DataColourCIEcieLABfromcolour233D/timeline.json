[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.52001953125,"type":"analyze"},{"outcomes":[["body",256,"valid",254.169921875,8256]],"time":262.031005859375,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,2,2,1.791e-6],[10,505,10,0.0074421259999999986],[9,503,10,0.006151209999999999],[8,457,10,0.004835750999999999],[7,324,10,0.0034571669999999997],[6,186,10,0.001950708],[5,114,10,0.001044791],[4,68,14,0.0005910409999999999],[3,42,14,0.00032241599999999996],[2,24,14,0.00016849999999999998],[1,12,14,8.908399999999999e-5],[0,8,14,3.8125e-5]],"inputs":[["0","1"],["(-.f64 x (/.f64 y 200))","(-.f64 y (/.f64 x 200))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 x (/.f64 y 200))","(+.f64 x (*.f64 -1/200 y))","(fma.f64 -1/200 y x)","(fma.f64 y -1/200 x)","(-.f64 y (/.f64 x 200))","(+.f64 y (*.f64 -1/200 x))","(fma.f64 -1/200 x y)","(fma.f64 x -1/200 y)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":29.407958984375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,367,5,0.005624459],[11,364,5,0.004822959],[10,336,5,0.0040015],[9,272,5,0.003120459],[8,212,5,0.002285417],[7,156,5,0.001585667],[6,109,5,0.0010715],[5,63,5,0.000618334],[4,39,7,0.000365125],[3,24,7,0.00021283400000000002],[2,15,7,0.000118209],[1,8,7,6.7667e-5],[0,6,7,3.0875e-5]],"inputs":[["(-.f64 x (/.f64 y 200))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (/.f64 y 200))","(+.f64 x (*.f64 -1/200 y))","(fma.f64 -1/200 y x)","(fma.f64 y -1/200 x)"]],"stop":[["saturated",1]],"time":15.7880859375,"type":"simplify"},{"compiler":[[11,7]],"time":0.308837890625,"type":"eval"},{"alts":[["(fma.f64 y -1/200 x)","fresh",0.08984375],["(-.f64 x (/.f64 y 200))","next",0.01171875]],"compiler":[[6,4],[7,5],[6,4],[7,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":1.58203125,"type":"prune"},{"compiler":[[13,8]],"locations":[["(-.f64 x (/.f64 y 200))",0.01171875,true]],"time":3.092041015625,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 x (/.f64 y 200))","y","-inf",0.18701171875],["(-.f64 x (/.f64 y 200))","y","inf",0.31494140625],["(-.f64 x (/.f64 y 200))","y","0",0.22802734375],["(-.f64 x (/.f64 y 200))","x","-inf",0.169921875],["(-.f64 x (/.f64 y 200))","x","inf",0.284912109375],["(-.f64 x (/.f64 y 200))","x","0",0.2900390625]],"time":1.547119140625,"type":"series"},{"count":[[1,36]],"egraph":[[2,1902,7,0.019148499],[1,139,7,0.002723583],[0,6,7,0.000208416]],"inputs":[["(-.f64 x (/.f64 y 200))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 y -1/200) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y -1/200)) (fma.f64 -1/200 y (*.f64 y 1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y -1/200)) (fma.f64 (*.f64 y -1/200) 1 (*.f64 y 1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y -1/200)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/200))) (pow.f64 (cbrt.f64 (*.f64 y 1/200)) 2) (*.f64 y 1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y -1/200)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 y 1/200))) (sqrt.f64 (*.f64 y 1/200)) (*.f64 y 1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -1/200) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (*.f64 y -1/200)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (*.f64 y -1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (*.f64 y -1/200))) (pow.f64 (cbrt.f64 (+.f64 x (*.f64 y -1/200))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (*.f64 y -1/200))) 2) (cbrt.f64 (+.f64 x (*.f64 y -1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (*.f64 y -1/200))) (sqrt.f64 (+.f64 x (*.f64 y -1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/8000000)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 y 1/200) (+.f64 x (*.f64 y 1/200))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/40000)) (/.f64 1 (+.f64 x (*.f64 y 1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 y 1/200))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 y 1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 y 1/200) (+.f64 x (*.f64 y 1/200)))) (-.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/8000000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (*.f64 y 1/200)) (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/40000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/8000000)) (fma.f64 x x (*.f64 (*.f64 y 1/200) (+.f64 x (*.f64 y 1/200)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/40000)) (+.f64 x (*.f64 y 1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/8000000))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 y 1/200) (+.f64 x (*.f64 y 1/200))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/40000))) (neg.f64 (+.f64 x (*.f64 y 1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y -1/200) 3)) (+.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 y -1/200) (*.f64 y -1/200)) (*.f64 x (*.f64 y -1/200)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y -1/200) (*.f64 y -1/200))) (-.f64 x (*.f64 y -1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (*.f64 y -1/200)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (*.f64 y -1/200)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (*.f64 y -1/200))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (*.f64 y -1/200))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (*.f64 y -1/200)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (*.f64 y -1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (*.f64 y -1/200)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (*.f64 y -1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (*.f64 y -1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (*.f64 y -1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y -1/200))))))"]],"rules":[["egg-rr",36]],"stop":[["node limit",1]],"time":37.329833984375,"type":"rewrite"},{"count":[[60,40]],"egraph":[[2,10,105,0.000153959],[1,9,105,9.9084e-5],[0,6,105,4.9167e-5]],"inputs":[["(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)"]],"stop":[["saturated",1]],"time":11.674072265625,"type":"simplify"},{"compiler":[[474,318]],"time":6.1630859375,"type":"eval"},{"alts":[["(fma.f64 y -1/200 x)","next",0.08984375],["(-.f64 x (/.f64 y 200))","done",0.01171875]],"compiler":[[6,4],[7,5],[6,4]],"count":[[42,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[40,0],"picked":[1,1]}],"min-error":[0],"time":5.786865234375,"type":"prune"},{"compiler":[[9,5]],"locations":[["(fma.f64 y -1/200 x)",0.08984375,true]],"time":2.24609375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y -1/200 x)","x","-inf",0.19580078125],["(fma.f64 y -1/200 x)","x","inf",0.152099609375],["(fma.f64 y -1/200 x)","x","0",0.343017578125],["(fma.f64 y -1/200 x)","y","-inf",0.2978515625],["(fma.f64 y -1/200 x)","y","inf",0.18896484375],["(fma.f64 y -1/200 x)","y","0",0.27294921875]],"time":1.515869140625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1108,5,0.013306583],[1,100,5,0.001652958],[0,5,5,0.000176208]],"inputs":[["(fma.f64 y -1/200 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -1/200) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y -1/200) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y -1/200 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y -1/200 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y -1/200 x)) (pow.f64 (cbrt.f64 (fma.f64 y -1/200 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y -1/200 x)) 2) (cbrt.f64 (fma.f64 y -1/200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y -1/200 x)) (sqrt.f64 (fma.f64 y -1/200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y -1/200) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 y -1/200) (*.f64 y -1/200)) (-.f64 (*.f64 x x) (*.f64 (*.f64 y -1/200) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y -1/200) (*.f64 y -1/200)) (*.f64 x x)) (-.f64 (*.f64 y -1/200) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y -1/200 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y -1/200 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y -1/200 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y -1/200 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y -1/200 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y -1/200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y -1/200 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y -1/200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y -1/200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y -1/200 x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":29.55615234375,"type":"rewrite"},{"count":[[45,25]],"egraph":[[2,10,105,0.000146709],[1,9,105,9.870899999999999e-5],[0,6,105,4.8584e-5]],"inputs":[["x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)"]],"stop":[["saturated",1]],"time":11.2490234375,"type":"simplify"},{"compiler":[[199,134]],"time":3.544921875,"type":"eval"},{"alts":[["(fma.f64 y -1/200 x)","done",0.08984375],["(-.f64 x (/.f64 y 200))","done",0.01171875]],"compiler":[[6,4],[7,5]],"count":[[27,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[25,0],"picked":[1,1]}],"min-error":[0],"time":3.278076171875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["(-.f64 x (/.f64 y 200))",0.01171875,1],["(/.f64 y 200)",0.01171875,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[11,7]],"count":[[2,1]],"inputs":[["(fma.f64 y -1/200 x)","(-.f64 x (/.f64 y 200))"]],"link":["."],"name":["Data.Colour.CIE:cieLAB from colour-2.3.3, D"],"oracle":[0.1015625],"outputs":[["(-.f64 x (/.f64 y 200))"]],"time":12.219970703125,"times":[["x",2.705078125],["y",2.67919921875],["(-.f64 x (/.f64 y 200))",3.5478515625],["(/.f64 y 200)",2.755859375]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[5,23,7,0.000136042],[4,22,7,0.000109792],[3,19,7,8.2333e-5],[2,15,7,5.7167000000000003e-5],[1,8,7,3.4750000000000004e-5],[0,6,7,1.3125e-5]],"inputs":[["(-.f64 x (/.f64 y 200))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (/.f64 y 200))"]],"stop":[["done",1],["saturated",1]],"time":8.097900390625,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.23291015625,"type":"end"}]
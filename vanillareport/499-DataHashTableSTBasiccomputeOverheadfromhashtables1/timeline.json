[{"compiler":[[22,16]],"method":["search"],"sampling":[[12,0.0,0.9980483050458702,0.0019516949541298345],[11,0.0,0.9980483050458702,0.0019516949541298345],[10,0.0,0.9980483050458702,0.0019516949541298345],[9,0.0,0.9980483050458702,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":197.97802734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",144.558349609375,2559],["body",256,"valid",472.106689453125,8256]],"time":626.97705078125,"type":"sample"},{"compiler":[[21,15]],"egraph":[[0,4,4,2.584e-6],[6,5503,140,0.030369751],[5,2537,147,0.018750459],[4,1274,147,0.008828709],[3,542,147,0.0035347919999999997],[2,245,161,0.00136675],[1,112,161,0.000517209],[0,52,175,0.0001695]],"inputs":[["0","1","2","3"],["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","(+.f64 (/.f64 y x) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","(+.f64 (/.f64 z y) (/.f64 (+.f64 2 (*.f64 (*.f64 x 2) (-.f64 1 t))) (*.f64 t x)))","(+.f64 (/.f64 t y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 x))) (*.f64 x z)))","(+.f64 (/.f64 x z) (/.f64 (+.f64 2 (*.f64 (*.f64 y 2) (-.f64 1 t))) (*.f64 t y)))","(+.f64 (/.f64 x t) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 y))) (*.f64 y z)))","(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 t 2) (-.f64 1 z))) (*.f64 z t)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 z (*.f64 2 (-.f64 1 t)))) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 z (*.f64 2 (-.f64 1 t)) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 z (+.f64 2 (*.f64 -2 t)) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 z (fma.f64 -2 t 2) 2) (*.f64 z t)))","(fma.f64 (/.f64 (fma.f64 z (-.f64 1 t) 1) z) (/.f64 2 t) (/.f64 x y))","(fma.f64 (/.f64 2 t) (/.f64 (fma.f64 z (-.f64 1 t) 1) z) (/.f64 x y))","(+.f64 (/.f64 x y) (fma.f64 2 (/.f64 (+.f64 z 1) (*.f64 z t)) -2))","(+.f64 (/.f64 y x) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","(+.f64 (/.f64 (+.f64 2 (*.f64 z (*.f64 2 (-.f64 1 t)))) (*.f64 z t)) (/.f64 y x))","(+.f64 (/.f64 (fma.f64 z (*.f64 2 (-.f64 1 t)) 2) (*.f64 z t)) (/.f64 y x))","(+.f64 (/.f64 (fma.f64 z (+.f64 2 (*.f64 -2 t)) 2) (*.f64 z t)) (/.f64 y x))","(+.f64 (/.f64 (fma.f64 z (fma.f64 -2 t 2) 2) (*.f64 z t)) (/.f64 y x))","(fma.f64 (/.f64 (fma.f64 z (-.f64 1 t) 1) z) (/.f64 2 t) (/.f64 y x))","(fma.f64 (/.f64 2 z) (/.f64 (fma.f64 z (-.f64 1 t) 1) t) (/.f64 y x))","(fma.f64 (-.f64 (/.f64 (+.f64 z 1) (*.f64 z t)) 1) 2 (/.f64 y x))","(+.f64 (/.f64 z y) (/.f64 (+.f64 2 (*.f64 (*.f64 x 2) (-.f64 1 t))) (*.f64 t x)))","(+.f64 (/.f64 z y) (/.f64 (+.f64 2 (*.f64 x (*.f64 2 (-.f64 1 t)))) (*.f64 x t)))","(+.f64 (/.f64 z y) (/.f64 (fma.f64 x (*.f64 2 (-.f64 1 t)) 2) (*.f64 x t)))","(+.f64 (/.f64 z y) (/.f64 (fma.f64 x (+.f64 2 (*.f64 -2 t)) 2) (*.f64 x t)))","(+.f64 (/.f64 z y) (/.f64 (fma.f64 x (fma.f64 -2 t 2) 2) (*.f64 x t)))","(fma.f64 (/.f64 (fma.f64 x (-.f64 1 t) 1) x) (/.f64 2 t) (/.f64 z y))","(+.f64 (/.f64 z y) (/.f64 (fma.f64 x (fma.f64 t -2 2) 2) (*.f64 x t)))","(+.f64 (/.f64 z y) (+.f64 (/.f64 (fma.f64 x 2 2) (*.f64 x t)) -2))","(+.f64 (/.f64 t y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 x))) (*.f64 x z)))","(+.f64 (/.f64 t y) (/.f64 (+.f64 2 (*.f64 z (*.f64 2 (-.f64 1 x)))) (*.f64 x z)))","(+.f64 (/.f64 t y) (/.f64 (fma.f64 (*.f64 2 z) (-.f64 1 x) 2) (*.f64 x z)))","(+.f64 (/.f64 t y) (/.f64 (fma.f64 z (fma.f64 -2 x 2) 2) (*.f64 x z)))","(+.f64 (/.f64 t y) (/.f64 (fma.f64 z (fma.f64 x -2 2) 2) (*.f64 x z)))","(+.f64 (/.f64 t y) (+.f64 (/.f64 (fma.f64 2 z 2) (*.f64 x z)) -2))","(+.f64 (/.f64 x z) (/.f64 (+.f64 2 (*.f64 (*.f64 y 2) (-.f64 1 t))) (*.f64 t y)))","(+.f64 (/.f64 x z) (/.f64 (+.f64 2 (*.f64 y (*.f64 2 (-.f64 1 t)))) (*.f64 y t)))","(+.f64 (/.f64 x z) (/.f64 (fma.f64 y (*.f64 2 (-.f64 1 t)) 2) (*.f64 y t)))","(+.f64 (/.f64 x z) (/.f64 (fma.f64 y (+.f64 2 (*.f64 -2 t)) 2) (*.f64 y t)))","(+.f64 (/.f64 x z) (/.f64 (fma.f64 y (fma.f64 -2 t 2) 2) (*.f64 y t)))","(fma.f64 (/.f64 (fma.f64 y (-.f64 1 t) 1) y) (/.f64 2 t) (/.f64 x z))","(fma.f64 (/.f64 2 t) (/.f64 (fma.f64 y (-.f64 1 t) 1) y) (/.f64 x z))","(+.f64 (/.f64 x z) (+.f64 (/.f64 (fma.f64 y 2 2) (*.f64 y t)) -2))","(+.f64 (/.f64 x t) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 y))) (*.f64 y z)))","(+.f64 (/.f64 x t) (/.f64 (+.f64 2 (*.f64 z (*.f64 2 (-.f64 1 y)))) (*.f64 y z)))","(+.f64 (/.f64 x t) (/.f64 (fma.f64 z (*.f64 2 (-.f64 1 y)) 2) (*.f64 y z)))","(+.f64 (/.f64 x t) (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 y)) 2) (*.f64 y z)))","(+.f64 (/.f64 x t) (/.f64 (fma.f64 z (fma.f64 -2 y 2) 2) (*.f64 y z)))","(+.f64 (/.f64 x t) (/.f64 (fma.f64 z (fma.f64 y -2 2) 2) (*.f64 y z)))","(+.f64 (/.f64 x t) (+.f64 (/.f64 (fma.f64 2 z 2) (*.f64 y z)) -2))","(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 t 2) (-.f64 1 z))) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 2 t) (-.f64 1 z))) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 (*.f64 2 t) (-.f64 1 z) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 t (+.f64 2 (*.f64 -2 z)) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 t (fma.f64 -2 z 2) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 t (fma.f64 z -2 2) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (fma.f64 (+.f64 1 t) (/.f64 2 (*.f64 z t)) -2))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":56.2119140625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[8,6824,19,0.034765792],[7,3598,19,0.021689583999999998],[6,1175,20,0.010307126],[5,541,21,0.004168501],[4,285,21,0.001933876],[3,121,21,0.0008531669999999999],[2,56,23,0.00037954199999999997],[1,28,23,0.000164334],[0,15,25,6.1917e-5]],"inputs":[["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 2 z) (-.f64 1 t))) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 (*.f64 2 z) (-.f64 1 t) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 z (fma.f64 -2 t 2) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (/.f64 (fma.f64 z (fma.f64 t -2 2) 2) (*.f64 z t)))","(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (fma.f64 2 z 2) (*.f64 z t))))","(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))"]],"stop":[["node limit",1]],"time":46.68408203125,"type":"simplify"},{"compiler":[[34,23]],"time":0.498046875,"type":"eval"},{"alts":[["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","fresh",8.34375],["(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))","next",0.078125]],"compiler":[[21,15],[17,13],[21,15],[17,13]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.015625],"time":1.52099609375,"type":"prune"},{"compiler":[[50,33]],"locations":[["(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))",0.00390625,true],["(/.f64 (+.f64 2 (/.f64 2 z)) t)",0.171875,true]],"time":11.077880859375,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))","t","-inf",0.18896484375],["(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))","t","inf",0.1650390625],["(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))","t","0",0.4541015625],["(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))","z","-inf",0.26611328125],["(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))","z","inf",0.2919921875],["(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))","z","0",1.1669921875],["(/.f64 (+.f64 2 (/.f64 2 z)) t)","t","-inf",0.333984375],["(/.f64 (+.f64 2 (/.f64 2 z)) t)","t","inf",0.380126953125],["(/.f64 (+.f64 2 (/.f64 2 z)) t)","t","0",0.733154296875],["(/.f64 (+.f64 2 (/.f64 2 z)) t)","z","-inf",0.352783203125],["(/.f64 (+.f64 2 (/.f64 2 z)) t)","z","inf",0.378173828125],["(/.f64 (+.f64 2 (/.f64 2 z)) t)","z","0",0.552978515625]],"time":5.424072265625,"type":"series"},{"count":[[2,102]],"egraph":[[2,2925,23,0.025849498999999998],[1,212,23,0.003872708],[0,9,23,0.00029425]],"inputs":[["(/.f64 (+.f64 2 (/.f64 2 z)) t)","(+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 2 (/.f64 2 z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 2 (/.f64 2 z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (*.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 t -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) (pow.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (*.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 t -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) (sqrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -2 (neg.f64 (/.f64 2 z))) (pow.f64 (neg.f64 t) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t -1) (+.f64 2 (/.f64 2 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) 1) (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) 1) (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 (+.f64 2 (/.f64 2 z)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 (*.f64 t t))) (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t -1/2) (/.f64 (+.f64 2 (/.f64 2 z)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 t (+.f64 2 (/.f64 2 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 t (+.f64 2 (/.f64 2 z))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 2)) (cbrt.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) (sqrt.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 2 (/.f64 2 z)) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 t (+.f64 2 (/.f64 2 z)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 4 (-.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))) (/.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2) (-.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 2)) (cbrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)) (sqrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -8 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3)) (/.f64 1 (fma.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) (-.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 4 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2)) (/.f64 1 (-.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) (-.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 4) (+.f64 -8 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) (-.f64 4 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -8 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3)) (fma.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) (-.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -8 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3)) (+.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2) (-.f64 4 (*.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 4 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2)) (-.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -8 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3))) (neg.f64 (fma.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) (-.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 4 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2))) (neg.f64 (-.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2) 4) (-.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) (-.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 4) (+.f64 -8 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) (-.f64 4 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))) 2)) (cbrt.f64 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))) (sqrt.f64 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 1 -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (*.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 t -1)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) (pow.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (*.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 t -1)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) (sqrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -2 (neg.f64 (/.f64 2 z))) (pow.f64 (neg.f64 t) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 t -1) (+.f64 2 (/.f64 2 z)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) 1) (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) t) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) 1) (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) t) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 (+.f64 2 (/.f64 2 z)) (cbrt.f64 t)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 (*.f64 t t))) (/.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 t -1/2) (/.f64 (+.f64 2 (/.f64 2 z)) (sqrt.f64 t)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (sqrt.f64 t)) -2)))))"]],"rules":[["egg-rr",56],["egg-rr",46]],"stop":[["node limit",1]],"time":49.617919921875,"type":"rewrite"},{"count":[[150,113]],"egraph":[[12,3494,492,0.04274733299999999],[11,3494,492,0.036192041999999994],[10,3454,492,0.030536750999999997],[9,2553,492,0.024780458999999998],[8,1529,492,0.016736667],[7,832,492,0.008811042],[6,461,492,0.004610292],[5,262,492,0.0023322919999999997],[4,135,492,0.001359375],[3,95,612,0.0008588749999999999],[2,72,612,0.00056],[1,44,612,0.00031991699999999997],[0,22,612,0.0001355]],"inputs":[["(/.f64 2 (*.f64 t z))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(/.f64 2 t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(/.f64 2 t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 2 (*.f64 t z))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)"]],"method":["egg-herbie"],"outputs":[["(/.f64 2 (*.f64 t z))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 2 t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 2 t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t)))","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 2 (*.f64 t z))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(+.f64 (/.f64 2 t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(+.f64 (/.f64 2 t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(+.f64 (/.f64 2 (*.f64 t z)) (/.f64 2 t))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)"]],"stop":[["saturated",1]],"time":68.046142578125,"type":"simplify"},{"compiler":[[2271,1590]],"time":26.10400390625,"type":"eval"},{"alts":[["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","fresh",8.34375],["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))","next",0.078125],["(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))","done",0.078125],["(+.f64 (/.f64 x y) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2))","fresh",15.957128395736923]],"compiler":[[21,15],[18,14],[17,13],[31,24],[21,15],[18,14],[31,24]],"count":[[115,4]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[113,2],"picked":[1,1]}],"min-error":[0],"time":26.95703125,"type":"prune"},{"compiler":[[49,33]],"locations":[["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)",0.09375,true]],"time":11.89599609375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)","t","-inf",0.421142578125],["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)","t","inf",0.283935546875],["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)","t","0",0.286865234375],["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)","z","-inf",0.251220703125],["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)","z","inf",0.220947265625],["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)","z","0",0.3740234375]],"time":1.948974609375,"type":"series"},{"count":[[1,40]],"egraph":[[2,2616,13,0.024194124999999997],[1,218,13,0.003687167],[0,10,14,0.000336167]],"inputs":[["(fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))) (cbrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2)) (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))) (sqrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 2) 3) (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 3) -8) (+.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2) (-.f64 4 (*.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) 2) 4) (-.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 2)) (cbrt.f64 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))) (sqrt.f64 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t))) 1) 1))))))"]],"rules":[["egg-rr",40]],"stop":[["node limit",1]],"time":43.281982421875,"type":"rewrite"},{"count":[[64,49]],"egraph":[[12,3497,267,0.042724959],[11,3497,267,0.036156292],[10,3457,267,0.030520916999999998],[9,2553,267,0.024748917],[8,1528,267,0.016652792],[7,832,267,0.008688084],[6,461,267,0.004503626],[5,262,267,0.0022174589999999997],[4,135,267,0.001256917],[3,95,321,0.000772042],[2,72,321,0.000496917],[1,44,321,0.00028116700000000003],[0,21,321,0.000117292]],"inputs":[["(/.f64 2 (*.f64 t z))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)"]],"method":["egg-herbie"],"outputs":[["(/.f64 2 (*.f64 t z))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(+.f64 (/.f64 2 t) -2)","(-.f64 -2 (/.f64 -2 t))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (*.f64 2 (/.f64 1 t)) 2)","(+.f64 (/.f64 2 t) -2)","(-.f64 -2 (/.f64 -2 t))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(/.f64 (+.f64 2 (*.f64 2 (/.f64 1 z))) t)","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(/.f64 (-.f64 2 (/.f64 -2 z)) t)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(+.f64 (/.f64 2 t) (+.f64 (/.f64 2 (*.f64 t z)) -2))","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(+.f64 (/.f64 (-.f64 2 (/.f64 -2 z)) t) -2)"]],"stop":[["saturated",1]],"time":61.02490234375,"type":"simplify"},{"compiler":[[951,675]],"time":11.1259765625,"type":"eval"},{"alts":[["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","next",8.34375],["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))","done",0.078125],["(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))","done",0.078125],["(+.f64 (/.f64 x y) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2))","fresh",15.957128395736923]],"compiler":[[21,15],[18,14],[17,13],[31,24],[21,15],[31,24]],"count":[[53,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[49,0],"picked":[1,1]}],"min-error":[0],"time":9.548095703125,"type":"prune"},{"compiler":[[68,41]],"locations":[["(*.f64 (*.f64 z 2) (-.f64 1 t))",0.015625,true],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))",8.301937550948477,true]],"time":14.47705078125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 z 2) (-.f64 1 t))","t","-inf",0.155029296875],["(*.f64 (*.f64 z 2) (-.f64 1 t))","t","inf",0.18115234375],["(*.f64 (*.f64 z 2) (-.f64 1 t))","t","0",0.1591796875],["(*.f64 (*.f64 z 2) (-.f64 1 t))","z","-inf",0.216064453125],["(*.f64 (*.f64 z 2) (-.f64 1 t))","z","inf",0.2490234375],["(*.f64 (*.f64 z 2) (-.f64 1 t))","z","0",0.31103515625],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))","t","-inf",0.60107421875],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))","t","inf",0.531982421875],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))","t","0",0.463134765625],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))","z","-inf",1.226806640625],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))","z","inf",0.56005859375],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))","z","0",0.5419921875]],"time":5.3740234375,"type":"series"},{"count":[[2,91]],"egraph":[[2,3389,27,0.027318834],[1,243,27,0.004426126],[0,11,29,0.000315459]],"inputs":[["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))","(*.f64 (*.f64 z 2) (-.f64 1 t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (/.f64 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))) 2) (cbrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) 2) (*.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (/.f64 1 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))) (sqrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (*.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (/.f64 1 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (/.f64 1 (*.f64 z (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 z t)) (fma.f64 2 (*.f64 z (-.f64 1 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) t) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) 2) z) (/.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) z) (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) t) (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) 2) 1) (/.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) 1) (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) 2) t) (/.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z t)) -2) (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (cbrt.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) 2) (pow.f64 (cbrt.f64 (*.f64 z t)) 2)) (cbrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (pow.f64 (cbrt.f64 (*.f64 z t)) 2)) (/.f64 (sqrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (cbrt.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z t) -1/2) (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (sqrt.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) 2) (sqrt.f64 (*.f64 z t))) (/.f64 (cbrt.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2)) (sqrt.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) t)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) 3) (pow.f64 (*.f64 z t) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) t)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) 3) (pow.f64 (*.f64 z t) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 2 (*.f64 z (-.f64 1 t)) 2) (*.f64 z t))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 z z) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 z z) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 2 (*.f64 z (-.f64 1 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (-.f64 1 t)) 2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (-.f64 1 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (-.f64 1 t)) 2))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (-.f64 1 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 z (-.f64 1 t))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 t 3)) (+.f64 z z)) (+.f64 1 (fma.f64 t t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 t t)) (+.f64 z z)) (+.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 z z) (-.f64 1 (pow.f64 t 3))) (+.f64 1 (fma.f64 t t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 z z) (-.f64 1 (*.f64 t t))) (+.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 z (-.f64 1 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (*.f64 z (-.f64 1 t))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (*.f64 z (-.f64 1 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 2 (*.f64 z (-.f64 1 t)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (*.f64 z (-.f64 1 t))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 2 (*.f64 z (-.f64 1 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 z) (-.f64 1 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 2 (*.f64 z (-.f64 1 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2 (*.f64 z (-.f64 1 t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (*.f64 z (-.f64 1 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (*.f64 z (-.f64 1 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (*.f64 z (-.f64 1 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 2 (*.f64 z (-.f64 1 t)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 z (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 z (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 2 (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 2 (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z z) 1 (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z z) 1 (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z z) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z z) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) 2) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) 2) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z z)) (pow.f64 (cbrt.f64 (+.f64 z z)) 2) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z z)) (pow.f64 (cbrt.f64 (+.f64 z z)) 2) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 z z)) 2) (cbrt.f64 (+.f64 z z)) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 z z)) 2) (cbrt.f64 (+.f64 z z)) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) 2) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) 2) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z z)) (sqrt.f64 (+.f64 z z)) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z z)) (sqrt.f64 (+.f64 z z)) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (*.f64 (+.f64 z z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 z)) (sqrt.f64 z) (*.f64 (neg.f64 t) (+.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 z)) (sqrt.f64 z) (*.f64 (+.f64 z z) (neg.f64 t)))))))"]],"rules":[["egg-rr",45],["egg-rr",46]],"stop":[["node limit",1]],"time":51.157958984375,"type":"rewrite"},{"count":[[139,107]],"egraph":[[8,7009,453,0.043908915],[7,4872,453,0.032560457],[6,2347,453,0.020365749000000002],[5,1066,454,0.009480624],[4,499,472,0.003998124],[3,247,508,0.001820124],[2,149,508,0.000962666],[1,67,574,0.000471499],[0,28,610,0.000173708]],"inputs":[["(/.f64 2 (*.f64 t z))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(*.f64 2 (/.f64 (-.f64 1 t) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(*.f64 2 (/.f64 (-.f64 1 t) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(/.f64 (+.f64 (*.f64 2 z) 2) (*.f64 t z))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (/.f64 2 t)) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (/.f64 2 t)) 2)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (/.f64 2 t)) 2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 z)","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 -2 (*.f64 t z))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 -2 (*.f64 t z))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 2 (*.f64 t z))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(*.f64 2 (/.f64 (-.f64 1 t) t))","(*.f64 2 (+.f64 (/.f64 1 t) -1))","(+.f64 (/.f64 2 t) -2)","(-.f64 -2 (/.f64 -2 t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(*.f64 2 (/.f64 (-.f64 1 t) t))","(*.f64 2 (+.f64 (/.f64 1 t) -1))","(+.f64 (/.f64 2 t) -2)","(-.f64 -2 (/.f64 -2 t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(/.f64 (+.f64 (*.f64 2 z) 2) (*.f64 t z))","(/.f64 (fma.f64 2 z 2) (*.f64 t z))","(/.f64 (+.f64 2 (/.f64 2 z)) t)","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (/.f64 2 t)) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (/.f64 2 t)) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 t z))) (/.f64 2 t)) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","-2","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(-.f64 (+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 1 t))) 2)","(+.f64 (/.f64 2 (*.f64 t z)) (*.f64 2 (/.f64 (-.f64 1 t) t)))","(fma.f64 2 (+.f64 (/.f64 1 t) -1) (/.f64 2 (*.f64 t z)))","(+.f64 (/.f64 2 (*.f64 t z)) (+.f64 (/.f64 2 t) -2))","(fma.f64 (/.f64 1 t) (+.f64 2 (/.f64 2 z)) -2)","(+.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t) -2)","(-.f64 -2 (/.f64 (+.f64 -2 (/.f64 -2 z)) t))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 (*.f64 (-.f64 1 t) z))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 2 z)","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 -2 (*.f64 t z))","(*.f64 (*.f64 t z) -2)","(*.f64 t (*.f64 z -2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(*.f64 -2 (*.f64 t z))","(*.f64 (*.f64 t z) -2)","(*.f64 t (*.f64 z -2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))","(+.f64 (*.f64 2 z) (*.f64 -2 (*.f64 t z)))","(*.f64 2 (*.f64 z (-.f64 1 t)))","(*.f64 z (fma.f64 t -2 2))"]],"stop":[["node limit",1]],"time":65.27099609375,"type":"simplify"},{"compiler":[[2317,1207]],"time":21.39404296875,"type":"eval"},{"alts":[["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","done",8.34375],["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))","done",0.078125],["(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))","done",0.078125],["(+.f64 (/.f64 x y) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2))","next",15.957128395736923]],"compiler":[[21,15],[18,14],[17,13],[31,24],[31,24]],"count":[[111,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[107,0],"picked":[1,1]}],"min-error":[0],"time":24.22900390625,"type":"prune"},{"compiler":[[120,79]],"locations":[["(/.f64 (+.f64 2 (/.f64 2 z)) t)",0.171875,false],["(pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)",0.24447250976844204,true],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))",0.35775375976844204,true],["(cbrt.f64 (*.f64 t t))",31.50169994486357,true]],"time":28.58203125,"type":"localize"},{"count":[[3,16]],"series":[["(pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)","z","-inf",1.968017578125],["(pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)","z","inf",1.208984375],["(pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)","z","0",0.343994140625],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))","t","-inf",0.254150390625],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))","t","inf",0.287841796875],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))","t","0",0.344970703125],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))","z","-inf",1.004150390625],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))","z","inf",1.427978515625],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))","z","0",0.448974609375],["(cbrt.f64 (*.f64 t t))","t","-inf",0.317138671875],["(cbrt.f64 (*.f64 t t))","t","inf",0.344970703125],["(cbrt.f64 (*.f64 t t))","t","0",0.488037109375]],"time":8.658935546875,"type":"series"},{"count":[[3,113]],"egraph":[[2,3006,35,0.027495666000000002],[1,241,35,0.004436707999999999],[0,11,38,0.000314833]],"inputs":[["(cbrt.f64 (*.f64 t t))","(/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t)))","(pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 t) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) (cbrt.f64 (*.f64 t (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t (cbrt.f64 t))) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 t 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 t t) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 t) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 t 3) 2/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 t 4) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 t 6) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 t (cbrt.f64 t)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 t) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 t) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 2/3 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (*.f64 2 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 t))) 2)) (cbrt.f64 (*.f64 2/3 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 2/3 (log.f64 t)))) (sqrt.f64 (*.f64 2/3 (log.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 t (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 t)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 t) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 t) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 t) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 t)) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 t)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 t)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (*.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 (cbrt.f64 t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))) 2) (cbrt.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 4)) (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 4) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 2) (pow.f64 (cbrt.f64 t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)) (/.f64 1 (neg.f64 (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 1) (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 (cbrt.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 4) 1) (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 2) (pow.f64 (cbrt.f64 t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 4) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 2) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 (*.f64 t (cbrt.f64 t)))) (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 t (cbrt.f64 t)))) (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 4) (cbrt.f64 (*.f64 t (cbrt.f64 t)))) (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) -2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 2 (/.f64 2 z)) 2) (*.f64 t t)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) -2) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))))) 2)) (cbrt.f64 (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)))))) (sqrt.f64 (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (neg.f64 (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 2 (/.f64 2 z)) 2) (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)) -2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (/.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 t)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) (cbrt.f64 (+.f64 2 (/.f64 2 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 2 (/.f64 2 z))) (pow.f64 (+.f64 2 (/.f64 2 z)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 2 (/.f64 2 z)) 1/6) (sqrt.f64 (+.f64 2 (/.f64 2 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 5) (cbrt.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 2 (/.f64 2 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (+.f64 2 (/.f64 2 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 2 (/.f64 2 z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 2 (/.f64 2 z))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (+.f64 2 (/.f64 2 z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (+.f64 2 (/.f64 2 z))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 2 (/.f64 2 z))) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 2 (/.f64 2 z))) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z)))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 2 (/.f64 2 z)))) 1) 1))))))"]],"rules":[["egg-rr",27],["egg-rr",47],["egg-rr",39]],"stop":[["node limit",1]],"time":53.738037109375,"type":"rewrite"},{"count":[[129,132]],"egraph":[[2,1437,1082,0.013930416999999999],[1,423,1238,0.003005625],[0,141,1329,0.000711125]],"inputs":[["(*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (+.f64 (*.f64 16/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5)) 1/3) (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3))))))) (*.f64 512/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 4) 2))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (+.f64 (*.f64 -512/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) (*.f64 -16/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5)) 1/3) (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3))))))))","(pow.f64 (cbrt.f64 2) 2)","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (*.f64 -16/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2)))) (*.f64 8/27 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (cbrt.f64 2) (pow.f64 z 3)))) (+.f64 (*.f64 -8/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 z 3)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))))))","(pow.f64 (cbrt.f64 2) 2)","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (+.f64 (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 8/27 (pow.f64 1 1/3)) (*.f64 2/3 (/.f64 (-.f64 (*.f64 8/27 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 16/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))) (cbrt.f64 2)))) (pow.f64 z 3)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))","(*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)))","(fma.f64 8/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (/.f64 1 z))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4)))","(fma.f64 8/3 (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) z) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4)))","(fma.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (/.f64 8/3 z))))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))))","(fma.f64 8/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (/.f64 1 z))) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 t 4)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 -64/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (*.f64 z z)))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4))))","(fma.f64 8/3 (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) z) (fma.f64 1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 (cbrt.f64 4) 2)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (cbrt.f64 (/.f64 1 (cbrt.f64 4))))) -64/3)) (*.f64 z z))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4))))","(fma.f64 1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 (cbrt.f64 4) 2)) (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))) -64/3 (/.f64 4 (*.f64 t t))) (*.f64 z z))) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (/.f64 8/3 z)))))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (+.f64 (*.f64 16/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5)) 1/3) (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3))))))) (*.f64 512/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 4) 2))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)))))","(fma.f64 8/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (/.f64 1 z))) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 t 4)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 -64/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (*.f64 z z)))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 t 4)) (/.f64 (fma.f64 16/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18)) (*.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 -64/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))))) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5))))) (*.f64 512/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) (cbrt.f64 (/.f64 1 (pow.f64 t 14)))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3)))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4)))))","(fma.f64 8/3 (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) z) (fma.f64 1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 (cbrt.f64 4) 2)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (cbrt.f64 (/.f64 1 (cbrt.f64 4))))) -64/3)) (*.f64 z z))) (fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 (cbrt.f64 4) 2)) (/.f64 (fma.f64 16/3 (*.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (cbrt.f64 (/.f64 1 (cbrt.f64 4))))) -64/3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5))))) (/.f64 (*.f64 512/27 (cbrt.f64 (/.f64 1 (pow.f64 t 14)))) (pow.f64 (cbrt.f64 4) 2))) (pow.f64 z 3))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4)))))","(fma.f64 8/3 (/.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (/.f64 z (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))))) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4) (*.f64 (cbrt.f64 (pow.f64 t 4)) (+.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))) -64/3 (/.f64 4 (*.f64 t t))) 1/3) (*.f64 (pow.f64 (cbrt.f64 4) 2) (*.f64 z z))) (/.f64 (*.f64 -1/3 (fma.f64 (*.f64 16/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5))))) (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))) -64/3 (/.f64 4 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 t 14))) (/.f64 512/27 (pow.f64 (cbrt.f64 4) 2))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3)))))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))","(*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)))","(fma.f64 8/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (/.f64 1 z))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4)))","(fma.f64 8/3 (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) z) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4)))","(fma.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (/.f64 8/3 z))))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4))))","(fma.f64 8/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (/.f64 1 z))) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 t 4)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 -64/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (*.f64 z z)))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4))))","(fma.f64 8/3 (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) z) (fma.f64 1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 (cbrt.f64 4) 2)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (cbrt.f64 (/.f64 1 (cbrt.f64 4))))) -64/3)) (*.f64 z z))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4))))","(fma.f64 1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 (cbrt.f64 4) 2)) (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))) -64/3 (/.f64 4 (*.f64 t t))) (*.f64 z z))) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (/.f64 8/3 z)))))","(+.f64 (*.f64 8/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 14)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) 1/3) (/.f64 1 z)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 2))))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (cbrt.f64 4)) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 t 4)) 1/3) (/.f64 (+.f64 (*.f64 -512/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) (*.f64 -16/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 8)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5)) 1/3) (-.f64 (*.f64 4 (/.f64 1 (pow.f64 t 2))) (*.f64 64/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 34)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 4)) 1/3)))))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3))))))))","(fma.f64 8/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))) (/.f64 1 z))) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 t 4)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 -64/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (*.f64 z z)))) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4) (*.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 t 4)) (/.f64 (fma.f64 -512/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)) (cbrt.f64 (/.f64 1 (pow.f64 t 14)))) (*.f64 (*.f64 -16/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18))) (*.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 -64/3 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))))) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5)))))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3))))))))","(fma.f64 8/3 (/.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2)))) z) (fma.f64 1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 (cbrt.f64 4) 2)) (/.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (cbrt.f64 (/.f64 1 (cbrt.f64 4))))) -64/3)) (*.f64 z z))) (fma.f64 1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 t 4)) (pow.f64 z 3)) (/.f64 (fma.f64 (*.f64 (+.f64 (/.f64 4 (*.f64 t t)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (cbrt.f64 (/.f64 1 (cbrt.f64 4))))) -64/3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5))))) -16/3 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 t 14))) (pow.f64 (cbrt.f64 4) 2)) -512/27)) (pow.f64 (cbrt.f64 4) 2))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4)))))","(fma.f64 8/3 (/.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 14)) 1/18)) (/.f64 z (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 2))))) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 t t))) (cbrt.f64 4) (*.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 t 4))) (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))) -64/3 (/.f64 4 (*.f64 t t))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (*.f64 z z))) (/.f64 (fma.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 8)) 1/18)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18) (pow.f64 (/.f64 1 (pow.f64 t 34)) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 4)))) -64/3 (/.f64 4 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 4) 5))) -16/3)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 t 14))) (/.f64 -512/27 (pow.f64 (cbrt.f64 4) 2)))) (*.f64 (pow.f64 (cbrt.f64 4) 2) (pow.f64 z 3)))))))","(pow.f64 (cbrt.f64 2) 2)","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 4/3 (*.f64 (/.f64 1 z) (cbrt.f64 (cbrt.f64 2)))))","(fma.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z) (pow.f64 (cbrt.f64 2) 2))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) (fma.f64 4/3 (*.f64 (/.f64 1 z) (cbrt.f64 (cbrt.f64 2))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) -8/9))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/9 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) (fma.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) -8/9 (*.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z)))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z) (*.f64 (/.f64 (cbrt.f64 (/.f64 1/2 (cbrt.f64 2))) (*.f64 z z)) -4/9)))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (*.f64 -16/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2)))) (*.f64 8/27 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)))) (*.f64 (cbrt.f64 2) (pow.f64 z 3)))) (+.f64 (*.f64 -8/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 z 3)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) (fma.f64 -2/3 (/.f64 (fma.f64 -16/9 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)) (/.f64 8/27 (pow.f64 (cbrt.f64 2) 2))) (*.f64 (pow.f64 z 3) (cbrt.f64 2))) (fma.f64 -8/27 (/.f64 1 (pow.f64 z 3)) (fma.f64 4/3 (*.f64 (/.f64 1 z) (cbrt.f64 (cbrt.f64 2))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) -8/9))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (fma.f64 -2/3 (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)) -40/27) (*.f64 (pow.f64 z 3) (cbrt.f64 2))) (/.f64 -8/27 (pow.f64 z 3))) (fma.f64 4/9 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) (fma.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) -8/9 (*.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (fma.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z) (*.f64 (/.f64 (cbrt.f64 (/.f64 1/2 (cbrt.f64 2))) (*.f64 z z)) -4/9)) (+.f64 (/.f64 40/81 (pow.f64 z 3)) (/.f64 -8/27 (pow.f64 z 3)))))","(pow.f64 (cbrt.f64 2) 2)","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (*.f64 4/3 (*.f64 (/.f64 1 z) (cbrt.f64 (cbrt.f64 2)))))","(fma.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z) (pow.f64 (cbrt.f64 2) 2))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) (fma.f64 4/3 (*.f64 (/.f64 1 z) (cbrt.f64 (cbrt.f64 2))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) -8/9))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/9 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) (fma.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) -8/9 (*.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z)))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z) (*.f64 (/.f64 (cbrt.f64 (/.f64 1/2 (cbrt.f64 2))) (*.f64 z z)) -4/9)))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (+.f64 (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 2)) 1/3) (/.f64 1 z))) (+.f64 (*.f64 -8/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4)) 1/3) (/.f64 1 (pow.f64 z 2)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 8/27 (pow.f64 1 1/3)) (*.f64 2/3 (/.f64 (-.f64 (*.f64 8/27 (/.f64 1 (pow.f64 (cbrt.f64 2) 2))) (*.f64 16/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 2) 2))))) (cbrt.f64 2)))) (pow.f64 z 3)))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) (fma.f64 4/3 (*.f64 (/.f64 1 z) (cbrt.f64 (cbrt.f64 2))) (fma.f64 -8/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (/.f64 1 (*.f64 z z))) (neg.f64 (/.f64 (+.f64 8/27 (*.f64 2/3 (/.f64 (fma.f64 -16/9 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)) (/.f64 8/27 (pow.f64 (cbrt.f64 2) 2))) (cbrt.f64 2)))) (pow.f64 z 3)))))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (fma.f64 4/9 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) (-.f64 (fma.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 4))) (*.f64 z z)) -8/9 (*.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z))) (/.f64 (fma.f64 2/3 (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 2) 2)) -40/27) (cbrt.f64 2)) 8/27) (pow.f64 z 3)))))","(+.f64 (pow.f64 (cbrt.f64 2) 2) (+.f64 (fma.f64 4/3 (/.f64 (cbrt.f64 (cbrt.f64 2)) z) (*.f64 (/.f64 (cbrt.f64 (/.f64 1/2 (cbrt.f64 2))) (*.f64 z z)) -4/9)) (/.f64 16/81 (pow.f64 z 3))))"]],"stop":[["node limit",1]],"time":35.02880859375,"type":"simplify"},{"compiler":[[6751,4901]],"time":73.958984375,"type":"eval"},{"alts":[["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))","done",8.34375],["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))","done",0.078125],["(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))","done",0.078125],["(+.f64 (/.f64 x y) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2))","done",15.957128395736923]],"compiler":[[21,15],[18,14],[17,13],[31,24]],"count":[[187,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[183,0],"picked":[1,1]}],"min-error":[0],"time":50.856201171875,"type":"prune"},{"accuracy":[0.078125],"baseline":[0.078125],"branch":[["x",0.078125,1],["y",0.078125,1],["z",0.078125,1],["t",0.078125,1],["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))",0.078125,1],["(/.f64 x y)",0.078125,1],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))",0.078125,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[21,15],[7,5],[17,13],[75,51]],"count":[[4,1]],"inputs":[["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))","(+.f64 (/.f64 x y) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 2 (/.f64 2 z))) 2) (cbrt.f64 (*.f64 t t))) (cbrt.f64 (/.f64 (+.f64 2 (/.f64 2 z)) t)) -2))","(+.f64 (/.f64 x y) (+.f64 -2 (/.f64 (+.f64 2 (/.f64 2 z)) t)))","(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))"]],"link":["."],"name":["Data.HashTable.ST.Basic:computeOverhead from hashtables-1.2.0.2"],"oracle":[24.257909645736923],"outputs":[["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))"]],"time":25.6298828125,"times":[["x",3.317138671875],["y",3.302978515625],["z",4.468994140625],["t",3.297119140625],["(+.f64 (/.f64 x y) (/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z)))",3.276123046875],["(/.f64 x y)",3.090087890625],["(/.f64 (+.f64 2 (*.f64 (*.f64 z 2) (-.f64 1 t))) (*.f64 t z))",3.182861328125]],"type":"regimes"},{"compiler":[[18,14]],"egraph":[[1,16,20,3.5334e-5],[0,14,20,2.1209e-5]],"inputs":[["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 x y) (fma.f64 (+.f64 2 (/.f64 2 z)) (pow.f64 t -1) -2))"]],"stop":[["done",1],["saturated",1]],"time":8.72412109375,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[18,14]],"remove-preprocessing":[[]],"time":10.81201171875,"type":"end"}]
[{"compiler":[[17,11]],"method":["search"],"sampling":[[12,0.29058954069728316,0.5246213855541555,0.18478907374856135],[11,0.22233025261402872,0.6250600523052299,0.1526096950807414],[10,0.15212069915696702,0.7215981883086897,0.12628111253434326],[9,0.10141379943797801,0.803509334008595,0.09507686655342695],[8,0.062408491961832624,0.8815199489608858,0.05607155907728156],[7,0.0,0.9517295024179475,0.048270497582052485],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":124.111083984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",72.71826171875,1529],["body",4096,"valid",83.715576171875,394],["body",512,"valid",32.170654296875,363],["body",1024,"valid",91.630859375,720],["body",2048,"valid",200.6806640625,1186],["body",256,"valid",279.953857421875,5593]],"time":771.177001953125,"type":"sample"},{"compiler":[[16,10]],"egraph":[[0,3,3,2.5e-6],[13,7351,72,0.079962916],[12,7287,72,0.071095249],[11,7214,72,0.062070707],[10,6893,72,0.053085582000000006],[9,5484,72,0.04306420700000001],[8,4032,72,0.030585207000000003],[7,1774,72,0.018016165],[6,1059,72,0.009597957],[5,620,72,0.004958707],[4,365,72,0.0025464570000000002],[3,222,72,0.001394499],[2,112,72,0.000690415],[1,65,72,0.000311832],[0,30,80,0.000113541]],"inputs":[["0","1","2"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b_2 c)))) b_2)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a)))) c)","(/.f64 (+.f64 (neg.f64 c) (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 a b_2)))) a)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))) b_2) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","(/.f64 (+.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b_2 c)))) b_2)","(/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b_2 c))) a) b_2)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 (neg.f64 c) (*.f64 a a))) a) b_2)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a)))) c)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) c)","(/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))) b_2) c)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) c)","(/.f64 (+.f64 (neg.f64 c) (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 a b_2)))) a)","(/.f64 (+.f64 (neg.f64 c) (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 b_2 a)))) a)","(/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 b_2 a))) c) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 (neg.f64 a) (*.f64 c c))) c) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 c c (*.f64 b_2 (neg.f64 a)))) c) a)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":104.932861328125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[20,4706,18,0.079463335],[19,4694,18,0.072511335],[18,4664,18,0.06550296],[17,4628,18,0.058528418],[16,4612,18,0.051838126],[15,4586,18,0.045617793],[14,4578,18,0.041468834999999996],[13,4570,18,0.037394334999999994],[12,4096,18,0.033354709999999996],[11,3220,18,0.027942585],[10,2010,18,0.020254084999999998],[9,1476,18,0.012925751],[8,957,18,0.009327501],[7,586,18,0.005692084],[6,370,18,0.003413376],[5,218,18,0.001880667],[4,123,18,0.001010417],[3,77,18,0.000547042],[2,42,18,0.00029945799999999995],[1,23,18,0.0001445],[0,11,20,5.6833e-5]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))) b_2) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)"]],"stop":[["saturated",1]],"time":91.949951171875,"type":"simplify"},{"compiler":[[28,16]],"time":0.418212890625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","next",31.753826749134422]],"compiler":[[15,9],[15,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[31.753826749134422],"time":0.907958984375,"type":"prune"},{"compiler":[[49,9]],"locations":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)",0.10546875,true],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))",0.7499917428166807,true],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)",0.7810423254223576,true],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))",21.90404124836004,true]],"time":7.593017578125,"type":"localize"},{"count":[[4,84]],"series":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","a","-inf",0.467041015625],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","a","inf",0.704833984375],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","a","0",0.325927734375],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","c","-inf",0.379150390625],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","c","inf",0.474853515625],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","c","0",0.3779296875],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","b_2","-inf",0.31298828125],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","b_2","inf",0.39599609375],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","b_2","0",0.93310546875],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","a","-inf",0.18505859375],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","a","inf",0.285888671875],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","a","0",0.47412109375],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","c","-inf",0.18505859375],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","c","inf",0.267822265625],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","c","0",0.3310546875],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","b_2","-inf",0.31201171875],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","b_2","inf",0.293212890625],["(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","b_2","0",0.33203125],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","a","-inf",0.348876953125],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","a","inf",0.887939453125],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","a","0",0.363037109375],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","c","-inf",0.360107421875],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","c","inf",0.442138671875],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","c","0",0.385986328125],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","b_2","-inf",0.212890625],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","b_2","inf",0.43701171875],["(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","b_2","0",0.27392578125],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","a","-inf",0.408935546875],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","a","inf",0.72705078125],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","a","0",0.326904296875],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","c","-inf",0.465087890625],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","c","inf",0.677978515625],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","c","0",0.317138671875],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","b_2","-inf",0.47900390625],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","b_2","inf",0.494140625],["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","b_2","0",0.970947265625]],"time":16.1240234375,"type":"series"},{"count":[[4,424]],"egraph":[[2,3260,44,0.025779249],[1,222,44,0.004229706999999999],[0,10,55,0.000242416]],"inputs":[["(sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))","(-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2)","(fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))) (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 c a)) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (fma.f64 -1 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a))) (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3)) (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2)) (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3))) (neg.f64 (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2))) (neg.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 (neg.f64 b_2) 3)) (+.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (-.f64 (pow.f64 (neg.f64 b_2) 2) (*.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (neg.f64 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (pow.f64 (neg.f64 b_2) 2)) (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (neg.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a))) (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (exp.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (exp.f64 (neg.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (/.f64 1 (exp.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (/.f64 1 (exp.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 b_2)) (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 b_2)) (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 b_2)) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 b_2)) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 1 (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 1 (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 1 (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 1 (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 1 (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (cbrt.f64 b_2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (neg.f64 (sqrt.f64 b_2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a)))) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a)))) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (fma.f64 b_2 b_2 (*.f64 c a)))) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 b_2)) 2) (cbrt.f64 (neg.f64 b_2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 b_2)) (sqrt.f64 (neg.f64 b_2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 b_2)) (sqrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1/2) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1/2) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (cbrt.f64 (*.f64 b_2 b_2)) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c a) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (fma.f64 a c (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (fma.f64 (neg.f64 c) a (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (fma.f64 -1 (*.f64 c a) (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (fma.f64 (*.f64 c a) 1 (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 c a)) 2)) (cbrt.f64 (*.f64 c a)) (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 c a))) (pow.f64 (cbrt.f64 (*.f64 c a)) 2) (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 c a)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 c a))) (sqrt.f64 (*.f64 c a)) (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b_2 b_2) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 b_2 b_2 (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 b_2 b_2) 1) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 c) a)) (pow.f64 (cbrt.f64 c) 2) (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 c) a)) (pow.f64 (cbrt.f64 c) 2) (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 c) a)) (pow.f64 (cbrt.f64 c) 2) (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 c) a)) (pow.f64 (cbrt.f64 c) 2) (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 c) a)) (pow.f64 (cbrt.f64 c) 2) (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 c) a)) (pow.f64 (cbrt.f64 c) 2) (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 c) a)) (pow.f64 (cbrt.f64 c) 2) (*.f64 (*.f64 (cbrt.f64 c) a) (pow.f64 (cbrt.f64 c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 c) a)) (sqrt.f64 c) (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 c) a)) (sqrt.f64 c) (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 c) a)) (sqrt.f64 c) (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 c) a)) (sqrt.f64 c) (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 c) a)) (sqrt.f64 c) (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 c) a)) (sqrt.f64 c) (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 c) a)) (sqrt.f64 c) (*.f64 (*.f64 (sqrt.f64 c) a) (sqrt.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 c a) -1))) (fma.f64 (*.f64 c a) -1 (*.f64 (*.f64 c a) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (*.f64 c a) -1))) (fma.f64 (*.f64 c a) -1 (*.f64 (*.f64 c a) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 c a) -1))) (fma.f64 (*.f64 c a) -1 (*.f64 (*.f64 c a) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (*.f64 c a) -1))) (fma.f64 (*.f64 c a) -1 (*.f64 (*.f64 c a) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (*.f64 c a) -1))) (fma.f64 (*.f64 c a) -1 (*.f64 (*.f64 c a) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (*.f64 c a) -1))) (fma.f64 (*.f64 c a) -1 (*.f64 (*.f64 c a) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (*.f64 c a) -1))) (fma.f64 (*.f64 c a) -1 (*.f64 (*.f64 c a) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 a (neg.f64 c)))) (fma.f64 a (neg.f64 c) (*.f64 a (neg.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 a (neg.f64 c)))) (fma.f64 a (neg.f64 c) (*.f64 a (neg.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 a (neg.f64 c)))) (fma.f64 a (neg.f64 c) (*.f64 a (neg.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 a (neg.f64 c)))) (fma.f64 a (neg.f64 c) (*.f64 a (neg.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 a (neg.f64 c)))) (fma.f64 a (neg.f64 c) (*.f64 a (neg.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 a (neg.f64 c)))) (fma.f64 a (neg.f64 c) (*.f64 a (neg.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 a (neg.f64 c)))) (fma.f64 a (neg.f64 c) (*.f64 a (neg.f64 c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (cbrt.f64 a)) (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (cbrt.f64 a)) (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (cbrt.f64 a)) (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (cbrt.f64 a)) (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (cbrt.f64 a)) (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (cbrt.f64 a)) (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (cbrt.f64 a)) (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (*.f64 (cbrt.f64 a) (*.f64 c (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a))))) (fma.f64 (neg.f64 (sqrt.f64 a)) (*.f64 c (sqrt.f64 a)) (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a))))) (fma.f64 (neg.f64 (sqrt.f64 a)) (*.f64 c (sqrt.f64 a)) (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a))))) (fma.f64 (neg.f64 (sqrt.f64 a)) (*.f64 c (sqrt.f64 a)) (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a))))) (fma.f64 (neg.f64 (sqrt.f64 a)) (*.f64 c (sqrt.f64 a)) (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a))))) (fma.f64 (neg.f64 (sqrt.f64 a)) (*.f64 c (sqrt.f64 a)) (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a))))) (fma.f64 (neg.f64 (sqrt.f64 a)) (*.f64 c (sqrt.f64 a)) (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a))))) (fma.f64 (neg.f64 (sqrt.f64 a)) (*.f64 c (sqrt.f64 a)) (*.f64 (sqrt.f64 a) (*.f64 c (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 a (*.f64 c -1)))) (fma.f64 a (*.f64 c -1) (*.f64 a (*.f64 c -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 a (*.f64 c -1)))) (fma.f64 a (*.f64 c -1) (*.f64 a (*.f64 c -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 a (*.f64 c -1)))) (fma.f64 a (*.f64 c -1) (*.f64 a (*.f64 c -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 a (*.f64 c -1)))) (fma.f64 a (*.f64 c -1) (*.f64 a (*.f64 c -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 a (*.f64 c -1)))) (fma.f64 a (*.f64 c -1) (*.f64 a (*.f64 c -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 a (*.f64 c -1)))) (fma.f64 a (*.f64 c -1) (*.f64 a (*.f64 c -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 a (*.f64 c -1)))) (fma.f64 a (*.f64 c -1) (*.f64 a (*.f64 c -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c))))) (fma.f64 (neg.f64 (sqrt.f64 c)) (*.f64 a (sqrt.f64 c)) (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c))))) (fma.f64 (neg.f64 (sqrt.f64 c)) (*.f64 a (sqrt.f64 c)) (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c))))) (fma.f64 (neg.f64 (sqrt.f64 c)) (*.f64 a (sqrt.f64 c)) (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c))))) (fma.f64 (neg.f64 (sqrt.f64 c)) (*.f64 a (sqrt.f64 c)) (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 b_2 b_2)) 2) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c))))) (fma.f64 (neg.f64 (sqrt.f64 c)) (*.f64 a (sqrt.f64 c)) (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c))))) (fma.f64 (neg.f64 (sqrt.f64 c)) (*.f64 a (sqrt.f64 c)) (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c))))) (fma.f64 (neg.f64 (sqrt.f64 c)) (*.f64 a (sqrt.f64 c)) (*.f64 (sqrt.f64 c) (*.f64 a (sqrt.f64 c)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 c a)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 c a))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 b_2 b_2) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 b_2 b_2 (*.f64 c a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 b_2 b_2 (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (*.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 2) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a)))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 b_2 b_2) 3) (pow.f64 (*.f64 c a) 3)) (+.f64 (pow.f64 (*.f64 b_2 b_2) 2) (-.f64 (pow.f64 (*.f64 c a) 2) (*.f64 (*.f64 b_2 b_2) (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 b_2 b_2) 2) (pow.f64 (*.f64 c a) 2)) (fma.f64 b_2 b_2 (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 b_2 b_2 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (pow.f64 (exp.f64 a) c)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 a) c) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 c a))) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 b_2 b_2 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 b_2 a))) (sqrt.f64 (/.f64 b_2 a)) (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (sqrt.f64 a))) (/.f64 (sqrt.f64 b_2) (sqrt.f64 a)) (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 1 a) b_2))) (fma.f64 (neg.f64 (/.f64 1 a)) b_2 (*.f64 (/.f64 1 a) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 a) 1))) (fma.f64 (neg.f64 (/.f64 b_2 a)) 1 (*.f64 (/.f64 b_2 a) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 b_2 a))) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2) (*.f64 (cbrt.f64 (/.f64 b_2 a)) (pow.f64 (cbrt.f64 (/.f64 b_2 a)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 b_2 (cbrt.f64 a))) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 b_2 (cbrt.f64 a)) (/.f64 1 (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 b_2 (sqrt.f64 a))) (/.f64 1 (sqrt.f64 a)) (*.f64 (/.f64 b_2 (sqrt.f64 a)) (/.f64 1 (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1) (*.f64 (/.f64 (cbrt.f64 b_2) a) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) a)) (/.f64 (sqrt.f64 b_2) 1) (*.f64 (/.f64 (sqrt.f64 b_2) a) (/.f64 (sqrt.f64 b_2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (cbrt.f64 b_2) (cbrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a))) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)) (*.f64 (/.f64 (sqrt.f64 b_2) (cbrt.f64 a)) (/.f64 (sqrt.f64 b_2) (pow.f64 (cbrt.f64 a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a))) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)) (*.f64 (/.f64 (cbrt.f64 b_2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 b_2 b_2)) (sqrt.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (/.f64 b_2 a))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (*.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)) 2) (cbrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (*.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)) (sqrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) 1) (/.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 1) (/.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (sqrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 a (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 3) (pow.f64 a 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 a (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (exp.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) 3) (pow.f64 a 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2) a)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (/.f64 1 a) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) 2) (cbrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (sqrt.f64 (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) a)) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) 1) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) a) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) 1) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) a) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (cbrt.f64 a)) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 a)) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (cbrt.f64 a)) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 a)) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 c a))) (sqrt.f64 a)) (/.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (sqrt.f64 a)) (neg.f64 (/.f64 b_2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 c a)) 1/4) (sqrt.f64 a)) (neg.f64 (/.f64 b_2 a)))))))"]],"rules":[["egg-rr",176],["egg-rr",121],["egg-rr",99],["egg-rr",28]],"stop":[["node limit",1]],"time":91.372802734375,"type":"rewrite"},{"count":[[508,483]],"egraph":[[2,1434,1780,0.013239459],[1,402,1866,0.0029617090000000003],[0,124,1934,0.000643709]],"inputs":[["b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -1 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -1/2 (/.f64 (*.f64 c a) b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -2 b_2)","(+.f64 (*.f64 -2 b_2) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -2 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -2 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -1/2 (/.f64 (*.f64 c a) b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 c 4) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6))) (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 a 2) (pow.f64 b_2 3))) 2))) b_2)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -1/2 (/.f64 (*.f64 c a) b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 c 2) (pow.f64 b_2 3))) 2) (*.f64 1/16 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)))) (pow.f64 a 4)) b_2)) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1/2 (/.f64 c b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (*.f64 a (pow.f64 b_2 7)))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))","(*.f64 -2 (/.f64 b_2 a))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))","(*.f64 -1/2 (/.f64 c b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 c 4) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6))) (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 a 2) (pow.f64 b_2 3))) 2))) (*.f64 a b_2))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))","(*.f64 -1/2 (/.f64 c b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 c 2) (pow.f64 b_2 3))) 2) (*.f64 1/16 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)))) (pow.f64 a 3)) b_2)) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))"]],"method":["egg-herbie"],"outputs":[["b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)))","(*.f64 -1 b_2)","(neg.f64 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1 b_2 (*.f64 (/.f64 (*.f64 c a) b_2) 1/2))","(-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2)","(-.f64 (*.f64 (/.f64 c b_2) (*.f64 a 1/2)) b_2)","(+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1 b_2 (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 (*.f64 c a) b_2) 1/2)))","(-.f64 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8)) b_2)","(-.f64 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a 1/8)) a)) b_2)","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1 b_2 (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 (*.f64 c a) b_2) 1/2))))","(fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (-.f64 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8)) b_2))","(-.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) 1/16 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a 1/8)) a))) b_2)","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)))","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)))","(*.f64 -1/2 (/.f64 (*.f64 c a) b_2))","(/.f64 -1/2 (/.f64 b_2 (*.f64 c a)))","(*.f64 (/.f64 c b_2) (*.f64 -1/2 a))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a)))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 c c) (*.f64 a a))) 2)) (pow.f64 b_2 7)) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (pow.f64 b_2 7)) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a))))))","(fma.f64 -1/2 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3))))))","(*.f64 -2 b_2)","(*.f64 b_2 -2)","(+.f64 (*.f64 -2 b_2) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -2 b_2 (*.f64 (/.f64 (*.f64 c a) b_2) 1/2))","(fma.f64 b_2 -2 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2))","(fma.f64 b_2 -2 (*.f64 (/.f64 c b_2) (*.f64 a 1/2)))","(+.f64 (*.f64 -2 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -2 b_2 (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 (*.f64 c a) b_2) 1/2)))","(fma.f64 b_2 -2 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8)))","(fma.f64 b_2 -2 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a 1/8)) a)))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -2 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -2 b_2 (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 (*.f64 c a) b_2) 1/2))))","(fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (fma.f64 b_2 -2 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8))))","(fma.f64 b_2 -2 (fma.f64 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) 1/16 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a 1/8)) a))))","(*.f64 -1/2 (/.f64 (*.f64 c a) b_2))","(/.f64 -1/2 (/.f64 b_2 (*.f64 c a)))","(*.f64 (/.f64 c b_2) (*.f64 -1/2 a))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a)))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 c 4) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6))) (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 a 2) (pow.f64 b_2 3))) 2))) b_2)) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (/.f64 (pow.f64 c 4) (/.f64 b_2 (fma.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) (pow.f64 (*.f64 -1/8 (/.f64 (*.f64 a a) (pow.f64 b_2 3))) 2)))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 (pow.f64 c 4) b_2) (fma.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 1/64))) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a))))))","(fma.f64 -1/2 (fma.f64 (/.f64 c b_2) a (*.f64 (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 5/64) (/.f64 (pow.f64 c 4) b_2))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)))))","(*.f64 -1/2 (/.f64 (*.f64 c a) b_2))","(/.f64 -1/2 (/.f64 b_2 (*.f64 c a)))","(*.f64 (/.f64 c b_2) (*.f64 -1/2 a))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a)))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 c 2) (pow.f64 b_2 3))) 2) (*.f64 1/16 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)))) (pow.f64 a 4)) b_2)) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (/.f64 (pow.f64 c 4) (/.f64 b_2 (fma.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) (pow.f64 (*.f64 -1/8 (/.f64 (*.f64 a a) (pow.f64 b_2 3))) 2)))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 (pow.f64 c 4) b_2) (fma.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 1/64))) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) (/.f64 -1/2 (/.f64 b_2 (*.f64 c a))))))","(fma.f64 -1/2 (fma.f64 (/.f64 c b_2) a (*.f64 (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 5/64) (/.f64 (pow.f64 c 4) b_2))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)))))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1/2 (/.f64 c b_2))","(/.f64 -1/2 (/.f64 b_2 c))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (/.f64 -1/2 (/.f64 b_2 c)))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (/.f64 -1/2 (/.f64 b_2 c))))","(fma.f64 -1/2 (/.f64 c b_2) (fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (*.f64 a a) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (*.f64 a (pow.f64 b_2 7)))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 c c) (*.f64 a a))) 2)) (*.f64 a (pow.f64 b_2 7))) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (*.f64 a (pow.f64 b_2 7))) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (/.f64 -1/2 (/.f64 b_2 c)))))","(fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (*.f64 a a) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (*.f64 -1/2 (+.f64 (/.f64 c b_2) (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (*.f64 a (pow.f64 b_2 7)))))))","(*.f64 -2 (/.f64 b_2 a))","(/.f64 (*.f64 b_2 -2) a)","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 -2 (/.f64 b_2 a) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a))))","(fma.f64 1/2 (/.f64 c b_2) (fma.f64 -2 (/.f64 b_2 a) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a 1/8))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a)))))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (fma.f64 1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 1/16 (*.f64 (*.f64 a a) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(*.f64 -1/2 (/.f64 c b_2))","(/.f64 -1/2 (/.f64 b_2 c))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (/.f64 -1/2 (/.f64 b_2 c)))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (/.f64 -1/2 (/.f64 b_2 c))))","(fma.f64 -1/2 (/.f64 c b_2) (fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (*.f64 a a) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 c 4) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6))) (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 a 2) (pow.f64 b_2 3))) 2))) (*.f64 a b_2))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/2 (*.f64 (/.f64 (pow.f64 c 4) a) (/.f64 (fma.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) (pow.f64 (*.f64 -1/8 (/.f64 (*.f64 a a) (pow.f64 b_2 3))) 2)) b_2)) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/2 (*.f64 (/.f64 (pow.f64 c 4) a) (/.f64 (fma.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 1/64)) b_2)) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (/.f64 -1/2 (/.f64 b_2 c)))))","(fma.f64 -1/2 (*.f64 (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 5/64) (/.f64 (pow.f64 c 4) (*.f64 b_2 a))) (fma.f64 -1/2 (/.f64 c b_2) (fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (*.f64 a a) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(*.f64 -1/2 (/.f64 c b_2))","(/.f64 -1/2 (/.f64 b_2 c))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (/.f64 -1/2 (/.f64 b_2 c)))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (/.f64 -1/2 (/.f64 b_2 c))))","(fma.f64 -1/2 (/.f64 c b_2) (fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (*.f64 a a) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 -1/8 (/.f64 (pow.f64 c 2) (pow.f64 b_2 3))) 2) (*.f64 1/16 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)))) (pow.f64 a 3)) b_2)) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (/.f64 (*.f64 c c) (pow.f64 b_2 3))) 2) (*.f64 1/16 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)))) (/.f64 b_2 (pow.f64 a 3))) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/2 (/.f64 (fma.f64 1/16 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) (*.f64 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) 1/64)) (/.f64 b_2 (pow.f64 a 3))) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (/.f64 -1/2 (/.f64 b_2 c)))))","(fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (*.f64 a a) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (*.f64 -1/2 (+.f64 (/.f64 c b_2) (*.f64 (pow.f64 a 3) (/.f64 (*.f64 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) 5/64) b_2))))))"]],"stop":[["node limit",1]],"time":49.09716796875,"type":"simplify"},{"compiler":[[14880,4822]],"time":92.617919921875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) b_2) a)","fresh",55.56652125507818],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2) a)","next",31.78802552843975],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","done",31.753826749134422],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2) a)","fresh",31.788982999134422],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","fresh",40.98540868267863],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))) b_2) a)","fresh",47.63222951463372],["(*.f64 -1/2 (/.f64 c b_2))","fresh",39.737038015717175],["(/.f64 (*.f64 b_2 -2) a)","fresh",44.974238715312346],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.13128548888089],["(/.f64 (*.f64 (/.f64 c b_2) (*.f64 -1/2 a)) a)","fresh",42.22937453975803],["(/.f64 (exp.f64 (log.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))) a)","fresh",49.570414252796425]],"compiler":[[15,10],[41,23],[15,9],[41,21],[19,13],[35,14],[8,6],[8,6],[13,9],[12,8],[15,10],[15,10],[41,23],[41,21],[19,13],[35,14],[8,6],[8,6],[13,9],[12,8],[15,10]],"count":[[484,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[483,10],"picked":[1,1]}],"min-error":[4.280116226819703],"time":122.27490234375,"type":"prune"},{"compiler":[[214,100]],"locations":[["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))",0.7499917428166807,true],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)",0.7810423254223576,true],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))",21.90404124836004,true],["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))",54.12124741550112,true]],"time":43.2470703125,"type":"localize"},{"count":[[4,78]],"series":[["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","a","-inf",0.185791015625],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","a","inf",0.154052734375],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","a","0",0.158935546875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","c","-inf",0.7138671875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","c","inf",0.18701171875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","c","0",0.47509765625],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","b_2","-inf",0.15185546875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","b_2","inf",0.156982421875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))","b_2","0",0.576904296875],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","a","-inf",0.385986328125],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","a","inf",0.43310546875],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","a","0",0.466064453125],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","c","-inf",0.738037109375],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","c","inf",0.59912109375],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","c","0",0.614990234375],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","b_2","-inf",0.269775390625],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","b_2","inf",0.454833984375],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","b_2","0",0.362060546875],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","a","-inf",0.489990234375],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","a","inf",1.423095703125],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","a","0",0.338134765625],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","c","-inf",0.484130859375],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","c","inf",0.452880859375],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","c","0",0.45703125],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","b_2","-inf",0.35400390625],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","b_2","inf",0.469970703125],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","b_2","0",1.43212890625],["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))","a","-inf",1.97412109375],["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))","a","inf",0.702880859375],["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))","a","0",3.846923828125],["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))","c","-inf",0.841064453125],["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))","c","inf",0.432861328125],["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))","c","0",0.849853515625]],"time":22.248046875,"type":"series"},{"count":[[4,195]],"egraph":[[2,4749,52,0.034295291],[1,351,56,0.006891],[0,16,161,0.000425875]],"inputs":[["(fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))","(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))))","(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2)","(fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c a) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 c a) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 c a) 0))) (cbrt.f64 (exp.f64 (*.f64 (*.f64 c a) 0))))) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 c a) 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (*.f64 c a) 0)))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (*.f64 c a) 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 c a) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 c a) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (*.f64 c a) 0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 c) (fma.f64 a (cbrt.f64 (*.f64 c c)) (*.f64 a (cbrt.f64 (*.f64 c c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a (cbrt.f64 (*.f64 c c))) (+.f64 (cbrt.f64 c) (cbrt.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 c a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 c a) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 c a) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 c a) 0)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 c a) 0)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 c a) 0)) 2) (cbrt.f64 (*.f64 (*.f64 c a) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (*.f64 c a) 0)) (sqrt.f64 (*.f64 (*.f64 c a) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 0 (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 (*.f64 c a) 3)) (+.f64 (pow.f64 (*.f64 c a) 2) (-.f64 (pow.f64 (*.f64 c a) 2) (pow.f64 (*.f64 c a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 c a) 2) (pow.f64 (*.f64 c a) 2)) (*.f64 (*.f64 c a) 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 c a) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 c a) 0)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (*.f64 c a) 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 c a) 0) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (*.f64 c a) 0) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (*.f64 c a) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (*.f64 c a) 0))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 c a)) (exp.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 c a))) (exp.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 c a)) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 c a))) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 c a))) (exp.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 c a)) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 c a))) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 c a) 0) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 c a) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 c a) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 c a) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 c a) 0)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2) (pow.f64 (*.f64 (*.f64 c a) 0) 3/2)) (hypot.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (*.f64 (*.f64 (*.f64 c a) 0) (-.f64 (*.f64 (*.f64 c a) 0) (fma.f64 c a (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 2) (pow.f64 (*.f64 (*.f64 c a) 0) 2))) (sqrt.f64 (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (*.f64 c a) 0))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (sqrt.f64 (*.f64 (*.f64 c a) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 (*.f64 c a) 0)) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3))) (neg.f64 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (neg.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 (neg.f64 b_2) 3)) (+.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (*.f64 (neg.f64 b_2) (neg.f64 b_2)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 b_2))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (exp.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (exp.f64 (neg.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 1 (exp.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 1 (exp.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 b_2)) (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 b_2)) (exp.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 b_2)) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 b_2)) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1 (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1 (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 1 (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 1 (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) 1 (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 b_2) 2) (neg.f64 (cbrt.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (neg.f64 (sqrt.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 b_2)) (cbrt.f64 (neg.f64 b_2))) (cbrt.f64 (neg.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 b_2)) (sqrt.f64 (neg.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 b_2)) (sqrt.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1/2) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))) 1/2) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b_2) 2)) (cbrt.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 c a) 0 (fma.f64 c a (*.f64 b_2 b_2)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 c a) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b_2 b_2) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 c a (*.f64 b_2 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 b_2 b_2) 1) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (cbrt.f64 (exp.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 b_2 b_2) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 c a (*.f64 b_2 b_2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 b_2 b_2 0) (*.f64 c a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 c a (*.f64 b_2 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) 2) (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 b_2 b_2) 3) (pow.f64 (*.f64 c a) 3)) (fma.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2) (-.f64 (pow.f64 (*.f64 c a) 2) (*.f64 (*.f64 b_2 b_2) (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2) (pow.f64 (*.f64 c a) 2)) (fma.f64 c a (*.f64 b_2 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (exp.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 c a)) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 c a))) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) 1))))))"]],"rules":[["egg-rr",33],["egg-rr",95],["egg-rr",30],["egg-rr",37]],"stop":[["node limit",1]],"time":71.361083984375,"type":"rewrite"},{"count":[[273,237]],"egraph":[[3,5362,1033,0.024166084],[2,1033,1080,0.009593376],[1,301,1142,0.002324667],[0,93,1376,0.000550625]],"inputs":[["(*.f64 c a)","(*.f64 c a)","(*.f64 c a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(*.f64 -1 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 -2 b_2)","(+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 a 4) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 c 2) (pow.f64 b_2 3)) (pow.f64 1 1/3))) 2))) b_2)) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 c a)","(*.f64 c a)","(*.f64 c a)","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 (+.f64 c (*.f64 -1 (*.f64 c (pow.f64 1 1/3)))) a)","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","(*.f64 -1 (*.f64 a (+.f64 (*.f64 -1 c) (*.f64 c (pow.f64 1 1/3)))))","(*.f64 a (+.f64 c (*.f64 (neg.f64 c) 1)))","(*.f64 a (-.f64 c c))","(*.f64 a 0)","0","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2)))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2)))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2)))","(*.f64 -1 b_2)","(neg.f64 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))","(-.f64 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2) b_2)","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (neg.f64 b_2))","(-.f64 (*.f64 (/.f64 c b_2) (*.f64 a 1/2)) b_2)","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -1 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1)))","(fma.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8 (-.f64 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2) b_2))","(fma.f64 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (neg.f64 b_2)))","(-.f64 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a)))) b_2)","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -1 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))))","(fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (fma.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8 (-.f64 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2) b_2)))","(fma.f64 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) 1/8 (-.f64 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (pow.f64 b_2 5)) (pow.f64 a 3))) b_2))","(fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (-.f64 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a)))) b_2))","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2)))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2)))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) b_2)))","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))","(*.f64 -1/2 (*.f64 (/.f64 c b_2) a))","(*.f64 -1/2 (*.f64 (/.f64 a b_2) c))","(*.f64 (/.f64 c b_2) (*.f64 a -1/2))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a))))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c))))","(*.f64 a (+.f64 (/.f64 (*.f64 c -1/2) b_2) (*.f64 (*.f64 -1/8 (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) a)))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)))))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 (*.f64 a a) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a)))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 1 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1))) 2)) (pow.f64 b_2 7)) (fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a)))))))","(fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (pow.f64 b_2 7)) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a))))))","(fma.f64 -1/2 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7)) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(+.f64 (*.f64 (*.f64 a a) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a)))) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) -5/128) (pow.f64 b_2 7))))","(*.f64 -2 b_2)","(*.f64 b_2 -2)","(+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -2 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))","(fma.f64 b_2 -2 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2))","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (*.f64 b_2 -2))","(fma.f64 b_2 -2 (*.f64 (/.f64 c b_2) (*.f64 a 1/2)))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -2 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1)))","(fma.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8 (fma.f64 b_2 -2 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2)))","(fma.f64 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (*.f64 b_2 -2)))","(fma.f64 b_2 -2 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -2 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))))","(fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (fma.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)) 1/8 (fma.f64 b_2 -2 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2))))","(fma.f64 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) 1/8 (fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (*.f64 b_2 -2))))","(fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (fma.f64 b_2 -2 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a))))))","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))","(*.f64 -1/2 (*.f64 (/.f64 c b_2) a))","(*.f64 -1/2 (*.f64 (/.f64 a b_2) c))","(*.f64 (/.f64 c b_2) (*.f64 a -1/2))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a))))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c))))","(*.f64 a (+.f64 (/.f64 (*.f64 c -1/2) b_2) (*.f64 (*.f64 -1/8 (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) a)))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a)))))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 (*.f64 a a) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a)))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 a 4) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (/.f64 (pow.f64 c 2) (pow.f64 b_2 3)) (pow.f64 1 1/3))) 2))) b_2)) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 -1/2 (/.f64 (pow.f64 a 4) (/.f64 b_2 (fma.f64 1/16 (*.f64 1 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6))) (pow.f64 (*.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) 1) (pow.f64 b_2 3))) 2)))) (fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a)))))))","(fma.f64 -1/2 (*.f64 (/.f64 (pow.f64 a 4) b_2) (fma.f64 1/16 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) (*.f64 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) 1/64))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) (*.f64 a a))))))","(fma.f64 -1/2 (*.f64 (*.f64 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) 5/64) (/.f64 (pow.f64 a 4) b_2)) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(fma.f64 -1/2 (*.f64 (*.f64 (/.f64 (pow.f64 c 4) (pow.f64 b_2 6)) 5/64) (/.f64 (pow.f64 a 4) b_2)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 (*.f64 a a) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 c (pow.f64 b_2 3)) c)) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a))))))","(*.f64 -1 (*.f64 c a))","(*.f64 (neg.f64 c) a)","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(*.f64 (neg.f64 c) a)","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(*.f64 (neg.f64 c) a)","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(*.f64 (neg.f64 c) a)","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(*.f64 (neg.f64 c) a)","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))"]],"stop":[["node limit",1]],"time":50.505859375,"type":"simplify"},{"compiler":[[7065,3179]],"time":63.1201171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) b_2) a)","fresh",55.56652125507818],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2) a)","done",31.78802552843975],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","done",31.753826749134422],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2) a)","next",31.788982999134422],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","fresh",40.98540868267863],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))) b_2) a)","fresh",47.63222951463372],["(*.f64 -1/2 (/.f64 c b_2))","fresh",39.737038015717175],["(/.f64 (*.f64 b_2 -2) a)","fresh",44.974238715312346],["(/.f64 (*.f64 (/.f64 c b_2) (*.f64 a -1/2)) a)","fresh",42.22937453975803],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.13128548888089],["(/.f64 (exp.f64 (log.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))) a)","fresh",49.570414252796425]],"compiler":[[15,10],[41,23],[15,9],[41,21],[19,13],[35,14],[8,6],[8,6],[12,8],[13,9],[15,10],[15,10],[41,21],[19,13],[35,14],[8,6],[8,6],[12,8],[13,9],[15,10]],"count":[[248,11]],"kept":[{"done":[1,1],"fresh":[9,8],"new":[237,1],"picked":[1,1]}],"min-error":[4.280116226819703],"time":45.7509765625,"type":"prune"},{"compiler":[[214,81]],"locations":[["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))",0.7499917428166807,true],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)",0.7810423254223576,true],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))",21.90404124836004,true],["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))",54.12720702611798,true]],"time":38.154052734375,"type":"localize"},{"count":[[4,79]],"series":[["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","c","-inf",0.1689453125],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","c","inf",0.15283203125],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","c","0",0.1689453125],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","a","-inf",0.531982421875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","a","inf",0.15087890625],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","a","0",0.205078125],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","b_2","-inf",0.15185546875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","b_2","inf",0.155029296875],["(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))","b_2","0",0.23291015625],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","c","-inf",0.40380859375],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","c","inf",0.44482421875],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","c","0",0.44091796875],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","a","-inf",0.949951171875],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","a","inf",1.7841796875],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","a","0",0.30908203125],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","b_2","-inf",0.240966796875],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","b_2","inf",0.769775390625],["(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","b_2","0",0.240966796875],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","c","-inf",0.4619140625],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","c","inf",0.742919921875],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","c","0",0.338134765625],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","a","-inf",0.55810546875],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","a","inf",0.458984375],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","a","0",0.5087890625],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","b_2","-inf",0.264892578125],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","b_2","inf",0.25],["(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","b_2","0",0.516845703125],["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))","c","-inf",0.578125],["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))","c","inf",0.572998046875],["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))","c","0",2.551025390625],["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))","a","-inf",0.906005859375],["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))","a","inf",0.50390625],["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))","a","0",0.80615234375]],"time":18.102783203125,"type":"series"},{"count":[[4,195]],"egraph":[[2,4838,52,0.033305333],[1,355,56,0.006786],[0,16,161,0.000434791]],"inputs":[["(fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))","(sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))))","(-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2)","(fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a c) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 a c) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 a c) 0))) (cbrt.f64 (exp.f64 (*.f64 (*.f64 a c) 0))))) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (*.f64 a c) 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (*.f64 a c) 0)))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (*.f64 a c) 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 a c) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 a c) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (*.f64 a c) 0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 a) c) (fma.f64 -1 (pow.f64 (cbrt.f64 a) 2) (pow.f64 (cbrt.f64 a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 a) 2) (fma.f64 (cbrt.f64 a) c (*.f64 (cbrt.f64 a) c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a c) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a c) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 a c) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 a c) 0)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 a c) 0)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 a c) 0)) 2) (cbrt.f64 (*.f64 (*.f64 a c) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (*.f64 a c) 0)) (sqrt.f64 (*.f64 (*.f64 a c) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 0 (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 a c) 3) (pow.f64 (*.f64 a c) 3)) (+.f64 (pow.f64 (*.f64 a c) 2) (-.f64 (pow.f64 (*.f64 a c) 2) (pow.f64 (*.f64 a c) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 a c) 2) (pow.f64 (*.f64 a c) 2)) (*.f64 (*.f64 a c) 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 a c) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a c) 0)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (*.f64 a c) 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 a c) 0) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (*.f64 a c) 0) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (*.f64 a c) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (*.f64 a c) 0))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 a c)) (exp.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 a c))) (exp.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 a c)) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 a c))) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 a c))) (exp.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 a c)) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 a c))) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 a c) 0) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 a c) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 a c) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 a c) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 a c) 0)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2) (pow.f64 (*.f64 (*.f64 a c) 0) 3/2)) (hypot.f64 (fma.f64 a c (*.f64 b_2 b_2)) (sqrt.f64 (*.f64 (*.f64 (*.f64 a c) 0) (-.f64 (*.f64 (*.f64 a c) 0) (fma.f64 a c (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2) (pow.f64 (*.f64 (*.f64 a c) 0) 2))) (sqrt.f64 (-.f64 (fma.f64 a c (*.f64 b_2 b_2)) (*.f64 (*.f64 a c) 0))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (sqrt.f64 (*.f64 (*.f64 a c) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 (*.f64 a c) 0)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2))) (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2))))) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3))) (neg.f64 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (neg.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 (neg.f64 b_2) 3)) (+.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (-.f64 (*.f64 (neg.f64 b_2) (neg.f64 b_2)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 b_2))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (exp.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (exp.f64 (neg.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (/.f64 1 (exp.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (/.f64 1 (exp.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 b_2)) (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 b_2)) (exp.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 b_2)) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 b_2)) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1 (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1 (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 1 (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 1 (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) 1 (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 b_2) 2) (neg.f64 (cbrt.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (neg.f64 (sqrt.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 3/2) (pow.f64 b_2 3)) (/.f64 1 (fma.f64 b_2 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (/.f64 1 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 b_2)) (cbrt.f64 (neg.f64 b_2))) (cbrt.f64 (neg.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 b_2)) (sqrt.f64 (neg.f64 b_2)) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 b_2)) (sqrt.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1/2) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))) 1/2) (*.f64 (neg.f64 b_2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (fma.f64 (neg.f64 b_2) 1 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (fma.f64 (neg.f64 (cbrt.f64 b_2)) (pow.f64 (cbrt.f64 b_2) 2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2))) 1/4) (sqrt.f64 b_2)) (+.f64 (neg.f64 b_2) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b_2) 2)) (cbrt.f64 b_2) (sqrt.f64 (fma.f64 (*.f64 a c) 0 (fma.f64 a c (*.f64 b_2 b_2)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b_2 b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 a c (*.f64 b_2 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 b_2 b_2) 1) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 a c (*.f64 b_2 b_2)))) (cbrt.f64 (exp.f64 (fma.f64 a c (*.f64 b_2 b_2)))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 a c (*.f64 b_2 b_2))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 a c (*.f64 b_2 b_2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 b_2 b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 a c (*.f64 b_2 b_2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 b_2 b_2 0) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 a c (*.f64 b_2 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) (pow.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) 2) (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 b_2 b_2) 3) (pow.f64 (*.f64 a c) 3)) (fma.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2) (-.f64 (pow.f64 (*.f64 a c) 2) (*.f64 (*.f64 b_2 b_2) (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 b_2 b_2) (*.f64 b_2 b_2) (pow.f64 (*.f64 a c) 2)) (fma.f64 a c (*.f64 b_2 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 a c (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (exp.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 a c)) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 a c))) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 a c (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 a c (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 a c (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 a c (*.f64 b_2 b_2))) 1))))))"]],"rules":[["egg-rr",33],["egg-rr",95],["egg-rr",30],["egg-rr",37]],"stop":[["node limit",1]],"time":68.378173828125,"type":"rewrite"},{"count":[[274,239]],"egraph":[[3,5413,1031,0.022139166000000002],[2,1076,1042,0.009392916],[1,320,1109,0.002370999],[0,96,1344,0.000568083]],"inputs":[["(*.f64 c a)","(*.f64 c a)","(*.f64 c a)","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(*.f64 -1 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 -2 b_2)","(+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","0","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 c 4) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 a 2) (pow.f64 b_2 3)))) 2))) b_2)) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 c a)","(*.f64 c a)","(*.f64 c a)","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 c (+.f64 a (*.f64 -1 (*.f64 (pow.f64 1 1/3) a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","(*.f64 -1 (*.f64 c (+.f64 (*.f64 (pow.f64 1 1/3) a) (*.f64 -1 a))))","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","0","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b_2 3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2)))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) b_2)))","(fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b_2 3))) b_2)))","(*.f64 -1 b_2)","(neg.f64 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))","(-.f64 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2) b_2)","(fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (neg.f64 b_2))","(fma.f64 (*.f64 1/2 (/.f64 c b_2)) a (neg.f64 b_2))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -1 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1)))","(fma.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8 (-.f64 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2) b_2))","(fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (-.f64 (*.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8) b_2))","(-.f64 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a)))) b_2)","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -1 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))))","(fma.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) 1/16 (fma.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8 (-.f64 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2) b_2)))","(fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (-.f64 (*.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8) b_2)))","(-.f64 (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (*.f64 c c) 1/8) (pow.f64 b_2 3)) (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)))) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2))","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b_2 3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) b_2)))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) b_2)))","(fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b_2 3))) b_2)))","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))","(*.f64 -1/2 (*.f64 (/.f64 c b_2) a))","(*.f64 -1/2 (*.f64 a (/.f64 c b_2)))","(*.f64 (/.f64 c b_2) (*.f64 a -1/2))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 c (*.f64 c (/.f64 (*.f64 -1/8 (*.f64 a a)) (pow.f64 b_2 3)))))","(*.f64 a (+.f64 (/.f64 (*.f64 c -1/2) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (pow.f64 b_2 3)) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a)))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 1 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1))) 2)) (pow.f64 b_2 7)) (fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a)))))))","(fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (pow.f64 b_2 7)) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))))","(fma.f64 -1/2 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(+.f64 (*.f64 a (+.f64 (/.f64 (*.f64 c -1/2) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)))) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) -5/128) (pow.f64 b_2 7))))","(*.f64 -2 b_2)","(*.f64 b_2 -2)","(+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -2 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))","(fma.f64 b_2 -2 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2))","(fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 b_2 -2))","(fma.f64 b_2 -2 (*.f64 (*.f64 1/2 (/.f64 c b_2)) a))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -2 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1)))","(fma.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8 (fma.f64 b_2 -2 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2)))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 b_2 -2)))","(fma.f64 b_2 -2 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -2 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (fma.f64 -2 b_2 (*.f64 (*.f64 1/2 (/.f64 c (/.f64 b_2 a))) 1))))","(fma.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) 1/16 (fma.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8 (fma.f64 b_2 -2 (/.f64 (*.f64 (*.f64 c a) 1/2) b_2))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 b_2 -2))))","(fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (fma.f64 b_2 -2 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 c c) 1/8) (/.f64 (pow.f64 b_2 3) a))))))","0","(*.f64 c (+.f64 a (neg.f64 a)))","(*.f64 c 0)","(*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))","(*.f64 -1/2 (*.f64 (/.f64 c b_2) a))","(*.f64 -1/2 (*.f64 a (/.f64 c b_2)))","(*.f64 (/.f64 c b_2) (*.f64 a -1/2))","(+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 c (*.f64 c (/.f64 (*.f64 -1/8 (*.f64 a a)) (pow.f64 b_2 3)))))","(*.f64 a (+.f64 (/.f64 (*.f64 c -1/2) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (*.f64 1 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (pow.f64 b_2 3)) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a)))))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 c 4) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/3) (/.f64 (pow.f64 a 2) (pow.f64 b_2 3)))) 2))) b_2)) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 -1/16 (*.f64 1 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3)))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 c c) (*.f64 (*.f64 a a) 1)) (pow.f64 b_2 3)) (*.f64 -1/2 (+.f64 (/.f64 (pow.f64 c 4) (/.f64 b_2 (+.f64 (*.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6))) (pow.f64 (*.f64 -1/8 (/.f64 (*.f64 a a) (pow.f64 b_2 3))) 2)))) (*.f64 1 (/.f64 c (/.f64 b_2 a)))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/2 (+.f64 (*.f64 (/.f64 c b_2) a) (*.f64 (/.f64 (pow.f64 c 4) b_2) (fma.f64 1/16 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 1/64)))) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))","(fma.f64 -1/2 (fma.f64 (/.f64 (pow.f64 c 4) b_2) (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 5/64) (*.f64 a (/.f64 c b_2))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))))))","(fma.f64 -1/2 (fma.f64 (/.f64 (pow.f64 c 4) b_2) (*.f64 (/.f64 (pow.f64 a 4) (pow.f64 b_2 6)) 5/64) (*.f64 a (/.f64 c b_2))) (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (pow.f64 b_2 3)) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a)))))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 a (neg.f64 c))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))"]],"stop":[["node limit",1]],"time":47.505859375,"type":"simplify"},{"compiler":[[7101,3074]],"time":57.298095703125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) b_2) a)","fresh",55.56652125507818],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2) a)","done",31.78802552843975],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","done",31.753826749134422],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2) a)","done",31.788982999134422],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","fresh",40.98540868267863],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))) b_2) a)","fresh",47.63222951463372],["(/.f64 (*.f64 (/.f64 c b_2) (*.f64 a -1/2)) a)","fresh",42.22937453975803],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.13128548888089],["(/.f64 (*.f64 b_2 -2) a)","fresh",44.974238715312346],["(/.f64 (exp.f64 (log.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))) a)","fresh",49.570414252796425],["(*.f64 -1/2 (/.f64 c b_2))","next",39.737038015717175]],"compiler":[[15,10],[41,23],[15,9],[41,21],[19,13],[35,14],[12,8],[13,9],[8,6],[15,10],[8,6],[15,10],[19,13],[35,14],[12,8],[13,9],[8,6],[15,10],[8,6]],"count":[[250,11]],"kept":[{"done":[2,2],"fresh":[8,7],"new":[239,1],"picked":[1,1]}],"min-error":[4.280116226819703],"time":45.903076171875,"type":"prune"},{"compiler":[[14,7]],"locations":[["(*.f64 -1/2 (/.f64 c b_2))",0.00390625,true]],"time":3.033935546875,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 -1/2 (/.f64 c b_2))","b_2","-inf",0.277099609375],["(*.f64 -1/2 (/.f64 c b_2))","b_2","inf",0.364990234375],["(*.f64 -1/2 (/.f64 c b_2))","b_2","0",0.344970703125],["(*.f64 -1/2 (/.f64 c b_2))","c","-inf",0.337890625],["(*.f64 -1/2 (/.f64 c b_2))","c","inf",0.4951171875],["(*.f64 -1/2 (/.f64 c b_2))","c","0",0.554931640625]],"time":2.43701171875,"type":"series"},{"count":[[1,20]],"egraph":[[2,1610,7,0.016208584],[1,127,7,0.002226084],[0,6,7,0.000191]],"inputs":[["(*.f64 -1/2 (/.f64 c b_2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 -1/2 (/.f64 c b_2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/2 (/.f64 b_2 c))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 b_2 (*.f64 -1/2 c)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 c) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 -1/2 c)) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 c) 1) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 c) (pow.f64 (cbrt.f64 b_2) 2)) (cbrt.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 c) (sqrt.f64 b_2)) (sqrt.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 c) -1/2) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (neg.f64 c)) (neg.f64 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/2 (/.f64 c b_2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/2 (/.f64 c b_2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/2 (/.f64 c b_2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/2 (/.f64 c b_2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (/.f64 c b_2) 2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -1/2) (/.f64 c b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -1/2 (/.f64 c b_2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -1/2 (/.f64 c b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -1/2 (/.f64 c b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -1/2 (/.f64 c b_2))))))))"]],"rules":[["egg-rr",20]],"stop":[["node limit",1]],"time":33.06103515625,"type":"rewrite"},{"count":[[20,20]],"egraph":[[0,0,0,2.0625e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":11.455810546875,"type":"simplify"},{"compiler":[[153,96]],"time":2.39306640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) b_2) a)","fresh",55.56652125507818],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2) a)","done",31.78802552843975],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","done",31.753826749134422],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2) a)","done",31.788982999134422],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","fresh",40.98540868267863],["(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))) b_2) a)","fresh",47.63222951463372],["(/.f64 (*.f64 (/.f64 c b_2) (*.f64 a -1/2)) a)","fresh",42.22937453975803],["(/.f64 (/.f64 (*.f64 -1/2 c) (pow.f64 (cbrt.f64 b_2) 2)) (cbrt.f64 b_2))","fresh",39.9317631138991],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.13128548888089],["(expm1.f64 (log1p.f64 (*.f64 -1/2 (/.f64 c b_2))))","fresh",42.203241534046136],["(/.f64 (*.f64 b_2 -2) a)","fresh",44.974238715312346],["(/.f64 (exp.f64 (log.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))) a)","fresh",49.570414252796425]],"compiler":[[15,10],[41,23],[15,9],[41,21],[19,13],[35,14],[12,8],[14,10],[13,9],[10,8],[8,6],[15,10]],"count":[[31,12]],"kept":[{"done":[3,3],"fresh":[7,7],"new":[20,2],"picked":[1,0]}],"min-error":[4.280116226819703],"time":5.858154296875,"type":"prune"},{"accuracy":[8.195036337590587],"baseline":[31.753826749134422],"branch":[["a",29.78255688772068,3],["b_2",8.195036337590587,3],["c",25.576438754817566,9],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",11.81680719420712,5]],"compiler":[[4,3],[4,3],[4,3],[16,10],[237,118]],"count":[[16,3]],"inputs":[["(/.f64 (/.f64 (*.f64 -1/2 c) (pow.f64 (cbrt.f64 b_2) 2)) (cbrt.f64 b_2))","(expm1.f64 (log1p.f64 (*.f64 -1/2 (/.f64 c b_2))))","(/.f64 (*.f64 b_2 -2) a)","(/.f64 (*.f64 (/.f64 c b_2) (*.f64 a -1/2)) a)","(/.f64 (-.f64 (exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) b_2) a)","(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2))))) (fma.f64 (neg.f64 (cbrt.f64 c)) (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (*.f64 (cbrt.f64 c) (*.f64 a (pow.f64 (cbrt.f64 c) 2)))))) b_2) a)","(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 a) c)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 (cbrt.f64 a) c) (pow.f64 (cbrt.f64 a) 2))))) b_2) a)","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","(/.f64 (-.f64 (sqrt.f64 (+.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 a) c)) (sqrt.f64 a) (*.f64 (*.f64 (sqrt.f64 a) c) (sqrt.f64 a))))) b_2) a)","(*.f64 -1/2 (/.f64 c b_2))","(/.f64 (*.f64 b_2 -2) a)","(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","(/.f64 (*.f64 (/.f64 c b_2) (*.f64 -1/2 a)) a)","(/.f64 (exp.f64 (log.f64 (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"link":["."],"name":["quad2p (problem 3.2.1, positive)"],"oracle":[63.87751235198666],"outputs":[["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a)","(*.f64 -1/2 (/.f64 c b_2))"]],"time":109.012939453125,"times":[["a",22.117919921875],["b_2",16.53515625],["c",48.56005859375],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",17.39697265625]],"type":"regimes"},{"bstep":[[1.5493056354549272e-129,2.2448001115925723e-126,27.37890625],[-7.874177670516464e+119,-3.609614002388178e+118,25.622802734375]],"compiler":[[9,7],[16,10],[9,7],[16,10],[9,7],[16,10],[9,7],[16,10],[9,7],[16,10],[9,7],[16,10],[9,7],[16,10],[9,7],[16,10],[16,10],[14,10],[16,10],[14,10],[16,10],[14,10],[16,10],[14,10],[16,10],[14,10],[16,10],[14,10],[16,10],[14,10],[18,12],[4,3]],"method":["binary-search","binary-search"],"time":53.179931640625,"type":"bsearch"},{"compiler":[[38,23]],"egraph":[[5,60,51,0.000404833],[4,59,51,0.000333167],[3,55,51,0.000260958],[2,47,51,0.0001855],[1,36,51,0.000114667],[0,25,51,5.7e-5]],"inputs":[["(if (<=.f64 b_2 -36500000000000001635297042419649589479570437821017968610343308461613101988289639097229030341194682373255959638926426112) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a))) (if (<=.f64 b_2 1248699420126397/780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544) (/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a) (*.f64 -1/2 (/.f64 c b_2))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 -36500000000000001635297042419649589479570437821017968610343308461613101988289639097229030341194682373255959638926426112) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a))) (if (<=.f64 b_2 1248699420126397/780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544) (/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a)))) b_2) a) (*.f64 -1/2 (/.f64 c b_2))))","(if (<=.f64 b_2 -36500000000000001635297042419649589479570437821017968610343308461613101988289639097229030341194682373255959638926426112) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a))) (if (<=.f64 b_2 1248699420126397/780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544) (/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (neg.f64 (*.f64 c a)))) b_2) a) (*.f64 (/.f64 c b_2) -1/2)))","(if (<=.f64 b_2 -36500000000000001635297042419649589479570437821017968610343308461613101988289639097229030341194682373255959638926426112) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a))) (if (<=.f64 b_2 1248699420126397/780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544) (/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 (neg.f64 c) a))) b_2) a) (*.f64 (/.f64 c b_2) -1/2)))","(if (<=.f64 b_2 -36500000000000001635297042419649589479570437821017968610343308461613101988289639097229030341194682373255959638926426112) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a))) (if (<=.f64 b_2 1248699420126397/780437137578998057845399307448291576437149535666242787714789239906342934704941405030076525765872992789956732780351655723861993919822071326572544) (/.f64 (-.f64 (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 a (neg.f64 c)))) b_2) a) (*.f64 (/.f64 c b_2) -1/2)))"]],"stop":[["fuel",1],["saturated",1]],"time":9.699951171875,"type":"simplify"},{"time":0.026123046875,"type":"soundness"},{"compiler":[[38,23]],"remove-preprocessing":[[]],"time":13.591064453125,"type":"end"}]
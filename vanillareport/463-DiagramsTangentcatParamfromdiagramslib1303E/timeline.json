[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.598876953125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.40966796875,12],["body",512,"valid",14.950927734375,249],["body",1024,"valid",41.152587890625,462],["body",256,"valid",251.462890625,7545]],"time":316.257080078125,"type":"sample"},{"compiler":[[10,8]],"egraph":[[0,1,1,1.208e-6],[14,2355,8,0.031150417],[13,2355,8,0.026984042],[12,2351,8,0.023549917],[11,2242,8,0.020293292],[10,1824,8,0.016780042000000002],[9,1511,8,0.012339709],[8,1369,8,0.009288792],[7,816,8,0.006964292],[6,545,8,0.003978125],[5,361,8,0.002506125],[4,227,8,0.0014354580000000001],[3,101,8,0.0007587920000000001],[2,43,10,0.00035070800000000003],[1,18,13,0.000157583],[0,8,13,5.1e-5]],"inputs":[["0"],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)","(*.f64 3 (*.f64 (-.f64 2 (*.f64 3 x)) x))","(*.f64 3 (*.f64 x (+.f64 2 (*.f64 x -3))))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(*.f64 x (fma.f64 x -9 6))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":54.093994140625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[14,2355,8,0.030837123999999997],[13,2355,8,0.026666831999999998],[12,2351,8,0.023461291],[11,2242,8,0.020147290999999998],[10,1824,8,0.016670499],[9,1511,8,0.012303623999999999],[8,1369,8,0.009260916],[7,816,8,0.006941124999999999],[6,545,8,0.004005875],[5,361,8,0.002495291],[4,227,8,0.001430125],[3,101,8,0.000748625],[2,43,10,0.000345667],[1,18,13,0.000148209],[0,8,13,4.7e-5]],"inputs":[["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)","(*.f64 3 (*.f64 (-.f64 2 (*.f64 3 x)) x))","(*.f64 3 (*.f64 x (+.f64 2 (*.f64 x -3))))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(*.f64 x (fma.f64 x -9 6))"]],"stop":[["saturated",1]],"time":41.881103515625,"type":"simplify"},{"compiler":[[16,12]],"time":1.0048828125,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -9 6))","next",0.234375],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)","fresh",0.29134750976844204]],"compiler":[[7,5],[10,8],[7,5],[10,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.2109375],"time":1.27001953125,"type":"prune"},{"compiler":[[14,10]],"locations":[["(fma.f64 x -9 6)",0.0234375,true],["(*.f64 x (fma.f64 x -9 6))",0.109375,true]],"time":3.51904296875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x -9 6)","x","-inf",0.166015625],["(fma.f64 x -9 6)","x","inf",0.140869140625],["(fma.f64 x -9 6)","x","0",0.14697265625],["(*.f64 x (fma.f64 x -9 6))","x","-inf",0.626220703125],["(*.f64 x (fma.f64 x -9 6))","x","inf",0.466064453125],["(*.f64 x (fma.f64 x -9 6))","x","0",0.470947265625]],"time":2.093994140625,"type":"series"},{"count":[[2,34]],"egraph":[[2,1338,13,0.014870499999999998],[1,122,13,0.001988292],[0,6,13,0.000221667]],"inputs":[["(*.f64 x (fma.f64 x -9 6))","(fma.f64 x -9 6)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -9) x) (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x -9)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (fma.f64 x -9 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 x -9 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 x -9 6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (fma.f64 x -9 6))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (fma.f64 x -9 6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 x -9 6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (fma.f64 x -9 6))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 6 (*.f64 x -9))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -9) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -9) 1) 6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x -9 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -9 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -9 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -9 6)) (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) (cbrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x -9 6)) (sqrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) 36) (-.f64 (*.f64 x -9) 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -9 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -9 6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x -9 6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -9 6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x -9 6)))))))"]],"rules":[["egg-rr",21],["egg-rr",13]],"stop":[["node limit",1]],"time":34.114013671875,"type":"rewrite"},{"count":[[58,45]],"egraph":[[20,7971,144,0.11711037399999999],[19,7895,144,0.10712587399999998],[18,7613,144,0.09760404099999999],[17,7321,144,0.088186249],[16,6923,144,0.07900529099999999],[15,6086,144,0.069538333],[14,5402,144,0.058840332999999995],[13,4834,144,0.04951849999999999],[12,4323,144,0.041511665999999996],[11,3919,144,0.03375975],[10,3607,144,0.027231582999999997],[9,3387,144,0.021517875],[8,3173,144,0.016468666],[7,2969,144,0.012018749],[6,1719,144,0.007744291],[5,471,144,0.003724957],[4,156,144,0.001346291],[3,62,144,0.00063125],[2,36,144,0.000345458],[1,23,171,0.00019475],[0,12,171,7.8291e-5]],"inputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","6","(+.f64 (*.f64 -9 x) 6)","(+.f64 (*.f64 -9 x) 6)","(+.f64 (*.f64 -9 x) 6)","(*.f64 -9 x)","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))","(*.f64 -9 x)","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 x (*.f64 x -9))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 x (*.f64 x -9))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 6 x))","(*.f64 x (fma.f64 x -9 6))","6","(+.f64 (*.f64 -9 x) 6)","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(+.f64 (*.f64 -9 x) 6)","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(+.f64 (*.f64 -9 x) 6)","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(*.f64 -9 x)","(*.f64 x -9)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(*.f64 -9 x)","(*.f64 x -9)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(fma.f64 x -9 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(fma.f64 x -9 6)"]],"stop":[["node limit",1]],"time":134.571044921875,"type":"simplify"},{"compiler":[[396,299]],"time":6.824951171875,"type":"eval"},{"alts":[["(*.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6)))))","fresh",5.737987548842209],["(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","next",0.24609375],["(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)","fresh",0.744995312590145],["(*.f64 x (fma.f64 x -9 6))","done",0.234375],["(*.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 2))","fresh",9.712341406295073],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","fresh",0.40699013675818835]],"compiler":[[26,21],[10,8],[10,8],[7,5],[10,8],[10,8],[26,21],[10,8],[10,8],[10,8],[10,8]],"count":[[47,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[45,5],"picked":[1,1]}],"min-error":[0.07421875],"time":9.0068359375,"type":"prune"},{"compiler":[[25,19]],"locations":[["(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))",0.04296875,true],["(*.f64 -9 (pow.f64 x 2))",0.27307379138909577,true]],"time":6.52099609375,"type":"localize"},{"count":[[2,3]],"series":[["(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","x","-inf",0.18017578125],["(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","x","inf",0.330078125],["(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","x","0",0.21484375],["(*.f64 -9 (pow.f64 x 2))","x","-inf",0.200927734375],["(*.f64 -9 (pow.f64 x 2))","x","inf",1.093017578125],["(*.f64 -9 (pow.f64 x 2))","x","0",0.382080078125]],"time":2.47314453125,"type":"series"},{"count":[[2,48]],"egraph":[[2,2368,18,0.020960458],[1,197,18,0.003489417],[0,9,18,0.00030875]],"inputs":[["(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 -9 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -9 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -9 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 -9)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 x x) 3) -729) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) 81))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -9) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x x) 3) -729))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -9 (*.f64 x x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 x x) 36) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))) (/.f64 (*.f64 (pow.f64 x 4) 81) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -9 (*.f64 x x) (*.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))) (pow.f64 (cbrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))) 2) (cbrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))) (sqrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x 3) 216) (*.f64 (pow.f64 (*.f64 x x) 3) -729)) (/.f64 1 (+.f64 (*.f64 (*.f64 x x) 36) (-.f64 (*.f64 (pow.f64 x 4) 81) (*.f64 x (*.f64 6 (*.f64 -9 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 x x) 36) (*.f64 (pow.f64 x 4) 81)) (/.f64 1 (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 (*.f64 x x) 36) (-.f64 (*.f64 (pow.f64 x 4) 81) (*.f64 x (*.f64 6 (*.f64 -9 (*.f64 x x)))))) (+.f64 (*.f64 (pow.f64 x 3) 216) (*.f64 (pow.f64 (*.f64 x x) 3) -729))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))) (-.f64 (*.f64 (*.f64 x x) 36) (*.f64 (pow.f64 x 4) 81))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) 216) (*.f64 (pow.f64 (*.f64 x x) 3) -729)) (+.f64 (*.f64 (*.f64 x x) 36) (-.f64 (*.f64 (pow.f64 x 4) 81) (*.f64 x (*.f64 6 (*.f64 -9 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) 216) (*.f64 (pow.f64 (*.f64 x x) 3) -729)) (+.f64 (*.f64 (pow.f64 x 4) 81) (-.f64 (*.f64 (*.f64 x x) 36) (*.f64 x (*.f64 6 (*.f64 -9 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) 36) (*.f64 (pow.f64 x 4) 81)) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x 3) 216) (*.f64 (pow.f64 (*.f64 x x) 3) -729))) (neg.f64 (+.f64 (*.f64 (*.f64 x x) 36) (-.f64 (*.f64 (pow.f64 x 4) 81) (*.f64 x (*.f64 6 (*.f64 -9 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (*.f64 x x) 36) (*.f64 (pow.f64 x 4) 81))) (neg.f64 (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 4) 81) (*.f64 (*.f64 x x) 36)) (-.f64 (*.f64 -9 (*.f64 x x)) (*.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -9 (*.f64 x x) (*.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -9 (*.f64 x x) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) -9 (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 6 x (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -9 (*.f64 x x)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 6)) 2) (cbrt.f64 (*.f64 x 6)) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 81)) (cbrt.f64 (*.f64 -9 (*.f64 x x))) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 6)) (sqrt.f64 (*.f64 x 6)) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 -9)) (*.f64 x (sqrt.f64 -9)) (*.f64 x 6))))))"]],"rules":[["egg-rr",37],["egg-rr",11]],"stop":[["node limit",1]],"time":41.43994140625,"type":"rewrite"},{"count":[[51,51]],"egraph":[[21,7264,18,0.11353833299999998],[20,7228,18,0.10060958299999997],[19,7156,18,0.09033745799999998],[18,6880,18,0.08177895799999998],[17,6592,18,0.07333433299999999],[16,6198,18,0.06541858299999999],[15,5365,18,0.056862082999999994],[14,4679,18,0.047609333],[13,4113,18,0.039728583],[12,3624,18,0.03306125],[11,3222,18,0.026277041999999997],[10,2920,18,0.020784249999999997],[9,2700,18,0.01628275],[8,2487,18,0.012498916999999998],[7,2323,18,0.009221957999999999],[6,1432,18,0.006081583],[5,385,18,0.003013458],[4,126,18,0.001013124],[3,52,18,0.000437041],[2,26,18,0.00022233300000000001],[1,15,18,0.000120458],[0,8,18,4.7333e-5]],"inputs":[["(*.f64 6 x)","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 6 x)","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 x (*.f64 x -9))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 x (*.f64 x -9))"]],"stop":[["node limit",1]],"time":125.548095703125,"type":"simplify"},{"compiler":[[771,498]],"time":9.4208984375,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -9 6))","done",0.234375],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 6)) 2) (cbrt.f64 (*.f64 x 6)) (*.f64 -9 (*.f64 x x)))","fresh",0.6437265137479349],["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))","next",0.16015625],["(*.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 2))","fresh",9.712341406295073],["(*.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6)))))","fresh",5.737987548842209],["(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)","fresh",0.744995312590145],["(/.f64 (-.f64 (*.f64 (*.f64 x x) 36) (*.f64 (pow.f64 x 4) 81)) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))","fresh",27.17040315173452],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","fresh",0.40699013675818835]],"compiler":[[7,5],[17,13],[9,6],[10,8],[26,21],[10,8],[22,15],[10,8],[17,13],[9,6],[10,8],[26,21],[10,8],[22,15],[10,8]],"count":[[57,8]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[51,3],"picked":[1,0]}],"min-error":[0.0234375],"time":10.549072265625,"type":"prune"},{"compiler":[[20,10]],"locations":[["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))",0.06640625,true],["(*.f64 -9 (*.f64 x x))",0.27307379138909577,true]],"time":4.06884765625,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))","x","-inf",0.2001953125],["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))","x","inf",0.18701171875],["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))","x","0",0.26806640625],["(*.f64 -9 (*.f64 x x))","x","-inf",0.14697265625],["(*.f64 -9 (*.f64 x x))","x","inf",0.171875],["(*.f64 -9 (*.f64 x x))","x","0",0.176025390625]],"time":1.236083984375,"type":"series"},{"count":[[2,32]],"egraph":[[2,1593,18,0.016472834],[1,144,18,0.002391334],[0,7,18,0.000237625]],"inputs":[["(*.f64 -9 (*.f64 x x))","(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 -9 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -9 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -9 (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -9 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 -9)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 81 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -9) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -9 (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -9 (*.f64 x x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -9 (*.f64 x x)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 6) 1) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 6 (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))) (pow.f64 (cbrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))) 2) (cbrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))) (sqrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 6) 3) (pow.f64 (*.f64 -9 (*.f64 x x)) 3)) (+.f64 (*.f64 (*.f64 x 6) (*.f64 x 6)) (-.f64 (*.f64 81 (pow.f64 x 4)) (*.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 6) (*.f64 x 6)) (*.f64 81 (pow.f64 x 4))) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))))))"]],"rules":[["egg-rr",21],["egg-rr",11]],"stop":[["node limit",1]],"time":35.7119140625,"type":"rewrite"},{"count":[[56,38]],"egraph":[[20,7996,174,0.116469209],[19,7922,174,0.107271376],[18,7644,174,0.097794501],[17,7354,174,0.088248876],[16,6960,174,0.079044751],[15,6125,174,0.06956412599999999],[14,5435,174,0.058793875999999995],[13,4869,174,0.049652250999999994],[12,4358,174,0.041658376],[11,3956,174,0.033864875999999995],[10,3643,174,0.027396375999999997],[9,3423,174,0.021634125999999997],[8,3210,174,0.016557708999999997],[7,3006,174,0.012055833999999998],[6,1760,174,0.007833541999999999],[5,495,174,0.0037269169999999997],[4,168,174,0.001334167],[3,69,174,0.000617459],[2,32,192,0.000317167],[1,18,201,0.00017258399999999999],[0,9,201,6.9167e-5]],"inputs":[["(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 6 x)","(*.f64 x 6)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(fma.f64 -9 (*.f64 x x) (*.f64 x 6))","(*.f64 x (+.f64 (*.f64 -9 x) 6))","(*.f64 x (fma.f64 -9 x 6))"]],"stop":[["node limit",1]],"time":134.94921875,"type":"simplify"},{"compiler":[[440,283]],"time":6.114990234375,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -9 6))","done",0.234375],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 6)) 2) (cbrt.f64 (*.f64 x 6)) (*.f64 -9 (*.f64 x x)))","fresh",0.6437265137479349],["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))","done",0.16015625],["(/.f64 (-.f64 (*.f64 (*.f64 x 6) (*.f64 x 6)) (*.f64 81 (pow.f64 x 4))) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))","fresh",27.048031893803827],["(*.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 2))","fresh",9.712341406295073],["(*.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6)))))","fresh",5.737987548842209],["(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)","fresh",0.744995312590145],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","next",0.40699013675818835]],"compiler":[[7,5],[17,13],[9,6],[24,18],[10,8],[26,21],[10,8],[10,8],[17,13],[24,18],[10,8],[26,21],[10,8],[10,8]],"count":[[46,8]],"kept":[{"done":[1,1],"fresh":[6,5],"new":[38,1],"picked":[1,1]}],"min-error":[0.0234375],"time":9.156005859375,"type":"prune"},{"compiler":[[30,24]],"locations":[["(fma.f64 x -9 6)",0.0234375,false],["(cbrt.f64 (fma.f64 x -9 6))",0.05078125,true],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))",0.20703125,true],["(pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3)",0.2744713379159781,true]],"time":8.932861328125,"type":"localize"},{"count":[[3,20]],"series":[["(cbrt.f64 (fma.f64 x -9 6))","x","-inf",0.241943359375],["(cbrt.f64 (fma.f64 x -9 6))","x","inf",0.237060546875],["(cbrt.f64 (fma.f64 x -9 6))","x","0",0.36083984375],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","x","-inf",0.2861328125],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","x","inf",0.281982421875],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","x","0",0.25],["(pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3)","x","-inf",0.4580078125],["(pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3)","x","inf",0.87890625],["(pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3)","x","0",2.047119140625]],"time":5.18408203125,"type":"series"},{"count":[[3,59]],"egraph":[[2,1846,20,0.018035874],[1,191,20,0.002935291],[0,9,20,0.000319083]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3)","(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","(cbrt.f64 (fma.f64 x -9 6))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 6 (*.f64 x -9))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -9) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -9) 1) 6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x -9 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -9 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -9 6)) (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -9 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) (cbrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x -9 6)) (sqrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x -9 6) 1/6) (*.f64 (pow.f64 (fma.f64 x -9 6) 1/6) (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2) 3) (cbrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 x -9 6) 1/6) 3) (pow.f64 (pow.f64 (fma.f64 x -9 6) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) 1) (cbrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) (pow.f64 (fma.f64 x -9 6) 1/6)) (pow.f64 (fma.f64 x -9 6) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) 36) (-.f64 (*.f64 x -9) 6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x -9 6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -9 6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -9 6)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -9) x) (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x -9)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (fma.f64 x -9 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 x -9 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 x -9 6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (fma.f64 x -9 6))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (fma.f64 x -9 6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (fma.f64 x -9 6)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 x -9 6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x -9 6) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 x -9 6) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (fma.f64 x -9 6))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (fma.f64 x -9 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -9 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x -9 6) 1/6) (pow.f64 (fma.f64 x -9 6) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (fma.f64 x -9 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 1/3) (pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -9 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -9 6) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 x -9 6))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 x -9 6))))))))"]],"rules":[["egg-rr",19],["egg-rr",15],["egg-rr",25]],"stop":[["node limit",1]],"time":40.23095703125,"type":"rewrite"},{"count":[[79,78]],"egraph":[[3,3927,393,0.020130501000000002],[2,779,432,0.007066542],[1,260,492,0.001770876],[0,88,557,0.000462792]],"inputs":[["6","(+.f64 (*.f64 (+.f64 (*.f64 -3 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3)) (*.f64 -6 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3))) x) 6)","(+.f64 (*.f64 (+.f64 (*.f64 -9 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (+.f64 (*.f64 18 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (*.f64 (+.f64 (*.f64 -18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3)) (*.f64 9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3))) (cbrt.f64 6)))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 -3 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3)) (*.f64 -6 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3))) x) 6))","(+.f64 (*.f64 (+.f64 (*.f64 -9 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (+.f64 (*.f64 18 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (*.f64 (+.f64 (*.f64 -18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3)) (*.f64 9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3))) (cbrt.f64 6)))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 -3 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3)) (*.f64 -6 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3))) x) (+.f64 6 (*.f64 (+.f64 (*.f64 1/3 (-.f64 (*.f64 27 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (+.f64 (*.f64 108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3)))))) (+.f64 (*.f64 -3 (*.f64 (+.f64 (*.f64 -18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3)) (*.f64 9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3))) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3))) (+.f64 (*.f64 (cbrt.f64 6) (+.f64 (*.f64 9 (pow.f64 1 1/3)) (*.f64 2/3 (/.f64 (-.f64 (*.f64 27 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (+.f64 (*.f64 108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3))))) (cbrt.f64 6))))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3)))))) (pow.f64 x 3)))))","(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(cbrt.f64 6)","(+.f64 (cbrt.f64 6) (*.f64 -3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3) x)))","(+.f64 (*.f64 -9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)) 1/3) (pow.f64 x 2))) (+.f64 (cbrt.f64 6) (*.f64 -3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3) x))))","(+.f64 (*.f64 -9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)) 1/3) (pow.f64 x 2))) (+.f64 (cbrt.f64 6) (+.f64 (*.f64 -3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3) x)) (*.f64 1/3 (/.f64 (*.f64 (-.f64 (*.f64 27 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (+.f64 (*.f64 108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 6) 2))))))"]],"method":["egg-herbie"],"outputs":[["6","(+.f64 (*.f64 (+.f64 (*.f64 -3 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3)) (*.f64 -6 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3))) x) 6)","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 6) 4)) -9) x 6)","(fma.f64 (cbrt.f64 (*.f64 6 (cbrt.f64 6))) (*.f64 x -9) 6)","(+.f64 (*.f64 (+.f64 (*.f64 -9 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (+.f64 (*.f64 18 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (*.f64 (+.f64 (*.f64 -18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3)) (*.f64 9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3))) (cbrt.f64 6)))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 -3 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3)) (*.f64 -6 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3))) x) 6))","(fma.f64 (fma.f64 -9 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) (fma.f64 18 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) (*.f64 (cbrt.f64 6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4))) -9)))) (*.f64 x x) (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 6) 4)) -9) x 6))","(fma.f64 (+.f64 (*.f64 (cbrt.f64 6) (*.f64 -9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4))))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) 9)) (*.f64 x x) (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 6) 4)) -9) x 6))","(fma.f64 (fma.f64 (cbrt.f64 6) (*.f64 -9 (cbrt.f64 (/.f64 1/6 (cbrt.f64 6)))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) 9)) (*.f64 x x) (fma.f64 (cbrt.f64 (*.f64 6 (cbrt.f64 6))) (*.f64 x -9) 6))","(fma.f64 (cbrt.f64 (*.f64 6 (cbrt.f64 6))) (*.f64 x -9) (fma.f64 x (*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) 9 (*.f64 (cbrt.f64 (/.f64 1/6 (cbrt.f64 6))) (*.f64 (cbrt.f64 6) -9)))) 6))","(+.f64 (*.f64 (+.f64 (*.f64 -9 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (+.f64 (*.f64 18 (pow.f64 (/.f64 1 (cbrt.f64 6)) 1/3)) (*.f64 (+.f64 (*.f64 -18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3)) (*.f64 9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3))) (cbrt.f64 6)))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 -3 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3)) (*.f64 -6 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 6) 4) 1) 1/3))) x) (+.f64 6 (*.f64 (+.f64 (*.f64 1/3 (-.f64 (*.f64 27 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (+.f64 (*.f64 108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3)))))) (+.f64 (*.f64 -3 (*.f64 (+.f64 (*.f64 -18 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3)) (*.f64 9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4)) 1/3))) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3))) (+.f64 (*.f64 (cbrt.f64 6) (+.f64 (*.f64 9 (pow.f64 1 1/3)) (*.f64 2/3 (/.f64 (-.f64 (*.f64 27 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (+.f64 (*.f64 108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3))))) (cbrt.f64 6))))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3)))))) (pow.f64 x 3)))))","(fma.f64 (fma.f64 -9 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) (fma.f64 18 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) (*.f64 (cbrt.f64 6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4))) -9)))) (*.f64 x x) (+.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 6) 4)) -9) x 6) (*.f64 (fma.f64 1/3 (-.f64 (/.f64 27 (pow.f64 (cbrt.f64 6) 2)) (fma.f64 108 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 54))) (fma.f64 -3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4))) -9) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (fma.f64 (cbrt.f64 6) (+.f64 9 (*.f64 2/3 (/.f64 (-.f64 (/.f64 27 (pow.f64 (cbrt.f64 6) 2)) (fma.f64 108 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 54))) (cbrt.f64 6)))) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 54)))) (pow.f64 x 3))))","(fma.f64 (+.f64 (*.f64 (cbrt.f64 6) (*.f64 -9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4))))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) 9)) (*.f64 x x) (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 6) 4)) -9) x (fma.f64 (fma.f64 1/3 (-.f64 (/.f64 27 (pow.f64 (cbrt.f64 6) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 162)) (fma.f64 -3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 4))) (*.f64 -9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))))) (fma.f64 (cbrt.f64 6) (fma.f64 2/3 (/.f64 (-.f64 (/.f64 27 (pow.f64 (cbrt.f64 6) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 162)) (cbrt.f64 6)) 9) (/.f64 54 (pow.f64 (cbrt.f64 6) 2))))) (pow.f64 x 3) 6)))","(fma.f64 x (*.f64 x (fma.f64 (cbrt.f64 6) (*.f64 -9 (cbrt.f64 (/.f64 1/6 (cbrt.f64 6)))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) 9))) (fma.f64 (cbrt.f64 (*.f64 6 (cbrt.f64 6))) (*.f64 x -9) (fma.f64 (fma.f64 1/3 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) -135) (fma.f64 (cbrt.f64 6) (fma.f64 2/3 (-.f64 9/2 (/.f64 (/.f64 162 (pow.f64 (cbrt.f64 6) 2)) (cbrt.f64 6))) 9) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (*.f64 (cbrt.f64 (/.f64 1/6 (cbrt.f64 6))) 27) (/.f64 54 (pow.f64 (cbrt.f64 6) 2))))) (pow.f64 x 3) 6)))","(fma.f64 x (*.f64 x (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 6))) 9 (*.f64 (cbrt.f64 (/.f64 1/6 (cbrt.f64 6))) (*.f64 (cbrt.f64 6) -9)))) (fma.f64 (fma.f64 1/3 (/.f64 -135 (pow.f64 (cbrt.f64 6) 2)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (*.f64 (cbrt.f64 (/.f64 1/6 (cbrt.f64 6))) 27) (fma.f64 (cbrt.f64 6) -6 (/.f64 54 (pow.f64 (cbrt.f64 6) 2))))) (pow.f64 x 3) (fma.f64 (cbrt.f64 (*.f64 6 (cbrt.f64 6))) (*.f64 x -9) 6)))","(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 x (*.f64 x -9))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 x (*.f64 x -9))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(fma.f64 6 x (*.f64 -9 (*.f64 x x)))","(*.f64 x (+.f64 6 (*.f64 x -9)))","(cbrt.f64 6)","(+.f64 (cbrt.f64 6) (*.f64 -3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3) x)))","(+.f64 (cbrt.f64 6) (*.f64 -3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))))))","(fma.f64 -3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (cbrt.f64 6))","(fma.f64 x (*.f64 -3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (cbrt.f64 6))","(fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (*.f64 -3 x) (cbrt.f64 6))","(+.f64 (*.f64 -9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)) 1/3) (pow.f64 x 2))) (+.f64 (cbrt.f64 6) (*.f64 -3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3) x))))","(fma.f64 -9 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)))) (+.f64 (cbrt.f64 6) (*.f64 -3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))))))","(fma.f64 -9 (*.f64 x (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7))))) (fma.f64 -3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (cbrt.f64 6)))","(fma.f64 x (*.f64 -3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (fma.f64 (*.f64 x (*.f64 x -9)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7))) (cbrt.f64 6)))","(+.f64 (*.f64 -9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)) 1/3) (pow.f64 x 2))) (+.f64 (cbrt.f64 6) (+.f64 (*.f64 -3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 1/3) x)) (*.f64 1/3 (/.f64 (*.f64 (-.f64 (*.f64 27 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (+.f64 (*.f64 108 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (*.f64 54 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (pow.f64 1 1/3))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 6) 2))))))","(fma.f64 -9 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)))) (+.f64 (cbrt.f64 6) (fma.f64 -3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (*.f64 1/3 (/.f64 (-.f64 (/.f64 27 (pow.f64 (cbrt.f64 6) 2)) (fma.f64 108 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 54))) (/.f64 (pow.f64 (cbrt.f64 6) 2) (pow.f64 x 3)))))))","(+.f64 (fma.f64 -9 (*.f64 x (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7))))) (fma.f64 -3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (cbrt.f64 6))) (*.f64 1/3 (*.f64 (/.f64 (-.f64 (/.f64 27 (pow.f64 (cbrt.f64 6) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) 162)) (pow.f64 (cbrt.f64 6) 2)) (pow.f64 x 3))))","(fma.f64 -9 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)))) (fma.f64 -3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)))) (fma.f64 1/3 (*.f64 (pow.f64 x 3) (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2)) -135) (pow.f64 (cbrt.f64 6) 2))) (cbrt.f64 6))))","(+.f64 (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 2))) (*.f64 -3 x) (cbrt.f64 6)) (*.f64 (*.f64 x x) (+.f64 (*.f64 -9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 6) 7)))) (*.f64 -15/2 (/.f64 x (cbrt.f64 6))))))"]],"stop":[["node limit",1]],"time":36.8779296875,"type":"simplify"},{"compiler":[[1756,1500]],"time":28.046142578125,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -9 6))","done",0.234375],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 6)) 2) (cbrt.f64 (*.f64 x 6)) (*.f64 -9 (*.f64 x x)))","fresh",0.6437265137479349],["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))","done",0.16015625],["(/.f64 (-.f64 (*.f64 (*.f64 x 6) (*.f64 x 6)) (*.f64 81 (pow.f64 x 4))) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))","fresh",27.048031893803827],["(*.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 2))","fresh",9.712341406295073],["(*.f64 x (*.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6)))))","fresh",0.9512804025226226],["(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","done",0.40699013675818835],["(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)","fresh",0.744995312590145],["(*.f64 x (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2) 3) (cbrt.f64 (fma.f64 x -9 6))))","fresh",1.7288595379519107],["(*.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6)))))","fresh",5.737987548842209]],"compiler":[[7,5],[17,13],[9,6],[24,18],[10,8],[26,22],[10,8],[10,8],[19,16],[26,21]],"count":[[113,10]],"kept":[{"done":[2,2],"fresh":[5,3],"new":[105,4],"picked":[1,1]}],"min-error":[0.01171875],"time":21.801025390625,"type":"prune"},{"accuracy":[0.16015625],"baseline":[0.16015625],"branch":[["x",0.16015625,1],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)",0.16015625,1]],"compiler":[[2,1],[10,8],[222,168]],"count":[[15,1]],"inputs":[["(*.f64 x (*.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6)))))","(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)","(*.f64 x (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x -9 6))) 2) 3) (cbrt.f64 (fma.f64 x -9 6))))","(*.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6)))))","(/.f64 (-.f64 (*.f64 (*.f64 x 6) (*.f64 x 6)) (*.f64 81 (pow.f64 x 4))) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 6)) 2) (cbrt.f64 (*.f64 x 6)) (*.f64 -9 (*.f64 x x)))","(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) 36) (*.f64 (pow.f64 x 4) 81)) (-.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x))))","(*.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -9) 3) 216) (+.f64 (*.f64 (*.f64 x -9) (*.f64 x -9)) (-.f64 36 (*.f64 (*.f64 x -9) 6)))))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -9 6))) 3)","(*.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -9 6)) 2))","(*.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -9 6)) 3))","(*.f64 x (fma.f64 x -9 6))","(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)"]],"link":["."],"name":["Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, E"],"oracle":[33.748371584056315],"outputs":[["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))"]],"time":15.927978515625,"times":[["x",5.68017578125],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)",6.047119140625]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[1,8,11,2.9625000000000002e-5],[0,7,11,1.8125e-5]],"inputs":[["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x 6 (*.f64 -9 (*.f64 x x)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.364990234375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.18603515625,"type":"end"}]
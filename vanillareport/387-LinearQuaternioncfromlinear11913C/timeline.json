[{"compiler":[[19,10]],"method":["search"],"sampling":[[12,0.397854136256683,0.600681735132639,0.0014641286106780171],[11,0.3276445827996213,0.6708912885897007,0.0014641286106780171],[10,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[9,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":115.986083984375,"type":"analyze"},{"outcomes":[["body",512,"invalid",23.06396484375,299],["body",256,"invalid",73.956787109375,1692],["body",1024,"invalid",26.59423828125,240],["body",512,"valid",42.1640625,537],["body",1024,"valid",103.30810546875,909],["body",2048,"valid",72.935302734375,499],["body",256,"valid",278.363525390625,6311]],"time":631.612060546875,"type":"sample"},{"compiler":[[18,9]],"egraph":[[0,3,3,2.208e-6],[5,6579,28,0.030091918000000002],[4,2476,28,0.017816418],[3,945,28,0.006769334],[2,319,52,0.002131334],[1,96,58,0.000579792],[0,24,70,0.000131125]],"inputs":[["0","1","2"],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))","(-.f64 (-.f64 (+.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x z)) (*.f64 x x))","(-.f64 (-.f64 (+.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y x)) (*.f64 y y))","(-.f64 (-.f64 (+.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z y)) (*.f64 z z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))","(-.f64 (*.f64 y (+.f64 x y)) (*.f64 y (+.f64 z y)))","(*.f64 y (-.f64 (+.f64 x y) (+.f64 y z)))","(*.f64 y (-.f64 (+.f64 x (-.f64 y z)) y))","(*.f64 y (-.f64 x z))","(-.f64 (-.f64 (+.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x z)) (*.f64 x x))","(-.f64 (-.f64 (*.f64 x (+.f64 y x)) (*.f64 x z)) (*.f64 x x))","(-.f64 (*.f64 x (+.f64 x y)) (*.f64 x (+.f64 x z)))","(*.f64 x (-.f64 (+.f64 x y) (+.f64 x z)))","(*.f64 x (-.f64 y z))","(-.f64 (-.f64 (+.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y x)) (*.f64 y y))","(-.f64 (*.f64 y (+.f64 z y)) (*.f64 y (+.f64 x y)))","(*.f64 y (-.f64 (+.f64 y z) (+.f64 x y)))","(*.f64 y (+.f64 z (-.f64 y (+.f64 x y))))","(*.f64 y (-.f64 z x))","(-.f64 (-.f64 (+.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z y)) (*.f64 z z))","(-.f64 (*.f64 z (+.f64 x z)) (+.f64 (*.f64 y z) (*.f64 z z)))","(-.f64 (*.f64 z (+.f64 x z)) (*.f64 z (+.f64 y z)))","(*.f64 z (-.f64 (+.f64 x z) (+.f64 y z)))","(*.f64 z (-.f64 x y))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":54.4970703125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,7862,7,0.080520873],[12,7240,7,0.073140957],[11,6050,7,0.062948707],[10,5449,7,0.049489249000000006],[9,5359,7,0.041030541000000004],[8,5094,7,0.035446541000000005],[7,4610,7,0.028473624000000003],[6,4173,7,0.022381166],[5,2343,7,0.015350999],[4,688,7,0.006106999],[3,259,7,0.001893916],[2,89,13,0.0006514579999999999],[1,29,16,0.000210791],[0,10,19,5.8583e-5]],"inputs":[["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))","(-.f64 (*.f64 y (+.f64 x y)) (+.f64 (*.f64 y z) (*.f64 y y)))","(-.f64 (*.f64 y (+.f64 x y)) (*.f64 y (+.f64 z y)))","(*.f64 y (-.f64 (+.f64 x y) (+.f64 y z)))","(*.f64 y (-.f64 x z))"]],"stop":[["node limit",1]],"time":91.94580078125,"type":"simplify"},{"compiler":[[23,11]],"time":0.35400390625,"type":"eval"},{"alts":[["(*.f64 y (-.f64 x z))","next",0.00390625]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.77001953125,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 y (-.f64 x z))",0.00390625,true]],"time":2.9990234375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 y (-.f64 x z))","z","-inf",0.240966796875],["(*.f64 y (-.f64 x z))","z","inf",0.300048828125],["(*.f64 y (-.f64 x z))","z","0",0.233154296875],["(*.f64 y (-.f64 x z))","x","-inf",0.47119140625],["(*.f64 y (-.f64 x z))","x","inf",0.333984375],["(*.f64 y (-.f64 x z))","x","0",0.26611328125],["(*.f64 y (-.f64 x z))","y","-inf",0.349853515625],["(*.f64 y (-.f64 x z))","y","inf",0.324951171875],["(*.f64 y (-.f64 x z))","y","0",0.43603515625]],"time":3.05810546875,"type":"series"},{"count":[[1,19]],"egraph":[[2,1784,7,0.017389375],[1,129,7,0.0023093330000000002],[0,6,7,0.000139375]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) (pow.f64 z 3)) y) (fma.f64 x x (*.f64 z (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 z z)) y) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (pow.f64 x 3) (pow.f64 z 3))) (fma.f64 x x (*.f64 z (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (*.f64 x x) (*.f64 z z))) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (-.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (-.f64 x z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 x z) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (-.f64 x z))))))))"]],"rules":[["egg-rr",19]],"stop":[["node limit",1]],"time":34.467041015625,"type":"rewrite"},{"count":[[43,25]],"egraph":[[10,744,156,0.009139],[9,730,156,0.007611125],[8,576,156,0.00603075],[7,410,156,0.003983166],[6,254,156,0.002460625],[5,138,156,0.001352166],[4,86,156,0.000789625],[3,58,156,0.000499583],[2,35,156,0.00031999999999999997],[1,18,210,0.000151417],[0,10,210,6.2667e-5]],"inputs":[["(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))"]],"stop":[["saturated",1]],"time":23.288818359375,"type":"simplify"},{"compiler":[[221,88]],"time":2.55615234375,"type":"eval"},{"alts":[["(*.f64 y (-.f64 x z))","done",0.00390625],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","next",0.0078125]],"compiler":[[8,5],[11,7],[11,7]],"count":[[26,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[25,1],"picked":[1,1]}],"min-error":[0],"time":4.533935546875,"type":"prune"},{"compiler":[[23,7]],"locations":[["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))",0.0078125,true]],"time":4.662109375,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","z","-inf",0.169189453125],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","z","inf",0.273193359375],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","z","0",0.324951171875],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","x","-inf",0.218994140625],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","x","inf",0.278076171875],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","x","0",0.352783203125],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","y","-inf",0.278076171875],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","y","inf",0.593994140625],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","y","0",0.953857421875]],"time":3.555908203125,"type":"series"},{"count":[[1,44]],"egraph":[[2,2564,7,0.020008834],[1,176,7,0.003234],[0,8,9,0.000184583]],"inputs":[["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (+.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (*.f64 y (+.f64 x z))) (/.f64 (pow.f64 (*.f64 y z) 2) (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (/.f64 1 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) (pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 2) (cbrt.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y (+.f64 x z))) (sqrt.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (*.f64 y z) 3)) (/.f64 1 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 y x) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y z))) (-.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 y x) (*.f64 y z))) (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (*.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y (+.f64 x z)) (pow.f64 (*.f64 y (+.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (*.f64 y z) 3)) (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 y x) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (*.f64 y z) 3)) (+.f64 (pow.f64 (*.f64 y z) 2) (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (*.f64 y x) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (*.f64 y z) 3))) (neg.f64 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 y x) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2)) (neg.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (*.f64 y z) 3)) (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 y x) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (*.f64 y x) 2)) (-.f64 (*.f64 y z) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (+.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (cbrt.f64 (*.f64 y z)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (cbrt.f64 (*.f64 y x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 y z)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y x)) (*.f64 y z))))))"]],"rules":[["egg-rr",44]],"stop":[["node limit",1]],"time":38.95703125,"type":"rewrite"},{"count":[[80,52]],"egraph":[[7,642,240,0.007904042],[6,601,240,0.0063880840000000005],[5,487,240,0.004718501],[4,310,240,0.002715792],[3,174,240,0.001465625],[2,100,240,0.000711833],[1,48,240,0.000323292],[0,17,270,0.000108208]],"inputs":[["(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 z (neg.f64 y))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 z (neg.f64 y))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 z (neg.f64 y))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))"]],"stop":[["saturated",1]],"time":22.796875,"type":"simplify"},{"compiler":[[616,200]],"time":6.1640625,"type":"eval"},{"alts":[["(*.f64 y (-.f64 x z))","done",0.00390625],["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","done",0.0078125]],"compiler":[[8,5],[11,7]],"count":[[54,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[52,0],"picked":[1,1]}],"min-error":[0],"time":7.291015625,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[18,9],[31,15]],"count":[[3,1]],"inputs":[["(+.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))","(*.f64 y (-.f64 x z))","(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, C"],"oracle":[18.75111491369989],"outputs":[["(*.f64 y (-.f64 x z))"]],"time":13.069091796875,"times":[["x",3.156005859375],["y",3.072998046875],["z",3.25],["(-.f64 (-.f64 (+.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y z)) (*.f64 y y))",2.840087890625]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[4,17,7,9.0751e-5],[3,16,7,7.2042e-5],[2,14,7,5.2834e-5],[1,9,7,3.4126e-5],[0,6,7,1.4584e-5]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 x z))"]],"stop":[["done",1],["saturated",1]],"time":8.114013671875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":7.35498046875,"type":"end"}]
[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.7024385221302509,0.10536577831953764,0.19219569955021143],[11,0.6868287771940231,0.13463405007496476,0.1785371727310121],[10,0.6556092873215675,0.20292668417096138,0.14146402850747108],[9,0.6243897974491119,0.2575607914477587,0.11804941110312939],[8,0.5619508177042007,0.37463387846946716,0.06341530382633209],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":32.1640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",26.004638671875,636],["body",256,"valid",346.466552734375,8256]],"time":382.26806640625,"type":"sample"},{"compiler":[[13,10]],"egraph":[[0,2,2,2.625e-6],[5,6450,32,0.030224125999999997],[4,1405,32,0.015599334999999999],[3,393,32,0.0028717509999999996],[2,133,32,0.000843751],[1,41,32,0.000261542],[0,15,32,8.4459e-5]],"inputs":[["0","1"],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(/.f64 (*.f64 (-.f64 1 y) (-.f64 3 y)) (*.f64 x 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 (/.f64 (-.f64 1 x) y) (/.f64 (-.f64 3 x) 3))","(/.f64 (-.f64 3 x) (/.f64 3 (/.f64 (-.f64 1 x) y)))","(*.f64 (-.f64 3 x) (/.f64 (-.f64 1 x) (*.f64 3 y)))","(/.f64 (*.f64 (-.f64 1 y) (-.f64 3 y)) (*.f64 x 3))","(*.f64 (/.f64 (-.f64 1 y) x) (/.f64 (-.f64 3 y) 3))","(*.f64 (/.f64 (-.f64 3 y) x) (/.f64 (-.f64 1 y) 3))","(*.f64 (/.f64 (-.f64 3 y) x) (-.f64 1/3 (/.f64 y 3)))","(*.f64 (-.f64 1 y) (*.f64 (-.f64 3 y) (/.f64 1/3 x)))","(*.f64 (-.f64 1 y) (/.f64 (-.f64 3 y) (*.f64 x 3)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":55.3310546875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[6,7934,14,0.034674125],[5,3323,14,0.023321584],[4,732,16,0.007508334],[3,204,16,0.001639375],[2,71,16,0.000510209],[1,24,16,0.000196792],[0,10,16,7.2167e-5]],"inputs":[["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 (/.f64 (-.f64 1 x) y) (/.f64 (-.f64 3 x) 3))","(*.f64 (/.f64 (-.f64 1 x) y) (-.f64 1 (/.f64 x 3)))","(*.f64 (-.f64 1 x) (/.f64 (-.f64 1 (/.f64 x 3)) y))","(*.f64 (-.f64 1 x) (*.f64 (-.f64 3 x) (/.f64 1/3 y)))","(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))"]],"stop":[["node limit",1]],"time":47.77197265625,"type":"simplify"},{"compiler":[[23,17]],"time":1.182861328125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","fresh",6.41418824639842],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","next",6.346698779305326]],"compiler":[[13,10],[12,9],[13,10],[12,9]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[6.11328125],"time":1.614013671875,"type":"prune"},{"compiler":[[29,20]],"locations":[["(/.f64 1/3 y)",0.375,true],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))",5.8543224310864765,true]],"time":7.842041015625,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 1/3 y)","y","-inf",0.238037109375],["(/.f64 1/3 y)","y","inf",0.302001953125],["(/.f64 1/3 y)","y","0",0.298095703125],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","y","-inf",0.72705078125],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","y","inf",0.529052734375],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","y","0",0.6328125],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","x","-inf",0.510009765625],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","x","inf",0.465087890625],["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","x","0",0.651123046875]],"time":4.512939453125,"type":"series"},{"count":[[2,84]],"egraph":[[2,2708,18,0.029167625],[1,221,18,0.0040328329999999996],[0,10,18,0.000362208]],"inputs":[["(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","(/.f64 1/3 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 x -4)) (/.f64 1/3 y)) (*.f64 3 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 y) (*.f64 x (+.f64 x -4))) (*.f64 (/.f64 1/3 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 1/3 y)) (fma.f64 x (+.f64 x -4) 3))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 1/3 y)) (fma.f64 x (+.f64 x -4) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 1/3 y)) (fma.f64 x (+.f64 x -4) 3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 1/3 y)) (fma.f64 x (+.f64 x -4) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (+.f64 x -4) 3) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 (fma.f64 x (+.f64 x -4) 3) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) 1/3)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) 1/3) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) 1/3) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) 1/3) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (fma.f64 x (+.f64 x -4) 3)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) -1/3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 (fma.f64 x (+.f64 x -4) 3) 1/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))) 2)) (cbrt.f64 (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))))) (sqrt.f64 (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (/.f64 1/3 y)) (fma.f64 x (+.f64 x -4) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 y) (*.f64 x (+.f64 x -4)) (*.f64 (/.f64 1/3 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 x -4)) (/.f64 1/3 y) (*.f64 3 (/.f64 1/3 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1/3 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/3 y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1/3 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 y)) (pow.f64 (cbrt.f64 (/.f64 1/3 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/3 y)) 2) (cbrt.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/3 y)) (sqrt.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (pow.f64 (/.f64 1 (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (/.f64 1/3 y) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (/.f64 1/3 y) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 1/9 (pow.f64 y -2)) 1/3) 1/3) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (/.f64 1/3 y) (cbrt.f64 (/.f64 1/3 y))) 2) 1/3) (cbrt.f64 (cbrt.f64 (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 1/3 y) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 1/3) 3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 1/3 y))) 2) 3) (cbrt.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (/.f64 1/3 y))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (/.f64 1/3 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 1/3) 2) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 y 3)) 2) -1) (cbrt.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/9 (pow.f64 y -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/3 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/3 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 1/3 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y 3) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 1/3 y))) 2)) (cbrt.f64 (log.f64 (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 1/3 y)))) (sqrt.f64 (log.f64 (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/9 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/3 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/3 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 1/3 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 1/3 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 1/3 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 1/3 y)) 1) 1))))))"]],"rules":[["egg-rr",46],["egg-rr",38]],"stop":[["node limit",1]],"time":53.549072265625,"type":"rewrite"},{"count":[[108,94]],"egraph":[[11,7342,270,0.065499665],[10,6546,270,0.054103373999999996],[9,6203,270,0.044185166],[8,5915,270,0.0353225],[7,5695,270,0.027497667],[6,3868,270,0.018626917],[5,1511,270,0.010579874999999999],[4,451,270,0.003604958],[3,178,447,0.001450667],[2,94,447,0.000715542],[1,50,483,0.000375833],[0,23,485,0.000160542]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (/.f64 1 y))","(/.f64 (fma.f64 -4/3 x 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(*.f64 1/3 (/.f64 (*.f64 x x) y))","(*.f64 1/3 (/.f64 x (/.f64 y x)))","(*.f64 1/3 (*.f64 (/.f64 x y) x))","(*.f64 (/.f64 x y) (*.f64 x 1/3))","(*.f64 x (*.f64 x (/.f64 1/3 y)))","(*.f64 (*.f64 x x) (/.f64 1/3 y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x))))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (*.f64 (/.f64 x y) x)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 x y) (*.f64 x 1/3)))","(*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3))","(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(*.f64 1/3 (/.f64 (*.f64 x x) y))","(*.f64 1/3 (/.f64 x (/.f64 y x)))","(*.f64 1/3 (*.f64 (/.f64 x y) x))","(*.f64 (/.f64 x y) (*.f64 x 1/3))","(*.f64 x (*.f64 x (/.f64 1/3 y)))","(*.f64 (*.f64 x x) (/.f64 1/3 y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x))))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (*.f64 (/.f64 x y) x)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 x y) (*.f64 x 1/3)))","(*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3))","(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (+.f64 (*.f64 (-.f64 x 4) x) 3) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 1/3 (*.f64 (/.f64 x y) x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(fma.f64 (/.f64 1/3 y) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)"]],"stop":[["node limit",1]],"time":86.64111328125,"type":"simplify"},{"compiler":[[1367,1045]],"time":19.8330078125,"type":"eval"},{"alts":[["(*.f64 (fma.f64 x (+.f64 x -4) 3) (pow.f64 (*.f64 y 3) -1))","fresh",6.54700074639842],["(pow.f64 (cbrt.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))) 3)","fresh",6.677555224674165],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","next",6.109375],["(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","fresh",6.121757519536884],["(/.f64 (fma.f64 x (+.f64 x -4) 3) (*.f64 y 3))","fresh",6.40246949639842],["(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","fresh",40.72331985237209]],"compiler":[[14,11],[15,12],[11,8],[19,14],[12,9],[10,7],[14,11],[15,12],[11,8],[19,14],[12,9],[10,7]],"count":[[96,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[94,6],"picked":[1,0]}],"min-error":[0.029628759768442016],"time":14.864990234375,"type":"prune"},{"compiler":[[27,19]],"locations":[["(fma.f64 x (fma.f64 x 1/3 -4/3) 1)",0.07421875,true],["(fma.f64 x 1/3 -4/3)",0.12890625,true],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)",5.6316661810864765,true]],"time":7.096923828125,"type":"localize"},{"count":[[3,48]],"series":[["(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","x","-inf",0.155029296875],["(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","x","inf",0.18994140625],["(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","x","0",0.159912109375],["(fma.f64 x 1/3 -4/3)","x","-inf",0.240966796875],["(fma.f64 x 1/3 -4/3)","x","inf",0.2041015625],["(fma.f64 x 1/3 -4/3)","x","0",0.837890625],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","y","-inf",0.3291015625],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","y","inf",0.373046875],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","y","0",0.656005859375],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","x","-inf",0.289794921875],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","x","inf",0.31396484375],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","x","0",0.4140625]],"time":4.322998046875,"type":"series"},{"count":[[3,73]],"egraph":[[2,2092,26,0.019985707000000002],[1,181,26,0.003191249],[0,9,26,0.000323083]],"inputs":[["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(fma.f64 x 1/3 -4/3)","(fma.f64 x (fma.f64 x 1/3 -4/3) 1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) 2) (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 2) (*.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) (sqrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (*.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (fma.f64 x (fma.f64 x 1/3 -4/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 2) 1) (/.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 1) (/.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -4/3 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/3) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 1) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x 1/3 -4/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 1/3 -4/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 1/3 -4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2) (cbrt.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 1/3 -4/3)) (sqrt.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 1/3) 3) -64/27) (+.f64 (*.f64 (*.f64 x 1/3) (*.f64 x 1/3)) (-.f64 16/9 (*.f64 (*.f64 x 1/3) -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 1/3) (*.f64 x 1/3)) 16/9) (-.f64 (*.f64 x 1/3) -4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/3 -4/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/3 -4/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 1/3 -4/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 x 1/3 -4/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (fma.f64 x 1/3 -4/3)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (fma.f64 x 1/3 -4/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 2) (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 x 1/3 -4/3)) 3) 1) (+.f64 (*.f64 (*.f64 x (fma.f64 x 1/3 -4/3)) (*.f64 x (fma.f64 x 1/3 -4/3))) (-.f64 1 (*.f64 (*.f64 x (fma.f64 x 1/3 -4/3)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (fma.f64 x 1/3 -4/3)) (*.f64 x (fma.f64 x 1/3 -4/3))) 1) (-.f64 (*.f64 x (fma.f64 x 1/3 -4/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1)))))))"]],"rules":[["egg-rr",21],["egg-rr",21],["egg-rr",31]],"stop":[["node limit",1]],"time":43.921875,"type":"rewrite"},{"count":[[121,99]],"egraph":[[12,6072,435,0.057512792],[11,5740,435,0.046618834],[10,5464,435,0.038651709],[9,5284,435,0.031535875],[8,5107,435,0.025118459],[7,4747,435,0.019151334],[6,3109,435,0.012997292],[5,1176,435,0.007424167000000001],[4,371,447,0.003101333],[3,167,483,0.00143575],[2,101,483,0.000809625],[1,58,495,0.000450166],[0,30,559,0.0001795]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","-4/3","(-.f64 (*.f64 1/3 x) 4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(*.f64 1/3 x)","(-.f64 (*.f64 1/3 x) 4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(*.f64 1/3 x)","(-.f64 (*.f64 1/3 x) 4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(-.f64 (*.f64 1/3 x) 4/3)","1","(+.f64 1 (*.f64 -4/3 x))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(*.f64 1/3 (pow.f64 x 2))","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(*.f64 1/3 (pow.f64 x 2))","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (/.f64 1 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 (/.f64 1/3 y) (*.f64 x x) (/.f64 1 y)))","(+.f64 (/.f64 1 y) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)))","(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 (/.f64 1/3 y) (*.f64 x x) (/.f64 1 y)))","(+.f64 (/.f64 1 y) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)))","(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(*.f64 1/3 (/.f64 (*.f64 x x) y))","(*.f64 1/3 (/.f64 x (/.f64 y x)))","(*.f64 1/3 (*.f64 (/.f64 x y) x))","(*.f64 (/.f64 x y) (*.f64 x 1/3))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x))))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (*.f64 (/.f64 x y) x)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 x y) (*.f64 x 1/3)))","(*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 (/.f64 1/3 y) (*.f64 x x) (/.f64 1 y)))","(+.f64 (/.f64 1 y) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)))","(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 (/.f64 1/3 y) (*.f64 x x) (/.f64 1 y)))","(+.f64 (/.f64 1 y) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)))","(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(*.f64 1/3 (/.f64 (*.f64 x x) y))","(*.f64 1/3 (/.f64 x (/.f64 y x)))","(*.f64 1/3 (*.f64 (/.f64 x y) x))","(*.f64 (/.f64 x y) (*.f64 x 1/3))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x))))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (*.f64 (/.f64 x y) x)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 x y) (*.f64 x 1/3)))","(*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 (/.f64 1/3 y) (*.f64 x x) (/.f64 1 y)))","(+.f64 (/.f64 1 y) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)))","(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 (/.f64 1/3 y) (*.f64 x x) (/.f64 1 y)))","(+.f64 (/.f64 1 y) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)))","(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 x (-.f64 (*.f64 1/3 x) 4/3))) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 x (fma.f64 1/3 x -4/3))) y)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","-4/3","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(*.f64 1/3 x)","(*.f64 x 1/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","(-.f64 (*.f64 1/3 x) 4/3)","(fma.f64 1/3 x -4/3)","(fma.f64 x 1/3 -4/3)","1","(+.f64 1 (*.f64 -4/3 x))","(fma.f64 -4/3 x 1)","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x))))","(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x))))","(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","(*.f64 1/3 (pow.f64 x 2))","(*.f64 1/3 (*.f64 x x))","(*.f64 x (*.f64 x 1/3))","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x)))","(*.f64 x (fma.f64 x 1/3 -4/3))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x))))","(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x))))","(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","(*.f64 1/3 (pow.f64 x 2))","(*.f64 1/3 (*.f64 x x))","(*.f64 x (*.f64 x 1/3))","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x)))","(*.f64 x (fma.f64 x 1/3 -4/3))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x))))","(fma.f64 x (fma.f64 x 1/3 -4/3) 1)","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -4/3 x (*.f64 1/3 (*.f64 x x))))","(fma.f64 x (fma.f64 x 1/3 -4/3) 1)"]],"stop":[["node limit",1]],"time":81.01318359375,"type":"simplify"},{"compiler":[[1303,945]],"time":20.02197265625,"type":"eval"},{"alts":[["(*.f64 (fma.f64 x (+.f64 x -4) 3) (pow.f64 (*.f64 y 3) -1))","fresh",6.54700074639842],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","next",0.15300751953688405],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","done",6.109375],["(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","fresh",6.121757519536884],["(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","fresh",40.72331985237209],["(*.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) 2))","fresh",6.643726513747935]],"compiler":[[14,11],[13,9],[11,8],[19,14],[10,7],[25,19],[14,11],[13,9],[19,14],[10,7],[25,19]],"count":[[105,6]],"kept":[{"done":[0,0],"fresh":[5,2],"new":[99,3],"picked":[1,1]}],"min-error":[0.021816259768442016],"time":22.85986328125,"type":"prune"},{"compiler":[[28,17]],"locations":[["(fma.f64 x 1/3 -4/3)",0.12890625,false],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))",0.1484375,true]],"time":7.60595703125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","y","-inf",0.695068359375],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","y","inf",0.4609375],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","y","0",0.505859375],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","x","-inf",0.30615234375],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","x","inf",0.307861328125],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","x","0",1.5869140625]],"time":3.97900390625,"type":"series"},{"count":[[1,22]],"egraph":[[2,2399,15,0.022699874000000002],[1,205,15,0.003708624],[0,10,15,0.000341666]],"inputs":[["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)) 1) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2) (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) (sqrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)) 3) (/.f64 (pow.f64 y -2) y)) (+.f64 (*.f64 (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3))) (-.f64 (pow.f64 y -2) (*.f64 (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)) (/.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)) (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3))) (pow.f64 y -2)) (-.f64 (*.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":44.1640625,"type":"rewrite"},{"count":[[46,33]],"egraph":[[5,4232,270,0.028796125],[4,1133,273,0.0106485],[3,351,447,0.0033315420000000003],[2,140,447,0.0012971670000000001],[1,64,483,0.0005208330000000001],[0,27,485,0.000192625]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (/.f64 1 y))","(/.f64 (fma.f64 -4/3 x 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(*.f64 1/3 (/.f64 (*.f64 x x) y))","(*.f64 1/3 (/.f64 x (/.f64 y x)))","(*.f64 (/.f64 1/3 y) (*.f64 x x))","(*.f64 (/.f64 x y) (*.f64 x 1/3))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x))))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 1/3 y) (*.f64 x x)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 x y) (*.f64 x 1/3)))","(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(*.f64 1/3 (/.f64 (*.f64 x x) y))","(*.f64 1/3 (/.f64 x (/.f64 y x)))","(*.f64 (/.f64 1/3 y) (*.f64 x x))","(*.f64 (/.f64 x y) (*.f64 x 1/3))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x))))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 1/3 y) (*.f64 x x)))","(fma.f64 -4/3 (/.f64 x y) (*.f64 (/.f64 x y) (*.f64 x 1/3)))","(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) 1) y))","(+.f64 (/.f64 1 y) (fma.f64 1/3 (/.f64 (*.f64 x x) y) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 -4/3 (/.f64 x y) (*.f64 1/3 (/.f64 x (/.f64 y x)))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 (/.f64 x y) x) (/.f64 1 y)))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 1/3 (*.f64 x (/.f64 x y)) (/.f64 1 y)))","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)"]],"stop":[["node limit",1]],"time":46.98193359375,"type":"simplify"},{"compiler":[[877,556]],"time":12.301025390625,"type":"eval"},{"alts":[["(pow.f64 (sqrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2)","fresh",31.02085878907377],["(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","fresh",6.11328125],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","next",0.28656015629507225],["(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","fresh",40.72331985237209],["(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","done",6.109375],["(*.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2))","fresh",0.7517803344423566],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","done",0.15300751953688405]],"compiler":[[16,12],[13,10],[16,12],[10,7],[11,8],[29,20],[13,9],[16,12],[13,10],[16,12],[10,7],[29,20]],"count":[[65,7]],"kept":[{"done":[1,1],"fresh":[4,0],"new":[59,5],"picked":[1,1]}],"min-error":[0.014003759768442016],"time":13.356201171875,"type":"prune"},{"compiler":[[44,31]],"locations":[["(cbrt.f64 (fma.f64 x 1/3 -4/3))",0.03125,true],["(fma.f64 x 1/3 -4/3)",0.12890625,false],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))",0.1484375,true],["(pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3)",0.9398613769897464,true]],"time":14.371826171875,"type":"localize"},{"count":[[3,26]],"series":[["(cbrt.f64 (fma.f64 x 1/3 -4/3))","x","-inf",0.258056640625],["(cbrt.f64 (fma.f64 x 1/3 -4/3))","x","inf",0.322021484375],["(cbrt.f64 (fma.f64 x 1/3 -4/3))","x","0",0.3828125],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","y","-inf",0.451904296875],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","y","inf",0.535888671875],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","y","0",1.885986328125],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","x","-inf",0.431884765625],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","x","inf",0.677978515625],["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","x","0",0.580078125],["(pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3)","x","-inf",0.51806640625],["(pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3)","x","inf",0.81201171875],["(pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3)","x","0",1.75]],"time":8.968994140625,"type":"series"},{"count":[[3,114]],"egraph":[[2,2889,27,0.030436958],[1,274,27,0.005662458],[0,13,27,0.000636791]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3)","(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","(cbrt.f64 (fma.f64 x 1/3 -4/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 -4/3 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 1/3 -4/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/3) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 1) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/3 -4/3))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/3 -4/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/3 -4/3)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/3 -4/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x 1/3 -4/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 1/3 -4/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 1/3 -4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2) (cbrt.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 1/3 -4/3)) (sqrt.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 1/6) (pow.f64 (fma.f64 x 1/3 -4/3) 5/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 5/6) (pow.f64 (fma.f64 x 1/3 -4/3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2) 1) (cbrt.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 1/3) 3) -64/27) (+.f64 (pow.f64 (*.f64 x 1/3) 2) (-.f64 16/9 (*.f64 (*.f64 x 1/3) -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x 1/3) 2) 16/9) (fma.f64 x 1/3 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x 1/3 -4/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x 1/3 -4/3))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/3 -4/3))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x 1/3 -4/3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/3 -4/3)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/3 -4/3)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 3/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/3 -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 x -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 1/3) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1/3) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1/3) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/3) 1 -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 1/3)) 2) (cbrt.f64 (*.f64 x 1/3)) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 1/3)) (sqrt.f64 (*.f64 x 1/3)) -4/3)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)) 1) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) 2) (cbrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) (sqrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)) 3) (pow.f64 y -3)) (+.f64 (pow.f64 (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)) 2) (-.f64 (pow.f64 y -2) (*.f64 (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)) (/.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)) 2) (pow.f64 y -2)) (-.f64 (*.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))) 2)) (cbrt.f64 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))) (sqrt.f64 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 y))) (pow.f64 (exp.f64 (/.f64 x y)) (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (/.f64 x y)) (fma.f64 x 1/3 -4/3)) (+.f64 1 (expm1.f64 (/.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (fma.f64 x 1/3 -4/3) (/.f64 x y) (/.f64 1 y))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 1/6) (pow.f64 (fma.f64 x 1/3 -4/3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/3 -4/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 (fma.f64 x 1/3 -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/3 -4/3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/3 -4/3) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))) (sqrt.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x 1/3 -4/3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (fma.f64 x 1/3 -4/3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/3 -4/3)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/3 -4/3)) 1) 1/3))))))"]],"rules":[["egg-rr",36],["egg-rr",36],["egg-rr",42]],"stop":[["node limit",1]],"time":58.20703125,"type":"rewrite"},{"count":[[140,138]],"egraph":[[3,5472,541,0.025497001],[2,1106,584,0.010463834],[1,354,627,0.002586501],[0,120,745,0.000651709]],"inputs":[["-4/3","(-.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) x) 4/3)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) (cbrt.f64 -4/3)) (+.f64 (*.f64 2/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)) (*.f64 -1/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)))) (pow.f64 x 2)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) x)) 4/3)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) (cbrt.f64 -4/3)) (+.f64 (*.f64 2/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)) (*.f64 -1/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (*.f64 1/729 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 -2/243 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))))) (cbrt.f64 -4/3))) (*.f64 1/486 (pow.f64 1 1/3))) (cbrt.f64 -4/3)) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 1/729 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 -2/243 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))))) (*.f64 -2/729 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))))))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) x))) 4/3)","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y)))) (pow.f64 x 2)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y)))) (pow.f64 x 2)) (+.f64 (*.f64 -4/3 (/.f64 x y)) (*.f64 (+.f64 (*.f64 -1/81 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3) (/.f64 1 y))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) (cbrt.f64 -4/3)) y) (*.f64 2/81 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3) (/.f64 1 y))))) (pow.f64 x 3)))))","(/.f64 1 y)","(/.f64 1 y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(cbrt.f64 -4/3)","(+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) x)) (cbrt.f64 -4/3))","(+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) x)) (+.f64 (cbrt.f64 -4/3) (*.f64 -1/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)) 1/3) (pow.f64 x 2)))))","(+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) x)) (+.f64 (*.f64 -1/3 (/.f64 (*.f64 (+.f64 (*.f64 1/729 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 -2/243 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -4/3) 2))) (+.f64 (cbrt.f64 -4/3) (*.f64 -1/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)) 1/3) (pow.f64 x 2))))))"]],"method":["egg-herbie"],"outputs":[["-4/3","(-.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) x) 4/3)","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) x -4/3)","(fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4))) x -4/3)","(fma.f64 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))) (*.f64 1/3 x) -4/3)","(fma.f64 1/3 (*.f64 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))) x) -4/3)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) (cbrt.f64 -4/3)) (+.f64 (*.f64 2/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)) (*.f64 -1/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)))) (pow.f64 x 2)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) x)) 4/3)","(+.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) -1/81) (cbrt.f64 -4/3) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) 1/81)) (*.f64 x x)) (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) x -4/3))","(fma.f64 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) 1/81 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) (*.f64 -1/81 (cbrt.f64 -4/3)))) (*.f64 x x) (fma.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4))) x -4/3))","(fma.f64 (fma.f64 1/81 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 -4/3) -1/81))) (*.f64 x x) (fma.f64 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))) (*.f64 1/3 x) -4/3))","(fma.f64 x (+.f64 (*.f64 1/3 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3)))) (*.f64 x (fma.f64 1/81 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 -4/3) -1/81))))) -4/3)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) (cbrt.f64 -4/3)) (+.f64 (*.f64 2/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)) (*.f64 -1/81 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3)))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (*.f64 1/729 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 -2/243 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))))) (cbrt.f64 -4/3))) (*.f64 1/486 (pow.f64 1 1/3))) (cbrt.f64 -4/3)) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 1/729 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 -2/243 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))))) (*.f64 -2/729 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))))))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) x))) 4/3)","(+.f64 (fma.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) -1/81) (cbrt.f64 -4/3) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) 1/81)) (*.f64 x x) (fma.f64 (fma.f64 (fma.f64 -2/3 (/.f64 (+.f64 (/.f64 1/729 (pow.f64 (cbrt.f64 -4/3) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) -2/243)) (cbrt.f64 -4/3)) 1/486) (cbrt.f64 -4/3) (fma.f64 1/9 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) -1/81) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (fma.f64 -1/3 (+.f64 (/.f64 1/729 (pow.f64 (cbrt.f64 -4/3) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) -2/243)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) -2/729)))) (pow.f64 x 3) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) x))) -4/3)","(+.f64 -4/3 (fma.f64 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) 1/81 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) (*.f64 -1/81 (cbrt.f64 -4/3)))) (*.f64 x x) (fma.f64 (fma.f64 (cbrt.f64 -4/3) (fma.f64 -2/3 (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) -5/729) (cbrt.f64 -4/3)) 1/486) (fma.f64 1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) (*.f64 -1/81 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))))) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) -5/729) -1/3 (/.f64 -2/729 (pow.f64 (cbrt.f64 -4/3) 2))))) (pow.f64 x 3) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) (*.f64 1/3 x)))))","(fma.f64 x (*.f64 x (fma.f64 1/81 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 -4/3) -1/81)))) (fma.f64 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))) (*.f64 1/3 x) (fma.f64 (fma.f64 (cbrt.f64 -4/3) (fma.f64 -2/3 (/.f64 (/.f64 -5/729 (pow.f64 (cbrt.f64 -4/3) 2)) (cbrt.f64 -4/3)) 1/486) (fma.f64 (/.f64 -5/729 (pow.f64 (cbrt.f64 -4/3) 2)) -1/3 (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3))) -1/729) (/.f64 -2/729 (pow.f64 (cbrt.f64 -4/3) 2))))) (pow.f64 x 3) -4/3)))","(+.f64 -4/3 (*.f64 x (+.f64 (*.f64 1/3 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3)))) (*.f64 x (+.f64 (*.f64 x (fma.f64 (cbrt.f64 -4/3) -1/729 (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3))) -1/729) (/.f64 -1/2187 (pow.f64 (cbrt.f64 -4/3) 2))))) (fma.f64 1/81 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3))) (*.f64 (cbrt.f64 -4/3) -1/81))))))))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (/.f64 (*.f64 -4/3 x) y))","(fma.f64 -4/3 (/.f64 x y) (/.f64 1 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y)))) (pow.f64 x 2)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (fma.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) (/.f64 1 y)) 1/3) (*.f64 x x) (/.f64 (*.f64 -4/3 x) y)))","(+.f64 (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) y) (*.f64 1/3 (*.f64 x x))))","(fma.f64 -4/3 (/.f64 x y) (fma.f64 x (*.f64 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))) (*.f64 (/.f64 1/3 y) x)) (/.f64 1 y)))","(fma.f64 (/.f64 (*.f64 x x) (/.f64 y (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))))) 1/3 (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y))) (*.f64 2/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3) (/.f64 1 y)))) (pow.f64 x 2)) (+.f64 (*.f64 -4/3 (/.f64 x y)) (*.f64 (+.f64 (*.f64 -1/81 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3) (/.f64 1 y))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3)) (*.f64 -2/81 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4)) 1/3))) (cbrt.f64 -4/3)) y) (*.f64 2/81 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -4/3)) 1/3) (/.f64 1 y))))) (pow.f64 x 3)))))","(+.f64 (/.f64 1 y) (fma.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) (/.f64 1 y)) 1/3) (*.f64 x x) (fma.f64 -4/3 (/.f64 x y) (*.f64 (pow.f64 x 3) (fma.f64 -1/81 (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) (/.f64 1 y)) (+.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) -1/81) (/.f64 y (cbrt.f64 -4/3))) (*.f64 2/81 (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) (/.f64 1 y)))))))))","(+.f64 (/.f64 1 y) (fma.f64 (*.f64 x x) (*.f64 1/3 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -4/3) 4)) y)) (fma.f64 (pow.f64 x 3) (fma.f64 -1/81 (/.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) y) (fma.f64 2/81 (/.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) y) (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 4))) (/.f64 (/.f64 y (cbrt.f64 -4/3)) -1/81)))) (*.f64 -4/3 (/.f64 x y)))))","(+.f64 (fma.f64 -4/3 (/.f64 x y) (/.f64 1 y)) (*.f64 (*.f64 x x) (+.f64 (*.f64 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))) (/.f64 1/3 y)) (*.f64 x (fma.f64 (/.f64 (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3))) (/.f64 y -1/81)) (cbrt.f64 -4/3) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) y) 1/81))))))","(+.f64 (*.f64 x (+.f64 (*.f64 (cbrt.f64 (*.f64 -4/3 (cbrt.f64 -4/3))) (*.f64 (/.f64 1/3 y) x)) (/.f64 -4/3 y))) (fma.f64 (pow.f64 x 3) (fma.f64 (*.f64 (/.f64 -1/81 y) (cbrt.f64 (/.f64 -3/4 (cbrt.f64 -4/3)))) (cbrt.f64 -4/3) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -4/3))) y) 1/81)) (/.f64 1 y)))","(/.f64 1 y)","(/.f64 1 y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(/.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) y)","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x))) 1) y))","(/.f64 (+.f64 1 (*.f64 1 (*.f64 x (fma.f64 1/3 x -4/3)))) y)","(/.f64 (fma.f64 (fma.f64 1/3 x -4/3) x 1) y)","(/.f64 (fma.f64 x (fma.f64 1/3 x -4/3) 1) y)","(cbrt.f64 -4/3)","(+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) x)) (cbrt.f64 -4/3))","(fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (cbrt.f64 -4/3))","(+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) x)) (+.f64 (cbrt.f64 -4/3) (*.f64 -1/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)) 1/3) (pow.f64 x 2)))))","(+.f64 (fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (cbrt.f64 -4/3)) (*.f64 -1/81 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7))))))","(fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (fma.f64 -1/81 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)))) (cbrt.f64 -4/3)))","(fma.f64 (*.f64 x x) (*.f64 -1/81 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)))) (fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (cbrt.f64 -4/3)))","(+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) 1/3) x)) (+.f64 (*.f64 -1/3 (/.f64 (*.f64 (+.f64 (*.f64 1/729 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))) (*.f64 -2/243 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -4/3) 2))) (+.f64 (cbrt.f64 -4/3) (*.f64 -1/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)) 1/3) (pow.f64 x 2))))))","(fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (fma.f64 -1/3 (/.f64 (+.f64 (/.f64 1/729 (pow.f64 (cbrt.f64 -4/3) 2)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) -2/243)) (/.f64 (pow.f64 (cbrt.f64 -4/3) 2) (pow.f64 x 3))) (+.f64 (cbrt.f64 -4/3) (*.f64 -1/81 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7))))))))","(fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (fma.f64 -1/3 (*.f64 (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)) -5/729) (pow.f64 (cbrt.f64 -4/3) 2)) (pow.f64 x 3)) (fma.f64 -1/81 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)))) (cbrt.f64 -4/3))))","(fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (fma.f64 (*.f64 x x) (*.f64 -1/81 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)))) (fma.f64 -1/3 (*.f64 (pow.f64 x 3) (/.f64 (/.f64 -5/729 (pow.f64 (cbrt.f64 -4/3) 2)) (pow.f64 (cbrt.f64 -4/3) 2))) (cbrt.f64 -4/3))))","(+.f64 (fma.f64 1/9 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 2)))) (cbrt.f64 -4/3)) (*.f64 (*.f64 x x) (+.f64 (*.f64 -1/81 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -4/3) 7)))) (*.f64 -5/2916 (/.f64 x (cbrt.f64 -4/3))))))"]],"stop":[["node limit",1]],"time":45.861083984375,"type":"simplify"},{"compiler":[[3444,2523]],"time":51.639892578125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","done",0.28656015629507225],["(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","fresh",40.72331985237209],["(fma.f64 (/.f64 x y) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2))) (/.f64 1 y))","fresh",0.3428052488417059],["(fma.f64 (/.f64 x y) (fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1/3) -4/3) (/.f64 1 y))","fresh",31.873085058610656],["(fma.f64 (/.f64 x y) (fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1/3) -4/3) (/.f64 1 y))","fresh",0.27248638907351597],["(*.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2))","fresh",0.7517803344423566],["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","done",0.15300751953688405],["(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","fresh",6.11328125]],"compiler":[[16,12],[10,7],[32,26],[17,11],[19,13],[29,20],[13,9],[13,10]],"count":[[171,8]],"kept":[{"done":[2,1],"fresh":[4,3],"new":[164,3],"picked":[1,1]}],"min-error":[0.0078125],"time":33.39501953125,"type":"prune"},{"accuracy":[0.15300751953688402],"baseline":[0.15300751953688405],"branch":[["x",0.15300751953688405,1],["y",0.15300751953688405,1],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))",0.15300751953688402,1],["(*.f64 (-.f64 1 x) (-.f64 3 x))",0.15300751953688402,1],["(*.f64 y 3)",0.15300751953688405,1],["(*.f64 y 3)",0.15300751953688405,1]],"compiler":[[3,2],[3,2],[13,10],[9,7],[5,4],[5,4],[279,189]],"count":[[19,1]],"inputs":[["(fma.f64 (/.f64 x y) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3))) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 2))) (/.f64 1 y))","(fma.f64 (/.f64 x y) (fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1/3) -4/3) (/.f64 1 y))","(fma.f64 (/.f64 x y) (fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1/3) -4/3) (/.f64 1 y))","(pow.f64 (sqrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2)","(/.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 1/3 x) 4/3) x)) y)","(fma.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -4/3)) 3) (/.f64 1 y))","(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","(*.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))) 2))","(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)) 2))","(*.f64 (fma.f64 x (+.f64 x -4) 3) (pow.f64 (*.f64 y 3) -1))","(pow.f64 (cbrt.f64 (*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))) 3)","(/.f64 (fma.f64 x (fma.f64 x 1/3 -4/3) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (fma.f64 x (+.f64 x -4) 3) (*.f64 y 3))","(*.f64 x (/.f64 (fma.f64 x 1/3 -4/3) y))","(*.f64 (fma.f64 x (+.f64 x -4) 3) (/.f64 1/3 y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))"]],"link":["."],"name":["Diagrams.TwoD.Arc:bezierFromSweepQ1 from diagrams-lib-1.3.0.3"],"oracle":[59.296070635364096],"outputs":[["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))"]],"time":45.359130859375,"times":[["x",7.1279296875],["y",7.0390625],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))",7.218994140625],["(*.f64 (-.f64 1 x) (-.f64 3 x))",3.264892578125],["(*.f64 y 3)",7.133056640625],["(*.f64 y 3)",7.485107421875]],"type":"regimes"},{"compiler":[[13,9]],"egraph":[[1,12,15,4.5292e-5],[0,10,15,2.6417e-5]],"inputs":[["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (/.f64 x y) (fma.f64 x 1/3 -4/3) (/.f64 1 y))"]],"stop":[["fuel",1],["saturated",1]],"time":9.119873046875,"type":"simplify"},{"time":0.028076171875,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":11.098876953125,"type":"end"}]
[{"compiler":[[36,28]],"method":["search"],"sampling":[[12,0.013157863396600827,0.16959023933396622,0.8172518972694329],[11,0.008771908931067218,0.21052581434561324,0.7807022767233196],[10,0.0058479392873781455,0.2573093286446384,0.7368427320679835],[9,0.0038986261915854303,0.3118900953268344,0.6842112784815801],[8,0.0,0.4210516286912265,0.5789483713087735],[7,0.0,0.561402171588302,0.43859782841169803],[6,0.0,0.7485362287844026,0.2514637712155974],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":94.242919921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",1471.41357421875,16004],["body",512,"valid",807.045166015625,4506],["body",1024,"valid",472.02685546875,1780],["body",256,"valid",186.026611328125,1970]],"time":2958.19921875,"type":"sample"},{"compiler":[[35,27]],"egraph":[[1,4,4,1.3459e-5],[0,4,4,1.2542e-5],[5,7021,350,0.036235458],[4,4688,350,0.02083975],[3,2852,350,0.010255875000000001],[2,537,350,0.004233584],[1,141,350,0.0007583749999999999],[0,42,350,0.000173625]],"inputs":[["0","1","2","3"],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2","0","3","0"],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (sqrt.f64 (+.f64 1 y)) (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z))))) (sqrt.f64 z))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 t)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 1 z)) (+.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (sqrt.f64 (+.f64 1 y)) (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z))))) (sqrt.f64 z))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 t)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 1 z)) (+.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (sqrt.f64 (+.f64 1 y)) (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z))))) (sqrt.f64 z))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 t)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 1 z)) (+.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (sqrt.f64 (+.f64 1 y)) (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z))))) (sqrt.f64 z))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 t)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 1 z)) (+.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (sqrt.f64 (+.f64 1 y)) (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z))))) (sqrt.f64 z))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 t)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 1 z)) (+.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (sqrt.f64 (+.f64 1 y)) (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z))))) (sqrt.f64 z))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 t)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 1 z)) (+.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (sqrt.f64 (+.f64 1 y)) (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z))))) (sqrt.f64 z))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 t)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 1 z)) (+.f64 (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))"]],"stop":[["unsound",1],["node limit",1]],"symmetry":[["(sort x y z t)"]],"time":65.117919921875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[4,4916,50,0.018202625],[3,974,50,0.007209166],[2,168,50,0.001306458],[1,54,50,0.00027070800000000004],[0,25,50,7.5375e-5]],"inputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))","(+.f64 (-.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 1 y))) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 1 t)) (-.f64 (sqrt.f64 t) (sqrt.f64 (+.f64 1 z)))))","(+.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 x))) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 y)) (+.f64 (sqrt.f64 t) (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 1 t))))))"]],"stop":[["node limit",1]],"time":29.60205078125,"type":"simplify"},{"compiler":[[66,46]],"time":0.98583984375,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","next",4.412353763693683],["(+.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 x))) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 y)) (+.f64 (sqrt.f64 t) (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 1 t))))))","fresh",43.946438319352886]],"compiler":[[35,27],[35,27],[35,27],[35,27]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[4.3794020272574],"time":2.087158203125,"type":"prune"},{"compiler":[[142,87]],"locations":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.7574740230899919,true],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",1.6780646049938612,true],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",3.7863541381754375,true],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",6.1821748333565605,true]],"time":32.348876953125,"type":"localize"},{"count":[[4,4]],"series":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","-inf",0.47802734375],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","inf",0.681884765625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","0",0.258056640625],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","t","-inf",0.47607421875],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","t","inf",0.64892578125],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","t","0",0.2958984375],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))","y","-inf",0.58203125],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))","y","inf",0.657958984375],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))","y","0",0.295166015625],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","z","-inf",0.68798828125],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","z","inf",1.154052734375],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","z","0",0.4990234375]],"time":6.873046875,"type":"series"},{"count":[[4,148]],"egraph":[[2,7388,44,0.042726416],[1,504,44,0.009300708000000001],[0,22,44,0.000454416]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))","(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))","(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))","(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (sqrt.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2)) (/.f64 1 (+.f64 (+.f64 z 1) (+.f64 z (sqrt.f64 (*.f64 (+.f64 z 1) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z (-.f64 1 z)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (-.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (+.f64 z 1) (+.f64 z (sqrt.f64 (*.f64 (+.f64 z 1) z)))) (-.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (+.f64 z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2)) (+.f64 (+.f64 z 1) (+.f64 z (sqrt.f64 (*.f64 (+.f64 z 1) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2))) (neg.f64 (+.f64 (+.f64 z 1) (+.f64 z (sqrt.f64 (*.f64 (+.f64 z 1) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 z (-.f64 1 z))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 (neg.f64 (sqrt.f64 z)) 3)) (+.f64 (+.f64 z 1) (-.f64 (*.f64 (neg.f64 (sqrt.f64 z)) (neg.f64 (sqrt.f64 z))) (*.f64 (sqrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 z 1) (*.f64 (neg.f64 (sqrt.f64 z)) (neg.f64 (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 (+.f64 z 1) 1/4) (neg.f64 (sqrt.f64 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 y)) (*.f64 (neg.f64 (sqrt.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (sqrt.f64 y)) 1 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 y))) (cbrt.f64 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (pow.f64 y 1/4)) (pow.f64 y 1/4) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 y)) (sqrt.f64 (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2)) (/.f64 1 (+.f64 y (+.f64 1 (+.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 y y)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 y 1/4)) (-.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 y 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 y (+.f64 1 (+.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y))))) (-.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (+.f64 1 (-.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2)) (+.f64 y (+.f64 1 (+.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2))) (neg.f64 (+.f64 y (+.f64 1 (+.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (-.f64 y y))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 (neg.f64 (sqrt.f64 y)) 3)) (+.f64 (+.f64 1 y) (-.f64 (*.f64 (neg.f64 (sqrt.f64 y)) (neg.f64 (sqrt.f64 y))) (*.f64 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 y) (*.f64 (neg.f64 (sqrt.f64 y)) (neg.f64 (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 y)) (cbrt.f64 (sqrt.f64 (+.f64 1 y))) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 (+.f64 1 y) 1/4) (neg.f64 (sqrt.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 t)) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 t)) (*.f64 (neg.f64 (sqrt.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) (fma.f64 (neg.f64 (sqrt.f64 t)) 1 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 t))) (cbrt.f64 t) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) (fma.f64 (neg.f64 (pow.f64 t 1/4)) (pow.f64 t 1/4) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 t)) (sqrt.f64 (+.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 1 t) 3/2) (pow.f64 t 3/2)) (/.f64 1 (+.f64 1 (+.f64 t (+.f64 t (sqrt.f64 (*.f64 (+.f64 1 t) t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 t t)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 t) 1/4) (pow.f64 t 1/4)) (-.f64 (pow.f64 (+.f64 1 t) 1/4) (pow.f64 t 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (+.f64 t (+.f64 t (sqrt.f64 (*.f64 (+.f64 1 t) t))))) (-.f64 (pow.f64 (+.f64 1 t) 3/2) (pow.f64 t 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) (+.f64 1 (-.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 t) 3/2) (pow.f64 t 3/2)) (+.f64 1 (+.f64 t (+.f64 t (sqrt.f64 (*.f64 (+.f64 1 t) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 1 t) 3/2) (pow.f64 t 3/2))) (neg.f64 (+.f64 1 (+.f64 t (+.f64 t (sqrt.f64 (*.f64 (+.f64 1 t) t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (-.f64 t t))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 t) 3/2) (pow.f64 (neg.f64 (sqrt.f64 t)) 3)) (+.f64 (+.f64 1 t) (-.f64 (*.f64 (neg.f64 (sqrt.f64 t)) (neg.f64 (sqrt.f64 t))) (*.f64 (sqrt.f64 (+.f64 1 t)) (neg.f64 (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 t) (*.f64 (neg.f64 (sqrt.f64 t)) (neg.f64 (sqrt.f64 t)))) (-.f64 (sqrt.f64 (+.f64 1 t)) (neg.f64 (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 1 t)) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 t)) (cbrt.f64 (sqrt.f64 (+.f64 1 t))) (neg.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 t) 1/4) (pow.f64 (+.f64 1 t) 1/4) (neg.f64 (sqrt.f64 t)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 x)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 x)) (*.f64 (neg.f64 (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)) (/.f64 1 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 x x)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)) (-.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (-.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (+.f64 1 (-.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)) (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (neg.f64 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (-.f64 x x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 (neg.f64 (sqrt.f64 x)) 3)) (+.f64 (+.f64 1 x) (-.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 1 x)) (neg.f64 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 x) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (+.f64 1 x)) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 1 x)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 (sqrt.f64 (+.f64 1 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 (+.f64 1 x) 1/4) (neg.f64 (sqrt.f64 x)))))))"]],"rules":[["egg-rr",37],["egg-rr",37],["egg-rr",37],["egg-rr",37]],"stop":[["node limit",1]],"time":70.784912109375,"type":"rewrite"},{"count":[[152,149]],"egraph":[[1,4,4,4.6042000000000004e-5],[0,1,4,2.8333e-5]],"inputs":[["1","1","1","1"]],"method":["egg-herbie"],"outputs":[["1","1","1","1"]],"stop":[["saturated",1]],"time":11.51904296875,"type":"simplify"},{"compiler":[[5685,3607]],"time":52.35693359375,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","fresh",4.412353763693683],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",4.41625953745863],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",3.7972929888569107],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","next",2.5082754403348293],["(+.f64 (+.f64 (+.f64 (/.f64 1 (/.f64 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (-.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",4.400703294497055],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","fresh",4.10387813482049],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 1 y) (*.f64 (neg.f64 (sqrt.f64 y)) (neg.f64 (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",8.912648354585823],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 (+.f64 1 y) 1/4) (neg.f64 (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",15.740789204162544],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 y))) (cbrt.f64 y) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",15.794170668069825],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",3.579877652453419]],"compiler":[[38,30],[37,29],[41,31],[41,31],[52,40],[41,31],[48,33],[42,33],[45,32],[41,31],[38,30],[37,29],[41,31],[41,31],[52,40],[41,31],[48,33],[42,33],[45,32],[41,31]],"count":[[151,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[149,10],"picked":[1,0]}],"min-error":[0.8544858834609083],"time":51.237060546875,"type":"prune"},{"compiler":[[181,106]],"locations":[["(/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))",0.03125,true],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",1.6780646049938612,false],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",3.7863541381754375,false],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",6.1821748333565605,false]],"time":39.2099609375,"type":"localize"},{"count":[[1,1]],"series":[["(/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))","x","-inf",1.7900390625],["(/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))","x","inf",1.260986328125],["(/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))","x","0",0.77099609375]],"time":3.8759765625,"type":"series"},{"count":[[1,33]],"egraph":[[2,2676,11,0.021257501],[1,244,11,0.003685917],[0,10,14,0.000363917]],"inputs":[["(/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 x)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 x)) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 x)) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 x)) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)) (-.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 (+.f64 1 x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (+.f64 1 x))) (exp.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 1 x)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 (sqrt.f64 (+.f64 1 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 (+.f64 1 x) 1/4) (neg.f64 (sqrt.f64 x)))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":39.781982421875,"type":"rewrite"},{"count":[[34,34]],"egraph":[[1,4,1,4.5292e-5],[0,1,1,2.7792e-5]],"inputs":[["1"]],"method":["egg-herbie"],"outputs":[["1"]],"stop":[["saturated",1]],"time":10.819091796875,"type":"simplify"},{"compiler":[[6160,3826]],"time":53.89599609375,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 (+.f64 1 y) 1/4) (neg.f64 (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",15.740789204162544],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","fresh",2.5082754403348293],["(+.f64 (+.f64 (+.f64 (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 (+.f64 1 x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",2.6508539146580774],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","fresh",2.246247680181991],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",2.5121812140997757],["(+.f64 (+.f64 (+.f64 (/.f64 1 (/.f64 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (-.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",4.400703294497055],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","next",1.623912714115485],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 1 y) (*.f64 (neg.f64 (sqrt.f64 y)) (neg.f64 (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",8.912648354585823],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 y))) (cbrt.f64 y) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",15.794170668069825],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",1.8932146654980575]],"compiler":[[42,33],[44,34],[52,40],[47,35],[43,33],[52,40],[47,35],[48,33],[45,32],[47,35],[42,33],[44,34],[52,40],[47,35],[43,33],[52,40],[47,35],[48,33],[45,32],[47,35]],"count":[[156,10]],"kept":[{"done":[0,0],"fresh":[9,4],"new":[146,6],"picked":[1,0]}],"min-error":[0.6741617675619909],"time":53.969970703125,"type":"prune"},{"compiler":[[220,125]],"locations":[["(/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))",0.03125,false],["(/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))",0.1015625,true],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",1.6780646049938612,false],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",6.1821748333565605,false]],"time":45.510986328125,"type":"localize"},{"count":[[1,1]],"series":[["(/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))","y","-inf",1.05615234375],["(/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))","y","inf",0.656005859375],["(/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))","y","0",0.406005859375]],"time":2.1669921875,"type":"series"},{"count":[[1,33]],"egraph":[[2,2676,11,0.021231959],[1,244,11,0.003661376],[0,10,14,0.000352584]],"inputs":[["(/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 y)) (*.f64 -1 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 y)) (*.f64 (neg.f64 (cbrt.f64 y)) (cbrt.f64 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 1 y)) (*.f64 (neg.f64 (pow.f64 y 1/4)) (pow.f64 y 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (sqrt.f64 y)) 1 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 y))) (cbrt.f64 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (pow.f64 y 1/4)) (pow.f64 y 1/4) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 y 1/4)) (-.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 y 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2))) (+.f64 (+.f64 1 y) (-.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (+.f64 1 y))) (exp.f64 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 y)) (cbrt.f64 (sqrt.f64 (+.f64 1 y))) (neg.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 (+.f64 1 y) 1/4) (neg.f64 (sqrt.f64 y)))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":39.6259765625,"type":"rewrite"},{"count":[[34,34]],"egraph":[[1,4,1,4.5291e-5],[0,1,1,2.7666e-5]],"inputs":[["1"]],"method":["egg-herbie"],"outputs":[["1"]],"stop":[["saturated",1]],"time":10.8271484375,"type":"simplify"},{"compiler":[[6599,4027]],"time":56.77001953125,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 1 y)) (*.f64 (neg.f64 (cbrt.f64 y)) (cbrt.f64 (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",7.391870579714762],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","fresh",1.623912714115485],["(+.f64 (+.f64 (+.f64 (expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",3.591596402453419],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2))) (+.f64 (+.f64 1 y) (-.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y)))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",4.1160952271493185],["(+.f64 (+.f64 (+.f64 (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 (+.f64 1 x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",1.8638152043470428],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","fresh",1.3618849539626463],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) 1)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",2.5082749640997757],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","next",1.0088522227416927]],"compiler":[[46,35],[50,38],[43,33],[58,44],[58,44],[53,39],[45,35],[53,39],[46,35],[50,38],[43,33],[58,44],[58,44],[53,39],[45,35],[53,39]],"count":[[153,8]],"kept":[{"done":[0,0],"fresh":[9,0],"new":[143,8],"picked":[1,0]}],"min-error":[0.6741508763533548],"time":50.197998046875,"type":"prune"},{"compiler":[[253,146]],"locations":[["(/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))",0.0703125,true],["(/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))",0.1015625,false],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",1.6780646049938612,false],["(+.f64 z (-.f64 1 z))",4.601457883457662,true]],"time":53.85693359375,"type":"localize"},{"count":[[2,13]],"series":[["(/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))","z","-inf",1.0810546875],["(/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))","z","inf",0.68017578125],["(/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))","z","0",0.368896484375],["(+.f64 z (-.f64 1 z))","z","-inf",0.13916015625],["(+.f64 z (-.f64 1 z))","z","inf",0.16796875],["(+.f64 z (-.f64 1 z))","z","0",0.173095703125]],"time":2.68701171875,"type":"series"},{"count":[[2,247]],"egraph":[[2,3628,18,0.028334583],[1,236,18,0.004659125],[0,10,27,0.000273]],"inputs":[["(+.f64 z (-.f64 1 z))","(/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 z 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 z (-.f64 1 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 z z) (+.f64 (+.f64 z -1) z)) (/.f64 (pow.f64 (-.f64 1 z) 2) (+.f64 (+.f64 z -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (+.f64 z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (sqrt.f64 (+.f64 z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3)) (/.f64 1 (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2)) (/.f64 1 (+.f64 (+.f64 z -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z)) (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (+.f64 z -1) z) (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3)) (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3)) (+.f64 (pow.f64 (-.f64 1 z) 2) (-.f64 (*.f64 z z) (*.f64 z (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2)) (+.f64 (+.f64 z -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3))) (neg.f64 (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2))) (neg.f64 (+.f64 (+.f64 z -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 z 1) 3) (pow.f64 z 3)) (+.f64 (pow.f64 (+.f64 z 1) 2) (fma.f64 z z (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 z 1) 2) (*.f64 z z)) (+.f64 (+.f64 z 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 z) 2) (*.f64 z z)) (-.f64 (-.f64 1 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 z (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z)) (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (+.f64 z -1) z) (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 z (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 z 1))) (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (+.f64 z 1)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 z 1))) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 z)) (exp.f64 (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 z) (+.f64 1 (expm1.f64 (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 z)) (+.f64 1 (expm1.f64 (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 z))) (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 1 z)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 z))) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 z 1)) (exp.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 z 1))) (exp.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 z 1)) (/.f64 1 (exp.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 z 1))) (/.f64 1 (exp.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 z (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (-.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (-.f64 z z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 1 (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 z (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 z) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z (-.f64 1 z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z (-.f64 1 z)) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z (-.f64 1 z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) 1 z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z (-.f64 1 z)) 1 (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z (-.f64 1 z)) 1 (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z (-.f64 1 z)) 1 (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z 1) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 (+.f64 z 1)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (sqrt.f64 z) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (+.f64 z (-.f64 1 z))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (+.f64 z (-.f64 1 z))) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (+.f64 z (-.f64 1 z))) (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 z z)) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (sqrt.f64 z)) (sqrt.f64 z)) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 z) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) 1) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (cbrt.f64 (pow.f64 (+.f64 z 1) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (*.f64 (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (sqrt.f64 (+.f64 z 1))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2)) (cbrt.f64 (+.f64 z 1)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (pow.f64 (cbrt.f64 (-.f64 1 z)) 2) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 z)) 2) (cbrt.f64 (-.f64 1 z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 1/4) (*.f64 (pow.f64 z 1/4) (sqrt.f64 z)) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (sqrt.f64 (+.f64 z (-.f64 1 z))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (sqrt.f64 (+.f64 z (-.f64 1 z))) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (sqrt.f64 (+.f64 z (-.f64 1 z))) (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 z 1) 1/4) (*.f64 (pow.f64 (+.f64 z 1) 1/4) (sqrt.f64 (+.f64 z 1))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 z)) (sqrt.f64 (-.f64 1 z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 z 3)) (/.f64 1 (+.f64 1 (fma.f64 z z z))) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3)) (/.f64 1 (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3)) (/.f64 1 (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z))) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 z 3) (pow.f64 (-.f64 1 z) 3)) (/.f64 1 (fma.f64 (-.f64 1 z) (-.f64 (-.f64 1 z) z) (*.f64 z z))) (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 z 3)) (/.f64 1 (-.f64 (fma.f64 z z 1) z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 z z)) (/.f64 1 (+.f64 z 1)) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2)) (/.f64 1 (+.f64 (+.f64 z -1) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2)) (/.f64 1 (+.f64 (+.f64 z -1) z)) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 z z) (pow.f64 (-.f64 1 z) 2)) (/.f64 1 (+.f64 (+.f64 z -1) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 z z -1) (/.f64 1 (+.f64 z -1)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (+.f64 z 1) 1/4) 3) (pow.f64 (+.f64 z 1) 1/4) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 z 1/4) 3) (pow.f64 z 1/4) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 z z)) (+.f64 1 (pow.f64 z 3))) (-.f64 (fma.f64 z z 1) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 z z)) (fma.f64 z z -1)) (+.f64 z -1) z)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 z) (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (+.f64 z 1)) (cbrt.f64 (+.f64 z 1))) (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (neg.f64 z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 z 1)) (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 z 1) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 z (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z (-.f64 1 z)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (*.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (*.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (+.f64 z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) 1) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (+.f64 z (-.f64 1 z)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (+.f64 z (-.f64 1 z)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (-.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 z (-.f64 1 z))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2))) (-.f64 (+.f64 (+.f64 z 1) z) (hypot.f64 z (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 3) (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 z (-.f64 1 z)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (+.f64 z 1))) (exp.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 z 1)))) (exp.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (+.f64 z 1))) (+.f64 1 (expm1.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 z 1)))) (+.f64 1 (expm1.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 3) (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 z 1)) (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z (-.f64 1 z)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z (-.f64 1 z)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z (-.f64 1 z)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z 1)) 1 (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z 1)) 1 (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z 1)) 1 (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z 1)) 1 (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (*.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (*.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (*.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z 1)) (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (cbrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (cbrt.f64 (+.f64 z 1)) (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (cbrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 z 1))) (cbrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (*.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (*.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (*.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 (+.f64 z 1) 1/4) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 (+.f64 z 1) 1/4) (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 (+.f64 z 1) 1/4) (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 (+.f64 z 1) 1/4) (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 z (-.f64 1 z))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (+.f64 z (-.f64 1 z)) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (+.f64 z (-.f64 1 z)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (+.f64 z (-.f64 1 z)) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 1 (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 1 (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 1 (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 z 1))) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 z 1))) (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 z 1))) (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 z 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 z 1))) (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 z 1)) (neg.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 z 1)) (*.f64 -1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 z 1)) (*.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) 1) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) 1) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) 1) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (+.f64 z (-.f64 1 z)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (+.f64 z (-.f64 1 z)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (+.f64 z (-.f64 1 z)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) 2))) (/.f64 (sqrt.f64 (+.f64 z (-.f64 1 z))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (+.f64 z (-.f64 1 z)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (+.f64 z (-.f64 1 z)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (+.f64 z (-.f64 1 z)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 z (-.f64 1 z)) 2)) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 z (-.f64 1 z))) (hypot.f64 (pow.f64 z 1/4) (pow.f64 (+.f64 z 1) 1/4))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (-.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (-.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (-.f64 (pow.f64 (+.f64 z 1) 1/4) (pow.f64 z 1/4)) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 z (-.f64 1 z))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 z (-.f64 1 z))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 z (-.f64 1 z))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2))) (-.f64 (+.f64 (+.f64 z 1) z) (hypot.f64 z (sqrt.f64 z))) (fma.f64 (neg.f64 (sqrt.f64 z)) 1 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2))) (-.f64 (+.f64 (+.f64 z 1) z) (hypot.f64 z (sqrt.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (pow.f64 (+.f64 z 1) 3/2) (pow.f64 z 3/2))) (-.f64 (+.f64 (+.f64 z 1) z) (hypot.f64 z (sqrt.f64 z))) (fma.f64 (neg.f64 (pow.f64 z 1/4)) (pow.f64 z 1/4) (sqrt.f64 z)))))))"]],"rules":[["egg-rr",143],["egg-rr",104]],"stop":[["node limit",1]],"time":62.39599609375,"type":"rewrite"},{"count":[[260,248]],"egraph":[[1,4,13,5.0125e-5],[0,1,13,3.1e-5]],"inputs":[["1","1","1","1","1","1","1","1","1","1","1","1","1"]],"method":["egg-herbie"],"outputs":[["1","1","1","1","1","1","1","1","1","1","1","1","1"]],"stop":[["saturated",1]],"time":13.89892578125,"type":"simplify"},{"compiler":[[18030,10864]],"time":150.2451171875,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) 1)) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",1.8893079392630039],["(+.f64 (+.f64 (+.f64 (expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",3.591596402453419],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",0.40413006453929556],["(+.f64 (+.f64 (+.f64 (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 (+.f64 1 x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",1.8638152043470428],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","fresh",1.0088522227416927],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (*.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",1.8932141892630039],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2))) (+.f64 (+.f64 1 y) (-.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y)))))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","fresh",3.4971329964663918],["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","fresh",0.7468244625888543]],"compiler":[[51,39],[43,33],[49,37],[58,44],[56,42],[59,44],[64,48],[59,43]],"count":[[327,8]],"kept":[{"done":[0,0],"fresh":[7,2],"new":[319,6],"picked":[1,0]}],"min-error":[0.06354013331650467],"time":144.76904296875,"type":"prune"},{"accuracy":[0.40413006453929556],"baseline":[0.40413006453929556],"branch":[["x",0.4041300645392957,1],["y",0.40413006453929556,1],["z",0.40413006453929556,1],["t",0.40413006453929556,1],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))",0.4041300645392957,1],["(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))",0.4041300645392956,1],["(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))",0.4041300645392956,1],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))",0.40413006453929556,1],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))",0.40413006453929556,1],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.40413006453929556,1],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.40413006453929556,1],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",0.40413006453929556,1],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",0.40413006453929556,1],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",0.4041300645392956,1],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",0.4041300645392956,1],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",0.40413006453929556,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[35,27],[27,21],[27,21],[19,15],[19,15],[11,9],[11,9],[11,9],[11,9],[11,9],[11,9],[11,9],[1396,872]],"count":[[32,1]],"inputs":[["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) 1)) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (*.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2))) (+.f64 (+.f64 1 y) (-.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y)))))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 1 y)) (*.f64 (neg.f64 (cbrt.f64 y)) (cbrt.f64 (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","(+.f64 (+.f64 (+.f64 (expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 y) 3/2) (pow.f64 y 3/2))) (+.f64 (+.f64 1 y) (-.f64 y (sqrt.f64 (*.f64 (+.f64 1 y) y)))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 (+.f64 1 x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) 1)) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","(+.f64 (+.f64 (+.f64 (*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 (+.f64 1 x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))) 2))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (/.f64 (+.f64 z (-.f64 1 z)) (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 1 (/.f64 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))) (-.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)))) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (/.f64 (+.f64 1 (-.f64 t t)) (+.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 1 y) (*.f64 (neg.f64 (sqrt.f64 y)) (neg.f64 (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 1 y)) (neg.f64 (sqrt.f64 y))))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (pow.f64 (+.f64 1 y) 1/4) (pow.f64 (+.f64 1 y) 1/4) (neg.f64 (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 y))) (cbrt.f64 y) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 x))) (-.f64 (-.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 y)) (+.f64 (sqrt.f64 t) (-.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 1 t))))))","(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"link":["."],"name":["Main:z from "],"oracle":[44.44294887708021],"outputs":[["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"time":110.226806640625,"times":[["x",9.23388671875],["y",9.260009765625],["z",9.425048828125],["t",9.22705078125],["(+.f64 (+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))",5.262939453125],["(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))",4.757080078125],["(+.f64 (+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))) (-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))",4.97900390625],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))",4.2109375],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y)))",4.347900390625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",3.049072265625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",3.258056640625],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",3.42822265625],["(-.f64 (sqrt.f64 (+.f64 y 1)) (sqrt.f64 y))",3.77197265625],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",2.8271484375],["(-.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z))",2.880859375],["(-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t))",2.663818359375]],"type":"regimes"},{"compiler":[[49,37]],"egraph":[[4,71,71,0.00027925],[3,68,71,0.00021837499999999998],[2,62,71,0.00015920799999999998],[1,52,71,0.000102875],[0,32,71,4.8583e-5]],"inputs":[["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 z 1)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 t 1)) (sqrt.f64 t)))","(+.f64 (+.f64 (+.f64 (/.f64 (+.f64 1 (-.f64 x x)) (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 (+.f64 1 (-.f64 y y)) (+.f64 (sqrt.f64 (+.f64 1 y)) (sqrt.f64 y)))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 z)) (sqrt.f64 z)))) (-.f64 (sqrt.f64 (+.f64 1 t)) (sqrt.f64 t)))"]],"stop":[["fuel",1],["saturated",1]],"time":9.80712890625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[49,37],[49,37],[49,37]],"remove-preprocessing":[[]],"time":32.340087890625,"type":"end"}]
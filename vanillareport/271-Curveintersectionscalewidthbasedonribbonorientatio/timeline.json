[{"compiler":[[62,45]],"method":["search"],"sampling":[[12,0.000365317566147508,0.00024354504409833866,0.9993911373897542],[11,0.000365317566147508,0.00024354504409833866,0.9993911373897542],[10,0.000365317566147508,0.00024354504409833866,0.9993911373897542],[9,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[8,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[7,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[6,0.00024354504409833866,0.0004870900881966773,0.999269364867705],[5,0.0,0.0009741801763933546,0.9990258198236066],[4,0.0,0.0009741801763933546,0.9990258198236066],[3,0.0,0.0009741801763933546,0.9990258198236066],[2,0.0,0.0009741801763933546,0.9990258198236066],[1,0.0,0.0009741801763933546,0.9990258198236066],[0,0.0,0.0009741801763933546,0.9990258198236066]],"time":151.89208984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",308.52783203125,2013],["body",256,"valid",1116.0751953125,8256]],"time":1434.31298828125,"type":"sample"},{"compiler":[[29,20]],"egraph":[[0,4,4,2.834e-6],[9,6267,182,0.053109458],[8,4504,182,0.03920025],[7,2759,182,0.028274833],[6,1960,182,0.018870625],[5,1655,182,0.013901915999999999],[4,1417,182,0.010003498999999999],[3,953,182,0.0058479989999999996],[2,459,217,0.002555082],[1,186,217,0.001026166],[0,75,259,0.000319208]],"inputs":[["0","1","2","3"],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 normAngle) u)) (/.f64 1 (sin.f64 u))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 normAngle u)) (/.f64 1 (sin.f64 u))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (/.f64 1 (sin.f64 n0_i))) normAngle) (*.f64 (*.f64 (sin.f64 (*.f64 u n0_i)) (/.f64 1 (sin.f64 n0_i))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (/.f64 1 (sin.f64 n1_i))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u n1_i)) (/.f64 1 (sin.f64 n1_i))) normAngle))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n0_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) u) (*.f64 (*.f64 (sin.f64 (*.f64 n0_i normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n1_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 n1_i normAngle)) (/.f64 1 (sin.f64 normAngle))) u))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(fma.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) 1) (sin.f64 normAngle)) n1_i))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) n0_i (*.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) n1_i))","(*.f64 (/.f64 1 (sin.f64 normAngle)) (+.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)))","(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 normAngle) u)) (/.f64 1 (sin.f64 u))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 normAngle u)) (/.f64 1 (sin.f64 u))) n1_i))","(fma.f64 (*.f64 (sin.f64 (*.f64 u (-.f64 1 normAngle))) (/.f64 1 (sin.f64 u))) n0_i (*.f64 n1_i (/.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) 1) (sin.f64 u))))","(fma.f64 n0_i (/.f64 (sin.f64 (*.f64 u (-.f64 1 normAngle))) (sin.f64 u)) (*.f64 n1_i (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 u))))","(fma.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 n1_i (sin.f64 u)) (*.f64 (sin.f64 (*.f64 u (-.f64 1 normAngle))) (/.f64 n0_i (sin.f64 u))))","(/.f64 (fma.f64 n0_i (sin.f64 (-.f64 u (*.f64 u normAngle))) (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 u))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (/.f64 1 (sin.f64 n0_i))) normAngle) (*.f64 (*.f64 (sin.f64 (*.f64 u n0_i)) (/.f64 1 (sin.f64 n0_i))) n1_i))","(fma.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (/.f64 1 (sin.f64 n0_i))) normAngle (*.f64 (sin.f64 (*.f64 u n0_i)) (*.f64 (/.f64 1 (sin.f64 n0_i)) n1_i)))","(fma.f64 normAngle (/.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (sin.f64 n0_i)) (*.f64 n1_i (/.f64 (sin.f64 (*.f64 u n0_i)) (sin.f64 n0_i))))","(fma.f64 n1_i (/.f64 (sin.f64 (*.f64 u n0_i)) (sin.f64 n0_i)) (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n0_i)) (/.f64 normAngle (sin.f64 n0_i))))","(/.f64 (fma.f64 normAngle (sin.f64 (-.f64 n0_i (*.f64 u n0_i))) (*.f64 n1_i (sin.f64 (*.f64 u n0_i)))) (sin.f64 n0_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (/.f64 1 (sin.f64 n1_i))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u n1_i)) (/.f64 1 (sin.f64 n1_i))) normAngle))","(fma.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (/.f64 1 (sin.f64 n1_i))) n0_i (*.f64 normAngle (*.f64 (/.f64 1 (sin.f64 n1_i)) (sin.f64 (*.f64 u n1_i)))))","(fma.f64 n0_i (/.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (sin.f64 n1_i)) (/.f64 (*.f64 (sin.f64 (*.f64 u n1_i)) normAngle) (sin.f64 n1_i)))","(fma.f64 normAngle (/.f64 (sin.f64 (*.f64 u n1_i)) (sin.f64 n1_i)) (/.f64 (sin.f64 (*.f64 (-.f64 1 u) n1_i)) (/.f64 (sin.f64 n1_i) n0_i)))","(/.f64 (fma.f64 normAngle (sin.f64 (*.f64 u n1_i)) (*.f64 n0_i (sin.f64 (-.f64 n1_i (*.f64 u n1_i))))) (sin.f64 n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n0_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) u) (*.f64 (*.f64 (sin.f64 (*.f64 n0_i normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(fma.f64 (*.f64 (/.f64 1 (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 n0_i)))) u (*.f64 (sin.f64 (*.f64 normAngle n0_i)) (*.f64 (/.f64 1 (sin.f64 normAngle)) n1_i)))","(fma.f64 u (/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 n0_i))) (sin.f64 normAngle)) (*.f64 n1_i (/.f64 (sin.f64 (*.f64 normAngle n0_i)) (sin.f64 normAngle))))","(/.f64 (fma.f64 u (sin.f64 (*.f64 normAngle (-.f64 1 n0_i))) (*.f64 n1_i (sin.f64 (*.f64 normAngle n0_i)))) (sin.f64 normAngle))","(/.f64 (fma.f64 u (sin.f64 (-.f64 normAngle (*.f64 normAngle n0_i))) (*.f64 n1_i (sin.f64 (*.f64 normAngle n0_i)))) (sin.f64 normAngle))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 n1_i) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 n1_i normAngle)) (/.f64 1 (sin.f64 normAngle))) u))","(fma.f64 (*.f64 (/.f64 1 (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 n1_i)))) n0_i (*.f64 u (*.f64 (/.f64 1 (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle n1_i)))))","(fma.f64 u (/.f64 (sin.f64 (*.f64 normAngle n1_i)) (sin.f64 normAngle)) (/.f64 (*.f64 (sin.f64 (*.f64 normAngle (-.f64 1 n1_i))) n0_i) (sin.f64 normAngle)))","(fma.f64 (sin.f64 (*.f64 normAngle (-.f64 1 n1_i))) (/.f64 n0_i (sin.f64 normAngle)) (*.f64 u (/.f64 (sin.f64 (*.f64 normAngle n1_i)) (sin.f64 normAngle))))","(/.f64 (fma.f64 u (sin.f64 (*.f64 normAngle n1_i)) (*.f64 n0_i (sin.f64 (-.f64 normAngle (*.f64 normAngle n1_i))))) (sin.f64 normAngle))","(/.f64 (fma.f64 u (sin.f64 (*.f64 normAngle n1_i)) (*.f64 n0_i (sin.f64 (*.f64 normAngle (-.f64 1 n1_i))))) (sin.f64 normAngle))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i))","(fma.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i (*.f64 n0_i (/.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) 1) (sin.f64 normAngle))))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) n1_i (*.f64 n0_i (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))","(fma.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n1_i (sin.f64 normAngle)) (*.f64 n0_i (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))","(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n1_i (*.f64 n0_i (sin.f64 (*.f64 u normAngle)))) (sin.f64 normAngle))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":80.9599609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[16,7846,26,0.066969917],[15,7200,26,0.061126709],[14,6501,26,0.052398542],[13,5860,26,0.04397175],[12,4009,26,0.034731209],[11,1775,26,0.023334459000000002],[10,1097,26,0.014405500000000002],[9,893,26,0.010680417000000001],[8,754,26,0.007956167],[7,491,26,0.005971917],[6,387,26,0.004022792000000001],[5,317,26,0.0029035420000000003],[4,266,26,0.0019899590000000003],[3,177,26,0.0011666250000000001],[2,88,31,0.000566417],[1,38,31,0.000245084],[0,18,37,8.85e-5]],"inputs":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(fma.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) (*.f64 (/.f64 1 (sin.f64 normAngle)) n1_i)))","(fma.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) n0_i (*.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) n1_i))","(fma.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)) (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 n1_i (sin.f64 normAngle))))","(/.f64 (fma.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","(/.f64 (fma.f64 (sin.f64 (*.f64 u normAngle)) n1_i (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i)) (sin.f64 normAngle))","(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))"]],"stop":[["node limit",1]],"time":79.02294921875,"type":"simplify"},{"compiler":[[46,25]],"time":0.541015625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","fresh",18.720370640540903],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","next",0.46119851489691627]],"compiler":[[21,12],[29,20],[21,12],[29,20]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.27399221605470614],"time":1.698974609375,"type":"prune"},{"compiler":[[105,54]],"locations":[["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)",0.171875,true],["(*.f64 (-.f64 1 u) normAngle)",0.1796875,true],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))",0.3974133917044398,true],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))",0.43263627930532605,true]],"time":22.025146484375,"type":"localize"},{"count":[[4,96]],"series":[["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","n0_i","-inf",0.35009765625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","n0_i","inf",0.43603515625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","n0_i","0",1.674072265625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","normAngle","-inf",0.5068359375],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","normAngle","inf",0.56201171875],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","normAngle","0",0.760009765625],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","u","-inf",0.5029296875],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","u","inf",0.52490234375],["(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)","u","0",0.464111328125],["(*.f64 (-.f64 1 u) normAngle)","normAngle","-inf",0.297119140625],["(*.f64 (-.f64 1 u) normAngle)","normAngle","inf",1.02587890625],["(*.f64 (-.f64 1 u) normAngle)","normAngle","0",0.281005859375],["(*.f64 (-.f64 1 u) normAngle)","u","-inf",0.197021484375],["(*.f64 (-.f64 1 u) normAngle)","u","inf",0.308837890625],["(*.f64 (-.f64 1 u) normAngle)","u","0",0.221923828125],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","-inf",0.40087890625],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","inf",0.41796875],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","0",0.566162109375],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","-inf",0.388916015625],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","inf",0.447998046875],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","0",0.5400390625],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","-inf",0.76904296875],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","inf",0.43603515625],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","normAngle","0",0.77099609375],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","-inf",0.580078125],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","inf",0.67578125],["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","u","0",0.763916015625]],"time":15.279052734375,"type":"series"},{"count":[[4,112]],"egraph":[[2,4016,49,0.030565333],[1,312,49,0.005497291],[0,15,49,0.000366833]],"inputs":[["(*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle)))","(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))","(*.f64 (-.f64 1 u) normAngle)","(*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 normAngle) (sin.f64 (*.f64 (-.f64 1 u) normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) 2) (/.f64 (sin.f64 normAngle) (cbrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 (sin.f64 normAngle) (sqrt.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sqrt.f64 (sin.f64 normAngle))) (sqrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 1) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 3) (pow.f64 (sin.f64 normAngle) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 3) (pow.f64 (/.f64 1 (sin.f64 normAngle)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (sin.f64 normAngle)) 3) (pow.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) (cbrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 normAngle) (sin.f64 (*.f64 u normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 u normAngle)) 2)) (/.f64 (sin.f64 normAngle) (cbrt.f64 (sin.f64 (*.f64 u normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sin.f64 (*.f64 u normAngle))) (/.f64 (sin.f64 normAngle) (sqrt.f64 (sin.f64 (*.f64 u normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 u normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sqrt.f64 (sin.f64 normAngle))) (sqrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) 1) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (cbrt.f64 (pow.f64 (sin.f64 normAngle) 2))) (cbrt.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (sin.f64 (*.f64 u normAngle))) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) -1) (neg.f64 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 u normAngle)) 3) (pow.f64 (sin.f64 normAngle) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (sin.f64 normAngle)) 3) (pow.f64 (sin.f64 (*.f64 u normAngle)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 u normAngle)) 3) (pow.f64 (/.f64 1 (sin.f64 normAngle)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 normAngle (*.f64 (neg.f64 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 normAngle (*.f64 normAngle (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 1 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 normAngle) (-.f64 1 u))) (cbrt.f64 (pow.f64 (exp.f64 normAngle) (-.f64 1 u))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 normAngle) (-.f64 1 u)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 normAngle) (-.f64 1 u)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 normAngle) (-.f64 1 u)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 1 u) normAngle))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 u 3)) normAngle) (fma.f64 u (+.f64 1 u) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 u u)) normAngle) (+.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 normAngle (-.f64 1 (pow.f64 u 3))) (fma.f64 u (+.f64 1 u) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 normAngle (-.f64 1 (*.f64 u u))) (+.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 u) normAngle) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 u) normAngle) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 u) normAngle)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 1 u) normAngle)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (-.f64 1 u) normAngle) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 normAngle) (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 u) normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 u) normAngle) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) (pow.f64 normAngle 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 normAngle 3) (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 1 u) normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 u) normAngle)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 normAngle (*.f64 (neg.f64 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 normAngle (*.f64 normAngle (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 normAngle 1 (*.f64 (neg.f64 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 normAngle 1 (*.f64 normAngle (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 normAngle) (cbrt.f64 (*.f64 normAngle normAngle)) (*.f64 (neg.f64 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 normAngle) (cbrt.f64 (*.f64 normAngle normAngle)) (*.f64 normAngle (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 normAngle normAngle)) (cbrt.f64 normAngle) (*.f64 (neg.f64 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 normAngle normAngle)) (cbrt.f64 normAngle) (*.f64 normAngle (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 normAngle) (sqrt.f64 normAngle) (*.f64 (neg.f64 u) normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 normAngle) (sqrt.f64 normAngle) (*.f64 normAngle (neg.f64 u)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 n0_i (sin.f64 normAngle)))) (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 n0_i (sin.f64 normAngle)))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 n0_i (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 n0_i (sin.f64 normAngle))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 n0_i (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 n0_i (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (sin.f64 normAngle))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle))) (/.f64 n0_i (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3) (pow.f64 n0_i 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 n0_i 3) (pow.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))) 1))))))"]],"rules":[["egg-rr",20],["egg-rr",34],["egg-rr",29],["egg-rr",29]],"stop":[["node limit",1]],"time":57.60498046875,"type":"rewrite"},{"count":[[208,166]],"egraph":[[3,6582,1979,0.027399916],[2,1743,1993,0.013755333],[1,514,2027,0.0038015410000000003],[0,171,2110,0.000875666]],"inputs":[["1","(+.f64 1 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2)))))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3))) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2))))))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(-.f64 1 u)","(-.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2))) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))))) u)","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (*.f64 u normAngle) (sin.f64 normAngle))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 u 7) (pow.f64 normAngle 7)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","u","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))) (+.f64 (*.f64 -1/5040 u) (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))))))) (pow.f64 normAngle 6)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","normAngle","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","n0_i","(+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(*.f64 (-.f64 1 u) n0_i)","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (*.f64 (-.f64 1 u) n0_i))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (*.f64 (-.f64 1 u) n0_i)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 1 u) n0_i) (*.f64 (-.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i)) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 u) n0_i)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (*.f64 1/120 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (pow.f64 normAngle 6)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))))","(+.f64 1 (neg.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) (*.f64 normAngle u)))))","(-.f64 1 (/.f64 (cos.f64 normAngle) (/.f64 (/.f64 (sin.f64 normAngle) normAngle) u)))","(-.f64 1 (*.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) normAngle)) u))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2)))))","(+.f64 1 (fma.f64 -1 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) (*.f64 normAngle u))) (*.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 normAngle normAngle)))))","(+.f64 (-.f64 1 (/.f64 (cos.f64 normAngle) (/.f64 (/.f64 (sin.f64 normAngle) normAngle) u))) (*.f64 (*.f64 normAngle normAngle) (*.f64 -1/2 (*.f64 u u))))","(fma.f64 (*.f64 u u) (*.f64 -1/2 (*.f64 normAngle normAngle)) (-.f64 1 (*.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) normAngle)) u)))","(-.f64 (*.f64 (*.f64 normAngle normAngle) (*.f64 u (*.f64 u -1/2))) (fma.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) normAngle)) u -1))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u normAngle)) (sin.f64 normAngle))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3))) (sin.f64 normAngle))) (*.f64 -1/2 (*.f64 (pow.f64 u 2) (pow.f64 normAngle 2))))))","(+.f64 1 (fma.f64 -1 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) (*.f64 normAngle u))) (fma.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3))) (sin.f64 normAngle)) (*.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 normAngle normAngle))))))","(+.f64 (-.f64 1 (/.f64 (cos.f64 normAngle) (/.f64 (/.f64 (sin.f64 normAngle) normAngle) u))) (fma.f64 -1/2 (*.f64 normAngle (*.f64 normAngle (*.f64 u u))) (/.f64 (*.f64 (cos.f64 normAngle) 1/6) (/.f64 (/.f64 (sin.f64 normAngle) (pow.f64 u 3)) (pow.f64 normAngle 3)))))","(+.f64 (-.f64 1 (*.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) normAngle)) u)) (fma.f64 1/6 (*.f64 (*.f64 (pow.f64 normAngle 3) (/.f64 (pow.f64 u 3) (sin.f64 normAngle))) (cos.f64 normAngle)) (*.f64 (*.f64 normAngle normAngle) (*.f64 u (*.f64 u -1/2)))))","(-.f64 (fma.f64 1/6 (*.f64 (*.f64 (pow.f64 normAngle 3) (/.f64 (pow.f64 u 3) (sin.f64 normAngle))) (cos.f64 normAngle)) (*.f64 (*.f64 normAngle normAngle) (*.f64 u (*.f64 u -1/2)))) (fma.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) normAngle)) u -1))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(-.f64 1 u)","(-.f64 (+.f64 1 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2))) u)","(-.f64 (+.f64 1 (*.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) u)","(-.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) 1) u)","(fma.f64 -1/6 (*.f64 (*.f64 normAngle normAngle) (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (-.f64 1 u))","(-.f64 (fma.f64 (*.f64 normAngle normAngle) (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) 1) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4)))) u)","(+.f64 1 (-.f64 (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (*.f64 normAngle normAngle) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (*.f64 (-.f64 1 u) 1/120))) (pow.f64 normAngle 4))) u))","(+.f64 (fma.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 (-.f64 1 u) 1/120 (*.f64 1/36 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (pow.f64 normAngle 4) (*.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (-.f64 1 u))","(-.f64 (fma.f64 (+.f64 (*.f64 1/120 (-.f64 (pow.f64 (-.f64 1 u) 5) (-.f64 1 u))) (*.f64 -1/36 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))) (pow.f64 normAngle 4) (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) 1)) u)","(-.f64 (fma.f64 (fma.f64 1/120 (+.f64 (pow.f64 (-.f64 1 u) 5) (+.f64 -1 u)) (*.f64 -1/36 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u)))) (pow.f64 normAngle 4) (fma.f64 (*.f64 normAngle normAngle) (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) 1)) u)","(-.f64 (+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u))))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 -1/5040 (-.f64 1 u))))) (pow.f64 normAngle 6)) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (-.f64 1 u)))) (*.f64 1/120 (-.f64 1 u)))) (pow.f64 normAngle 4))))) u)","(+.f64 1 (-.f64 (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (*.f64 normAngle normAngle) (fma.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (*.f64 (-.f64 1 u) 1/120))) (fma.f64 1/120 (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (*.f64 (-.f64 1 u) -1/5040)))) (pow.f64 normAngle 6) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 -1/6 (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (*.f64 (-.f64 1 u) 1/120))) (pow.f64 normAngle 4)))) u))","(+.f64 1 (-.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))) (fma.f64 (-.f64 (*.f64 -1/5040 (pow.f64 (-.f64 1 u) 7)) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 (-.f64 1 u) 1/120 (*.f64 1/36 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (fma.f64 (-.f64 1 u) -1/5040 (*.f64 -1/720 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))))) (pow.f64 normAngle 6) (*.f64 (-.f64 (*.f64 1/120 (pow.f64 (-.f64 1 u) 5)) (fma.f64 (-.f64 1 u) 1/120 (*.f64 1/36 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (pow.f64 normAngle 4)))) u))","(+.f64 (-.f64 1 u) (fma.f64 (-.f64 (*.f64 -1/5040 (-.f64 (pow.f64 (-.f64 1 u) 7) (-.f64 1 u))) (fma.f64 -1/6 (+.f64 (*.f64 1/120 (-.f64 (pow.f64 (-.f64 1 u) 5) (-.f64 1 u))) (*.f64 -1/36 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))) (*.f64 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)) -1/720))) (pow.f64 normAngle 6) (fma.f64 (+.f64 (*.f64 1/120 (-.f64 (pow.f64 (-.f64 1 u) 5) (-.f64 1 u))) (*.f64 -1/36 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))) (pow.f64 normAngle 4) (*.f64 normAngle (*.f64 normAngle (*.f64 -1/6 (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))))))","(+.f64 1 (-.f64 (fma.f64 (fma.f64 -1/5040 (+.f64 (pow.f64 (-.f64 1 u) 7) (+.f64 -1 u)) (-.f64 (*.f64 1/6 (fma.f64 1/120 (+.f64 (pow.f64 (-.f64 1 u) 5) (+.f64 -1 u)) (*.f64 -1/36 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u))))) (*.f64 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u)) -1/720))) (pow.f64 normAngle 6) (fma.f64 (fma.f64 1/120 (+.f64 (pow.f64 (-.f64 1 u) 5) (+.f64 -1 u)) (*.f64 -1/36 (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u)))) (pow.f64 normAngle 4) (*.f64 normAngle (*.f64 normAngle (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)))))) u))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (sin.f64 normAngle))","(/.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (sin.f64 normAngle))","(/.f64 (*.f64 u normAngle) (sin.f64 normAngle))","(/.f64 u (/.f64 (sin.f64 normAngle) normAngle))","(*.f64 (/.f64 u (sin.f64 normAngle)) normAngle)","(*.f64 normAngle (/.f64 u (sin.f64 normAngle)))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))","(fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle)) (/.f64 u (/.f64 (sin.f64 normAngle) normAngle)))","(fma.f64 -1/6 (*.f64 (/.f64 (pow.f64 u 3) (sin.f64 normAngle)) (pow.f64 normAngle 3)) (*.f64 (/.f64 u (sin.f64 normAngle)) normAngle))","(fma.f64 -1/6 (*.f64 (pow.f64 normAngle 3) (/.f64 (pow.f64 u 3) (sin.f64 normAngle))) (*.f64 normAngle (/.f64 u (sin.f64 normAngle))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))))","(fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle)) (fma.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle)) (/.f64 u (/.f64 (sin.f64 normAngle) normAngle))))","(fma.f64 -1/6 (*.f64 (/.f64 (pow.f64 u 3) (sin.f64 normAngle)) (pow.f64 normAngle 3)) (fma.f64 1/120 (*.f64 (/.f64 (pow.f64 u 5) (sin.f64 normAngle)) (pow.f64 normAngle 5)) (*.f64 (/.f64 u (sin.f64 normAngle)) normAngle)))","(fma.f64 -1/6 (*.f64 (pow.f64 normAngle 3) (/.f64 (pow.f64 u 3) (sin.f64 normAngle))) (fma.f64 1/120 (*.f64 (pow.f64 normAngle 5) (/.f64 (pow.f64 u 5) (sin.f64 normAngle))) (*.f64 normAngle (/.f64 u (sin.f64 normAngle)))))","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 u 7) (pow.f64 normAngle 7)) (sin.f64 normAngle))) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))))","(fma.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle)) (fma.f64 -1/5040 (/.f64 (pow.f64 u 7) (/.f64 (sin.f64 normAngle) (pow.f64 normAngle 7))) (fma.f64 1/120 (/.f64 (*.f64 (pow.f64 u 5) (pow.f64 normAngle 5)) (sin.f64 normAngle)) (/.f64 u (/.f64 (sin.f64 normAngle) normAngle)))))","(fma.f64 -1/6 (*.f64 (/.f64 (pow.f64 u 3) (sin.f64 normAngle)) (pow.f64 normAngle 3)) (fma.f64 -1/5040 (*.f64 (/.f64 (pow.f64 u 7) (sin.f64 normAngle)) (pow.f64 normAngle 7)) (fma.f64 1/120 (*.f64 (/.f64 (pow.f64 u 5) (sin.f64 normAngle)) (pow.f64 normAngle 5)) (*.f64 (/.f64 u (sin.f64 normAngle)) normAngle))))","(fma.f64 -1/6 (*.f64 (pow.f64 normAngle 3) (/.f64 (pow.f64 u 3) (sin.f64 normAngle))) (fma.f64 1/120 (*.f64 (pow.f64 normAngle 5) (/.f64 (pow.f64 u 5) (sin.f64 normAngle))) (fma.f64 -1/5040 (*.f64 (pow.f64 normAngle 7) (/.f64 (pow.f64 u 7) (sin.f64 normAngle))) (*.f64 normAngle (/.f64 u (sin.f64 normAngle))))))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","u","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)","(fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u)","(fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u)","(+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u))","(fma.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (fma.f64 1/120 u (*.f64 -1/6 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))))) (pow.f64 normAngle 4) (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u))","(fma.f64 (pow.f64 normAngle 4) (-.f64 (*.f64 1/120 (-.f64 (pow.f64 u 5) u)) (*.f64 1/36 (-.f64 (pow.f64 u 3) u))) (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u))","(fma.f64 (pow.f64 normAngle 4) (fma.f64 1/120 (-.f64 (pow.f64 u 5) u) (*.f64 -1/36 (-.f64 (pow.f64 u 3) u))) (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u))","(+.f64 (*.f64 (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))) (+.f64 (*.f64 -1/5040 u) (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))))))) (pow.f64 normAngle 6)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (+.f64 (*.f64 1/120 u) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 u)) (pow.f64 normAngle 2)) u)))","(fma.f64 (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (fma.f64 1/120 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (fma.f64 -1/5040 u (*.f64 -1/6 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (fma.f64 1/120 u (*.f64 -1/6 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))))))))) (pow.f64 normAngle 6) (fma.f64 (-.f64 (*.f64 1/120 (pow.f64 u 5)) (fma.f64 1/120 u (*.f64 -1/6 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))))) (pow.f64 normAngle 4) (fma.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) (*.f64 normAngle normAngle) u)))","(fma.f64 (pow.f64 normAngle 6) (-.f64 (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (*.f64 -1/720 (-.f64 (pow.f64 u 3) u))) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (-.f64 (pow.f64 u 5) u)) (*.f64 1/36 (-.f64 (pow.f64 u 3) u))) (*.f64 u -1/5040))) (fma.f64 (pow.f64 normAngle 4) (-.f64 (*.f64 1/120 (-.f64 (pow.f64 u 5) u)) (*.f64 1/36 (-.f64 (pow.f64 u 3) u))) (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u)))","(fma.f64 (pow.f64 normAngle 4) (fma.f64 1/120 (-.f64 (pow.f64 u 5) u) (*.f64 -1/36 (-.f64 (pow.f64 u 3) u))) (fma.f64 (pow.f64 normAngle 6) (-.f64 (*.f64 -1/5040 (pow.f64 u 7)) (fma.f64 -1/6 (fma.f64 1/120 (-.f64 (pow.f64 u 5) u) (*.f64 -1/36 (-.f64 (pow.f64 u 3) u))) (fma.f64 -1/720 (-.f64 (pow.f64 u 3) u) (*.f64 u -1/5040)))) (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u)))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle u)) (sin.f64 normAngle))","normAngle","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(*.f64 (neg.f64 u) normAngle)","(*.f64 normAngle (neg.f64 u))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(*.f64 -1 (*.f64 u normAngle))","(*.f64 (neg.f64 u) normAngle)","(*.f64 normAngle (neg.f64 u))","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","(+.f64 (*.f64 -1 (*.f64 u normAngle)) normAngle)","(fma.f64 -1 (*.f64 normAngle u) normAngle)","(*.f64 normAngle (-.f64 1 u))","(fma.f64 normAngle (neg.f64 u) normAngle)","n0_i","(+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))","(+.f64 n0_i (neg.f64 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (*.f64 u n0_i) normAngle)) (sin.f64 normAngle))))","(-.f64 n0_i (*.f64 (/.f64 (cos.f64 normAngle) (sin.f64 normAngle)) (*.f64 normAngle (*.f64 u n0_i))))","(-.f64 n0_i (*.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) u)) (*.f64 normAngle n0_i)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle)))))","(fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 (*.f64 normAngle normAngle) n0_i)) (+.f64 n0_i (neg.f64 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (*.f64 u n0_i) normAngle)) (sin.f64 normAngle)))))","(-.f64 (fma.f64 -1/2 (*.f64 (*.f64 normAngle normAngle) (*.f64 u (*.f64 u n0_i))) n0_i) (*.f64 (/.f64 (cos.f64 normAngle) (sin.f64 normAngle)) (*.f64 normAngle (*.f64 u n0_i))))","(-.f64 (*.f64 (fma.f64 -1/2 (*.f64 normAngle (*.f64 normAngle (*.f64 u u))) 1) n0_i) (*.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) u)) (*.f64 normAngle n0_i)))","(+.f64 (*.f64 1/6 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 n0_i (pow.f64 normAngle 3)))) (sin.f64 normAngle))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 u 2) (*.f64 n0_i (pow.f64 normAngle 2)))) (+.f64 n0_i (*.f64 -1 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 u (*.f64 n0_i normAngle))) (sin.f64 normAngle))))))","(fma.f64 1/6 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) (*.f64 (pow.f64 u 3) (*.f64 (pow.f64 normAngle 3) n0_i)))) (fma.f64 -1/2 (*.f64 (*.f64 u u) (*.f64 (*.f64 normAngle normAngle) n0_i)) (+.f64 n0_i (neg.f64 (/.f64 (*.f64 (cos.f64 normAngle) (*.f64 (*.f64 u n0_i) normAngle)) (sin.f64 normAngle))))))","(fma.f64 1/6 (*.f64 (/.f64 (cos.f64 normAngle) (sin.f64 normAngle)) (*.f64 (pow.f64 u 3) (*.f64 (pow.f64 normAngle 3) n0_i))) (-.f64 (fma.f64 -1/2 (*.f64 (*.f64 normAngle normAngle) (*.f64 u (*.f64 u n0_i))) n0_i) (*.f64 (/.f64 (cos.f64 normAngle) (sin.f64 normAngle)) (*.f64 normAngle (*.f64 u n0_i)))))","(-.f64 (fma.f64 1/6 (*.f64 (*.f64 (pow.f64 u 3) (*.f64 (pow.f64 normAngle 3) n0_i)) (/.f64 (cos.f64 normAngle) (sin.f64 normAngle))) (*.f64 (fma.f64 -1/2 (*.f64 normAngle (*.f64 normAngle (*.f64 u u))) 1) n0_i)) (*.f64 (/.f64 (cos.f64 normAngle) (/.f64 (sin.f64 normAngle) u)) (*.f64 normAngle n0_i)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 n0_i (sin.f64 (*.f64 (+.f64 1 (*.f64 -1 u)) normAngle))) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(*.f64 (-.f64 1 u) n0_i)","(-.f64 n0_i (*.f64 u n0_i))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (*.f64 (-.f64 1 u) n0_i))","(fma.f64 (*.f64 -1/6 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 normAngle normAngle) (*.f64 (-.f64 1 u) n0_i))","(fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))) (*.f64 (-.f64 1 u) n0_i))","(fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (*.f64 (-.f64 1 u) n0_i)))","(fma.f64 (*.f64 -1/6 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 normAngle normAngle) (fma.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (fma.f64 1/120 (*.f64 (-.f64 1 u) n0_i) (*.f64 -1/6 (*.f64 -1/6 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i) (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4) (*.f64 (-.f64 1 u) n0_i)))","(fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))) (fma.f64 (pow.f64 normAngle 4) (-.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 1/36 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (*.f64 (-.f64 1 u) n0_i)))","(fma.f64 normAngle (*.f64 normAngle (*.f64 -1/6 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (fma.f64 (pow.f64 normAngle 4) (fma.f64 1/120 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 5) (-.f64 1 u))) (*.f64 -1/36 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (*.f64 (-.f64 1 u) n0_i)))","(fma.f64 normAngle (*.f64 normAngle (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i)) (fma.f64 (pow.f64 normAngle 4) (fma.f64 1/120 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 5) (+.f64 -1 u))) (*.f64 -1/36 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u))))) (-.f64 n0_i (*.f64 u n0_i))))","(+.f64 (*.f64 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))) (pow.f64 normAngle 2)) (+.f64 (*.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4)) (+.f64 (*.f64 (-.f64 1 u) n0_i) (*.f64 (-.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i)) (+.f64 (*.f64 -1/5040 (*.f64 (-.f64 1 u) n0_i)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (+.f64 (*.f64 1/120 (*.f64 (-.f64 1 u) n0_i)) (*.f64 -1/6 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (*.f64 1/120 (-.f64 (*.f64 -1/6 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i)) (*.f64 -1/6 (*.f64 (-.f64 1 u) n0_i))))))) (pow.f64 normAngle 6)))))","(fma.f64 (*.f64 -1/6 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 normAngle normAngle) (fma.f64 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (fma.f64 1/120 (*.f64 (-.f64 1 u) n0_i) (*.f64 -1/6 (*.f64 -1/6 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i) (*.f64 (-.f64 1 u) n0_i)))))) (pow.f64 normAngle 4) (fma.f64 (-.f64 1 u) n0_i (*.f64 (pow.f64 normAngle 6) (-.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i)) (fma.f64 -1/5040 (*.f64 (-.f64 1 u) n0_i) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i)) (fma.f64 1/120 (*.f64 (-.f64 1 u) n0_i) (*.f64 -1/6 (*.f64 -1/6 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i) (*.f64 (-.f64 1 u) n0_i)))))) (*.f64 1/120 (*.f64 -1/6 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 3) n0_i) (*.f64 (-.f64 1 u) n0_i)))))))))))","(fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))) (fma.f64 (pow.f64 normAngle 4) (-.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 1/36 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (fma.f64 (pow.f64 normAngle 6) (-.f64 (*.f64 -1/5040 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 7) n0_i) (*.f64 (-.f64 1 u) n0_i))) (fma.f64 -1/6 (-.f64 (*.f64 1/120 (-.f64 (*.f64 (pow.f64 (-.f64 1 u) 5) n0_i) (*.f64 (-.f64 1 u) n0_i))) (*.f64 1/36 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (*.f64 -1/720 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u)))))) (*.f64 (-.f64 1 u) n0_i))))","(fma.f64 (pow.f64 normAngle 4) (fma.f64 1/120 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 5) (-.f64 1 u))) (*.f64 -1/36 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (fma.f64 normAngle (*.f64 normAngle (*.f64 -1/6 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (fma.f64 (pow.f64 normAngle 6) (+.f64 (fma.f64 -1/5040 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 7) (-.f64 1 u))) (*.f64 1/720 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))) (*.f64 1/6 (fma.f64 1/120 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 5) (-.f64 1 u))) (*.f64 -1/36 (*.f64 n0_i (-.f64 (pow.f64 (-.f64 1 u) 3) (-.f64 1 u))))))) (*.f64 (-.f64 1 u) n0_i))))","(fma.f64 (pow.f64 normAngle 4) (fma.f64 1/120 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 5) (+.f64 -1 u))) (*.f64 -1/36 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u))))) (fma.f64 normAngle (*.f64 normAngle (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i)) (fma.f64 (pow.f64 normAngle 6) (+.f64 (fma.f64 -1/5040 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 7) (+.f64 -1 u))) (*.f64 1/720 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u))))) (*.f64 1/6 (fma.f64 1/120 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 5) (+.f64 -1 u))) (*.f64 -1/36 (*.f64 n0_i (+.f64 (pow.f64 (-.f64 1 u) 3) (+.f64 -1 u))))))) (-.f64 n0_i (*.f64 u n0_i)))))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))","(/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) n0_i) (sin.f64 normAngle))","(/.f64 (sin.f64 (*.f64 normAngle (-.f64 1 u))) (/.f64 (sin.f64 normAngle) n0_i))","(*.f64 (/.f64 n0_i (sin.f64 normAngle)) (sin.f64 (*.f64 normAngle (-.f64 1 u))))","(*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle)))"]],"stop":[["node limit",1]],"time":59.789794921875,"type":"simplify"},{"compiler":[[5605,3106]],"time":49.322021484375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","fresh",0.3387772258231482],["(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","fresh",18.720370640540903],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) n1_i))","fresh",0.9870004269993877],["(+.f64 (*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.41365974536003225],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","next",0.30205995063997565],["(+.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sqrt.f64 (sin.f64 normAngle))) (sqrt.f64 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.5608460735075684],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u) n1_i))","fresh",0.4173707610492675]],"compiler":[[39,26],[21,12],[29,20],[27,17],[38,26],[32,20],[32,22],[39,26],[21,12],[29,20],[27,17],[38,26],[32,20],[32,22]],"count":[[168,7]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[166,6],"picked":[1,0]}],"min-error":[0.00390625],"time":46.941162109375,"type":"prune"},{"compiler":[[148,78]],"locations":[["(fma.f64 u -1/6 1/6)",0.29296875,true],["(*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle)))",0.3974133917044398,false],["(pow.f64 (-.f64 1 u) 3)",0.6625939942110507,true],["(fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))",12.62995550123854,true]],"time":30.578857421875,"type":"localize"},{"count":[[3,36]],"series":[["(fma.f64 u -1/6 1/6)","u","-inf",0.23486328125],["(fma.f64 u -1/6 1/6)","u","inf",0.204833984375],["(fma.f64 u -1/6 1/6)","u","0",0.193115234375],["(pow.f64 (-.f64 1 u) 3)","u","-inf",0.19287109375],["(pow.f64 (-.f64 1 u) 3)","u","inf",0.18310546875],["(pow.f64 (-.f64 1 u) 3)","u","0",0.179931640625],["(fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))","u","-inf",0.390869140625],["(fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))","u","inf",0.532958984375],["(fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))","u","0",0.468994140625]],"time":2.7021484375,"type":"series"},{"count":[[3,70]],"egraph":[[2,2330,27,0.021795791],[1,214,27,0.003532458],[0,10,27,0.000395375]],"inputs":[["(fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))","(pow.f64 (-.f64 1 u) 3)","(fma.f64 u -1/6 1/6)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 u -1/6 1/6) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) 1) (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 u)) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))) (pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))) 2) (cbrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))) (sqrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) 3) (pow.f64 (fma.f64 u -1/6 1/6) 3)) (+.f64 (*.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3))) (-.f64 (pow.f64 (fma.f64 u -1/6 1/6) 2) (*.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (fma.f64 u -1/6 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3))) (pow.f64 (fma.f64 u -1/6 1/6) 2)) (-.f64 (*.f64 -1/6 (pow.f64 (-.f64 1 u) 3)) (fma.f64 u -1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u) 2) (*.f64 (neg.f64 u) (pow.f64 (-.f64 1 u) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) 1) (*.f64 (pow.f64 (-.f64 1 u) 2) (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (-.f64 1 u) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (-.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 u) (pow.f64 (-.f64 1 u) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) (*.f64 (cbrt.f64 (-.f64 1 u)) (pow.f64 (-.f64 1 u) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 u)) (*.f64 (sqrt.f64 (-.f64 1 u)) (pow.f64 (-.f64 1 u) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u) 3/2) (pow.f64 (-.f64 1 u) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u) 2)) 3) (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (-.f64 1 u)) 3) (pow.f64 (sqrt.f64 (-.f64 1 u)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) 1) (-.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (cbrt.f64 (pow.f64 (-.f64 1 u) 2))) (cbrt.f64 (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (sqrt.f64 (-.f64 1 u))) (sqrt.f64 (-.f64 1 u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 (pow.f64 u 3)) 3) (pow.f64 (+.f64 1 (fma.f64 u u u)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 (*.f64 u u)) 3) (pow.f64 (+.f64 1 u) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 u 3)) (pow.f64 (-.f64 1 u) 2)) (+.f64 1 (fma.f64 u u u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 u u)) (pow.f64 (-.f64 1 u) 2)) (+.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (pow.f64 u 3))) (+.f64 1 (fma.f64 u u u)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u) 2) (-.f64 1 (*.f64 u u))) (+.f64 1 u))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 u) 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (-.f64 1 u) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (-.f64 1 u) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log1p.f64 (neg.f64 u))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/6 (*.f64 -1/6 u))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 u) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/6 u) 1) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 u -1/6 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 u -1/6 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 u -1/6 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 u -1/6 1/6)) (pow.f64 (cbrt.f64 (fma.f64 u -1/6 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 u -1/6 1/6)) 2) (cbrt.f64 (fma.f64 u -1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 u -1/6 1/6)) (sqrt.f64 (fma.f64 u -1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -1/6 u) 3) 1/216) (+.f64 (*.f64 (*.f64 -1/6 u) (*.f64 -1/6 u)) (-.f64 1/36 (*.f64 (*.f64 -1/6 u) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -1/6 u) (*.f64 -1/6 u)) 1/36) (-.f64 (*.f64 -1/6 u) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 u -1/6 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 u -1/6 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 u -1/6 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 u -1/6 1/6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 u -1/6 1/6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 u -1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 u -1/6 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 u -1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 u -1/6 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 u -1/6 1/6)))))))"]],"rules":[["egg-rr",21],["egg-rr",27],["egg-rr",22]],"stop":[["node limit",1]],"time":46.71484375,"type":"rewrite"},{"count":[[106,96]],"egraph":[[6,6418,279,0.032400250000000005],[5,3571,279,0.020195875000000002],[4,1686,279,0.00954025],[3,586,304,0.003993333999999999],[2,187,339,0.0015298339999999999],[1,81,363,0.000557625],[0,32,389,0.000177792]],"inputs":[["(*.f64 1/3 u)","(+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2)))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","1","(+.f64 (*.f64 -3 u) 1)","(+.f64 (*.f64 -3 u) (+.f64 1 (*.f64 3 (pow.f64 u 2))))","(+.f64 (*.f64 -3 u) (+.f64 1 (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(*.f64 -1 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(*.f64 -1 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","1/6","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 -1/6 u))","(*.f64 -1/6 u)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 -1/6 u))","(*.f64 -1/6 u)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 -1/6 u))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 u)","(+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2)))","(fma.f64 1/3 u (*.f64 -1/2 (*.f64 u u)))","(*.f64 u (+.f64 1/3 (*.f64 u -1/2)))","(*.f64 u (fma.f64 u -1/2 1/3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (fma.f64 1/3 u (*.f64 -1/2 (*.f64 u u))))","(fma.f64 1/3 u (*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6))))","(*.f64 u (+.f64 1/3 (*.f64 u (fma.f64 u 1/6 -1/2))))","(*.f64 u (fma.f64 u (fma.f64 u 1/6 -1/2) 1/3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (fma.f64 1/3 u (*.f64 -1/2 (*.f64 u u))))","(fma.f64 1/3 u (*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6))))","(*.f64 u (+.f64 1/3 (*.f64 u (fma.f64 u 1/6 -1/2))))","(*.f64 u (fma.f64 u (fma.f64 u 1/6 -1/2) 1/3))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 -1/2 (*.f64 u u)))","(fma.f64 -1/2 (*.f64 u u) (*.f64 1/6 (pow.f64 u 3)))","(*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6)))","(*.f64 u (*.f64 u (fma.f64 u 1/6 -1/2)))","(*.f64 (*.f64 u u) (fma.f64 u 1/6 -1/2))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (fma.f64 1/3 u (*.f64 -1/2 (*.f64 u u))))","(fma.f64 1/3 u (*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6))))","(*.f64 u (+.f64 1/3 (*.f64 u (fma.f64 u 1/6 -1/2))))","(*.f64 u (fma.f64 u (fma.f64 u 1/6 -1/2) 1/3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (fma.f64 1/3 u (*.f64 -1/2 (*.f64 u u))))","(fma.f64 1/3 u (*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6))))","(*.f64 u (+.f64 1/3 (*.f64 u (fma.f64 u 1/6 -1/2))))","(*.f64 u (fma.f64 u (fma.f64 u 1/6 -1/2) 1/3))","(*.f64 1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (*.f64 -1/2 (pow.f64 u 2)))","(fma.f64 1/6 (pow.f64 u 3) (*.f64 -1/2 (*.f64 u u)))","(fma.f64 -1/2 (*.f64 u u) (*.f64 1/6 (pow.f64 u 3)))","(*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6)))","(*.f64 u (*.f64 u (fma.f64 u 1/6 -1/2)))","(*.f64 (*.f64 u u) (fma.f64 u 1/6 -1/2))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (fma.f64 1/3 u (*.f64 -1/2 (*.f64 u u))))","(fma.f64 1/3 u (*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6))))","(*.f64 u (+.f64 1/3 (*.f64 u (fma.f64 u 1/6 -1/2))))","(*.f64 u (fma.f64 u (fma.f64 u 1/6 -1/2) 1/3))","(+.f64 (*.f64 1/6 (pow.f64 u 3)) (+.f64 (*.f64 1/3 u) (*.f64 -1/2 (pow.f64 u 2))))","(fma.f64 1/6 (pow.f64 u 3) (fma.f64 1/3 u (*.f64 -1/2 (*.f64 u u))))","(fma.f64 1/3 u (*.f64 (*.f64 u u) (+.f64 -1/2 (*.f64 u 1/6))))","(*.f64 u (+.f64 1/3 (*.f64 u (fma.f64 u 1/6 -1/2))))","(*.f64 u (fma.f64 u (fma.f64 u 1/6 -1/2) 1/3))","1","(+.f64 (*.f64 -3 u) 1)","(fma.f64 -3 u 1)","(fma.f64 u -3 1)","(+.f64 (*.f64 -3 u) (+.f64 1 (*.f64 3 (pow.f64 u 2))))","(+.f64 (fma.f64 -3 u 1) (*.f64 (*.f64 u u) 3))","(fma.f64 u -3 (fma.f64 (*.f64 u u) 3 1))","(fma.f64 u -3 (fma.f64 u (*.f64 u 3) 1))","(fma.f64 u (fma.f64 u 3 -3) 1)","(+.f64 (*.f64 -3 u) (+.f64 1 (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(+.f64 (fma.f64 -3 u 1) (fma.f64 3 (*.f64 u u) (neg.f64 (pow.f64 u 3))))","(fma.f64 u -3 (-.f64 (fma.f64 (*.f64 u u) 3 1) (pow.f64 u 3)))","(+.f64 (fma.f64 u -3 1) (*.f64 (*.f64 u u) (-.f64 3 u)))","(fma.f64 u (fma.f64 u 3 -3) (-.f64 1 (pow.f64 u 3)))","(fma.f64 u (fma.f64 u (-.f64 3 u) -3) 1)","(*.f64 -1 (pow.f64 u 3))","(neg.f64 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(fma.f64 3 (*.f64 u u) (neg.f64 (pow.f64 u 3)))","(-.f64 (*.f64 u (*.f64 u 3)) (pow.f64 u 3))","(*.f64 (*.f64 u u) (-.f64 3 u))","(*.f64 u (*.f64 u (-.f64 3 u)))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(fma.f64 -3 u (fma.f64 3 (*.f64 u u) (neg.f64 (pow.f64 u 3))))","(-.f64 (fma.f64 u -3 (*.f64 u (*.f64 u 3))) (pow.f64 u 3))","(fma.f64 u -3 (*.f64 (*.f64 u u) (-.f64 3 u)))","(*.f64 u (+.f64 -3 (*.f64 u (-.f64 3 u))))","(*.f64 u (fma.f64 u (-.f64 3 u) -3))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(+.f64 (fma.f64 -3 u 1) (fma.f64 3 (*.f64 u u) (neg.f64 (pow.f64 u 3))))","(fma.f64 u -3 (-.f64 (fma.f64 (*.f64 u u) 3 1) (pow.f64 u 3)))","(+.f64 (fma.f64 u -3 1) (*.f64 (*.f64 u u) (-.f64 3 u)))","(fma.f64 u (fma.f64 u 3 -3) (-.f64 1 (pow.f64 u 3)))","(fma.f64 u (fma.f64 u (-.f64 3 u) -3) 1)","(*.f64 -1 (pow.f64 u 3))","(neg.f64 (pow.f64 u 3))","(+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))","(fma.f64 3 (*.f64 u u) (neg.f64 (pow.f64 u 3)))","(-.f64 (*.f64 u (*.f64 u 3)) (pow.f64 u 3))","(*.f64 (*.f64 u u) (-.f64 3 u))","(*.f64 u (*.f64 u (-.f64 3 u)))","(+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3))))","(fma.f64 -3 u (fma.f64 3 (*.f64 u u) (neg.f64 (pow.f64 u 3))))","(-.f64 (fma.f64 u -3 (*.f64 u (*.f64 u 3))) (pow.f64 u 3))","(fma.f64 u -3 (*.f64 (*.f64 u u) (-.f64 3 u)))","(*.f64 u (+.f64 -3 (*.f64 u (-.f64 3 u))))","(*.f64 u (fma.f64 u (-.f64 3 u) -3))","(+.f64 1 (+.f64 (*.f64 -3 u) (+.f64 (*.f64 3 (pow.f64 u 2)) (*.f64 -1 (pow.f64 u 3)))))","(+.f64 (fma.f64 -3 u 1) (fma.f64 3 (*.f64 u u) (neg.f64 (pow.f64 u 3))))","(fma.f64 u -3 (-.f64 (fma.f64 (*.f64 u u) 3 1) (pow.f64 u 3)))","(+.f64 (fma.f64 u -3 1) (*.f64 (*.f64 u u) (-.f64 3 u)))","(fma.f64 u (fma.f64 u 3 -3) (-.f64 1 (pow.f64 u 3)))","(fma.f64 u (fma.f64 u (-.f64 3 u) -3) 1)","1/6","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(*.f64 -1/6 u)","(*.f64 u -1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(*.f64 -1/6 u)","(*.f64 u -1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)","(+.f64 1/6 (*.f64 -1/6 u))","(+.f64 1/6 (*.f64 u -1/6))","(fma.f64 u -1/6 1/6)"]],"stop":[["node limit",1]],"time":49.588134765625,"type":"simplify"},{"compiler":[[5647,2900]],"time":50.909912109375,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","fresh",18.720370640540903],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","next",0.1796386615662076],["(+.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sqrt.f64 (sin.f64 normAngle))) (sqrt.f64 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.5608460735075684],["(+.f64 (*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.41365974536003225],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) n1_i))","fresh",0.8278618627424471],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u) n1_i))","fresh",0.258232196792327]],"compiler":[[21,12],[48,32],[32,20],[27,17],[38,26],[41,26],[21,12],[48,32],[32,20],[27,17],[38,26],[41,26]],"count":[[148,6]],"kept":[{"done":[0,0],"fresh":[6,3],"new":[141,3],"picked":[1,0]}],"min-error":[0.00390625],"time":47.80810546875,"type":"prune"},{"compiler":[[211,117]],"locations":[["(fma.f64 u -1/6 1/6)",0.29296875,false],["(pow.f64 (-.f64 1 u) 3)",0.6625939942110507,false],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))",8.346979362618086,true],["(fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))",12.62995550123854,false]],"time":43.680908203125,"type":"localize"},{"count":[[1,4]],"series":[["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","normAngle","-inf",0.669189453125],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","normAngle","inf",0.876953125],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","normAngle","0",0.55078125],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","u","-inf",0.336181640625],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","u","inf",0.39501953125],["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))","u","0",2.58203125]],"time":5.4970703125,"type":"series"},{"count":[[1,42]],"egraph":[[2,2466,12,0.021646416999999998],[1,201,12,0.003531542],[0,9,12,0.000263167]],"inputs":[["(/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u 3) (/.f64 1 (/.f64 (sin.f64 normAngle) (pow.f64 normAngle 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u 3) (*.f64 (pow.f64 normAngle 3) (/.f64 1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 normAngle 3) (*.f64 (pow.f64 u 3) (/.f64 1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 u normAngle) 3) (/.f64 1 (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 2) (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 u normAngle) 2) (*.f64 (*.f64 u normAngle) (/.f64 1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3/2) (sqrt.f64 (sin.f64 normAngle))) (/.f64 (pow.f64 (*.f64 u normAngle) 3/2) (sqrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 u normAngle) 3/2) (*.f64 (pow.f64 (*.f64 u normAngle) 3/2) (/.f64 1 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 u normAngle) 3)) (/.f64 1 (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 normAngle)) (pow.f64 (*.f64 u normAngle) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u 3) 1) (/.f64 (pow.f64 normAngle 3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 normAngle 3) 1) (/.f64 (pow.f64 u 3) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u 3) (sin.f64 normAngle)) (pow.f64 normAngle 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 2) 1) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3/2) 1) (/.f64 (pow.f64 (*.f64 u normAngle) 3/2) (sin.f64 normAngle)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u 3) (pow.f64 (cbrt.f64 (sin.f64 normAngle)) 2)) (/.f64 (pow.f64 normAngle 3) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 normAngle 3) (pow.f64 (cbrt.f64 (sin.f64 normAngle)) 2)) (/.f64 (pow.f64 u 3) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 normAngle)) 2)) (/.f64 (pow.f64 (*.f64 u normAngle) 3) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 2) (pow.f64 (cbrt.f64 (sin.f64 normAngle)) 2)) (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3/2) (pow.f64 (cbrt.f64 (sin.f64 normAngle)) 2)) (/.f64 (pow.f64 (*.f64 u normAngle) 3/2) (cbrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u 3) (sqrt.f64 (sin.f64 normAngle))) (/.f64 (pow.f64 normAngle 3) (sqrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 normAngle 3) (sqrt.f64 (sin.f64 normAngle))) (/.f64 (pow.f64 u 3) (sqrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (sin.f64 normAngle))) (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sqrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 2) (sqrt.f64 (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sqrt.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 u normAngle) (cbrt.f64 (sin.f64 normAngle))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3/2) (sqrt.f64 (sin.f64 normAngle))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 normAngle) (pow.f64 (*.f64 u normAngle) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (neg.f64 (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 u normAngle) 3) 3) (pow.f64 (sin.f64 normAngle) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (pow.f64 (*.f64 u normAngle) 3) (sin.f64 normAngle))))))))"]],"rules":[["egg-rr",42]],"stop":[["node limit",1]],"time":40.1279296875,"type":"rewrite"},{"count":[[46,50]],"egraph":[[4,7474,96,0.032831543000000005],[3,2460,96,0.014771209],[2,420,115,0.003963543],[1,105,138,0.000867459],[0,38,142,0.00019575]],"inputs":[["(*.f64 (pow.f64 u 3) (pow.f64 normAngle 2))","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))))","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6)))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/720 (pow.f64 u 3)) (+.f64 (*.f64 1/6 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3)))) (*.f64 -1/5040 (pow.f64 u 3)))) (pow.f64 normAngle 8))) (+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 u 3) (pow.f64 normAngle 2))","(*.f64 (pow.f64 u 3) (*.f64 normAngle normAngle))","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))))","(fma.f64 (pow.f64 u 3) (*.f64 normAngle normAngle) (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))))","(fma.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4)) (*.f64 (pow.f64 u 3) (*.f64 normAngle normAngle)))","(*.f64 (pow.f64 u 3) (+.f64 (*.f64 normAngle normAngle) (*.f64 1/6 (pow.f64 normAngle 4))))","(+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6)))))","(fma.f64 (pow.f64 u 3) (*.f64 normAngle normAngle) (fma.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4)) (neg.f64 (*.f64 (*.f64 (pow.f64 u 3) -7/360) (pow.f64 normAngle 6)))))","(-.f64 (fma.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4)) (*.f64 (pow.f64 u 3) (*.f64 normAngle normAngle))) (*.f64 (pow.f64 u 3) (*.f64 -7/360 (pow.f64 normAngle 6))))","(fma.f64 (pow.f64 u 3) (*.f64 normAngle normAngle) (*.f64 (pow.f64 u 3) (-.f64 (*.f64 1/6 (pow.f64 normAngle 4)) (*.f64 (pow.f64 normAngle 6) -7/360))))","(*.f64 (pow.f64 u 3) (+.f64 (*.f64 normAngle normAngle) (fma.f64 1/6 (pow.f64 normAngle 4) (*.f64 (pow.f64 normAngle 6) 7/360))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/720 (pow.f64 u 3)) (+.f64 (*.f64 1/6 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3)))) (*.f64 -1/5040 (pow.f64 u 3)))) (pow.f64 normAngle 8))) (+.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/36 (pow.f64 u 3)) (*.f64 1/120 (pow.f64 u 3))) (pow.f64 normAngle 6))))))","(fma.f64 -1 (*.f64 (fma.f64 1/720 (pow.f64 u 3) (fma.f64 1/6 (*.f64 (pow.f64 u 3) -7/360) (*.f64 (pow.f64 u 3) -1/5040))) (pow.f64 normAngle 8)) (fma.f64 (pow.f64 u 3) (*.f64 normAngle normAngle) (fma.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4)) (neg.f64 (*.f64 (*.f64 (pow.f64 u 3) -7/360) (pow.f64 normAngle 6))))))","(-.f64 (-.f64 (fma.f64 1/6 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 4)) (*.f64 (pow.f64 u 3) (*.f64 normAngle normAngle))) (*.f64 (pow.f64 u 3) (*.f64 -7/360 (pow.f64 normAngle 6)))) (*.f64 (fma.f64 (pow.f64 u 3) 1/720 (fma.f64 (pow.f64 u 3) -1/5040 (*.f64 (pow.f64 u 3) -7/2160))) (pow.f64 normAngle 8)))","(fma.f64 (pow.f64 u 3) (*.f64 normAngle normAngle) (-.f64 (*.f64 (pow.f64 u 3) (-.f64 (*.f64 1/6 (pow.f64 normAngle 4)) (*.f64 (pow.f64 normAngle 6) -7/360))) (*.f64 (fma.f64 (pow.f64 u 3) 1/720 (*.f64 (pow.f64 u 3) -13/3780)) (pow.f64 normAngle 8))))","(-.f64 (*.f64 (pow.f64 u 3) (+.f64 (*.f64 normAngle normAngle) (fma.f64 1/6 (pow.f64 normAngle 4) (*.f64 (pow.f64 normAngle 6) 7/360)))) (*.f64 (*.f64 (pow.f64 u 3) -31/15120) (pow.f64 normAngle 8)))"]],"stop":[["node limit",1]],"time":46.14306640625,"type":"simplify"},{"compiler":[[7122,3703]],"time":61.347900390625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","fresh",18.720370640540903],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","done",0.1796386615662076],["(+.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sqrt.f64 (sin.f64 normAngle))) (sqrt.f64 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.5608460735075684],["(+.f64 (*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.41365974536003225],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) n1_i))","fresh",0.8278618627424471],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u) n1_i))","next",0.258232196792327]],"compiler":[[21,12],[48,32],[32,20],[27,17],[38,26],[41,26],[21,12],[32,20],[27,17],[38,26],[41,26]],"count":[[152,6]],"kept":[{"done":[0,0],"fresh":[5,5],"new":[146,0],"picked":[1,1]}],"min-error":[0.00390625],"time":57.55712890625,"type":"prune"},{"compiler":[[159,92]],"locations":[["(fma.f64 u -1/6 1/6)",0.29296875,false],["(*.f64 -1/6 (-.f64 (pow.f64 u 3) u))",0.359375,true],["(pow.f64 (-.f64 1 u) 3)",0.6625939942110507,false],["(fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6))",12.62995550123854,false]],"time":34.517822265625,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 -1/6 (-.f64 (pow.f64 u 3) u))","u","-inf",0.485107421875],["(*.f64 -1/6 (-.f64 (pow.f64 u 3) u))","u","inf",0.4140625],["(*.f64 -1/6 (-.f64 (pow.f64 u 3) u))","u","0",0.316162109375]],"time":1.26416015625,"type":"series"},{"count":[[1,17]],"egraph":[[2,1945,10,0.019346625],[1,159,10,0.002985083],[0,7,10,0.000268333]],"inputs":[["(*.f64 -1/6 (-.f64 (pow.f64 u 3) u))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 u 3) -1/6) (*.f64 (neg.f64 u) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 (pow.f64 u 3)) (*.f64 -1/6 (neg.f64 u)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 u 9) (pow.f64 u 3)) -1/6) (+.f64 (pow.f64 u 6) (fma.f64 u u (pow.f64 u 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 u 6) (*.f64 u u)) -1/6) (+.f64 u (pow.f64 u 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 9) (pow.f64 u 3))) (+.f64 (pow.f64 u 6) (fma.f64 u u (pow.f64 u 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 6) (*.f64 u u))) (+.f64 u (pow.f64 u 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 (pow.f64 u 3) u)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -1/6 (-.f64 (pow.f64 u 3) u))))))))"]],"rules":[["egg-rr",17]],"stop":[["node limit",1]],"time":37.02587890625,"type":"rewrite"},{"count":[[29,21]],"egraph":[[22,7179,117,0.111730208],[21,6239,117,0.097627999],[20,6159,117,0.084829083],[19,5979,117,0.077399999],[18,5753,117,0.06988620699999999],[17,5469,117,0.06211641599999999],[16,5146,117,0.05479329099999999],[15,4424,117,0.04756266599999999],[14,3823,117,0.039743790999999994],[13,3322,117,0.033174999999999996],[12,2898,117,0.027264166],[11,2576,117,0.022122333],[10,2335,117,0.017673333],[9,2177,117,0.014038041000000001],[8,2044,117,0.010976375],[7,1957,117,0.008298667],[6,1244,117,0.0054785],[5,375,117,0.002991208],[4,153,117,0.001193625],[3,87,117,0.000628],[2,41,117,0.00035091699999999996],[1,21,117,0.000178708],[0,9,117,7.2333e-5]],"inputs":[["(*.f64 1/6 u)","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(*.f64 -1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(*.f64 -1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 u)","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(*.f64 -1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(*.f64 -1/6 (pow.f64 u 3))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))","(+.f64 (*.f64 1/6 u) (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 1/6 u (*.f64 -1/6 (pow.f64 u 3)))","(fma.f64 -1/6 (pow.f64 u 3) (*.f64 1/6 u))","(*.f64 u (fma.f64 u (*.f64 u -1/6) 1/6))","(*.f64 u (fma.f64 -1/6 (*.f64 u u) 1/6))"]],"stop":[["node limit",1]],"time":128.108154296875,"type":"simplify"},{"compiler":[[4861,2660]],"time":47.763916015625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","fresh",18.720370640540903],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","done",0.1796386615662076],["(+.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sqrt.f64 (sin.f64 normAngle))) (sqrt.f64 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.5608460735075684],["(+.f64 (*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","fresh",0.41365974536003225],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) n1_i))","fresh",0.8278618627424471],["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u) n1_i))","done",0.258232196792327]],"compiler":[[21,12],[48,32],[32,20],[27,17],[38,26],[41,26]],"count":[[123,6]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[117,0],"picked":[1,1]}],"min-error":[0.00390625],"time":41.01904296875,"type":"prune"},{"accuracy":[0.1796386615662076],"baseline":[0.1796386615662076],"branch":[["normAngle",0.1796386615662076,1],["u",0.1796386615662076,1],["n0_i",0.1796386615662076,1],["n1_i",0.1796386615662076,1],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))",0.1796386615662076,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[29,20],[334,169]],"count":[[11,1]],"inputs":[["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) n1_i))","(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (exp.f64 (log.f64 (/.f64 (sin.f64 (*.f64 u normAngle)) (sin.f64 normAngle)))) n1_i))","(+.f64 (*.f64 (sin.f64 (fma.f64 normAngle (neg.f64 u) normAngle)) (/.f64 n0_i (sin.f64 normAngle))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (sqrt.f64 (sin.f64 normAngle))) (sqrt.f64 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 -1/6 (-.f64 (pow.f64 u 3) u)) u) n1_i))","(/.f64 (fma.f64 (sin.f64 (-.f64 normAngle (*.f64 u normAngle))) n0_i (*.f64 (sin.f64 (*.f64 u normAngle)) n1_i)) (sin.f64 normAngle))","(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))"]],"link":["."],"name":["Curve intersection, scale width based on ribbon orientation"],"oracle":[19.502518240539803],"outputs":[["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))"]],"time":29.90185546875,"times":[["normAngle",4.89208984375],["u",4.671875],["n0_i",4.830078125],["n1_i",4.762939453125],["(+.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (-.f64 1 u) normAngle)) (/.f64 1 (sin.f64 normAngle))) n0_i) (*.f64 (*.f64 (sin.f64 (*.f64 u normAngle)) (/.f64 1 (sin.f64 normAngle))) n1_i))",5.364990234375]],"type":"regimes"},{"compiler":[[48,32]],"egraph":[[5,68,65,0.000408917],[4,67,65,0.000337292],[3,63,65,0.000264625],[2,57,65,0.000192625],[1,45,65,0.00012137500000000001],[0,29,65,5.425e-5]],"inputs":[["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 u normAngle) (sin.f64 normAngle))) n1_i))","(+.f64 (fma.f64 (*.f64 normAngle normAngle) (*.f64 (fma.f64 -1/6 (pow.f64 (-.f64 1 u) 3) (fma.f64 u -1/6 1/6)) n0_i) (-.f64 n0_i (*.f64 u n0_i))) (*.f64 (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 u 3) (pow.f64 normAngle 3)) (sin.f64 normAngle))) (/.f64 (*.f64 normAngle u) (sin.f64 normAngle))) n1_i))"]],"stop":[["fuel",1],["saturated",1]],"time":9.6650390625,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[48,32]],"remove-preprocessing":[[]],"time":17.75390625,"type":"end"}]
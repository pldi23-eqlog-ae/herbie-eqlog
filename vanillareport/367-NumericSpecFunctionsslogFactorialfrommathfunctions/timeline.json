[{"compiler":[[7,5]],"method":["search"],"sampling":[[12,0.7496337890625,0.0014641284942626953,0.2489020824432373],[11,0.7496337890625,0.0029282569885253906,0.2474379539489746],[10,0.7496337890625,0.005856513977050781,0.24450969696044922],[9,0.7496337890625,0.011713027954101563,0.23865318298339844],[8,0.7496337890625,0.023426055908203125,0.22694015502929688],[7,0.7496337890625,0.04685211181640625,0.20351409912109375],[6,0.7496337890625,0.0937042236328125,0.1566619873046875],[5,0.7496337890625,0.187408447265625,0.062957763671875],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.492919921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.40283203125,15],["body",256,"valid",221.2431640625,8256]],"time":229.22314453125,"type":"sample"},{"compiler":[[6,4]],"egraph":[[0,1,1,1e-6],[1,9,7,6.7999e-5],[0,5,7,4.0708e-5]],"inputs":[["0"],["(/.f64 1 (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 1 (*.f64 x x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.755859375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,9,7,6.4458e-5],[0,5,7,3.75e-5]],"inputs":[["(/.f64 1 (*.f64 x x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 (*.f64 x x))"]],"stop":[["saturated",1]],"time":10.338134765625,"type":"simplify"},{"compiler":[[6,4]],"time":0.212890625,"type":"eval"},{"alts":[["(/.f64 1 (*.f64 x x))","next",0.33092515430673014]],"compiler":[[6,4],[6,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.33092515430673014],"time":0.626953125,"type":"prune"},{"compiler":[[11,5]],"locations":[["(/.f64 1 (*.f64 x x))",0.3309251543067302,true]],"time":2.399169921875,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 1 (*.f64 x x))","x","-inf",0.169189453125],["(/.f64 1 (*.f64 x x))","x","inf",0.205078125],["(/.f64 1 (*.f64 x x))","x","0",0.554931640625]],"time":0.970947265625,"type":"series"},{"count":[[1,38]],"egraph":[[2,1163,4,0.014057251],[1,100,4,0.0017600839999999999],[0,5,7,0.000161]],"inputs":[["(/.f64 1 (*.f64 x x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 x -2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 x -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (pow.f64 x -2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (*.f64 (cbrt.f64 x) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 x)) (pow.f64 (*.f64 (sqrt.f64 x) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 x -2)) 2) (cbrt.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) -2) (pow.f64 (pow.f64 (cbrt.f64 x) 2) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) -2) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) -2) (pow.f64 (sqrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (pow.f64 x 4))) -2) (pow.f64 (sqrt.f64 (pow.f64 (cbrt.f64 x) 2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sqrt.f64 x)) -1) (/.f64 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (pow.f64 (cbrt.f64 x) 2)) -1) (pow.f64 (cbrt.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (pow.f64 x -2) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (pow.f64 x -2) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 x x) -2) (/.f64 1 x)) 1/3) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 x x) -2) (pow.f64 (cbrt.f64 (pow.f64 x -2)) 2)) 1/3) (cbrt.f64 (cbrt.f64 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x -2))) 2) 3) (cbrt.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (pow.f64 x -2))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (pow.f64 x -2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x x) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 x -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 x -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2 (log.f64 x)))))))"]],"rules":[["egg-rr",38]],"stop":[["node limit",1]],"time":31.181884765625,"type":"rewrite"},{"count":[[50,40]],"egraph":[[21,6922,84,0.10496837499999999],[20,6886,84,0.089385708],[19,6814,84,0.079052917],[18,6540,84,0.070199667],[17,6246,84,0.062177417],[16,5854,84,0.054786792],[15,5017,84,0.047452833],[14,4327,84,0.039385500000000004],[13,3759,84,0.032484375],[12,3278,84,0.026538875],[11,2885,84,0.020944167],[10,2586,84,0.016309417],[9,2378,84,0.012631708],[8,2194,84,0.009590458],[7,2028,84,0.0070089160000000005],[6,819,84,0.004322541],[5,220,84,0.001795041],[4,74,84,0.000698749],[3,34,84,0.000342249],[2,19,84,0.00019216600000000002],[1,12,84,0.000110666],[0,6,84,4.9666e-5]],"inputs":[["(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))"]],"stop":[["node limit",1]],"time":120.024169921875,"type":"simplify"},{"compiler":[[356,264]],"time":6.120849609375,"type":"eval"},{"alts":[["(pow.f64 x -2)","next",0]],"compiler":[[4,3],[4,3]],"count":[[41,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[40,1],"picked":[1,0]}],"min-error":[0],"time":5.967041015625,"type":"prune"},{"compiler":[[6,4]],"time":1.74609375,"type":"localize"},{"compiler":[[1,1]],"time":0.0869140625,"type":"eval"},{"alts":[["(pow.f64 x -2)","done",0]],"compiler":[[4,3]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.424072265625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(/.f64 1 (*.f64 x x))",0,1],["(*.f64 x x)",0,1]],"compiler":[[2,1],[6,4],[4,2],[9,6]],"count":[[2,1]],"inputs":[["(pow.f64 x -2)","(/.f64 1 (*.f64 x x))"]],"link":["."],"name":["Numeric.SpecFunctions:$slogFactorial from math-functions-0.1.5.2, A"],"oracle":[0.33092515430673014],"outputs":[["(pow.f64 x -2)"]],"time":7.114990234375,"times":[["x",2.375],["(/.f64 1 (*.f64 x x))",1.97802734375],["(*.f64 x x)",2.306884765625]],"type":"regimes"},{"compiler":[[4,3]],"egraph":[[0,4,4,9.417e-6]],"inputs":[["(pow.f64 x -2)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x -2)"]],"stop":[["done",1],["saturated",1]],"time":8.326904296875,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[4,3]],"remove-preprocessing":[[]],"time":7.18896484375,"type":"end"}]
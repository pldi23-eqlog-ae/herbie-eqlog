[{"compiler":[[10,8]],"method":["search"],"sampling":[[2,0.99951171875,0.0,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":0.220947265625,"type":"analyze"},{"outcomes":[["body",256,"valid",298.009765625,8256]],"time":305.919189453125,"type":"sample"},{"compiler":[[9,7]],"egraph":[[0,1,1,1.417e-6],[12,7298,13,0.044279375999999995],[11,5548,13,0.033162167],[10,4367,13,0.021330709],[9,3176,13,0.014027667],[8,1195,13,0.008079584],[7,434,13,0.003626501],[6,184,13,0.001736667],[5,87,13,0.000987584],[4,47,13,0.000564917],[3,28,13,0.000346126],[2,21,13,0.000208751],[1,15,13,0.000128542],[0,8,13,6.6417e-5]],"inputs":[["0"],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":67.052001953125,"type":"preprocess"},{"count":[[1,1]],"egraph":[[12,7298,13,0.048144334000000004],[11,5548,13,0.034727459],[10,4367,13,0.021194209],[9,3176,13,0.013844417],[8,1195,13,0.007931542],[7,434,13,0.003497375],[6,184,13,0.001629334],[5,87,13,0.000890334],[4,47,13,0.000516084],[3,28,13,0.000311959],[2,21,13,0.00019341699999999998],[1,15,13,0.00011583399999999999],[0,8,13,5.5542e-5]],"inputs":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"stop":[["node limit",1]],"time":59.659912109375,"type":"simplify"},{"compiler":[[9,7]],"time":0.347900390625,"type":"eval"},{"alts":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","next",0.00390625]],"compiler":[[9,7],[9,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.752197265625,"type":"prune"},{"compiler":[[24,8]],"locations":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",0.00390625,true]],"time":6.005859375,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","-inf",0.751953125],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","inf",0.546875],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","0",0.5859375]],"time":1.966064453125,"type":"series"},{"count":[[1,10]],"egraph":[[0,8,9,0.000255916],[2,2839,9,0.006910957],[1,176,9,0.006895249],[0,8,9,0.000296416]],"inputs":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["egg-rewrite-iter-limit","batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (cbrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x))))) (cbrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (*.f64 2 (cosh.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (/.f64 2 (*.f64 2 (cosh.f64 x))) (/.f64 2 (*.f64 2 (cosh.f64 x)))) (/.f64 2 (*.f64 2 (cosh.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))))))"]],"rules":[["egg-rr",10]],"stop":[["iter limit",1],["unsound",1]],"time":36.77490234375,"type":"rewrite"},{"count":[[22,19]],"egraph":[[7,7140,150,0.03897975],[6,4379,150,0.026361833],[5,3202,150,0.013996833],[4,1280,150,0.007726749999999999],[3,357,150,0.003186084],[2,132,152,0.0011620419999999998],[1,66,154,0.000493125],[0,31,156,0.0001865]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 5/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -61/720 (pow.f64 x 6)) (*.f64 5/24 (pow.f64 x 4)))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 x x)))","(fma.f64 -1/2 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 5/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 5/24 (pow.f64 x 4))))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 5/24 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -61/720 (pow.f64 x 6)) (*.f64 5/24 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 -61/720 (pow.f64 x 6) (*.f64 5/24 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 5/24 (pow.f64 x 4) (*.f64 -61/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 -1/2 (*.f64 x x) 1) (fma.f64 -61/720 (pow.f64 x 6) (*.f64 5/24 (pow.f64 x 4))))","(fma.f64 -61/720 (pow.f64 x 6) (fma.f64 -1/2 (*.f64 x x) (fma.f64 5/24 (pow.f64 x 4) 1)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 5/24 -1/2) (fma.f64 -61/720 (pow.f64 x 6) 1))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 5/24 (pow.f64 x 4) (fma.f64 -61/720 (pow.f64 x 6) 1)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))"]],"stop":[["node limit",1]],"time":53.09912109375,"type":"simplify"},{"compiler":[[206,155]],"time":3.158935546875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))","next",0]],"compiler":[[16,13],[16,13]],"count":[[20,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[19,1],"picked":[1,0]}],"min-error":[0],"time":3.22509765625,"type":"prune"},{"compiler":[[37,25]],"locations":[["(/.f64 2 (*.f64 2 (cosh.f64 x)))",0.00390625,true]],"time":8.11181640625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 2 (*.f64 2 (cosh.f64 x)))","x","-inf",1.19580078125],["(/.f64 2 (*.f64 2 (cosh.f64 x)))","x","inf",0.864990234375],["(/.f64 2 (*.f64 2 (cosh.f64 x)))","x","0",0.336181640625]],"time":2.447998046875,"type":"series"},{"count":[[1,20]],"egraph":[[2,1613,6,0.019405501],[1,132,6,0.002345792],[0,6,6,0.00021475]],"inputs":[["(/.f64 2 (*.f64 2 (cosh.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (cosh.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1/2 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cosh.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (cosh.f64 x))) (pow.f64 (/.f64 1 (cbrt.f64 (cosh.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (cbrt.f64 (cosh.f64 x))) 2) (/.f64 1 (cbrt.f64 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (cosh.f64 x))) (/.f64 1 (sqrt.f64 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (*.f64 (cosh.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (cosh.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cosh.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cosh.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (cosh.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (cosh.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (sqrt.f64 (cosh.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (pow.f64 (cosh.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (cosh.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (cosh.f64 x))))))))"]],"rules":[["egg-rr",20]],"stop":[["node limit",1]],"time":37.56298828125,"type":"rewrite"},{"count":[[32,29]],"egraph":[[8,7842,150,0.042069999],[7,4734,150,0.031030874],[6,3798,150,0.018963916],[5,3031,150,0.012162958],[4,1193,150,0.006641708],[3,332,150,0.002565875],[2,120,152,0.000946375],[1,56,154,0.000397667],[0,25,156,0.000135]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 5/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -61/720 (pow.f64 x 6)) (*.f64 5/24 (pow.f64 x 4)))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 x x)))","(fma.f64 -1/2 (*.f64 x x) 1)","(fma.f64 x (*.f64 -1/2 x) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 5/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 5/24 (pow.f64 x 4))))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 5/24 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -61/720 (pow.f64 x 6)) (*.f64 5/24 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 -61/720 (pow.f64 x 6) (*.f64 5/24 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 5/24 (pow.f64 x 4) (*.f64 -61/720 (pow.f64 x 6)))))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -61/720 (pow.f64 x 6) (fma.f64 5/24 (pow.f64 x 4) 1)))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 5/24 (pow.f64 x 4) (fma.f64 -61/720 (pow.f64 x 6) 1)))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (/.f64 1 (exp.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"stop":[["node limit",1]],"time":57.22119140625,"type":"simplify"},{"compiler":[[995,721]],"time":12.968994140625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))","done",0]],"compiler":[[16,13]],"count":[[59,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[58,0],"picked":[1,1]}],"min-error":[0],"time":10.125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",0,1],["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",0,1]],"compiler":[[2,1],[9,7],[7,5],[24,19]],"count":[[2,1]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"link":["."],"name":["Hyperbolic secant"],"oracle":[0.00390625],"outputs":[["(*.f64 (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))"]],"time":7.298828125,"times":[["x",2.5791015625],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",2.151123046875],["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",1.885986328125]],"type":"regimes"},{"compiler":[[16,13]],"egraph":[[1,9,24,2.9416e-5],[0,8,24,1.7625e-5]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))) (sqrt.f64 (/.f64 2 (*.f64 2 (cosh.f64 x)))))"]],"stop":[["done",1],["saturated",1]],"time":8.211181640625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[16,13]],"remove-preprocessing":[[]],"time":10.10205078125,"type":"end"}]
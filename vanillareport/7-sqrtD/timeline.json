[{"compiler":[[8,7]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.5029296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.126953125,3],["body",256,"valid",311.177001953125,8256]],"time":318.41796875,"type":"sample"},{"compiler":[[7,6]],"egraph":[[0,1,1,1.625e-6],[22,7960,9,0.120434083],[21,7019,9,0.108586542],[20,6985,9,0.095014667],[19,6909,9,0.084769084],[18,6629,9,0.076388501],[17,6341,9,0.068065793],[16,5947,9,0.060330126],[15,5110,9,0.051896626],[14,4422,9,0.042969585000000005],[13,3856,9,0.035698877000000004],[12,3375,9,0.029607210000000002],[11,2984,9,0.023830418000000003],[10,2685,9,0.019111293],[9,2477,9,0.015213627],[8,2293,9,0.011717585],[7,2129,9,0.008683668],[6,1255,9,0.005431293],[5,330,9,0.002670418],[4,108,9,0.000900959],[3,44,9,0.00039379300000000003],[2,23,9,0.000209293],[1,12,9,0.000115501],[0,6,9,4.9209e-5]],"inputs":[["0"],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))","(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":144.007080078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[22,7960,9,0.12051933299999999],[21,7019,9,0.108705083],[20,6985,9,0.094992791],[19,6909,9,0.084809416],[18,6629,9,0.076465207],[17,6341,9,0.068266999],[16,5947,9,0.060436332],[15,5110,9,0.052236165],[14,4422,9,0.04330679],[13,3856,9,0.036089207],[12,3375,9,0.029902249],[11,2984,9,0.024092749],[10,2685,9,0.019334916],[9,2477,9,0.015392916],[8,2293,9,0.011855415999999999],[7,2129,9,0.008830082999999999],[6,1255,9,0.005586166],[5,330,9,0.002702708],[4,108,9,0.000889],[3,44,9,0.000386292],[2,23,9,0.000203626],[1,12,9,0.00011108400000000001],[0,6,9,4.4917e-5]],"inputs":[["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))","(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"stop":[["node limit",1]],"time":132.0888671875,"type":"simplify"},{"compiler":[[13,10]],"time":0.335205078125,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))","next",29.701412836488963]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[29.701412836488963],"time":0.785888671875,"type":"prune"},{"compiler":[[17,8]],"locations":[["(*.f64 2 (*.f64 x x))",0.00390625,true],["(sqrt.f64 (*.f64 2 (*.f64 x x)))",28.638264051665978,true]],"time":3.5029296875,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 2 (*.f64 x x))","x","-inf",0.304931640625],["(*.f64 2 (*.f64 x x))","x","inf",0.3359375],["(*.f64 2 (*.f64 x x))","x","0",0.39892578125],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","x","-inf",0.170166015625],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","x","inf",0.39208984375],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","x","0",0.4970703125]],"time":2.176025390625,"type":"series"},{"count":[[2,36]],"egraph":[[2,1367,13,0.017038125],[1,122,13,0.002036417],[0,6,16,0.00017925]],"inputs":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))","(*.f64 2 (*.f64 x x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) (sqrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4))) 1/2) (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 2 x) 1/2) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 2 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 4 (pow.f64 x 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 2) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2 (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (*.f64 x x))))))))"]],"rules":[["egg-rr",12],["egg-rr",24]],"stop":[["node limit",1]],"time":40.22802734375,"type":"rewrite"},{"count":[[60,40]],"egraph":[[12,5738,164,0.053282418000000005],[11,4611,164,0.04068221],[10,3744,164,0.031001918000000003],[9,2907,164,0.022861168],[8,2038,164,0.015464335],[7,1635,164,0.01058396],[6,988,164,0.006955043],[5,632,164,0.003840543],[4,205,164,0.0018756679999999998],[3,83,164,0.0007987929999999999],[2,43,164,0.00040395899999999996],[1,20,164,0.000208792],[0,9,164,8.9167e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))"]],"stop":[["node limit",1]],"time":70.298095703125,"type":"simplify"},{"compiler":[[313,236]],"time":5.448974609375,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963],["(fabs.f64 (*.f64 x (sqrt.f64 2)))","next",0.42578125],["(*.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","fresh",44.73822995784455],["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)","fresh",33.082771386758196],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","fresh",32.467446065515986],["(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","fresh",29.852135346257406]],"compiler":[[7,5],[6,5],[16,13],[8,6],[8,7],[8,7],[10,8],[6,5],[16,13],[8,6],[8,7],[8,7],[10,8]],"count":[[41,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[40,6],"picked":[1,1]}],"min-error":[0.125],"time":7.489013671875,"type":"prune"},{"compiler":[[14,11]],"locations":[["(*.f64 x (sqrt.f64 2))",0.42578125,true]],"time":3.786865234375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (sqrt.f64 2))","x","-inf",0.295166015625],["(*.f64 x (sqrt.f64 2))","x","inf",0.149169921875],["(*.f64 x (sqrt.f64 2))","x","0",0.199951171875]],"time":0.68603515625,"type":"series"},{"count":[[1,15]],"egraph":[[2,1075,6,0.013583874],[1,100,6,0.0016187909999999998],[0,5,6,0.000158791]],"inputs":[["(*.f64 x (sqrt.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))"]],"rules":[["egg-rr",15]],"stop":[["node limit",1]],"time":29.7861328125,"type":"rewrite"},{"count":[[27,16]],"egraph":[[1,6,72,6.4292e-5],[0,5,72,3.55e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"stop":[["saturated",1]],"time":10.656005859375,"type":"simplify"},{"compiler":[[139,114]],"time":2.548828125,"type":"eval"},{"alts":[["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","next",0.8263755125896408],["(*.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","fresh",44.73822995784455],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963],["(fabs.f64 (*.f64 x (sqrt.f64 2)))","done",0.42578125],["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)","fresh",33.082771386758196],["(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","fresh",29.852135346257406]],"compiler":[[9,8],[16,13],[7,5],[6,5],[8,6],[8,7],[10,8],[9,8],[16,13],[8,6],[8,7],[10,8]],"count":[[23,7]],"kept":[{"done":[1,1],"fresh":[5,4],"new":[16,1],"picked":[1,1]}],"min-error":[0.09765625],"time":5.041015625,"type":"prune"},{"compiler":[[30,25]],"locations":[["(cbrt.f64 (*.f64 x (sqrt.f64 2)))",0.11328125,true],["(*.f64 x (sqrt.f64 2))",0.42578125,false],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)",0.6889802735163768,true]],"time":9.31298828125,"type":"localize"},{"count":[[2,0]],"series":[["(cbrt.f64 (*.f64 x (sqrt.f64 2)))","x","-inf",0.318115234375],["(cbrt.f64 (*.f64 x (sqrt.f64 2)))","x","inf",0.323974609375],["(cbrt.f64 (*.f64 x (sqrt.f64 2)))","x","0",0.248046875],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","x","-inf",1.468994140625],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","x","inf",0.619873046875],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","x","0",0.81396484375]],"time":3.876953125,"type":"series"},{"count":[[2,52]],"egraph":[[2,1578,14,0.016596917],[1,168,14,0.002685834],[0,8,14,0.000284292]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","(cbrt.f64 (*.f64 x (sqrt.f64 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 2)) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) (sqrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) (*.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) 3) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) 3) (pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 2 1/4)) (pow.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))))) (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6)) (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 1/3) (pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))))"]],"rules":[["egg-rr",21],["egg-rr",31]],"stop":[["node limit",1]],"time":36.89111328125,"type":"rewrite"},{"count":[[52,52]],"egraph":[[0,0,0,2.0834e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.423095703125,"type":"simplify"},{"compiler":[[799,649]],"time":12.706787109375,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","fresh",0.359375],["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","done",0.8263755125896408],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963],["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","next",0.3515625],["(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","fresh",29.852135346257406],["(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","fresh",0.4811325195368841]],"compiler":[[10,9],[8,6],[9,8],[7,5],[10,9],[10,8],[11,10],[10,9],[8,6],[10,9],[10,8],[11,10]],"count":[[75,7]],"kept":[{"done":[2,1],"fresh":[4,2],"new":[68,3],"picked":[1,1]}],"min-error":[0.0234375],"time":11.68701171875,"type":"prune"},{"compiler":[[31,27]],"locations":[["(*.f64 x (cbrt.f64 2))",0.1328125,true],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))",0.25,true]],"time":9.3291015625,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 x (cbrt.f64 2))","x","-inf",0.259033203125],["(*.f64 x (cbrt.f64 2))","x","inf",0.138916015625],["(*.f64 x (cbrt.f64 2))","x","0",0.16796875],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","-inf",0.317138671875],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","inf",0.468994140625],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","0",2.742919921875]],"time":4.175048828125,"type":"series"},{"count":[[2,22]],"egraph":[[2,1746,12,0.017901708],[1,157,12,0.0026924999999999996],[0,8,19,0.000209208]],"inputs":[["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","(*.f64 x (cbrt.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (cbrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (cbrt.f64 2))))))))"]],"rules":[["egg-rr",11],["egg-rr",11]],"stop":[["node limit",1]],"time":37.35693359375,"type":"rewrite"},{"count":[[46,25]],"egraph":[[19,7650,228,0.081673373],[18,7088,228,0.07248753999999999],[17,6527,228,0.06381008099999999],[16,5864,228,0.055686664999999996],[15,5001,228,0.047188332],[14,4320,228,0.039587874],[13,3758,228,0.033182541],[12,3327,228,0.026851916000000003],[11,3015,228,0.022532333],[10,2806,228,0.018528625],[9,2644,228,0.014673708],[8,2540,228,0.011271833],[7,1255,228,0.007920625],[6,929,228,0.004822],[5,711,228,0.0031471249999999997],[4,213,228,0.001739083],[3,83,228,0.0006858330000000001],[2,43,228,0.00035875],[1,24,228,0.00019625],[0,11,228,8.2084e-5]],"inputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)"]],"stop":[["node limit",1]],"time":102.613037109375,"type":"simplify"},{"compiler":[[242,213]],"time":4.14306640625,"type":"eval"},{"alts":[["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","done",0.8263755125896408],["(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","fresh",0.359375],["(fabs.f64 (*.f64 (pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2) (cbrt.f64 (sqrt.f64 2))))","fresh",33.074001416063524],["(fabs.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3) (cbrt.f64 (sqrt.f64 2))))","fresh",0.8525317384221015],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963],["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","done",0.3515625],["(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","fresh",0.4811325195368841]],"compiler":[[9,8],[10,9],[13,12],[13,12],[7,5],[10,9],[11,10]],"count":[[32,7]],"kept":[{"done":[2,2],"fresh":[4,2],"new":[25,2],"picked":[1,1]}],"min-error":[0.015625],"time":4.641845703125,"type":"prune"},{"accuracy":[0.3515625],"baseline":[0.3515625],"branch":[["x",0.3515625,1],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))",0.3515625,1],["(*.f64 2 (pow.f64 x 2))",0.3515625,1],["(pow.f64 x 2)",0.3515625,1]],"compiler":[[2,1],[7,6],[6,5],[4,3],[123,102]],"count":[[14,1]],"inputs":[["(fabs.f64 (*.f64 (pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","(fabs.f64 (*.f64 x (sqrt.f64 2)))","(*.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","(pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)","(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","(sqrt.f64 (*.f64 2 (*.f64 x x)))","(sqrt.f64 (*.f64 2 (pow.f64 x 2)))"]],"link":["."],"name":["sqrt D"],"oracle":[53.766212179713236],"outputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"time":20.91796875,"times":[["x",5.7568359375],["(sqrt.f64 (*.f64 2 (pow.f64 x 2)))",3.97900390625],["(*.f64 2 (pow.f64 x 2))",4.4091796875],["(pow.f64 x 2)",3.93505859375]],"type":"regimes"},{"compiler":[[10,9]],"egraph":[[2,19,15,6.0123999999999996e-5],[1,14,15,4.0916e-5],[0,9,15,2.0041e-5]],"inputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"method":["egg-herbie"],"outputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.2890625,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[10,9]],"remove-preprocessing":[[]],"time":9.204833984375,"type":"end"}]
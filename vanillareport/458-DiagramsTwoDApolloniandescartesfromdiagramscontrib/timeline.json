[{"compiler":[[18,12]],"method":["search"],"sampling":[[12,0.1823498124509797,0.5928806736374099,0.22476951391161037],[11,0.13651857616650886,0.7069711980051352,0.15651022582835594],[10,0.10531433018559255,0.7586532304110278,0.1360324394033796],[9,0.0702095534570617,0.8815199489608858,0.048270497582052485],[8,0.04680636897137447,0.9517295024179475,0.0014641286106780171],[7,0.031204245980916312,0.9673316254084057,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":133.821044921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",213.967529296875,4568],["body",256,"valid",423.3525390625,8256]],"time":649.949951171875,"type":"sample"},{"compiler":[[17,11]],"egraph":[[1,3,3,1.275e-5],[0,3,3,1.2e-5],[3,89,64,0.0006035],[2,86,64,0.00045325],[1,60,64,0.000291208],[0,27,72,0.0001295]],"inputs":[["0","1","2"],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 y x) (*.f64 y z)) (*.f64 x z))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 z y) (*.f64 z x)) (*.f64 y x))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x z) (*.f64 x y)) (*.f64 z y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2","0"],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","(*.f64 2 (sqrt.f64 (+.f64 (*.f64 x y) (*.f64 z (+.f64 y x)))))","(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 y x) (*.f64 y z)) (*.f64 x z))))","(*.f64 2 (sqrt.f64 (+.f64 (*.f64 x y) (*.f64 z (+.f64 y x)))))","(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 z y) (*.f64 z x)) (*.f64 y x))))","(*.f64 2 (sqrt.f64 (+.f64 (*.f64 x y) (*.f64 z (+.f64 y x)))))","(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x z) (*.f64 x y)) (*.f64 z y))))","(*.f64 2 (sqrt.f64 (+.f64 (*.f64 x y) (*.f64 z (+.f64 y x)))))","(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y z)"]],"time":27.635986328125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,70,16,0.000769333],[4,69,16,0.000611625],[3,64,16,0.00044229199999999995],[2,45,16,0.00028575],[1,23,16,0.00015325],[0,12,18,6.0917e-5]],"inputs":[["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","(*.f64 2 (sqrt.f64 (+.f64 (*.f64 x (+.f64 y z)) (*.f64 y z))))","(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))"]],"stop":[["saturated",1]],"time":12.199951171875,"type":"simplify"},{"compiler":[[28,17]],"time":0.447998046875,"type":"eval"},{"alts":[["(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))","fresh",22.602389184835417],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","next",22.602389184835417]],"compiler":[[14,9],[17,11],[14,9],[17,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[22.598482934835417],"time":1.380126953125,"type":"prune"},{"compiler":[[60,12]],"locations":[["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))",1.1953125000000002,true],["(+.f64 (*.f64 x y) (*.f64 x z))",1.2148437500000002,true],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))",21.40391162531258,true]],"time":9.81787109375,"type":"localize"},{"count":[[3,84]],"series":[["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","z","-inf",0.255126953125],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","z","inf",0.23388671875],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","z","0",0.180908203125],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","y","-inf",0.241943359375],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","y","inf",0.2060546875],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","y","0",0.23681640625],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","x","-inf",0.169921875],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","x","inf",0.18701171875],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","x","0",0.201904296875],["(+.f64 (*.f64 x y) (*.f64 x z))","z","-inf",0.218017578125],["(+.f64 (*.f64 x y) (*.f64 x z))","z","inf",0.2021484375],["(+.f64 (*.f64 x y) (*.f64 x z))","z","0",0.255126953125],["(+.f64 (*.f64 x y) (*.f64 x z))","y","-inf",0.20703125],["(+.f64 (*.f64 x y) (*.f64 x z))","y","inf",0.26904296875],["(+.f64 (*.f64 x y) (*.f64 x z))","y","0",0.279052734375],["(+.f64 (*.f64 x y) (*.f64 x z))","x","-inf",0.484130859375],["(+.f64 (*.f64 x y) (*.f64 x z))","x","inf",0.419921875],["(+.f64 (*.f64 x y) (*.f64 x z))","x","0",0.39892578125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","z","-inf",1.108154296875],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","z","inf",0.948974609375],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","z","0",0.56494140625],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","y","-inf",0.782958984375],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","y","inf",0.90478515625],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","y","0",0.811767578125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","x","-inf",0.925048828125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","x","inf",0.85986328125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","x","0",0.88818359375]],"time":12.924072265625,"type":"series"},{"count":[[3,234]],"egraph":[[2,3302,31,0.031719],[1,223,31,0.0048475],[0,10,35,0.0002385]],"inputs":[["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","(+.f64 (*.f64 x y) (*.f64 x z))","(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (pow.f64 (*.f64 y z) 2))) (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3/2) (pow.f64 (*.f64 y z) 3/2)) (hypot.f64 (*.f64 x (+.f64 y z)) (sqrt.f64 (*.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 z (+.f64 x y))) (sqrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x (-.f64 y z))) (/.f64 (pow.f64 (*.f64 x z) 2) (*.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 2) (cbrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3)) (/.f64 1 (fma.f64 (*.f64 x z) (-.f64 (*.f64 x z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 x z) 2)) (/.f64 1 (*.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 x z) (-.f64 (*.f64 x z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x (-.f64 y z)) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 x z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3)) (fma.f64 (*.f64 x z) (-.f64 (*.f64 x z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3)) (+.f64 (pow.f64 (*.f64 x z) 2) (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x (*.f64 y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 x z) 2)) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3))) (neg.f64 (fma.f64 (*.f64 x z) (-.f64 (*.f64 x z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 x z) 2))) (neg.f64 (*.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x z) 2) (pow.f64 (*.f64 x y) 2)) (-.f64 (*.f64 x z) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 x z) (-.f64 (*.f64 x z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (-.f64 y z)) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 x z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (pow.f64 (exp.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x y)) (+.f64 1 (expm1.f64 (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (+.f64 1 (expm1.f64 (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x z))) (exp.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) x) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x z))) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (+.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) 1 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (pow.f64 (cbrt.f64 (*.f64 x z)) 2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x z)) 2) (cbrt.f64 (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x z)) (sqrt.f64 (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 z)) (sqrt.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 x)) (sqrt.f64 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 x z))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z))) (/.f64 (pow.f64 (*.f64 y z) 2) (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y z (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) (*.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 2) (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) (*.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) (pow.f64 (*.f64 y z) 3)) (/.f64 1 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (pow.f64 (*.f64 y z) 2)) (/.f64 1 (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) 3) (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))) (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2)) (+.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) (pow.f64 (*.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z)) (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (pow.f64 (*.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) (pow.f64 (*.f64 y z) 3)) (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) (pow.f64 (*.f64 y z) 3)) (+.f64 (pow.f64 (*.f64 y z) 2) (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (*.f64 (*.f64 x (+.f64 y z)) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (pow.f64 (*.f64 y z) 2)) (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) (pow.f64 (*.f64 y z) 3))) (neg.f64 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (pow.f64 (*.f64 y z) 2))) (neg.f64 (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (+.f64 x y)) 3)) (+.f64 (pow.f64 (*.f64 x y) 2) (-.f64 (pow.f64 (*.f64 z (+.f64 x y)) 2) (*.f64 (*.f64 x y) (*.f64 z (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (+.f64 x y)) 2)) (-.f64 (*.f64 x y) (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (*.f64 x (+.f64 y z)) 2)) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2)) (+.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) (pow.f64 (*.f64 y z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (+.f64 y z) (*.f64 (neg.f64 y) z)) (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (pow.f64 (*.f64 y z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y z (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (exp.f64 (*.f64 z (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x y)) (*.f64 (pow.f64 (exp.f64 z) x) (pow.f64 (exp.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (*.f64 (pow.f64 (exp.f64 z) x) (pow.f64 (exp.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z)))) (pow.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (+.f64 y z)) (+.f64 1 (expm1.f64 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z)))) (+.f64 1 (expm1.f64 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y z))) (pow.f64 (exp.f64 x) (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) y) (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y z))) (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 z (+.f64 x y))) (exp.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 z) x) (pow.f64 (exp.f64 z) y)) (exp.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 z (+.f64 x y))) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 z) x) (pow.f64 (exp.f64 z) y)) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y z (*.f64 x (+.f64 y z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y z) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (+.f64 x y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) 1 (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y z)) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (+.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 y z)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) x) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) z) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (pow.f64 (cbrt.f64 (*.f64 x z)) 2) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x z)) 2) (cbrt.f64 (*.f64 x z)) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 2) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 2) (cbrt.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 y z)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) x) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) z) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x z)) (sqrt.f64 (*.f64 x z)) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3)) (/.f64 1 (fma.f64 (*.f64 x z) (-.f64 (*.f64 x z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 x z) 2)) (/.f64 1 (*.f64 x (-.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 x y))) 2) (cbrt.f64 (*.f64 z (+.f64 x y))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (+.f64 x y))) (sqrt.f64 (*.f64 z (+.f64 x y))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 z)) (sqrt.f64 z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 y)) (sqrt.f64 y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 z)) (sqrt.f64 z) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 x y (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 (*.f64 z (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 z (+.f64 x y)) 1))))))"]],"rules":[["egg-rr",129],["egg-rr",72],["egg-rr",33]],"stop":[["node limit",1]],"time":66.47900390625,"type":"rewrite"},{"count":[[318,273]],"egraph":[[3,4665,1143,0.021343376999999997],[2,1284,1143,0.009025585],[1,361,1147,0.002429376],[0,119,1155,0.000545834]],"inputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)) (sqrt.f64 (*.f64 y z)))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (*.f64 (+.f64 y z) x) 1/2))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (sqrt.f64 (*.f64 y z))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3))) (+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(+.f64 (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (*.f64 (+.f64 y z) x) 1/2))) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3))) (sqrt.f64 (*.f64 y z))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3))) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (sqrt.f64 (*.f64 y z)))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (sqrt.f64 (*.f64 z x)))","(fma.f64 1/2 (*.f64 (+.f64 z x) (*.f64 y (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(fma.f64 y (*.f64 1/2 (*.f64 (+.f64 z x) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 -1/8 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (+.f64 z x) 2) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 x 3))))) (fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (sqrt.f64 (*.f64 z x))))","(fma.f64 -1/8 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (+.f64 z x) 2) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (fma.f64 1/2 (*.f64 (+.f64 z x) (*.f64 y (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 -1/8 (*.f64 (*.f64 (*.f64 y y) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3))))) (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 z x) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (fma.f64 (*.f64 y y) (*.f64 -1/8 (*.f64 (pow.f64 (+.f64 z x) 2) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 -1/8 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (+.f64 z x) 2) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 x 3))))) (fma.f64 1/16 (*.f64 (pow.f64 y 3) (*.f64 (pow.f64 (+.f64 z x) 3) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 5)) (pow.f64 x 5))))) (fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 -1/8 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (+.f64 z x) 2) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (fma.f64 1/16 (*.f64 (pow.f64 y 3) (*.f64 (pow.f64 (+.f64 z x) 3) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (fma.f64 1/2 (*.f64 (+.f64 z x) (*.f64 y (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 -1/8 (*.f64 (*.f64 (*.f64 y y) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3))))) (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 z x) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (fma.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (*.f64 1/16 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 -1/8 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (+.f64 z x) 2) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (fma.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (*.f64 1/16 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5))))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (*.f64 1/2 (*.f64 z (+.f64 y x))) (sqrt.f64 (/.f64 1 (*.f64 y x)))))","(fma.f64 1/2 (*.f64 z (*.f64 (+.f64 y x) (sqrt.f64 (/.f64 1 (*.f64 y x))))) (sqrt.f64 (*.f64 y x)))","(fma.f64 1/2 (*.f64 (*.f64 z (+.f64 y x)) (sqrt.f64 (/.f64 1 (*.f64 y x)))) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (*.f64 1/2 (*.f64 z (+.f64 y x))) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (fma.f64 1/2 (*.f64 z (*.f64 (+.f64 y x) (sqrt.f64 (/.f64 1 (*.f64 y x))))) (sqrt.f64 (*.f64 y x))))","(fma.f64 1/2 (*.f64 (*.f64 z (+.f64 y x)) (sqrt.f64 (/.f64 1 (*.f64 y x)))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (sqrt.f64 (*.f64 y x))))","(fma.f64 1/2 (*.f64 z (*.f64 (+.f64 y x) (sqrt.f64 (/.f64 1 (*.f64 y x))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 x 3)) (pow.f64 y 3))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))) (fma.f64 1/16 (*.f64 (*.f64 (pow.f64 z 3) (pow.f64 (+.f64 y x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (*.f64 1/2 (*.f64 z (+.f64 y x))) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (fma.f64 1/16 (*.f64 (pow.f64 (+.f64 y x) 3) (*.f64 (pow.f64 z 3) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (fma.f64 1/2 (*.f64 z (*.f64 (+.f64 y x) (sqrt.f64 (/.f64 1 (*.f64 y x))))) (sqrt.f64 (*.f64 y x)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (fma.f64 1/2 (*.f64 (*.f64 z (+.f64 y x)) (sqrt.f64 (/.f64 1 (*.f64 y x)))) (fma.f64 1/16 (*.f64 (pow.f64 (+.f64 y x) 3) (*.f64 (pow.f64 z 3) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (sqrt.f64 (*.f64 y x)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 x 3)) (pow.f64 y 3))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (fma.f64 1/2 (*.f64 z (*.f64 (+.f64 y x) (sqrt.f64 (/.f64 1 (*.f64 y x))))) (fma.f64 1/16 (*.f64 (pow.f64 z 3) (*.f64 (pow.f64 (+.f64 y x) 3) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (sqrt.f64 (*.f64 y x)))))","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (+.f64 y z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (+.f64 y z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (+.f64 y z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (+.f64 y z) x)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 (+.f64 y z) x)","(*.f64 y z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 (+.f64 y x) z)","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 y x (*.f64 z (+.f64 y x)))"]],"stop":[["node limit",1]],"time":46.97412109375,"type":"simplify"},{"compiler":[[5387,2170]],"time":43.5419921875,"type":"eval"},{"alts":[["(*.f64 2 (sqrt.f64 (*.f64 y z)))","fresh",42.0261546865909],["(*.f64 2 (pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) 3))","fresh",26.044241928678446],["(*.f64 2 (sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))))","next",22.692232934835417],["(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 x y))) 2) (cbrt.f64 (*.f64 z (+.f64 x y))) (*.f64 x y))))","fresh",22.700709204372302],["(*.f64 2 (sqrt.f64 (*.f64 y x)))","fresh",44.51693862295462],["(*.f64 2 (pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) 2))","fresh",22.8686779543723],["(*.f64 2 (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 z x) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","fresh",62.456410600581435],["(*.f64 2 (sqrt.f64 (*.f64 z x)))","fresh",62.015588288075975],["(*.f64 2 (sqrt.f64 (*.f64 z (+.f64 y x))))","fresh",41.01110957123231],["(*.f64 2 (/.f64 (hypot.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3/2) (pow.f64 (*.f64 y z) 3/2)) (hypot.f64 (*.f64 x (+.f64 y z)) (sqrt.f64 (*.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))))))))","fresh",53.237856763571706],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 y (sqrt.f64 z)) (sqrt.f64 z) (*.f64 x (+.f64 y z)))))","fresh",29.924881785110788]],"compiler":[[9,7],[17,12],[24,14],[24,13],[9,7],[17,12],[23,15],[9,7],[11,8],[39,18],[18,11],[9,7],[17,12],[24,14],[24,13],[9,7],[17,12],[23,15],[9,7],[11,8],[39,18],[18,11]],"count":[[275,11]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[273,11],"picked":[1,0]}],"min-error":[22.104197320075585],"time":100.5439453125,"type":"prune"},{"compiler":[[98,29]],"locations":[["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))",1.1953125000000002,true],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))",1.4218694952111206,true],["(cbrt.f64 (*.f64 x y))",21.32266088181046,true],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))",21.40391162531258,true]],"time":16.625,"type":"localize"},{"count":[[4,54]],"series":[["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","z","-inf",0.177001953125],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","z","inf",0.180908203125],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","z","0",0.1669921875],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","y","-inf",0.20703125],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","y","inf",0.18505859375],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","y","0",0.194091796875],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","x","-inf",0.196044921875],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","x","inf",0.197021484375],["(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))","x","0",0.203857421875],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","z","-inf",0.156005859375],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","z","inf",0.179931640625],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","z","0",0.760986328125],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","y","-inf",0.330078125],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","y","inf",0.337890625],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","y","0",0.31591796875],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","x","-inf",0.56298828125],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","x","inf",0.321044921875],["(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","x","0",0.43505859375],["(cbrt.f64 (*.f64 x y))","y","-inf",0.322021484375],["(cbrt.f64 (*.f64 x y))","y","inf",0.26806640625],["(cbrt.f64 (*.f64 x y))","y","0",0.703857421875],["(cbrt.f64 (*.f64 x y))","x","-inf",0.370849609375],["(cbrt.f64 (*.f64 x y))","x","inf",0.2490234375],["(cbrt.f64 (*.f64 x y))","x","0",0.30908203125],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","z","-inf",0.775146484375],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","z","inf",0.68994140625],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","z","0",0.76806640625],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","y","-inf",0.4130859375],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","y","inf",0.765869140625],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","y","0",0.39111328125],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","x","-inf",0.489990234375],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","x","inf",1.1689453125],["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","x","0",0.531005859375]],"time":13.77490234375,"type":"series"},{"count":[[4,181]],"egraph":[[2,3397,40,0.027675289999999998],[1,272,46,0.004747124],[0,13,83,0.000325208]],"inputs":[["(sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z)))","(cbrt.f64 (*.f64 x y))","(fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z))","(+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/6) (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/4) (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (pow.f64 (*.f64 y z) 2))) (sqrt.f64 (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3/2) (pow.f64 (*.f64 y z) 3/2)) (hypot.f64 (fma.f64 x y (*.f64 x z)) (sqrt.f64 (*.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (fma.f64 x y (*.f64 x z))) (sqrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 x y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 x y))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (cbrt.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 1/6) (pow.f64 (*.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) 4)) (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x y) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x y) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x y (*.f64 x z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x y (*.f64 x z))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x y (*.f64 x z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) 2) (cbrt.f64 (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x y (*.f64 x z))) (sqrt.f64 (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x z) 3)) (+.f64 (pow.f64 (*.f64 x y) 2) (-.f64 (pow.f64 (*.f64 x z) 2) (*.f64 (*.f64 x y) (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 x z) 2)) (-.f64 (*.f64 x y) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x y (*.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (pow.f64 (exp.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) x) (+.f64 1 (expm1.f64 (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (+.f64 1 (expm1.f64 (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x z))) (pow.f64 (exp.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) x) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x z))) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x y (*.f64 x z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z))) (/.f64 (pow.f64 (*.f64 y z) 2) (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 2) (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/4) (sqrt.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3) (pow.f64 (*.f64 y z) 3)) (/.f64 1 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))) (pow.f64 (fma.f64 x y (*.f64 x z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (pow.f64 (*.f64 y z) 2)) (/.f64 1 (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3/2)) (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))) (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))) (pow.f64 (fma.f64 x y (*.f64 x z)) 2)) (+.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3) (pow.f64 (*.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z)) (-.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (pow.f64 (*.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3) (pow.f64 (*.f64 y z) 3)) (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))) (pow.f64 (fma.f64 x y (*.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3) (pow.f64 (*.f64 y z) 3)) (+.f64 (pow.f64 (*.f64 y z) 2) (-.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (*.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (pow.f64 (*.f64 y z) 2)) (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3) (pow.f64 (*.f64 y z) 3))) (neg.f64 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))) (pow.f64 (fma.f64 x y (*.f64 x z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (pow.f64 (*.f64 y z) 2))) (neg.f64 (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (fma.f64 x y (*.f64 x z)) 2)) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))) (pow.f64 (fma.f64 x y (*.f64 x z)) 2)) (+.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3) (pow.f64 (*.f64 y z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z)) (-.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 2) (pow.f64 (*.f64 y z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x y (*.f64 x z)))) (pow.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 x y (*.f64 x z))) (+.f64 1 (expm1.f64 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x y (*.f64 x z)))) (+.f64 1 (expm1.f64 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y z))) (exp.f64 (fma.f64 x y (*.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) y) (+.f64 1 (expm1.f64 (fma.f64 x y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y z))) (+.f64 1 (expm1.f64 (fma.f64 x y (*.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x y (fma.f64 x z (*.f64 y z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x y (*.f64 x z)) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x y (*.f64 x z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 y z)) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) y) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) x) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) z) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) 2) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) 2) (cbrt.f64 (fma.f64 x y (*.f64 x z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) 4) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (cbrt.f64 (*.f64 x y))) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 y z)) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) y) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x y) 1/6) (*.f64 (pow.f64 (*.f64 x y) 1/6) (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) z) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x y (*.f64 x z))) (sqrt.f64 (fma.f64 x y (*.f64 x z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 y y))) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (cbrt.f64 (*.f64 x y)))) 2) (cbrt.f64 (cbrt.f64 (*.f64 x y))) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (pow.f64 (*.f64 x y) 1/6)) (pow.f64 (*.f64 x y) 1/6) (fma.f64 x z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 z)) (sqrt.f64 z) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (*.f64 y y))) (cbrt.f64 y) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 y)) (sqrt.f64 y) (fma.f64 x y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) 4)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (fma.f64 x z (*.f64 y z)))))))"]],"rules":[["egg-rr",87],["egg-rr",32],["egg-rr",31],["egg-rr",31]],"stop":[["node limit",1]],"time":57.8759765625,"type":"rewrite"},{"count":[[235,216]],"egraph":[[3,3747,692,0.019056667],[2,859,696,0.006755167],[1,290,696,0.001805834],[0,102,801,0.000491417]],"inputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x)) (sqrt.f64 (*.f64 y z)))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x)) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 3))) (pow.f64 x 2)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 5))) (pow.f64 x 3))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x)) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 3))) (pow.f64 x 2))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 z (pow.f64 x 5))))) (sqrt.f64 (*.f64 z x)))))","(*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))))","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x)) (sqrt.f64 (*.f64 y z)))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x) (sqrt.f64 (*.f64 y z)))","(fma.f64 (sqrt.f64 (/.f64 z y)) (*.f64 1/2 x) (sqrt.f64 (*.f64 y z)))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x)) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 3))) (pow.f64 x 2)))))","(+.f64 (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x) (sqrt.f64 (*.f64 y z))) (*.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 z (pow.f64 y 3)))) (*.f64 x x)))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x) (fma.f64 -1/8 (*.f64 x (*.f64 x (sqrt.f64 (/.f64 z (pow.f64 y 3))))) (sqrt.f64 (*.f64 y z))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x) (fma.f64 (sqrt.f64 (/.f64 z (pow.f64 y 3))) (*.f64 -1/8 (*.f64 x x)) (sqrt.f64 (*.f64 y z))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 5))) (pow.f64 x 3))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x)) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 3))) (pow.f64 x 2))))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 5))) (pow.f64 x 3)) (+.f64 (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x) (sqrt.f64 (*.f64 y z))) (*.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 z (pow.f64 y 3)))) (*.f64 x x))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 5))) (pow.f64 x 3)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x) (fma.f64 -1/8 (*.f64 x (*.f64 x (sqrt.f64 (/.f64 z (pow.f64 y 3))))) (sqrt.f64 (*.f64 y z)))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 z y)) x) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 z (pow.f64 y 5))) (pow.f64 x 3)) (fma.f64 (sqrt.f64 (/.f64 z (pow.f64 y 3))) (*.f64 -1/8 (*.f64 x x)) (sqrt.f64 (*.f64 y z)))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (sqrt.f64 (*.f64 z x)))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x)))","(fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 z (pow.f64 x 3)))) (sqrt.f64 (*.f64 z x))))","(fma.f64 (sqrt.f64 (/.f64 z (pow.f64 x 3))) (*.f64 y (*.f64 y -1/8)) (fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 z (pow.f64 x 5))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 z (pow.f64 x 3)))) (fma.f64 1/16 (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 z (pow.f64 x 5)))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 z (pow.f64 x 3)))) (fma.f64 (pow.f64 y 3) (*.f64 1/16 (sqrt.f64 (/.f64 z (pow.f64 x 5)))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 y (*.f64 y (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (fma.f64 (pow.f64 y 3) (*.f64 1/16 (sqrt.f64 (/.f64 z (pow.f64 x 5)))) (sqrt.f64 (*.f64 z x)))))","(*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))","(*.f64 1 (sqrt.f64 (*.f64 y x)))","(sqrt.f64 (*.f64 y x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1 (sqrt.f64 (*.f64 y x))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 z (+.f64 y x)))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 z (+.f64 y x))) (sqrt.f64 (*.f64 y x)))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) x)) (+.f64 y x))) (sqrt.f64 (*.f64 y x)))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (+.f64 y x))) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 z (+.f64 y x)))) (+.f64 (*.f64 1 (sqrt.f64 (*.f64 y x))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 z (+.f64 y x))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (sqrt.f64 (*.f64 y x))))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) x)) (+.f64 y x))) (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (*.f64 z z) -1/8)) (sqrt.f64 (*.f64 y x))))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (*.f64 z (+.f64 y x)) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (*.f64 y x)))) (*.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3))))) (*.f64 z (+.f64 y x))))))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))))","(+.f64 (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 z (+.f64 y x)))) (+.f64 (*.f64 1 (sqrt.f64 (*.f64 y x))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z)))))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3))) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 z (+.f64 y x))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z (*.f64 z (pow.f64 (+.f64 y x) 2)))) (sqrt.f64 (*.f64 y x)))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3))) (fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) x)) (+.f64 y x))) (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (*.f64 z z) -1/8)) (sqrt.f64 (*.f64 y x)))))","(+.f64 (sqrt.f64 (*.f64 y x)) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3))) (*.f64 (*.f64 z (+.f64 y x)) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (*.f64 y x)))) (*.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3))))) (*.f64 z (+.f64 y x)))))))","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 z x)","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(*.f64 1 (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 z x (*.f64 1 (*.f64 y x)))","(*.f64 x (+.f64 z y))","(*.f64 x (+.f64 y z))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(*.f64 1 (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (+.f64 y x) z (*.f64 1 (*.f64 y x)))","(fma.f64 y x (*.f64 z (+.f64 y x)))","(fma.f64 z (+.f64 y x) (*.f64 y x))"]],"stop":[["node limit",1]],"time":39.280029296875,"type":"simplify"},{"compiler":[[5339,2105]],"time":43.31103515625,"type":"eval"},{"alts":[["(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) z) (fma.f64 x y (*.f64 x z)))))","fresh",26.47407250369713],["(*.f64 2 (/.f64 (hypot.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3/2) (pow.f64 (*.f64 y z) 3/2)) (hypot.f64 (fma.f64 x y (*.f64 x z)) (sqrt.f64 (*.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))))))))","fresh",53.233950513571706],["(*.f64 2 (sqrt.f64 (*.f64 y z)))","fresh",42.0261546865909],["(*.f64 2 (pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) 3))","fresh",26.044241928678446],["(*.f64 2 (sqrt.f64 (*.f64 z x)))","fresh",62.015588288075975],["(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))))","fresh",22.700709204372302],["(*.f64 2 (sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))))","done",22.692232934835417],["(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 x y))) 2) (cbrt.f64 (*.f64 z (+.f64 x y))) (*.f64 x y))))","fresh",22.700709204372302],["(*.f64 2 (sqrt.f64 (*.f64 y x)))","fresh",44.51693862295462],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))))","next",22.668795434835417],["(*.f64 2 (sqrt.f64 (+.f64 (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) 3) (*.f64 y z))))","fresh",22.703951684835417],["(*.f64 2 (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 z x) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","fresh",62.456410600581435],["(*.f64 2 (fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x))))","fresh",62.58241345885289],["(*.f64 2 (sqrt.f64 (*.f64 z (+.f64 y x))))","fresh",41.01110957123231]],"compiler":[[21,13],[42,18],[9,7],[17,12],[9,7],[21,13],[24,14],[24,13],[9,7],[24,16],[19,13],[23,15],[17,12],[11,8],[21,13],[42,18],[9,7],[17,12],[9,7],[21,13],[24,13],[9,7],[24,16],[19,13],[23,15],[17,12],[11,8]],"count":[[258,14]],"kept":[{"done":[0,0],"fresh":[10,7],"new":[247,6],"picked":[1,1]}],"min-error":[22.104197320075585],"time":85.780029296875,"type":"prune"},{"compiler":[[100,31]],"locations":[["(pow.f64 (cbrt.f64 (*.f64 x y)) 2)",0.4655075195368841,true],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))",1.3007812500000002,true],["(cbrt.f64 (*.f64 x y))",21.32266088181046,false],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))",21.40391162531258,true]],"time":18.587890625,"type":"localize"},{"count":[[3,42]],"series":[["(pow.f64 (cbrt.f64 (*.f64 x y)) 2)","y","-inf",0.373046875],["(pow.f64 (cbrt.f64 (*.f64 x y)) 2)","y","inf",0.298828125],["(pow.f64 (cbrt.f64 (*.f64 x y)) 2)","y","0",0.251953125],["(pow.f64 (cbrt.f64 (*.f64 x y)) 2)","x","-inf",0.3779296875],["(pow.f64 (cbrt.f64 (*.f64 x y)) 2)","x","inf",0.305908203125],["(pow.f64 (cbrt.f64 (*.f64 x y)) 2)","x","0",0.2509765625],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","z","-inf",0.303955078125],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","z","inf",0.26806640625],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","z","0",0.958984375],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","y","-inf",0.26904296875],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","y","inf",0.27001953125],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","y","0",0.26806640625],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","x","-inf",0.97802734375],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","x","inf",0.3369140625],["(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","x","0",1.151123046875],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","z","-inf",0.385009765625],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","z","inf",0.340087890625],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","z","0",0.325927734375],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","y","-inf",0.510009765625],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","y","inf",1.672119140625],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","y","0",0.27490234375],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","x","-inf",1.03515625],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","x","inf",0.998046875],["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","x","0",0.928955078125]],"time":13.47802734375,"type":"series"},{"count":[[3,90]],"egraph":[[2,3373,33,0.027069791000000003],[1,296,37,0.004831666],[0,15,65,0.000350333]],"inputs":[["(sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z))))","(fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))","(pow.f64 (cbrt.f64 (*.f64 x y)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/4) (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 2))) (sqrt.f64 (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 z (+.f64 x y))) (sqrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 z (+.f64 x y))) (*.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 x 1/6)) (pow.f64 y 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 x 1/6)) (pow.f64 y 1/6)) (sqrt.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (+.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 z (+.f64 x y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x y (*.f64 x z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (+.f64 x y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) (cbrt.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 2)) (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/4) (*.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/4) (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/4) 3) (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (+.f64 x y)) 3)) (+.f64 (pow.f64 (*.f64 x y) 2) (-.f64 (pow.f64 (*.f64 z (+.f64 x y)) 2) (*.f64 (*.f64 x y) (*.f64 z (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (+.f64 x y)) 2)) (-.f64 (*.f64 x y) (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (pow.f64 (exp.f64 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) x) (+.f64 1 (expm1.f64 (*.f64 z (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (+.f64 1 (expm1.f64 (*.f64 z (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (+.f64 x y)))) (pow.f64 (exp.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (+.f64 x y)) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (+.f64 x y)))) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 z (+.f64 x y) (*.f64 x y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 4)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 1/6) (*.f64 (pow.f64 (*.f64 x y) 1/6) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x y)) (pow.f64 (*.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))) (cbrt.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 x y))) 1))))))"]],"rules":[["egg-rr",24],["egg-rr",37],["egg-rr",29]],"stop":[["node limit",1]],"time":52.208984375,"type":"rewrite"},{"count":[[132,128]],"egraph":[[3,4523,749,0.02060725],[2,1128,753,0.008128208],[1,360,753,0.002274292],[0,119,815,0.000557583]],"inputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x) (sqrt.f64 (/.f64 1 (*.f64 y z))))) (sqrt.f64 (*.f64 y z)))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x) (sqrt.f64 (/.f64 1 (*.f64 y z))))) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) 2) (pow.f64 x 2))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x) (sqrt.f64 (/.f64 1 (*.f64 y z))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) 3) (pow.f64 x 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))))) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) 2) (pow.f64 x 2)))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 z (pow.f64 x 5))))) (sqrt.f64 (*.f64 z x)))))","(*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x)))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x) (sqrt.f64 (/.f64 1 (*.f64 y z))))) (sqrt.f64 (*.f64 y z)))","(fma.f64 1/2 (*.f64 (fma.f64 1 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (sqrt.f64 (*.f64 y z)))","(fma.f64 1/2 (*.f64 (+.f64 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (sqrt.f64 (*.f64 y z)))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x) (sqrt.f64 (/.f64 1 (*.f64 y z))))) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) 2) (pow.f64 x 2))))))","(+.f64 (fma.f64 1/2 (*.f64 (fma.f64 1 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (sqrt.f64 (*.f64 y z))) (*.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3))))) (*.f64 (pow.f64 (fma.f64 1 y z) 2) (*.f64 x x))))","(fma.f64 1/2 (*.f64 (+.f64 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (sqrt.f64 (*.f64 y z))))","(fma.f64 1/2 (*.f64 (+.f64 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x (*.f64 x -1/8))) (sqrt.f64 (*.f64 y z))))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (*.f64 (+.f64 y z) x) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (*.f64 y z)))) (*.f64 (*.f64 (+.f64 y z) x) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))))))))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x) (sqrt.f64 (/.f64 1 (*.f64 y z))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) 3) (pow.f64 x 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))))) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) 2) (pow.f64 x 2)))))))","(fma.f64 1/2 (*.f64 (fma.f64 1 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (fma.f64 1/16 (*.f64 (*.f64 (pow.f64 (fma.f64 1 y z) 3) (pow.f64 x 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5))))) (+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3))))) (*.f64 (pow.f64 (fma.f64 1 y z) 2) (*.f64 x x))))))","(fma.f64 1/2 (*.f64 (+.f64 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (fma.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (sqrt.f64 (*.f64 y z)))))","(fma.f64 (pow.f64 (+.f64 y z) 3) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 1/16 (pow.f64 x 3))) (fma.f64 1/2 (*.f64 (+.f64 y z) (*.f64 x (sqrt.f64 (/.f64 1 (*.f64 y z))))) (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x (*.f64 x -1/8))) (sqrt.f64 (*.f64 y z)))))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (*.f64 1/16 (pow.f64 x 3))) (sqrt.f64 (*.f64 y z))) (*.f64 (*.f64 (+.f64 y z) x) (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (*.f64 y z)))) (*.f64 (*.f64 (+.f64 y z) x) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (sqrt.f64 (*.f64 z x)))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x)))","(fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 z (pow.f64 x 3)))) (sqrt.f64 (*.f64 z x))))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 y (*.f64 y (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 (sqrt.f64 (/.f64 z (pow.f64 x 3))) (*.f64 -1/8 (*.f64 y y)) (fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 z (pow.f64 x 5))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 z (pow.f64 x 3)))) (fma.f64 1/16 (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 z (pow.f64 x 5)))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 y (*.f64 y (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (fma.f64 1/16 (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 z (pow.f64 x 5)))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (fma.f64 -1/8 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 z (pow.f64 x 3)))) (fma.f64 (pow.f64 y 3) (*.f64 1/16 (sqrt.f64 (/.f64 z (pow.f64 x 5)))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (fma.f64 (pow.f64 y 3) (*.f64 1/16 (sqrt.f64 (/.f64 z (pow.f64 x 5)))) (fma.f64 -1/8 (*.f64 y (*.f64 y (sqrt.f64 (/.f64 z (pow.f64 x 3))))) (sqrt.f64 (*.f64 z x)))))","(*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))","(*.f64 1 (sqrt.f64 (*.f64 y x)))","(sqrt.f64 (*.f64 y x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1 (sqrt.f64 (*.f64 y x))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) x)) (*.f64 z (+.f64 y x)))))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (+.f64 y x))) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x)))))","(+.f64 (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) x)) (*.f64 z (+.f64 y x)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))))) (*.f64 1 (sqrt.f64 (*.f64 y x))))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (+.f64 y x))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))) (sqrt.f64 (*.f64 y x))))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (+.f64 y x))) (fma.f64 -1/8 (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z z))) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (*.f64 (+.f64 y x) z)))) (+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))) (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y x))))))","(+.f64 (+.f64 (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) x)) (*.f64 z (+.f64 y x)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))))) (*.f64 1 (sqrt.f64 (*.f64 y x)))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 z 3) (pow.f64 (+.f64 y x) 3)))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 z 3) (pow.f64 (+.f64 y x) 3))) (fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (+.f64 y x))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))) (sqrt.f64 (*.f64 y x)))))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (+.f64 y x))) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 z 3) (pow.f64 (+.f64 y x) 3))) (fma.f64 -1/8 (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 z z))) (sqrt.f64 (*.f64 y x)))))","(fma.f64 1/2 (*.f64 z (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y x))) (+.f64 y x))) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))) (*.f64 (pow.f64 z 3) (pow.f64 (+.f64 y x) 3))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (*.f64 z z))) (sqrt.f64 (*.f64 y x)))))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x)","(*.f64 (fma.f64 1 y z) x)","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) y) z) x))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x))","(*.f64 (fma.f64 1 y z) x)","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) y))) x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(*.f64 1 (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 (+.f64 y x) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 y z (*.f64 (fma.f64 1 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(fma.f64 z (+.f64 y x) (*.f64 y x))"]],"stop":[["node limit",1]],"time":40.3310546875,"type":"simplify"},{"compiler":[[3530,1549]],"time":30.26416015625,"type":"eval"},{"alts":[["(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 x y))) 2) (cbrt.f64 (*.f64 z (+.f64 x y))) (*.f64 x y))))","fresh",22.700709204372302],["(*.f64 2 (sqrt.f64 (*.f64 y x)))","fresh",44.51693862295462],["(*.f64 2 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))","fresh",22.73358044460386],["(*.f64 2 (pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) 3))","fresh",26.044241928678446],["(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))))","next",22.700709204372302],["(*.f64 2 (fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x))))","fresh",62.58241345885289],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","fresh",41.01110957123231],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))))","done",22.668795434835417],["(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) z) (fma.f64 x y (*.f64 x z)))))","fresh",26.47407250369713],["(*.f64 2 (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 z x) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","fresh",62.456410600581435],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y z) x)))","fresh",43.71372842099473],["(*.f64 2 (sqrt.f64 (*.f64 y z)))","fresh",42.0261546865909]],"compiler":[[24,13],[9,7],[25,12],[17,12],[21,13],[17,12],[11,8],[24,16],[21,13],[23,15],[11,8],[9,7],[24,13],[9,7],[25,12],[17,12],[21,13],[17,12],[11,8],[21,13],[23,15],[11,8],[9,7]],"count":[[173,12]],"kept":[{"done":[1,0],"fresh":[12,5],"new":[159,6],"picked":[1,1]}],"min-error":[22.104197320075585],"time":45.94384765625,"type":"prune"},{"compiler":[[75,23]],"locations":[["(pow.f64 (cbrt.f64 z) 2)",0.521816259768442,true],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))",1.464835492816681,true],["(fma.f64 x y (*.f64 x z))",1.5156084856333614,true],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))",21.40391162531258,true]],"time":14.14404296875,"type":"localize"},{"count":[[4,78]],"series":[["(pow.f64 (cbrt.f64 z) 2)","z","-inf",0.39794921875],["(pow.f64 (cbrt.f64 z) 2)","z","inf",0.319091796875],["(pow.f64 (cbrt.f64 z) 2)","z","0",0.26318359375],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","x","-inf",0.198974609375],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","x","inf",0.173095703125],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","x","0",0.882080078125],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","y","-inf",0.343994140625],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","y","inf",0.282958984375],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","y","0",1.005126953125],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","z","-inf",0.346923828125],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","z","inf",0.300048828125],["(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","z","0",0.3408203125],["(fma.f64 x y (*.f64 x z))","z","-inf",0.14697265625],["(fma.f64 x y (*.f64 x z))","z","inf",0.174072265625],["(fma.f64 x y (*.f64 x z))","z","0",0.18798828125],["(fma.f64 x y (*.f64 x z))","y","-inf",0.239013671875],["(fma.f64 x y (*.f64 x z))","y","inf",0.220947265625],["(fma.f64 x y (*.f64 x z))","y","0",0.18505859375],["(fma.f64 x y (*.f64 x z))","x","-inf",0.27685546875],["(fma.f64 x y (*.f64 x z))","x","inf",0.279052734375],["(fma.f64 x y (*.f64 x z))","x","0",0.283935546875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","x","-inf",1.694091796875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","x","inf",0.639892578125],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","x","0",0.60986328125],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","y","-inf",0.865966796875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","y","inf",0.68310546875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","y","0",0.68994140625],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","z","-inf",0.446044921875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","z","inf",0.589111328125],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","z","0",0.56201171875]],"time":14.041015625,"type":"series"},{"count":[[4,148]],"egraph":[[2,2753,37,0.025983043],[1,241,41,0.003993001],[0,12,60,0.000300834]],"inputs":[["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z))))","(fma.f64 x y (*.f64 x z))","(fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))","(pow.f64 (cbrt.f64 z) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6) (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/4) (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/2) (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))) 2)) (cbrt.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))) (sqrt.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 z y)) (sqrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3/2 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/4 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) 1) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 y z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 y z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 2) (cbrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (*.f64 z x) 3)) (+.f64 (pow.f64 (*.f64 y x) 2) (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 (*.f64 y x) (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (*.f64 z x) 2)) (-.f64 (*.f64 y x) (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x (+.f64 y z)))) 2)) (cbrt.f64 (log.f64 (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x (+.f64 y z))))) (sqrt.f64 (log.f64 (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z x))) (pow.f64 (exp.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) y) (+.f64 1 (expm1.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (+.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x (+.f64 y z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (+.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (+.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (+.f64 y z))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (+.f64 y z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z y) 1) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 y x)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 y z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 2) (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/4) (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3/4) (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 5/6) (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z y) 3) (pow.f64 (*.f64 x (+.f64 y z)) 3)) (+.f64 (pow.f64 (*.f64 z y) 2) (-.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2) (*.f64 (*.f64 z y) (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z y) 2) (pow.f64 (*.f64 x (+.f64 y z)) 2)) (-.f64 (*.f64 z y) (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 2)) (cbrt.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))) (sqrt.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z)))) (pow.f64 (exp.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) y) (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y z) (*.f64 z y))) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)))) 1) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/6) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 5) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 z (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 z) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 z) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 z)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 z)) 1) 1))))))"]],"rules":[["egg-rr",27],["egg-rr",46],["egg-rr",37],["egg-rr",38]],"stop":[["node limit",1]],"time":54.451904296875,"type":"rewrite"},{"count":[[226,186]],"egraph":[[4,6424,987,0.030921208],[3,3699,987,0.017166083],[2,1176,987,0.007556624],[1,362,989,0.002342041],[0,117,1036,0.000588541]],"inputs":[["(sqrt.f64 (*.f64 y x))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (pow.f64 z 2))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 5))) (pow.f64 z 3))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (pow.f64 z 2))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (*.f64 y x)))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) z) x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) z) x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (+.f64 (sqrt.f64 (*.f64 z x)) (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) z) x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))))))","(*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z)))","(+.f64 (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z))) (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z))) (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))) (*.f64 1/16 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3))))))))","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y)))","(*.f64 (pow.f64 1 1/3) (*.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 y x))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (*.f64 y x)))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (*.f64 y x)))","(fma.f64 (sqrt.f64 (/.f64 x y)) (*.f64 1/2 z) (sqrt.f64 (*.f64 y x)))","(fma.f64 1/2 (*.f64 z (sqrt.f64 (/.f64 x y))) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (pow.f64 z 2))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (*.f64 y x))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (*.f64 z z)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (*.f64 y x))))","(fma.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 x (pow.f64 y 3)))) (*.f64 z z) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (*.f64 y x))))","(fma.f64 (sqrt.f64 (/.f64 x y)) (*.f64 1/2 z) (fma.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (*.f64 -1/8 (*.f64 z z)) (sqrt.f64 (*.f64 y x))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z) (fma.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (*.f64 -1/8 (*.f64 z z)) (sqrt.f64 (*.f64 y x))))","(fma.f64 (*.f64 1/2 z) (sqrt.f64 (/.f64 x y)) (fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 y 3/2)) (*.f64 -1/8 (*.f64 z z)) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 5))) (pow.f64 z 3))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (pow.f64 z 2))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (*.f64 y x)))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 5))) (pow.f64 z 3)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 3))) (*.f64 z z)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (*.f64 y x)))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 5))) (pow.f64 z 3)) (fma.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 x (pow.f64 y 3)))) (*.f64 z z) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (*.f64 y x)))))","(fma.f64 -1/8 (*.f64 z (*.f64 z (sqrt.f64 (/.f64 x (pow.f64 y 3))))) (fma.f64 (sqrt.f64 (/.f64 x (pow.f64 y 5))) (*.f64 1/16 (pow.f64 z 3)) (fma.f64 (sqrt.f64 (/.f64 x y)) (*.f64 1/2 z) (sqrt.f64 (*.f64 y x)))))","(fma.f64 -1/8 (*.f64 z (*.f64 z (sqrt.f64 (/.f64 x (pow.f64 y 3))))) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 x (pow.f64 y 5))) (pow.f64 z 3)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (*.f64 y x)))))","(fma.f64 1/16 (*.f64 (/.f64 (sqrt.f64 x) (pow.f64 y 5/2)) (pow.f64 z 3)) (fma.f64 (*.f64 1/2 z) (sqrt.f64 (/.f64 x y)) (fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 y 3/2)) (*.f64 -1/8 (*.f64 z z)) (sqrt.f64 (*.f64 y x)))))","(sqrt.f64 (*.f64 z x))","(sqrt.f64 (*.f64 x z))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(fma.f64 1/2 (*.f64 y (*.f64 (fma.f64 1 z x) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z)))","(fma.f64 1/2 (*.f64 y (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z)))","(fma.f64 y (*.f64 1/2 (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) z) x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 -1/8 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (fma.f64 1 z x) 2) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 x 3))))) (fma.f64 1/2 (*.f64 y (*.f64 (fma.f64 1 z x) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z))))","(fma.f64 -1/8 (*.f64 (*.f64 y (*.f64 y (pow.f64 (+.f64 x z) 2))) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 x 3)))) (fma.f64 1/2 (*.f64 y (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z))))","(fma.f64 y (*.f64 1/2 (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (fma.f64 -1/8 (*.f64 (pow.f64 (+.f64 x z) 2) (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (sqrt.f64 (*.f64 x z))))","(fma.f64 y (*.f64 1/2 (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (fma.f64 (*.f64 (*.f64 y y) (pow.f64 (+.f64 x z) 2)) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3))))) (sqrt.f64 (*.f64 x z))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) z) x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (+.f64 (sqrt.f64 (*.f64 z x)) (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 (*.f64 (pow.f64 1 1/3) z) x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))))))","(fma.f64 -1/8 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (fma.f64 1 z x) 2) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 x 3))))) (+.f64 (fma.f64 1/2 (*.f64 y (*.f64 (fma.f64 1 z x) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z))) (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (fma.f64 1 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5))))))))","(fma.f64 -1/8 (*.f64 (*.f64 y (*.f64 y (pow.f64 (+.f64 x z) 2))) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 x 3)))) (fma.f64 1/2 (*.f64 y (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (fma.f64 1/16 (*.f64 (pow.f64 (+.f64 x z) 3) (*.f64 (pow.f64 y 3) (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 5)) (pow.f64 x 5))))) (sqrt.f64 (*.f64 x z)))))","(fma.f64 y (*.f64 1/2 (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (fma.f64 -1/8 (*.f64 (pow.f64 (+.f64 x z) 2) (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (fma.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 x z) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5))))) (sqrt.f64 (*.f64 x z)))))","(fma.f64 y (*.f64 1/2 (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (fma.f64 -1/8 (*.f64 (pow.f64 (+.f64 x z) 2) (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (fma.f64 (pow.f64 y 3) (*.f64 1/16 (*.f64 (pow.f64 (+.f64 x z) 3) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (sqrt.f64 (*.f64 x z)))))","(*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z)))","(*.f64 1 (sqrt.f64 (*.f64 y z)))","(sqrt.f64 (*.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z))) (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(fma.f64 1 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) z)) (*.f64 x (+.f64 y z)))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 z) y)) (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z)))","(fma.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 1/2 (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z)))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) z)) (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z)))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z))) (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(+.f64 (fma.f64 1 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) z)) (*.f64 x (+.f64 y z))))) (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 y 3))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 z) y)) (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z))))","(fma.f64 1/2 (*.f64 x (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (+.f64 y z))) (fma.f64 -1/8 (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 x x))) (sqrt.f64 (*.f64 y z))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) z)) (*.f64 x (+.f64 y z))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 y 3))) (*.f64 x (*.f64 x (pow.f64 (+.f64 y z) 2)))) (sqrt.f64 (*.f64 y z))))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 1 1/6) (sqrt.f64 (*.f64 y z))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))) (*.f64 1/16 (*.f64 (pow.f64 1 1/6) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3))))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x)))) (+.f64 (fma.f64 1 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) z)) (*.f64 x (+.f64 y z))))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 x 3) (pow.f64 (+.f64 y z) 3))))))","(+.f64 (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 y 3))) (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 x x))) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 z) y)) (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z)))) (*.f64 (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 5)) (pow.f64 y 5))) (*.f64 (*.f64 (pow.f64 x 3) (pow.f64 (+.f64 y z) 3)) 1/16)))","(fma.f64 -1/8 (*.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 x x))) (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 1/16 (*.f64 (pow.f64 x 3) (pow.f64 (+.f64 y z) 3))) (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 1/2 (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 (pow.f64 z 3)) (pow.f64 y 3))) (*.f64 x (*.f64 x (pow.f64 (+.f64 y z) 2)))) (fma.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 1/16 (*.f64 (pow.f64 x 3) (pow.f64 (+.f64 y z) 3))) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 1 y) z)) (*.f64 x (+.f64 y z))) (sqrt.f64 (*.f64 y z)))))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 x (+.f64 y z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 x (+.f64 y z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 x (+.f64 y z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x))","(*.f64 y (fma.f64 1 z x))","(*.f64 y (+.f64 x z))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 (*.f64 (pow.f64 1 1/3) z) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y))","(*.f64 y (fma.f64 1 z x))","(*.f64 y (+.f64 x z))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)) (*.f64 -1 x)) y)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(*.f64 (pow.f64 1 1/3) (*.f64 y z))","(*.f64 (*.f64 1 y) z)","(*.f64 y z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 z x (*.f64 y (fma.f64 1 z x)))","(fma.f64 y (+.f64 x z) (*.f64 x z))"]],"stop":[["node limit",1]],"time":54.958984375,"type":"simplify"},{"compiler":[[3851,1714]],"time":34.711181640625,"type":"eval"},{"alts":[["(*.f64 2 (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z))))","fresh",62.456410600581435],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","fresh",41.01110957123231],["(*.f64 2 (exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6)) 3)))","fresh",25.989039898703478],["(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 x y))) 2) (cbrt.f64 (*.f64 z (+.f64 x y))) (*.f64 x y))))","fresh",22.700709204372302],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))))","done",22.668795434835417],["(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) z) (fma.f64 x y (*.f64 x z)))))","fresh",26.47407250369713],["(*.f64 2 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))","fresh",22.73358044460386],["(*.f64 2 (fma.f64 1/2 (*.f64 z (sqrt.f64 (/.f64 x y))) (sqrt.f64 (*.f64 y x))))","fresh",47.294669943766934],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y z) x)))","fresh",43.71372842099473],["(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))))","done",22.700709204372302],["(*.f64 2 (sqrt.f64 (*.f64 y z)))","fresh",42.0261546865909]],"compiler":[[23,15],[11,8],[19,14],[24,13],[24,16],[21,13],[25,12],[17,12],[11,8],[21,13],[9,7]],"count":[[198,11]],"kept":[{"done":[1,1],"fresh":[10,6],"new":[186,3],"picked":[1,1]}],"min-error":[22.02703941161532],"time":51.5869140625,"type":"prune"},{"accuracy":[22.60238918483542],"baseline":[22.602389184835417],"branch":[["x",22.602389184835424,1],["y",22.60238918483542,1],["z",22.60238918483542,1],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))",22.60238918483542,1],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))",22.60238918483542,1],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))",22.60238918483542,1]],"compiler":[[4,3],[4,3],[4,3],[17,11],[15,9],[14,8],[435,195]],"count":[[28,1]],"inputs":[["(*.f64 2 (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 x z) (sqrt.f64 (/.f64 1 (*.f64 x z))))) (sqrt.f64 (*.f64 x z))))","(*.f64 2 (exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x (+.f64 y z) (*.f64 z y)) 1/6)) 3)))","(*.f64 2 (fma.f64 1/2 (*.f64 z (sqrt.f64 (/.f64 x y))) (sqrt.f64 (*.f64 y x))))","(*.f64 2 (sqrt.f64 (*.f64 y x)))","(*.f64 2 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))) (cbrt.f64 (fma.f64 z (+.f64 x y) (*.f64 x y)))))","(*.f64 2 (fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x))))","(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y z) x)))","(*.f64 2 (sqrt.f64 (*.f64 y z)))","(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) z) (fma.f64 x y (*.f64 x z)))))","(*.f64 2 (/.f64 (hypot.f64 (pow.f64 (fma.f64 x y (*.f64 x z)) 3/2) (pow.f64 (*.f64 y z) 3/2)) (hypot.f64 (fma.f64 x y (*.f64 x z)) (sqrt.f64 (*.f64 (*.f64 y z) (-.f64 (*.f64 y z) (fma.f64 x y (*.f64 x z))))))))","(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) y) (fma.f64 x y (*.f64 x z)))))","(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 x)) (cbrt.f64 y) (fma.f64 x z (*.f64 y z)))))","(*.f64 2 (sqrt.f64 (+.f64 (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 x z))) 3) (*.f64 y z))))","(*.f64 2 (fma.f64 y (*.f64 1/2 (sqrt.f64 (/.f64 z x))) (sqrt.f64 (*.f64 z x))))","(*.f64 2 (sqrt.f64 (*.f64 y z)))","(*.f64 2 (pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/6) 3))","(*.f64 2 (sqrt.f64 (+.f64 (fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x z)) (*.f64 y z))))","(*.f64 2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 x y))) 2) (cbrt.f64 (*.f64 z (+.f64 x y))) (*.f64 x y))))","(*.f64 2 (sqrt.f64 (*.f64 y x)))","(*.f64 2 (pow.f64 (pow.f64 (fma.f64 y z (*.f64 x (+.f64 y z))) 1/4) 2))","(*.f64 2 (fma.f64 y (*.f64 1/2 (*.f64 (+.f64 z x) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(*.f64 2 (sqrt.f64 (*.f64 z x)))","(*.f64 2 (sqrt.f64 (*.f64 z (+.f64 y x))))","(*.f64 2 (/.f64 (hypot.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3/2) (pow.f64 (*.f64 y z) 3/2)) (hypot.f64 (*.f64 x (+.f64 y z)) (sqrt.f64 (*.f64 (*.f64 y z) (-.f64 (*.f64 y z) (*.f64 x (+.f64 y z))))))))","(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 y (sqrt.f64 z)) (sqrt.f64 z) (*.f64 x (+.f64 y z)))))","(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))"]],"link":["."],"name":["Diagrams.TwoD.Apollonian:descartes from diagrams-contrib-1.3.0.5"],"oracle":[63.76804043197844],"outputs":[["(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))"]],"time":66.52001953125,"times":[["x",10.09912109375],["y",10.217041015625],["z",9.864013671875],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))",9.350830078125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))",9.216064453125],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))",9.173095703125]],"type":"regimes"},{"compiler":[[14,9]],"egraph":[[1,13,16,3.7708e-5],[0,10,16,2.3166e-5]],"inputs":[["(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (sqrt.f64 (fma.f64 x y (*.f64 z (+.f64 x y)))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.02294921875,"type":"simplify"},{"time":0.031005859375,"type":"soundness"},{"compiler":[[14,9],[14,9],[14,9]],"remove-preprocessing":[["(sort x y z)"]],"time":10.44189453125,"type":"end"}]
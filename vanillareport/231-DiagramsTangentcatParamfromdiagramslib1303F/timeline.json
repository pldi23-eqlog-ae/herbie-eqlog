[{"compiler":[[7,5]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.263916015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.172607421875,6],["body",256,"valid",211.096435546875,8256]],"time":219.14013671875,"type":"sample"},{"compiler":[[6,4]],"egraph":[[0,1,1,9.16e-7],[2,11,7,0.00010041600000000001],[1,8,7,6.6208e-5],[0,5,7,3.5041e-5]],"inputs":[["0"],["(*.f64 (*.f64 x 3) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 x 3) x)","(*.f64 x (*.f64 x 3))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.56787109375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,11,7,9.687500000000001e-5],[1,8,7,6.337500000000001e-5],[0,5,7,3.275e-5]],"inputs":[["(*.f64 (*.f64 x 3) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 3) x)","(*.f64 x (*.f64 x 3))"]],"stop":[["saturated",1]],"time":10.676025390625,"type":"simplify"},{"compiler":[[11,7]],"time":0.263916015625,"type":"eval"},{"alts":[["(*.f64 (*.f64 x 3) x)","next",0.21875]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.21875],"time":0.7451171875,"type":"prune"},{"compiler":[[11,7]],"locations":[["(*.f64 (*.f64 x 3) x)",0.21875,true]],"time":2.623046875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (*.f64 x 3) x)","x","-inf",0.173095703125],["(*.f64 (*.f64 x 3) x)","x","inf",0.34814453125],["(*.f64 (*.f64 x 3) x)","x","0",0.48486328125]],"time":1.0498046875,"type":"series"},{"count":[[1,14]],"egraph":[[2,1132,7,0.013666332],[1,101,7,0.001657374],[0,5,7,0.000159291]],"inputs":[["(*.f64 (*.f64 x 3) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 3))) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 3))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 x 3))))))))"]],"rules":[["egg-rr",14]],"stop":[["node limit",1]],"time":29.912109375,"type":"rewrite"},{"count":[[26,16]],"egraph":[[22,7938,84,0.11953029100000002],[21,6997,84,0.10786979100000002],[20,6961,84,0.09436595700000001],[19,6887,84,0.08424499800000002],[18,6609,84,0.07591141500000001],[17,6321,84,0.06774216500000001],[16,5925,84,0.06001029],[15,5092,84,0.05178154],[14,4404,84,0.042882332],[13,3838,84,0.03570429],[12,3357,84,0.02962979],[11,2964,84,0.023827624],[10,2665,84,0.019067749],[9,2457,84,0.015182082],[8,2273,84,0.011681999],[7,2109,84,0.008646166],[6,1232,84,0.005455791],[5,318,84,0.002699333],[4,104,84,0.000927416],[3,44,84,0.00041625000000000006],[2,23,84,0.00021787500000000002],[1,12,84,0.00012020800000000001],[0,6,84,4.8875e-5]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 x (*.f64 3 x))"]],"stop":[["node limit",1]],"time":134.498046875,"type":"simplify"},{"compiler":[[145,103]],"time":2.302978515625,"type":"eval"},{"alts":[["(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)","fresh",0.44081884768442026],["(pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 3)","fresh",0.578354101663913],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(*.f64 3 (pow.f64 x 2))","next",0.234375]],"compiler":[[9,7],[9,7],[6,4],[6,5],[9,7],[9,7],[6,5]],"count":[[17,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[16,3],"picked":[1,1]}],"min-error":[0.03515625],"time":3.29296875,"type":"prune"},{"compiler":[[12,9]],"locations":[["(*.f64 3 (pow.f64 x 2))",0.234375,true]],"time":3.291015625,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 3 (pow.f64 x 2))","x","-inf",0.179931640625],["(*.f64 3 (pow.f64 x 2))","x","inf",0.194091796875],["(*.f64 3 (pow.f64 x 2))","x","0",0.19287109375]],"time":0.60302734375,"type":"series"},{"count":[[1,11]],"egraph":[[2,1267,7,0.013494917],[1,124,7,0.001908376],[0,6,7,0.000213042]],"inputs":[["(*.f64 3 (pow.f64 x 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 3 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) 9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 3) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 3 (*.f64 x x))))))))"]],"rules":[["egg-rr",11]],"stop":[["node limit",1]],"time":30.125,"type":"rewrite"},{"count":[[11,11]],"egraph":[[0,0,0,1.9792e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.1298828125,"type":"simplify"},{"compiler":[[82,54]],"time":1.43017578125,"type":"eval"},{"alts":[["(pow.f64 (*.f64 x (sqrt.f64 3)) 2)","fresh",0.5226327637479347],["(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)","next",0.44081884768442026],["(pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 3)","fresh",0.578354101663913],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(*.f64 3 (pow.f64 x 2))","done",0.234375],["(sqrt.f64 (*.f64 (pow.f64 x 4) 9))","fresh",19.039887485614194]],"compiler":[[7,6],[9,7],[9,7],[6,4],[6,5],[7,6],[7,6],[9,7],[9,7],[7,6]],"count":[[15,6]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[11,2],"picked":[1,1]}],"min-error":[0.0078125],"time":3.93896484375,"type":"prune"},{"compiler":[[26,18]],"locations":[["(*.f64 x (*.f64 x 3))",0.21875,true],["(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)",0.38119125976844204,true],["(sqrt.f64 (*.f64 x (*.f64 x 3)))",17.524267576187377,true]],"time":6.54296875,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 x (*.f64 x 3))","x","-inf",0.135009765625],["(*.f64 x (*.f64 x 3))","x","inf",0.1640625],["(*.f64 x (*.f64 x 3))","x","0",0.136962890625],["(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)","x","-inf",0.154052734375],["(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)","x","inf",0.2822265625],["(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)","x","0",0.359130859375],["(sqrt.f64 (*.f64 x (*.f64 x 3)))","x","-inf",0.1669921875],["(sqrt.f64 (*.f64 x (*.f64 x 3)))","x","inf",0.47900390625],["(sqrt.f64 (*.f64 x (*.f64 x 3)))","x","0",0.52685546875]],"time":2.510986328125,"type":"series"},{"count":[[3,66]],"egraph":[[2,1590,20,0.015769708],[1,167,20,0.0025401670000000003],[0,8,23,0.000258125]],"inputs":[["(sqrt.f64 (*.f64 x (*.f64 x 3)))","(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)","(*.f64 x (*.f64 x 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (cbrt.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (sqrt.f64 3))) (sqrt.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 3)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 4))) (sqrt.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x x) 1/2) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 4)) 1/2) (pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x 3)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (*.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 4)) (cbrt.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x 3)) 2) (*.f64 (cbrt.f64 (*.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 (*.f64 x 3)) (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (sqrt.f64 3))) (*.f64 (sqrt.f64 (*.f64 x (sqrt.f64 3))) (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 3)) (*.f64 (sqrt.f64 (*.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (sqrt.f64 (*.f64 x (sqrt.f64 3)))) (sqrt.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (cbrt.f64 (*.f64 x 3)) 2)) (cbrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (*.f64 x 3))) (sqrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (sqrt.f64 x)) (sqrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 x 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 x 3))))))))"]],"rules":[["egg-rr",12],["egg-rr",30],["egg-rr",24]],"stop":[["node limit",1]],"time":37.404052734375,"type":"rewrite"},{"count":[[102,64]],"egraph":[[12,7315,248,0.063641584],[11,5901,248,0.052291667],[10,5103,248,0.040228584],[9,4473,248,0.0313885],[8,3746,248,0.022736],[7,2847,248,0.015192417],[6,2267,248,0.010003208999999999],[5,1071,248,0.005792416999999999],[4,559,248,0.002776084],[3,140,248,0.001214292],[2,57,248,0.000474875],[1,27,248,0.00023749999999999997],[0,12,368,8.5083e-5]],"inputs":[["(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(neg.f64 (*.f64 (sqrt.f64 3) x))","(*.f64 (sqrt.f64 3) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(neg.f64 (*.f64 (sqrt.f64 3) x))","(*.f64 (sqrt.f64 3) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(neg.f64 (*.f64 (sqrt.f64 3) x))","(*.f64 (sqrt.f64 3) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 3) x))","(neg.f64 (*.f64 (sqrt.f64 3) x))","(*.f64 (sqrt.f64 3) (neg.f64 x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 (pow.f64 (sqrt.f64 3) 2) (*.f64 x x))","(*.f64 x (*.f64 x 3))","(*.f64 x (*.f64 3 x))","(*.f64 3 (*.f64 x x))"]],"stop":[["node limit",1]],"time":82.1650390625,"type":"simplify"},{"compiler":[[634,495]],"time":9.892822265625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))","next",0.4102326172213043],["(*.f64 (*.f64 x (pow.f64 (cbrt.f64 (*.f64 x 3)) 2)) (cbrt.f64 (*.f64 x 3)))","fresh",0.5193202758317045],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (*.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (*.f64 x (sqrt.f64 3))))","fresh",0.41708764652663033],["(*.f64 3 (pow.f64 x 2))","done",0.234375],["(sqrt.f64 (*.f64 (pow.f64 x 4) 9))","fresh",19.039887485614194]],"compiler":[[18,14],[14,11],[6,4],[18,14],[6,5],[7,6],[18,14],[14,11],[18,14],[7,6]],"count":[[70,6]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[64,3],"picked":[1,0]}],"min-error":[0],"time":11.97119140625,"type":"prune"},{"compiler":[[56,41]],"locations":[["(*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3))))",0.2421875,true],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))",0.24447250976844204,true],["(*.f64 x (sqrt.f64 3))",0.3671875,true],["(cbrt.f64 (*.f64 x (*.f64 x 3)))",17.85925539093382,true]],"time":14.643798828125,"type":"localize"},{"count":[[4,24]],"series":[["(*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3))))","x","-inf",0.351806640625],["(*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3))))","x","inf",0.333984375],["(*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3))))","x","0",0.46484375],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))","x","-inf",1.597900390625],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))","x","inf",0.483154296875],["(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))","x","0",5.635009765625],["(*.f64 x (sqrt.f64 3))","x","-inf",0.283935546875],["(*.f64 x (sqrt.f64 3))","x","inf",0.14404296875],["(*.f64 x (sqrt.f64 3))","x","0",0.14697265625],["(cbrt.f64 (*.f64 x (*.f64 x 3)))","x","-inf",0.339111328125],["(cbrt.f64 (*.f64 x (*.f64 x 3)))","x","inf",0.385986328125],["(cbrt.f64 (*.f64 x (*.f64 x 3)))","x","0",0.63916015625]],"time":10.97705078125,"type":"series"},{"count":[[4,71]],"egraph":[[2,2656,39,0.020943624],[1,222,39,0.0037148330000000003],[0,11,59,0.000270708]],"inputs":[["(cbrt.f64 (*.f64 x (*.f64 x 3)))","(*.f64 x (sqrt.f64 3))","(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))","(*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 x (*.f64 x 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 3)) (cbrt.f64 (*.f64 x (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3)))) (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3)))) (cbrt.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (sqrt.f64 3))) (pow.f64 (*.f64 x (sqrt.f64 3)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 1/6) (*.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 1/6) (cbrt.f64 (*.f64 x (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x x) 1/3) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 x (*.f64 x 3)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x 3)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (*.f64 3 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 3 (sqrt.f64 3)) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (*.f64 x 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x 3) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (*.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 2) (*.f64 x (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 x 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 2) (*.f64 x (sqrt.f64 3))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (sqrt.f64 (*.f64 x (sqrt.f64 3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 x) (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x (*.f64 x 3)) 2) (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 x (*.f64 x 3)) (pow.f64 (*.f64 x (sqrt.f64 3)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 3) (*.f64 x (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (sqrt.f64 3)))))))))"]],"rules":[["egg-rr",13],["egg-rr",14],["egg-rr",15],["egg-rr",29]],"stop":[["node limit",1]],"time":45.7470703125,"type":"rewrite"},{"count":[[95,76]],"egraph":[[9,7796,268,0.056389125000000005],[8,6364,268,0.045550917],[7,4445,268,0.031587042],[6,2783,268,0.020038],[5,1720,268,0.010920709],[4,1064,268,0.00561925],[3,592,268,0.002905459],[2,147,268,0.001185709],[1,52,328,0.000388709],[0,21,328,0.000127334]],"inputs":[["(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (sqrt.f64 3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 x x) (cbrt.f64 3)))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x x)))","(*.f64 x (*.f64 x (*.f64 (cbrt.f64 9) (cbrt.f64 3))))","(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))","(neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (cbrt.f64 3) (cbrt.f64 -1)))))","(*.f64 (cbrt.f64 3) (neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 9) (*.f64 x x)))))","(*.f64 (cbrt.f64 3) (*.f64 (*.f64 x (*.f64 x (cbrt.f64 -1))) (neg.f64 (cbrt.f64 9))))","(*.f64 (cbrt.f64 3) (*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (neg.f64 x))))","(*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (*.f64 x (neg.f64 (cbrt.f64 3)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))","(neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (cbrt.f64 3) (cbrt.f64 -1)))))","(*.f64 (cbrt.f64 3) (neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 9) (*.f64 x x)))))","(*.f64 (cbrt.f64 3) (*.f64 (*.f64 x (*.f64 x (cbrt.f64 -1))) (neg.f64 (cbrt.f64 9))))","(*.f64 (cbrt.f64 3) (*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (neg.f64 x))))","(*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (*.f64 x (neg.f64 (cbrt.f64 3)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))","(neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (cbrt.f64 3) (cbrt.f64 -1)))))","(*.f64 (cbrt.f64 3) (neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 9) (*.f64 x x)))))","(*.f64 (cbrt.f64 3) (*.f64 (*.f64 x (*.f64 x (cbrt.f64 -1))) (neg.f64 (cbrt.f64 9))))","(*.f64 (cbrt.f64 3) (*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (neg.f64 x))))","(*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (*.f64 x (neg.f64 (cbrt.f64 3)))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 3) 4)) 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 x 2) (cbrt.f64 3)))))","(neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 3)) (cbrt.f64 -1))))","(*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 3) 4)) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (cbrt.f64 3) (cbrt.f64 -1)))))","(*.f64 (cbrt.f64 3) (neg.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 9) (*.f64 x x)))))","(*.f64 (cbrt.f64 3) (*.f64 (*.f64 x (*.f64 x (cbrt.f64 -1))) (neg.f64 (cbrt.f64 9))))","(*.f64 (cbrt.f64 3) (*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (neg.f64 x))))","(*.f64 x (*.f64 (*.f64 (cbrt.f64 9) (cbrt.f64 -1)) (*.f64 x (neg.f64 (cbrt.f64 3)))))"]],"stop":[["node limit",1]],"time":74.424072265625,"type":"simplify"},{"compiler":[[1699,1348]],"time":22.35791015625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))","done",0.4102326172213043],["(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","fresh",0.3366012695368841],["(*.f64 (*.f64 x 3) x)","done",0.21875],["(*.f64 3 (pow.f64 x 2))","done",0.234375],["(sqrt.f64 (*.f64 (pow.f64 x 4) 9))","fresh",19.039887485614194]],"compiler":[[18,14],[10,8],[6,4],[6,5],[7,6]],"count":[[98,5]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[92,1],"picked":[1,1]}],"min-error":[0],"time":17.169921875,"type":"prune"},{"accuracy":[0.21875],"baseline":[0.21875],"branch":[["x",0.21875,1],["(*.f64 (*.f64 x 3) x)",0.21875,1]],"compiler":[[2,1],[6,4],[95,73]],"count":[[10,1]],"inputs":[["(*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x (cbrt.f64 3))))","(*.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (cbrt.f64 (*.f64 x (*.f64 x 3)))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))","(*.f64 (*.f64 x (pow.f64 (cbrt.f64 (*.f64 x 3)) 2)) (cbrt.f64 (*.f64 x 3)))","(*.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) (*.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (*.f64 x (sqrt.f64 3))))","(pow.f64 (*.f64 x (sqrt.f64 3)) 2)","(sqrt.f64 (*.f64 (pow.f64 x 4) 9))","(pow.f64 (sqrt.f64 (*.f64 x (*.f64 x 3))) 2)","(pow.f64 (cbrt.f64 (*.f64 x (*.f64 x 3))) 3)","(*.f64 3 (pow.f64 x 2))","(*.f64 (*.f64 x 3) x)"]],"link":["."],"name":["Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, F"],"oracle":[19.45676415797254],"outputs":[["(*.f64 (*.f64 x 3) x)"]],"time":10.2939453125,"times":[["x",4.8701171875],["(*.f64 (*.f64 x 3) x)",3.400146484375]],"type":"regimes"},{"compiler":[[6,4]],"egraph":[[1,7,7,2.4084000000000002e-5],[0,5,7,1.4459e-5]],"inputs":[["(*.f64 (*.f64 x 3) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 3) x)","(*.f64 x (*.f64 x 3))"]],"stop":[["fuel",1],["saturated",1]],"time":8.052001953125,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.10888671875,"type":"end"}]
[{"compiler":[[16,12]],"method":["search"],"sampling":[[12,0.25938529471636684,0.21842972186641418,0.522184983417219],[11,0.21842972186641418,0.2671863562115959,0.5143839219219899],[10,0.18722547588549787,0.3003408675663195,0.5124336565481826],[9,0.1404191069141234,0.3900530747614539,0.4695278183244227],[8,0.09361273794274894,0.4680636897137447,0.4383235723435064],[7,0.062408491961832624,0.499267935694661,0.4383235723435064],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":61.071044921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",42.788818359375,804],["body",256,"valid",443.4873046875,8256]],"time":494.39111328125,"type":"sample"},{"compiler":[[15,11]],"egraph":[[0,3,3,1.833e-6],[17,7940,56,0.165944125],[16,7463,56,0.152340042],[15,7463,56,0.134790667],[14,7346,56,0.120574292],[13,7115,56,0.105949875],[12,6830,56,0.0933765],[11,6644,56,0.081865792],[10,6609,56,0.070873292],[9,6570,56,0.062274458000000005],[8,6475,56,0.053163791],[7,5637,56,0.042131541],[6,4315,56,0.030218291],[5,2540,56,0.017970791],[4,1164,56,0.008345123999999999],[3,494,64,0.0030162899999999996],[2,212,64,0.001123374],[1,82,64,0.00044395700000000003],[0,26,64,0.000124791]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(+.f64 (*.f64 y 1/2) (*.f64 x (+.f64 (-.f64 1 z) (log.f64 z))))","(+.f64 (*.f64 z 1/2) (*.f64 y (+.f64 (-.f64 1 x) (log.f64 x))))","(+.f64 (*.f64 x 1/2) (*.f64 z (+.f64 (-.f64 1 y) (log.f64 y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 x 1/2 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","(+.f64 (fma.f64 x 1/2 y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","(+.f64 (*.f64 y 1/2) (*.f64 x (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 y 1/2 (*.f64 x (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 x (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 1/2 y))","(+.f64 (fma.f64 1/2 y x) (*.f64 x (-.f64 (log.f64 z) z)))","(fma.f64 1/2 y (fma.f64 x (-.f64 (log.f64 z) z) x))","(+.f64 (*.f64 z 1/2) (*.f64 y (+.f64 (-.f64 1 x) (log.f64 x))))","(fma.f64 z 1/2 (*.f64 y (+.f64 (-.f64 1 x) (log.f64 x))))","(fma.f64 1/2 z (*.f64 y (+.f64 (-.f64 1 x) (log.f64 x))))","(fma.f64 y (+.f64 (-.f64 1 x) (log.f64 x)) (*.f64 1/2 z))","(fma.f64 1/2 z (fma.f64 y (-.f64 (log.f64 x) x) y))","(+.f64 (*.f64 x 1/2) (*.f64 z (+.f64 (-.f64 1 y) (log.f64 y))))","(fma.f64 x 1/2 (*.f64 z (+.f64 (-.f64 1 y) (log.f64 y))))","(fma.f64 z (+.f64 (-.f64 1 y) (log.f64 y)) (*.f64 x 1/2))","(fma.f64 x 1/2 (*.f64 z (-.f64 (+.f64 1 (log.f64 y)) y)))","(fma.f64 x 1/2 (fma.f64 z (-.f64 (log.f64 y) y) z))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":191.75,"type":"preprocess"},{"count":[[1,2]],"egraph":[[24,7443,14,0.225320041],[23,7443,14,0.201433708],[22,7443,14,0.185609625],[21,7403,14,0.170065416],[20,7361,14,0.15437375],[19,7329,14,0.138823541],[18,7203,14,0.122784041],[17,7177,14,0.109860166],[16,7067,14,0.101016708],[15,6920,14,0.091108125],[14,6699,14,0.081602208],[13,6166,14,0.072977083],[12,5441,14,0.063000167],[11,5136,14,0.051949625],[10,4403,14,0.043697667],[9,3301,14,0.036068875],[8,2811,14,0.026568792],[7,1890,14,0.018115792],[6,1244,14,0.010178375],[5,721,14,0.005376499999999999],[4,336,14,0.002502584],[3,143,16,0.000965792],[2,65,16,0.000405584],[1,29,16,0.000179125],[0,12,16,6.1875e-5]],"inputs":[["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 x 1/2 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))"]],"stop":[["node limit",1]],"time":237.921875,"type":"simplify"},{"compiler":[[25,15]],"time":0.419189453125,"type":"eval"},{"alts":[["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","next",0.09994125976844202]],"compiler":[[13,8],[13,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.09994125976844202],"time":1.469970703125,"type":"prune"},{"compiler":[[30,9]],"locations":[["(-.f64 (log.f64 z) z)",0.00390625,true],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))",0.00390625,true],["(fma.f64 y (-.f64 (log.f64 z) z) y)",0.16796875,true]],"time":6.5439453125,"type":"localize"},{"count":[[3,72]],"series":[["(-.f64 (log.f64 z) z)","z","-inf",0.160888671875],["(-.f64 (log.f64 z) z)","z","inf",0.156982421875],["(-.f64 (log.f64 z) z)","z","0",0.165771484375],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","z","-inf",0.221923828125],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","z","inf",0.219970703125],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","z","0",0.223876953125],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","y","-inf",0.200927734375],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","y","inf",0.174072265625],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","y","0",0.239990234375],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","x","-inf",0.278076171875],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","x","inf",0.281982421875],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","x","0",1.18505859375],["(fma.f64 y (-.f64 (log.f64 z) z) y)","z","-inf",1.35107421875],["(fma.f64 y (-.f64 (log.f64 z) z) y)","z","inf",0.9169921875],["(fma.f64 y (-.f64 (log.f64 z) z) y)","z","0",1.573974609375],["(fma.f64 y (-.f64 (log.f64 z) z) y)","y","-inf",3.38916015625],["(fma.f64 y (-.f64 (log.f64 z) z) y)","y","inf",0.39208984375],["(fma.f64 y (-.f64 (log.f64 z) z) y)","y","0",19.06787109375]],"time":30.5029296875,"type":"series"},{"count":[[3,186]],"egraph":[[2,2419,30,0.022927208],[1,189,30,0.003266208],[0,9,30,0.000243208]],"inputs":[["(fma.f64 y (-.f64 (log.f64 z) z) y)","(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","(-.f64 (log.f64 z) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 y (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 (log.f64 z) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (-.f64 (log.f64 z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 (log.f64 z) z)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (-.f64 (log.f64 z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) (sqrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (fma.f64 y (-.f64 (log.f64 z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) 3) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (-.f64 (log.f64 z) z)) 3) (pow.f64 y 3)) (+.f64 (pow.f64 (*.f64 y (-.f64 (log.f64 z) z)) 2) (-.f64 (*.f64 y y) (*.f64 (*.f64 y (-.f64 (log.f64 z) z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (-.f64 (log.f64 z) z)) 2) (*.f64 y y)) (-.f64 (*.f64 y (-.f64 (log.f64 z) z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 y) (exp.f64 (*.f64 y (-.f64 (log.f64 z) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 y)) (exp.f64 (*.f64 y (-.f64 (log.f64 z) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (-.f64 (log.f64 z) z))) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/2) (fma.f64 y (-.f64 (log.f64 z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/2) 1) (fma.f64 y (-.f64 (log.f64 z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1/2 (*.f64 y (-.f64 (log.f64 z) z))) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) (pow.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) (sqrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 2) 3) (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/8 (pow.f64 x 3)) (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 3)) (+.f64 (pow.f64 (*.f64 x 1/2) 2) (-.f64 (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 2) (*.f64 (*.f64 x 1/2) (fma.f64 y (-.f64 (log.f64 z) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x 1/2) 2) (pow.f64 (fma.f64 y (-.f64 (log.f64 z) z) y) 2)) (-.f64 (*.f64 x 1/2) (fma.f64 y (-.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) (exp.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) (exp.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x 1/2)) (+.f64 1 (expm1.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 z) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 z) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 z) z) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 z) z) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 z) z) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 z) z) (fma.f64 -1 z z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 z) z) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 z (exp.f64 z))) 2)) (log.f64 (cbrt.f64 (/.f64 z (exp.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 z (exp.f64 z)))) (log.f64 (sqrt.f64 (/.f64 z (exp.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log.f64 z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2) (cbrt.f64 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log.f64 z) z)) (sqrt.f64 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3)) (pow.f64 (/.f64 1 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (/.f64 1 (+.f64 z (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (pow.f64 (/.f64 1 (+.f64 z (log.f64 z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (-.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) 1) (pow.f64 (-.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (-.f64 (log.f64 z) z) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (-.f64 (log.f64 z) z) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (-.f64 (log.f64 z) z) (cbrt.f64 (-.f64 (log.f64 z) z))) 2) 1/3) (cbrt.f64 (cbrt.f64 (-.f64 (log.f64 z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (-.f64 (log.f64 z) z) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (-.f64 (log.f64 z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (log.f64 z) z))) 2) 3) (cbrt.f64 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 (log.f64 z) z))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 (log.f64 z) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2)) (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 z (log.f64 z)) (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3)) (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (+.f64 z (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3))) (neg.f64 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z))) (neg.f64 (+.f64 z (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 z) 3) (pow.f64 (neg.f64 z) 3)) (+.f64 (pow.f64 (log.f64 z) 2) (-.f64 (pow.f64 (neg.f64 z) 2) (*.f64 (log.f64 z) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 z) 2) (pow.f64 (neg.f64 z) 2)) (-.f64 (log.f64 z) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log.f64 z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log.f64 z) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log.f64 z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log.f64 z) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2)) (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 z (log.f64 z)) (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log.f64 z) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 z (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (log.f64 z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 z 1)) (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 z (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 z 1)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 z 1)) (exp.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 z 1)) (/.f64 1 (exp.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 z)) (+.f64 1 (-.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 z)) (+.f64 1 (-.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log.f64 z) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (log.f64 z) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 (log.f64 z) z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 (log.f64 z) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (log.f64 z) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (log.f64 z) z)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 z) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 z) 1 (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log.f64 z) z) 1 (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log.f64 z) z) 1 (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log.f64 z) z) 1 (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 z) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 z) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 z) z) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 z) z) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log.f64 z) z) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2) (cbrt.f64 (-.f64 (log.f64 z) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2) (cbrt.f64 (-.f64 (log.f64 z) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) z)) 2) (cbrt.f64 (-.f64 (log.f64 z) z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (neg.f64 (cbrt.f64 z)) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) (cbrt.f64 (log.f64 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) (cbrt.f64 (log.f64 z)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 z) z)) (sqrt.f64 (-.f64 (log.f64 z) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 z) z)) (sqrt.f64 (-.f64 (log.f64 z) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log.f64 z) z)) (sqrt.f64 (-.f64 (log.f64 z) z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (neg.f64 (sqrt.f64 z)) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 (log.f64 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 (log.f64 z)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2))) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 z (log.f64 z)) (pow.f64 (log.f64 z) 2))) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (/.f64 1 (+.f64 z (log.f64 z))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (/.f64 1 (+.f64 z (log.f64 z))) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (/.f64 1 (+.f64 z (log.f64 z))) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 z)) 2) (cbrt.f64 (neg.f64 z)) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 z)) (sqrt.f64 (neg.f64 z)) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (log.f64 z)) (sqrt.f64 z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (log.f64 z))))))"]],"rules":[["egg-rr",105],["egg-rr",41],["egg-rr",40]],"stop":[["node limit",1]],"time":52.85693359375,"type":"rewrite"},{"count":[[258,213]],"egraph":[[10,7761,735,0.078797875],[9,7675,735,0.064831125],[8,7448,735,0.056078042],[7,7086,735,0.047629334],[6,6483,735,0.039614876],[5,5276,735,0.031322167],[4,2820,735,0.020402626],[3,989,735,0.008710418000000001],[2,392,735,0.002847959],[1,163,735,0.00102],[0,54,837,0.000299125]],"inputs":[["(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(+.f64 (*.f64 y (log.f64 z)) y)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 -1 (*.f64 y z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(log.f64 z)","(+.f64 (*.f64 -1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (log.f64 z))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (log.f64 (/.f64 1 z))))","(+.f64 (*.f64 -1 z) (*.f64 -1 (log.f64 (/.f64 1 z))))","(+.f64 (*.f64 -1 z) (*.f64 -1 (log.f64 (/.f64 1 z))))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(+.f64 (*.f64 -1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(+.f64 (*.f64 -1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 y (log.f64 z)) y)","(fma.f64 y (log.f64 z) y)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(*.f64 z (neg.f64 y))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(*.f64 z (neg.f64 y))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 y (-.f64 (log.f64 z) z))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (log.f64 z) z)) 1))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(fma.f64 y (log.f64 z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(*.f64 z (neg.f64 y))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(*.f64 z (neg.f64 y))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 1/2 x (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(log.f64 z)","(+.f64 (*.f64 -1 z) (log.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (log.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (log.f64 z))","(-.f64 (log.f64 z) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (log.f64 (/.f64 1 z))))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (log.f64 (/.f64 1 z))))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (log.f64 (/.f64 1 z))))","(-.f64 (log.f64 z) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(-.f64 (log.f64 z) z)"]],"stop":[["node limit",1]],"time":110.22509765625,"type":"simplify"},{"compiler":[[3732,1532]],"time":35.77392578125,"type":"eval"},{"alts":[["(fma.f64 x 1/2 (fma.f64 y (*.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (/.f64 1 (+.f64 z (log.f64 z)))) y))","fresh",13.64645255115754],["(fma.f64 x 1/2 (/.f64 (-.f64 (pow.f64 (*.f64 y (-.f64 (log.f64 z) z)) 2) (*.f64 y y)) (-.f64 (*.f64 y (-.f64 (log.f64 z) z)) y)))","fresh",20.514717205297515],["(fma.f64 x 1/2 (fma.f64 y (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (log.f64 z) z))) 2) 3) (cbrt.f64 (-.f64 (log.f64 z) z))) y))","fresh",0.7372694043830645],["(fma.f64 x 1/2 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","fresh",0.40603266606351446],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","next",0.12337875976844202],["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y))","fresh",0.2559739258319563],["(fma.f64 x 1/2 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) 3) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","fresh",0.7804207264811029]],"compiler":[[24,15],[27,14],[25,15],[25,12],[19,13],[20,12],[28,15],[24,15],[27,14],[25,15],[25,12],[19,13],[20,12],[28,15]],"count":[[214,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[213,7],"picked":[1,0]}],"min-error":[0.01171875],"time":58.403076171875,"type":"prune"},{"compiler":[[59,28]],"locations":[["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))",0.09994125976844201,true],["(*.f64 y (log.f64 z))",0.2578125,true]],"time":12.117919921875,"type":"localize"},{"count":[[2,35]],"series":[["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","x","-inf",0.196044921875],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","x","inf",0.333984375],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","x","0",0.405029296875],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","z","-inf",0.22412109375],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","z","inf",0.370849609375],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","z","0",0.35107421875],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","y","-inf",0.260009765625],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","y","inf",0.35693359375],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","y","0",0.43896484375],["(*.f64 y (log.f64 z))","z","-inf",5.47509765625],["(*.f64 y (log.f64 z))","z","inf",3.554931640625],["(*.f64 y (log.f64 z))","z","0",5.741943359375],["(*.f64 y (log.f64 z))","y","-inf",0.244873046875],["(*.f64 y (log.f64 z))","y","inf",0.322021484375],["(*.f64 y (log.f64 z))","y","0",0.37109375]],"time":18.85205078125,"type":"series"},{"count":[[2,68]],"egraph":[[2,4574,23,0.031571626],[1,311,23,0.005843584],[0,14,24,0.000370042]],"inputs":[["(*.f64 y (log.f64 z))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 z y)) (cbrt.f64 (pow.f64 z y)))) (log.f64 (cbrt.f64 (pow.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 z y))) (log.f64 (sqrt.f64 (pow.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (log.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (log.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (log.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (log.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 z y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 z y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (log.f64 z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (-.f64 (*.f64 y (log.f64 z)) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) (/.f64 (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 2) (-.f64 (*.f64 y (log.f64 z)) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) (cbrt.f64 (pow.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 2)) (cbrt.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) (sqrt.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 3) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 3)) (/.f64 1 (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (*.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (-.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (*.f64 y (log.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 2)) (/.f64 1 (-.f64 (*.f64 y (log.f64 z)) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (*.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (-.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (*.f64 y (log.f64 z))))) (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 3) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 y (log.f64 z)) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (-.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 3) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 3)) (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (*.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (-.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (*.f64 y (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 3) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 3)) (+.f64 (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 2) (-.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (*.f64 y (*.f64 (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 2)) (-.f64 (*.f64 y (log.f64 z)) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 3) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 3))) (neg.f64 (+.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (*.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (-.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (*.f64 y (log.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 y (log.f64 z)) 2) (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 2))) (neg.f64 (-.f64 (*.f64 y (log.f64 z)) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x)) 3) (pow.f64 (+.f64 y (*.f64 y z)) 3)) (+.f64 (*.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x)) (fma.f64 y (log.f64 z) (*.f64 1/2 x))) (-.f64 (pow.f64 (+.f64 y (*.f64 y z)) 2) (*.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x)) (+.f64 y (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) 2) (pow.f64 (*.f64 y (log.f64 z)) 2)) (-.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (*.f64 y (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x)) (fma.f64 y (log.f64 z) (*.f64 1/2 x))) (pow.f64 (+.f64 y (*.f64 y z)) 2)) (-.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x)) (+.f64 y (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 z y) (exp.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 z y) 1)) (exp.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 z y) (+.f64 1 (expm1.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 z y) 1)) (+.f64 1 (expm1.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 y (*.f64 y z))) (exp.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y (*.f64 y z)))) (exp.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 y (*.f64 y z))) (*.f64 (pow.f64 z y) (pow.f64 (exp.f64 1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y (*.f64 y z)))) (*.f64 (pow.f64 z y) (pow.f64 (exp.f64 1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) (pow.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (+.f64 1 (-.f64 (pow.f64 z y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) (+.f64 1 (-.f64 (pow.f64 z y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (pow.f64 z y) (pow.f64 (exp.f64 1/2) x)) (exp.f64 (+.f64 y (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 y (log.f64 z) (*.f64 1/2 x))) (+.f64 1 (expm1.f64 (+.f64 y (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (pow.f64 z y) (pow.f64 (exp.f64 1/2) x)) (+.f64 1 (expm1.f64 (+.f64 y (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (log.f64 z) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 z) y (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (log.f64 z)) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 y (fma.f64 1/2 x (*.f64 y z))) (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 2)) (cbrt.f64 (*.f64 y (log.f64 z))) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) 2) (cbrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (log.f64 z))) (sqrt.f64 (*.f64 y (log.f64 z))) (+.f64 y (fma.f64 1/2 x (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (*.f64 y (log.f64 z)))))))"]],"rules":[["egg-rr",52],["egg-rr",16]],"stop":[["node limit",1]],"time":54.817138671875,"type":"rewrite"},{"count":[[103,86]],"egraph":[[7,7761,365,0.050257417000000006],[6,6752,365,0.041995209000000006],[5,5175,365,0.031489834],[4,2814,365,0.019200709],[3,1018,365,0.007601459],[2,364,407,0.002531209],[1,132,439,0.00082625],[0,44,460,0.000233792]],"inputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z))))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1)))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(*.f64 1/2 x)","(*.f64 1/2 x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 z))))","(neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))","(*.f64 y (log.f64 z))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z))))","(*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 (-.f64 z (log.f64 z)) (neg.f64 y) y)","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 y (+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1)))","(*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 (-.f64 z (log.f64 z)) (neg.f64 y) y)","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (-.f64 (+.f64 z (*.f64 -1 (log.f64 z))) 1))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(fma.f64 y (log.f64 z) (fma.f64 1/2 x y))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(fma.f64 (-.f64 z (log.f64 z)) (neg.f64 y) y)","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 1/2 x (*.f64 y (fma.f64 -1 z (+.f64 1 (log.f64 z)))))","(fma.f64 y (-.f64 (+.f64 1 (log.f64 z)) z) (*.f64 1/2 x))","(+.f64 (fma.f64 1/2 x y) (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) (fma.f64 1/2 x y))","(*.f64 1/2 x)","(*.f64 1/2 x)"]],"stop":[["node limit",1]],"time":69.933837890625,"type":"simplify"},{"compiler":[[1761,832]],"time":16.3701171875,"type":"eval"},{"alts":[["(fma.f64 x 1/2 (fma.f64 y (*.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (/.f64 1 (+.f64 z (log.f64 z)))) y))","fresh",13.64645255115754],["(fma.f64 x 1/2 (/.f64 (-.f64 (pow.f64 (*.f64 y (-.f64 (log.f64 z) z)) 2) (*.f64 y y)) (-.f64 (*.f64 y (-.f64 (log.f64 z) z)) y)))","fresh",20.514717205297515],["(fma.f64 x 1/2 (fma.f64 y (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (log.f64 z) z))) 2) 3) (cbrt.f64 (-.f64 (log.f64 z) z))) y))","fresh",0.7372694043830645],["(fma.f64 x 1/2 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","fresh",0.40603266606351446],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","done",0.12337875976844202],["(fma.f64 (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (*.f64 y (log.f64 z)))","fresh",43.127099408099696],["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y))","next",0.2559739258319563],["(fma.f64 x 1/2 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) 3) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","fresh",0.7804207264811029]],"compiler":[[24,15],[27,14],[25,15],[25,12],[19,13],[26,15],[20,12],[28,15],[24,15],[27,14],[25,15],[25,12],[26,15],[20,12],[28,15]],"count":[[93,8]],"kept":[{"done":[0,0],"fresh":[6,6],"new":[86,1],"picked":[1,1]}],"min-error":[0.0078125],"time":16.703857421875,"type":"prune"},{"compiler":[[62,23]],"locations":[["(cbrt.f64 (log.f64 z))",0.08984375,true],["(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)",0.16796875,true],["(fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z))",0.19207001953688405,true],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)",0.46484375,true]],"time":14.916015625,"type":"localize"},{"count":[[4,60]],"series":[["(cbrt.f64 (log.f64 z))","z","-inf",0.177001953125],["(cbrt.f64 (log.f64 z))","z","inf",0.197998046875],["(cbrt.f64 (log.f64 z))","z","0",0.14501953125],["(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)","z","-inf",0.3349609375],["(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)","z","inf",0.323974609375],["(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)","z","0",0.27587890625],["(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)","y","-inf",0.3291015625],["(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)","y","inf",0.268798828125],["(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)","y","0",1.369140625],["(fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z))","z","-inf",0.31201171875],["(fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z))","z","inf",0.344970703125],["(fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z))","z","0",0.31298828125],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","z","-inf",1.21484375],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","z","inf",1.232177734375],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","z","0",1.385986328125]],"time":8.447998046875,"type":"series"},{"count":[[4,79]],"egraph":[[2,2319,29,0.018453999999999998],[1,202,29,0.0033608329999999997],[0,10,53,0.000258333]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","(fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z))","(fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y)","(cbrt.f64 (log.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (log.f64 z)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (log.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 z)) (pow.f64 (log.f64 z) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 1/6) (*.f64 (pow.f64 (log.f64 z) 1/6) (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (log.f64 z)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 z) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 z) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (log.f64 z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (log.f64 z) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (log.f64 z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (log.f64 z) z)) (pow.f64 (cbrt.f64 (+.f64 (log.f64 z) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 z) z)) 2) (cbrt.f64 (+.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (log.f64 z) z)) (sqrt.f64 (+.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 z) 3) (pow.f64 z 3)) (+.f64 (pow.f64 (log.f64 z) 2) (-.f64 (*.f64 z z) (*.f64 (log.f64 z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (+.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (log.f64 z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (log.f64 z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (log.f64 z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (log.f64 z) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (log.f64 z) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 z (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (log.f64 z) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (log.f64 z) z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (+.f64 (log.f64 z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (log.f64 z) z) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (log.f64 z) z) y) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (+.f64 (log.f64 z) z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (+.f64 (log.f64 z) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (+.f64 (log.f64 z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)) (pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)) 2) (cbrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)) (sqrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 z) z) y) 3) (pow.f64 y 3)) (+.f64 (*.f64 (*.f64 (+.f64 (log.f64 z) z) y) (*.f64 (+.f64 (log.f64 z) z) y)) (-.f64 (*.f64 y y) (*.f64 (*.f64 (+.f64 (log.f64 z) z) y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (+.f64 (log.f64 z) z) y) (*.f64 (+.f64 (log.f64 z) z) y)) (*.f64 y y)) (-.f64 (*.f64 (+.f64 (log.f64 z) z) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (+.f64 (log.f64 z) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (+.f64 (log.f64 z) z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (+.f64 (log.f64 z) z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (+.f64 (log.f64 z) z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (+.f64 (log.f64 z) z) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (log.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2) (cbrt.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 1/6) (pow.f64 (log.f64 z) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (log.f64 z)) 1/3) (pow.f64 (sqrt.f64 (log.f64 z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (log.f64 z))))))))"]],"rules":[["egg-rr",20],["egg-rr",21],["egg-rr",22],["egg-rr",16]],"stop":[["node limit",1]],"time":42.85400390625,"type":"rewrite"},{"count":[[139,104]],"egraph":[[5,7322,508,0.0356755],[4,3712,508,0.024640875],[3,1255,508,0.010737625],[2,488,550,0.003484],[1,211,550,0.001248333],[0,63,654,0.000365583]],"inputs":[["(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(*.f64 (pow.f64 1 1/3) (log.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 z)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 z)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 z)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 z)))))","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 z)))))","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 z)))))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) y)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 (/.f64 1 z))))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 (/.f64 1 z))))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 (/.f64 1 z))))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 -1 (*.f64 y z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(pow.f64 (log.f64 z) 1/3)","(pow.f64 (log.f64 z) 1/3)","(pow.f64 (log.f64 z) 1/3)","(pow.f64 (log.f64 z) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 z)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 z)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 z)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 z)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(*.f64 (pow.f64 1 1/3) (log.f64 z))","(*.f64 (log.f64 z) 1)","(log.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 z)))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 z)))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (log.f64 z)))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 z)))))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 z)))))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 (/.f64 1 z)))))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(fma.f64 1 (log.f64 z) (neg.f64 z))","(-.f64 (log.f64 z) z)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 (-.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (log.f64 z))) z) y)","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 z)) z)) 1)))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) y)","(fma.f64 1 (*.f64 (log.f64 z) y) y)","(fma.f64 y (log.f64 z) y)","(fma.f64 (log.f64 z) y y)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 z))) (+.f64 (*.f64 -1 (*.f64 y z)) y))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 z y))","(*.f64 z (neg.f64 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 (/.f64 1 z))))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 (/.f64 1 z))))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 (/.f64 1 z))))) (+.f64 y (*.f64 -1 (*.f64 y z))))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 z y))","(*.f64 z (neg.f64 y))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(*.f64 (+.f64 1 (fma.f64 1 (log.f64 z) (neg.f64 z))) y)","(+.f64 y (*.f64 (-.f64 (log.f64 z) z) y))","(+.f64 y (*.f64 y (-.f64 (log.f64 z) z)))","(fma.f64 y (-.f64 (log.f64 z) z) y)","(pow.f64 (log.f64 z) 1/3)","(cbrt.f64 (log.f64 z))","(pow.f64 (log.f64 z) 1/3)","(cbrt.f64 (log.f64 z))","(pow.f64 (log.f64 z) 1/3)","(cbrt.f64 (log.f64 z))","(pow.f64 (log.f64 z) 1/3)","(cbrt.f64 (log.f64 z))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 z))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 z))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 z))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 z))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 z))))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)","(cbrt.f64 (log.f64 z))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)","(cbrt.f64 (log.f64 z))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)","(cbrt.f64 (log.f64 z))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 1/3)","(cbrt.f64 (log.f64 z))"]],"stop":[["node limit",1]],"time":55.947021484375,"type":"simplify"},{"compiler":[[2332,1027]],"time":24.054931640625,"type":"eval"},{"alts":[["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (*.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2))) 2) (neg.f64 z)) y))","fresh",0.2951328241667831],["(fma.f64 x 1/2 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","fresh",0.40603266606351446],["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (cbrt.f64 (log.f64 z)))) (neg.f64 z)) y))","fresh",0.25083653509301496],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","done",0.12337875976844202],["(fma.f64 (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (*.f64 y (log.f64 z)))","fresh",43.127099408099696],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","next",0.09994125976844202],["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2))) (neg.f64 z)) y))","fresh",0.32023646923755134],["(fma.f64 x 1/2 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) 3) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","fresh",0.7804207264811029]],"compiler":[[32,21],[25,12],[30,15],[19,13],[26,15],[13,8],[22,14],[28,15],[32,21],[25,12],[30,15],[26,15],[13,8],[22,14],[28,15]],"count":[[136,8]],"kept":[{"done":[1,1],"fresh":[6,3],"new":[128,4],"picked":[1,0]}],"min-error":[0.0078125],"time":35.955078125,"type":"prune"},{"compiler":[[30,9]],"locations":[["(-.f64 (log.f64 z) z)",0.00390625,false],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))",0.00390625,false],["(fma.f64 y (-.f64 (log.f64 z) z) y)",0.16796875,false]],"time":7.010986328125,"type":"localize"},{"compiler":[[3732,1532]],"time":35.904052734375,"type":"eval"},{"alts":[["(fma.f64 x 1/2 (*.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2)))","fresh",0.40603266606351446],["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (*.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2))) 2) (neg.f64 z)) y))","fresh",0.2951328241667831],["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (cbrt.f64 (log.f64 z)))) (neg.f64 z)) y))","fresh",0.25083653509301496],["(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","done",0.12337875976844202],["(fma.f64 (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (*.f64 y (log.f64 z)))","fresh",43.127099408099696],["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","done",0.09994125976844202],["(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2))) (neg.f64 z)) y))","fresh",0.32023646923755134],["(fma.f64 x 1/2 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) 3) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","fresh",0.7804207264811029]],"compiler":[[25,12],[32,21],[30,15],[19,13],[26,15],[13,8],[22,14],[28,15]],"count":[[221,8]],"kept":[{"done":[1,1],"fresh":[6,5],"new":[213,1],"picked":[1,1]}],"min-error":[0.0078125],"time":62.195068359375,"type":"prune"},{"accuracy":[0.09994125976844201],"baseline":[0.09994125976844202],"branch":[["x",0.09994125976844201,1],["y",0.09994125976844201,1],["z",0.09994125976844202,1],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))",0.09994125976844201,1],["(*.f64 x 1/2)",0.09994125976844201,1],["(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))",0.09994125976844202,1],["(+.f64 (-.f64 1 z) (log.f64 z))",0.09994125976844202,1]],"compiler":[[4,3],[4,3],[4,3],[15,11],[6,5],[11,8],[9,7],[302,123]],"count":[[15,1]],"inputs":[["(fma.f64 x 1/2 (*.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2)))","(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (*.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2))) 2) (neg.f64 z)) y))","(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (cbrt.f64 (log.f64 z)))) (neg.f64 z)) y))","(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2))) (neg.f64 z)) y))","(fma.f64 (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (sqrt.f64 (+.f64 y (fma.f64 1/2 x (*.f64 y z)))) (*.f64 y (log.f64 z)))","(fma.f64 x 1/2 (fma.f64 y (*.f64 (-.f64 (pow.f64 (log.f64 z) 2) (*.f64 z z)) (/.f64 1 (+.f64 z (log.f64 z)))) y))","(fma.f64 x 1/2 (/.f64 (-.f64 (pow.f64 (*.f64 y (-.f64 (log.f64 z) z)) 2) (*.f64 y y)) (-.f64 (*.f64 y (-.f64 (log.f64 z) z)) y)))","(fma.f64 x 1/2 (fma.f64 y (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (log.f64 z) z))) 2) 3) (cbrt.f64 (-.f64 (log.f64 z) z))) y))","(fma.f64 x 1/2 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y)) 2) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(fma.f64 x 1/2 (fma.f64 y (fma.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (cbrt.f64 (log.f64 z)) 2) (neg.f64 z)) y))","(fma.f64 x 1/2 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))) 2) 3) (cbrt.f64 (fma.f64 y (-.f64 (log.f64 z) z) y))))","(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))","(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))"]],"link":["."],"name":["System.Random.MWC.Distributions:gamma from mwc-random-0.13.3.2"],"oracle":[50.56609794717442],"outputs":[["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))"]],"time":46.98388671875,"times":[["x",5.9599609375],["y",5.89208984375],["z",5.89306640625],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))",6.194091796875],["(*.f64 x 1/2)",6.221923828125],["(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))",5.971923828125],["(+.f64 (-.f64 1 z) (log.f64 z))",6.0869140625]],"type":"regimes"},{"compiler":[[13,8]],"egraph":[[4,19,14,0.000110834],[3,18,14,8.7876e-5],[2,16,14,6.4584e-5],[1,11,14,4.1751e-5],[0,9,14,1.8459e-5]],"inputs":[["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x 1/2 (fma.f64 y (-.f64 (log.f64 z) z) y))"]],"stop":[["fuel",1],["saturated",1]],"time":8.54296875,"type":"simplify"},{"time":0.02001953125,"type":"soundness"},{"compiler":[[13,8]],"remove-preprocessing":[[]],"time":8.968017578125,"type":"end"}]
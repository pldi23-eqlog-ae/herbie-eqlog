[{"compiler":[[37,28]],"method":["search"],"sampling":[[12,2.793967723814632e-12,1.8626451492097546e-13,0.9999999999970197],[11,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[10,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[9,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[8,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[7,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[6,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[5,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[4,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[3,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[2,0.0,2.9802322387356077e-12,0.9999999999970197],[1,0.0,2.9802322387356077e-12,0.9999999999970197],[0,0.0,2.9802322387356077e-12,0.9999999999970197]],"time":36.7529296875,"type":"analyze"},{"outcomes":[["body",256,"valid",598.696044921875,8256]],"time":606.85009765625,"type":"sample"},{"compiler":[[14,11]],"egraph":[[0,3,3,1.834e-6],[10,246,68,0.004085623],[9,243,68,0.003489165],[8,234,68,0.002889915],[7,190,68,0.00227179],[6,143,68,0.00167404],[5,112,68,0.001209499],[4,86,68,0.0008378319999999999],[3,66,68,0.0005843739999999999],[2,50,68,0.000369999],[1,40,68,0.000219124],[0,25,68,0.000106666]],"inputs":[["0","1","2"],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 cosTheta_i (-.f64 1 cosTheta_i))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 cosTheta_i)))","(*.f64 (sqrt.f64 (/.f64 u2 (-.f64 1 u2))) (cos.f64 (*.f64 314159265359/50000000000 u1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 cosTheta_i (-.f64 1 cosTheta_i))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 cosTheta_i (-.f64 1 cosTheta_i))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 cosTheta_i)))","(*.f64 (sqrt.f64 (/.f64 u2 (-.f64 1 u2))) (cos.f64 (*.f64 314159265359/50000000000 u1)))","(*.f64 (sqrt.f64 (/.f64 u2 (-.f64 1 u2))) (cos.f64 (*.f64 u1 314159265359/50000000000)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":27.3837890625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[10,93,17,0.00152125],[9,92,17,0.001320875],[8,89,17,0.001119834],[7,76,17,0.0009235010000000001],[6,58,17,0.0007087510000000001],[5,45,17,0.000527834],[4,35,17,0.000371209],[3,27,17,0.000264876],[2,21,17,0.000175751],[1,17,17,0.000109209],[0,11,17,5.7834e-5]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))"]],"stop":[["saturated",1]],"time":12.626220703125,"type":"simplify"},{"compiler":[[14,11]],"time":0.267822265625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","next",0.4028172254547238]],"compiler":[[14,11],[14,11]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.4028172254547238],"time":0.81396484375,"type":"prune"},{"compiler":[[39,27]],"locations":[["(*.f64 314159265359/50000000000 u2)",0.1015625,true],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",0.11328125,true],["(/.f64 u1 (-.f64 1 u1))",0.1796875,true],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))",0.28515625,true]],"time":10.35107421875,"type":"localize"},{"count":[[4,24]],"series":[["(*.f64 314159265359/50000000000 u2)","u2","-inf",0.299072265625],["(*.f64 314159265359/50000000000 u2)","u2","inf",0.294921875],["(*.f64 314159265359/50000000000 u2)","u2","0",0.238037109375],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","u1","-inf",0.302978515625],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","u1","inf",0.3369140625],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","u1","0",0.309814453125],["(/.f64 u1 (-.f64 1 u1))","u1","-inf",0.28515625],["(/.f64 u1 (-.f64 1 u1))","u1","inf",0.217041015625],["(/.f64 u1 (-.f64 1 u1))","u1","0",0.2060546875],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u2","-inf",0.35400390625],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u2","inf",0.80615234375],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u2","0",0.60791015625],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u1","-inf",0.537109375],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u1","inf",0.761962890625],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u1","0",0.93798828125]],"time":6.70703125,"type":"series"},{"count":[[4,153]],"egraph":[[2,2842,37,0.029248876],[1,228,37,0.005764333999999999],[0,11,37,0.000560084]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(/.f64 u1 (-.f64 1 u1))","(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","(*.f64 314159265359/50000000000 u2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 u1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (sqrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 u1)) (sqrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))) (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 u1 (-.f64 1 u1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 u1 (-.f64 1 u1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 u1 (-.f64 1 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u1 (/.f64 1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 u1) 2) (*.f64 (cbrt.f64 u1) (/.f64 1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 u1) (*.f64 (sqrt.f64 u1) (/.f64 1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 u1) (/.f64 1 (neg.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 u1)) u1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u1) -1/2) (/.f64 u1 (sqrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 u1) 2) 1) (/.f64 (cbrt.f64 u1) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 u1) 1) (/.f64 (sqrt.f64 u1) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 u1)) -2) (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 u1) 2) (pow.f64 (cbrt.f64 (-.f64 1 u1)) 2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 u1) (pow.f64 (cbrt.f64 (-.f64 1 u1)) 2)) (/.f64 (sqrt.f64 u1) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 u1) 2) (sqrt.f64 (-.f64 1 u1))) (/.f64 (cbrt.f64 u1) (sqrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 (pow.f64 u1 3))) (+.f64 1 (fma.f64 u1 u1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 (*.f64 u1 u1))) (+.f64 u1 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 5/6) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 u1) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (/.f64 1 u1) 1) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 u1 (-.f64 1 u1)))) 2)) (cbrt.f64 (log.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (log.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 u1 (neg.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 u1 (-.f64 1 u1)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (/.f64 1 u1) 1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 u1) (pow.f64 (-.f64 1 u1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (-.f64 (/.f64 1 u1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 (-.f64 1 u1)) (sqrt.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 u1) (sqrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 u1)) (sqrt.f64 (neg.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 u1)) (neg.f64 (sqrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 u1) 1) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/2) (log.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 1 u1) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 u1)) (sqrt.f64 u1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) 2)) (cbrt.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (sqrt.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 u1 (-.f64 1 u1))) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 314159265359/50000000000 u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 u2) 314159265359/50000000000)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 u2) 314159265359/50000000000))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 u2) 314159265359/50000000000))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 u2) 314159265359/50000000000))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 314159265359/50000000000 u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 314159265359/50000000000 u2) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 314159265359/50000000000 u2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 314159265359/50000000000 u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 314159265359/50000000000 u2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 314159265359/50000000000 u2))) 2)) (cbrt.f64 (log.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 314159265359/50000000000 u2)))) (sqrt.f64 (log.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 314159265359/50000000000 u2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 u2) 314159265359/50000000000))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 314159265359/50000000000 u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 314159265359/50000000000 u2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 314159265359/50000000000 u2))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 314159265359/50000000000 u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 314159265359/50000000000 u2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 314159265359/50000000000 u2)) 1) 1))))))"]],"rules":[["egg-rr",24],["egg-rr",45],["egg-rr",58],["egg-rr",26]],"stop":[["node limit",1]],"time":57.6298828125,"type":"rewrite"},{"count":[[177,176]],"egraph":[[5,7712,350,0.035702959],[4,3972,350,0.022012],[3,1116,350,0.0092735],[2,381,361,0.0031634999999999996],[1,142,386,0.001210959],[0,54,432,0.000405667]],"inputs":[["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 6) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 u2 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2)) 1) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2) 1))","(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 u2 u2)) (fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 u2 4)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2)) (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4)))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2)) (fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2) (fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4) 1)))","(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 6) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 u2 u2)) (+.f64 (fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 u2 4)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 u2 6)))))","(+.f64 (*.f64 (+.f64 (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6)) 1) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2)) (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4)))))","(fma.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2) (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (fma.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6) 1) (fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2) (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4)))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4)) (fma.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2) (fma.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6) 1))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 u2 314159265359/50000000000)))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 u1 (*.f64 u1 u1))","(fma.f64 u1 u1 u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (*.f64 u1 u1) (+.f64 u1 (pow.f64 u1 3)))","(+.f64 (fma.f64 u1 u1 u1) (pow.f64 u1 3))","(fma.f64 u1 (fma.f64 u1 u1 u1) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","(+.f64 (*.f64 u1 u1) (+.f64 (+.f64 u1 (pow.f64 u1 3)) (pow.f64 u1 4)))","(+.f64 (+.f64 u1 (pow.f64 u1 3)) (fma.f64 u1 u1 (pow.f64 u1 4)))","(*.f64 (fma.f64 u1 u1 1) (fma.f64 u1 u1 u1))","(*.f64 (fma.f64 u1 u1 u1) (fma.f64 u1 u1 1))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(+.f64 -1 (neg.f64 (/.f64 1 u1)))","(+.f64 -1 (/.f64 -1 u1))","(-.f64 -1 (/.f64 1 u1))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(+.f64 -1 (neg.f64 (+.f64 (/.f64 1 u1) (/.f64 1 (*.f64 u1 u1)))))","(-.f64 -1 (+.f64 (/.f64 1 u1) (/.f64 1 (*.f64 u1 u1))))","(+.f64 -1 (+.f64 (/.f64 -1 u1) (/.f64 -1 (*.f64 u1 u1))))","(+.f64 (+.f64 -1 (/.f64 -1 u1)) (/.f64 -1 (*.f64 u1 u1)))","(+.f64 -1 (-.f64 (/.f64 -1 u1) (/.f64 1 (*.f64 u1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 u1 u1)) (+.f64 (/.f64 1 u1) (/.f64 1 (pow.f64 u1 3))))))","(-.f64 -1 (+.f64 (/.f64 1 u1) (+.f64 (/.f64 1 (*.f64 u1 u1)) (/.f64 1 (pow.f64 u1 3)))))","(+.f64 -1 (-.f64 (/.f64 -1 u1) (+.f64 (/.f64 1 (*.f64 u1 u1)) (/.f64 1 (pow.f64 u1 3)))))","(+.f64 -1 (-.f64 (+.f64 (/.f64 -1 u1) (/.f64 -1 (*.f64 u1 u1))) (/.f64 1 (pow.f64 u1 3))))","(+.f64 (/.f64 -1 (*.f64 u1 u1)) (+.f64 -1 (-.f64 (/.f64 -1 u1) (/.f64 1 (pow.f64 u1 3)))))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(+.f64 -1 (neg.f64 (/.f64 1 u1)))","(+.f64 -1 (/.f64 -1 u1))","(-.f64 -1 (/.f64 1 u1))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(+.f64 -1 (neg.f64 (+.f64 (/.f64 1 u1) (/.f64 1 (*.f64 u1 u1)))))","(-.f64 -1 (+.f64 (/.f64 1 u1) (/.f64 1 (*.f64 u1 u1))))","(+.f64 -1 (+.f64 (/.f64 -1 u1) (/.f64 -1 (*.f64 u1 u1))))","(+.f64 (+.f64 -1 (/.f64 -1 u1)) (/.f64 -1 (*.f64 u1 u1)))","(+.f64 -1 (-.f64 (/.f64 -1 u1) (/.f64 1 (*.f64 u1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 u1 u1)) (+.f64 (/.f64 1 u1) (/.f64 1 (pow.f64 u1 3))))))","(-.f64 -1 (+.f64 (/.f64 1 u1) (+.f64 (/.f64 1 (*.f64 u1 u1)) (/.f64 1 (pow.f64 u1 3)))))","(+.f64 -1 (-.f64 (/.f64 -1 u1) (+.f64 (/.f64 1 (*.f64 u1 u1)) (/.f64 1 (pow.f64 u1 3)))))","(+.f64 -1 (-.f64 (+.f64 (/.f64 -1 u1) (/.f64 -1 (*.f64 u1 u1))) (/.f64 1 (pow.f64 u1 3))))","(+.f64 (/.f64 -1 (*.f64 u1 u1)) (+.f64 -1 (-.f64 (/.f64 -1 u1) (/.f64 1 (pow.f64 u1 3)))))"]],"stop":[["node limit",1]],"time":54.0791015625,"type":"simplify"},{"compiler":[[2847,2201]],"time":39.3779296875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 5/6) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.9481842967339252],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","next",0.4023152147495571],["(log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.41682098522316585],["(sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))","fresh",3.925065614217319],["(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 6) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","fresh",7.021646531131888],["(*.f64 (/.f64 1 (sqrt.f64 (-.f64 (/.f64 1 u1) 1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.4301177834274797],["(pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))","fresh",5.71151279061636],["(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) 3)) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.5551139731641095],["(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 2)","fresh",4.336807859259688],["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.4294084556190113],["(*.f64 (sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 (*.f64 u1 u1))) (+.f64 u1 1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.44747722313939614],["(*.f64 (pow.f64 (exp.f64 1/2) (log.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.4086818104855365]],"compiler":[[24,19],[24,20],[16,13],[16,13],[48,37],[16,14],[33,27],[19,16],[17,14],[24,19],[20,15],[17,14],[24,19],[24,20],[16,13],[16,13],[48,37],[16,14],[33,27],[19,16],[17,14],[24,19],[20,15],[17,14]],"count":[[177,12]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[176,12],"picked":[1,0]}],"min-error":[0.03398609264898864],"time":46.946044921875,"type":"prune"},{"compiler":[[104,81]],"locations":[["(/.f64 u1 (-.f64 1 u1))",0.1796875,false],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))",0.28515625,true],["(*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))",0.33041000976844204,true],["(pow.f64 (-.f64 (/.f64 1 u1) 1) -2)",0.6084938965266303,true]],"time":27.094970703125,"type":"localize"},{"count":[[3,40]],"series":[["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u2","-inf",0.73095703125],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u2","inf",22.199951171875],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u2","0",1.52001953125],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u1","-inf",1.5068359375],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u1","inf",1.703857421875],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","u1","0",1.611083984375],["(*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))","u1","-inf",0.8740234375],["(*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))","u1","inf",0.804931640625],["(*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))","u1","0",0.27587890625],["(pow.f64 (-.f64 (/.f64 1 u1) 1) -2)","u1","-inf",0.218017578125],["(pow.f64 (-.f64 (/.f64 1 u1) 1) -2)","u1","inf",0.27197265625],["(pow.f64 (-.f64 (/.f64 1 u1) 1) -2)","u1","0",0.322021484375]],"time":32.3271484375,"type":"series"},{"count":[[3,59]],"egraph":[[2,4791,62,0.037508375],[1,386,62,0.008679791],[0,18,62,0.000738833]],"inputs":[["(pow.f64 (-.f64 (/.f64 1 u1) 1) -2)","(*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))) (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (/.f64 1 (+.f64 (/.f64 1 u1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 u1) -1)) 2) -2) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 u1) -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (+.f64 (/.f64 1 u1) -1)) -2) (pow.f64 (sqrt.f64 (+.f64 (/.f64 1 u1) -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)) 1) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)))) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)) (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)))) (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2 (log.f64 (+.f64 (/.f64 1 u1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (/.f64 1 u1) -1))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))) (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 u1) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))) (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 1))))))"]],"rules":[["egg-rr",18],["egg-rr",19],["egg-rr",22]],"stop":[["node limit",1]],"time":63.243896484375,"type":"rewrite"},{"count":[[99,111]],"egraph":[[2,2142,1458,0.016730791],[1,558,1596,0.005178958],[0,177,1644,0.001318208]],"inputs":[["(pow.f64 u1 2)","(+.f64 (pow.f64 u1 2) (*.f64 2 (pow.f64 u1 3)))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (*.f64 3 (pow.f64 u1 4))))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (+.f64 (*.f64 4 (pow.f64 u1 5)) (*.f64 3 (pow.f64 u1 4)))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 1 u1))))","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 6 (*.f64 3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2)))) (+.f64 (cbrt.f64 -1) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 1 u1)))))","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 6 (*.f64 3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2)))) (+.f64 (cbrt.f64 -1) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 1 u1))) (*.f64 1/3 (/.f64 (-.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (+.f64 10 (*.f64 2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (+.f64 6 (*.f64 3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 3)))))))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))","(*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) u1))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1))))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) u1))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 2))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2))))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1)))) (*.f64 7/72 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 2)))))))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) u1))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 3))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1)))) (+.f64 (*.f64 -7/216 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 3))))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 2))))) (+.f64 (*.f64 91/1296 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) 1))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 3))))) (*.f64 7/72 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 2)))))))))))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(+.f64 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 2) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))))","(+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 4) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (+.f64 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 2) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))))))","(+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 4) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (+.f64 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (+.f64 (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 2) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 u1 2)","(*.f64 u1 u1)","(+.f64 (pow.f64 u1 2) (*.f64 2 (pow.f64 u1 3)))","(+.f64 (*.f64 u1 u1) (*.f64 2 (pow.f64 u1 3)))","(fma.f64 2 (pow.f64 u1 3) (*.f64 u1 u1))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (*.f64 3 (pow.f64 u1 4))))","(+.f64 (*.f64 u1 u1) (fma.f64 2 (pow.f64 u1 3) (*.f64 3 (pow.f64 u1 4))))","(fma.f64 u1 u1 (fma.f64 2 (pow.f64 u1 3) (*.f64 3 (pow.f64 u1 4))))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (+.f64 (*.f64 4 (pow.f64 u1 5)) (*.f64 3 (pow.f64 u1 4)))))","(+.f64 (*.f64 u1 u1) (fma.f64 2 (pow.f64 u1 3) (fma.f64 4 (pow.f64 u1 5) (*.f64 3 (pow.f64 u1 4)))))","(fma.f64 u1 u1 (fma.f64 2 (pow.f64 u1 3) (fma.f64 3 (pow.f64 u1 4) (*.f64 4 (pow.f64 u1 5)))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 1 (/.f64 2 u1))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (+.f64 (/.f64 3 (*.f64 u1 u1)) 1) (/.f64 2 u1))","(+.f64 1 (+.f64 (/.f64 2 u1) (/.f64 3 (*.f64 u1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","(+.f64 (/.f64 3 (*.f64 u1 u1)) (+.f64 1 (+.f64 (/.f64 2 u1) (/.f64 4 (pow.f64 u1 3)))))","(+.f64 (+.f64 1 (/.f64 2 u1)) (+.f64 (/.f64 4 (pow.f64 u1 3)) (/.f64 3 (*.f64 u1 u1))))","(+.f64 1 (+.f64 (/.f64 2 u1) (+.f64 (/.f64 4 (pow.f64 u1 3)) (/.f64 3 (*.f64 u1 u1)))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 1 (/.f64 2 u1))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (+.f64 (/.f64 3 (*.f64 u1 u1)) 1) (/.f64 2 u1))","(+.f64 1 (+.f64 (/.f64 2 u1) (/.f64 3 (*.f64 u1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","(+.f64 (/.f64 3 (*.f64 u1 u1)) (+.f64 1 (+.f64 (/.f64 2 u1) (/.f64 4 (pow.f64 u1 3)))))","(+.f64 (+.f64 1 (/.f64 2 u1)) (+.f64 (/.f64 4 (pow.f64 u1 3)) (/.f64 3 (*.f64 u1 u1))))","(+.f64 1 (+.f64 (/.f64 2 u1) (+.f64 (/.f64 4 (pow.f64 u1 3)) (/.f64 3 (*.f64 u1 u1)))))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 u1 (*.f64 u1 u1))","(fma.f64 u1 u1 u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (*.f64 u1 u1) (+.f64 u1 (pow.f64 u1 3)))","(+.f64 u1 (*.f64 u1 (fma.f64 u1 u1 u1)))","(+.f64 (pow.f64 u1 3) (fma.f64 u1 u1 u1))","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","(+.f64 (*.f64 u1 u1) (+.f64 (pow.f64 u1 4) (+.f64 u1 (pow.f64 u1 3))))","(+.f64 (pow.f64 u1 4) (+.f64 u1 (*.f64 u1 (fma.f64 u1 u1 u1))))","(*.f64 (+.f64 (*.f64 u1 u1) 1) (fma.f64 u1 u1 u1))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 1 u1))))","(+.f64 (cbrt.f64 -1) (neg.f64 (*.f64 (/.f64 1 u1) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))))","(-.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) u1))","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 6 (*.f64 3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2)))) (+.f64 (cbrt.f64 -1) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 1 u1)))))","(fma.f64 -1/3 (/.f64 (+.f64 6 (*.f64 3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))))) (*.f64 (*.f64 u1 u1) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (cbrt.f64 -1) (neg.f64 (*.f64 (/.f64 1 u1) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))))","(-.f64 (fma.f64 -1/3 (/.f64 (fma.f64 3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 6) (*.f64 (*.f64 u1 u1) (pow.f64 (cbrt.f64 -1) 2))) (cbrt.f64 -1)) (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) u1))","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 6 (*.f64 3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2)))) (+.f64 (cbrt.f64 -1) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 1 u1))) (*.f64 1/3 (/.f64 (-.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (+.f64 10 (*.f64 2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (+.f64 6 (*.f64 3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 3)))))))","(fma.f64 -1/3 (/.f64 (+.f64 6 (*.f64 3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))))) (*.f64 (*.f64 u1 u1) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (cbrt.f64 -1) (fma.f64 -1 (*.f64 (/.f64 1 u1) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 1/3 (/.f64 (-.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (+.f64 10 (*.f64 2 (*.f64 (+.f64 6 (*.f64 3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))))) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))))))) (*.f64 (pow.f64 u1 3) (pow.f64 (cbrt.f64 -1) 2)))))))","(+.f64 (fma.f64 1/3 (/.f64 (-.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 2 (*.f64 (fma.f64 3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 6) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) 10)) (*.f64 (pow.f64 u1 3) (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (neg.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) u1)) (fma.f64 -1/3 (/.f64 (fma.f64 3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 6) (*.f64 (*.f64 u1 u1) (pow.f64 (cbrt.f64 -1) 2))) (cbrt.f64 -1)))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) u1) (/.f64 (cbrt.f64 -1) (*.f64 u1 u1))))","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))","(+.f64 (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) u1) (/.f64 (cbrt.f64 -1) (*.f64 u1 u1)))) (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)))","(+.f64 (+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) (*.f64 u1 u1))) (+.f64 (/.f64 (cbrt.f64 -1) u1) (/.f64 (cbrt.f64 -1) (pow.f64 u1 3))))","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (*.f64 u1 u1)) (+.f64 (/.f64 (cbrt.f64 -1) u1) (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)))))","(*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 -1) (pow.f64 -1 1/6)))","(*.f64 (cbrt.f64 -1) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 -1 1/6)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) u1))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1))))))","(fma.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (cbrt.f64 -1) (/.f64 u1 (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1))))))","(fma.f64 1/6 (/.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 -1) (pow.f64 -1 1/6))) u1) (fma.f64 -1/3 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 -1 1/6))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 -1) (pow.f64 -1 1/6)))))","(fma.f64 1/6 (*.f64 (/.f64 (cbrt.f64 -1) (/.f64 u1 (pow.f64 -1 1/6))) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 -1 1/6) (+.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1))))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) u1))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 2))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2))))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1)))) (*.f64 7/72 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 2)))))))))","(fma.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (cbrt.f64 -1) (/.f64 u1 (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)))) (fma.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (/.f64 (+.f64 1 (*.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))))) (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)))) (fma.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (fma.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1))) (*.f64 7/72 (*.f64 (pow.f64 -1 1/6) (/.f64 (cbrt.f64 -1) (/.f64 (*.f64 u1 u1) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))))))","(fma.f64 1/6 (/.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 -1) (pow.f64 -1 1/6))) u1) (fma.f64 -1/18 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 -1 1/6))) (fma.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1) (/.f64 (*.f64 (*.f64 u1 u1) (pow.f64 (cbrt.f64 -1) 2)) (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (fma.f64 -1/3 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 -1 1/6))) (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (/.f64 (cbrt.f64 -1) (*.f64 u1 u1)) (cos.f64 (*.f64 314159265359/50000000000 u2))) 7/72)))))))","(+.f64 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)) (+.f64 (*.f64 (*.f64 (pow.f64 -1 1/6) -1/18) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (/.f64 (*.f64 (*.f64 -1/3 (pow.f64 -1 1/6)) (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1)) (pow.f64 (cbrt.f64 -1) 2)))) (+.f64 (*.f64 (pow.f64 -1 1/6) (+.f64 (*.f64 7/72 (*.f64 (/.f64 (cbrt.f64 -1) (*.f64 u1 u1)) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1))))) (*.f64 (pow.f64 -1 1/6) (+.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (/.f64 (*.f64 1/6 (cbrt.f64 -1)) (/.f64 u1 (cos.f64 (*.f64 314159265359/50000000000 u2))))))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) u1))) (+.f64 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 3))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1)))) (+.f64 (*.f64 -7/216 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 3))))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 2))))) (+.f64 (*.f64 91/1296 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 2))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (+.f64 1 (*.f64 1/3 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) 1))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 u1 3))))) (*.f64 7/72 (*.f64 (pow.f64 -1 1/6) (/.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 2)))))))))))))","(fma.f64 1/6 (*.f64 (pow.f64 -1 1/6) (/.f64 (cbrt.f64 -1) (/.f64 u1 (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (fma.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (/.f64 (+.f64 1 (*.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))))) (/.f64 (*.f64 (pow.f64 u1 3) (pow.f64 (cbrt.f64 -1) 2)) (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1))) (fma.f64 -7/216 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 3)))) (fma.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)))) (fma.f64 91/1296 (*.f64 (pow.f64 -1 1/6) (/.f64 (cbrt.f64 -1) (/.f64 (pow.f64 u1 3) (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (/.f64 (+.f64 1 (*.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))))) (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)))) (fma.f64 1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (/.f64 (*.f64 (pow.f64 u1 3) (pow.f64 (cbrt.f64 -1) 2)) (-.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (+.f64 1 (*.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))))) 1))))) (*.f64 7/72 (*.f64 (pow.f64 -1 1/6) (/.f64 (cbrt.f64 -1) (/.f64 (*.f64 u1 u1) (cos.f64 (*.f64 314159265359/50000000000 u2)))))))))))))))","(fma.f64 1/6 (/.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 -1) (pow.f64 -1 1/6))) u1) (fma.f64 (pow.f64 -1 1/6) (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (fma.f64 -1/18 (*.f64 (/.f64 (pow.f64 -1 1/6) (pow.f64 u1 3)) (/.f64 (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 -1/3 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) u1) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 -1 1/6))) (fma.f64 -7/216 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 3)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 -1 1/6))) (fma.f64 -1/18 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 -1 1/6))) (fma.f64 91/1296 (*.f64 (pow.f64 -1 1/6) (*.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (fma.f64 -1/3 (*.f64 (pow.f64 -1 1/6) (/.f64 (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1) (/.f64 (*.f64 (*.f64 u1 u1) (pow.f64 (cbrt.f64 -1) 2)) (cos.f64 (*.f64 314159265359/50000000000 u2))))) (fma.f64 1/3 (*.f64 (pow.f64 -1 1/6) (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (pow.f64 u1 3) (pow.f64 (cbrt.f64 -1) 2))) (-.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1)) 1)))) (*.f64 (pow.f64 -1 1/6) (*.f64 (*.f64 (/.f64 (cbrt.f64 -1) (*.f64 u1 u1)) (cos.f64 (*.f64 314159265359/50000000000 u2))) 7/72)))))))))))","(+.f64 (fma.f64 -1/18 (*.f64 (pow.f64 -1 1/6) (*.f64 (/.f64 (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1) (*.f64 (pow.f64 u1 3) (pow.f64 (cbrt.f64 -1) 2))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 (+.f64 (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (/.f64 (pow.f64 u1 3) (cbrt.f64 -1))) (*.f64 (pow.f64 -1 1/6) 91/1296)) (+.f64 (*.f64 (pow.f64 -1 1/6) (+.f64 (*.f64 (*.f64 (/.f64 (cbrt.f64 -1) (*.f64 u1 u1)) (cos.f64 (*.f64 314159265359/50000000000 u2))) 7/72) (*.f64 (*.f64 (/.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 3)) (pow.f64 (cbrt.f64 -1) 2)) (-.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1)) 1))) 1/3))) (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 u1 u1)) (+.f64 (*.f64 (*.f64 (pow.f64 -1 1/6) -1/18) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (/.f64 (*.f64 (*.f64 -1/3 (pow.f64 -1 1/6)) (fma.f64 1/3 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) 1)) (pow.f64 (cbrt.f64 -1) 2)))))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (pow.f64 -1 1/6)) (+.f64 (/.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) -1/3) u1) (*.f64 (/.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 u1 3)) -7/216))))) (*.f64 (pow.f64 -1 1/6) (+.f64 (*.f64 (cbrt.f64 -1) (cos.f64 (*.f64 314159265359/50000000000 u2))) (/.f64 (*.f64 1/6 (cbrt.f64 -1)) (/.f64 u1 (cos.f64 (*.f64 314159265359/50000000000 u2)))))))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))","(+.f64 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 2) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))))","(+.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (*.f64 u2 u2))))","(fma.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 u2 u2)) (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) -98696044010906577398881/5000000000000000000000)))","(*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2)) 1))","(+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 4) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (+.f64 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 2) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))))))","(fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (pow.f64 u2 4)) (+.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (*.f64 u2 u2)))))","(fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) (pow.f64 u2 4))) (fma.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 u2 u2)) (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) -98696044010906577398881/5000000000000000000000))))","(+.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2)) (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4)))))","(+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 4) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (+.f64 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (+.f64 (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (sqrt.f64 1) (*.f64 (pow.f64 u2 2) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))))))","(fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (pow.f64 u2 4)) (+.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (fma.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (pow.f64 u2 6)) (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (*.f64 u2 u2))))))","(fma.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) (pow.f64 u2 4))) (fma.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) (fma.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) (pow.f64 u2 6))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 u2 u2)) (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6) -98696044010906577398881/5000000000000000000000)))))","(+.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 u2 u2)) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6)))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (pow.f64 u2 4)) 1)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) 1/3) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))))","(*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))","(*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (cbrt.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)))"]],"stop":[["node limit",1]],"time":43.18408203125,"type":"simplify"},{"compiler":[[5585,4657]],"time":73.975830078125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 5/6) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.9481842967339252],["(log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.41682098522316585],["(sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))","fresh",3.925065614217319],["(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 6) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","fresh",7.021646531131888],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 3)","fresh",0.8382613173501949],["(pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))","fresh",5.71151279061636],["(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) 3)) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.5551139731641095],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (sqrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.41698274405488317],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","next",0.35128345561901136],["(*.f64 (sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 (*.f64 u1 u1))) (+.f64 u1 1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.44747722313939614],["(*.f64 (pow.f64 (exp.f64 1/2) (log.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.4086818104855365]],"compiler":[[24,19],[16,13],[16,13],[48,37],[26,22],[33,27],[19,16],[27,24],[27,23],[20,15],[17,14],[24,19],[16,13],[16,13],[48,37],[26,22],[33,27],[19,16],[27,24],[27,23],[20,15],[17,14]],"count":[[195,11]],"kept":[{"done":[0,0],"fresh":[11,8],"new":[183,3],"picked":[1,0]}],"min-error":[0.030079842648988643],"time":43.53515625,"type":"prune"},{"compiler":[[137,109]],"locations":[["(*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))",0.32421875,true],["(pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2)",0.36328125,true],["(pow.f64 (+.f64 (/.f64 1 u1) -1) -2)",0.6084938965266303,true],["(pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)",0.6735726074528622,true]],"time":38.9228515625,"type":"localize"},{"count":[[4,32]],"series":[["(*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))","u1","-inf",0.19189453125],["(*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))","u1","inf",0.244140625],["(*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))","u1","0",0.203857421875],["(pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2)","u1","-inf",0.852783203125],["(pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2)","u1","inf",2.017822265625],["(pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2)","u1","0",0.427978515625],["(pow.f64 (+.f64 (/.f64 1 u1) -1) -2)","u1","-inf",0.18603515625],["(pow.f64 (+.f64 (/.f64 1 u1) -1) -2)","u1","inf",0.162109375],["(pow.f64 (+.f64 (/.f64 1 u1) -1) -2)","u1","0",0.19384765625],["(pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)","u2","-inf",0.47900390625],["(pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)","u2","inf",0.487060546875],["(pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)","u2","0",0.47021484375]],"time":6.10400390625,"type":"series"},{"count":[[4,96]],"egraph":[[2,5117,59,0.039534167],[1,435,59,0.0094935],[0,20,62,0.000871375]],"inputs":[["(pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)","(pow.f64 (+.f64 (/.f64 1 u1) -1) -2)","(pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2)","(*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))) (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2) (cos.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 2) (*.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (sqrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 2) 3) (cos.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 3) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2) 1) (cos.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 2)) (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2) (sqrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)))) (sqrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))) (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4)) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (/.f64 1 (+.f64 (/.f64 1 u1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 u1) -1)) 2) -2) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 u1) -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (+.f64 (/.f64 1 u1) -1)) -2) (pow.f64 (sqrt.f64 (+.f64 (/.f64 1 u1) -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2 (log.f64 (+.f64 (/.f64 1 u1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (/.f64 1 u1) -1))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (cbrt.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/6) (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 1 (+.f64 (/.f64 1 u1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/4) (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 3/2) (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)))) 3/2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) 3/2) (pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/6) 3/2) (pow.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/6) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))) (sqrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (/.f64 u1 (-.f64 1 u1)))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (/.f64 u1 (-.f64 1 u1))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 u1) (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 (-.f64 1 u1) u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2))) (neg.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) 1) (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (pow.f64 (cbrt.f64 (-.f64 1 u1)) 2)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (sqrt.f64 (-.f64 1 u1))) (sqrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 u1) (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (neg.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (neg.f64 u1)) (neg.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) 3) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3) (pow.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 -2 (log.f64 (+.f64 (/.f64 1 u1) -1)) (log.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 -2 (log.f64 (+.f64 (/.f64 1 u1) -1)) (log.f64 (/.f64 u1 (-.f64 1 u1)))) 1))))))"]],"rules":[["egg-rr",28],["egg-rr",25],["egg-rr",19],["egg-rr",24]],"stop":[["node limit",1]],"time":68.7021484375,"type":"rewrite"},{"count":[[128,139]],"egraph":[[4,4737,414,0.023822333],[3,1780,414,0.012120167000000001],[2,620,416,0.004589417],[1,237,442,0.001746709],[0,87,464,0.000561375]],"inputs":[["1","(+.f64 1 (*.f64 -296088132032719732196643/5000000000000000000000 (pow.f64 u2 2)))","(+.f64 1 (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (pow.f64 u2 2)) (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4))))","(+.f64 1 (+.f64 (*.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6)) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (pow.f64 u2 2)) (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4)))))","(pow.f64 u1 2)","(+.f64 (pow.f64 u1 2) (*.f64 2 (pow.f64 u1 3)))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (*.f64 3 (pow.f64 u1 4))))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (+.f64 (*.f64 4 (pow.f64 u1 5)) (*.f64 3 (pow.f64 u1 4)))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","(sqrt.f64 (pow.f64 u1 3))","(+.f64 (*.f64 3/2 (sqrt.f64 (pow.f64 u1 5))) (sqrt.f64 (pow.f64 u1 3)))","(+.f64 (*.f64 3/2 (sqrt.f64 (pow.f64 u1 5))) (+.f64 (sqrt.f64 (pow.f64 u1 3)) (*.f64 15/8 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (*.f64 3/2 (sqrt.f64 (pow.f64 u1 5))) (+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 35/16 (sqrt.f64 (pow.f64 u1 9))) (*.f64 15/8 (sqrt.f64 (pow.f64 u1 7))))))","(pow.f64 u1 3)","(+.f64 (*.f64 3 (pow.f64 u1 4)) (pow.f64 u1 3))","(+.f64 (*.f64 6 (pow.f64 u1 5)) (+.f64 (*.f64 3 (pow.f64 u1 4)) (pow.f64 u1 3)))","(+.f64 (*.f64 10 (pow.f64 u1 6)) (+.f64 (*.f64 6 (pow.f64 u1 5)) (+.f64 (*.f64 3 (pow.f64 u1 4)) (pow.f64 u1 3))))","-1","(neg.f64 (+.f64 1 (*.f64 3 (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (*.f64 3 (/.f64 1 u1)))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 u1 3))) (*.f64 3 (/.f64 1 u1))))))","-1","(neg.f64 (+.f64 1 (*.f64 3 (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (*.f64 3 (/.f64 1 u1)))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 u1 3))) (*.f64 3 (/.f64 1 u1))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -296088132032719732196643/5000000000000000000000 (pow.f64 u2 2)))","(+.f64 1 (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2)))","(fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2) 1)","(+.f64 1 (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (pow.f64 u2 2)) (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4))))","(+.f64 1 (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2) (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4))))","(fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4) (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2) 1))","(fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2) (fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4) 1))","(+.f64 1 (+.f64 (*.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6)) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (pow.f64 u2 2)) (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4)))))","(+.f64 1 (fma.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6) (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2) (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4)))))","(fma.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6) (fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4) (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2) 1)))","(fma.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6) (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 u2 u2) (fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4) 1)))","(pow.f64 u1 2)","(*.f64 u1 u1)","(+.f64 (pow.f64 u1 2) (*.f64 2 (pow.f64 u1 3)))","(+.f64 (*.f64 u1 u1) (*.f64 2 (pow.f64 u1 3)))","(fma.f64 2 (pow.f64 u1 3) (*.f64 u1 u1))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (*.f64 3 (pow.f64 u1 4))))","(+.f64 (*.f64 u1 u1) (fma.f64 2 (pow.f64 u1 3) (*.f64 3 (pow.f64 u1 4))))","(fma.f64 u1 u1 (fma.f64 2 (pow.f64 u1 3) (*.f64 3 (pow.f64 u1 4))))","(fma.f64 2 (pow.f64 u1 3) (fma.f64 3 (pow.f64 u1 4) (*.f64 u1 u1)))","(fma.f64 u1 u1 (*.f64 (pow.f64 u1 3) (+.f64 (*.f64 u1 3) 2)))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 2 (pow.f64 u1 3)) (+.f64 (*.f64 4 (pow.f64 u1 5)) (*.f64 3 (pow.f64 u1 4)))))","(+.f64 (*.f64 u1 u1) (fma.f64 2 (pow.f64 u1 3) (fma.f64 4 (pow.f64 u1 5) (*.f64 3 (pow.f64 u1 4)))))","(fma.f64 u1 u1 (fma.f64 2 (pow.f64 u1 3) (fma.f64 3 (pow.f64 u1 4) (*.f64 4 (pow.f64 u1 5)))))","(fma.f64 2 (pow.f64 u1 3) (fma.f64 u1 u1 (fma.f64 3 (pow.f64 u1 4) (*.f64 4 (pow.f64 u1 5)))))","(fma.f64 u1 u1 (fma.f64 4 (pow.f64 u1 5) (*.f64 (pow.f64 u1 3) (+.f64 (*.f64 u1 3) 2))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 1 (/.f64 2 u1))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (+.f64 (/.f64 3 (*.f64 u1 u1)) 1) (/.f64 2 u1))","(+.f64 1 (+.f64 (/.f64 2 u1) (/.f64 3 (*.f64 u1 u1))))","(+.f64 (/.f64 2 u1) (+.f64 1 (/.f64 3 (*.f64 u1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","(+.f64 (/.f64 3 (*.f64 u1 u1)) (+.f64 (+.f64 1 (/.f64 2 u1)) (/.f64 4 (pow.f64 u1 3))))","(+.f64 1 (+.f64 (+.f64 (/.f64 2 u1) (/.f64 4 (pow.f64 u1 3))) (/.f64 3 (*.f64 u1 u1))))","(+.f64 1 (+.f64 (/.f64 2 u1) (+.f64 (/.f64 3 (*.f64 u1 u1)) (/.f64 4 (pow.f64 u1 3)))))","(+.f64 (/.f64 2 u1) (+.f64 (/.f64 3 (*.f64 u1 u1)) (+.f64 1 (/.f64 4 (pow.f64 u1 3)))))","1","(+.f64 1 (*.f64 2 (/.f64 1 u1)))","(+.f64 1 (/.f64 2 u1))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (*.f64 2 (/.f64 1 u1))))","(+.f64 (+.f64 (/.f64 3 (*.f64 u1 u1)) 1) (/.f64 2 u1))","(+.f64 1 (+.f64 (/.f64 2 u1) (/.f64 3 (*.f64 u1 u1))))","(+.f64 (/.f64 2 u1) (+.f64 1 (/.f64 3 (*.f64 u1 u1))))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 u1 2))) (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 u1)) (*.f64 4 (/.f64 1 (pow.f64 u1 3))))))","(+.f64 (/.f64 3 (*.f64 u1 u1)) (+.f64 (+.f64 1 (/.f64 2 u1)) (/.f64 4 (pow.f64 u1 3))))","(+.f64 1 (+.f64 (+.f64 (/.f64 2 u1) (/.f64 4 (pow.f64 u1 3))) (/.f64 3 (*.f64 u1 u1))))","(+.f64 1 (+.f64 (/.f64 2 u1) (+.f64 (/.f64 3 (*.f64 u1 u1)) (/.f64 4 (pow.f64 u1 3)))))","(+.f64 (/.f64 2 u1) (+.f64 (/.f64 3 (*.f64 u1 u1)) (+.f64 1 (/.f64 4 (pow.f64 u1 3)))))","(sqrt.f64 (pow.f64 u1 3))","(fabs.f64 (pow.f64 u1 3/2))","(pow.f64 u1 3/2)","(+.f64 (*.f64 3/2 (sqrt.f64 (pow.f64 u1 5))) (sqrt.f64 (pow.f64 u1 3)))","(fma.f64 3/2 (sqrt.f64 (pow.f64 u1 5)) (sqrt.f64 (pow.f64 u1 3)))","(fma.f64 3/2 (sqrt.f64 (pow.f64 u1 5)) (fabs.f64 (pow.f64 u1 3/2)))","(fma.f64 3/2 (pow.f64 u1 5/2) (pow.f64 u1 3/2))","(+.f64 (*.f64 3/2 (sqrt.f64 (pow.f64 u1 5))) (+.f64 (sqrt.f64 (pow.f64 u1 3)) (*.f64 15/8 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (fma.f64 3/2 (sqrt.f64 (pow.f64 u1 5)) (sqrt.f64 (pow.f64 u1 3))) (*.f64 15/8 (sqrt.f64 (pow.f64 u1 7))))","(fma.f64 3/2 (sqrt.f64 (pow.f64 u1 5)) (fma.f64 15/8 (sqrt.f64 (pow.f64 u1 7)) (fabs.f64 (pow.f64 u1 3/2))))","(fma.f64 3/2 (pow.f64 u1 5/2) (fma.f64 15/8 (pow.f64 u1 7/2) (pow.f64 u1 3/2)))","(+.f64 (*.f64 3/2 (sqrt.f64 (pow.f64 u1 5))) (+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 35/16 (sqrt.f64 (pow.f64 u1 9))) (*.f64 15/8 (sqrt.f64 (pow.f64 u1 7))))))","(+.f64 (fma.f64 3/2 (sqrt.f64 (pow.f64 u1 5)) (sqrt.f64 (pow.f64 u1 3))) (fma.f64 35/16 (sqrt.f64 (pow.f64 u1 9)) (*.f64 15/8 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (fma.f64 3/2 (sqrt.f64 (pow.f64 u1 5)) (fabs.f64 (pow.f64 u1 3/2))) (fma.f64 15/8 (sqrt.f64 (pow.f64 u1 7)) (*.f64 35/16 (sqrt.f64 (pow.f64 u1 9)))))","(fma.f64 3/2 (pow.f64 u1 5/2) (fma.f64 35/16 (pow.f64 u1 9/2) (fma.f64 15/8 (pow.f64 u1 7/2) (pow.f64 u1 3/2))))","(fma.f64 3/2 (pow.f64 u1 5/2) (fma.f64 15/8 (pow.f64 u1 7/2) (fma.f64 35/16 (pow.f64 u1 9/2) (pow.f64 u1 3/2))))","(pow.f64 u1 3)","(+.f64 (*.f64 3 (pow.f64 u1 4)) (pow.f64 u1 3))","(fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))","(+.f64 (*.f64 6 (pow.f64 u1 5)) (+.f64 (*.f64 3 (pow.f64 u1 4)) (pow.f64 u1 3)))","(fma.f64 6 (pow.f64 u1 5) (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3)))","(+.f64 (*.f64 10 (pow.f64 u1 6)) (+.f64 (*.f64 6 (pow.f64 u1 5)) (+.f64 (*.f64 3 (pow.f64 u1 4)) (pow.f64 u1 3))))","(fma.f64 10 (pow.f64 u1 6) (fma.f64 6 (pow.f64 u1 5) (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))))","(fma.f64 6 (pow.f64 u1 5) (fma.f64 10 (pow.f64 u1 6) (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))))","-1","(neg.f64 (+.f64 1 (*.f64 3 (/.f64 1 u1))))","(+.f64 -1 (neg.f64 (/.f64 3 u1)))","(+.f64 -1 (/.f64 -3 u1))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (*.f64 3 (/.f64 1 u1)))))","(+.f64 -1 (neg.f64 (+.f64 (/.f64 3 u1) (/.f64 6 (*.f64 u1 u1)))))","(-.f64 -1 (+.f64 (/.f64 3 u1) (/.f64 6 (*.f64 u1 u1))))","(+.f64 -1 (-.f64 (/.f64 -3 u1) (/.f64 (/.f64 6 u1) u1)))","(+.f64 -1 (+.f64 (/.f64 -3 u1) (/.f64 -6 (*.f64 u1 u1))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 u1 3))) (*.f64 3 (/.f64 1 u1))))))","(+.f64 -1 (neg.f64 (+.f64 (+.f64 (/.f64 6 (*.f64 u1 u1)) (/.f64 10 (pow.f64 u1 3))) (/.f64 3 u1))))","(-.f64 -1 (+.f64 (/.f64 3 u1) (+.f64 (/.f64 6 (*.f64 u1 u1)) (/.f64 10 (pow.f64 u1 3)))))","(-.f64 -1 (+.f64 (/.f64 3 u1) (+.f64 (/.f64 (/.f64 6 u1) u1) (/.f64 10 (pow.f64 u1 3)))))","(-.f64 (/.f64 -3 u1) (+.f64 (/.f64 10 (pow.f64 u1 3)) (+.f64 1 (/.f64 6 (*.f64 u1 u1)))))","(-.f64 (-.f64 (/.f64 -3 u1) (/.f64 10 (pow.f64 u1 3))) (+.f64 1 (/.f64 6 (*.f64 u1 u1))))","-1","(neg.f64 (+.f64 1 (*.f64 3 (/.f64 1 u1))))","(+.f64 -1 (neg.f64 (/.f64 3 u1)))","(+.f64 -1 (/.f64 -3 u1))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (*.f64 3 (/.f64 1 u1)))))","(+.f64 -1 (neg.f64 (+.f64 (/.f64 3 u1) (/.f64 6 (*.f64 u1 u1)))))","(-.f64 -1 (+.f64 (/.f64 3 u1) (/.f64 6 (*.f64 u1 u1))))","(+.f64 -1 (-.f64 (/.f64 -3 u1) (/.f64 (/.f64 6 u1) u1)))","(+.f64 -1 (+.f64 (/.f64 -3 u1) (/.f64 -6 (*.f64 u1 u1))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 6 (/.f64 1 (pow.f64 u1 2))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 u1 3))) (*.f64 3 (/.f64 1 u1))))))","(+.f64 -1 (neg.f64 (+.f64 (+.f64 (/.f64 6 (*.f64 u1 u1)) (/.f64 10 (pow.f64 u1 3))) (/.f64 3 u1))))","(-.f64 -1 (+.f64 (/.f64 3 u1) (+.f64 (/.f64 6 (*.f64 u1 u1)) (/.f64 10 (pow.f64 u1 3)))))","(-.f64 -1 (+.f64 (/.f64 3 u1) (+.f64 (/.f64 (/.f64 6 u1) u1) (/.f64 10 (pow.f64 u1 3)))))","(-.f64 (/.f64 -3 u1) (+.f64 (/.f64 10 (pow.f64 u1 3)) (+.f64 1 (/.f64 6 (*.f64 u1 u1)))))","(-.f64 (-.f64 (/.f64 -3 u1) (/.f64 10 (pow.f64 u1 3))) (+.f64 1 (/.f64 6 (*.f64 u1 u1))))"]],"stop":[["node limit",1]],"time":41.786865234375,"type":"simplify"},{"compiler":[[3950,3307]],"time":52.838134765625,"type":"eval"},{"alts":[["(log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.41682098522316585],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 2) (*.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))))","fresh",0.4101277147495571],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 6 (pow.f64 u1 5) (fma.f64 10 (pow.f64 u1 6) (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","fresh",13.08106798437891],["(sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))","fresh",3.925065614217319],["(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 6) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","fresh",7.021646531131888],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 3)","fresh",0.8382613173501949],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (pow.f64 (cbrt.f64 (-.f64 1 u1)) 2)) (cbrt.f64 (-.f64 1 u1)))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","fresh",0.3554402147495571],["(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","next",0.2950634656862817],["(*.f64 (sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 (*.f64 u1 u1))) (+.f64 u1 1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.44747722313939614],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","fresh",23.627478945883357],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))","fresh",0.49698006590482297],["(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) 3)) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.5551139731641095]],"compiler":[[16,13],[41,35],[32,27],[16,13],[48,37],[26,22],[35,30],[25,21],[20,15],[22,19],[40,35],[19,16],[16,13],[41,35],[32,27],[16,13],[48,37],[26,22],[35,30],[25,21],[20,15],[22,19],[40,35],[19,16]],"count":[[150,12]],"kept":[{"done":[0,0],"fresh":[10,6],"new":[139,6],"picked":[1,0]}],"min-error":[0.0234375],"time":40.716064453125,"type":"prune"},{"compiler":[[116,91]],"locations":[["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))",0.30078125,true],["(*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))",0.32421875,false],["(pow.f64 (+.f64 (/.f64 1 u1) -1) -2)",0.6084938965266303,false],["(pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)",0.6735726074528622,false]],"time":28.68798828125,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))","u2","-inf",0.573974609375],["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))","u2","inf",0.609130859375],["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))","u2","0",0.68505859375],["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))","u1","-inf",0.720947265625],["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))","u1","inf",0.904052734375],["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))","u1","0",0.93408203125]],"time":4.56396484375,"type":"series"},{"count":[[1,18]],"egraph":[[2,4937,32,0.038766876],[1,412,32,0.008881126],[0,19,32,0.000778167]],"inputs":[["(*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))) (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 1/4) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 3/2) (pow.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) 3) (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3))) 1))))))"]],"rules":[["egg-rr",18]],"stop":[["node limit",1]],"time":57.73486328125,"type":"rewrite"},{"count":[[30,28]],"egraph":[[5,7053,399,0.03350625],[4,3147,399,0.019344667],[3,847,411,0.008250167],[2,242,413,0.002815126],[1,97,440,0.0009107919999999999],[0,39,478,0.000304917]],"inputs":[["(*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 2) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 4) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 2) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(+.f64 (*.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 6) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 4) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 2) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(/.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 1 u1) -1))","(+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 2) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (*.f64 u2 u2) (-.f64 (/.f64 1 u1) 1))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (/.f64 u2 (/.f64 (+.f64 (/.f64 1 u1) -1) u2))) (/.f64 1 (+.f64 (/.f64 1 u1) -1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 u2 (+.f64 (/.f64 1 u1) -1)) u2) (/.f64 1 (+.f64 (/.f64 1 u1) -1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -296088132032719732196643/5000000000000000000000 (/.f64 (*.f64 u2 u2) (+.f64 (/.f64 1 u1) -1)) (/.f64 1 (+.f64 (/.f64 1 u1) -1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -296088132032719732196643/5000000000000000000000 (/.f64 u2 (/.f64 (+.f64 (/.f64 1 u1) -1) u2)) (/.f64 1 (+.f64 (/.f64 1 u1) -1))))","(+.f64 (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 4) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 2) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 u2 4) (-.f64 (/.f64 1 u1) 1))) (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (*.f64 u2 u2) (-.f64 (/.f64 1 u1) 1))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(+.f64 (/.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 1 u1) -1)) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4)) (+.f64 (/.f64 1 u1) -1)) (*.f64 -296088132032719732196643/5000000000000000000000 (/.f64 u2 (/.f64 (+.f64 (/.f64 1 u1) -1) u2))))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (/.f64 (pow.f64 u2 4) (+.f64 (/.f64 1 u1) -1)) (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 u2 (+.f64 (/.f64 1 u1) -1)) u2)))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (/.f64 (pow.f64 u2 4) (+.f64 (/.f64 1 u1) -1)) (fma.f64 -296088132032719732196643/5000000000000000000000 (/.f64 (*.f64 u2 u2) (+.f64 (/.f64 1 u1) -1)) (/.f64 1 (+.f64 (/.f64 1 u1) -1)))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (*.f64 (/.f64 u2 (/.f64 (+.f64 (/.f64 1 u1) -1) u2)) (+.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (*.f64 u2 u2) 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000)))))","(+.f64 (*.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 6) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 4) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 (pow.f64 u2 2) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(fma.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 u2 6) (-.f64 (/.f64 1 u1) 1))) (fma.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 u2 4) (-.f64 (/.f64 1 u1) 1))) (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (*.f64 u2 u2) (-.f64 (/.f64 1 u1) 1))) (*.f64 (/.f64 1 (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(+.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (*.f64 -296088132032719732196643/5000000000000000000000 (/.f64 u2 (/.f64 (+.f64 (/.f64 1 u1) -1) u2))) (/.f64 1 (+.f64 (/.f64 1 u1) -1)))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 (*.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 6)) (+.f64 (/.f64 1 u1) -1)) (/.f64 (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (pow.f64 u2 4)) (+.f64 (/.f64 1 u1) -1)))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (fma.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (/.f64 u2 (+.f64 (/.f64 1 u1) -1)) u2) (/.f64 1 (+.f64 (/.f64 1 u1) -1))) (fma.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (/.f64 (pow.f64 u2 6) (+.f64 (/.f64 1 u1) -1)) (/.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (/.f64 (+.f64 (/.f64 1 u1) -1) (pow.f64 u2 4))))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (fma.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (/.f64 (pow.f64 u2 6) (+.f64 (/.f64 1 u1) -1)) (fma.f64 -296088132032719732196643/5000000000000000000000 (/.f64 (*.f64 u2 u2) (+.f64 (/.f64 1 u1) -1)) (*.f64 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000 (/.f64 (pow.f64 u2 4) (+.f64 (/.f64 1 u1) -1)))))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 (/.f64 1 (+.f64 (/.f64 1 u1) -1)) (fma.f64 -58644740808116728613621848561447538841603627747060212551467462864942301/3750000000000000000000000000000000000000000000000000000000000000000 (/.f64 (pow.f64 u2 6) (+.f64 (/.f64 1 u1) -1)) (*.f64 (/.f64 u2 (/.f64 (+.f64 (/.f64 1 u1) -1) u2)) (+.f64 -296088132032719732196643/5000000000000000000000 (*.f64 (*.f64 u2 u2) 68186363723819656600723780188600472878460365127/50000000000000000000000000000000000000000000))))))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))","(*.f64 (/.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3) (-.f64 (/.f64 1 u1) 1)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (-.f64 (/.f64 1 u1) 1)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 (cos.f64 (*.f64 u2 314159265359/50000000000)) 3) (+.f64 (/.f64 1 u1) -1)))"]],"stop":[["node limit",1]],"time":50.864013671875,"type":"simplify"},{"compiler":[[3681,3033]],"time":49.35400390625,"type":"eval"},{"alts":[["(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))","fresh",0.46573006590482297],["(log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.41682098522316585],["(*.f64 (sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 (*.f64 u1 u1))) (+.f64 u1 1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.44747722313939614],["(cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 6 (pow.f64 u1 5) (fma.f64 10 (pow.f64 u1 6) (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","fresh",13.031878898077379],["(sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))","fresh",3.925065614217319],["(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 6) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","fresh",7.021646531131888],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 3)","fresh",0.8382613173501949],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (pow.f64 (cbrt.f64 (-.f64 1 u1)) 2)) (cbrt.f64 (-.f64 1 u1)))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","fresh",0.3554402147495571],["(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 2)) (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))))))","fresh",0.34218897481682753],["(cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","fresh",23.620617016827726],["(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) 3)) (cos.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.5551139731641095]],"compiler":[[38,33],[16,13],[20,15],[30,25],[16,13],[48,37],[26,22],[35,30],[39,33],[20,17],[19,16]],"count":[[146,11]],"kept":[{"done":[0,0],"fresh":[11,7],"new":[134,4],"picked":[1,0]}],"min-error":[0.0234375],"time":33.662109375,"type":"prune"},{"accuracy":[0.2950634656862817],"baseline":[0.2950634656862817],"branch":[["cosTheta_i",0.2950634656862817,1],["u1",0.2950634656862818,1],["u2",0.2950634656862818,1],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))",0.2950634656862818,1],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))",0.2950634656862818,1],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",0.2950634656862818,1],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",0.2950634656862818,1],["(/.f64 u1 (-.f64 1 u1))",0.2950634656862818,1],["(/.f64 u1 (-.f64 1 u1))",0.2950634656862818,1],["(cos.f64 (*.f64 314159265359/50000000000 u2))",0.2950634656862817,1],["(*.f64 314159265359/50000000000 u2)",0.2950634656862818,1]],"compiler":[[4,3],[4,3],[4,3],[14,11],[14,11],[9,7],[9,7],[8,6],[8,6],[7,6],[6,5],[615,501]],"count":[[26,1]],"inputs":[["(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))","(cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 6 (pow.f64 u1 5) (fma.f64 10 (pow.f64 u1 6) (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 2)) (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))))))","(cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) 2) (*.f64 (cbrt.f64 (cos.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))))","(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 6 (pow.f64 u1 5) (fma.f64 10 (pow.f64 u1 6) (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 u1 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2)) (pow.f64 (cbrt.f64 (-.f64 1 u1)) 2)) (cbrt.f64 (-.f64 1 u1)))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 3 (pow.f64 u1 4) (pow.f64 u1 3))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))))))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 3)","(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (sqrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) 3/2) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))","(*.f64 (sqrt.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 5/6) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 1 u1) 1) -2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))))","(sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 2)))","(+.f64 (*.f64 -98696044010906577398881/5000000000000000000000 (*.f64 (pow.f64 u2 2) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 9740909103402808085817682884085781839780052161/150000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 4) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 -961389193575684075633145058384385882649239799132134631991269883031841/11250000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 6) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(*.f64 (/.f64 1 (sqrt.f64 (-.f64 (/.f64 1 u1) 1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2))))))","(*.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/6)) 3)) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))) 2)","(*.f64 (sqrt.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/4) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/4))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (*.f64 (/.f64 u1 (-.f64 1 (*.f64 u1 u1))) (+.f64 u1 1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (pow.f64 (exp.f64 1/2) (log.f64 (/.f64 u1 (-.f64 1 u1)))) (cos.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))"]],"link":["."],"name":["Trowbridge-Reitz Sample, near normal, slope_x"],"oracle":[28.305851132578166],"outputs":[["(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))"]],"time":114.654052734375,"times":[["cosTheta_i",8.916015625],["u1",9.27197265625],["u2",8.795166015625],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))",9.92578125],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cos.f64 (*.f64 314159265359/50000000000 u2)))",9.278076171875],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",12.051025390625],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",8.43603515625],["(/.f64 u1 (-.f64 1 u1))",8.35302734375],["(/.f64 u1 (-.f64 1 u1))",8.39794921875],["(cos.f64 (*.f64 314159265359/50000000000 u2))",8.68310546875],["(*.f64 314159265359/50000000000 u2)",8.705078125]],"type":"regimes"},{"compiler":[[25,21]],"egraph":[[4,34,34,0.000188583],[3,33,34,0.000143208],[2,31,34,0.000109708],[1,28,34,7.5917e-5],[0,20,34,3.85e-5]],"inputs":[["(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))"]],"method":["egg-herbie"],"outputs":[["(cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1 u1) -1) -2) (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (cos.f64 (*.f64 314159265359/50000000000 u2)) 3)))"]],"stop":[["fuel",1],["saturated",1]],"time":10.1279296875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[25,21]],"remove-preprocessing":[[]],"time":14.9599609375,"type":"end"}]
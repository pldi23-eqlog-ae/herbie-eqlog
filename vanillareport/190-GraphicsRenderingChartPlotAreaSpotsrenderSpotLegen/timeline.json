[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.16015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.0341796875,1],["body",1024,"valid",10.32177734375,114],["body",512,"valid",4.797119140625,71],["body",2048,"valid",10.487548828125,89],["body",256,"valid",276.411376953125,7982]],"time":311.017822265625,"type":"sample"},{"compiler":[[10,7]],"egraph":[[0,2,2,1.5e-6],[13,553,20,0.010885375],[12,548,20,0.00946025],[11,535,20,0.007998541999999999],[10,490,20,0.0065397499999999996],[9,418,20,0.0050956249999999995],[8,355,20,0.003782125],[7,292,24,0.00276625],[6,188,24,0.001824916],[5,141,24,0.001109166],[4,70,24,0.0006108750000000001],[3,40,24,0.00031641600000000003],[2,28,24,0.000177625],[1,20,24,0.000106791],[0,12,24,5.0125e-5]],"inputs":[["0","1"],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))","(+.f64 y (/.f64 (fabs.f64 (-.f64 x y)) 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))","(+.f64 x (*.f64 1/2 (fabs.f64 (-.f64 y x))))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 y (/.f64 (fabs.f64 (-.f64 x y)) 2))","(+.f64 y (/.f64 (fabs.f64 (-.f64 y x)) 2))","(+.f64 y (*.f64 1/2 (fabs.f64 (-.f64 y x))))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) y)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 y)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":34.31103515625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[14,460,10,0.009724459],[13,455,10,0.008558709],[12,447,10,0.007375792],[11,424,10,0.006188167],[10,379,10,0.004976584],[9,320,10,0.003835501],[8,275,10,0.002919667],[7,211,12,0.002100251],[6,163,12,0.001435001],[5,106,12,0.000896167],[4,50,12,0.000456584],[3,29,12,0.000237667],[2,20,12,0.00013737599999999998],[1,13,12,7.991699999999999e-5],[0,8,12,3.6542e-5]],"inputs":[["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))","(+.f64 x (*.f64 1/2 (fabs.f64 (-.f64 y x))))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"stop":[["saturated",1]],"time":20.18408203125,"type":"simplify"},{"compiler":[[17,9]],"time":0.350830078125,"type":"eval"},{"alts":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","next",0.06640625]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.06640625],"time":0.85009765625,"type":"prune"},{"compiler":[[19,7]],"locations":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)",0.015625,true]],"time":4.078125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","-inf",0.3798828125],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","inf",0.346923828125],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","0",0.27197265625],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","y","-inf",0.33203125],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","y","inf",0.367919921875],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","y","0",0.39111328125]],"time":2.19189453125,"type":"series"},{"count":[[1,21]],"egraph":[[2,2120,8,0.019075040999999997],[1,155,8,0.002783083],[0,7,10,0.000211083]],"inputs":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 y x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 y x) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 y x) 1/2) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 (-.f64 y x) 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 y x) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 y x) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) 2) (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) (sqrt.f64 (fma.f64 (-.f64 y x) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (-.f64 y x) 1/2) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 (-.f64 y x) 1/2) (*.f64 (-.f64 y x) 1/2)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (-.f64 y x) 1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 y x) 1/2) (*.f64 (-.f64 y x) 1/2)) (*.f64 x x)) (-.f64 (*.f64 (-.f64 y x) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 y x) 1/2 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (-.f64 y x) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 y x) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (-.f64 y x) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (-.f64 y x) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (-.f64 y x) 1/2 x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":36.820068359375,"type":"rewrite"},{"count":[[45,28]],"egraph":[[11,426,221,0.008658249],[10,421,221,0.007527373999999999],[9,414,221,0.006413207999999999],[8,386,221,0.0052941659999999995],[7,337,221,0.004157666],[6,286,221,0.003120083],[5,214,221,0.002250958],[4,181,221,0.0015785830000000002],[3,115,221,0.000995666],[2,68,221,0.000549999],[1,45,221,0.000255624],[0,20,221,9.9083e-5]],"inputs":[["(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(*.f64 1/2 (fabs.f64 (-.f64 y x)))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(*.f64 1/2 (fabs.f64 (-.f64 y x)))","(*.f64 1/2 (fabs.f64 (-.f64 x y)))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)"]],"stop":[["saturated",1]],"time":24.23388671875,"type":"simplify"},{"compiler":[[293,155]],"time":4.744140625,"type":"eval"},{"alts":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","done",0.06640625]],"compiler":[[9,6]],"count":[[29,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[28,0],"picked":[1,1]}],"min-error":[0.06640625],"time":3.343994140625,"type":"prune"},{"accuracy":[0.06640625],"baseline":[0.06640625],"branch":[["x",0.06640625,1],["y",0.06640625,1],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))",0.06640625,1]],"compiler":[[3,2],[3,2],[10,7],[17,9]],"count":[[2,1]],"inputs":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))"]],"link":["."],"name":["Graphics.Rendering.Chart.Plot.AreaSpots:renderSpotLegend from Chart-1.5.3"],"oracle":[0.06640625],"outputs":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"time":10.308837890625,"times":[["x",3.274169921875],["y",3.14501953125],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))",3.30810546875]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[5,27,10,0.000163793],[4,26,10,0.00013295899999999999],[3,23,10,0.000101667],[2,18,10,7.1251e-5],[1,11,10,4.3417e-5],[0,7,10,1.8459e-5]],"inputs":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"stop":[["done",1],["saturated",1]],"time":8.277099609375,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.294921875,"type":"end"}]
[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.7496337890625,0.0009760856628417969,0.2493901252746582],[11,0.7496337890625,0.0019521713256835938,0.2484140396118164],[10,0.7496337890625,0.0039043426513671875,0.2464618682861328],[9,0.7496337890625,0.007808685302734375,0.24255752563476563],[8,0.7496337890625,0.01561737060546875,0.23474884033203125],[7,0.7496337890625,0.0312347412109375,0.2191314697265625],[6,0.7496337890625,0.062469482421875,0.187896728515625],[5,0.7496337890625,0.12493896484375,0.12542724609375],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.296142578125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.221923828125,8],["body",256,"valid",241.906005859375,8256]],"time":249.682861328125,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.125e-6],[10,640,8,0.009172082000000002],[9,610,8,0.007645207000000001],[8,590,8,0.006030707000000001],[7,378,8,0.0045640820000000006],[6,283,8,0.002831791],[5,205,8,0.001940749],[4,143,8,0.001223249],[3,70,8,0.0006053739999999999],[2,34,8,0.00027266599999999997],[1,16,10,0.000125874],[0,7,10,5.0333e-5]],"inputs":[["0"],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))","(*.f64 x (+.f64 1 (*.f64 x -1/2)))","(*.f64 x (fma.f64 x -1/2 1))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":31.009033203125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,640,8,0.009188334],[9,610,8,0.007645001],[8,590,8,0.006024126],[7,378,8,0.0045494590000000005],[6,283,8,0.002810917],[5,205,8,0.001928042],[4,143,8,0.001223542],[3,70,8,0.000607083],[2,34,8,0.00027483300000000004],[1,16,10,0.000120958],[0,7,10,4.6042e-5]],"inputs":[["(*.f64 x (-.f64 1 (*.f64 x 1/2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 1 (*.f64 x 1/2)))","(*.f64 x (+.f64 1 (*.f64 x -1/2)))","(*.f64 x (fma.f64 x -1/2 1))"]],"stop":[["saturated",1]],"time":19.529052734375,"type":"simplify"},{"compiler":[[14,10]],"time":0.35400390625,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -1/2 1))","next",0.0078125]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":1.328857421875,"type":"prune"},{"compiler":[[14,10]],"locations":[["(*.f64 x (fma.f64 x -1/2 1))",0.0078125,true]],"time":3.564208984375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (fma.f64 x -1/2 1))","x","-inf",0.5908203125],["(*.f64 x (fma.f64 x -1/2 1))","x","inf",0.449951171875],["(*.f64 x (fma.f64 x -1/2 1))","x","0",0.44677734375]],"time":1.534912109375,"type":"series"},{"count":[[1,13]],"egraph":[[2,1215,8,0.014129041],[1,114,8,0.001808791],[0,6,8,0.000213333]],"inputs":[["(*.f64 x (fma.f64 x -1/2 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -1/2) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x -1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (fma.f64 x -1/2 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -1/2 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (fma.f64 x -1/2 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 x -1/2 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (fma.f64 x -1/2 1))))))))"]],"rules":[["egg-rr",13]],"stop":[["node limit",1]],"time":30.239013671875,"type":"rewrite"},{"count":[[25,18]],"egraph":[[18,7984,87,0.095747958],[17,7696,87,0.087621333],[16,7300,87,0.07870454099999999],[15,6459,87,0.069336583],[14,5737,87,0.058478458],[13,5152,87,0.049095208],[12,4620,87,0.041149124],[11,4196,87,0.033532208],[10,3847,87,0.027032374],[9,3604,87,0.021364541],[8,3373,87,0.016324083],[7,3011,87,0.011767083],[6,1599,87,0.007436208],[5,426,87,0.003345417],[4,134,87,0.001142083],[3,54,87,0.000511958],[2,27,87,0.000262083],[1,15,87,0.000141416],[0,7,87,5.6583e-5]],"inputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(*.f64 -1/2 (pow.f64 x 2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(*.f64 -1/2 (pow.f64 x 2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(*.f64 -1/2 (pow.f64 x 2))","(*.f64 -1/2 (*.f64 x x))","(*.f64 x (*.f64 x -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(*.f64 -1/2 (pow.f64 x 2))","(*.f64 -1/2 (*.f64 x x))","(*.f64 x (*.f64 x -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))"]],"stop":[["node limit",1]],"time":110.113037109375,"type":"simplify"},{"compiler":[[135,99]],"time":2.5009765625,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -1/2 1))","done",0.0078125],["(+.f64 (*.f64 (*.f64 x -1/2) x) x)","next",0.01171875]],"compiler":[[7,5],[8,5],[8,5]],"count":[[19,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[18,1],"picked":[1,1]}],"min-error":[0],"time":2.51904296875,"type":"prune"},{"compiler":[[18,11]],"locations":[["(+.f64 (*.f64 (*.f64 x -1/2) x) x)",0.01171875,true]],"time":4.2978515625,"type":"localize"},{"count":[[1,12]],"series":[["(+.f64 (*.f64 (*.f64 x -1/2) x) x)","x","-inf",0.1708984375],["(+.f64 (*.f64 (*.f64 x -1/2) x) x)","x","inf",0.31201171875],["(+.f64 (*.f64 (*.f64 x -1/2) x) x)","x","0",0.2900390625]],"time":0.818115234375,"type":"series"},{"count":[[1,40]],"egraph":[[2,1824,8,0.017847999],[1,135,8,0.0025364990000000002],[0,6,8,0.000203041]],"inputs":[["(+.f64 (*.f64 (*.f64 x -1/2) x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (fma.f64 x -1/2 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (-.f64 (*.f64 x (*.f64 x -1/2)) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 x (*.f64 x -1/2)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 x -1/2 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 x -1/2 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (fma.f64 x -1/2 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 x -1/2 1))) (pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -1/2 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -1/2 1))) 2) (cbrt.f64 (*.f64 x (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (fma.f64 x -1/2 1))) (sqrt.f64 (*.f64 x (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x (-.f64 x (*.f64 x (*.f64 x -1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x x)) (/.f64 1 (-.f64 (*.f64 x (*.f64 x -1/2)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -1/2 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x -1/2 1) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x -1/2 1) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x -1/2 1) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x (-.f64 x (*.f64 x (*.f64 x -1/2))))) (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x (*.f64 x -1/2)) x) (-.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x (-.f64 x (*.f64 x (*.f64 x -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 3) (pow.f64 x 3)) (+.f64 (*.f64 x x) (-.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x (*.f64 x (*.f64 x -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 x -1/2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x (-.f64 x (*.f64 x (*.f64 x -1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (*.f64 x -1/2)) 2) (*.f64 x x))) (neg.f64 (-.f64 (*.f64 x (*.f64 x -1/2)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 x (*.f64 x -1/2)) 2)) (-.f64 x (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -1/2 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (fma.f64 x -1/2 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (fma.f64 x -1/2 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 x -1/2 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (fma.f64 x -1/2 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x -1/2) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (*.f64 x -1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 x -1/2))) 2) (cbrt.f64 (*.f64 x (*.f64 x -1/2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (*.f64 x -1/2))) (sqrt.f64 (*.f64 x (*.f64 x -1/2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 x (*.f64 x -1/2)))))))"]],"rules":[["egg-rr",40]],"stop":[["node limit",1]],"time":35.97607421875,"type":"rewrite"},{"count":[[52,44]],"egraph":[[18,7984,87,0.09562437599999998],[17,7696,87,0.08747216799999999],[16,7300,87,0.078616126],[15,6459,87,0.06929745899999999],[14,5737,87,0.058443918],[13,5152,87,0.049140959],[12,4620,87,0.041219168],[11,4196,87,0.033538584],[10,3847,87,0.027040667],[9,3604,87,0.021359834],[8,3373,87,0.016314667],[7,3011,87,0.01179575],[6,1599,87,0.007466459],[5,426,87,0.003386292],[4,134,87,0.001144125],[3,54,87,0.000507875],[2,27,87,0.000264125],[1,15,87,0.000142042],[0,7,87,5.6042e-5]],"inputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(*.f64 -1/2 (pow.f64 x 2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(*.f64 -1/2 (pow.f64 x 2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(*.f64 -1/2 (pow.f64 x 2))","(*.f64 -1/2 (*.f64 x x))","(*.f64 x (*.f64 x -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(*.f64 -1/2 (pow.f64 x 2))","(*.f64 -1/2 (*.f64 x x))","(*.f64 x (*.f64 x -1/2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))"]],"stop":[["node limit",1]],"time":109.759765625,"type":"simplify"},{"compiler":[[583,394]],"time":8.0361328125,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 x -1/2 1))","done",0.0078125],["(+.f64 (*.f64 (*.f64 x -1/2) x) x)","done",0.01171875]],"compiler":[[7,5],[8,5]],"count":[[46,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[44,0],"picked":[1,1]}],"min-error":[0],"time":5.916015625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))",0.0078125,1]],"compiler":[[2,1],[8,6],[21,14]],"count":[[3,1]],"inputs":[["(+.f64 (*.f64 (*.f64 x -1/2) x) x)","(*.f64 x (fma.f64 x -1/2 1))","(*.f64 x (-.f64 1 (*.f64 x 1/2)))"]],"link":["."],"name":["Numeric.SpecFunctions:log1p from math-functions-0.1.5.2, B"],"oracle":[0.01953125],"outputs":[["(*.f64 x (fma.f64 x -1/2 1))"]],"time":7.14892578125,"times":[["x",2.963134765625],["(*.f64 x (-.f64 1 (*.f64 x 1/2)))",3.5400390625]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,9,8,3.3626e-5],[0,6,8,2.1042e-5]],"inputs":[["(*.f64 x (fma.f64 x -1/2 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (fma.f64 x -1/2 1))"]],"stop":[["done",1],["saturated",1]],"time":8.030029296875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.916015625,"type":"end"}]
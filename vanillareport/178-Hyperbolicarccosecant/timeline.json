[{"compiler":[[15,11]],"method":["search"],"sampling":[[12,0.2493898868560791,0.0009760856628417969,0.7496340274810791],[11,0.2489018440246582,0.0019521713256835938,0.7491459846496582],[10,0.2479257583618164,0.0039043426513671875,0.7481698989868164],[9,0.2459735870361328,0.007808685302734375,0.7462177276611328],[8,0.24206924438476563,0.01561737060546875,0.7423133850097656],[7,0.23426055908203125,0.0312347412109375,0.7345046997070313],[6,0.2186431884765625,0.062469482421875,0.7188873291015625],[5,0.187408447265625,0.12493896484375,0.687652587890625],[4,0.12493896484375,0.2498779296875,0.62518310546875],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.02001953125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.961181640625,19],["body",256,"valid",428.98486328125,8256]],"time":437.429931640625,"type":"sample"},{"compiler":[[14,10]],"egraph":[[0,1,1,1.292e-6],[18,7313,20,0.097142792],[17,6367,20,0.083451708],[16,6099,20,0.071789874],[15,6021,20,0.061391249],[14,5925,20,0.053728208],[13,5621,20,0.046893749],[12,5311,20,0.039738624],[11,4332,20,0.031594999],[10,2894,20,0.022084583],[9,1522,20,0.013893583000000001],[8,713,20,0.0067778330000000005],[7,345,20,0.002866458],[6,128,20,0.0013384170000000002],[5,81,20,0.000773917],[4,53,20,0.000512],[3,36,20,0.000317375],[2,25,20,0.000195083],[1,18,20,0.000112667],[0,10,20,5.3292e-5]],"inputs":[["0"],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":121.64013671875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[18,7313,20,0.09673641499999999],[17,6367,20,0.08304529],[16,6099,20,0.071592249],[15,6021,20,0.061182498999999994],[14,5925,20,0.053516166],[13,5621,20,0.046708041],[12,5311,20,0.039592498999999996],[11,4332,20,0.031419540999999995],[10,2894,20,0.021845166],[9,1522,20,0.013796916],[8,713,20,0.006722499999999999],[7,345,20,0.002859792],[6,128,20,0.001322667],[5,81,20,0.000763709],[4,53,20,0.00050225],[3,36,20,0.0003095],[2,25,20,0.000188209],[1,18,20,0.000106084],[0,10,20,5.0209e-5]],"inputs":[["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"stop":[["node limit",1]],"time":108.661865234375,"type":"simplify"},{"compiler":[[14,10]],"time":0.316162109375,"type":"eval"},{"alts":[["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","next",0.00390625]],"compiler":[[14,10],[14,10]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.805908203125,"type":"prune"},{"compiler":[[53,29]],"locations":[["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))",0.00390625,true],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))",0.00390625,true],["(sqrt.f64 (-.f64 1 (*.f64 x x)))",0.0078125,true],["(/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)",0.015625,true]],"time":12.037109375,"type":"localize"},{"count":[[4,16]],"series":[["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))","x","-inf",0.203125],["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))","x","inf",0.197021484375],["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))","x","0",0.209228515625],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","x","-inf",0.638916015625],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","x","inf",0.72314453125],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","x","0",0.4599609375],["(sqrt.f64 (-.f64 1 (*.f64 x x)))","x","-inf",0.31298828125],["(sqrt.f64 (-.f64 1 (*.f64 x x)))","x","inf",0.321044921875],["(sqrt.f64 (-.f64 1 (*.f64 x x)))","x","0",0.455078125],["(/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)","x","-inf",0.47802734375],["(/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)","x","inf",0.697021484375],["(/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)","x","0",0.4658203125]],"time":5.3798828125,"type":"series"},{"count":[[4,237]],"egraph":[[2,3293,57,0.027562707999999998],[1,225,59,0.004482042],[0,10,59,0.000283875]],"inputs":[["(/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)","(sqrt.f64 (-.f64 1 (*.f64 x x)))","(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1) (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (cbrt.f64 (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (*.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (sqrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 1) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) 1) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (pow.f64 (cbrt.f64 x) 2)) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (sqrt.f64 x)) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (cbrt.f64 (pow.f64 x -2))) (/.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 x -1/2)) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x -3) (pow.f64 (-.f64 1 (*.f64 x x)) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 (cbrt.f64 x)) (pow.f64 (-.f64 1 (*.f64 x x)) 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x -1/2) (pow.f64 (-.f64 1 (*.f64 x x)) 1/4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 (-.f64 1 (*.f64 x x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (pow.f64 (-.f64 1 (*.f64 x x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 1 (pow.f64 x 6))) (hypot.f64 1 (hypot.f64 x (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 1 (pow.f64 x 4))) (hypot.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 1/2 (log1p.f64 (*.f64 x (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (*.f64 x (neg.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (log1p.f64 (*.f64 x (neg.f64 x)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 x)) (log.f64 (+.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 1/3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (*.f64 1/3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (*.f64 -2 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)))) (log.f64 (/.f64 1 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x)) (log.f64 (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) (*.f64 2 (*.f64 1/3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3))) (log.f64 (/.f64 1 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (+.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1)) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (*.f64 x x) (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))) (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x) (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (log.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)))) (log.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3))) (log.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3))) (log.f64 (fma.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2) (-.f64 (pow.f64 x -2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x))) (log.f64 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3)))) (log.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))))) (log.f64 (neg.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 x (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) 1))) (log.f64 (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x (*.f64 (neg.f64 x) 1))) (log.f64 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1 x (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) -1))) (log.f64 (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (neg.f64 x) (*.f64 x -1))) (log.f64 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))) (neg.f64 x) (*.f64 (neg.f64 x) -1))) (log.f64 (pow.f64 (neg.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 x (pow.f64 (-.f64 1 (*.f64 x x)) -1/2) x)) (log.f64 (*.f64 x (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) (*.f64 (neg.f64 x) 1))) (log.f64 (*.f64 (neg.f64 x) (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1 x (*.f64 (neg.f64 x) (sqrt.f64 (-.f64 1 (*.f64 x x)))))) (log.f64 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1 x (*.f64 x (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (log.f64 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1 (neg.f64 x) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (log.f64 (pow.f64 (neg.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2) (neg.f64 (pow.f64 x -2)))) (log.f64 (-.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) 1)) (log.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) x)) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (*.f64 (cbrt.f64 x) x))) (*.f64 2 (log.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2) (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (log.f64 (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 1/3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (*.f64 x x) (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))) (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x) (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (fma.f64 (pow.f64 x -1) (+.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x -2) (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x)) (/.f64 (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)) (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1) (+.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1) (+.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))) 2) (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x) (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3)) (/.f64 1 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 1 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (*.f64 2 (*.f64 1/3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (pow.f64 (E.f64) (*.f64 1/3 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (log.f64 (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x))) (pow.f64 (E.f64) (log.f64 (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x x) (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))) (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x) (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3)) (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3)) (fma.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2) (-.f64 (pow.f64 x -2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3))) (neg.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)))) (neg.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) 1)) (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x (*.f64 (neg.f64 x) 1)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 x (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) -1)) (*.f64 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (neg.f64 x) (*.f64 x -1)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))) (neg.f64 x) (*.f64 (neg.f64 x) -1)) (pow.f64 (neg.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (pow.f64 (-.f64 1 (*.f64 x x)) -1/2) x) (*.f64 x (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x)))) (*.f64 (neg.f64 x) 1)) (*.f64 (neg.f64 x) (/.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 x (*.f64 (neg.f64 x) (sqrt.f64 (-.f64 1 (*.f64 x x))))) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 x (*.f64 x (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (neg.f64 x) (*.f64 (neg.f64 x) (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) (pow.f64 (neg.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2) (neg.f64 (pow.f64 x -2))) (-.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (*.f64 (cbrt.f64 x) x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (exp.f64 (log1p.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (log.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x))) (pow.f64 (E.f64) (log.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (log.f64 (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))))) (pow.f64 (E.f64) (log.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (log.f64 (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3)))) (pow.f64 (E.f64) (log.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) (*.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (*.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x x) (fma.f64 x (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 x x))) (fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 3/2) (pow.f64 x -3) (pow.f64 x -3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (-.f64 1 (sqrt.f64 (-.f64 1 (*.f64 x x)))) x) (-.f64 (pow.f64 x -2) (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) 1) (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2))) (cbrt.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) 2)) (cbrt.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) (cbrt.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (cbrt.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2)) (sqrt.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (sqrt.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) 1) (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (cbrt.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))) 2))) (sqrt.f64 (cbrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (sqrt.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (sqrt.f64 (sqrt.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 x -1)) (+.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))) (exp.f64 (pow.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (+.f64 1 (expm1.f64 (pow.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))) (+.f64 1 (expm1.f64 (pow.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 x -1))) (exp.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (pow.f64 x -1)) (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 x -1))) (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 x)) (log1p.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 x -1) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 x -1) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x) 1 (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1) 1 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1) (sqrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x -2)) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 1 (cbrt.f64 x)) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (*.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) (pow.f64 x -1)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (cbrt.f64 (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 (*.f64 x x)) (pow.f64 x -2))) (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (sqrt.f64 x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (*.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (pow.f64 x -1)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (sqrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 x)) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 1 (neg.f64 x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 1 (cbrt.f64 x)) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (cbrt.f64 x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 1) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) x) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) 1) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) x) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (pow.f64 (cbrt.f64 x) 2)) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/4) (cbrt.f64 x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) (sqrt.f64 x)) (/.f64 (pow.f64 (-.f64 1 (*.f64 x x)) 1/6) (sqrt.f64 x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (cbrt.f64 (pow.f64 x -2))) (/.f64 1 (cbrt.f64 x)) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (pow.f64 x -1/2)) (pow.f64 x -1/2) (pow.f64 x -1))))))"]],"rules":[["egg-rr",107],["egg-rr",58],["egg-rr",30],["egg-rr",42]],"stop":[["node limit",1]],"time":65.569091796875,"type":"rewrite"},{"count":[[253,266]],"egraph":[[4,3704,220,0.017659085],[3,1138,220,0.007609960000000001],[2,370,224,0.0026175010000000004],[1,149,228,0.0009277510000000001],[0,58,236,0.000254459]],"inputs":[["(/.f64 1 x)","(+.f64 (*.f64 -1/2 x) (/.f64 1 x))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (/.f64 1 x)))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (+.f64 (/.f64 1 x) (*.f64 -1/16 (pow.f64 x 5)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1 (log.f64 x))))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x)))))","(+.f64 (*.f64 -5/96 (pow.f64 x 6)) (+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x))))))","(/.f64 2 x)","(+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x)))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x))))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 -1/16 (pow.f64 x 5)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(+.f64 (*.f64 -1/2 x) (/.f64 1 x))","(fma.f64 -1/2 x (/.f64 1 x))","(fma.f64 x -1/2 (/.f64 1 x))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (/.f64 1 x)))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 -1/2 x (/.f64 1 x)))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 x -1/2 (/.f64 1 x)))","(fma.f64 x -1/2 (fma.f64 -1/8 (pow.f64 x 3) (/.f64 1 x)))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (+.f64 (/.f64 1 x) (*.f64 -1/16 (pow.f64 x 5)))))","(fma.f64 -1/8 (pow.f64 x 3) (+.f64 (fma.f64 -1/2 x (/.f64 1 x)) (*.f64 -1/16 (pow.f64 x 5))))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 x -1/2 (fma.f64 -1/16 (pow.f64 x 5) (/.f64 1 x))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 x x)))","(fma.f64 -1/2 (*.f64 x x) 1)","(fma.f64 x (*.f64 x -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/2 (*.f64 x x) 1) (*.f64 -1/8 (pow.f64 x 4)))","(fma.f64 x (*.f64 x -1/2) (fma.f64 -1/8 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 -1/16 (pow.f64 x 6) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 x x) 1) (fma.f64 -1/8 (pow.f64 x 4) (*.f64 -1/16 (pow.f64 x 6))))","(+.f64 1 (fma.f64 x (*.f64 x -1/2) (fma.f64 -1/8 (pow.f64 x 4) (*.f64 -1/16 (pow.f64 x 6)))))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 2) (neg.f64 (log.f64 x)))","(-.f64 (log.f64 2) (log.f64 x))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1 (log.f64 x))))","(+.f64 (log.f64 2) (fma.f64 -1/4 (*.f64 x x) (neg.f64 (log.f64 x))))","(+.f64 (-.f64 (log.f64 2) (log.f64 x)) (*.f64 x (*.f64 x -1/4)))","(-.f64 (fma.f64 (*.f64 x x) -1/4 (log.f64 2)) (log.f64 x))","(-.f64 (fma.f64 x (*.f64 x -1/4) (log.f64 2)) (log.f64 x))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x)))))","(+.f64 (log.f64 2) (fma.f64 -1/4 (*.f64 x x) (fma.f64 -3/32 (pow.f64 x 4) (neg.f64 (log.f64 x)))))","(+.f64 (log.f64 2) (-.f64 (fma.f64 (*.f64 x x) -1/4 (*.f64 (pow.f64 x 4) -3/32)) (log.f64 x)))","(+.f64 (log.f64 2) (-.f64 (fma.f64 (pow.f64 x 4) -3/32 (*.f64 x (*.f64 x -1/4))) (log.f64 x)))","(fma.f64 (pow.f64 x 4) -3/32 (-.f64 (fma.f64 x (*.f64 x -1/4) (log.f64 2)) (log.f64 x)))","(+.f64 (*.f64 -5/96 (pow.f64 x 6)) (+.f64 (log.f64 2) (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -3/32 (pow.f64 x 4)) (*.f64 -1 (log.f64 x))))))","(fma.f64 -5/96 (pow.f64 x 6) (+.f64 (log.f64 2) (fma.f64 -1/4 (*.f64 x x) (fma.f64 -3/32 (pow.f64 x 4) (neg.f64 (log.f64 x))))))","(+.f64 (-.f64 (fma.f64 (*.f64 x x) -1/4 (*.f64 (pow.f64 x 4) -3/32)) (log.f64 x)) (fma.f64 (pow.f64 x 6) -5/96 (log.f64 2)))","(+.f64 (log.f64 2) (fma.f64 (pow.f64 x 6) -5/96 (-.f64 (fma.f64 (pow.f64 x 4) -3/32 (*.f64 x (*.f64 x -1/4))) (log.f64 x))))","(fma.f64 (pow.f64 x 6) -5/96 (fma.f64 (pow.f64 x 4) -3/32 (-.f64 (fma.f64 x (*.f64 x -1/4) (log.f64 2)) (log.f64 x))))","(fma.f64 (pow.f64 x 4) -3/32 (-.f64 (fma.f64 (pow.f64 x 6) -5/96 (fma.f64 x (*.f64 x -1/4) (log.f64 2))) (log.f64 x)))","(/.f64 2 x)","(+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x)))","(fma.f64 -1/2 x (/.f64 2 x))","(fma.f64 x -1/2 (/.f64 2 x))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x))))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 -1/2 x (/.f64 2 x)))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 x -1/2 (/.f64 2 x)))","(fma.f64 x -1/2 (fma.f64 -1/8 (pow.f64 x 3) (/.f64 2 x)))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 -1/16 (pow.f64 x 5)))))","(fma.f64 -1/8 (pow.f64 x 3) (+.f64 (fma.f64 -1/2 x (/.f64 2 x)) (*.f64 -1/16 (pow.f64 x 5))))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 x -1/2 (fma.f64 -1/16 (pow.f64 x 5) (/.f64 2 x))))","(fma.f64 x -1/2 (fma.f64 -1/8 (pow.f64 x 3) (fma.f64 -1/16 (pow.f64 x 5) (/.f64 2 x))))"]],"stop":[["node limit",1]],"time":34.658935546875,"type":"simplify"},{"compiler":[[5491,3440]],"time":63.18701171875,"type":"eval"},{"alts":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","next",0]],"compiler":[[17,12],[17,12]],"count":[[267,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[266,1],"picked":[1,0]}],"min-error":[0],"time":98.718994140625,"type":"prune"},{"compiler":[[60,34]],"locations":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))",0.00390625,true],["(sqrt.f64 (-.f64 1 (*.f64 x x)))",0.0078125,false],["(/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)",0.015625,false],["(fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))",0.140625,true]],"time":28.640869140625,"type":"localize"},{"count":[[2,8]],"series":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","x","-inf",1.5830078125],["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","x","inf",1.25],["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","x","0",0.403076171875],["(fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))","x","-inf",0.984130859375],["(fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))","x","inf",0.514892578125],["(fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))","x","0",0.365966796875]],"time":5.233154296875,"type":"series"},{"count":[[2,85]],"egraph":[[2,2877,38,0.025773666],[1,234,38,0.004268124],[0,11,46,0.000344791]],"inputs":[["(fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))","(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 x) 1) (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 2) (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (log.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (pow.f64 (E.f64) (log.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (*.f64 2 (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))) (pow.f64 (E.f64) (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x -3) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) 3)) (+.f64 (pow.f64 x -2) (-.f64 (*.f64 (fma.f64 x (neg.f64 x) 1) (pow.f64 x -2)) (*.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -2) (*.f64 (fma.f64 x (neg.f64 x) 1) (pow.f64 x -2))) (-.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (exp.f64 (log1p.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (*.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (*.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (-.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) 1) (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (cbrt.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (sqrt.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))) (sqrt.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2))) (sqrt.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) 1) (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (cbrt.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))) (cbrt.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2))) (cbrt.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)) (sqrt.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))) (sqrt.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x)) (exp.f64 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x))) (exp.f64 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1 x)) (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) (log.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) (*.f64 2 (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 (pow.f64 x -3) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) 3))) (log.f64 (+.f64 (pow.f64 x -2) (-.f64 (*.f64 (fma.f64 x (neg.f64 x) 1) (pow.f64 x -2)) (*.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (pow.f64 x -2) (*.f64 (fma.f64 x (neg.f64 x) 1) (pow.f64 x -2)))) (log.f64 (-.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2) (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (log.f64 (sqrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (log.f64 (cbrt.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 3 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) x) (/.f64 1 x)))) 1) 1))))))"]],"rules":[["egg-rr",31],["egg-rr",54]],"stop":[["node limit",1]],"time":51.050048828125,"type":"rewrite"},{"count":[[93,100]],"egraph":[[4,4275,79,0.018089415999999997],[3,835,82,0.007212333],[2,240,93,0.001757958],[1,85,118,0.000566958],[0,33,120,0.000159875]],"inputs":[["(/.f64 1 x)","(*.f64 2 (/.f64 1 x))","(+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x)))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x))))","(*.f64 -1 (log.f64 x))","(+.f64 1 (*.f64 -1 (log.f64 x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (/.f64 1 (pow.f64 x 2))) (pow.f64 x 2))) (*.f64 -1 (log.f64 x))))","(+.f64 (*.f64 1/6 (*.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 3))) (*.f64 3 (/.f64 1 x))) (pow.f64 x 3))) (+.f64 1 (+.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (/.f64 1 (pow.f64 x 2))) (pow.f64 x 2))) (*.f64 -1 (log.f64 x)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(*.f64 2 (/.f64 1 x))","(/.f64 2 x)","(+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x)))","(fma.f64 -1/2 x (/.f64 2 x))","(fma.f64 x -1/2 (/.f64 2 x))","(+.f64 (*.f64 -1/8 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 x) (*.f64 2 (/.f64 1 x))))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 -1/2 x (/.f64 2 x)))","(fma.f64 -1/8 (pow.f64 x 3) (fma.f64 x -1/2 (/.f64 2 x)))","(fma.f64 x -1/2 (fma.f64 -1/8 (pow.f64 x 3) (/.f64 2 x)))","(fma.f64 x (fma.f64 -1/8 (*.f64 x x) -1/2) (/.f64 2 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 1 (*.f64 -1 (log.f64 x)))","(+.f64 1 (neg.f64 (log.f64 x)))","(-.f64 1 (log.f64 x))","(+.f64 1 (+.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (/.f64 1 (pow.f64 x 2))) (pow.f64 x 2))) (*.f64 -1 (log.f64 x))))","(+.f64 1 (fma.f64 -1/2 (*.f64 (*.f64 x x) (+.f64 1 (/.f64 1 (*.f64 x x)))) (neg.f64 (log.f64 x))))","(+.f64 1 (-.f64 (*.f64 -1/2 (*.f64 x (*.f64 x (+.f64 1 (/.f64 1 (*.f64 x x)))))) (log.f64 x)))","(-.f64 (fma.f64 -1/2 (+.f64 1 (*.f64 x x)) 1) (log.f64 x))","(-.f64 (fma.f64 -1/2 (fma.f64 x x 1) 1) (log.f64 x))","(+.f64 (*.f64 1/6 (*.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 3))) (*.f64 3 (/.f64 1 x))) (pow.f64 x 3))) (+.f64 1 (+.f64 (*.f64 -1/2 (*.f64 (+.f64 1 (/.f64 1 (pow.f64 x 2))) (pow.f64 x 2))) (*.f64 -1 (log.f64 x)))))","(fma.f64 1/6 (*.f64 (pow.f64 x 3) (+.f64 (/.f64 2 (pow.f64 x 3)) (/.f64 3 x))) (+.f64 1 (fma.f64 -1/2 (*.f64 (*.f64 x x) (+.f64 1 (/.f64 1 (*.f64 x x)))) (neg.f64 (log.f64 x)))))","(fma.f64 1/6 (*.f64 (pow.f64 x 3) (+.f64 (/.f64 2 (pow.f64 x 3)) (/.f64 3 x))) (+.f64 1 (-.f64 (*.f64 -1/2 (*.f64 x (*.f64 x (+.f64 1 (/.f64 1 (*.f64 x x)))))) (log.f64 x))))","(-.f64 (fma.f64 (pow.f64 x 3) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 1/2 x)) (fma.f64 -1/2 (+.f64 1 (*.f64 x x)) 1)) (log.f64 x))","(-.f64 (fma.f64 -1/2 (fma.f64 x x 1) (+.f64 (*.f64 (pow.f64 x 3) (/.f64 1/2 x)) 4/3)) (log.f64 x))","(-.f64 (fma.f64 -1/2 (fma.f64 x x 1) (+.f64 (*.f64 (*.f64 x x) 1/2) 4/3)) (log.f64 x))"]],"stop":[["node limit",1]],"time":31.157958984375,"type":"simplify"},{"compiler":[[4021,2750]],"time":51.71484375,"type":"eval"},{"alts":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","done",0]],"compiler":[[17,12]],"count":[[187,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[186,0],"picked":[1,1]}],"min-error":[0],"time":51.4521484375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))",0,1],["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))",0,1]],"compiler":[[2,1],[14,10],[13,9],[30,20]],"count":[[2,1]],"inputs":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))","(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"link":["."],"name":["Hyperbolic arc-(co)secant"],"oracle":[0.00390625],"outputs":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"time":9.2978515625,"times":[["x",2.492919921875],["(log.f64 (+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))",2.93798828125],["(+.f64 (/.f64 1 x) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x))",3.113037109375]],"type":"regimes"},{"compiler":[[17,12]],"egraph":[[4,31,24,0.000179292],[3,29,24,0.000140875],[2,25,24,0.000102583],[1,18,24,6.4958e-5],[0,11,24,3.2417e-5]],"inputs":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) x)))"]],"stop":[["done",1],["saturated",1]],"time":8.6591796875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[17,12]],"remove-preprocessing":[[]],"time":10.650146484375,"type":"end"}]
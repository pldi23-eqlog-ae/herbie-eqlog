[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.2866890099496686,0.21647945649260691,0.49683153355772447],[11,0.24573343709971596,0.2613355600901741,0.49293100281010993],[10,0.2106286603711851,0.30424139831393404,0.48512994131488085],[9,0.1404191069141234,0.37445095177099574,0.48512994131488085],[8,0.09361273794274894,0.43685944373282837,0.4695278183244227],[7,0.062408491961832624,0.499267935694661,0.4383235723435064],[6,0.0,0.5616764276564936,0.4383235723435064],[5,0.0,0.6240849196183262,0.37591508038167376],[4,0.0,0.7489019035419915,0.2510980964580085],[3,0.0,0.7489019035419915,0.2510980964580085],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":55.10498046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",5.006591796875,109],["body",256,"valid",431.257568359375,8256]],"time":444.701904296875,"type":"sample"},{"compiler":[[11,7]],"egraph":[[0,3,3,2.292e-6],[18,7474,48,0.161788667],[17,7474,48,0.149549292],[16,7462,48,0.138267917],[15,7444,48,0.126957],[14,7420,48,0.11506762499999998],[13,7196,48,0.10425320799999999],[12,6886,48,0.09420145799999999],[11,6865,48,0.08012691599999999],[10,6781,48,0.07047833299999999],[9,6651,48,0.061945957999999995],[8,5641,48,0.04924724999999999],[7,4590,48,0.036209082999999996],[6,2561,48,0.026710374],[5,1261,48,0.014315623999999999],[4,551,48,0.0051901659999999995],[3,264,48,0.0016879999999999998],[2,112,48,0.0006780829999999999],[1,46,48,0.000260833],[0,19,48,8.1375e-5]],"inputs":[["0","1","2"],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(-.f64 (-.f64 (*.f64 y (log.f64 x)) z) x)","(-.f64 (-.f64 (*.f64 z (log.f64 y)) x) y)","(-.f64 (-.f64 (*.f64 x (log.f64 z)) y) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(-.f64 (*.f64 x (log.f64 y)) (+.f64 z y))","(-.f64 (*.f64 x (log.f64 y)) (+.f64 y z))","(-.f64 (-.f64 (*.f64 y (log.f64 x)) z) x)","(-.f64 (*.f64 y (log.f64 x)) (+.f64 z x))","(-.f64 (*.f64 y (log.f64 x)) (+.f64 x z))","(fma.f64 y (log.f64 x) (-.f64 (neg.f64 z) x))","(-.f64 (-.f64 (*.f64 z (log.f64 y)) x) y)","(-.f64 (fma.f64 z (log.f64 y) (neg.f64 x)) y)","(-.f64 (*.f64 (log.f64 y) z) (+.f64 x y))","(-.f64 (fma.f64 (log.f64 y) z (neg.f64 y)) x)","(fma.f64 (log.f64 y) z (-.f64 (neg.f64 y) x))","(-.f64 (-.f64 (*.f64 x (log.f64 z)) y) z)","(-.f64 (*.f64 x (log.f64 z)) (+.f64 y z))","(-.f64 (fma.f64 x (log.f64 z) (neg.f64 y)) z)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":190.39111328125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[20,5938,12,0.12564224999999998],[19,5938,12,0.11336062499999999],[18,5930,12,0.103607959],[17,5918,12,0.093880417],[16,5894,12,0.08407237499999999],[15,5735,12,0.07489620799999999],[14,5533,12,0.066895708],[13,5529,12,0.058467167],[12,5495,12,0.052071958],[11,5376,12,0.045814208],[10,5019,12,0.038448375],[9,4287,12,0.029437458],[8,2644,12,0.020921375],[7,1289,12,0.011237667],[6,539,12,0.005541417],[5,331,12,0.0027840420000000005],[4,168,12,0.0013097920000000002],[3,82,12,0.000587417],[2,36,12,0.000265625],[1,16,12,0.000114917],[0,8,12,4.25e-5]],"inputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(-.f64 (*.f64 x (log.f64 y)) (+.f64 z y))","(fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))","(-.f64 (*.f64 x (log.f64 y)) (+.f64 y z))"]],"stop":[["node limit",1]],"time":137.947021484375,"type":"simplify"},{"compiler":[[19,9]],"time":0.340087890625,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","next",0.0859375]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.0859375],"time":0.82080078125,"type":"prune"},{"compiler":[[26,7]],"locations":[["(-.f64 (*.f64 x (log.f64 y)) z)",0.0078125,true],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)",0.0078125,true],["(*.f64 x (log.f64 y))",0.27734375,true]],"time":6.277099609375,"type":"localize"},{"count":[[3,96]],"series":[["(-.f64 (*.f64 x (log.f64 y)) z)","z","-inf",0.165771484375],["(-.f64 (*.f64 x (log.f64 y)) z)","z","inf",0.154052734375],["(-.f64 (*.f64 x (log.f64 y)) z)","z","0",0.152099609375],["(-.f64 (*.f64 x (log.f64 y)) z)","y","-inf",0.181884765625],["(-.f64 (*.f64 x (log.f64 y)) z)","y","inf",0.158935546875],["(-.f64 (*.f64 x (log.f64 y)) z)","y","0",0.154052734375],["(-.f64 (*.f64 x (log.f64 y)) z)","x","-inf",0.152099609375],["(-.f64 (*.f64 x (log.f64 y)) z)","x","inf",0.156005859375],["(-.f64 (*.f64 x (log.f64 y)) z)","x","0",0.18017578125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","z","-inf",0.18896484375],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","z","inf",0.26806640625],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","z","0",1.059814453125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","y","-inf",0.2119140625],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","y","inf",0.2451171875],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","y","0",0.18408203125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","x","-inf",0.1689453125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","x","inf",0.197021484375],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","x","0",0.202880859375],["(*.f64 x (log.f64 y))","y","-inf",6.654052734375],["(*.f64 x (log.f64 y))","y","inf",4.2490234375],["(*.f64 x (log.f64 y))","y","0",10.5498046875],["(*.f64 x (log.f64 y))","x","-inf",0.2890625],["(*.f64 x (log.f64 y))","x","inf",0.329833984375],["(*.f64 x (log.f64 y))","x","0",17.699951171875]],"time":44.264892578125,"type":"series"},{"count":[[3,290]],"egraph":[[2,2641,27,0.024364790999999997],[1,180,27,0.003362208],[0,8,27,0.000194917]],"inputs":[["(*.f64 x (log.f64 y))","(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(-.f64 (*.f64 x (log.f64 y)) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y x)) 2)) (log.f64 (cbrt.f64 (pow.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y x))) (log.f64 (sqrt.f64 (pow.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x (log.f64 y)))) 2)) (cbrt.f64 (log.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x (log.f64 y))))) (sqrt.f64 (log.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 y x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (log.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (log.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 x (log.f64 y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (log.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (log.f64 y))) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (log.f64 y)) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (log.f64 y)) z) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 y x) (exp.f64 (+.f64 y z)))) 2)) (log.f64 (cbrt.f64 (/.f64 (pow.f64 y x) (exp.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (pow.f64 y x) (exp.f64 (+.f64 y z))))) (log.f64 (sqrt.f64 (/.f64 (pow.f64 y x) (exp.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y)) (/.f64 1 (fma.f64 x (log.f64 y) (fma.f64 -1 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2)) (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3)) (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y)) (fma.f64 x (log.f64 y) (fma.f64 -1 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3))) (neg.f64 (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y))) (neg.f64 (fma.f64 x (log.f64 y) (fma.f64 -1 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 (+.f64 y z) 3)) (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (+.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (*.f64 x (log.f64 y)) (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 (neg.f64 y) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (-.f64 (pow.f64 (neg.f64 y) 2) (*.f64 (-.f64 (*.f64 x (log.f64 y)) z) (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (+.f64 y z) 2)) (fma.f64 x (log.f64 y) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (pow.f64 (neg.f64 y) 2)) (-.f64 (-.f64 (*.f64 x (log.f64 y)) z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2)) (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))) 2)) (cbrt.f64 (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))) (sqrt.f64 (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y x) (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 (pow.f64 y x) 1)) (exp.f64 (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (log.f64 y)) z))) (exp.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (/.f64 (pow.f64 y x) (exp.f64 z)) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (log.f64 y)) z))) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (log.f64 y)) z))) (exp.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 y)) (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (log.f64 y)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (log.f64 y)) z) 1 (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (log.f64 y)) z) 1 (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1 (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1 (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) 1 (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (log.f64 y)) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (log.f64 y)) z) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z))) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 y) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) 2) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (cbrt.f64 (*.f64 x (log.f64 y))) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (cbrt.f64 (*.f64 x (log.f64 y))) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (cbrt.f64 (*.f64 x (log.f64 y))) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (neg.f64 (cbrt.f64 y)) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (sqrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 y z)))) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (log.f64 y)) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (log.f64 y)) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (neg.f64 (sqrt.f64 y)) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) x) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) x) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) x) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2))) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2))) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2))) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (fma.f64 x (log.f64 y) (fma.f64 -1 z y)) (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2))) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y)) (/.f64 1 (fma.f64 x (log.f64 y) (fma.f64 -1 z y))) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y)) (/.f64 1 (fma.f64 x (log.f64 y) (fma.f64 -1 z y))) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) (*.f64 y y)) (/.f64 1 (fma.f64 x (log.f64 y) (fma.f64 -1 z y))) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 y)) 2) (cbrt.f64 (neg.f64 y)) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 y)) (sqrt.f64 (neg.f64 y)) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 y)) (sqrt.f64 y) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 y (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 y)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 y)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 z)) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 y)) (+.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 (-.f64 z (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (-.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (-.f64 z (neg.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (log.f64 y)) z) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (log.f64 y)) z) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (log.f64 y)) z) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 y x) (exp.f64 z))) 2)) (log.f64 (cbrt.f64 (/.f64 (pow.f64 y x) (exp.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (pow.f64 y x) (exp.f64 z)))) (log.f64 (sqrt.f64 (/.f64 (pow.f64 y x) (exp.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x (log.f64 y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x (log.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 y)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2)) (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (log.f64 y) z) (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (fma.f64 x (log.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3))) (neg.f64 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z))) (neg.f64 (fma.f64 x (log.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 (neg.f64 z) 3)) (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (-.f64 (pow.f64 (neg.f64 z) 2) (*.f64 (*.f64 x (log.f64 y)) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (pow.f64 (neg.f64 z) 2)) (-.f64 (*.f64 x (log.f64 y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (-.f64 (*.f64 x (log.f64 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2)) (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (log.f64 y) z) (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z))) 2)) (cbrt.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z)))) (sqrt.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y x) (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (log.f64 y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 (pow.f64 y x) 1)) (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y x) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 (pow.f64 y x) 1)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 y x) 1)) (exp.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 z)) (+.f64 1 (-.f64 (pow.f64 y x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x (log.f64 y)) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x (log.f64 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x (log.f64 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (log.f64 y)) z) 1 (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (log.f64 y)) z) 1 (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (log.f64 y)) z) 1 (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (log.f64 y)) z) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (log.f64 y)) z) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (log.f64 y)) z) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (cbrt.f64 (*.f64 x (log.f64 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 2) (cbrt.f64 (*.f64 x (log.f64 y))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (neg.f64 (cbrt.f64 z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) 2) (cbrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 (*.f64 x (log.f64 y))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (log.f64 y)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (neg.f64 (sqrt.f64 z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (sqrt.f64 (-.f64 (*.f64 x (log.f64 y)) z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) x) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2))) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (fma.f64 x (log.f64 y) z) (pow.f64 (*.f64 x (log.f64 y)) 2))) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 z)) 2) (cbrt.f64 (neg.f64 z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 z)) (sqrt.f64 (neg.f64 z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 y)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 y)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 y)) (sqrt.f64 z)) (-.f64 (sqrt.f64 (*.f64 x (log.f64 y))) (sqrt.f64 z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (neg.f64 z) 1))))))"]],"rules":[["egg-rr",115],["egg-rr",150],["egg-rr",25]],"stop":[["node limit",1]],"time":60.758056640625,"type":"rewrite"},{"count":[[386,310]],"egraph":[[20,7724,813,0.168160875],[19,7504,813,0.155497208],[18,7352,813,0.140240125],[17,7134,813,0.128954833],[16,7114,813,0.119500416],[15,7080,813,0.113555458],[14,7024,813,0.107686541],[13,6698,813,0.09966866599999999],[12,5540,813,0.08905566599999999],[11,5352,813,0.075718207],[10,5350,813,0.063491332],[9,5336,813,0.053310166],[8,5273,813,0.044709],[7,5054,813,0.034611958],[6,4450,813,0.026361542],[5,2391,813,0.017451167],[4,1126,813,0.008839209],[3,476,813,0.0036379589999999996],[2,183,813,0.001511042],[1,93,813,0.000633875],[0,35,813,0.00021225]],"inputs":[["(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 -1 (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 y) x) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (+.f64 y z))","(neg.f64 (+.f64 y z))","(-.f64 (neg.f64 y) z)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (*.f64 (log.f64 y) x) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (-.f64 (*.f64 (log.f64 y) x) y) z)","(-.f64 (*.f64 (log.f64 y) x) (+.f64 y z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)"]],"stop":[["node limit",1]],"time":225.448974609375,"type":"simplify"},{"compiler":[[4993,1477]],"time":44.093994140625,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 z)) y)","fresh",0.30440015861039993],["(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3) z) y)","fresh",0.2959938965266302],["(fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (neg.f64 y))","fresh",29.4900708126825],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","next",0.26960761722130416],["(-.f64 (fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 z)) y)","fresh",0.30668516837884197],["(-.f64 (fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (neg.f64 z)) y)","fresh",32.54982377930533],["(-.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","fresh",0.2872239258319563]],"compiler":[[17,11],[14,10],[23,14],[11,7],[18,11],[17,11],[16,9],[18,11],[17,11],[14,10],[23,14],[18,11],[17,11],[16,9],[18,11]],"count":[[311,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[310,7],"picked":[1,1]}],"min-error":[0.00390625],"time":119.01806640625,"type":"prune"},{"compiler":[[52,17]],"locations":[["(cbrt.f64 (log.f64 y))",0.12109375,true],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))",0.13671875,true],["(*.f64 (cbrt.f64 (log.f64 y)) x)",0.28125,true],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)",0.4921875,true]],"time":12.155029296875,"type":"localize"},{"count":[[4,84]],"series":[["(cbrt.f64 (log.f64 y))","y","-inf",0.156982421875],["(cbrt.f64 (log.f64 y))","y","inf",0.1650390625],["(cbrt.f64 (log.f64 y))","y","0",0.135986328125],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","z","-inf",0.173828125],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","z","inf",0.195068359375],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","z","0",0.861083984375],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","x","-inf",0.2841796875],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","x","inf",0.258056640625],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","x","0",0.591796875],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","y","-inf",0.4580078125],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","y","inf",0.43017578125],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","y","0",0.385986328125],["(*.f64 (cbrt.f64 (log.f64 y)) x)","x","-inf",0.31298828125],["(*.f64 (cbrt.f64 (log.f64 y)) x)","x","inf",0.385986328125],["(*.f64 (cbrt.f64 (log.f64 y)) x)","x","0",1.137939453125],["(*.f64 (cbrt.f64 (log.f64 y)) x)","y","-inf",1.072021484375],["(*.f64 (cbrt.f64 (log.f64 y)) x)","y","inf",1.078857421875],["(*.f64 (cbrt.f64 (log.f64 y)) x)","y","0",1.049072265625],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","y","-inf",1.22412109375],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","y","inf",1.2529296875],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","y","0",1.60595703125]],"time":13.544921875,"type":"series"},{"count":[[4,72]],"egraph":[[2,2509,30,0.020798001],[1,220,30,0.0036107920000000003],[0,11,42,0.000282375]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z))","(cbrt.f64 (log.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (log.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 1/6) (*.f64 (pow.f64 (log.f64 y) 1/6) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (log.f64 y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cbrt.f64 (log.f64 y)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cbrt.f64 (log.f64 y)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (log.f64 y) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 (log.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cbrt.f64 (log.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cbrt.f64 (log.f64 y)) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 y) x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (log.f64 y) x) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 z (*.f64 (log.f64 y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (log.f64 y) x) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z (*.f64 (log.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 z (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z (*.f64 (log.f64 y) x))) (pow.f64 (cbrt.f64 (+.f64 z (*.f64 (log.f64 y) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 z (*.f64 (log.f64 y) x))) 2) (cbrt.f64 (+.f64 z (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 z (*.f64 (log.f64 y) x))) (sqrt.f64 (+.f64 z (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 (log.f64 y) x) (*.f64 (log.f64 y) x)) (-.f64 (*.f64 z z) (*.f64 (*.f64 (log.f64 y) x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (log.f64 y) x) (*.f64 (log.f64 y) x)) (*.f64 z z)) (+.f64 z (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 z (*.f64 (log.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 z (*.f64 (log.f64 y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 z (*.f64 (log.f64 y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 z (*.f64 (log.f64 y) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 z (*.f64 (log.f64 y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 z (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 z (*.f64 (log.f64 y) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 z (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 z (*.f64 (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 z (*.f64 (log.f64 y) x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 1/6) (pow.f64 (log.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (log.f64 y)) 1/3) (pow.f64 (sqrt.f64 (log.f64 y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (log.f64 y))))))))"]],"rules":[["egg-rr",20],["egg-rr",23],["egg-rr",13],["egg-rr",16]],"stop":[["node limit",1]],"time":46.116943359375,"type":"rewrite"},{"count":[[156,93]],"egraph":[[5,6353,733,0.030599125999999997],[4,3012,733,0.016794167],[3,822,733,0.007149583],[2,302,733,0.002490292],[1,154,733,0.000974042],[0,52,741,0.000315333]],"inputs":[["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 -1) (*.f64 x (cbrt.f64 (neg.f64 (log.f64 y)))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 -1) (*.f64 x (cbrt.f64 (neg.f64 (log.f64 y)))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 -1) (*.f64 x (cbrt.f64 (neg.f64 (log.f64 y)))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 -1) (*.f64 x (cbrt.f64 (neg.f64 (log.f64 y)))))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 x (cbrt.f64 (log.f64 y)))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (log.f64 y) x) z)","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))"]],"stop":[["node limit",1]],"time":59.009033203125,"type":"simplify"},{"compiler":[[2018,813]],"time":18.38916015625,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","fresh",0.4646166095216071],["(-.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 z)) y)","fresh",0.30440015861039993],["(fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (neg.f64 y))","fresh",29.4900708126825],["(-.f64 (fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 z)) y)","fresh",0.30668516837884197],["(-.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4))) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","fresh",0.29334517814728406],["(-.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","next",0.2872239258319563]],"compiler":[[11,7],[21,14],[17,11],[23,14],[17,11],[26,16],[18,11],[21,14],[17,11],[23,14],[17,11],[26,16],[18,11]],"count":[[125,7]],"kept":[{"done":[1,1],"fresh":[6,4],"new":[117,2],"picked":[1,0]}],"min-error":[0.00390625],"time":29.161865234375,"type":"prune"},{"compiler":[[54,21]],"locations":[["(cbrt.f64 (log.f64 y))",0.12109375,false],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))",0.1953125,true],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))",0.24609375,true],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)",0.4921875,false]],"time":13.425048828125,"type":"localize"},{"count":[[2,60]],"series":[["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","z","-inf",0.18408203125],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","z","inf",0.171875],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","z","0",0.632080078125],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","y","-inf",0.324951171875],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","y","inf",0.367919921875],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","y","0",0.30615234375],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","x","-inf",0.2451171875],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","x","inf",0.23095703125],["(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))","x","0",0.280029296875],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))","y","-inf",1.445068359375],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))","y","inf",1.14208984375],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))","y","0",1.156005859375],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))","x","-inf",0.328125],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))","x","inf",0.27490234375],["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))","x","0",1.7451171875]],"time":9.052001953125,"type":"series"},{"count":[[2,36]],"egraph":[[2,2509,20,0.020590249999999997],[1,220,20,0.003633209],[0,11,32,0.000266042]],"inputs":[["(*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))","(fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) (pow.f64 (cbrt.f64 (log.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 y)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 z (*.f64 x (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (log.f64 y)) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z (*.f64 x (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 2) (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) (sqrt.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 y)) (*.f64 x (log.f64 y))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (log.f64 y)) (*.f64 x (log.f64 y))) (*.f64 z z)) (+.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 z (*.f64 x (log.f64 y)))))))))"]],"rules":[["egg-rr",23],["egg-rr",13]],"stop":[["node limit",1]],"time":40.9130859375,"type":"rewrite"},{"count":[[96,50]],"egraph":[[5,4937,581,0.026415167000000003],[4,2070,581,0.012925833000000001],[3,633,589,0.005236875],[2,239,589,0.001811125],[1,116,589,0.000723291],[0,42,688,0.000261125]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 1 (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 1 (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))) (neg.f64 z))","(-.f64 (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 y) (neg.f64 x))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))) (neg.f64 z))","(-.f64 (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 y) (neg.f64 x))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))) (neg.f64 z))","(-.f64 (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 y) (neg.f64 x))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 x (neg.f64 (log.f64 y))) (neg.f64 z))","(-.f64 (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 y) (neg.f64 x))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 1 (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)"]],"stop":[["node limit",1]],"time":46.472900390625,"type":"simplify"},{"compiler":[[2014,864]],"time":19.30810546875,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","fresh",0.4646166095216071],["(-.f64 (fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","next",0.16310502930532605],["(-.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 z)) y)","fresh",0.30440015861039993],["(-.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 3) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","fresh",0.32651647930482186],["(-.f64 (fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 z)) y)","fresh",0.30668516837884197],["(-.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4))) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","fresh",0.29334517814728406]],"compiler":[[11,7],[21,14],[18,12],[17,11],[21,14],[17,11],[26,16],[21,14],[18,12],[17,11],[21,14],[17,11],[26,16]],"count":[[125,7]],"kept":[{"done":[1,1],"fresh":[5,4],"new":[118,2],"picked":[1,0]}],"min-error":[0],"time":30.98779296875,"type":"prune"},{"compiler":[[58,27]],"locations":[["(cbrt.f64 (log.f64 y))",0.12109375,false],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))",0.1953125,true],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))",0.24609375,true],["(pow.f64 (log.f64 y) 2)",0.565448779305326,true]],"time":15.901123046875,"type":"localize"},{"count":[[3,68]],"series":[["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","z","-inf",0.197021484375],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","z","inf",0.173095703125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","z","0",0.552001953125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","y","-inf",0.288818359375],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","y","inf",0.2890625],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","y","0",0.240966796875],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","x","-inf",0.241943359375],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","x","inf",0.215087890625],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))","x","0",0.27294921875],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","-inf",1.1220703125],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","inf",1.06298828125],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","y","0",0.93701171875],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","-inf",0.260986328125],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","inf",0.242919921875],["(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","x","0",1.14208984375],["(pow.f64 (log.f64 y) 2)","y","-inf",0.198974609375],["(pow.f64 (log.f64 y) 2)","y","inf",0.15380859375],["(pow.f64 (log.f64 y) 2)","y","0",0.215087890625]],"time":8.070068359375,"type":"series"},{"count":[[3,54]],"egraph":[[2,2705,26,0.022153541],[1,237,26,0.003851333],[0,12,38,0.000292333]],"inputs":[["(pow.f64 (log.f64 y) 2)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (log.f64 y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (cbrt.f64 (pow.f64 (log.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) 1) (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (cbrt.f64 (log.f64 y))) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (log.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 (pow.f64 (log.f64 y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 y)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 z (*.f64 x (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (log.f64 y)) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z (*.f64 x (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) (pow.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 2) (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) (sqrt.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 y)) (*.f64 x (log.f64 y))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (log.f64 y)) (*.f64 x (log.f64 y))) (*.f64 z z)) (+.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 z (*.f64 x (log.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 z (*.f64 x (log.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 z (*.f64 x (log.f64 y)))))))))"]],"rules":[["egg-rr",23],["egg-rr",13],["egg-rr",18]],"stop":[["node limit",1]],"time":45.282958984375,"type":"rewrite"},{"count":[[122,71]],"egraph":[[5,4947,629,0.027028542],[4,2062,629,0.012870959],[3,632,637,0.005273709],[2,239,637,0.001839584],[1,116,637,0.000745751],[0,42,752,0.000266667]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","(*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 1 (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 1 (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x) (neg.f64 z))","(-.f64 (*.f64 (neg.f64 (log.f64 y)) (*.f64 x (cbrt.f64 -1))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(neg.f64 (fma.f64 (log.f64 y) (*.f64 x (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x) (neg.f64 z))","(-.f64 (*.f64 (neg.f64 (log.f64 y)) (*.f64 x (cbrt.f64 -1))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(neg.f64 (fma.f64 (log.f64 y) (*.f64 x (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x) (neg.f64 z))","(-.f64 (*.f64 (neg.f64 (log.f64 y)) (*.f64 x (cbrt.f64 -1))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(neg.f64 (fma.f64 (log.f64 y) (*.f64 x (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (*.f64 1 (*.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x))) z)","(fma.f64 (cbrt.f64 -1) (*.f64 (neg.f64 (log.f64 y)) x) (neg.f64 z))","(-.f64 (*.f64 (neg.f64 (log.f64 y)) (*.f64 x (cbrt.f64 -1))) z)","(-.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 -1) (neg.f64 x))) z)","(neg.f64 (fma.f64 x (*.f64 (log.f64 y) (cbrt.f64 -1)) z))","(neg.f64 (fma.f64 (log.f64 y) (*.f64 x (cbrt.f64 -1)) z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)) z)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 1 (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) x)) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))"]],"stop":[["node limit",1]],"time":48.880859375,"type":"simplify"},{"compiler":[[1576,713]],"time":17.127197265625,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","done",0.16310502930532605],["(-.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 z)) y)","fresh",0.30440015861039993],["(-.f64 (fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) (neg.f64 z)) y)","fresh",0.31095512698974626],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (fma.f64 (*.f64 x (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","fresh",0.19273378907376806],["(-.f64 (fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 z)) y)","fresh",0.30668516837884197],["(-.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4))) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","fresh",0.29334517814728406]],"compiler":[[18,12],[17,11],[21,15],[11,7],[33,22],[17,11],[26,16]],"count":[[102,7]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[95,2],"picked":[1,1]}],"min-error":[0],"time":26.010009765625,"type":"prune"},{"accuracy":[0.0859375],"baseline":[0.0859375],"branch":[["x",0.0859375,1],["y",0.0859375,1],["z",0.0859375,1],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)",0.0859375,1]],"compiler":[[4,3],[4,3],[4,3],[11,7],[235,101]],"count":[[14,1]],"inputs":[["(-.f64 (fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) (neg.f64 z)) y)","(-.f64 (fma.f64 (*.f64 x (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","(-.f64 (fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2))) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","(-.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 3) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","(-.f64 (fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","(-.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4))) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","(-.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (log.f64 y)) (neg.f64 z)) y)","(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3) z) y)","(fma.f64 (-.f64 (pow.f64 (*.f64 x (log.f64 y)) 2) (*.f64 z z)) (/.f64 1 (fma.f64 x (log.f64 y) z)) (neg.f64 y))","(-.f64 (fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) x) (neg.f64 z)) y)","(-.f64 (fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 z)) y)","(-.f64 (fma.f64 (*.f64 x (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (neg.f64 z)) y)","(-.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 z)) y)","(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"link":["."],"name":["Statistics.Distribution.Poisson:$clogProbability from math-functions-0.1.5.2"],"oracle":[46.81611254884221],"outputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"time":30.385986328125,"times":[["x",6.52001953125],["y",7.132080078125],["z",6.428955078125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)",6.251953125]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[4,27,12,0.000136334],[3,25,12,0.00010654200000000001],[2,21,12,7.595900000000001e-5],[1,13,12,4.8792e-5],[0,8,12,2.0417e-5]],"inputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"stop":[["fuel",1],["saturated",1]],"time":8.794921875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":9.56298828125,"type":"end"}]
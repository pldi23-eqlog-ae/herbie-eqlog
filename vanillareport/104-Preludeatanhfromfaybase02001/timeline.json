[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.9980475902557373,0.0014641284942626953,0.00048828125],[11,0.9965834617614746,0.0029282569885253906,0.00048828125],[10,0.9936552047729492,0.005856513977050781,0.00048828125],[9,0.9877986907958984,0.011713027954101563,0.00048828125],[8,0.9760856628417969,0.023426055908203125,0.00048828125],[7,0.9526596069335938,0.04685211181640625,0.00048828125],[6,0.9058074951171875,0.0937042236328125,0.00048828125],[5,0.812103271484375,0.187408447265625,0.00048828125],[4,0.62469482421875,0.37481689453125,0.00048828125],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.795166015625,"type":"analyze"},{"outcomes":[["body",256,"valid",236.598876953125,8256]],"time":244.4248046875,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.75e-6],[19,3098,10,0.032899000000000005],[18,2962,10,0.028048042000000006],[17,2779,10,0.022434417000000005],[16,2237,10,0.017787292000000003],[15,1557,10,0.012773959000000001],[14,725,10,0.008584667],[13,423,10,0.005190417],[12,292,10,0.003525167],[11,200,10,0.002505292],[10,158,10,0.0018361249999999999],[9,122,10,0.0013885829999999999],[8,88,10,0.0010843749999999998],[7,69,10,0.000828],[6,52,10,0.000612792],[5,39,10,0.00044324999999999996],[4,29,10,0.000304958],[3,21,10,0.000210708],[2,15,10,0.000134042],[1,11,10,8.083299999999999e-5],[0,6,10,4.2708e-5]],"inputs":[["0"],["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":55.426025390625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[19,3098,10,0.032631416999999996],[18,2962,10,0.027829501],[17,2779,10,0.022278501],[16,2237,10,0.017616583999999998],[15,1557,10,0.012647084],[14,725,10,0.008516043],[13,423,10,0.005146293],[12,292,10,0.003481126],[11,200,10,0.002471834],[10,158,10,0.0018113340000000002],[9,122,10,0.0013662090000000002],[8,88,10,0.001065001],[7,69,10,0.0008155840000000001],[6,52,10,0.000600251],[5,39,10,0.000433751],[4,29,10,0.000296834],[3,21,10,0.000203251],[2,15,10,0.000127042],[1,11,10,7.6167e-5],[0,6,10,3.9417e-5]],"inputs":[["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"stop":[["saturated",1]],"time":43.5400390625,"type":"simplify"},{"compiler":[[8,6]],"time":0.237060546875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x 1) (-.f64 1 x))","next",0.01171875]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.68505859375,"type":"prune"},{"compiler":[[16,11]],"locations":[["(/.f64 (+.f64 x 1) (-.f64 1 x))",0.01171875,true]],"time":4.369873046875,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (+.f64 x 1) (-.f64 1 x))","x","-inf",0.222900390625],["(/.f64 (+.f64 x 1) (-.f64 1 x))","x","inf",0.317138671875],["(/.f64 (+.f64 x 1) (-.f64 1 x))","x","0",0.31201171875]],"time":0.902099609375,"type":"series"},{"count":[[1,33]],"egraph":[[2,1971,10,0.019419292],[1,137,10,0.002509501],[0,6,10,0.000186584]],"inputs":[["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (+.f64 x 1) (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x 1) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 1) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) 2) (cbrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 (+.f64 x 1)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) (sqrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 1)) (*.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x 1)) (/.f64 1 (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) 1) (/.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 1)) 1) (/.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (/.f64 (+.f64 x 1) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (cbrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (/.f64 (sqrt.f64 (+.f64 x 1)) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (-.f64 1 x))) (/.f64 (+.f64 x 1) (sqrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (sqrt.f64 (-.f64 1 x))) (/.f64 (cbrt.f64 (+.f64 x 1)) (sqrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 1) (-.f64 1 (pow.f64 x 3))) (+.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) (+.f64 x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x 1) (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 (-.f64 1 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":37.218017578125,"type":"rewrite"},{"count":[[45,47]],"egraph":[[4,2725,122,0.017698958],[3,859,126,0.006419083],[2,268,129,0.0020295],[1,91,135,0.000634541],[0,29,147,0.000165833]],"inputs":[["1","(+.f64 (*.f64 2 x) 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 2 x) 1)","(fma.f64 2 x 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(fma.f64 2 (*.f64 x x) (fma.f64 2 x 1))","(fma.f64 2 (fma.f64 x x x) 1)","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","(fma.f64 2 (pow.f64 x 3) (fma.f64 2 (*.f64 x x) (fma.f64 2 x 1)))","(fma.f64 2 (pow.f64 x 3) (fma.f64 2 (fma.f64 x x x) 1))","(fma.f64 2 (fma.f64 x (fma.f64 x x x) x) 1)","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (/.f64 2 x)))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(+.f64 -1 (neg.f64 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x)))))","(-.f64 -1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (/.f64 (/.f64 -2 x) x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3))))))","(-.f64 -1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3)))))","(-.f64 (/.f64 -2 x) (+.f64 (/.f64 (/.f64 2 x) x) (+.f64 1 (/.f64 2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (+.f64 (/.f64 (/.f64 -2 x) x) (/.f64 -2 (pow.f64 x 3)))))","(-.f64 (/.f64 -2 x) (fma.f64 (/.f64 (/.f64 1 x) x) (+.f64 2 (/.f64 2 x)) 1))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (/.f64 2 x)))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(+.f64 -1 (neg.f64 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x)))))","(-.f64 -1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (/.f64 (/.f64 -2 x) x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3))))))","(-.f64 -1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3)))))","(-.f64 (/.f64 -2 x) (+.f64 (/.f64 (/.f64 2 x) x) (+.f64 1 (/.f64 2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (+.f64 (/.f64 (/.f64 -2 x) x) (/.f64 -2 (pow.f64 x 3)))))","(-.f64 (/.f64 -2 x) (fma.f64 (/.f64 (/.f64 1 x) x) (+.f64 2 (/.f64 2 x)) 1))"]],"stop":[["node limit",1]],"time":30.702880859375,"type":"simplify"},{"compiler":[[563,443]],"time":8.2021484375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))","next",15.097314869703963],["(*.f64 (/.f64 1 (sqrt.f64 (-.f64 1 x))) (/.f64 (+.f64 x 1) (sqrt.f64 (-.f64 1 x))))","fresh",16.137088818379095],["(/.f64 (+.f64 x 1) (-.f64 1 x))","done",0.01171875]],"compiler":[[14,10],[16,13],[8,6],[14,10],[16,13]],"count":[[48,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[47,2],"picked":[1,1]}],"min-error":[0],"time":7.98095703125,"type":"prune"},{"compiler":[[36,20]],"locations":[["(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))",0.0703125,true],["(/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x)))",14.528598204259415,true]],"time":7.169921875,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))","x","-inf",0.18701171875],["(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))","x","inf",0.196044921875],["(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))","x","0",0.1748046875],["(/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x)))","x","-inf",0.212890625],["(/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x)))","x","inf",0.34912109375],["(/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x)))","x","0",0.263916015625]],"time":1.47314453125,"type":"series"},{"count":[[2,133]],"egraph":[[2,2826,17,0.024625708],[1,187,17,0.0035584999999999996],[0,8,32,0.000231375]],"inputs":[["(/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x)))","(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (-.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 1) (/.f64 1 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 1) (*.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (*.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 (+.f64 x 1)) (/.f64 1 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (-.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) -1/2) (*.f64 (pow.f64 (-.f64 1 x) -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 1)) (*.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1 x -1) (/.f64 1 (neg.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) 1) (/.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 1)) 1) (/.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) -2) (/.f64 (+.f64 x 1) (cbrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 2)) (/.f64 (sqrt.f64 (+.f64 x 1)) (cbrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (*.f64 x x)) -1/2) (sqrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (sqrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 (cbrt.f64 (+.f64 x 1)) (sqrt.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 1) (-.f64 1 (pow.f64 x 6))) (+.f64 1 (fma.f64 x x (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 1) (-.f64 1 (pow.f64 x 4))) (fma.f64 x x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 (-.f64 1 (*.f64 x x)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x 1) (neg.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 (-.f64 1 (*.f64 x x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (-.f64 1 x)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 x 1) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (-.f64 1 x)) 1) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (*.f64 x x)) (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x 1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 x 1) 2) (-.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 1 x) (-.f64 (fma.f64 x x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1) (*.f64 (-.f64 1 x) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 x 1) 2)) (neg.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) 1) (*.f64 (-.f64 (fma.f64 x x 1) x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) 1) (*.f64 (+.f64 x -1) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 x 1)) (*.f64 (-.f64 (fma.f64 x x 1) x) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (+.f64 x 1)) (*.f64 (+.f64 x -1) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (fma.f64 -1 x -1)) (*.f64 (-.f64 (fma.f64 x x 1) x) (neg.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (fma.f64 -1 x -1)) (*.f64 (+.f64 x -1) (neg.f64 (-.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x 1) (+.f64 1 (pow.f64 x 3))) (*.f64 (-.f64 1 (*.f64 x x)) (-.f64 (fma.f64 x x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1 x -1) (+.f64 1 (pow.f64 x 3))) (*.f64 (neg.f64 (-.f64 1 (*.f64 x x))) (-.f64 (fma.f64 x x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x 1) (fma.f64 x x -1)) (*.f64 (-.f64 1 (*.f64 x x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1 x -1) (fma.f64 x x -1)) (*.f64 (neg.f64 (-.f64 1 (*.f64 x x))) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1 x -1) (+.f64 x 1)) (neg.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x 1) (fma.f64 -1 x -1)) (neg.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 x (-.f64 1 x)) 3) (pow.f64 (-.f64 1 x) -3)) (+.f64 (pow.f64 (/.f64 x (-.f64 1 x)) 2) (-.f64 (pow.f64 (-.f64 1 x) -2) (*.f64 (/.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x (-.f64 1 x)) 2) (pow.f64 (-.f64 1 x) -2)) (-.f64 (/.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 x 1) 2) 1) (-.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 x 1) 2) (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 2)) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 x 1) 2) (sqrt.f64 (-.f64 1 (*.f64 x x)))) (sqrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (-.f64 1 x))) (-.f64 (fma.f64 x x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (/.f64 1 (-.f64 1 x))) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (fma.f64 x x -1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (*.f64 x x)) (pow.f64 (+.f64 x 1) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))) (exp.f64 (/.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 x (-.f64 1 x))) (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x 1) (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (-.f64 1 x)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) (/.f64 1 (-.f64 1 (*.f64 x x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) (*.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) (*.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) 1) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 x)) x (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 x)) 1 (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (*.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (*.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) 1) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 (+.f64 x 1)) (/.f64 1 (-.f64 1 (*.f64 x x)))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (-.f64 1 x) -1/2) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) -1/2) (*.f64 (pow.f64 (-.f64 1 x) -1/2) x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) -1/2) (*.f64 (pow.f64 (-.f64 1 x) -1/2) 1) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) (*.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 (-.f64 1 (*.f64 x x)))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1 x -1) (/.f64 1 (neg.f64 (-.f64 1 (*.f64 x x)))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) (+.f64 x 1) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (-.f64 1 x)) 1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x (-.f64 1 x))) 2) (cbrt.f64 (/.f64 x (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (-.f64 1 x))) (sqrt.f64 (/.f64 x (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) 1) (/.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 1 (*.f64 x x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 1)) 1) (/.f64 (sqrt.f64 (+.f64 x 1)) (-.f64 1 (*.f64 x x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) -2) (/.f64 (+.f64 x 1) (cbrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 x x))) 2)) (/.f64 (sqrt.f64 (+.f64 x 1)) (cbrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 (*.f64 x x)) -1/2) (sqrt.f64 (/.f64 (+.f64 x 1) (-.f64 1 x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (sqrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 (cbrt.f64 (+.f64 x 1)) (sqrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 x 1)) (/.f64 1 (-.f64 1 (*.f64 x x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 1) (-.f64 1 (pow.f64 x 6))) (+.f64 1 (fma.f64 x x (pow.f64 x 4))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 1) (-.f64 1 (pow.f64 x 4))) (fma.f64 x x 1) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 1 x) -1/2) (cbrt.f64 x)) 2) (cbrt.f64 x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (sqrt.f64 x)) (sqrt.f64 x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (/.f64 1 (cbrt.f64 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (-.f64 1 x) -1/2)) (pow.f64 (-.f64 1 x) -1/2) (/.f64 1 (-.f64 1 x)))))))"]],"rules":[["egg-rr",89],["egg-rr",44]],"stop":[["node limit",1]],"time":49.16796875,"type":"rewrite"},{"count":[[157,159]],"egraph":[[4,3943,290,0.021872041000000002],[3,1310,290,0.009739958],[2,429,293,0.003126333],[1,141,300,0.000928833],[0,46,330,0.000232125]],"inputs":[["1","(+.f64 1 x)","(+.f64 1 (+.f64 (pow.f64 x 2) x))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 3) x)))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","1","(+.f64 (*.f64 2 x) 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 x)","(+.f64 1 (+.f64 (pow.f64 x 2) x))","(+.f64 1 (+.f64 x (*.f64 x x)))","(+.f64 1 (fma.f64 x x x))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 3) x)))","(+.f64 1 (+.f64 (*.f64 x x) (+.f64 x (pow.f64 x 3))))","(+.f64 (*.f64 x (fma.f64 x x x)) (+.f64 1 x))","(+.f64 1 (fma.f64 x (fma.f64 x x x) x))","(*.f64 (+.f64 1 x) (fma.f64 x x 1))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 x)))","(+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 x))","(-.f64 (/.f64 -1 x) (/.f64 (/.f64 1 x) x))","(+.f64 (/.f64 (/.f64 -1 x) x) (/.f64 -1 x))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (-.f64 (/.f64 -1 x) (/.f64 (/.f64 1 x) x)) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 (/.f64 -1 x) x) (/.f64 -1 x)) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 -1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 3))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(neg.f64 (+.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (*.f64 x x))) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 3)))))","(+.f64 (+.f64 (-.f64 (/.f64 -1 x) (/.f64 (/.f64 1 x) x)) (/.f64 -1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (+.f64 (/.f64 (/.f64 -1 x) x) (/.f64 -1 x)) (+.f64 (/.f64 -1 (pow.f64 x 3)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 -1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 3)))) (/.f64 -1 (pow.f64 x 4)))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 x)))","(+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 x))","(-.f64 (/.f64 -1 x) (/.f64 (/.f64 1 x) x))","(+.f64 (/.f64 (/.f64 -1 x) x) (/.f64 -1 x))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (-.f64 (/.f64 -1 x) (/.f64 (/.f64 1 x) x)) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 (/.f64 -1 x) x) (/.f64 -1 x)) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 -1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 3))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(neg.f64 (+.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (*.f64 x x))) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 3)))))","(+.f64 (+.f64 (-.f64 (/.f64 -1 x) (/.f64 (/.f64 1 x) x)) (/.f64 -1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (+.f64 (/.f64 (/.f64 -1 x) x) (/.f64 -1 x)) (+.f64 (/.f64 -1 (pow.f64 x 3)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 -1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 3)))) (/.f64 -1 (pow.f64 x 4)))","1","(+.f64 (*.f64 2 x) 1)","(fma.f64 2 x 1)","(fma.f64 x 2 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(fma.f64 2 (*.f64 x x) (fma.f64 2 x 1))","(+.f64 1 (*.f64 2 (fma.f64 x x x)))","(fma.f64 2 (fma.f64 x x x) 1)","(fma.f64 x (fma.f64 x 2 2) 1)","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","(fma.f64 2 (pow.f64 x 3) (fma.f64 2 (*.f64 x x) (fma.f64 2 x 1)))","(+.f64 (fma.f64 x 2 1) (*.f64 2 (*.f64 x (fma.f64 x x x))))","(+.f64 1 (*.f64 2 (fma.f64 x (fma.f64 x x x) x)))","(fma.f64 2 (fma.f64 x (fma.f64 x x x) x) 1)","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (/.f64 2 x)))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x)))))","(-.f64 -1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x))))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (/.f64 (/.f64 -2 x) x))","(+.f64 -1 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3))))))","(-.f64 -1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (+.f64 (/.f64 (/.f64 -2 x) x) (/.f64 -2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 (/.f64 -2 x) x) (-.f64 (/.f64 -2 x) (/.f64 2 (pow.f64 x 3)))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (/.f64 2 x)))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x)))))","(-.f64 -1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x))))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (/.f64 (/.f64 -2 x) x))","(+.f64 -1 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3))))))","(-.f64 -1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (+.f64 (/.f64 (/.f64 -2 x) x) (/.f64 -2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 (/.f64 -2 x) x) (-.f64 (/.f64 -2 x) (/.f64 2 (pow.f64 x 3)))))"]],"stop":[["node limit",1]],"time":37.474853515625,"type":"simplify"},{"compiler":[[2509,1837]],"time":32.440185546875,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))","done",15.097314869703963],["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))","next",0.01953125],["(/.f64 (+.f64 x 1) (-.f64 1 x))","done",0.01171875]],"compiler":[[14,10],[15,12],[8,6],[15,12]],"count":[[162,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[159,1],"picked":[1,1]}],"min-error":[0],"time":42.08984375,"type":"prune"},{"compiler":[[55,41]],"locations":[["(exp.f64 (/.f64 1 (-.f64 1 x)))",0.0078125,true],["(/.f64 1 (-.f64 1 x))",0.01171875,true],["(*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x))))",0.015625,true],["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))",0.01953125,true]],"time":15.73193359375,"type":"localize"},{"count":[[4,48]],"series":[["(exp.f64 (/.f64 1 (-.f64 1 x)))","x","-inf",0.175048828125],["(exp.f64 (/.f64 1 (-.f64 1 x)))","x","inf",0.18994140625],["(exp.f64 (/.f64 1 (-.f64 1 x)))","x","0",0.2109375],["(/.f64 1 (-.f64 1 x))","x","-inf",0.175048828125],["(/.f64 1 (-.f64 1 x))","x","inf",0.5458984375],["(/.f64 1 (-.f64 1 x))","x","0",0.160888671875],["(*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x))))","x","-inf",0.22509765625],["(*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x))))","x","inf",0.27685546875],["(*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x))))","x","0",0.233154296875],["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))","x","-inf",0.7021484375],["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))","x","inf",0.77294921875],["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))","x","0",0.887939453125]],"time":4.7431640625,"type":"series"},{"count":[[4,214]],"egraph":[[2,2626,44,0.024391126000000003],[1,202,44,0.003575542],[0,10,50,0.000268959]],"inputs":[["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))","(*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x))))","(/.f64 1 (-.f64 1 x))","(exp.f64 (/.f64 1 (-.f64 1 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (-.f64 1 x)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 1 (-.f64 1 x))) (log.f64 (*.f64 (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) (exp.f64 (/.f64 x (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 1/3 (/.f64 1 (-.f64 1 x)))) (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) (exp.f64 (/.f64 x (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 1/3 (/.f64 x (-.f64 1 x)))) (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 x (-.f64 1 x)))) (exp.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) (*.f64 2 (*.f64 1/3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 1/3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (*.f64 1/3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) (*.f64 1/2 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 x (-.f64 1 x))) (log.f64 (*.f64 (sqrt.f64 (exp.f64 (/.f64 x (-.f64 1 x)))) (exp.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (cbrt.f64 (pow.f64 (exp.f64 (/.f64 x (-.f64 1 x))) 2)))) (*.f64 1/3 (/.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (sqrt.f64 (exp.f64 (/.f64 x (-.f64 1 x)))))) (*.f64 1/2 (/.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (exp.f64 (/.f64 x (-.f64 1 x))) (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) 2))) (*.f64 1/3 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (exp.f64 (/.f64 x (-.f64 1 x))) (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))) (*.f64 1/2 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2) (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 1/3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 (/.f64 1 x) 1) (-.f64 1 x)) (*.f64 (-.f64 1 x) (-.f64 (/.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (-.f64 (/.f64 1 x) 1) (*.f64 (neg.f64 (-.f64 1 x)) 1)) (*.f64 (neg.f64 (-.f64 1 x)) (-.f64 (/.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) x)) (pow.f64 (-.f64 1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (-.f64 1 x) (*.f64 (neg.f64 (-.f64 1 x)) x)) (*.f64 (neg.f64 (-.f64 1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (-.f64 1 x) (*.f64 (-.f64 1 x) (neg.f64 x))) (*.f64 (-.f64 1 x) (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (neg.f64 (-.f64 1 x)) (*.f64 (neg.f64 (-.f64 1 x)) (neg.f64 x))) (pow.f64 (neg.f64 (-.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 1 x) -3) (pow.f64 (/.f64 x (-.f64 1 x)) 3)) (+.f64 (pow.f64 (-.f64 1 x) -2) (-.f64 (pow.f64 (/.f64 x (-.f64 1 x)) 2) (*.f64 (/.f64 1 (-.f64 1 x)) (/.f64 x (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 x) -2) (pow.f64 (/.f64 x (-.f64 1 x)) 2)) (-.f64 (/.f64 1 (-.f64 1 x)) (/.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log1p.f64 x) (neg.f64 (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log1p.f64 x) (neg.f64 (log1p.f64 (neg.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (+.f64 (log1p.f64 x) (neg.f64 (log1p.f64 (neg.f64 x))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (+.f64 (log1p.f64 x) (neg.f64 (log1p.f64 (neg.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (+.f64 (log1p.f64 x) (neg.f64 (log1p.f64 (neg.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log1p.f64 x) (neg.f64 (log1p.f64 (neg.f64 x)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (-.f64 1 x)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 x)) 1 (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 x)) x (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (-.f64 1 x)) 1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x (-.f64 1 x))) (pow.f64 (cbrt.f64 (/.f64 x (-.f64 1 x))) 2) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x (-.f64 1 x))) 2) (cbrt.f64 (/.f64 x (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (-.f64 1 x) -1/2) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) -1/2) (/.f64 x (sqrt.f64 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (-.f64 1 x))) (sqrt.f64 (/.f64 x (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 (-.f64 1 x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (neg.f64 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) -2) (/.f64 1 (cbrt.f64 (-.f64 1 x))) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) -2) (/.f64 x (cbrt.f64 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (-.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (cbrt.f64 (/.f64 x (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (-.f64 1 x))) (/.f64 (cbrt.f64 x) (sqrt.f64 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (pow.f64 x 3))) (+.f64 1 (fma.f64 x x x)) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) (+.f64 1 x) (/.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (-.f64 1 (pow.f64 x 3))) (+.f64 1 (fma.f64 x x x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (-.f64 1 (*.f64 x x))) (+.f64 1 x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (/.f64 1 (cbrt.f64 (-.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (-.f64 1 x) -1/2)) (pow.f64 (-.f64 1 x) -1/2) (/.f64 1 (-.f64 1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (exp.f64 (log1p.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) (*.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (*.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) 1) (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2))) (cbrt.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) (cbrt.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))) (cbrt.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))) (sqrt.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) 1) (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (cbrt.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2))) (sqrt.f64 (cbrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))) (sqrt.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))) (sqrt.f64 (sqrt.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (E.f64) (exp.f64 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 x) (E.f64)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (*.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (-.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 1 (-.f64 1 x))) (*.f64 1/2 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 1/3 (/.f64 1 (-.f64 1 x)))) (*.f64 1/3 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (/.f64 1 (-.f64 1 x))) (*.f64 2 (*.f64 1/3 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (-.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (-.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 1/3 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 3 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) -2) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 (pow.f64 x 3))) (+.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 1 x) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (neg.f64 (log1p.f64 (neg.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -1/2 (log1p.f64 (neg.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 x)) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 x)) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))) (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) 2) (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (*.f64 1/2 (/.f64 1 (-.f64 1 x)))) (pow.f64 (E.f64) (*.f64 1/2 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (*.f64 2 (*.f64 1/3 (/.f64 1 (-.f64 1 x))))) (pow.f64 (E.f64) (*.f64 1/3 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (exp.f64 (log1p.f64 (/.f64 1 (-.f64 1 x))))) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (-.f64 1 x) -1/2)) (pow.f64 (-.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (-.f64 1 x) -1/2)) (*.f64 (pow.f64 (-.f64 1 x) -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (-.f64 1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (*.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (pow.f64 (-.f64 1 x) -1/2)) (pow.f64 (-.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (pow.f64 (cbrt.f64 (-.f64 1 x)) -2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (/.f64 1 (cbrt.f64 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (-.f64 1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) -1) (/.f64 1 (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (/.f64 1 (-.f64 1 (pow.f64 x 3)))) (+.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (E.f64) (/.f64 1 (-.f64 1 (*.f64 x x)))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (-.f64 1 x) -1/2)) 1) (pow.f64 (-.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (-.f64 1 x) -1/2)) (/.f64 1 (cbrt.f64 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (-.f64 1 x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (-.f64 1 x) -1/2)) (sqrt.f64 (pow.f64 (-.f64 1 x) -1/2))) (sqrt.f64 (pow.f64 (-.f64 1 x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (-.f64 1 x) -1/2)) (sqrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)))) (sqrt.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) 1) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (cbrt.f64 (pow.f64 (-.f64 1 x) -1/2))) (cbrt.f64 (pow.f64 (-.f64 1 x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (pow.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x)))) 2)) (cbrt.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2)))) (cbrt.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) -2))) (sqrt.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))))) (sqrt.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))))))))"]],"rules":[["egg-rr",46],["egg-rr",44],["egg-rr",45],["egg-rr",79]],"stop":[["node limit",1]],"time":56.094970703125,"type":"rewrite"},{"count":[[262,269]],"egraph":[[3,5785,629,0.0228765],[2,1499,657,0.01200325],[1,451,818,0.003031375],[0,147,902,0.000703458]],"inputs":[["1","(+.f64 (*.f64 2 x) 1)","(+.f64 (*.f64 2 x) (+.f64 1 (*.f64 1/2 (*.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (exp.f64 1)) (exp.f64 1))) 4) (pow.f64 x 2)))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/6 (*.f64 (+.f64 (*.f64 -12 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (exp.f64 1)) (exp.f64 1))) (+.f64 (*.f64 6 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (*.f64 13/3 (exp.f64 1))) (exp.f64 1))) 16)) (pow.f64 x 3))) (+.f64 1 (*.f64 1/2 (*.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (exp.f64 1)) (exp.f64 1))) 4) (pow.f64 x 2))))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 1/6 (/.f64 (-.f64 (+.f64 (*.f64 6 (/.f64 (+.f64 (*.f64 -1/3 (exp.f64 -1)) (exp.f64 -1)) (exp.f64 -1))) (*.f64 12 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1)))) 16) (pow.f64 x 3))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2)))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2))) (*.f64 -1/6 (/.f64 (+.f64 16 (+.f64 (*.f64 -12 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) (*.f64 6 (/.f64 (+.f64 (*.f64 1/3 (exp.f64 -1)) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))))) (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","(E.f64)","(+.f64 (E.f64) (*.f64 2 (*.f64 (E.f64) x)))","(+.f64 (E.f64) (+.f64 (*.f64 2 (*.f64 (E.f64) x)) (*.f64 (+.f64 (E.f64) (*.f64 3 (E.f64))) (pow.f64 x 2))))","(+.f64 (*.f64 (+.f64 (*.f64 13/3 (E.f64)) (*.f64 3 (E.f64))) (pow.f64 x 3)) (+.f64 (E.f64) (+.f64 (*.f64 2 (*.f64 (E.f64) x)) (*.f64 (+.f64 (E.f64) (*.f64 3 (E.f64))) (pow.f64 x 2)))))","(exp.f64 -1)","(+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (exp.f64 -1))","(+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (exp.f64 -1) (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))))))","(+.f64 (*.f64 -1/3 (/.f64 (exp.f64 -1) (pow.f64 x 3))) (+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 3)) (+.f64 (exp.f64 -1) (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))))))))","(exp.f64 -1)","(+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (exp.f64 -1))","(+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (exp.f64 -1) (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))))))","(+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (exp.f64 -1) (+.f64 (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/3 (exp.f64 -1)) (*.f64 -1 (exp.f64 -1))) (pow.f64 x 3)))))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (pow.f64 x 2) x))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 3) x)))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(exp.f64 1)","(+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1))","(+.f64 (*.f64 3/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1)))","(+.f64 (*.f64 13/6 (*.f64 (exp.f64 1) (pow.f64 x 3))) (+.f64 (*.f64 3/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1))))","1","(-.f64 1 (/.f64 1 x))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (/.f64 1 x) (*.f64 1/6 (/.f64 1 (pow.f64 x 3))))))","1","(-.f64 1 (/.f64 1 x))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (/.f64 1 x) (*.f64 1/6 (/.f64 1 (pow.f64 x 3))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 2 x) 1)","(fma.f64 2 x 1)","(+.f64 (*.f64 2 x) (+.f64 1 (*.f64 1/2 (*.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (exp.f64 1)) (exp.f64 1))) 4) (pow.f64 x 2)))))","(+.f64 (fma.f64 2 x 1) (*.f64 1/2 (*.f64 (fma.f64 2 (/.f64 (*.f64 4 (E.f64)) (E.f64)) -4) (*.f64 x x))))","(fma.f64 2 x (fma.f64 1/2 (*.f64 (+.f64 (/.f64 (*.f64 8 (E.f64)) (E.f64)) -4) (*.f64 x x)) 1))","(fma.f64 2 x (fma.f64 (*.f64 2 x) x 1))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/6 (*.f64 (+.f64 (*.f64 -12 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (exp.f64 1)) (exp.f64 1))) (+.f64 (*.f64 6 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (*.f64 13/3 (exp.f64 1))) (exp.f64 1))) 16)) (pow.f64 x 3))) (+.f64 1 (*.f64 1/2 (*.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 3 (exp.f64 1)) (exp.f64 1)) (exp.f64 1))) 4) (pow.f64 x 2))))))","(fma.f64 2 x (fma.f64 1/6 (*.f64 (fma.f64 -12 (/.f64 (*.f64 4 (E.f64)) (E.f64)) (fma.f64 6 (/.f64 (*.f64 (E.f64) 22/3) (E.f64)) 16)) (pow.f64 x 3)) (+.f64 1 (*.f64 1/2 (*.f64 (fma.f64 2 (/.f64 (*.f64 4 (E.f64)) (E.f64)) -4) (*.f64 x x))))))","(fma.f64 2 x (fma.f64 1/6 (*.f64 (+.f64 (/.f64 (*.f64 -48 (E.f64)) (E.f64)) (fma.f64 6 (/.f64 (E.f64) (/.f64 (E.f64) 22/3)) 16)) (pow.f64 x 3)) (fma.f64 1/2 (*.f64 (+.f64 (/.f64 (*.f64 8 (E.f64)) (E.f64)) -4) (*.f64 x x)) 1)))","(fma.f64 2 x (fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 3) 1)))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(+.f64 -1 (neg.f64 (/.f64 2 x)))","(-.f64 -1 (/.f64 2 x))","(+.f64 -1 (/.f64 -2 x))","(-.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (*.f64 1/2 (/.f64 (fma.f64 2 (/.f64 (*.f64 0 (exp.f64 -1)) (exp.f64 -1)) -4) (*.f64 x x))) (+.f64 1 (/.f64 2 x)))","(fma.f64 1/2 (/.f64 (+.f64 (/.f64 0 (exp.f64 -1)) -4) (*.f64 x x)) (-.f64 -1 (/.f64 2 x)))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (/.f64 -2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/6 (/.f64 (-.f64 (+.f64 (*.f64 6 (/.f64 (+.f64 (*.f64 -1/3 (exp.f64 -1)) (exp.f64 -1)) (exp.f64 -1))) (*.f64 12 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1)))) 16) (pow.f64 x 3))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2)))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (fma.f64 1/6 (/.f64 (+.f64 (fma.f64 6 (/.f64 (*.f64 2/3 (exp.f64 -1)) (exp.f64 -1)) (*.f64 (/.f64 (*.f64 0 (exp.f64 -1)) (exp.f64 -1)) 12)) -16) (pow.f64 x 3)) (*.f64 1/2 (/.f64 (fma.f64 2 (/.f64 (*.f64 0 (exp.f64 -1)) (exp.f64 -1)) -4) (*.f64 x x)))) (+.f64 1 (/.f64 2 x)))","(fma.f64 1/6 (/.f64 (+.f64 (/.f64 0 (exp.f64 -1)) (-.f64 (/.f64 (*.f64 4 (exp.f64 -1)) (exp.f64 -1)) 16)) (pow.f64 x 3)) (fma.f64 1/2 (/.f64 (+.f64 (/.f64 0 (exp.f64 -1)) -4) (*.f64 x x)) (-.f64 -1 (/.f64 2 x))))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (+.f64 (/.f64 -2 (*.f64 x x)) (/.f64 -2 (pow.f64 x 3))))","(+.f64 (/.f64 -2 (*.f64 x x)) (-.f64 (/.f64 -2 (pow.f64 x 3)) (-.f64 1 (/.f64 -2 x))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(+.f64 -1 (neg.f64 (/.f64 2 x)))","(-.f64 -1 (/.f64 2 x))","(+.f64 -1 (/.f64 -2 x))","(-.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (*.f64 1/2 (/.f64 (fma.f64 2 (/.f64 (*.f64 0 (exp.f64 -1)) (exp.f64 -1)) -4) (*.f64 x x))) (+.f64 1 (/.f64 2 x)))","(fma.f64 1/2 (/.f64 (+.f64 (/.f64 0 (exp.f64 -1)) -4) (*.f64 x x)) (-.f64 -1 (/.f64 2 x)))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (/.f64 -2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) 4) (pow.f64 x 2))) (*.f64 -1/6 (/.f64 (+.f64 16 (+.f64 (*.f64 -12 (/.f64 (+.f64 (exp.f64 -1) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))) (*.f64 6 (/.f64 (+.f64 (*.f64 1/3 (exp.f64 -1)) (*.f64 -1 (exp.f64 -1))) (exp.f64 -1))))) (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 x))))","(-.f64 (fma.f64 1/6 (/.f64 (+.f64 (fma.f64 6 (/.f64 (*.f64 2/3 (exp.f64 -1)) (exp.f64 -1)) (*.f64 (/.f64 (*.f64 0 (exp.f64 -1)) (exp.f64 -1)) 12)) -16) (pow.f64 x 3)) (*.f64 1/2 (/.f64 (fma.f64 2 (/.f64 (*.f64 0 (exp.f64 -1)) (exp.f64 -1)) -4) (*.f64 x x)))) (+.f64 1 (/.f64 2 x)))","(fma.f64 1/6 (/.f64 (+.f64 (/.f64 0 (exp.f64 -1)) (-.f64 (/.f64 (*.f64 4 (exp.f64 -1)) (exp.f64 -1)) 16)) (pow.f64 x 3)) (fma.f64 1/2 (/.f64 (+.f64 (/.f64 0 (exp.f64 -1)) -4) (*.f64 x x)) (-.f64 -1 (/.f64 2 x))))","(+.f64 (+.f64 -1 (/.f64 -2 x)) (+.f64 (/.f64 -2 (*.f64 x x)) (/.f64 -2 (pow.f64 x 3))))","(+.f64 (/.f64 -2 (*.f64 x x)) (-.f64 (/.f64 -2 (pow.f64 x 3)) (-.f64 1 (/.f64 -2 x))))","(E.f64)","(+.f64 (E.f64) (*.f64 2 (*.f64 (E.f64) x)))","(+.f64 (E.f64) (*.f64 (*.f64 2 (E.f64)) x))","(fma.f64 2 (*.f64 x (E.f64)) (E.f64))","(*.f64 (fma.f64 2 x 1) (E.f64))","(+.f64 (E.f64) (+.f64 (*.f64 2 (*.f64 (E.f64) x)) (*.f64 (+.f64 (E.f64) (*.f64 3 (E.f64))) (pow.f64 x 2))))","(+.f64 (E.f64) (fma.f64 2 (*.f64 x (E.f64)) (*.f64 (*.f64 4 (E.f64)) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 (*.f64 (E.f64) 4) x) x) (fma.f64 2 (*.f64 x (E.f64)) (E.f64)))","(fma.f64 x (*.f64 x (*.f64 (E.f64) 4)) (*.f64 (fma.f64 2 x 1) (E.f64)))","(+.f64 (*.f64 (+.f64 (*.f64 13/3 (E.f64)) (*.f64 3 (E.f64))) (pow.f64 x 3)) (+.f64 (E.f64) (+.f64 (*.f64 2 (*.f64 (E.f64) x)) (*.f64 (+.f64 (E.f64) (*.f64 3 (E.f64))) (pow.f64 x 2)))))","(fma.f64 (*.f64 (E.f64) 22/3) (pow.f64 x 3) (+.f64 (E.f64) (fma.f64 2 (*.f64 x (E.f64)) (*.f64 (*.f64 4 (E.f64)) (*.f64 x x)))))","(+.f64 (fma.f64 2 (*.f64 x (E.f64)) (*.f64 (*.f64 (*.f64 (E.f64) 4) x) x)) (fma.f64 (pow.f64 x 3) (*.f64 (E.f64) 22/3) (E.f64)))","(fma.f64 (E.f64) (*.f64 (pow.f64 x 3) 22/3) (fma.f64 x (*.f64 x (*.f64 (E.f64) 4)) (*.f64 (fma.f64 2 x 1) (E.f64))))","(exp.f64 -1)","(+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (exp.f64 -1))","(fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1))","(+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (exp.f64 -1) (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))))))","(fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1))","(+.f64 (*.f64 -1/3 (/.f64 (exp.f64 -1) (pow.f64 x 3))) (+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 3)) (+.f64 (exp.f64 -1) (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))))))))","(fma.f64 -1/3 (/.f64 (exp.f64 -1) (pow.f64 x 3)) (+.f64 (/.f64 (exp.f64 -1) (*.f64 x x)) (fma.f64 -2 (/.f64 (exp.f64 -1) x) (+.f64 (+.f64 (exp.f64 -1) (/.f64 (neg.f64 (exp.f64 -1)) (*.f64 x x))) (/.f64 (exp.f64 -1) (pow.f64 x 3))))))","(+.f64 (+.f64 (fma.f64 -1/3 (/.f64 (exp.f64 -1) (pow.f64 x 3)) (/.f64 (exp.f64 -1) (*.f64 x x))) (fma.f64 -2 (/.f64 (exp.f64 -1) x) (/.f64 (exp.f64 -1) (pow.f64 x 3)))) (-.f64 (exp.f64 -1) (/.f64 (exp.f64 -1) (*.f64 x x))))","(fma.f64 -1/3 (/.f64 (exp.f64 -1) (pow.f64 x 3)) (+.f64 (fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1)) (+.f64 (*.f64 0 (/.f64 (exp.f64 -1) (*.f64 x x))) (/.f64 (exp.f64 -1) (pow.f64 x 3)))))","(fma.f64 -1/3 (/.f64 (exp.f64 -1) (pow.f64 x 3)) (+.f64 (exp.f64 -1) (fma.f64 -2 (/.f64 (exp.f64 -1) x) (/.f64 (exp.f64 -1) (pow.f64 x 3)))))","(exp.f64 -1)","(+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (exp.f64 -1))","(fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1))","(+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (exp.f64 -1) (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))))))","(fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1))","(+.f64 (/.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (*.f64 -2 (/.f64 (exp.f64 -1) x)) (+.f64 (exp.f64 -1) (+.f64 (*.f64 -1 (/.f64 (exp.f64 -1) (pow.f64 x 2))) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/3 (exp.f64 -1)) (*.f64 -1 (exp.f64 -1))) (pow.f64 x 3)))))))","(+.f64 (/.f64 (exp.f64 -1) (*.f64 x x)) (+.f64 (fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1)) (*.f64 -1 (+.f64 (/.f64 (exp.f64 -1) (*.f64 x x)) (/.f64 (*.f64 (exp.f64 -1) -2/3) (pow.f64 x 3))))))","(+.f64 (/.f64 (exp.f64 -1) (*.f64 x x)) (fma.f64 -2 (/.f64 (exp.f64 -1) x) (-.f64 (-.f64 (exp.f64 -1) (/.f64 (exp.f64 -1) (*.f64 x x))) (/.f64 (exp.f64 -1) (/.f64 (pow.f64 x 3) -2/3)))))","(+.f64 (+.f64 (fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1)) (/.f64 (*.f64 (exp.f64 -1) 2/3) (pow.f64 x 3))) (*.f64 0 (/.f64 (exp.f64 -1) (*.f64 x x))))","(+.f64 (fma.f64 -2 (/.f64 (exp.f64 -1) x) (exp.f64 -1)) (/.f64 2/3 (/.f64 (pow.f64 x 3) (exp.f64 -1))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (pow.f64 x 2) x))","(+.f64 1 (+.f64 x (*.f64 x x)))","(+.f64 1 (fma.f64 x x x))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 3) x)))","(+.f64 1 (+.f64 (*.f64 x x) (+.f64 x (pow.f64 x 3))))","(+.f64 (*.f64 x (fma.f64 x x x)) (+.f64 1 x))","(fma.f64 x (fma.f64 x x x) (+.f64 1 x))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x))))","(-.f64 (/.f64 -1 x) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 -1 x) (/.f64 (/.f64 -1 x) x))","(+.f64 (/.f64 -1 x) (/.f64 -1 (*.f64 x x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (+.f64 (/.f64 -1 x) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 -1 x) (/.f64 -1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 3)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(neg.f64 (+.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (+.f64 (+.f64 (/.f64 -1 x) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (-.f64 (/.f64 -1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 -1 (pow.f64 x 4))))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x))))","(-.f64 (/.f64 -1 x) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 -1 x) (/.f64 (/.f64 -1 x) x))","(+.f64 (/.f64 -1 x) (/.f64 -1 (*.f64 x x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (+.f64 (/.f64 -1 x) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 -1 x) (/.f64 -1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 3)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(neg.f64 (+.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (+.f64 (+.f64 (/.f64 -1 x) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (-.f64 (/.f64 -1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 -1 (pow.f64 x 4))))","(exp.f64 1)","(E.f64)","(+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1))","(fma.f64 x (E.f64) (E.f64))","(+.f64 (*.f64 3/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1)))","(fma.f64 3/2 (*.f64 (E.f64) (*.f64 x x)) (fma.f64 x (E.f64) (E.f64)))","(fma.f64 3/2 (*.f64 x (*.f64 x (E.f64))) (fma.f64 x (E.f64) (E.f64)))","(*.f64 (E.f64) (+.f64 (+.f64 1 x) (*.f64 (*.f64 3/2 x) x)))","(*.f64 (E.f64) (+.f64 (+.f64 1 x) (*.f64 x (*.f64 x 3/2))))","(+.f64 (*.f64 13/6 (*.f64 (exp.f64 1) (pow.f64 x 3))) (+.f64 (*.f64 3/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1))))","(fma.f64 13/6 (*.f64 (E.f64) (pow.f64 x 3)) (fma.f64 3/2 (*.f64 (E.f64) (*.f64 x x)) (fma.f64 x (E.f64) (E.f64))))","(fma.f64 13/6 (*.f64 (E.f64) (pow.f64 x 3)) (fma.f64 3/2 (*.f64 x (*.f64 x (E.f64))) (fma.f64 x (E.f64) (E.f64))))","(fma.f64 (E.f64) (*.f64 (pow.f64 x 3) 13/6) (*.f64 (E.f64) (+.f64 (+.f64 1 x) (*.f64 (*.f64 3/2 x) x))))","(fma.f64 (E.f64) (+.f64 1 x) (*.f64 (E.f64) (+.f64 (*.f64 x (*.f64 x 3/2)) (*.f64 (pow.f64 x 3) 13/6))))","1","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 1 (+.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (-.f64 1 (/.f64 1/2 (*.f64 x x))) (/.f64 -1 x))","(+.f64 1 (+.f64 (/.f64 -1 x) (/.f64 -1/2 (*.f64 x x))))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (/.f64 1 x) (*.f64 1/6 (/.f64 1 (pow.f64 x 3))))))","(-.f64 1 (+.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1/6 (pow.f64 x 3)))))","(-.f64 (+.f64 (-.f64 1 (/.f64 1/2 (*.f64 x x))) (/.f64 -1 x)) (/.f64 1/6 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 -1 x) (/.f64 -1/2 (*.f64 x x))) (-.f64 1 (/.f64 1/6 (pow.f64 x 3))))","(+.f64 (+.f64 1 (+.f64 (/.f64 -1 x) (/.f64 -1/2 (*.f64 x x)))) (/.f64 -1/6 (pow.f64 x 3)))","1","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 1 (+.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (-.f64 1 (/.f64 1/2 (*.f64 x x))) (/.f64 -1 x))","(+.f64 1 (+.f64 (/.f64 -1 x) (/.f64 -1/2 (*.f64 x x))))","(-.f64 1 (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (/.f64 1 x) (*.f64 1/6 (/.f64 1 (pow.f64 x 3))))))","(-.f64 1 (+.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1/6 (pow.f64 x 3)))))","(-.f64 (+.f64 (-.f64 1 (/.f64 1/2 (*.f64 x x))) (/.f64 -1 x)) (/.f64 1/6 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 -1 x) (/.f64 -1/2 (*.f64 x x))) (-.f64 1 (/.f64 1/6 (pow.f64 x 3))))","(+.f64 (+.f64 1 (+.f64 (/.f64 -1 x) (/.f64 -1/2 (*.f64 x x)))) (/.f64 -1/6 (pow.f64 x 3)))"]],"stop":[["node limit",1]],"time":44.39990234375,"type":"simplify"},{"compiler":[[5129,4085]],"time":68.633056640625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))","done",15.097314869703963],["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))","done",0.01953125],["(/.f64 (+.f64 x 1) (-.f64 1 x))","done",0.01171875]],"compiler":[[14,10],[15,12],[8,6]],"count":[[272,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[269,0],"picked":[1,1]}],"min-error":[0],"time":106.177001953125,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["(/.f64 (+.f64 x 1) (-.f64 1 x))",0.01171875,1]],"compiler":[[2,1],[8,6],[50,38]],"count":[[4,1]],"inputs":[["(log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (exp.f64 (/.f64 x (-.f64 1 x)))))","(*.f64 (/.f64 (+.f64 x 1) (-.f64 1 (*.f64 x x))) (+.f64 x 1))","(*.f64 (/.f64 1 (sqrt.f64 (-.f64 1 x))) (/.f64 (+.f64 x 1) (sqrt.f64 (-.f64 1 x))))","(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"link":["."],"name":["Prelude:atanh from fay-base-0.20.0.1"],"oracle":[23.605004358694195],"outputs":[["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"time":6.162109375,"times":[["x",3.323974609375],["(/.f64 (+.f64 x 1) (-.f64 1 x))",1.77685546875]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[4,18,10,0.000100707],[3,17,10,8.0999e-5],[2,15,10,6.1207e-5],[1,11,10,4.1915999999999996e-5],[0,6,10,2.1666e-5]],"inputs":[["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x 1) (-.f64 1 x))"]],"stop":[["done",1],["saturated",1]],"time":8.341796875,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.8330078125,"type":"end"}]
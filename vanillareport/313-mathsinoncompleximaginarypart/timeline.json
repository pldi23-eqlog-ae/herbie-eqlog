[{"compiler":[[15,12]],"method":["search"],"sampling":[[12,0.49951183795928955,0.2809754088521004,0.21951275318861008],[11,0.49951183795928955,0.2809754088521004,0.21951275318861008],[10,0.49951183795928955,0.31219489872455597,0.18829326331615448],[9,0.49951183795928955,0.31219489872455597,0.18829326331615448],[8,0.49951183795928955,0.37463387846946716,0.1258542835712433],[7,0.49951183795928955,0.37463387846946716,0.1258542835712433],[6,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[5,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":65.787109375,"type":"analyze"},{"outcomes":[["body",512,"invalid",124.1162109375,1062],["body",256,"invalid",95.673095703125,1528],["body",1024,"invalid",381.310546875,1991],["body",512,"valid",258.34423828125,1782],["body",1024,"valid",1396.274169921875,5001],["body",256,"valid",75.94091796875,1061],["body",2048,"valid",176.524658203125,412]],"time":2521.68603515625,"type":"sample"},{"compiler":[[14,11]],"egraph":[[0,2,2,1.959e-6],[8,7349,34,0.041348834],[7,3751,34,0.029412667],[6,1819,34,0.015167917],[5,915,34,0.007674417],[4,541,34,0.0036437500000000003],[3,255,36,0.001733375],[2,95,36,0.000738542],[1,40,36,0.000301875],[0,19,36,0.000102083]],"inputs":[["0","1"],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (cos.f64 im)) (-.f64 (exp.f64 (-.f64 0 re)) (exp.f64 re)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (cos.f64 re) (fma.f64 (exp.f64 im) -1/2 (/.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 im)) (-.f64 (exp.f64 (-.f64 0 re)) (exp.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 im) (-.f64 (exp.f64 (neg.f64 re)) (exp.f64 re))))","(*.f64 (cos.f64 im) (fma.f64 (exp.f64 re) -1/2 (/.f64 1/2 (exp.f64 re))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":66.171875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[8,6265,17,0.032804375000000004],[7,2397,17,0.020104042000000003],[6,931,17,0.00890925],[5,474,17,0.004049625],[4,282,17,0.0019855840000000003],[3,134,18,0.000969084],[2,52,18,0.000413417],[1,23,18,0.00018020900000000002],[0,12,18,6.65e-5]],"inputs":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (cos.f64 re) (*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 (exp.f64 im) -1/2 (/.f64 1/2 (exp.f64 im))))"]],"stop":[["node limit",1]],"time":44.091064453125,"type":"simplify"},{"compiler":[[25,16]],"time":0.48388671875,"type":"eval"},{"alts":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","next",58.34261844355968]],"compiler":[[14,11],[14,11]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[58.34261844355968],"time":0.968017578125,"type":"prune"},{"compiler":[[40,24]],"locations":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))",0.01171875,true],["(cos.f64 re)",0.0234375,true],["(-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))",4.97977469276862,true]],"time":10.85302734375,"type":"localize"},{"count":[[3,40]],"series":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","im","-inf",0.47900390625],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","im","inf",0.7080078125],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","im","0",0.656982421875],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","re","-inf",0.48583984375],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","re","inf",0.524169921875],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","re","0",0.5068359375],["(cos.f64 re)","re","-inf",0.179931640625],["(cos.f64 re)","re","inf",0.177001953125],["(cos.f64 re)","re","0",0.2431640625],["(-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))","im","-inf",0.246826171875],["(-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))","im","inf",0.215087890625],["(-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))","im","0",0.467041015625]],"time":5.069091796875,"type":"series"},{"count":[[3,90]],"egraph":[[0,12,18,0.000328958],[2,3445,18,0.028672834],[1,252,18,0.004600042],[0,12,18,0.000336],[3,7412,3,0.056364541],[2,673,3,0.011838083000000001],[1,58,3,0.0009159999999999999],[0,3,3,8.9542e-5],[2,2253,8,0.015297041],[1,151,8,0.0028267910000000004],[0,7,10,0.000198375],[2,3445,16,0.028846832000000003],[1,252,16,0.004471416000000001],[0,12,16,0.00034975]],"inputs":[["(-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))","(cos.f64 re)","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))"]],"method":["egg-rewrite-iter-limit","egg-rewrite","egg-rewrite","egg-rewrite","batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 im) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 im) (*.f64 (neg.f64 (exp.f64 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 im) (exp.f64 im)) (fma.f64 (neg.f64 (exp.f64 im)) 1 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 im) (exp.f64 im)) (fma.f64 (neg.f64 (cbrt.f64 (exp.f64 im))) (pow.f64 (cbrt.f64 (exp.f64 im)) 2) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 im) (exp.f64 im)) (fma.f64 (neg.f64 (sqrt.f64 (exp.f64 im))) (sqrt.f64 (exp.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 im) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (exp.f64 im) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))) (pow.f64 (cbrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))) 2) (cbrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))) (sqrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (exp.f64 im) 3) (pow.f64 (exp.f64 im) 3)) (/.f64 1 (+.f64 (pow.f64 (exp.f64 im) 2) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (exp.f64 im) 2) (pow.f64 (exp.f64 im) 2)) (/.f64 1 (+.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (exp.f64 im)) (sqrt.f64 (exp.f64 im))) (-.f64 (sqrt.f64 (exp.f64 im)) (sqrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (exp.f64 im) 2) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 im)))) (-.f64 (pow.f64 (exp.f64 im) 3) (pow.f64 (exp.f64 im) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (exp.f64 im) (exp.f64 im)) (-.f64 (pow.f64 (exp.f64 im) 2) (pow.f64 (exp.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 im) 3) (pow.f64 (exp.f64 im) 3)) (+.f64 (pow.f64 (exp.f64 im) 2) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 im) 2) (pow.f64 (exp.f64 im) 2)) (+.f64 (exp.f64 im) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 im) 3) (pow.f64 (exp.f64 im) 3))) (neg.f64 (+.f64 (pow.f64 (exp.f64 im) 2) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 im) 2) (pow.f64 (exp.f64 im) 2))) (neg.f64 (+.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (exp.f64 im) 3) (pow.f64 (neg.f64 (exp.f64 im)) 3)) (+.f64 (pow.f64 (exp.f64 im) 2) (-.f64 (*.f64 (neg.f64 (exp.f64 im)) (neg.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (neg.f64 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 im) 2) (*.f64 (neg.f64 (exp.f64 im)) (neg.f64 (exp.f64 im)))) (-.f64 (exp.f64 im) (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 im) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 im) (exp.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (exp.f64 im) (exp.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (exp.f64 im) (exp.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (exp.f64 im) (exp.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (exp.f64 im) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 im) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (exp.f64 im)) 2) (cbrt.f64 (exp.f64 im)) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 im)) (sqrt.f64 (exp.f64 im)) (neg.f64 (exp.f64 im)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 re))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 re)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 re 1)) (cos.f64 1)) (*.f64 (sin.f64 (+.f64 re 1)) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 re)) (pow.f64 (cbrt.f64 (cos.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2) (cbrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 re) 1/6) (*.f64 (pow.f64 (cos.f64 re) 1/6) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 re) 1/4) (sqrt.f64 (pow.f64 (cos.f64 re) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 re) 1/4) (*.f64 (pow.f64 (cos.f64 re) 1/4) (sqrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (cos.f64 re)) (pow.f64 (cos.f64 re) 1/4)) (pow.f64 (cos.f64 re) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4) 2)) (cbrt.f64 (cbrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 re) 5/2)) (pow.f64 (cos.f64 re) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 5)) (pow.f64 (cos.f64 re) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cos.f64 re) 3/2)) (pow.f64 (cos.f64 re) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4) 2) 1/3) (cbrt.f64 (cbrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 re) 5/2) 1/3) (pow.f64 (cos.f64 re) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (cos.f64 re)) (cbrt.f64 (cos.f64 re))) (pow.f64 (cos.f64 re) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cos.f64 re)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2)) (cbrt.f64 (cbrt.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (pow.f64 (cos.f64 re) 1/6)) (pow.f64 (cos.f64 re) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 (cos.f64 (+.f64 re re)) (cos.f64 0))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (cos.f64 re) 1) 3) 1) (+.f64 (*.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1)) (+.f64 1 (+.f64 (cos.f64 re) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1)) 1) (+.f64 (+.f64 (cos.f64 re) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 re) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cos.f64 re))) 2)) (cbrt.f64 (log.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cos.f64 re)))) (sqrt.f64 (log.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 re) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (cos.f64 re))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 re))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (cos.f64 re))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))))"]],"rules":[["egg-rr",6],["egg-rr",49],["egg-rr",35]],"stop":[["iter limit",1],["node limit",1],["node limit",1],["node limit",1],["node limit",1]],"time":208.02294921875,"type":"rewrite"},{"count":[[130,125]],"egraph":[[4,5009,658,0.022806166],[3,2100,658,0.011995166],[2,577,688,0.004636541],[1,210,744,0.001510999],[0,83,750,0.000393458]],"inputs":[["(*.f64 -2 im)","(+.f64 (*.f64 -2 im) (*.f64 -1/3 (pow.f64 im 3)))","(+.f64 (*.f64 -2 im) (+.f64 (*.f64 -1/60 (pow.f64 im 5)) (*.f64 -1/3 (pow.f64 im 3))))","(+.f64 (*.f64 -1/2520 (pow.f64 im 7)) (+.f64 (*.f64 -2 im) (+.f64 (*.f64 -1/60 (pow.f64 im 5)) (*.f64 -1/3 (pow.f64 im 3)))))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(+.f64 (*.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 2))) (*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(+.f64 (*.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4))) (+.f64 (*.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 2))) (*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","(+.f64 (*.f64 -1/1440 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 6))) (+.f64 (*.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4))) (+.f64 (*.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 2))) (*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 im)","(+.f64 (*.f64 -2 im) (*.f64 -1/3 (pow.f64 im 3)))","(fma.f64 -2 im (*.f64 -1/3 (pow.f64 im 3)))","(fma.f64 -1/3 (pow.f64 im 3) (*.f64 -2 im))","(+.f64 (*.f64 -2 im) (+.f64 (*.f64 -1/60 (pow.f64 im 5)) (*.f64 -1/3 (pow.f64 im 3))))","(fma.f64 -2 im (fma.f64 -1/60 (pow.f64 im 5) (*.f64 -1/3 (pow.f64 im 3))))","(fma.f64 -2 im (fma.f64 -1/3 (pow.f64 im 3) (*.f64 -1/60 (pow.f64 im 5))))","(fma.f64 -1/3 (pow.f64 im 3) (fma.f64 -1/60 (pow.f64 im 5) (*.f64 -2 im)))","(+.f64 (*.f64 -1/2520 (pow.f64 im 7)) (+.f64 (*.f64 -2 im) (+.f64 (*.f64 -1/60 (pow.f64 im 5)) (*.f64 -1/3 (pow.f64 im 3)))))","(fma.f64 -1/2520 (pow.f64 im 7) (fma.f64 -2 im (fma.f64 -1/60 (pow.f64 im 5) (*.f64 -1/3 (pow.f64 im 3)))))","(fma.f64 -1/2520 (pow.f64 im 7) (fma.f64 -2 im (fma.f64 -1/3 (pow.f64 im 3) (*.f64 -1/60 (pow.f64 im 5)))))","(fma.f64 -1/2520 (pow.f64 im 7) (fma.f64 -1/3 (pow.f64 im 3) (fma.f64 -1/60 (pow.f64 im 5) (*.f64 -2 im))))","(fma.f64 -2 im (fma.f64 -1/2520 (pow.f64 im 7) (fma.f64 -1/3 (pow.f64 im 3) (*.f64 -1/60 (pow.f64 im 5)))))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","(-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))","(-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 re re)))","(fma.f64 -1/2 (*.f64 re re) 1)","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(fma.f64 1/24 (pow.f64 re 4) (+.f64 1 (*.f64 -1/2 (*.f64 re re))))","(fma.f64 1/24 (pow.f64 re 4) (fma.f64 -1/2 (*.f64 re re) 1))","(fma.f64 -1/2 (*.f64 re re) (fma.f64 1/24 (pow.f64 re 4) 1))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(fma.f64 1/24 (pow.f64 re 4) (+.f64 1 (fma.f64 -1/2 (*.f64 re re) (*.f64 -1/720 (pow.f64 re 6)))))","(+.f64 (fma.f64 1/24 (pow.f64 re 4) (fma.f64 -1/2 (*.f64 re re) 1)) (*.f64 -1/720 (pow.f64 re 6)))","(fma.f64 1/24 (pow.f64 re 4) (fma.f64 -1/2 (*.f64 re re) (fma.f64 -1/720 (pow.f64 re 6) 1)))","(*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2)","(+.f64 (*.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 2))) (*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(fma.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 re re)) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2))","(fma.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2 (*.f64 (*.f64 re re) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) -1/4)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 1/2 (*.f64 (*.f64 re re) -1/4)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 1/2 (*.f64 re (*.f64 re -1/4))))","(+.f64 (*.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4))) (+.f64 (*.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 2))) (*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))","(fma.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4)) (fma.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 re re)) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2)))","(fma.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4)) (fma.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2 (*.f64 (*.f64 re re) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) -1/4))))","(fma.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 (*.f64 re re) -1/4) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 (*.f64 (pow.f64 re 4) 1/48) 1/2)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 1/2 (+.f64 (*.f64 (pow.f64 re 4) 1/48) (*.f64 re (*.f64 re -1/4)))))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 1/2 (+.f64 (*.f64 (pow.f64 re 4) 1/48) (*.f64 (*.f64 re re) -1/4))))","(+.f64 (*.f64 -1/1440 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 6))) (+.f64 (*.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4))) (+.f64 (*.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 2))) (*.f64 1/2 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))","(fma.f64 -1/1440 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 6)) (fma.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4)) (fma.f64 -1/4 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 re re)) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2))))","(fma.f64 -1/1440 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 6)) (fma.f64 1/48 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (pow.f64 re 4)) (fma.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 1/2 (*.f64 (*.f64 re re) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) -1/4)))))","(+.f64 (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 1/2 (*.f64 (*.f64 re re) -1/4))) (*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 (*.f64 (pow.f64 re 4) 1/48) (*.f64 (pow.f64 re 6) -1/1440))))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 (+.f64 (*.f64 (pow.f64 re 4) 1/48) (*.f64 (pow.f64 re 6) -1/1440)) (+.f64 1/2 (*.f64 re (*.f64 re -1/4)))))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (+.f64 (*.f64 (pow.f64 re 6) -1/1440) (+.f64 1/2 (+.f64 (*.f64 (pow.f64 re 4) 1/48) (*.f64 (*.f64 re re) -1/4)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(neg.f64 (*.f64 im (cos.f64 re)))","(*.f64 (neg.f64 im) (cos.f64 re))","(*.f64 im (neg.f64 (cos.f64 re)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (neg.f64 (*.f64 im (cos.f64 re))))","(fma.f64 (*.f64 (cos.f64 re) -1/6) (pow.f64 im 3) (*.f64 (neg.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (-.f64 (*.f64 (pow.f64 im 3) -1/6) im))","(*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (neg.f64 im)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1 (*.f64 im (cos.f64 re)) (*.f64 (*.f64 -1/120 (cos.f64 re)) (pow.f64 im 5))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (-.f64 (*.f64 (pow.f64 im 5) (*.f64 (cos.f64 re) -1/120)) (*.f64 im (cos.f64 re))))","(fma.f64 (pow.f64 im 3) (*.f64 (cos.f64 re) -1/6) (*.f64 (cos.f64 re) (-.f64 (*.f64 (pow.f64 im 5) -1/120) im)))","(*.f64 (cos.f64 re) (+.f64 (-.f64 (*.f64 (pow.f64 im 3) -1/6) im) (*.f64 (pow.f64 im 5) -1/120)))","(*.f64 (cos.f64 re) (+.f64 (fma.f64 (pow.f64 im 3) -1/6 (neg.f64 im)) (*.f64 (pow.f64 im 5) -1/120)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1 (*.f64 im (cos.f64 re)) (fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re))))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (-.f64 (fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 (pow.f64 im 7) (*.f64 (cos.f64 re) -1/5040))) (*.f64 im (cos.f64 re))))","(+.f64 (*.f64 (cos.f64 re) (-.f64 (*.f64 (pow.f64 im 3) -1/6) im)) (*.f64 (cos.f64 re) (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 7) -1/5040))))","(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (-.f64 (*.f64 (pow.f64 im 7) -1/5040) im)))","(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (-.f64 (exp.f64 (*.f64 -1 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (-.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 1/2 (cos.f64 re)))"]],"stop":[["node limit",1]],"time":42.700927734375,"type":"simplify"},{"compiler":[[2323,1254]],"time":23.68701171875,"type":"eval"},{"alts":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","done",58.34261844355968],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","next",0.5904064167880401],["(*.f64 (cos.f64 re) (+.f64 (fma.f64 (pow.f64 im 3) -1/6 (neg.f64 im)) (*.f64 (pow.f64 im 5) -1/120)))","fresh",0.6331361513590643]],"compiler":[[14,11],[24,19],[18,14],[24,19],[18,14]],"count":[[126,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[125,2],"picked":[1,1]}],"min-error":[0.12890625],"time":14.053955078125,"type":"prune"},{"compiler":[[92,66]],"locations":[["(cos.f64 re)",0.0234375,false],["(*.f64 (pow.f64 im 5) -1/120)",0.03515625,true],["(*.f64 (pow.f64 im 3) -1/6)",0.11328125,true],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))",0.12109375,true]],"time":22.1650390625,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 (pow.f64 im 5) -1/120)","im","-inf",0.291015625],["(*.f64 (pow.f64 im 5) -1/120)","im","inf",0.30078125],["(*.f64 (pow.f64 im 5) -1/120)","im","0",0.421142578125],["(*.f64 (pow.f64 im 3) -1/6)","im","-inf",0.300048828125],["(*.f64 (pow.f64 im 3) -1/6)","im","inf",0.30517578125],["(*.f64 (pow.f64 im 3) -1/6)","im","0",0.393798828125],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","im","-inf",0.471923828125],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","im","inf",0.51611328125],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","im","0",0.344970703125],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","re","-inf",0.344970703125],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","re","inf",2.072998046875],["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","re","0",0.909912109375]],"time":6.876953125,"type":"series"},{"count":[[3,85]],"egraph":[[2,5814,41,0.037521917],[1,454,41,0.008821875],[0,20,45,0.000737875]],"inputs":[["(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (pow.f64 im 3) -1/6)","(*.f64 (pow.f64 im 5) -1/120)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 im 5) -1/120) (cos.f64 re)) (*.f64 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) 1) (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (*.f64 (pow.f64 im 5) -1/120)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) 3) (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) 3)) (fma.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (-.f64 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))) (-.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) 3) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 3)) (cos.f64 re)) (fma.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (-.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (-.f64 (*.f64 (pow.f64 im 10) 1/14400) (*.f64 1/36 (pow.f64 im 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (-.f64 (*.f64 (pow.f64 im 10) 1/14400) (*.f64 1/36 (pow.f64 im 6))) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 2)) (cos.f64 re)) (-.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (+.f64 (pow.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) 3) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 3))) (fma.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (-.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (-.f64 (*.f64 (pow.f64 im 10) 1/14400) (*.f64 1/36 (pow.f64 im 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (-.f64 (-.f64 (*.f64 (pow.f64 im 10) 1/14400) (*.f64 1/36 (pow.f64 im 6))) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 2))) (-.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 re) 3) (pow.f64 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))) 3) (pow.f64 (cos.f64 re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 7) -1/5040 im))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (*.f64 (pow.f64 im 5) -1/120) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 im 5) -1/120) (cos.f64 re) (*.f64 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (cos.f64 re) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (cos.f64 re) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) 2) (*.f64 (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (*.f64 (cbrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (*.f64 (cbrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 (pow.f64 im 10) 1/14400) (*.f64 1/36 (pow.f64 im 6)))) (*.f64 (cbrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 re)) (*.f64 (sqrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 re)) (*.f64 (sqrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) 1 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (sqrt.f64 (cos.f64 re))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (sqrt.f64 (cos.f64 re))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (sqrt.f64 (cos.f64 re))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (sqrt.f64 (cos.f64 re))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)) (cbrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (sqrt.f64 (cos.f64 re))) (sqrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)) (cbrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (sqrt.f64 (cos.f64 re))) (sqrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (cbrt.f64 (-.f64 (*.f64 (pow.f64 im 10) 1/14400) (*.f64 1/36 (pow.f64 im 6))))) (cbrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) 2)) (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im))) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 im 3) -1/6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 im 3) -1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 im (cbrt.f64 -1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 -1/6) (pow.f64 im 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/216 (pow.f64 (pow.f64 im 3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/36 (pow.f64 im 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -1/6) (pow.f64 im 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 -1/216 (pow.f64 (pow.f64 im 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 im 3) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 im 3) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (pow.f64 im 3) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 im 3) -1/6)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 im 5) -1/120))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 im 5) -1/120) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 im 5) -1/120)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 -1/120) (pow.f64 im 5/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 im 5) 3) -1/1728000) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 im 10) 1/14400))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 im 5)) -1/120))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 im 5) -1/120))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 im 5) 3) -1/1728000))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 im 5) -1/120)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 im 5) -1/120)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (pow.f64 im 5) -1/120)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 im 5) -1/120)) 1))))))"]],"rules":[["egg-rr",13],["egg-rr",13],["egg-rr",59]],"stop":[["node limit",1]],"time":64.14306640625,"type":"rewrite"},{"count":[[133,110]],"egraph":[[3,3107,849,0.016557751],[2,607,897,0.005602418],[1,180,985,0.001394251],[0,62,986,0.000369459]],"inputs":[["(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2)))))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6))) (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2)))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 (*.f64 re re) -1/2))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 -1/2 (*.f64 re re)) (*.f64 -1/5040 (pow.f64 im 7))))) im)","(*.f64 (+.f64 (*.f64 -1/2 (*.f64 re re)) 1) (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 1/24 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 (pow.f64 re 4) 1/24)))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (+.f64 (*.f64 1/24 (pow.f64 re 4)) (*.f64 -1/2 (*.f64 re re))))))) im)","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6))) (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(-.f64 (fma.f64 -1/720 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 1/24 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(-.f64 (fma.f64 -1/720 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 (pow.f64 re 4) 1/24))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 -1/720 (pow.f64 re 6)) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (+.f64 (*.f64 1/24 (pow.f64 re 4)) (*.f64 -1/2 (*.f64 re re)))))))) im)","(+.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) (-.f64 (*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (+.f64 (*.f64 -1/720 (pow.f64 re 6)) (+.f64 (*.f64 1/24 (pow.f64 re 4)) (*.f64 -1/2 (*.f64 re re))))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(neg.f64 (*.f64 im (cos.f64 re)))","(*.f64 im (neg.f64 (cos.f64 re)))","(*.f64 (cos.f64 re) (neg.f64 im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (neg.f64 (*.f64 im (cos.f64 re))))","(-.f64 (*.f64 (pow.f64 im 3) (*.f64 -1/6 (cos.f64 re))) (*.f64 im (cos.f64 re)))","(*.f64 (cos.f64 re) (-.f64 (*.f64 -1/6 (pow.f64 im 3)) im))","(*.f64 (cos.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (neg.f64 im)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1 (*.f64 im (cos.f64 re)) (*.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (-.f64 (*.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re))) (*.f64 im (cos.f64 re))))","(-.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/6 (pow.f64 im 3)))) (*.f64 im (cos.f64 re)))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/6 (pow.f64 im 3))) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))","(*.f64 (*.f64 -1/5040 (pow.f64 im 7)) (cos.f64 re))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re))))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))))","(*.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) (cos.f64 re))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))","(*.f64 (*.f64 -1/5040 (pow.f64 im 7)) (cos.f64 re))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re))))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))))","(*.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) (cos.f64 re))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/6 (pow.f64 im 3))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))","(*.f64 -1/120 (pow.f64 im 5))"]],"stop":[["node limit",1]],"time":36.93505859375,"type":"simplify"},{"compiler":[[4806,3324]],"time":59.114013671875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.8541228351668821],["(*.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 re)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.916629194935072],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","done",58.34261844355968],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","next",0.604410176556482],["(*.f64 (/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1)) 1) (+.f64 (+.f64 (cos.f64 re) 1) 1)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.8526113617791438],["(*.f64 (cos.f64 re) (+.f64 (fma.f64 (pow.f64 im 3) -1/6 (neg.f64 im)) (*.f64 (pow.f64 im 5) -1/120)))","fresh",0.6331361513590643],["(*.f64 (-.f64 (+.f64 (cos.f64 re) 1) 1) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.7479062017176948]],"compiler":[[31,23],[39,28],[14,11],[26,21],[40,31],[18,14],[28,23],[31,23],[39,28],[26,21],[40,31],[18,14],[28,23]],"count":[[169,7]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[166,5],"picked":[1,0]}],"min-error":[0.046875],"time":31.910888671875,"type":"prune"},{"compiler":[[101,68]],"locations":[["(*.f64 (pow.f64 im 3) -1/6)",0.11328125,false],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))",0.12109375,true],["(expm1.f64 (log1p.f64 (cos.f64 re)))",0.1328125,true],["(log1p.f64 (cos.f64 re))",0.2440074623599001,true]],"time":25.26806640625,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","im","-inf",0.19091796875],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","im","inf",0.19091796875],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","im","0",0.198974609375],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","re","-inf",0.189208984375],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","re","inf",0.204833984375],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","re","0",0.277099609375],["(expm1.f64 (log1p.f64 (cos.f64 re)))","re","-inf",0.166015625],["(expm1.f64 (log1p.f64 (cos.f64 re)))","re","inf",0.149169921875],["(expm1.f64 (log1p.f64 (cos.f64 re)))","re","0",0.193115234375],["(log1p.f64 (cos.f64 re))","re","-inf",12.3798828125],["(log1p.f64 (cos.f64 re))","re","inf",15.22314453125],["(log1p.f64 (cos.f64 re))","re","0",0.493896484375]],"time":30.0810546875,"type":"series"},{"count":[[3,99]],"egraph":[[2,6019,35,0.038636959],[1,474,35,0.009112709],[0,22,39,0.000759625]],"inputs":[["(log1p.f64 (cos.f64 re))","(expm1.f64 (log1p.f64 (cos.f64 re)))","(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log1p.f64 (cos.f64 re)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (cos.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (cos.f64 re))) (pow.f64 (cbrt.f64 (log1p.f64 (cos.f64 re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (cos.f64 re))) 2) (cbrt.f64 (log1p.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (cos.f64 re))) (sqrt.f64 (log1p.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (cos.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (cos.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (cos.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (cos.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (cos.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 (cos.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (cos.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log1p.f64 (cos.f64 re))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 re)) (pow.f64 (cbrt.f64 (cos.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (cos.f64 re) 1) 3) 1) (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) (+.f64 1 (*.f64 (+.f64 (cos.f64 re) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) -1) (+.f64 (+.f64 (cos.f64 re) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 re) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 re)))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cos.f64 re)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 (cos.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 (cos.f64 re) 1)) (cbrt.f64 (+.f64 (cos.f64 re) 1))) (cbrt.f64 (+.f64 (cos.f64 re) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 (cos.f64 re) 1)) (sqrt.f64 (+.f64 (cos.f64 re) 1)) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 im 5) -1/120) (cos.f64 re)) (*.f64 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) 1) (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (*.f64 (pow.f64 im 5) -1/120)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) 3) (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) 3)) (fma.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (-.f64 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))) (-.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) 3) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 3)) (cos.f64 re)) (fma.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (-.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (-.f64 (*.f64 1/14400 (pow.f64 im 10)) (*.f64 (pow.f64 im 6) 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (-.f64 (*.f64 1/14400 (pow.f64 im 10)) (*.f64 (pow.f64 im 6) 1/36)) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 2)) (cos.f64 re)) (-.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (+.f64 (pow.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) 3) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 3))) (fma.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (-.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (-.f64 (*.f64 1/14400 (pow.f64 im 10)) (*.f64 (pow.f64 im 6) 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) (-.f64 (-.f64 (*.f64 1/14400 (pow.f64 im 10)) (*.f64 (pow.f64 im 6) 1/36)) (pow.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) 2))) (-.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)))) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 re) 3) (pow.f64 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))) 3) (pow.f64 (cos.f64 re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (*.f64 (pow.f64 im 5) -1/120) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 im 5) -1/120) (cos.f64 re) (*.f64 (fma.f64 (pow.f64 im 3) -1/6 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (cos.f64 re) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (cos.f64 re) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 1/14400 (pow.f64 im 10)) (*.f64 (pow.f64 im 6) 1/36))) (*.f64 (cbrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (*.f64 (cbrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (*.f64 (cbrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) 2) (*.f64 (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 re)) (*.f64 (sqrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 re)) (*.f64 (sqrt.f64 (cos.f64 re)) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) 1 (*.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))) (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (sqrt.f64 (cos.f64 re))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (sqrt.f64 (cos.f64 re))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (sqrt.f64 (cos.f64 re))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (sqrt.f64 (cos.f64 re))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) 2)) (cbrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im))) (sqrt.f64 (fma.f64 (pow.f64 im 7) -1/5040 im)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (cbrt.f64 (-.f64 (*.f64 1/14400 (pow.f64 im 10)) (*.f64 (pow.f64 im 6) 1/36)))) (cbrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)))) (sqrt.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)) (cbrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6)) (sqrt.f64 (cos.f64 re))) (sqrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 7) -1/5040 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)) (cbrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 (pow.f64 im 7) -1/5040 im) (sqrt.f64 (cos.f64 re))) (sqrt.f64 (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 (pow.f64 im 5) -1/120 (*.f64 (pow.f64 im 3) -1/6))))))))"]],"rules":[["egg-rr",59],["egg-rr",24],["egg-rr",16]],"stop":[["node limit",1]],"time":67.928955078125,"type":"rewrite"},{"count":[[147,138]],"egraph":[[4,5831,837,0.027399666000000003],[3,3509,837,0.015999874],[2,745,889,0.006513999],[1,237,987,0.001681999],[0,85,994,0.000459916]],"inputs":[["(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1/4 (pow.f64 re 2)))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/96 (pow.f64 re 4)) (*.f64 -1/4 (pow.f64 re 2))))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/1440 (pow.f64 re 6)) (+.f64 (*.f64 -1/96 (pow.f64 re 4)) (*.f64 -1/4 (pow.f64 re 2)))))","(log.f64 (+.f64 1 (cos.f64 re)))","(log.f64 (+.f64 1 (cos.f64 re)))","(log.f64 (+.f64 1 (cos.f64 re)))","(log.f64 (+.f64 1 (cos.f64 re)))","(log.f64 (+.f64 1 (cos.f64 re)))","(log.f64 (+.f64 1 (cos.f64 re)))","(log.f64 (+.f64 1 (cos.f64 re)))","(log.f64 (+.f64 1 (cos.f64 re)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2)))))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6))) (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 2)","(+.f64 (log.f64 2) (*.f64 -1/4 (pow.f64 re 2)))","(+.f64 (log.f64 2) (*.f64 -1/4 (*.f64 re re)))","(fma.f64 -1/4 (*.f64 re re) (log.f64 2))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/96 (pow.f64 re 4)) (*.f64 -1/4 (pow.f64 re 2))))","(+.f64 (log.f64 2) (fma.f64 -1/96 (pow.f64 re 4) (*.f64 -1/4 (*.f64 re re))))","(+.f64 (log.f64 2) (fma.f64 -1/4 (*.f64 re re) (*.f64 -1/96 (pow.f64 re 4))))","(fma.f64 -1/4 (*.f64 re re) (fma.f64 -1/96 (pow.f64 re 4) (log.f64 2)))","(+.f64 (log.f64 2) (+.f64 (*.f64 -1/1440 (pow.f64 re 6)) (+.f64 (*.f64 -1/96 (pow.f64 re 4)) (*.f64 -1/4 (pow.f64 re 2)))))","(+.f64 (log.f64 2) (fma.f64 -1/1440 (pow.f64 re 6) (fma.f64 -1/96 (pow.f64 re 4) (*.f64 -1/4 (*.f64 re re)))))","(+.f64 (log.f64 2) (fma.f64 -1/1440 (pow.f64 re 6) (fma.f64 -1/4 (*.f64 re re) (*.f64 -1/96 (pow.f64 re 4)))))","(fma.f64 -1/1440 (pow.f64 re 6) (fma.f64 -1/4 (*.f64 re re) (fma.f64 -1/96 (pow.f64 re 4) (log.f64 2))))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","(log.f64 (+.f64 1 (cos.f64 re)))","(log1p.f64 (cos.f64 re))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 1 (*.f64 (*.f64 re re) -1/2))","(fma.f64 (*.f64 re re) -1/2 1)","(fma.f64 re (*.f64 re -1/2) 1)","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(fma.f64 1/24 (pow.f64 re 4) (+.f64 1 (*.f64 (*.f64 re re) -1/2)))","(fma.f64 (pow.f64 re 4) 1/24 (fma.f64 (*.f64 re re) -1/2 1))","(fma.f64 re (*.f64 re -1/2) (fma.f64 (pow.f64 re 4) 1/24 1))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(fma.f64 1/24 (pow.f64 re 4) (+.f64 1 (fma.f64 -1/2 (*.f64 re re) (*.f64 (pow.f64 re 6) -1/720))))","(+.f64 (fma.f64 (*.f64 re re) -1/2 (*.f64 (pow.f64 re 6) -1/720)) (fma.f64 (pow.f64 re 4) 1/24 1))","(fma.f64 (pow.f64 re 4) 1/24 (fma.f64 re (*.f64 re -1/2) (fma.f64 (pow.f64 re 6) -1/720 1)))","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(cos.f64 re)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im)","(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))))","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2)))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (*.f64 -1/2 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)) (*.f64 re re))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/2 (*.f64 (*.f64 re re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)) (*.f64 -1/5040 (pow.f64 im 7))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 (*.f64 re re) (*.f64 -1/2 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im)) (*.f64 -1/6 (pow.f64 im 3))))) im)","(*.f64 (fma.f64 re (*.f64 re -1/2) 1) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (fma.f64 re (*.f64 re -1/2) 1) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (*.f64 re re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)) (*.f64 1/24 (*.f64 (pow.f64 re 4) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (fma.f64 (pow.f64 re 4) 1/24 (*.f64 re (*.f64 re -1/2))))))) im)","(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))) (fma.f64 (pow.f64 re 4) 1/24 (*.f64 re (*.f64 re -1/2))) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6))) (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(-.f64 (fma.f64 -1/720 (*.f64 (pow.f64 re 6) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (*.f64 re re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)) (*.f64 1/24 (*.f64 (pow.f64 re 4) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)))))))) im)","(-.f64 (fma.f64 (pow.f64 re 6) (*.f64 -1/720 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (fma.f64 (pow.f64 re 4) 1/24 (*.f64 re (*.f64 re -1/2)))))))) im)","(+.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) (-.f64 (*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (fma.f64 (pow.f64 re 4) 1/24 (fma.f64 (pow.f64 re 6) -1/720 (*.f64 re (*.f64 re -1/2))))) im))","(+.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 -1/120 (pow.f64 im 5)))) (fma.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))) (fma.f64 (pow.f64 re 4) 1/24 (fma.f64 (pow.f64 re 6) -1/720 (*.f64 re (*.f64 re -1/2)))) (neg.f64 im)))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(neg.f64 (*.f64 (cos.f64 re) im))","(*.f64 (cos.f64 re) (neg.f64 im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(fma.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3)) (neg.f64 (*.f64 (cos.f64 re) im)))","(-.f64 (*.f64 (cos.f64 re) (*.f64 -1/6 (pow.f64 im 3))) (*.f64 (cos.f64 re) im))","(*.f64 (cos.f64 re) (-.f64 (*.f64 -1/6 (pow.f64 im 3)) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(fma.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3)) (fma.f64 -1 (*.f64 (cos.f64 re) im) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(fma.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3)) (-.f64 (*.f64 (cos.f64 re) (*.f64 -1/120 (pow.f64 im 5))) (*.f64 (cos.f64 re) im)))","(fma.f64 (cos.f64 re) (*.f64 -1/6 (pow.f64 im 3)) (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (neg.f64 im))))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5))) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(*.f64 (cos.f64 re) (*.f64 -1/5040 (pow.f64 im 7)))","(*.f64 (pow.f64 im 7) (*.f64 (cos.f64 re) -1/5040))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 (cos.f64 re) (*.f64 -1/5040 (pow.f64 im 7))))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7))))","(*.f64 (cos.f64 re) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 -1/120 (pow.f64 im 5))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3)) (fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3)) (fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 (cos.f64 re) (*.f64 -1/5040 (pow.f64 im 7)))))","(*.f64 (cos.f64 re) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))))","(*.f64 (cos.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 -1/120 (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(*.f64 (cos.f64 re) (*.f64 -1/5040 (pow.f64 im 7)))","(*.f64 (pow.f64 im 7) (*.f64 (cos.f64 re) -1/5040))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 (cos.f64 re) (*.f64 -1/5040 (pow.f64 im 7))))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7))))","(*.f64 (cos.f64 re) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 -1/120 (pow.f64 im 5))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3)) (fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3)) (fma.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)) (*.f64 (cos.f64 re) (*.f64 -1/5040 (pow.f64 im 7)))))","(*.f64 (cos.f64 re) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))))","(*.f64 (cos.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 -1/120 (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))"]],"stop":[["node limit",1]],"time":50.14404296875,"type":"simplify"},{"compiler":[[4419,3069]],"time":55.7119140625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 re)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.916629194935072],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","done",58.34261844355968],["(*.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) -1) (+.f64 (+.f64 (cos.f64 re) 1) 1)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.8138137997009434],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","done",0.604410176556482],["(*.f64 (fma.f64 (sqrt.f64 (+.f64 (cos.f64 re) 1)) (sqrt.f64 (+.f64 (cos.f64 re) 1)) -1) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",1.5967797626349678],["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (cos.f64 re) 1) 3) 1) (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) (+.f64 1 (*.f64 (+.f64 (cos.f64 re) 1) 1)))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.8020491585275955],["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.8541228351668821],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","next",0.5865001667880401]],"compiler":[[39,28],[14,11],[39,30],[26,21],[34,27],[48,37],[31,23],[22,17],[39,28],[39,30],[34,27],[48,37],[31,23],[22,17]],"count":[[159,8]],"kept":[{"done":[1,1],"fresh":[5,1],"new":[152,5],"picked":[1,1]}],"min-error":[0.04296875],"time":29.820068359375,"type":"prune"},{"compiler":[[79,53]],"locations":[["(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))))",0.00390625,true],["(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))",0.00390625,true],["(cos.f64 re)",0.0234375,false],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))",0.12109375,true]],"time":20.091064453125,"type":"localize"},{"count":[[3,48]],"series":[["(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))))","im","-inf",0.1650390625],["(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))))","im","inf",0.2109375],["(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))))","im","0",0.18505859375],["(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","im","-inf",0.739990234375],["(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","im","inf",0.631103515625],["(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","im","0",0.333984375],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","im","-inf",0.31591796875],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","im","inf",0.2861328125],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","im","0",0.25],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","re","-inf",0.31494140625],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","re","inf",0.511962890625],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","re","0",0.407958984375]],"time":4.56298828125,"type":"series"},{"count":[[3,124]],"egraph":[[2,4220,57,0.030266249999999998],[1,387,57,0.00683],[0,18,63,0.000665375]],"inputs":[["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/120 (pow.f64 im 5)) (cos.f64 re)) (*.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (*.f64 -1/120 (pow.f64 im 5))) (*.f64 (cos.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 re) 3) (pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 3) (pow.f64 (cos.f64 re) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 re)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 re) 3) (pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 3) (pow.f64 (cos.f64 re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (*.f64 -1/120 (pow.f64 im 5)) (*.f64 (cos.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/120 (pow.f64 im 5)) (cos.f64 re) (*.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)) (cos.f64 re)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 im (*.f64 -1/5040 (pow.f64 im 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 -1 im im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 1 im im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 im 1 im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (cbrt.f64 im) im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2) im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 (neg.f64 (sqrt.f64 im)) (sqrt.f64 im) im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 im))) (sqrt.f64 im) im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 im -1 im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) (fma.f64 (neg.f64 (sqrt.f64 im)) (neg.f64 (sqrt.f64 im)) im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -1/5040 (pow.f64 im 7) im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/5040 (pow.f64 im 7)) 1) im)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 im))) (pow.f64 (cbrt.f64 im) 2) (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 im))) (pow.f64 (cbrt.f64 im) 2) (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 -1/5040 (pow.f64 im 7)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 im))) (pow.f64 (cbrt.f64 im) 2) (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) 2) (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 im))) (pow.f64 (cbrt.f64 im) 2) (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 im))) (pow.f64 (cbrt.f64 im) 2) (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (cbrt.f64 (pow.f64 im 14))) (cbrt.f64 (pow.f64 im 7)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 im))) (pow.f64 (cbrt.f64 im) 2) (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (pow.f64 im 7/2)) (pow.f64 im 7/2) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 im))) (pow.f64 (cbrt.f64 im) 2) (*.f64 (neg.f64 (cbrt.f64 im)) (pow.f64 (cbrt.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 -1/5040 (pow.f64 im 7)) (neg.f64 (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) 2) (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (cbrt.f64 (pow.f64 im 14))) (cbrt.f64 (pow.f64 im 7)) (neg.f64 (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (pow.f64 im 7/2)) (pow.f64 im 7/2) (neg.f64 (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (neg.f64 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 -1/5040 (pow.f64 im 7)) (neg.f64 (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) 2) (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (cbrt.f64 (pow.f64 im 14))) (cbrt.f64 (pow.f64 im 7)) (neg.f64 (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (pow.f64 im 7/2)) (pow.f64 im 7/2) (neg.f64 (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2))))) (fma.f64 (neg.f64 (cbrt.f64 im)) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)) (*.f64 (cbrt.f64 im) (*.f64 -1 (pow.f64 (cbrt.f64 im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im))))) (fma.f64 (neg.f64 (sqrt.f64 im)) (*.f64 -1 (sqrt.f64 im)) (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im))))) (fma.f64 (neg.f64 (sqrt.f64 im)) (*.f64 -1 (sqrt.f64 im)) (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 -1/5040 (pow.f64 im 7)) (neg.f64 (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im))))) (fma.f64 (neg.f64 (sqrt.f64 im)) (*.f64 -1 (sqrt.f64 im)) (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) 2) (cbrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im))))) (fma.f64 (neg.f64 (sqrt.f64 im)) (*.f64 -1 (sqrt.f64 im)) (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (sqrt.f64 (*.f64 -1/5040 (pow.f64 im 7))) (neg.f64 (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im))))) (fma.f64 (neg.f64 (sqrt.f64 im)) (*.f64 -1 (sqrt.f64 im)) (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (cbrt.f64 (pow.f64 im 14))) (cbrt.f64 (pow.f64 im 7)) (neg.f64 (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im))))) (fma.f64 (neg.f64 (sqrt.f64 im)) (*.f64 -1 (sqrt.f64 im)) (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/5040 (pow.f64 im 7/2)) (pow.f64 im 7/2) (neg.f64 (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im))))) (fma.f64 (neg.f64 (sqrt.f64 im)) (*.f64 -1 (sqrt.f64 im)) (*.f64 (sqrt.f64 im) (*.f64 -1 (sqrt.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 -1/5040 (pow.f64 im 7) im))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -1/5040 (pow.f64 im 7) im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 -1/5040 (pow.f64 im 7) 0) im)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/5040 (pow.f64 im 7) im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)) (pow.f64 (cbrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)) 2) (cbrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)) (sqrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -1/5040 (pow.f64 im 7)) 3) (pow.f64 im 3)) (+.f64 (pow.f64 (*.f64 -1/5040 (pow.f64 im 7)) 2) (-.f64 (*.f64 im im) (*.f64 (*.f64 -1/5040 (pow.f64 im 7)) im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 -1/5040 (pow.f64 im 7)) 2) (*.f64 im im)) (fma.f64 -1/5040 (pow.f64 im 7) im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -1/5040 (pow.f64 im 7) im))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 -1/5040 (pow.f64 im 7))) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 -1/5040 (pow.f64 im 7))) (+.f64 1 (expm1.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 im) (exp.f64 (*.f64 -1/5040 (pow.f64 im 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 im)) (exp.f64 (*.f64 -1/5040 (pow.f64 im 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 -1/5040 (pow.f64 im 7))) (+.f64 1 (expm1.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/5040 (pow.f64 im 7) im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -1/5040 (pow.f64 im 7) im)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)) (*.f64 -1/120 (pow.f64 im 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/120 (pow.f64 im 5)) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/120 (pow.f64 im 5)) 1) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/6 (pow.f64 im 3))) (fma.f64 -1/5040 (pow.f64 im 7) im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) (pow.f64 (cbrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 2) (cbrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) (sqrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -1/120 (pow.f64 im 5)) 3) (pow.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)) 3)) (+.f64 (pow.f64 (*.f64 -1/120 (pow.f64 im 5)) 2) (-.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)) 2) (*.f64 (*.f64 -1/120 (pow.f64 im 5)) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 -1/120 (pow.f64 im 5)) 2) (pow.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)) 2)) (-.f64 (*.f64 -1/120 (pow.f64 im 5)) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) (exp.f64 (*.f64 -1/120 (pow.f64 im 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) (exp.f64 (*.f64 -1/120 (pow.f64 im 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 -1/120 (pow.f64 im 5))) (+.f64 1 (expm1.f64 (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) im)))) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",70],["egg-rr",24]],"stop":[["node limit",1]],"time":62.639892578125,"type":"rewrite"},{"count":[[172,160]],"egraph":[[4,5533,974,0.026046292],[3,3448,974,0.015135125],[2,658,1022,0.00613475],[1,207,1110,0.001592834],[0,69,1111,0.000423292]],"inputs":[["(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2)))))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6))) (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 -1 im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(*.f64 -1 im)","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1 im))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1 im)))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))))","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (*.f64 -1/5040 (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7))))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))))","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (*.f64 -1/5040 (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7))))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im)","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2)))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (*.f64 -1/2 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)) (*.f64 re re))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 (*.f64 re re) -1/2))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (*.f64 re (*.f64 re -1/2)) (*.f64 -1/5040 (pow.f64 im 7))))) im)","(*.f64 (+.f64 (*.f64 re (*.f64 -1/2 re)) 1) (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im))","(-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 1/24 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 (pow.f64 re 4) 1/24)))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (+.f64 (*.f64 re (*.f64 re -1/2)) (*.f64 1/24 (pow.f64 re 4))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (+.f64 (*.f64 re (*.f64 -1/2 re)) (*.f64 1/24 (pow.f64 re 4))))))) im)","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6))) (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 2))) (*.f64 1/24 (*.f64 (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(-.f64 (fma.f64 -1/720 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 1/24 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 4)))))))) im)","(-.f64 (fma.f64 -1/720 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (pow.f64 re 6)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/2 (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 re re)) (*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (*.f64 (pow.f64 re 4) 1/24))))))) im)","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (*.f64 -1/720 (pow.f64 re 6)) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (+.f64 (*.f64 re (*.f64 re -1/2)) (*.f64 1/24 (pow.f64 re 4)))))))) im)","(+.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) (-.f64 (*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (+.f64 (+.f64 (*.f64 re (*.f64 -1/2 re)) (*.f64 1/24 (pow.f64 re 4))) (*.f64 -1/720 (pow.f64 re 6)))) im))","(+.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) (fma.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (+.f64 (+.f64 (*.f64 re (*.f64 -1/2 re)) (*.f64 1/24 (pow.f64 re 4))) (*.f64 -1/720 (pow.f64 re 6))) (neg.f64 im)))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 (cos.f64 re) (-.f64 (+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7)))) im))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 -1 (*.f64 (cos.f64 re) im))","(neg.f64 (*.f64 im (cos.f64 re)))","(*.f64 im (neg.f64 (cos.f64 re)))","(*.f64 (cos.f64 re) (neg.f64 im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (*.f64 -1 (*.f64 (cos.f64 re) im)))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (neg.f64 (*.f64 im (cos.f64 re))))","(-.f64 (*.f64 (pow.f64 im 3) (*.f64 -1/6 (cos.f64 re))) (*.f64 im (cos.f64 re)))","(*.f64 (cos.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (neg.f64 im)))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1 (*.f64 im (cos.f64 re)) (*.f64 (*.f64 -1/120 (cos.f64 re)) (pow.f64 im 5))))","(fma.f64 (*.f64 -1/6 (cos.f64 re)) (pow.f64 im 3) (-.f64 (*.f64 (pow.f64 im 5) (*.f64 -1/120 (cos.f64 re))) (*.f64 im (cos.f64 re))))","(-.f64 (*.f64 (cos.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) (*.f64 im (cos.f64 re)))","(*.f64 (cos.f64 re) (-.f64 (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5))) im))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))","(*.f64 (*.f64 -1/5040 (pow.f64 im 7)) (cos.f64 re))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re))))","(fma.f64 (*.f64 -1/5040 (cos.f64 re)) (pow.f64 im 7) (*.f64 (pow.f64 im 5) (*.f64 -1/120 (cos.f64 re))))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 (*.f64 -1/5040 (cos.f64 re)) (pow.f64 im 7) (*.f64 (pow.f64 im 5) (*.f64 -1/120 (cos.f64 re)))))","(*.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) (cos.f64 re))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))","(*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))","(*.f64 (*.f64 -1/5040 (pow.f64 im 7)) (cos.f64 re))","(+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))","(fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re))))","(fma.f64 (*.f64 -1/5040 (cos.f64 re)) (pow.f64 im 7) (*.f64 (pow.f64 im 5) (*.f64 -1/120 (cos.f64 re))))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7))))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 -1/120 (*.f64 (pow.f64 im 5) (cos.f64 re)) (*.f64 -1/5040 (*.f64 (pow.f64 im 7) (cos.f64 re)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 (*.f64 -1/5040 (cos.f64 re)) (pow.f64 im 7) (*.f64 (pow.f64 im 5) (*.f64 -1/120 (cos.f64 re)))))","(*.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) (cos.f64 re))","(+.f64 (*.f64 -1/6 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 -1 (*.f64 (cos.f64 re) im)) (+.f64 (*.f64 -1/120 (*.f64 (cos.f64 re) (pow.f64 im 5))) (*.f64 -1/5040 (*.f64 (cos.f64 re) (pow.f64 im 7))))))","(*.f64 (-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im) (cos.f64 re))","(*.f64 (-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im) (cos.f64 re))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))","(fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im))","(-.f64 (*.f64 -1/5040 (pow.f64 im 7)) im)","(*.f64 -1 im)","(neg.f64 im)","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1 im))","(fma.f64 -1/6 (pow.f64 im 3) (neg.f64 im))","(-.f64 (*.f64 -1/6 (pow.f64 im 3)) im)","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1 im)))","(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (neg.f64 im)))","(fma.f64 -1/120 (pow.f64 im 5) (-.f64 (*.f64 -1/6 (pow.f64 im 3)) im))","(-.f64 (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5))) im)","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))))","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im)","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (*.f64 -1/5040 (pow.f64 im 7)))","(fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7))))","(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7))))","(fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5))))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))))","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im)","(*.f64 -1/5040 (pow.f64 im 7))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (*.f64 -1/5040 (pow.f64 im 7)))","(fma.f64 -1/120 (pow.f64 im 5) (*.f64 -1/5040 (pow.f64 im 7)))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 -1/5040 (pow.f64 im 7))))","(fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7))))","(fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5))))","(+.f64 (*.f64 -1/120 (pow.f64 im 5)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 -1 im))))","(-.f64 (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/5040 (pow.f64 im 7)))) im)","(-.f64 (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 -1/6 (pow.f64 im 3) (*.f64 -1/120 (pow.f64 im 5)))) im)"]],"stop":[["node limit",1]],"time":50.27197265625,"type":"simplify"},{"compiler":[[6195,4213]],"time":79.297119140625,"type":"eval"},{"alts":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","done",58.34261844355968],["(*.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) -1) (+.f64 (+.f64 (cos.f64 re) 1) 1)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.8138137997009434],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","done",0.604410176556482],["(*.f64 (fma.f64 (sqrt.f64 (+.f64 (cos.f64 re) 1)) (sqrt.f64 (+.f64 (cos.f64 re) 1)) -1) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",1.5967797626349678],["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re))) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","fresh",0.8541228351668821],["(*.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 re)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","fresh",0.916629194935072],["(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (cos.f64 re) 1) 3) 1) (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) (+.f64 1 (*.f64 (+.f64 (cos.f64 re) 1) 1)))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","fresh",0.8020491585275955],["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","done",0.5865001667880401]],"compiler":[[14,11],[39,30],[26,21],[34,27],[29,21],[37,26],[48,37],[22,17]],"count":[[224,8]],"kept":[{"done":[2,2],"fresh":[5,3],"new":[216,2],"picked":[1,1]}],"min-error":[0.04296875],"time":31.8408203125,"type":"prune"},{"accuracy":[0.5865001667880401],"baseline":[0.5865001667880401],"branch":[["re",0.5865001667880401,1],["im",0.5865001667880401,1],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))",0.5865001667880401,1],["(*.f64 1/2 (cos.f64 re))",0.5865001667880401,1],["(cos.f64 re)",0.5865001667880401,1],["(-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))",0.5865001667880401,1]],"compiler":[[3,2],[3,2],[14,11],[6,5],[4,3],[9,7],[432,291]],"count":[[15,1]],"inputs":[["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re))) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 re)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2)) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) -1) (+.f64 (+.f64 (cos.f64 re) 1) 1)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (fma.f64 (sqrt.f64 (+.f64 (cos.f64 re) 1)) (sqrt.f64 (+.f64 (cos.f64 re) 1)) -1) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (/.f64 (-.f64 (pow.f64 (+.f64 (cos.f64 re) 1) 3) 1) (fma.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1) (+.f64 1 (*.f64 (+.f64 (cos.f64 re) 1) 1)))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 re)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 re))) 2)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (expm1.f64 (log1p.f64 (cos.f64 re))) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 re) 1) (+.f64 (cos.f64 re) 1)) 1) (+.f64 (+.f64 (cos.f64 re) 1) 1)) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (-.f64 (+.f64 (cos.f64 re) 1) 1) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) -1/120) (*.f64 (pow.f64 im 3) -1/6)) (fma.f64 (pow.f64 im 7) -1/5040 (neg.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (fma.f64 (pow.f64 im 3) -1/6 (neg.f64 im)) (*.f64 (pow.f64 im 5) -1/120)))","(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))"]],"link":["."],"name":["math.sin on complex, imaginary part"],"oracle":[58.831587053529645],"outputs":[["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))"]],"time":34.466064453125,"times":[["re",5.7109375],["im",6.10205078125],["(*.f64 (*.f64 1/2 (cos.f64 re)) (-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))",2.2490234375],["(*.f64 1/2 (cos.f64 re))",5.05712890625],["(cos.f64 re)",4.869140625],["(-.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))",2.481201171875]],"type":"regimes"},{"compiler":[[22,17]],"egraph":[[3,26,29,0.00012925099999999999],[2,25,29,9.870899999999999e-5],[1,23,29,6.7501e-5],[0,18,29,3.6792e-5]],"inputs":[["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 re) (fma.f64 -1/120 (pow.f64 im 5) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (neg.f64 im)))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.93603515625,"type":"simplify"},{"time":0.02001953125,"type":"soundness"},{"compiler":[[22,17]],"remove-preprocessing":[[]],"time":13.760986328125,"type":"end"}]
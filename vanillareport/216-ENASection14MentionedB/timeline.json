[{"compiler":[[15,11]],"method":["search"],"sampling":[[12,7.32064247131411e-7,3.576278686167819e-10,0.9999992675781251],[11,7.3170661926274e-7,7.152557372877739e-10,0.999999267578125],[10,7.309913635254522e-7,1.4305114745755479e-9,0.999999267578125],[9,7.295608520508224e-7,2.861022949205306e-9,0.999999267578125],[8,7.266998291016171e-7,5.722045898410612e-9,0.999999267578125],[7,7.209777832031523e-7,1.1444091796875434e-8,0.999999267578125],[6,7.095336914062769e-7,2.2888183593750867e-8,0.9999992675781251],[5,6.86645507812526e-7,4.5776367187501735e-8,0.9999992675781251],[4,6.408691406250243e-7,9.155273437500347e-8,0.999999267578125],[3,5.493164062500208e-7,1.8310546875000694e-7,0.999999267578125],[2,3.662109375000139e-7,3.662109375000139e-7,0.9999992675781251],[1,0.0,7.324218750000278e-7,0.999999267578125],[0,0.0,7.324218750000278e-7,0.999999267578125]],"time":0.931884765625,"type":"analyze"},{"outcomes":[["body",256,"valid",274.236083984375,8256]],"time":281.839111328125,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.5e-6],[18,7273,8,0.097830584],[17,6327,8,0.084143626],[16,6059,8,0.072376209],[15,5981,8,0.061685083999999994],[14,5885,8,0.053978042],[13,5581,8,0.047119334],[12,5270,8,0.039967209],[11,4312,8,0.031706209],[10,2895,8,0.022125542],[9,1536,8,0.014166209],[8,738,8,0.0069023750000000005],[7,362,8,0.0029185409999999998],[6,131,8,0.0013376249999999998],[5,77,8,0.00076375],[4,49,10,0.000483458],[3,32,10,0.000289667],[2,21,10,0.0001745],[1,14,10,9.670800000000001e-5],[0,7,10,4.6167e-5]],"inputs":[["0"],["(/.f64 10 (-.f64 1 (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 10 (-.f64 1 (*.f64 x x)))","(/.f64 10 (fma.f64 x (neg.f64 x) 1))","(/.f64 -10 (fma.f64 x x -1))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":120.89599609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[18,7273,8,0.096939417],[17,6327,8,0.08334825],[16,6059,8,0.071808292],[15,5981,8,0.061423334],[14,5885,8,0.05377875],[13,5581,8,0.046938],[12,5270,8,0.039806709],[11,4312,8,0.031647042],[10,2895,8,0.022135416999999998],[9,1536,8,0.014017874999999999],[8,738,8,0.006826375],[7,362,8,0.002898083],[6,131,8,0.0013271659999999998],[5,77,8,0.000751416],[4,49,10,0.00047766599999999996],[3,32,10,0.000289249],[2,21,10,0.000174999],[1,14,10,9.754100000000001e-5],[0,7,10,4.3083e-5]],"inputs":[["(/.f64 10 (-.f64 1 (*.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 10 (-.f64 1 (*.f64 x x)))","(/.f64 10 (fma.f64 x (neg.f64 x) 1))","(/.f64 -10 (fma.f64 x x -1))"]],"stop":[["node limit",1]],"time":108.458984375,"type":"simplify"},{"compiler":[[14,10]],"time":0.39599609375,"type":"eval"},{"alts":[["(/.f64 -10 (fma.f64 x x -1))","next",0.23046875]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.23046875],"time":1.294921875,"type":"prune"},{"compiler":[[14,9]],"locations":[["(/.f64 -10 (fma.f64 x x -1))",0.23046875,true]],"time":3.592041015625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 -10 (fma.f64 x x -1))","x","-inf",0.3330078125],["(/.f64 -10 (fma.f64 x x -1))","x","inf",0.443115234375],["(/.f64 -10 (fma.f64 x x -1))","x","0",0.376953125]],"time":1.208984375,"type":"series"},{"count":[[1,20]],"egraph":[[2,1370,8,0.014498833999999999],[1,122,8,0.002008376],[0,6,8,0.000213542]],"inputs":[["(/.f64 -10 (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -10 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 10 (/.f64 1 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -10)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))))))))"]],"rules":[["egg-rr",20]],"stop":[["node limit",1]],"time":31.1630859375,"type":"rewrite"},{"count":[[32,35]],"egraph":[[4,4868,200,0.021965417],[3,1162,203,0.010190167],[2,338,206,0.002646417],[1,112,210,0.0007838750000000001],[0,38,226,0.000198625]],"inputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))"]],"method":["egg-herbie"],"outputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(fma.f64 10 (*.f64 x x) 10)","(*.f64 10 (fma.f64 x x 1))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(+.f64 (fma.f64 10 (*.f64 x x) 10) (*.f64 10 (pow.f64 x 4)))","(fma.f64 10 (*.f64 x x) (fma.f64 10 (pow.f64 x 4) 10))","(*.f64 10 (+.f64 (pow.f64 x 4) (fma.f64 x x 1)))","(fma.f64 10 (fma.f64 x x (pow.f64 x 4)) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 10 (pow.f64 x 6) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 10 (pow.f64 x 6) (fma.f64 10 (pow.f64 x 4) 10)))","(fma.f64 10 (fma.f64 x x (pow.f64 x 6)) (fma.f64 10 (pow.f64 x 4) 10))","(fma.f64 10 (+.f64 (pow.f64 x 4) (fma.f64 x x (pow.f64 x 6))) 10)","(*.f64 (fma.f64 x x 1) (fma.f64 10 (pow.f64 x 4) 10))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x))))","(-.f64 (/.f64 -10 (*.f64 x x)) (/.f64 10 (pow.f64 x 4)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))) (/.f64 10 (pow.f64 x 8)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (+.f64 (/.f64 10 (pow.f64 x 6)) (/.f64 10 (pow.f64 x 8)))))","(+.f64 (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6))) (/.f64 -10 (pow.f64 x 8)))","(+.f64 (/.f64 -10 (*.f64 x x)) (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (pow.f64 x 8))) (/.f64 -10 (pow.f64 x 6))))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x))))","(-.f64 (/.f64 -10 (*.f64 x x)) (/.f64 10 (pow.f64 x 4)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))) (/.f64 10 (pow.f64 x 8)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (+.f64 (/.f64 10 (pow.f64 x 6)) (/.f64 10 (pow.f64 x 8)))))","(+.f64 (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6))) (/.f64 -10 (pow.f64 x 8)))","(+.f64 (/.f64 -10 (*.f64 x x)) (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (pow.f64 x 8))) (/.f64 -10 (pow.f64 x 6))))"]],"stop":[["node limit",1]],"time":35.75,"type":"simplify"},{"compiler":[[394,307]],"time":6.179931640625,"type":"eval"},{"alts":[["(/.f64 -10 (fma.f64 x x -1))","done",0.23046875],["(sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))","fresh",21.58636506050374],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","fresh",0.406913769536884],["(pow.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2)","fresh",22.133846337915983],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","next",0.340507519536884],["(*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))","fresh",0.8069079102745652]],"compiler":[[7,5],[10,8],[9,7],[10,8],[9,7],[18,14],[10,8],[9,7],[10,8],[9,7],[18,14]],"count":[[36,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[35,5],"picked":[1,1]}],"min-error":[0.046875],"time":6.030029296875,"type":"prune"},{"compiler":[[23,16]],"locations":[["(/.f64 1 (fma.f64 x x -1))",0.234375,true],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)",0.27734375,true]],"time":5.60791015625,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 1 (fma.f64 x x -1))","x","-inf",0.18603515625],["(/.f64 1 (fma.f64 x x -1))","x","inf",0.24609375],["(/.f64 1 (fma.f64 x x -1))","x","0",0.22314453125],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","x","-inf",0.199951171875],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","x","inf",0.182861328125],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","x","0",0.213134765625]],"time":1.338134765625,"type":"series"},{"count":[[2,36]],"egraph":[[2,1641,16,0.01702796],[1,154,16,0.0024925430000000003],[0,8,16,0.000264709]],"inputs":[["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","(/.f64 1 (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -10 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x -1) -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 10 (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x -1))) (cbrt.f64 (pow.f64 (fma.f64 x x -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) -2)) (/.f64 1 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -1/2) (pow.f64 (fma.f64 x x -1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) -1) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x x -1)) -1) (pow.f64 (sqrt.f64 (fma.f64 x x -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -1) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x x -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (fma.f64 x x -1))))))))"]],"rules":[["egg-rr",20],["egg-rr",16]],"stop":[["node limit",1]],"time":36.160888671875,"type":"rewrite"},{"count":[[60,66]],"egraph":[[4,6068,406,0.027159457999999997],[3,1574,406,0.013258625],[2,468,406,0.003698791],[1,156,414,0.001078208],[0,52,438,0.000269]],"inputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","-1","(-.f64 (*.f64 -1 (pow.f64 x 2)) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 (pow.f64 x 4))) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 6)) (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 (pow.f64 x 4)))) 1)","(/.f64 1 (pow.f64 x 2))","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))","(/.f64 1 (pow.f64 x 2))","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(fma.f64 10 (*.f64 x x) 10)","(fma.f64 x (*.f64 10 x) 10)","(*.f64 10 (fma.f64 x x 1))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(+.f64 (fma.f64 10 (*.f64 x x) 10) (*.f64 10 (pow.f64 x 4)))","(fma.f64 10 (*.f64 x x) (fma.f64 10 (pow.f64 x 4) 10))","(+.f64 10 (*.f64 10 (fma.f64 x x (pow.f64 x 4))))","(*.f64 10 (+.f64 (pow.f64 x 4) (fma.f64 x x 1)))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 10 (pow.f64 x 6) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 10 (pow.f64 x 6) (fma.f64 10 (pow.f64 x 4) 10)))","(fma.f64 10 (fma.f64 x x (pow.f64 x 6)) (fma.f64 10 (pow.f64 x 4) 10))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(/.f64 (/.f64 -10 x) x)","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (/.f64 -10 (pow.f64 x 6)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))) (/.f64 10 (pow.f64 x 8)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (+.f64 (/.f64 10 (pow.f64 x 6)) (/.f64 10 (pow.f64 x 8)))))","(+.f64 (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6))) (/.f64 -10 (pow.f64 x 8)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (+.f64 (/.f64 -10 (pow.f64 x 8)) (/.f64 -10 (pow.f64 x 6))))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(/.f64 (/.f64 -10 x) x)","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (/.f64 -10 (pow.f64 x 6)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))) (/.f64 10 (pow.f64 x 8)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (+.f64 (/.f64 10 (pow.f64 x 6)) (/.f64 10 (pow.f64 x 8)))))","(+.f64 (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6))) (/.f64 -10 (pow.f64 x 8)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (+.f64 (/.f64 -10 (pow.f64 x 8)) (/.f64 -10 (pow.f64 x 6))))","-1","(-.f64 (*.f64 -1 (pow.f64 x 2)) 1)","(fma.f64 -1 (*.f64 x x) -1)","(fma.f64 (*.f64 x x) -1 -1)","(-.f64 -1 (*.f64 x x))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 (pow.f64 x 4))) 1)","(+.f64 (*.f64 -1 (+.f64 (*.f64 x x) (pow.f64 x 4))) -1)","(fma.f64 -1 (fma.f64 x x (pow.f64 x 4)) -1)","(-.f64 -1 (fma.f64 x x (pow.f64 x 4)))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 x 6)) (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -1 (pow.f64 x 4)))) 1)","(+.f64 (fma.f64 -1 (pow.f64 x 6) (*.f64 -1 (+.f64 (*.f64 x x) (pow.f64 x 4)))) -1)","(+.f64 -1 (-.f64 (neg.f64 (fma.f64 x x (pow.f64 x 4))) (pow.f64 x 6)))","(-.f64 (-.f64 -1 (fma.f64 x x (pow.f64 x 4))) (pow.f64 x 6))","(-.f64 -1 (+.f64 (pow.f64 x 4) (fma.f64 x x (pow.f64 x 6))))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 (/.f64 1 x) x)","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 (/.f64 1 x) x))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 (/.f64 1 x) x) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 6)) (/.f64 1 (pow.f64 x 8)))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 (/.f64 1 x) x) (/.f64 1 (pow.f64 x 6)))))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(/.f64 (/.f64 1 x) x)","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 (/.f64 1 x) x))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 (/.f64 1 x) x) (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 6)) (/.f64 1 (pow.f64 x 8)))))","(+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 (/.f64 1 x) x) (/.f64 1 (pow.f64 x 6)))))"]],"stop":[["node limit",1]],"time":42.9990234375,"type":"simplify"},{"compiler":[[794,630]],"time":12.612060546875,"type":"eval"},{"alts":[["(/.f64 -10 (fma.f64 x x -1))","done",0.23046875],["(sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))","fresh",21.58636506050374],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","next",0.406913769536884],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) -2)) (/.f64 1 (cbrt.f64 (fma.f64 x x -1)))) -10)","fresh",0.5880051758319566],["(/.f64 (/.f64 -10 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.728412841895471],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","done",0.340507519536884],["(*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))","fresh",0.8069079102745652],["(*.f64 (pow.f64 (pow.f64 (fma.f64 x x -1) -1/2) 2) -10)","fresh",42.46388627930533]],"compiler":[[7,5],[10,8],[9,7],[18,14],[16,12],[9,7],[18,14],[11,9],[10,8],[9,7],[18,14],[16,12],[18,14],[11,9]],"count":[[72,8]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[66,3],"picked":[1,1]}],"min-error":[0.015625],"time":10.653076171875,"type":"prune"},{"compiler":[[22,15]],"locations":[["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)",0.3203125,true],["(*.f64 (fma.f64 x x -1) -1/10)",0.375,true]],"time":5.98291015625,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","x","-inf",0.19580078125],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","x","inf",0.214111328125],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","x","0",0.198974609375],["(*.f64 (fma.f64 x x -1) -1/10)","x","-inf",0.345947265625],["(*.f64 (fma.f64 x x -1) -1/10)","x","inf",0.401123046875],["(*.f64 (fma.f64 x x -1) -1/10)","x","0",0.409912109375]],"time":1.876953125,"type":"series"},{"count":[[2,36]],"egraph":[[2,1628,16,0.017562626],[1,146,16,0.002579251],[0,7,19,0.000263292]],"inputs":[["(*.f64 (fma.f64 x x -1) -1/10)","(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) -1/10) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/10 (*.f64 x x)) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (fma.f64 x x -1) -1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -1) -1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/100 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -10 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2) -1) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) (pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x x -1) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (fma.f64 x x -1) -1/10) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (fma.f64 x x -1)) -1/10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2)) (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))))))))"]],"rules":[["egg-rr",23],["egg-rr",13]],"stop":[["node limit",1]],"time":37.406982421875,"type":"rewrite"},{"count":[[60,56]],"egraph":[[4,4932,287,0.022307583],[3,1185,290,0.010388333],[2,350,293,0.0028089580000000003],[1,118,297,0.0008307500000000001],[0,42,331,0.000221875]],"inputs":[["1/10","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(*.f64 -1/10 (pow.f64 x 2))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(*.f64 -1/10 (pow.f64 x 2))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))"]],"method":["egg-herbie"],"outputs":[["1/10","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(*.f64 -1/10 (pow.f64 x 2))","(*.f64 -1/10 (*.f64 x x))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(*.f64 -1/10 (pow.f64 x 2))","(*.f64 -1/10 (*.f64 x x))","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","(+.f64 1/10 (*.f64 -1/10 (pow.f64 x 2)))","(+.f64 1/10 (*.f64 -1/10 (*.f64 x x)))","(fma.f64 -1/10 (*.f64 x x) 1/10)","(fma.f64 x (*.f64 -1/10 x) 1/10)","10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(fma.f64 10 (*.f64 x x) 10)","(fma.f64 (*.f64 x x) 10 10)","(*.f64 10 (fma.f64 x x 1))","(fma.f64 x (*.f64 x 10) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(fma.f64 10 (*.f64 x x) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(fma.f64 (*.f64 x x) 10 (fma.f64 10 (pow.f64 x 4) 10))","(*.f64 10 (+.f64 (pow.f64 x 4) (fma.f64 x x 1)))","(fma.f64 10 (fma.f64 x x (pow.f64 x 4)) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 10 (pow.f64 x 6) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(fma.f64 (*.f64 x x) 10 (fma.f64 10 (pow.f64 x 6) (fma.f64 10 (pow.f64 x 4) 10)))","(fma.f64 10 (fma.f64 x x (pow.f64 x 6)) (fma.f64 10 (pow.f64 x 4) 10))","(fma.f64 10 (+.f64 (pow.f64 x 4) (fma.f64 x x (pow.f64 x 6))) 10)","(*.f64 (fma.f64 x x 1) (fma.f64 10 (pow.f64 x 4) 10))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(/.f64 (/.f64 -10 x) x)","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x))))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (/.f64 -10 (pow.f64 x 6)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))) (/.f64 10 (pow.f64 x 8)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (+.f64 (/.f64 10 (pow.f64 x 6)) (/.f64 10 (pow.f64 x 8)))))","(+.f64 (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6))) (/.f64 -10 (pow.f64 x 8)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (+.f64 (/.f64 -10 (pow.f64 x 6)) (/.f64 -10 (pow.f64 x 8))))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(/.f64 (/.f64 -10 x) x)","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (/.f64 10 (*.f64 x x))))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x)))","(+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (/.f64 -10 (pow.f64 x 6)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (/.f64 10 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 10 (*.f64 x x)) (/.f64 10 (pow.f64 x 6))) (/.f64 10 (pow.f64 x 8)))))","(-.f64 (/.f64 -10 (pow.f64 x 4)) (+.f64 (/.f64 10 (*.f64 x x)) (+.f64 (/.f64 10 (pow.f64 x 6)) (/.f64 10 (pow.f64 x 8)))))","(+.f64 (+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 -10 (*.f64 x x))) (/.f64 -10 (pow.f64 x 6))) (/.f64 -10 (pow.f64 x 8)))","(+.f64 (+.f64 (/.f64 -10 (pow.f64 x 4)) (/.f64 (/.f64 -10 x) x)) (+.f64 (/.f64 -10 (pow.f64 x 6)) (/.f64 -10 (pow.f64 x 8))))"]],"stop":[["node limit",1]],"time":36.718994140625,"type":"simplify"},{"compiler":[[626,494]],"time":10.34814453125,"type":"eval"},{"alts":[["(/.f64 -10 (fma.f64 x x -1))","done",0.23046875],["(sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))","fresh",21.58636506050374],["(pow.f64 (pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2) -1)","fresh",22.176227685600402],["(/.f64 (/.f64 -10 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.728412841895471],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))","next",0.39357377930532605],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","done",0.406913769536884],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) -2)) (/.f64 1 (cbrt.f64 (fma.f64 x x -1)))) -10)","fresh",0.5880051758319566],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","done",0.340507519536884],["(/.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2)) (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)))","fresh",0.7981379395798912],["(*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))","fresh",0.8069079102745652]],"compiler":[[7,5],[10,8],[12,10],[16,12],[18,14],[9,7],[18,14],[9,7],[20,16],[18,14],[10,8],[12,10],[16,12],[18,14],[18,14],[20,16],[18,14]],"count":[[64,10]],"kept":[{"done":[2,2],"fresh":[5,4],"new":[56,3],"picked":[1,1]}],"min-error":[0],"time":10.625,"type":"prune"},{"compiler":[[63,46]],"locations":[["(/.f64 -10 (fma.f64 x x -1))",0.23046875,false],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))",0.328788769536884,true],["(*.f64 (fma.f64 x x -1) -1/10)",0.375,false],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)",0.47236254884221013,true]],"time":17.380859375,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))","x","-inf",0.3251953125],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))","x","inf",0.433837890625],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))","x","0",1.3779296875],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)","x","-inf",0.236083984375],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)","x","inf",0.325927734375],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)","x","0",0.298095703125]],"time":3.111083984375,"type":"series"},{"count":[[2,139]],"egraph":[[2,3049,19,0.024635333],[1,270,19,0.004573417],[0,13,34,0.000427334]],"inputs":[["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)","(*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 100) (pow.f64 (fma.f64 x x -1) -2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 100) (pow.f64 (fma.f64 x x -1) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 100) (pow.f64 (fma.f64 x x -1) -2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 100) (pow.f64 (fma.f64 x x -1) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (pow.f64 (*.f64 (fma.f64 x x -1) (*.f64 (fma.f64 x x -1) -1/10)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (fma.f64 x x -1)) (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 100 (pow.f64 (fma.f64 x x -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -2) 100)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3/2) (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -4) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 -10 (fma.f64 x x -1)) -10) (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 5) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4) 1) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4)) 2) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (*.f64 (fma.f64 x x -1) (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (*.f64 (*.f64 (fma.f64 x x -1) -1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (fma.f64 x x -1)) (*.f64 (fma.f64 x x -1) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 1/100 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 100 (pow.f64 (fma.f64 x x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 100 (pow.f64 (neg.f64 (fma.f64 x x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 10 (*.f64 (neg.f64 (fma.f64 x x -1)) (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 10 (*.f64 (*.f64 (fma.f64 x x -1) -1/10) (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -100 (*.f64 (neg.f64 (fma.f64 x x -1)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -100 (*.f64 (fma.f64 x x -1) (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -10 (/.f64 -10 (fma.f64 x x -1))) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 10 (/.f64 -10 (fma.f64 x x -1))) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -10 (fma.f64 x x -1)) -10) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -10 (fma.f64 x x -1)) 10) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -4) 10000))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 100) (pow.f64 (fma.f64 x x -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 1/100 (pow.f64 (fma.f64 x x -1) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) 1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1) (log.f64 (*.f64 (fma.f64 x x -1) -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) (log.f64 (*.f64 (fma.f64 x x -1) -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1) (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3) (log.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1) (log.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1) (log.f64 (/.f64 -10 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) (log.f64 (/.f64 -10 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1) (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1) (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4)) (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 4)) (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 -10 (fma.f64 x x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (neg.f64 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x x -1) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (fma.f64 x x -1) -1/10) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 10 (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -10) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2) (cbrt.f64 -10)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/100 (pow.f64 (fma.f64 x x -1) 2)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (fma.f64 x x -1) -1/10) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1)))) 2)) (cbrt.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))))) (sqrt.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 -10 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 -10 (fma.f64 x x -1)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3) (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1) (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3) (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1) (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3) (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1) (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1/3) (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 1) (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1/3) (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 1) (*.f64 (log.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 -10 (fma.f64 x x -1))) 1/3) (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1)))) 1) (*.f64 (*.f64 -2/3 (log.f64 (*.f64 (fma.f64 x x -1) -1/10))) 1)))))))"]],"rules":[["egg-rr",70],["egg-rr",69]],"stop":[["node limit",1]],"time":48.486083984375,"type":"rewrite"},{"count":[[163,169]],"egraph":[[3,2290,533,0.016548207],[2,537,563,0.004368332],[1,180,636,0.001165582],[0,66,662,0.000314541]],"inputs":[["100","(+.f64 100 (*.f64 200 (pow.f64 x 2)))","(+.f64 100 (+.f64 (*.f64 300 (pow.f64 x 4)) (*.f64 200 (pow.f64 x 2))))","(+.f64 100 (+.f64 (*.f64 400 (pow.f64 x 6)) (+.f64 (*.f64 300 (pow.f64 x 4)) (*.f64 200 (pow.f64 x 2)))))","(/.f64 100 (pow.f64 x 4))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (*.f64 200 (/.f64 1 (pow.f64 x 6))))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8)))))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 400 (/.f64 1 (pow.f64 x 10))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8))))))","(/.f64 100 (pow.f64 x 4))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (*.f64 200 (/.f64 1 (pow.f64 x 6))))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8)))))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 400 (/.f64 1 (pow.f64 x 10))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8))))))","(*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10))) (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 2)))))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 4)))) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10))) (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 2))))))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 6)))) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 4)))) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10))) (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 2)))))))","(/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 8)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))))","(/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 8)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["100","(+.f64 100 (*.f64 200 (pow.f64 x 2)))","(+.f64 100 (*.f64 200 (*.f64 x x)))","(fma.f64 200 (*.f64 x x) 100)","(+.f64 100 (+.f64 (*.f64 300 (pow.f64 x 4)) (*.f64 200 (pow.f64 x 2))))","(+.f64 100 (fma.f64 300 (pow.f64 x 4) (*.f64 200 (*.f64 x x))))","(+.f64 (fma.f64 200 (*.f64 x x) 100) (*.f64 300 (pow.f64 x 4)))","(fma.f64 200 (*.f64 x x) (fma.f64 300 (pow.f64 x 4) 100))","(+.f64 100 (+.f64 (*.f64 400 (pow.f64 x 6)) (+.f64 (*.f64 300 (pow.f64 x 4)) (*.f64 200 (pow.f64 x 2)))))","(+.f64 100 (fma.f64 400 (pow.f64 x 6) (fma.f64 300 (pow.f64 x 4) (*.f64 200 (*.f64 x x)))))","(+.f64 100 (fma.f64 400 (pow.f64 x 6) (fma.f64 200 (*.f64 x x) (*.f64 300 (pow.f64 x 4)))))","(fma.f64 400 (pow.f64 x 6) (fma.f64 200 (*.f64 x x) (fma.f64 300 (pow.f64 x 4) 100)))","(/.f64 100 (pow.f64 x 4))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (*.f64 200 (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 100 (pow.f64 x 4)) (/.f64 200 (pow.f64 x 6)))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8)))))","(+.f64 (/.f64 100 (pow.f64 x 4)) (+.f64 (/.f64 200 (pow.f64 x 6)) (/.f64 300 (pow.f64 x 8))))","(+.f64 (/.f64 200 (pow.f64 x 6)) (+.f64 (/.f64 100 (pow.f64 x 4)) (/.f64 300 (pow.f64 x 8))))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 400 (/.f64 1 (pow.f64 x 10))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8))))))","(+.f64 (/.f64 100 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 400 (pow.f64 x 10)) (/.f64 200 (pow.f64 x 6))) (/.f64 300 (pow.f64 x 8))))","(+.f64 (+.f64 (/.f64 200 (pow.f64 x 6)) (/.f64 300 (pow.f64 x 8))) (+.f64 (/.f64 100 (pow.f64 x 4)) (/.f64 400 (pow.f64 x 10))))","(+.f64 (/.f64 200 (pow.f64 x 6)) (+.f64 (/.f64 100 (pow.f64 x 4)) (+.f64 (/.f64 300 (pow.f64 x 8)) (/.f64 400 (pow.f64 x 10)))))","(/.f64 100 (pow.f64 x 4))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (*.f64 200 (/.f64 1 (pow.f64 x 6))))","(+.f64 (/.f64 100 (pow.f64 x 4)) (/.f64 200 (pow.f64 x 6)))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8)))))","(+.f64 (/.f64 100 (pow.f64 x 4)) (+.f64 (/.f64 200 (pow.f64 x 6)) (/.f64 300 (pow.f64 x 8))))","(+.f64 (/.f64 200 (pow.f64 x 6)) (+.f64 (/.f64 100 (pow.f64 x 4)) (/.f64 300 (pow.f64 x 8))))","(+.f64 (*.f64 100 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 400 (/.f64 1 (pow.f64 x 10))) (+.f64 (*.f64 200 (/.f64 1 (pow.f64 x 6))) (*.f64 300 (/.f64 1 (pow.f64 x 8))))))","(+.f64 (/.f64 100 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 400 (pow.f64 x 10)) (/.f64 200 (pow.f64 x 6))) (/.f64 300 (pow.f64 x 8))))","(+.f64 (+.f64 (/.f64 200 (pow.f64 x 6)) (/.f64 300 (pow.f64 x 8))) (+.f64 (/.f64 100 (pow.f64 x 4)) (/.f64 400 (pow.f64 x 10))))","(+.f64 (/.f64 200 (pow.f64 x 6)) (+.f64 (/.f64 100 (pow.f64 x 4)) (+.f64 (/.f64 300 (pow.f64 x 8)) (/.f64 400 (pow.f64 x 10)))))","(*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)))","(neg.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)))","(*.f64 (cbrt.f64 100) (neg.f64 (cbrt.f64 -10)))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10))) (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 2)))))","(fma.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (neg.f64 (*.f64 (cbrt.f64 100) (*.f64 (*.f64 x x) (cbrt.f64 -10)))))","(*.f64 (neg.f64 (cbrt.f64 100)) (+.f64 (cbrt.f64 -10) (*.f64 x (*.f64 x (cbrt.f64 -10)))))","(*.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (-.f64 -1 (*.f64 x x)))","(*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (-.f64 -1 (*.f64 x x))))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 4)))) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10))) (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 2))))))","(fma.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (pow.f64 x 4) (cbrt.f64 -10))) (fma.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (neg.f64 (*.f64 (cbrt.f64 100) (*.f64 (*.f64 x x) (cbrt.f64 -10))))))","(-.f64 (*.f64 (neg.f64 (cbrt.f64 100)) (+.f64 (cbrt.f64 -10) (*.f64 x (*.f64 x (cbrt.f64 -10))))) (*.f64 (pow.f64 x 4) (*.f64 (cbrt.f64 100) (cbrt.f64 -10))))","(*.f64 (neg.f64 (cbrt.f64 100)) (+.f64 (fma.f64 (*.f64 x x) (cbrt.f64 -10) (cbrt.f64 -10)) (*.f64 (pow.f64 x 4) (cbrt.f64 -10))))","(*.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (-.f64 (-.f64 -1 (*.f64 x x)) (pow.f64 x 4)))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 6)))) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 4)))) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10))) (*.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -10) (pow.f64 x 2)))))))","(fma.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (pow.f64 x 6) (cbrt.f64 -10))) (fma.f64 -1 (*.f64 (cbrt.f64 100) (*.f64 (pow.f64 x 4) (cbrt.f64 -10))) (fma.f64 -1 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (neg.f64 (*.f64 (cbrt.f64 100) (*.f64 (*.f64 x x) (cbrt.f64 -10)))))))","(+.f64 (*.f64 (neg.f64 (cbrt.f64 100)) (+.f64 (cbrt.f64 -10) (*.f64 x (*.f64 x (cbrt.f64 -10))))) (*.f64 (neg.f64 (cbrt.f64 100)) (+.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 -10)) (*.f64 (pow.f64 x 4) (cbrt.f64 -10)))))","(*.f64 (neg.f64 (cbrt.f64 100)) (+.f64 (fma.f64 (*.f64 x x) (cbrt.f64 -10) (cbrt.f64 -10)) (*.f64 (cbrt.f64 -10) (+.f64 (pow.f64 x 6) (pow.f64 x 4)))))","(*.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (-.f64 (-.f64 -1 (*.f64 x x)) (+.f64 (pow.f64 x 4) (pow.f64 x 6))))","(/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2))","(/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x))","(*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10))","(*.f64 (cbrt.f64 -10) (/.f64 (cbrt.f64 100) (*.f64 x x)))","(/.f64 (cbrt.f64 100) (*.f64 (/.f64 x (cbrt.f64 -10)) x))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))","(+.f64 (*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10)) (/.f64 (cbrt.f64 -10) (/.f64 (pow.f64 x 4) (cbrt.f64 100))))","(*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 4))))","(*.f64 (/.f64 (cbrt.f64 100) x) (+.f64 (/.f64 (cbrt.f64 -10) (pow.f64 x 3)) (/.f64 (cbrt.f64 -10) x)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))))","(+.f64 (*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10)) (+.f64 (/.f64 (cbrt.f64 -10) (/.f64 (pow.f64 x 4) (cbrt.f64 100))) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))))","(fma.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 4)) (cbrt.f64 -10) (*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 6)))))","(*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (+.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 6)) (/.f64 (cbrt.f64 100) (pow.f64 x 4)))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 8)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x)) (+.f64 (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 8) (cbrt.f64 -10)))))","(+.f64 (*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10)) (+.f64 (+.f64 (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 8) (cbrt.f64 -10))) (/.f64 (cbrt.f64 -10) (/.f64 (pow.f64 x 4) (cbrt.f64 100)))) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))))","(+.f64 (*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 6)))) (*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 8)) (/.f64 (cbrt.f64 100) (pow.f64 x 4)))))","(*.f64 (cbrt.f64 -10) (+.f64 (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 4))) (+.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 6)) (/.f64 (cbrt.f64 100) (pow.f64 x 8)))))","(/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2))","(/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x))","(*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10))","(*.f64 (cbrt.f64 -10) (/.f64 (cbrt.f64 100) (*.f64 x x)))","(/.f64 (cbrt.f64 100) (*.f64 (/.f64 x (cbrt.f64 -10)) x))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))","(+.f64 (*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10)) (/.f64 (cbrt.f64 -10) (/.f64 (pow.f64 x 4) (cbrt.f64 100))))","(*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 4))))","(*.f64 (/.f64 (cbrt.f64 100) x) (+.f64 (/.f64 (cbrt.f64 -10) (pow.f64 x 3)) (/.f64 (cbrt.f64 -10) x)))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))))","(+.f64 (*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10)) (+.f64 (/.f64 (cbrt.f64 -10) (/.f64 (pow.f64 x 4) (cbrt.f64 100))) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))))","(fma.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 4)) (cbrt.f64 -10) (*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 6)))))","(*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (+.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 6)) (/.f64 (cbrt.f64 100) (pow.f64 x 4)))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 8)) (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 6)) (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)))))","(+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (*.f64 x x)) (+.f64 (+.f64 (/.f64 (*.f64 (cbrt.f64 100) (cbrt.f64 -10)) (pow.f64 x 4)) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 8) (cbrt.f64 -10)))))","(+.f64 (*.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (cbrt.f64 -10)) (+.f64 (+.f64 (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 8) (cbrt.f64 -10))) (/.f64 (cbrt.f64 -10) (/.f64 (pow.f64 x 4) (cbrt.f64 100)))) (/.f64 (cbrt.f64 100) (/.f64 (pow.f64 x 6) (cbrt.f64 -10)))))","(+.f64 (*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 6)))) (*.f64 (cbrt.f64 -10) (+.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 8)) (/.f64 (cbrt.f64 100) (pow.f64 x 4)))))","(*.f64 (cbrt.f64 -10) (+.f64 (+.f64 (/.f64 (cbrt.f64 100) (*.f64 x x)) (/.f64 (cbrt.f64 100) (pow.f64 x 4))) (+.f64 (/.f64 (cbrt.f64 100) (pow.f64 x 6)) (/.f64 (cbrt.f64 100) (pow.f64 x 8)))))"]],"stop":[["node limit",1]],"time":34.644775390625,"type":"simplify"},{"compiler":[[4352,3467]],"time":60.2890625,"type":"eval"},{"alts":[["(/.f64 -10 (fma.f64 x x -1))","done",0.23046875],["(sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))","fresh",21.58636506050374],["(/.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2)) (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)))","fresh",0.7981379395798912],["(/.f64 (/.f64 -10 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2))) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.4596863281475362],["(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","done",0.406913769536884],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) -2)) (/.f64 1 (cbrt.f64 (fma.f64 x x -1)))) -10)","fresh",0.5880051758319566],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","done",0.340507519536884],["(pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -2)","fresh",22.10458764652663],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -2) 100)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))","fresh",0.39814379884221013]],"compiler":[[7,5],[10,8],[20,16],[16,12],[9,7],[18,14],[9,7],[10,8],[18,14]],"count":[[232,9]],"kept":[{"done":[3,3],"fresh":[6,3],"new":[222,3],"picked":[1,0]}],"min-error":[0],"time":36.401123046875,"type":"prune"},{"accuracy":[0.23046875],"baseline":[0.23046875],"branch":[["x",0.23046875,1],["(/.f64 10 (-.f64 1 (*.f64 x x)))",0.23046875,1],["(-.f64 1 (*.f64 x x))",0.23046875,1],["(*.f64 x x)",0.23046875,1]],"compiler":[[2,1],[8,6],[6,4],[4,2],[195,149]],"count":[[16,1]],"inputs":[["(/.f64 (/.f64 -10 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2))) (cbrt.f64 (fma.f64 x x -1)))","(pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) -2)","(*.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -2) 100)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))","(pow.f64 (pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2) -1)","(*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -2)) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))","(/.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)) 2)) (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) -2)) (/.f64 1 (cbrt.f64 (fma.f64 x x -1)))) -10)","(/.f64 (/.f64 -10 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 x x -1) -1/2) 2) -10)","(sqrt.f64 (/.f64 100 (pow.f64 (fma.f64 x x -1) 2)))","(pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)","(pow.f64 (sqrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2)","(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","(*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 2))","(/.f64 -10 (fma.f64 x x -1))","(/.f64 10 (-.f64 1 (*.f64 x x)))"]],"link":["."],"name":["ENA, Section 1.4, Mentioned, B"],"oracle":[64.0],"outputs":[["(/.f64 -10 (fma.f64 x x -1))"]],"time":29.511962890625,"times":[["x",6.2099609375],["(/.f64 10 (-.f64 1 (*.f64 x x)))",6.218994140625],["(-.f64 1 (*.f64 x x))",6.515869140625],["(*.f64 x x)",6.541015625]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[0,6,8,1.2708e-5]],"inputs":[["(/.f64 -10 (fma.f64 x x -1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -10 (fma.f64 x x -1))"]],"stop":[["fuel",1],["saturated",1]],"time":8.1708984375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":8.42822265625,"type":"end"}]
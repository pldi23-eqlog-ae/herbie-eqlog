[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.1676409262381735,0.8070156216581841,0.025343452103642417],[11,0.12475603813073377,0.8732922669151364,0.0019516949541298345],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":147.848876953125,"type":"analyze"},{"outcomes":[["body",256,"invalid",92.163330078125,1927],["body",256,"valid",403.11181640625,8256]],"time":504.2421875,"type":"sample"},{"compiler":[[15,10]],"egraph":[[0,4,4,2.458e-6],[7,7089,112,0.036258168],[6,3060,112,0.022640501],[5,1412,112,0.010135209],[4,746,112,0.004568167],[3,377,112,0.002097417],[2,146,112,0.000850584],[1,66,112,0.000298042],[0,36,112,0.000112209]],"inputs":[["0","1","2","3"],["(*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))))","(*.f64 y (-.f64 (/.f64 x z) (/.f64 t (-.f64 1 z))))","(*.f64 z (-.f64 (/.f64 y x) (/.f64 t (-.f64 1 x))))","(*.f64 t (-.f64 (/.f64 y z) (/.f64 x (-.f64 1 z))))","(*.f64 x (-.f64 (/.f64 z y) (/.f64 t (-.f64 1 y))))","(*.f64 x (-.f64 (/.f64 t z) (/.f64 y (-.f64 1 z))))","(*.f64 x (-.f64 (/.f64 y t) (/.f64 z (-.f64 1 t))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))))","(*.f64 y (-.f64 (/.f64 x z) (/.f64 t (-.f64 1 z))))","(*.f64 z (-.f64 (/.f64 y x) (/.f64 t (-.f64 1 x))))","(*.f64 z (+.f64 (/.f64 y x) (/.f64 t (+.f64 x -1))))","(*.f64 t (-.f64 (/.f64 y z) (/.f64 x (-.f64 1 z))))","(*.f64 t (+.f64 (/.f64 y z) (/.f64 x (+.f64 z -1))))","(*.f64 x (-.f64 (/.f64 z y) (/.f64 t (-.f64 1 y))))","(*.f64 x (-.f64 (/.f64 t z) (/.f64 y (-.f64 1 z))))","(*.f64 x (+.f64 (/.f64 t z) (/.f64 y (+.f64 z -1))))","(*.f64 x (-.f64 (/.f64 y t) (/.f64 z (-.f64 1 t))))","(*.f64 x (+.f64 (/.f64 y t) (/.f64 z (+.f64 t -1))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":61.14599609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,7869,16,0.04919895900000001],[11,7520,16,0.04453720900000001],[10,6741,16,0.037387709000000005],[9,5805,16,0.029368626000000002],[8,2647,16,0.019983501],[7,1145,16,0.008903917],[6,478,16,0.003820792],[5,233,16,0.001802042],[4,130,16,0.000921542],[3,68,16,0.00046695899999999997],[2,33,16,0.000224],[1,18,16,0.000103834],[0,11,16,4.6792e-5]],"inputs":[["(*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))))","(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))"]],"stop":[["node limit",1]],"time":60.725830078125,"type":"simplify"},{"compiler":[[26,15]],"time":0.39697265625,"type":"eval"},{"alts":[["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","next",6.266019470859463]],"compiler":[[15,10],[15,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[6.266019470859463],"time":1.301025390625,"type":"prune"},{"compiler":[[40,20]],"locations":[["(/.f64 t (+.f64 z -1))",0.01171875,true],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))",0.0407927480306591,true],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))",5.934401491716056,true]],"time":8.64208984375,"type":"localize"},{"count":[[3,108]],"series":[["(/.f64 t (+.f64 z -1))","z","-inf",0.192138671875],["(/.f64 t (+.f64 z -1))","z","inf",0.18017578125],["(/.f64 t (+.f64 z -1))","z","0",0.18994140625],["(/.f64 t (+.f64 z -1))","t","-inf",0.3681640625],["(/.f64 t (+.f64 z -1))","t","inf",0.2900390625],["(/.f64 t (+.f64 z -1))","t","0",0.261962890625],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","t","-inf",0.197021484375],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","t","inf",0.14990234375],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","t","0",0.181884765625],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","z","-inf",0.218994140625],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","z","inf",0.260009765625],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","z","0",0.2021484375],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","y","-inf",0.180908203125],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","y","inf",0.14990234375],["(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","y","0",0.1640625],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","t","-inf",0.285888671875],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","t","inf",0.44091796875],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","t","0",0.4501953125],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","z","-inf",0.425048828125],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","z","inf",0.762939453125],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","z","0",0.376953125],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","y","-inf",0.30615234375],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","y","inf",0.446044921875],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","y","0",0.671142578125],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","x","-inf",0.348876953125],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","x","inf",0.361083984375],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","x","0",0.97998046875]],"time":9.389892578125,"type":"series"},{"count":[[3,198]],"egraph":[[2,4120,36,0.031296459],[1,255,36,0.005275834],[0,11,36,0.000281917]],"inputs":[["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","(+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))","(/.f64 t (+.f64 z -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (/.f64 z y)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (/.f64 z y)) 1) (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))) (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 x (/.f64 z y)) 3) (pow.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 3)) (fma.f64 (/.f64 x (/.f64 z y)) (/.f64 x (/.f64 z y)) (-.f64 (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (/.f64 (*.f64 t x) (+.f64 z -1))) (*.f64 (/.f64 x (/.f64 z y)) (/.f64 (*.f64 t x) (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (/.f64 z y)) (/.f64 x (/.f64 z y))) (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (/.f64 (*.f64 t x) (+.f64 z -1)))) (-.f64 (/.f64 x (/.f64 z y)) (/.f64 (*.f64 t x) (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y (+.f64 z -1) (*.f64 z t)) x) (*.f64 z (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3)) x) (fma.f64 (/.f64 t (+.f64 z -1)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (/.f64 t (+.f64 z -1)) 2)) x) (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 y (+.f64 z -1) (*.f64 z t))) (*.f64 z (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3))) (fma.f64 (/.f64 t (+.f64 z -1)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (/.f64 t (+.f64 z -1)) 2))) (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (*.f64 t x) (+.f64 z -1))) (exp.f64 (/.f64 x (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 y z) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 t (+.f64 z -1)) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 (/.f64 1 z) x) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) x (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (*.f64 (/.f64 1 (+.f64 z -1)) x) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (/.f64 z y)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 t x) (+.f64 z -1)) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (*.f64 (cbrt.f64 (/.f64 y z)) x) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 y z)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 t (+.f64 z -1))) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2)) (*.f64 (cbrt.f64 (/.f64 t (+.f64 z -1))) x) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (*.f64 (sqrt.f64 (/.f64 y z)) x) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 y z)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 t (+.f64 z -1))) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 t (+.f64 z -1))) (*.f64 (sqrt.f64 (/.f64 t (+.f64 z -1))) x) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (/.f64 z y)) 1 (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 t x) (+.f64 z -1))) (cbrt.f64 (/.f64 (*.f64 t x) (+.f64 z -1)))) (cbrt.f64 (/.f64 (*.f64 t x) (+.f64 z -1))) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 x (/.f64 z y))) (cbrt.f64 (/.f64 x (/.f64 z y)))) (cbrt.f64 (/.f64 x (/.f64 z y))) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (*.f64 t x) (+.f64 z -1))) (sqrt.f64 (/.f64 (*.f64 t x) (+.f64 z -1))) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (/.f64 z y))) (sqrt.f64 (/.f64 x (/.f64 z y))) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 y z))) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 y z))) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 x)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (/.f64 t (+.f64 z -1))) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 t (+.f64 z -1))) (sqrt.f64 x)) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 t (+.f64 z -1)))) (*.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 t (+.f64 z -1)))) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) (/.f64 1 z) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x t) (/.f64 1 (+.f64 z -1)) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (/.f64 y z)) 2)) (cbrt.f64 (/.f64 y z)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (/.f64 y z))) (sqrt.f64 (/.f64 y z)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y z) (sqrt.f64 x)) (sqrt.f64 x) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 t (+.f64 z -1)) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 t (+.f64 z -1)) (sqrt.f64 x)) (sqrt.f64 x) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2))) (cbrt.f64 (/.f64 t (+.f64 z -1))) (/.f64 x (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (/.f64 t (+.f64 z -1)))) (sqrt.f64 (/.f64 t (+.f64 z -1))) (/.f64 x (/.f64 z y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (/.f64 y z) 2) (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) (/.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2) (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 2)) (cbrt.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) (sqrt.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (+.f64 z -1) (*.f64 z t)) (/.f64 1 (*.f64 z (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3)) (/.f64 1 (fma.f64 (/.f64 t (+.f64 z -1)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (/.f64 t (+.f64 z -1)) 2)) (/.f64 1 (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 z (+.f64 z -1)) (fma.f64 y (+.f64 z -1) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 t (+.f64 z -1)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) (pow.f64 (/.f64 y z) 2)) (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (/.f64 t (+.f64 z -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (+.f64 z -1) (*.f64 z t)) (*.f64 z (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3)) (fma.f64 (/.f64 t (+.f64 z -1)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3)) (+.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2) (-.f64 (pow.f64 (/.f64 y z) 2) (*.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (/.f64 t (+.f64 z -1)) 2)) (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (+.f64 z -1) (*.f64 z t))) (neg.f64 (*.f64 z (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3))) (neg.f64 (fma.f64 (/.f64 t (+.f64 z -1)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (/.f64 t (+.f64 z -1)) 2))) (neg.f64 (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 z -1) (*.f64 (/.f64 z y) t)) (*.f64 (/.f64 z y) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 y) (+.f64 z -1) (*.f64 (neg.f64 z) t)) (*.f64 (neg.f64 z) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 (+.f64 z -1) t) z) (*.f64 z (/.f64 (+.f64 z -1) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (+.f64 z -1) t) (*.f64 (/.f64 z y) 1)) (*.f64 (/.f64 z y) (/.f64 (+.f64 z -1) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 y) (/.f64 (+.f64 z -1) t) (*.f64 (neg.f64 z) 1)) (*.f64 (neg.f64 z) (/.f64 (+.f64 z -1) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (fma.f64 z -1 1) (*.f64 z (neg.f64 t))) (*.f64 z (fma.f64 z -1 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (fma.f64 z -1 1) (*.f64 (/.f64 z y) (neg.f64 t))) (*.f64 (/.f64 z y) (fma.f64 z -1 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 y) (fma.f64 z -1 1) (*.f64 (neg.f64 z) (neg.f64 t))) (*.f64 (neg.f64 z) (fma.f64 z -1 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 z (*.f64 (/.f64 (+.f64 z -1) t) y)) (*.f64 (/.f64 (+.f64 z -1) t) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 t) z (*.f64 (fma.f64 z -1 1) y)) (*.f64 (fma.f64 z -1 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 t (/.f64 z y) (+.f64 z -1)) (*.f64 (+.f64 z -1) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 z y) (*.f64 (/.f64 (+.f64 z -1) t) 1)) (*.f64 (/.f64 (+.f64 z -1) t) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 t) (/.f64 z y) (*.f64 (fma.f64 z -1 1) 1)) (*.f64 (fma.f64 z -1 1) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 t (neg.f64 z) (*.f64 (+.f64 z -1) (neg.f64 y))) (*.f64 (+.f64 z -1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z -1 (*.f64 (/.f64 (+.f64 z -1) t) (neg.f64 y))) (*.f64 (/.f64 (+.f64 z -1) t) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 t) (neg.f64 z) (*.f64 (fma.f64 z -1 1) (neg.f64 y))) (*.f64 (fma.f64 z -1 1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2) (pow.f64 (/.f64 y z) 2)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y (+.f64 z -1) (*.f64 z t)) z) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 z (+.f64 z -1)) (fma.f64 y (+.f64 z -1) (*.f64 z t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 t (+.f64 z -1)) (-.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) (pow.f64 (/.f64 y z) 2)) (+.f64 (pow.f64 (/.f64 y z) 3) (pow.f64 (/.f64 t (+.f64 z -1)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (/.f64 t (+.f64 z -1)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 y z))) (exp.f64 (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 y z)) (+.f64 1 (expm1.f64 (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 y z))) (+.f64 1 (expm1.f64 (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 t (+.f64 z -1)))) (exp.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 t (+.f64 z -1))) (+.f64 1 (expm1.f64 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 t (+.f64 z -1)))) (+.f64 1 (expm1.f64 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 1 (+.f64 z -1)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t (+.f64 z -1)) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 t (+.f64 z -1)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (cbrt.f64 (/.f64 y z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 t (+.f64 z -1))) (cbrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2)) (cbrt.f64 (/.f64 t (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 t t)) (*.f64 (cbrt.f64 t) (/.f64 1 (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 1 z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 t (+.f64 z -1))) (sqrt.f64 (/.f64 t (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) (/.f64 1 (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1 (neg.f64 z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) (/.f64 1 (fma.f64 z -1 1)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 z -1)) t (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) z) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 y z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 t t)) 1) (/.f64 (cbrt.f64 t) (+.f64 z -1)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 t) 1) (/.f64 (sqrt.f64 t) (+.f64 z -1)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 z -1)) 2)) (/.f64 t (cbrt.f64 (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 t t)) (pow.f64 (cbrt.f64 (+.f64 z -1)) 2)) (cbrt.f64 (/.f64 t (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 t) (pow.f64 (cbrt.f64 (+.f64 z -1)) 2)) (/.f64 (sqrt.f64 t) (cbrt.f64 (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (+.f64 z -1))) (/.f64 t (sqrt.f64 (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 t t)) (sqrt.f64 (+.f64 z -1))) (/.f64 (cbrt.f64 t) (sqrt.f64 (+.f64 z -1))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t (+.f64 -1 (pow.f64 z 3))) (-.f64 (fma.f64 z z 1) (neg.f64 z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 t (fma.f64 z z -1)) (+.f64 z 1) (/.f64 y z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 t (+.f64 z -1)))) (cbrt.f64 (exp.f64 (/.f64 t (+.f64 z -1)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 t (+.f64 z -1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 t (+.f64 z -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 t (+.f64 z -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (/.f64 1 (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t (+.f64 z -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 t (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 t (+.f64 z -1))) (cbrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2)) (cbrt.f64 (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t t)) (*.f64 (cbrt.f64 t) (/.f64 1 (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 t (+.f64 z -1))) (sqrt.f64 (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) (/.f64 1 (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 t) (/.f64 1 (fma.f64 z -1 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 z -1)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 t t)) 1) (/.f64 (cbrt.f64 t) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 t) 1) (/.f64 (sqrt.f64 t) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 z -1)) 2)) (/.f64 t (cbrt.f64 (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 t t)) (pow.f64 (cbrt.f64 (+.f64 z -1)) 2)) (cbrt.f64 (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 t) (pow.f64 (cbrt.f64 (+.f64 z -1)) 2)) (/.f64 (sqrt.f64 t) (cbrt.f64 (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 z -1))) (/.f64 t (sqrt.f64 (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 t t)) (sqrt.f64 (+.f64 z -1))) (/.f64 (cbrt.f64 t) (sqrt.f64 (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t (+.f64 -1 (pow.f64 z 3))) (-.f64 (fma.f64 z z 1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t (fma.f64 z z -1)) (+.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 t (+.f64 z -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 t (+.f64 z -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 t (+.f64 z -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 z -1) t) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (+.f64 z -1) t) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 t (fma.f64 z -1 1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 t (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 t (+.f64 z -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 t (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 t (+.f64 z -1))) 1))))))"]],"rules":[["egg-rr",38],["egg-rr",95],["egg-rr",65]],"stop":[["node limit",1]],"time":63.737060546875,"type":"rewrite"},{"count":[[306,264]],"egraph":[[4,7713,1492,0.035514416],[3,3127,1492,0.021301666],[2,865,1516,0.007120083],[1,288,1588,0.001874749],[0,102,1633,0.000489041]],"inputs":[["(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(/.f64 (*.f64 (+.f64 y t) x) z)","(+.f64 (/.f64 (*.f64 (+.f64 y t) x) z) (/.f64 (*.f64 t x) (pow.f64 z 2)))","(+.f64 (/.f64 (*.f64 (+.f64 y t) x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (/.f64 (*.f64 (+.f64 y t) x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4)))))","(*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z)) (/.f64 (*.f64 t x) (pow.f64 z 2)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z)) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4)))))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 t (-.f64 z 1))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(/.f64 y z)","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(/.f64 y z)","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 t) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (/.f64 y z)))","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (+.f64 (*.f64 -1 (*.f64 t (pow.f64 z 2))) (/.f64 y z))))","(/.f64 (+.f64 y t) z)","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t z) (/.f64 y z)))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 y z))))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (+.f64 (/.f64 t (pow.f64 z 4)) (/.f64 y z)))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z))","(+.f64 (/.f64 t (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z)))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z))))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z)) (/.f64 t (pow.f64 z 4)))))","(/.f64 y z)","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(/.f64 t (-.f64 z 1))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(/.f64 t (-.f64 z 1))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(/.f64 t (-.f64 z 1))","(*.f64 -1 t)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 -1 t))","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (*.f64 -1 (*.f64 t (pow.f64 z 2)))))","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (+.f64 (*.f64 -1 (*.f64 t (pow.f64 z 3))) (*.f64 -1 (*.f64 t (pow.f64 z 2))))))","(/.f64 t z)","(+.f64 (/.f64 t (pow.f64 z 2)) (/.f64 t z))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (/.f64 t z)))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4)))))","(/.f64 t z)","(+.f64 (/.f64 t (pow.f64 z 2)) (/.f64 t z))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (/.f64 t z)))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 t (/.f64 x (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 y (/.f64 z x)) (*.f64 (neg.f64 t) x))","(-.f64 (*.f64 (/.f64 y z) x) (*.f64 t x))","(*.f64 x (-.f64 (/.f64 y z) t))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 y (/.f64 z x)) (*.f64 -1 (+.f64 (*.f64 t x) (*.f64 t (*.f64 z x)))))","(fma.f64 -1 (*.f64 x (fma.f64 t z t)) (*.f64 (/.f64 y z) x))","(-.f64 (*.f64 (/.f64 x z) y) (*.f64 t (fma.f64 z x x)))","(*.f64 x (-.f64 (/.f64 y z) (fma.f64 t z t)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(+.f64 (/.f64 y (/.f64 z x)) (fma.f64 -1 (*.f64 t x) (fma.f64 -1 (*.f64 t (*.f64 x (*.f64 z z))) (*.f64 (neg.f64 t) (*.f64 z x)))))","(+.f64 (fma.f64 -1 (*.f64 x (fma.f64 t z t)) (*.f64 (/.f64 y z) x)) (*.f64 t (neg.f64 (*.f64 z (*.f64 z x)))))","(-.f64 (*.f64 x (-.f64 (/.f64 y z) t)) (*.f64 t (*.f64 z (fma.f64 z x x))))","(*.f64 x (-.f64 (/.f64 y z) (+.f64 t (*.f64 z (fma.f64 t z t)))))","(/.f64 (*.f64 (+.f64 y t) x) z)","(/.f64 (+.f64 t y) (/.f64 z x))","(*.f64 (/.f64 (+.f64 t y) z) x)","(*.f64 (/.f64 x z) (+.f64 t y))","(*.f64 (+.f64 t y) (/.f64 x z))","(+.f64 (/.f64 (*.f64 (+.f64 y t) x) z) (/.f64 (*.f64 t x) (pow.f64 z 2)))","(+.f64 (/.f64 (+.f64 t y) (/.f64 z x)) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (*.f64 (/.f64 (+.f64 t y) z) x) (*.f64 (/.f64 t z) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 t (*.f64 z z)) (/.f64 (+.f64 t y) z)))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 t y)))","(+.f64 (/.f64 (*.f64 (+.f64 y t) x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (/.f64 (+.f64 t y) (/.f64 z x)) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 (*.f64 t x) (pow.f64 z 3))))","(+.f64 (*.f64 (/.f64 (+.f64 t y) z) x) (+.f64 (*.f64 (/.f64 t z) (/.f64 x z)) (/.f64 (*.f64 t x) (pow.f64 z 3))))","(fma.f64 (/.f64 (+.f64 t y) z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 t y) (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z))))","(+.f64 (/.f64 (*.f64 (+.f64 y t) x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4)))))","(+.f64 (/.f64 (+.f64 t y) (/.f64 z x)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 4) x)))))","(+.f64 (*.f64 (/.f64 (+.f64 t y) z) x) (+.f64 (*.f64 (/.f64 t z) (/.f64 x z)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 4)))))","(fma.f64 (/.f64 (+.f64 t y) z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(+.f64 (*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 t y))) (*.f64 (/.f64 t (pow.f64 z 3)) (+.f64 x (/.f64 x z))))","(*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z))","(/.f64 (+.f64 t y) (/.f64 z x))","(*.f64 (/.f64 (+.f64 t y) z) x)","(*.f64 (/.f64 x z) (+.f64 t y))","(*.f64 (+.f64 t y) (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z)) (/.f64 (*.f64 t x) (pow.f64 z 2)))","(+.f64 (/.f64 (+.f64 t y) (/.f64 z x)) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (*.f64 (/.f64 (+.f64 t y) z) x) (*.f64 (/.f64 t z) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 t (*.f64 z z)) (/.f64 (+.f64 t y) z)))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 t y)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z)) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (/.f64 (+.f64 t y) (/.f64 z x)) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 (*.f64 t x) (pow.f64 z 3))))","(+.f64 (*.f64 (/.f64 (+.f64 t y) z) x) (+.f64 (*.f64 (/.f64 t z) (/.f64 x z)) (/.f64 (*.f64 t x) (pow.f64 z 3))))","(fma.f64 (/.f64 (+.f64 t y) z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 t y) (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z))))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) x) z)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4)))))","(+.f64 (/.f64 (+.f64 t y) (/.f64 z x)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 4) x)))))","(+.f64 (*.f64 (/.f64 (+.f64 t y) z) x) (+.f64 (*.f64 (/.f64 t z) (/.f64 x z)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 4)))))","(fma.f64 (/.f64 (+.f64 t y) z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(+.f64 (*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 t y))) (*.f64 (/.f64 t (pow.f64 z 3)) (+.f64 x (/.f64 x z))))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 (/.f64 x z) y)","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 t (/.f64 x (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 t (/.f64 x (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)) x)","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(/.f64 y z)","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(/.f64 y z)","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 t) (/.f64 y z))","(fma.f64 -1 t (/.f64 y z))","(-.f64 (/.f64 y z) t)","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (/.f64 y z)))","(fma.f64 -1 (*.f64 t z) (fma.f64 -1 t (/.f64 y z)))","(fma.f64 -1 (fma.f64 t z t) (/.f64 y z))","(-.f64 (/.f64 y z) (fma.f64 t z t))","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (+.f64 (*.f64 -1 (*.f64 t (pow.f64 z 2))) (/.f64 y z))))","(fma.f64 -1 (*.f64 t z) (fma.f64 -1 t (fma.f64 -1 (*.f64 t (*.f64 z z)) (/.f64 y z))))","(fma.f64 -1 (fma.f64 t z t) (fma.f64 (neg.f64 t) (*.f64 z z) (/.f64 y z)))","(fma.f64 -1 (+.f64 t (*.f64 z (fma.f64 t z t))) (/.f64 y z))","(-.f64 (/.f64 y z) (+.f64 t (*.f64 z (fma.f64 t z t))))","(/.f64 (+.f64 y t) z)","(/.f64 (+.f64 t y) z)","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t z) (/.f64 y z)))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 y z) (/.f64 t z)))","(+.f64 (/.f64 y z) (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z)))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 y z))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (+.f64 (/.f64 y z) (/.f64 t z)) (/.f64 t (pow.f64 z 3))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 y z) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 3)))))","(+.f64 (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z)) (+.f64 (/.f64 y z) (/.f64 t (pow.f64 z 3))))","(+.f64 (/.f64 y z) (+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 3)))))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (+.f64 (/.f64 t (pow.f64 z 4)) (/.f64 y z)))))","(+.f64 (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t (pow.f64 z 3))) (+.f64 (/.f64 t z) (+.f64 (/.f64 y z) (/.f64 t (pow.f64 z 4)))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t z) (+.f64 (+.f64 (/.f64 y z) (/.f64 t (pow.f64 z 4))) (/.f64 t (pow.f64 z 3)))))","(+.f64 (/.f64 t z) (+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 y z) (/.f64 t (pow.f64 z 4))))))","(+.f64 (+.f64 (/.f64 y z) (/.f64 t (pow.f64 z 3))) (+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4)))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z))","(/.f64 (+.f64 t y) z)","(+.f64 (/.f64 t (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z)))","(+.f64 (/.f64 t (*.f64 z z)) (neg.f64 (/.f64 (*.f64 -1 (+.f64 t y)) z)))","(-.f64 (/.f64 t (*.f64 z z)) (/.f64 (-.f64 (neg.f64 t) y) z))","(+.f64 (/.f64 t (*.f64 z z)) (/.f64 (+.f64 t y) z))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t (pow.f64 z 3)) (neg.f64 (/.f64 (*.f64 -1 (+.f64 t y)) z))))","(-.f64 (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t (pow.f64 z 3))) (/.f64 (-.f64 (neg.f64 t) y) z))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t (pow.f64 z 3)) (/.f64 (+.f64 t y) z)))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 t) (*.f64 -1 y)) z)) (/.f64 t (pow.f64 z 4)))))","(+.f64 (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t (pow.f64 z 3))) (fma.f64 -1 (/.f64 (*.f64 -1 (+.f64 t y)) z) (/.f64 t (pow.f64 z 4))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t (pow.f64 z 3)) (-.f64 (/.f64 t (pow.f64 z 4)) (/.f64 (-.f64 (neg.f64 t) y) z))))","(+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 (+.f64 t y) z) (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t (pow.f64 z 4)))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t (pow.f64 z 4)) (/.f64 (+.f64 t y) z))))","(/.f64 y z)","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z))","(+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(/.f64 t (-.f64 z 1))","(/.f64 t (+.f64 z -1))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 -1 t))","(*.f64 -1 (+.f64 (*.f64 t z) t))","(neg.f64 (fma.f64 t z t))","(*.f64 t (-.f64 -1 z))","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (*.f64 -1 (*.f64 t (pow.f64 z 2)))))","(fma.f64 -1 (*.f64 t z) (*.f64 -1 (+.f64 t (*.f64 t (*.f64 z z)))))","(-.f64 (neg.f64 (fma.f64 t z t)) (*.f64 t (*.f64 z z)))","(-.f64 (neg.f64 t) (*.f64 z (fma.f64 t z t)))","(-.f64 (*.f64 (neg.f64 z) (fma.f64 t z t)) t)","(+.f64 (*.f64 -1 (*.f64 t z)) (+.f64 (*.f64 -1 t) (+.f64 (*.f64 -1 (*.f64 t (pow.f64 z 3))) (*.f64 -1 (*.f64 t (pow.f64 z 2))))))","(fma.f64 -1 (*.f64 t z) (fma.f64 -1 t (*.f64 -1 (+.f64 (*.f64 t (pow.f64 z 3)) (*.f64 t (*.f64 z z))))))","(fma.f64 -1 (fma.f64 t z t) (*.f64 (neg.f64 t) (+.f64 (*.f64 z z) (pow.f64 z 3))))","(-.f64 (*.f64 (neg.f64 t) (+.f64 (fma.f64 z z (pow.f64 z 3)) z)) t)","(*.f64 (-.f64 -1 z) (fma.f64 t (*.f64 z z) t))","(/.f64 t z)","(+.f64 (/.f64 t (pow.f64 z 2)) (/.f64 t z))","(+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (/.f64 t z)))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 3))))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4)))))","(+.f64 (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t (pow.f64 z 3))) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t z) (+.f64 (/.f64 t (pow.f64 z 4)) (/.f64 t (pow.f64 z 3)))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4)))))","(/.f64 t z)","(+.f64 (/.f64 t (pow.f64 z 2)) (/.f64 t z))","(+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (/.f64 t z)))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 3))))","(+.f64 (/.f64 t (pow.f64 z 2)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4)))))","(+.f64 (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t (pow.f64 z 3))) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t z) (+.f64 (/.f64 t (pow.f64 z 4)) (/.f64 t (pow.f64 z 3)))))","(+.f64 (/.f64 t (*.f64 z z)) (+.f64 (/.f64 t (pow.f64 z 3)) (+.f64 (/.f64 t z) (/.f64 t (pow.f64 z 4)))))"]],"stop":[["node limit",1]],"time":65.234130859375,"type":"simplify"},{"compiler":[[4775,2365]],"time":45.221923828125,"type":"eval"},{"alts":[["(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","fresh",7.955410405993333],["(*.f64 x (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (/.f64 t (+.f64 z -1))))","fresh",6.479862359980135],["(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","done",6.266019470859463],["(fma.f64 (*.f64 x y) (/.f64 1 z) (/.f64 (*.f64 t x) (+.f64 z -1)))","fresh",7.9904634958246445],["(*.f64 y (/.f64 x z))","fresh",28.052775620704182],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","next",5.367946292694493],["(pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))) 3)","fresh",6.671464734641177],["(*.f64 (/.f64 x z) (+.f64 (+.f64 t y) (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z))))","fresh",26.687304765346088]],"compiler":[[17,11],[22,15],[15,10],[18,12],[9,6],[16,10],[18,13],[21,12],[17,11],[22,15],[18,12],[9,6],[16,10],[18,13],[21,12]],"count":[[265,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[264,7],"picked":[1,1]}],"min-error":[0.00390625],"time":83.919921875,"type":"prune"},{"compiler":[[37,16]],"locations":[["(/.f64 t (+.f64 z -1))",0.01171875,false],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))",0.280951402985505,true],["(/.f64 x (/.f64 z y))",7.032279089110771,true]],"time":8.112060546875,"type":"localize"},{"count":[[2,84]],"series":[["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","y","-inf",0.18310546875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","y","inf",0.169189453125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","y","0",0.2041015625],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","x","-inf",0.514892578125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","x","inf",0.43798828125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","x","0",0.26904296875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","z","-inf",0.280029296875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","z","inf",0.2451171875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","z","0",0.218994140625],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","t","-inf",0.239990234375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","t","inf",0.235107421875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","t","0",0.357177734375],["(/.f64 x (/.f64 z y))","y","-inf",0.27001953125],["(/.f64 x (/.f64 z y))","y","inf",0.3408203125],["(/.f64 x (/.f64 z y))","y","0",0.3759765625],["(/.f64 x (/.f64 z y))","z","-inf",0.31787109375],["(/.f64 x (/.f64 z y))","z","inf",1.12109375],["(/.f64 x (/.f64 z y))","z","0",0.42822265625],["(/.f64 x (/.f64 z y))","x","-inf",0.31005859375],["(/.f64 x (/.f64 z y))","x","inf",0.362060546875],["(/.f64 x (/.f64 z y))","x","0",0.44189453125]],"time":7.593017578125,"type":"series"},{"count":[[2,77]],"egraph":[[2,3519,24,0.027873874],[1,243,24,0.004331791000000001],[0,11,24,0.000279083]],"inputs":[["(/.f64 x (/.f64 z y))","(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (/.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 2) (cbrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) (sqrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) z) (/.f64 (sqrt.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) z) (/.f64 (cbrt.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (/.f64 x (cbrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (cbrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 z y))) (/.f64 x (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (/.f64 z y))) (/.f64 (cbrt.f64 x) (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 z y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (/.f64 z y) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 z y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (/.f64 y z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 y z)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 1) (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) 2) (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) (sqrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 3) (pow.f64 (*.f64 x (/.f64 y z)) 3)) (+.f64 (pow.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 2) (-.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2) (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 2) (pow.f64 (*.f64 x (/.f64 y z)) 2)) (-.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (/.f64 y z)) (exp.f64 (/.f64 (*.f64 t x) (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (/.f64 y z)))) (exp.f64 (/.f64 (*.f64 t x) (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (*.f64 t x) (+.f64 z -1))) (+.f64 1 (expm1.f64 (*.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) 1))))))"]],"rules":[["egg-rr",29],["egg-rr",48]],"stop":[["node limit",1]],"time":50.2099609375,"type":"rewrite"},{"count":[[161,102]],"egraph":[[4,7348,1004,0.031235958],[3,2187,1004,0.017197333000000002],[2,580,1040,0.004838083],[1,187,1116,0.001263458],[0,65,1218,0.000347708]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(/.f64 (+.f64 (*.f64 t x) (*.f64 y x)) z)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2)))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 4)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 (*.f64 y x) z) (neg.f64 (*.f64 x t)))","(-.f64 (/.f64 x (/.f64 z y)) (*.f64 x t))","(*.f64 x (-.f64 (/.f64 y z) t))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (+.f64 (*.f64 x t) (*.f64 t (*.f64 x z)))))","(fma.f64 -1 (*.f64 x (+.f64 t (*.f64 z t))) (/.f64 x (/.f64 z y)))","(-.f64 (*.f64 x (/.f64 y z)) (*.f64 t (fma.f64 x z x)))","(*.f64 x (-.f64 (/.f64 y z) (+.f64 t (*.f64 z t))))","(*.f64 x (+.f64 (/.f64 y z) (*.f64 t (-.f64 -1 z))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(+.f64 (/.f64 (*.f64 y x) z) (fma.f64 -1 (*.f64 x t) (fma.f64 -1 (*.f64 t (*.f64 x (*.f64 z z))) (neg.f64 (*.f64 t (*.f64 x z))))))","(+.f64 (-.f64 (/.f64 x (/.f64 z y)) (*.f64 x t)) (*.f64 (neg.f64 t) (+.f64 (*.f64 z (*.f64 x z)) (*.f64 x z))))","(-.f64 (*.f64 x (-.f64 (/.f64 y z) t)) (*.f64 t (*.f64 z (fma.f64 x z x))))","(*.f64 x (-.f64 (-.f64 (/.f64 y z) t) (*.f64 t (+.f64 z (*.f64 z z)))))","(*.f64 x (+.f64 (-.f64 (/.f64 y z) t) (*.f64 z (*.f64 t (-.f64 -1 z)))))","(/.f64 (+.f64 (*.f64 t x) (*.f64 y x)) z)","(/.f64 (*.f64 x (+.f64 t y)) z)","(/.f64 x (/.f64 z (+.f64 y t)))","(*.f64 (+.f64 y t) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))))","(fma.f64 (/.f64 y z) x (*.f64 (/.f64 t z) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2)))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4))))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))) (/.f64 (*.f64 x t) (pow.f64 z 4))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))) (*.f64 (/.f64 t (pow.f64 z 4)) x)))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))))","(fma.f64 (/.f64 y z) x (*.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 x (/.f64 x (*.f64 z z)))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))","(/.f64 (*.f64 x (+.f64 t y)) z)","(/.f64 x (/.f64 z (+.f64 y t)))","(*.f64 (+.f64 y t) (/.f64 x z))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))))","(fma.f64 (/.f64 y z) x (*.f64 (/.f64 t z) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 4)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))) (/.f64 (*.f64 x t) (pow.f64 z 4))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))) (*.f64 (/.f64 t (pow.f64 z 4)) x)))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))))","(fma.f64 (/.f64 y z) x (*.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 x (/.f64 x (*.f64 z z)))))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))"]],"stop":[["node limit",1]],"time":55.10595703125,"type":"simplify"},{"compiler":[[2749,1218]],"time":25.6611328125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","next",5.1754383888393],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","done",5.367946292694493],["(fma.f64 (/.f64 t (+.f64 z -1)) x (pow.f64 (/.f64 (/.f64 z y) x) -1))","fresh",5.391383792694492],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y))))","fresh",5.703907359642355],["(*.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) 2))","fresh",6.6695824338296275],["(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","fresh",26.687304765346088],["(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","fresh",7.955410405993333]],"compiler":[[16,10],[16,10],[18,12],[20,14],[33,19],[21,12],[17,11],[16,10],[18,12],[20,14],[33,19],[21,12],[17,11]],"count":[[163,7]],"kept":[{"done":[1,0],"fresh":[6,1],"new":[155,5],"picked":[1,1]}],"min-error":[0],"time":44.280029296875,"type":"prune"},{"compiler":[[37,16]],"locations":[["(/.f64 t (+.f64 z -1))",0.01171875,false],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))",0.280951402985505,true],["(*.f64 y (/.f64 x z))",5.1809342842839925,true]],"time":7.94287109375,"type":"localize"},{"count":[[2,84]],"series":[["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","y","-inf",0.1591796875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","y","inf",0.175048828125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","y","0",0.157958984375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","x","-inf",0.1708984375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","x","inf",0.175048828125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","x","0",0.159912109375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","z","-inf",0.225830078125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","z","inf",0.203125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","z","0",0.389892578125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","t","-inf",0.1630859375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","t","inf",0.166015625],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","t","0",0.18701171875],["(*.f64 y (/.f64 x z))","z","-inf",0.15380859375],["(*.f64 y (/.f64 x z))","z","inf",0.176025390625],["(*.f64 y (/.f64 x z))","z","0",0.14208984375],["(*.f64 y (/.f64 x z))","x","-inf",0.15283203125],["(*.f64 y (/.f64 x z))","x","inf",0.177978515625],["(*.f64 y (/.f64 x z))","x","0",0.140869140625],["(*.f64 y (/.f64 x z))","y","-inf",0.157958984375],["(*.f64 y (/.f64 x z))","y","inf",0.175048828125],["(*.f64 y (/.f64 x z))","y","0",0.19091796875]],"time":4.048095703125,"type":"series"},{"count":[[2,61]],"egraph":[[2,3275,24,0.027117458],[1,237,24,0.004165583],[0,11,24,0.000271083]],"inputs":[["(*.f64 y (/.f64 x z))","(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (*.f64 y x) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (/.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y x) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 y x) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) (pow.f64 (/.f64 x z) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 x z) 3) (pow.f64 y 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 y x) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (/.f64 x z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x z) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 y x) z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y x) z) (/.f64 x (/.f64 (+.f64 z -1) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (/.f64 (+.f64 z -1) t)) (/.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (/.f64 (+.f64 z -1) t)) 1) (/.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))) 2) (cbrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))) (sqrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 x (/.f64 (+.f64 z -1) t)) 3) (pow.f64 (/.f64 (*.f64 y x) z) 3)) (+.f64 (pow.f64 (/.f64 x (/.f64 (+.f64 z -1) t)) 2) (-.f64 (pow.f64 (/.f64 (*.f64 y x) z) 2) (*.f64 (/.f64 x (/.f64 (+.f64 z -1) t)) (/.f64 (*.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x (/.f64 (+.f64 z -1) t)) 2) (pow.f64 (/.f64 (*.f64 y x) z) 2)) (-.f64 (/.f64 x (/.f64 (+.f64 z -1) t)) (/.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) (/.f64 x z)) (exp.f64 (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 y x) z))) (exp.f64 (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 x (/.f64 (+.f64 z -1) t))) (+.f64 1 (expm1.f64 (/.f64 (*.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",31]],"stop":[["node limit",1]],"time":47.574951171875,"type":"rewrite"},{"count":[[145,86]],"egraph":[[4,7348,1004,0.03092475],[3,2187,1004,0.016943708000000002],[2,580,1040,0.004795875],[1,187,1116,0.0012665],[0,65,1218,0.000348208]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(/.f64 (+.f64 (*.f64 t x) (*.f64 y x)) z)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2)))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 4)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 (*.f64 y x) z) (neg.f64 (*.f64 x t)))","(-.f64 (/.f64 x (/.f64 z y)) (*.f64 x t))","(*.f64 x (-.f64 (/.f64 y z) t))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (+.f64 (*.f64 x t) (*.f64 t (*.f64 x z)))))","(fma.f64 -1 (*.f64 x (+.f64 t (*.f64 z t))) (/.f64 x (/.f64 z y)))","(-.f64 (*.f64 x (/.f64 y z)) (*.f64 t (fma.f64 x z x)))","(*.f64 x (-.f64 (/.f64 y z) (+.f64 t (*.f64 z t))))","(*.f64 x (+.f64 (/.f64 y z) (*.f64 t (-.f64 -1 z))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(+.f64 (/.f64 (*.f64 y x) z) (fma.f64 -1 (*.f64 x t) (fma.f64 -1 (*.f64 t (*.f64 x (*.f64 z z))) (neg.f64 (*.f64 t (*.f64 x z))))))","(+.f64 (-.f64 (/.f64 x (/.f64 z y)) (*.f64 x t)) (*.f64 (neg.f64 t) (+.f64 (*.f64 z (*.f64 x z)) (*.f64 x z))))","(-.f64 (*.f64 x (-.f64 (/.f64 y z) t)) (*.f64 t (*.f64 z (fma.f64 x z x))))","(*.f64 x (-.f64 (-.f64 (/.f64 y z) t) (*.f64 t (+.f64 z (*.f64 z z)))))","(*.f64 x (+.f64 (-.f64 (/.f64 y z) t) (*.f64 z (*.f64 t (-.f64 -1 z)))))","(/.f64 (+.f64 (*.f64 t x) (*.f64 y x)) z)","(/.f64 (*.f64 x (+.f64 t y)) z)","(/.f64 x (/.f64 z (+.f64 y t)))","(*.f64 (+.f64 y t) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))))","(fma.f64 (/.f64 y z) x (*.f64 (/.f64 t z) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2)))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4))))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))) (/.f64 (*.f64 x t) (pow.f64 z 4))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))) (*.f64 (/.f64 t (pow.f64 z 4)) x)))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))))","(fma.f64 (/.f64 y z) x (*.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 x (/.f64 x (*.f64 z z)))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))","(/.f64 (*.f64 x (+.f64 t y)) z)","(/.f64 x (/.f64 z (+.f64 y t)))","(*.f64 (+.f64 y t) (/.f64 x z))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))))","(fma.f64 (/.f64 y z) x (*.f64 (/.f64 t z) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 4)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))) (/.f64 (*.f64 x t) (pow.f64 z 4))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))) (*.f64 (/.f64 t (pow.f64 z 4)) x)))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))))","(fma.f64 (/.f64 y z) x (*.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 x (/.f64 x (*.f64 z z)))))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))"]],"stop":[["node limit",1]],"time":54.015869140625,"type":"simplify"},{"compiler":[[2441,1128]],"time":23.085205078125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","next",5.195344011672645],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y))))","fresh",5.703907359642355],["(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","fresh",6.266019470859463],["(pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)","fresh",5.19932186938586],["(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","fresh",26.687304765346088],["(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","fresh",7.955410405993333],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","done",5.367946292694493]],"compiler":[[16,10],[20,14],[15,10],[18,12],[21,12],[17,11],[16,10],[16,10],[20,14],[15,10],[18,12],[21,12],[17,11]],"count":[[146,7]],"kept":[{"done":[1,1],"fresh":[5,2],"new":[139,4],"picked":[1,0]}],"min-error":[0],"time":35.593017578125,"type":"prune"},{"compiler":[[37,16]],"locations":[["(/.f64 t (+.f64 z -1))",0.01171875,false],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))",0.280951402985505,true],["(/.f64 y (/.f64 z x))",5.2362261390508245,true]],"time":7.833984375,"type":"localize"},{"count":[[2,84]],"series":[["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","y","-inf",0.157958984375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","y","inf",0.175048828125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","y","0",0.156982421875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","x","-inf",0.18896484375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","x","inf",0.156982421875],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","x","0",0.156005859375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","z","-inf",0.215087890625],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","z","inf",0.19189453125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","z","0",0.19189453125],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","t","-inf",0.1708984375],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","t","inf",0.179931640625],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","t","0",0.166015625],["(/.f64 y (/.f64 z x))","x","-inf",0.299072265625],["(/.f64 y (/.f64 z x))","x","inf",0.16796875],["(/.f64 y (/.f64 z x))","x","0",0.14013671875],["(/.f64 y (/.f64 z x))","z","-inf",0.154052734375],["(/.f64 y (/.f64 z x))","z","inf",0.1689453125],["(/.f64 y (/.f64 z x))","z","0",0.141845703125],["(/.f64 y (/.f64 z x))","y","-inf",0.1708984375],["(/.f64 y (/.f64 z x))","y","inf",0.155029296875],["(/.f64 y (/.f64 z x))","y","0",0.19384765625]],"time":3.932861328125,"type":"series"},{"count":[[2,78]],"egraph":[[2,3521,23,0.027833082],[1,243,23,0.004432249],[0,11,24,0.000278416]],"inputs":[["(/.f64 y (/.f64 z x))","(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (/.f64 x z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (/.f64 x z))) (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x z))) 2) (cbrt.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y (/.f64 x z))) (sqrt.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (/.f64 (neg.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 y (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) z) (/.f64 (cbrt.f64 y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 z x)) 2)) (/.f64 y (cbrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (/.f64 z x)) 2)) (cbrt.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (/.f64 z x)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 z x))) (/.f64 y (sqrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (/.f64 z x))) (/.f64 (cbrt.f64 y) (sqrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y 1) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (neg.f64 z)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (/.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (/.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (/.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) (pow.f64 (/.f64 z x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (/.f64 z x) y) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (/.f64 (neg.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (/.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (/.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (/.f64 z x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (/.f64 x z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 x z)) (/.f64 (*.f64 t x) (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 y (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 1) (*.f64 y (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))) 2) (cbrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))) (sqrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 3) (pow.f64 (*.f64 y (/.f64 x z)) 3)) (+.f64 (pow.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 2) (-.f64 (pow.f64 (*.f64 y (/.f64 x z)) 2) (*.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 y (/.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) 2) (pow.f64 (*.f64 y (/.f64 x z)) 2)) (-.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) (/.f64 x z)) (exp.f64 (/.f64 (*.f64 t x) (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x z)))) (exp.f64 (/.f64 (*.f64 t x) (+.f64 z -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (*.f64 t x) (+.f64 z -1))) (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",48]],"stop":[["node limit",1]],"time":49.31103515625,"type":"rewrite"},{"count":[[162,102]],"egraph":[[4,7348,1004,0.031205167],[3,2187,1004,0.017259792],[2,580,1040,0.004887917],[1,187,1116,0.001284667],[0,65,1218,0.0003525]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(/.f64 (+.f64 (*.f64 t x) (*.f64 y x)) z)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2)))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 4)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(/.f64 (*.f64 t x) (-.f64 z 1))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (*.f64 t x)))","(+.f64 (/.f64 (*.f64 y x) z) (neg.f64 (*.f64 x t)))","(-.f64 (/.f64 x (/.f64 z y)) (*.f64 x t))","(*.f64 x (-.f64 (/.f64 y z) t))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 t (*.f64 z x)))))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (+.f64 (*.f64 x t) (*.f64 t (*.f64 x z)))))","(fma.f64 -1 (*.f64 x (+.f64 t (*.f64 z t))) (/.f64 x (/.f64 z y)))","(-.f64 (*.f64 x (/.f64 y z)) (*.f64 t (fma.f64 x z x)))","(*.f64 x (-.f64 (/.f64 y z) (+.f64 t (*.f64 z t))))","(*.f64 x (+.f64 (/.f64 y z) (*.f64 t (-.f64 -1 z))))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 (*.f64 t x)) (+.f64 (*.f64 -1 (*.f64 t (*.f64 (pow.f64 z 2) x))) (*.f64 -1 (*.f64 t (*.f64 z x))))))","(+.f64 (/.f64 (*.f64 y x) z) (fma.f64 -1 (*.f64 x t) (fma.f64 -1 (*.f64 t (*.f64 x (*.f64 z z))) (neg.f64 (*.f64 t (*.f64 x z))))))","(+.f64 (-.f64 (/.f64 x (/.f64 z y)) (*.f64 x t)) (*.f64 (neg.f64 t) (+.f64 (*.f64 z (*.f64 x z)) (*.f64 x z))))","(-.f64 (*.f64 x (-.f64 (/.f64 y z) t)) (*.f64 t (*.f64 z (fma.f64 x z x))))","(*.f64 x (-.f64 (-.f64 (/.f64 y z) t) (*.f64 t (+.f64 z (*.f64 z z)))))","(*.f64 x (+.f64 (-.f64 (/.f64 y z) t) (*.f64 z (*.f64 t (-.f64 -1 z)))))","(/.f64 (+.f64 (*.f64 t x) (*.f64 y x)) z)","(/.f64 (*.f64 x (+.f64 t y)) z)","(/.f64 x (/.f64 z (+.f64 y t)))","(*.f64 (+.f64 y t) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (/.f64 (*.f64 t x) (pow.f64 z 2))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))))","(fma.f64 (/.f64 y z) x (*.f64 (/.f64 t z) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (/.f64 (*.f64 t x) (pow.f64 z 2)))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (/.f64 (*.f64 t x) z) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (/.f64 (*.f64 t x) (pow.f64 z 4))))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))) (/.f64 (*.f64 x t) (pow.f64 z 4))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))) (*.f64 (/.f64 t (pow.f64 z 4)) x)))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))))","(fma.f64 (/.f64 y z) x (*.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 x (/.f64 x (*.f64 z z)))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))","(/.f64 (*.f64 x (+.f64 t y)) z)","(/.f64 x (/.f64 z (+.f64 y t)))","(*.f64 (+.f64 y t) (/.f64 x z))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (/.f64 t (/.f64 (*.f64 z z) x)))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))))","(fma.f64 (/.f64 y z) x (*.f64 (/.f64 t z) (+.f64 x (/.f64 x z))))","(*.f64 (/.f64 x z) (+.f64 (/.f64 t z) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z)))))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 t x) (pow.f64 z 3)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 2)) (+.f64 (/.f64 (*.f64 t x) (pow.f64 z 4)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 t x)) (*.f64 -1 (*.f64 y x))) z)))))","(+.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 z x))) (+.f64 (+.f64 (/.f64 t (/.f64 (*.f64 z z) x)) (/.f64 t (/.f64 (pow.f64 z 3) x))) (/.f64 (*.f64 x t) (pow.f64 z 4))))","(+.f64 (/.f64 x (/.f64 z y)) (+.f64 (+.f64 (+.f64 (*.f64 (/.f64 t z) x) (*.f64 (/.f64 x z) (/.f64 t z))) (/.f64 x (/.f64 (pow.f64 z 3) t))) (*.f64 (/.f64 t (pow.f64 z 4)) x)))","(fma.f64 (/.f64 y z) x (fma.f64 (/.f64 t z) x (fma.f64 (/.f64 t (pow.f64 z 4)) x (*.f64 (/.f64 t (*.f64 z z)) (+.f64 x (/.f64 x z))))))","(fma.f64 (/.f64 y z) x (*.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 x (/.f64 x (*.f64 z z)))))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 t (-.f64 z 1))) (*.f64 -1 (/.f64 y z))) x))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 t x) (-.f64 z 1))","(/.f64 t (/.f64 (+.f64 z -1) x))","(*.f64 (/.f64 t (+.f64 z -1)) x)","(*.f64 x (/.f64 t (+.f64 z -1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 y z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 t (/.f64 (+.f64 z -1) x)))","(*.f64 x (+.f64 (/.f64 t (+.f64 z -1)) (/.f64 y z)))"]],"stop":[["node limit",1]],"time":54.886962890625,"type":"simplify"},{"compiler":[[2723,1244]],"time":25.09814453125,"type":"eval"},{"alts":[["(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","fresh",6.266019470859463],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 (*.f64 y x) z))","fresh",5.649219859642355],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","done",5.195344011672645],["(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y))))","fresh",5.703907359642355],["(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","fresh",26.687304765346088],["(pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)","fresh",5.19932186938586],["(+.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 y (/.f64 x z)))","fresh",8.719910185190278],["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","done",5.367946292694493]],"compiler":[[15,10],[16,10],[16,10],[20,14],[21,12],[18,12],[17,11],[16,10]],"count":[[162,8]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[155,3],"picked":[1,1]}],"min-error":[0],"time":40.0869140625,"type":"prune"},{"accuracy":[0.16610766389084772],"baseline":[5.1754383888393],"branch":[["x",2.289736274415054,3],["y",3.648029434182717,2],["z",2.75754359754747,3],["t",1.492295320823992,5],["(*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))))",1.2660194708594639,3],["(-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z)))",0.16610766389084772,5]],"compiler":[[5,4],[5,4],[5,4],[5,4],[15,10],[13,9],[299,132]],"count":[[21,5]],"inputs":[["(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 (*.f64 y x) z))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 t x) (+.f64 z -1)) (*.f64 y (/.f64 x z)))","(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 y (/.f64 z x)))","(*.f64 (+.f64 (/.f64 t (-.f64 z 1)) (/.f64 y z)) x)","(pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 y (/.f64 x z)))","(fma.f64 (/.f64 t (+.f64 z -1)) x (pow.f64 (/.f64 (/.f64 z y) x) -1))","(fma.f64 (/.f64 t (+.f64 z -1)) x (*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y))))","(*.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 t (+.f64 z -1)) (*.f64 x (/.f64 y z)))) 2))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 (*.f64 t x) (-.f64 z 1)))","(*.f64 x (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (/.f64 t (+.f64 z -1))))","(fma.f64 (*.f64 x y) (/.f64 1 z) (/.f64 (*.f64 t x) (+.f64 z -1)))","(*.f64 y (/.f64 x z))","(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","(pow.f64 (cbrt.f64 (*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))) 3)","(*.f64 (/.f64 x z) (+.f64 (+.f64 t y) (+.f64 (/.f64 t (*.f64 z z)) (/.f64 t z))))","(*.f64 x (+.f64 (/.f64 y z) (/.f64 t (+.f64 z -1))))","(*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, C"],"oracle":[44.161374393097546],"outputs":[["(fma.f64 (*.f64 x y) (/.f64 1 z) (/.f64 (*.f64 t x) (+.f64 z -1)))","(fma.f64 (/.f64 t (+.f64 z -1)) x (pow.f64 (/.f64 (/.f64 z y) x) -1))","(*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t)))","(fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y)))","(pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)"]],"time":151.06103515625,"times":[["x",19.7490234375],["y",20.1748046875],["z",25.64404296875],["t",32.76708984375],["(*.f64 x (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))))",17.114990234375],["(-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z)))",30.690185546875]],"type":"regimes"},{"bstep":[[1.6351851019069966e+145,2.001362513301339e+156,0.026123046875],[5.444234275453645e-197,7.247895534609087e-192,0.028076171875],[-1.0011206548827021e-178,-1.2507713261527413e-180,0.048095703125],[-2.2374790504631016e+204,-5.242798527716835e+203,0.0908203125]],"compiler":[[9,7],[13,9]],"method":["left-value","left-value","left-value","left-value"],"time":0.419921875,"type":"bsearch"},{"compiler":[[121,67]],"egraph":[[5,82,171,0.000546292],[4,81,171,0.000448375],[3,77,171,0.000341208],[2,71,171,0.00025],[1,63,171,0.00016570799999999998],[0,49,171,8.7375e-5]],"inputs":[["(if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) -1999999999999999977538215750126588953018689196590998459950069697680585223647237336888853938920013796903718410691112844909629852261514762472830507743890852478294863899324781023557461759604328517292041175040) (fma.f64 (*.f64 x y) (/.f64 1 z) (/.f64 (*.f64 t x) (+.f64 z -1))) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) -912488123524439/9124881235244390437282343211400582649786457014497119861158385035798550334417354773011825622634742799557284619147188814621377409442750875996505322639444428376503989348720529900165748384493207552) (fma.f64 (/.f64 t (+.f64 z -1)) x (pow.f64 (/.f64 (/.f64 z y) x) -1)) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) 4208108721238699/42081087212386988057927919063041029324402718422585390875986247224549857234376646576909332290220707609815863750849425741704155458001470430905022518165215046799641789369027556785533310063074581738170346013886251008) (*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t))) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) 19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344) (fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y))) (pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) -1999999999999999977538215750126588953018689196590998459950069697680585223647237336888853938920013796903718410691112844909629852261514762472830507743890852478294863899324781023557461759604328517292041175040) (fma.f64 (*.f64 x y) (/.f64 1 z) (/.f64 (*.f64 t x) (+.f64 z -1))) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) -912488123524439/9124881235244390437282343211400582649786457014497119861158385035798550334417354773011825622634742799557284619147188814621377409442750875996505322639444428376503989348720529900165748384493207552) (fma.f64 (/.f64 t (+.f64 z -1)) x (pow.f64 (/.f64 (/.f64 z y) x) -1)) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) 4208108721238699/42081087212386988057927919063041029324402718422585390875986247224549857234376646576909332290220707609815863750849425741704155458001470430905022518165215046799641789369027556785533310063074581738170346013886251008) (*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t))) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) 19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344) (fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y))) (pow.f64 (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t))) 1)))))","(if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) -1999999999999999977538215750126588953018689196590998459950069697680585223647237336888853938920013796903718410691112844909629852261514762472830507743890852478294863899324781023557461759604328517292041175040) (fma.f64 (*.f64 y x) (/.f64 1 z) (/.f64 (*.f64 t x) (+.f64 z -1))) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) -912488123524439/9124881235244390437282343211400582649786457014497119861158385035798550334417354773011825622634742799557284619147188814621377409442750875996505322639444428376503989348720529900165748384493207552) (fma.f64 (/.f64 t (+.f64 z -1)) x (pow.f64 (/.f64 (/.f64 z y) x) -1)) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) 4208108721238699/42081087212386988057927919063041029324402718422585390875986247224549857234376646576909332290220707609815863750849425741704155458001470430905022518165215046799641789369027556785533310063074581738170346013886251008) (*.f64 (/.f64 x z) (+.f64 (+.f64 (/.f64 t z) (/.f64 t (*.f64 z z))) (+.f64 y t))) (if (<=.f64 (-.f64 (/.f64 y z) (/.f64 t (-.f64 1 z))) 19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344) (fma.f64 (/.f64 t (+.f64 z -1)) x (/.f64 x (/.f64 z y))) (fma.f64 y (/.f64 x z) (/.f64 x (/.f64 (+.f64 z -1) t)))))))"]],"stop":[["fuel",1],["saturated",1]],"time":11.946044921875,"type":"simplify"},{"time":0.029052734375,"type":"soundness"},{"compiler":[[121,67]],"remove-preprocessing":[[]],"time":29.19287109375,"type":"end"}]
[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.4797652819565883,0.41930705536856294,0.10092766267484876],[11,0.40565519775191206,0.499267935694661,0.09507686655342695],[10,0.34324670579007943,0.5694774891517227,0.08727580505819788],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":75.0400390625,"type":"analyze"},{"outcomes":[["body",256,"invalid",42.011474609375,1165],["body",512,"valid",0.0791015625,1],["body",1024,"valid",0.19677734375,2],["body",256,"valid",303.20068359375,8253]],"time":354.31396484375,"type":"sample"},{"compiler":[[10,7]],"egraph":[[1,3,3,6.665999999999999e-6],[0,3,3,5.666e-6],[14,7115,40,0.131068708],[13,7115,40,0.112967083],[12,5972,40,0.09556825],[11,5972,40,0.075807208],[10,5861,40,0.059439291000000005],[9,5861,40,0.044010208],[8,5753,40,0.037059958000000004],[7,5221,40,0.029801417],[6,3353,40,0.020545167],[5,1931,40,0.010907792],[4,705,40,0.004876],[3,226,40,0.001507041],[2,82,40,0.000509458],[1,30,40,0.00017104099999999998],[0,16,40,6.9e-5]],"inputs":[["0","1","2"],["(*.f64 (+.f64 x y) (-.f64 1 z))","(*.f64 (+.f64 y x) (-.f64 1 z))","(*.f64 (+.f64 z y) (-.f64 1 x))","(*.f64 (+.f64 x z) (-.f64 1 y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2"],["(*.f64 (+.f64 x y) (-.f64 1 z))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 (+.f64 y x) (-.f64 1 z))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 (+.f64 z y) (-.f64 1 x))","(*.f64 (+.f64 y z) (-.f64 1 x))","(*.f64 (+.f64 x z) (-.f64 1 y))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":156.7109375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,2873,10,0.039742291],[10,2873,10,0.032985499],[9,2838,10,0.026992041],[8,2505,10,0.020658041000000002],[7,1945,10,0.013870499000000001],[6,1215,10,0.007633666000000001],[5,701,10,0.004043625],[4,261,10,0.00180175],[3,82,10,0.000608333],[2,32,10,0.000230291],[1,14,10,9.462500000000001e-5],[0,8,10,4.1041e-5]],"inputs":[["(*.f64 (+.f64 x y) (-.f64 1 z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) (-.f64 1 z))"]],"stop":[["saturated",1]],"time":50.7021484375,"type":"simplify"},{"compiler":[[10,7]],"time":0.22705078125,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) (-.f64 1 z))","next",0.015625]],"compiler":[[10,7],[10,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.7138671875,"type":"prune"},{"compiler":[[20,10]],"locations":[["(*.f64 (+.f64 x y) (-.f64 1 z))",0.015625,true]],"time":4.35400390625,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (+.f64 x y) (-.f64 1 z))","z","-inf",0.244140625],["(*.f64 (+.f64 x y) (-.f64 1 z))","z","inf",0.3330078125],["(*.f64 (+.f64 x y) (-.f64 1 z))","z","0",0.383056640625],["(*.f64 (+.f64 x y) (-.f64 1 z))","y","-inf",0.2548828125],["(*.f64 (+.f64 x y) (-.f64 1 z))","y","inf",0.296875],["(*.f64 (+.f64 x y) (-.f64 1 z))","y","0",0.2529296875],["(*.f64 (+.f64 x y) (-.f64 1 z))","x","-inf",0.2939453125],["(*.f64 (+.f64 x y) (-.f64 1 z))","x","inf",0.376953125],["(*.f64 (+.f64 x y) (-.f64 1 z))","x","0",0.362060546875]],"time":2.929931640625,"type":"series"},{"count":[[1,36]],"egraph":[[2,2363,10,0.020397791000000002],[1,171,10,0.002991625],[0,8,10,0.00020825]],"inputs":[["(*.f64 (+.f64 x y) (-.f64 1 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (*.f64 (neg.f64 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (*.f64 (+.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) y) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 x y) (-.f64 1 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (-.f64 1 (pow.f64 z 3))) (*.f64 (fma.f64 x x (*.f64 y (-.f64 y x))) (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (-.f64 1 (pow.f64 z 3))) (*.f64 (-.f64 x y) (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (-.f64 1 (*.f64 z z))) (*.f64 (fma.f64 x x (*.f64 y (-.f64 y x))) (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (-.f64 1 (*.f64 z z))) (*.f64 (-.f64 x y) (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (*.f64 (+.f64 1 (fma.f64 z z z)) (fma.f64 x x (*.f64 y (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 z z)) (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (*.f64 (+.f64 1 z) (fma.f64 x x (*.f64 y (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (-.f64 (*.f64 x x) (*.f64 y y))) (*.f64 (+.f64 1 (fma.f64 z z z)) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 z z)) (-.f64 (*.f64 x x) (*.f64 y y))) (*.f64 (+.f64 1 z) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (-.f64 1 z)) (fma.f64 x x (*.f64 y (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (-.f64 1 z)) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (+.f64 x y)) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 z z)) (+.f64 x y)) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (-.f64 1 (pow.f64 z 3))) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (-.f64 1 (*.f64 z z))) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 x x (*.f64 y (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) (-.f64 (*.f64 x x) (*.f64 y y))) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x y)) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (+.f64 x y) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 3) (pow.f64 (-.f64 1 z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 1 z) 3) (pow.f64 (+.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x y) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x y) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x y) (-.f64 1 z))))))))"]],"rules":[["egg-rr",36]],"stop":[["node limit",1]],"time":38.39306640625,"type":"rewrite"},{"count":[[72,48]],"egraph":[[9,3105,334,0.038208625999999996],[8,3101,334,0.031443501],[7,2761,334,0.024632834],[6,2033,334,0.016291001],[5,1109,334,0.008822751],[4,484,334,0.003986626],[3,266,334,0.001596084],[2,95,334,0.000729126],[1,40,334,0.000293542],[0,17,442,0.000107125]],"inputs":[["(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 y x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(-.f64 x (*.f64 z x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(-.f64 x (*.f64 z x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(-.f64 x (*.f64 z x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(neg.f64 (*.f64 z (+.f64 y x)))","(*.f64 z (neg.f64 (+.f64 y x)))","(*.f64 (+.f64 y x) (neg.f64 z))","(*.f64 z (-.f64 (neg.f64 y) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(neg.f64 (*.f64 z (+.f64 y x)))","(*.f64 z (neg.f64 (+.f64 y x)))","(*.f64 (+.f64 y x) (neg.f64 z))","(*.f64 z (-.f64 (neg.f64 y) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))"]],"stop":[["saturated",1]],"time":55.803955078125,"type":"simplify"},{"compiler":[[624,311]],"time":6.527099609375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) 3)","fresh",0.7374765137479348],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","next",0.01171875],["(+.f64 (+.f64 x y) (*.f64 (neg.f64 z) (+.f64 x y)))","fresh",0.015625]],"compiler":[[13,10],[14,10],[13,7],[13,10],[14,10],[13,7]],"count":[[49,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[48,3],"picked":[1,0]}],"min-error":[0],"time":8.490966796875,"type":"prune"},{"compiler":[[31,19]],"locations":[["(*.f64 x (-.f64 1 z))",0.00390625,true],["(*.f64 y (-.f64 1 z))",0.00390625,true],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))",0.0078125,true]],"time":6.986083984375,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 x (-.f64 1 z))","z","-inf",0.14501953125],["(*.f64 x (-.f64 1 z))","z","inf",0.162841796875],["(*.f64 x (-.f64 1 z))","z","0",0.153076171875],["(*.f64 x (-.f64 1 z))","x","-inf",0.168212890625],["(*.f64 x (-.f64 1 z))","x","inf",0.197998046875],["(*.f64 x (-.f64 1 z))","x","0",0.2060546875],["(*.f64 y (-.f64 1 z))","z","-inf",0.1650390625],["(*.f64 y (-.f64 1 z))","z","inf",0.14697265625],["(*.f64 y (-.f64 1 z))","z","0",0.15283203125],["(*.f64 y (-.f64 1 z))","y","-inf",0.200927734375],["(*.f64 y (-.f64 1 z))","y","inf",0.201904296875],["(*.f64 y (-.f64 1 z))","y","0",0.235107421875],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","y","-inf",0.27099609375],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","y","inf",0.23583984375],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","y","0",0.275146484375],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","z","-inf",0.26611328125],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","z","inf",0.592041015625],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","z","0",0.321044921875],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","x","-inf",0.3310546875],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","x","inf",0.2958984375],["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","x","0",0.303955078125]],"time":5.2529296875,"type":"series"},{"count":[[3,163]],"egraph":[[2,2686,24,0.024606834],[1,194,24,0.003532417],[0,9,24,0.000235]],"inputs":[["(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","(*.f64 y (-.f64 1 z))","(*.f64 x (-.f64 1 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 1 z) (+.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 2) (*.f64 (-.f64 1 z) (-.f64 x y))) (/.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2) (*.f64 (-.f64 1 z) (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 z)) 2) (*.f64 (cbrt.f64 (-.f64 1 z)) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 2) (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 z)) (*.f64 (sqrt.f64 (-.f64 1 z)) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) (sqrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3) (pow.f64 (*.f64 (-.f64 1 z) y) 3)) (/.f64 1 (fma.f64 (*.f64 (-.f64 1 z) y) (-.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z))) (pow.f64 (*.f64 x (-.f64 1 z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 (-.f64 1 z) (-.f64 x y))) (/.f64 1 (*.f64 (-.f64 1 z) (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 (-.f64 1 z) y) (-.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z))) (pow.f64 (*.f64 x (-.f64 1 z)) 2)) (+.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3) (pow.f64 (*.f64 (-.f64 1 z) y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (-.f64 1 z) (-.f64 x y)) (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 (-.f64 1 z) (-.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3) (pow.f64 (*.f64 (-.f64 1 z) y) 3)) (fma.f64 (*.f64 (-.f64 1 z) y) (-.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z))) (pow.f64 (*.f64 x (-.f64 1 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3) (pow.f64 (*.f64 (-.f64 1 z) y) 3)) (+.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2) (-.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 2) (*.f64 (*.f64 x (-.f64 1 z)) (*.f64 (-.f64 1 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 (-.f64 1 z) (-.f64 x y))) (*.f64 (-.f64 1 z) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3) (pow.f64 (*.f64 (-.f64 1 z) y) 3))) (neg.f64 (fma.f64 (*.f64 (-.f64 1 z) y) (-.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z))) (pow.f64 (*.f64 x (-.f64 1 z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 (-.f64 1 z) (-.f64 x y)))) (neg.f64 (*.f64 (-.f64 1 z) (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2) (pow.f64 (*.f64 x (-.f64 1 z)) 2)) (-.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (+.f64 x y)) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 z z)) (+.f64 x y)) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 (-.f64 1 z) y) (-.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z))) (pow.f64 (*.f64 x (-.f64 1 z)) 2)) (+.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3) (pow.f64 (*.f64 (-.f64 1 z) y) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 1 z) (-.f64 x y)) (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 (-.f64 1 z) (-.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y)))) 2)) (cbrt.f64 (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))) (sqrt.f64 (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x y)) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 z) (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (-.f64 1 z)))) (pow.f64 (exp.f64 y) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (-.f64 1 z)) (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (-.f64 1 z)))) (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 z) y))) (pow.f64 (exp.f64 x) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) (-.f64 1 z)) (+.f64 1 (expm1.f64 (*.f64 x (-.f64 1 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 z) y))) (+.f64 1 (expm1.f64 (*.f64 x (-.f64 1 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) x (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) y (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (-.f64 1 z)) 1 (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 1 z) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) y) 1 (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y)) (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y)) 2) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y)) 2) (cbrt.f64 (*.f64 (-.f64 1 z) y)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 z)) 2) (*.f64 (cbrt.f64 (-.f64 1 z)) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 z)) 2) (*.f64 (cbrt.f64 (-.f64 1 z)) x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (-.f64 1 z))) (pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 z))) 2) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 z))) 2) (cbrt.f64 (*.f64 x (-.f64 1 z))) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (-.f64 1 z)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (-.f64 1 z) y)) (sqrt.f64 (*.f64 (-.f64 1 z) y)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 z)) (*.f64 (sqrt.f64 (-.f64 1 z)) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 z)) (*.f64 (sqrt.f64 (-.f64 1 z)) x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (-.f64 1 z))) (sqrt.f64 (*.f64 x (-.f64 1 z))) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (-.f64 1 z)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (sqrt.f64 y)) (sqrt.f64 y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 (-.f64 1 z)) 2)) (cbrt.f64 (-.f64 1 z)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (-.f64 1 z))) (sqrt.f64 (-.f64 1 z)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 z)) 2)) (cbrt.f64 (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (-.f64 1 z))) (sqrt.f64 (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (-.f64 1 z) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (-.f64 1 z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (-.f64 1 z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 1 z) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 z z)) y) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (pow.f64 z 3))) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (*.f64 z z))) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 1 z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (-.f64 1 z) y))) 2)) (cbrt.f64 (log.f64 (*.f64 (-.f64 1 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (-.f64 1 z) y)))) (sqrt.f64 (log.f64 (*.f64 (-.f64 1 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 z) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (-.f64 1 z) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (-.f64 1 z) y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 z) y)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 z) y)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 2) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 2) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 y) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 y) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (*.f64 y (neg.f64 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (-.f64 1 z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (-.f64 1 z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (-.f64 1 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) x) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 z z)) x) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (*.f64 z z))) (+.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 x (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (-.f64 1 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x (-.f64 1 z)))) 2)) (cbrt.f64 (log.f64 (*.f64 x (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x (-.f64 1 z))))) (sqrt.f64 (log.f64 (*.f64 x (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (-.f64 1 z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (-.f64 1 z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (-.f64 1 z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x (-.f64 1 z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (-.f64 1 z))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (-.f64 1 z))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (neg.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (neg.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 (neg.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 (neg.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (neg.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 x (neg.f64 z)))))))"]],"rules":[["egg-rr",41],["egg-rr",41],["egg-rr",81]],"stop":[["node limit",1]],"time":51.800048828125,"type":"rewrite"},{"count":[[235,185]],"egraph":[[9,2897,570,0.042075749999999995],[8,2897,570,0.035264458],[7,2874,570,0.028654582999999997],[6,2602,570,0.021950999],[5,1542,570,0.014081291],[4,718,570,0.006460791],[3,264,570,0.002384583],[2,133,570,0.001035708],[1,73,570,0.000471749],[0,29,678,0.000175583]],"inputs":[["(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","y","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 -1 (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","(*.f64 (-.f64 1 z) x)","x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)","(neg.f64 (*.f64 z (+.f64 y x)))","(*.f64 z (-.f64 (neg.f64 y) x))","(*.f64 z (-.f64 (neg.f64 x) y))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(neg.f64 (*.f64 z (+.f64 y x)))","(*.f64 z (-.f64 (neg.f64 y) x))","(*.f64 z (-.f64 (neg.f64 x) y))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","y","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(-.f64 y (*.f64 y z))","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(*.f64 x (neg.f64 z))","(*.f64 z (neg.f64 x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(*.f64 x (neg.f64 z))","(*.f64 z (neg.f64 x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(fma.f64 z (neg.f64 x) x)"]],"stop":[["saturated",1]],"time":66.058837890625,"type":"simplify"},{"compiler":[[2870,1791]],"time":32.235107421875,"type":"eval"},{"alts":[["(+.f64 (+.f64 x (*.f64 (neg.f64 z) x)) (*.f64 y (-.f64 1 z)))","fresh",0.0078125],["(fma.f64 (-.f64 1 z) y (*.f64 x (-.f64 1 z)))","next",0.00390625]],"compiler":[[15,10],[13,9],[15,10],[13,9]],"count":[[188,2]],"kept":[{"done":[0,0],"fresh":[2,0],"new":[185,2],"picked":[1,0]}],"min-error":[0],"time":51.700927734375,"type":"prune"},{"compiler":[[25,15]],"locations":[["(*.f64 x (-.f64 1 z))",0.00390625,false]],"time":5.89306640625,"type":"localize"},{"compiler":[[647,387]],"time":8.529052734375,"type":"eval"},{"alts":[["(fma.f64 (-.f64 1 z) y (+.f64 x (*.f64 x (neg.f64 z))))","next",0]],"compiler":[[14,9],[14,9]],"count":[[47,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[45,1],"picked":[1,0]}],"min-error":[0],"time":7.009033203125,"type":"prune"},{"compiler":[[33,12]],"time":6.64892578125,"type":"localize"},{"compiler":[[3,3]],"time":0.087890625,"type":"eval"},{"alts":[["(fma.f64 (-.f64 1 z) y (+.f64 x (*.f64 x (neg.f64 z))))","done",0]],"compiler":[[14,9]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.488037109375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(*.f64 (+.f64 x y) (-.f64 1 z))",0,1],["(*.f64 (+.f64 x y) (-.f64 1 z))",0,1],["(+.f64 x y)",0,1],["(+.f64 x y)",0,1],["(-.f64 1 z)",0,1],["(-.f64 1 z)",0,1]],"compiler":[[4,3],[4,3],[4,3],[10,7],[10,7],[6,4],[6,4],[6,5],[6,5],[74,40]],"count":[[7,1]],"inputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (*.f64 x (neg.f64 z))))","(+.f64 (+.f64 x (*.f64 (neg.f64 z) x)) (*.f64 y (-.f64 1 z)))","(fma.f64 (-.f64 1 z) y (*.f64 x (-.f64 1 z)))","(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) 3)","(+.f64 (*.f64 x (-.f64 1 z)) (*.f64 y (-.f64 1 z)))","(+.f64 (+.f64 x y) (*.f64 (neg.f64 z) (+.f64 x y)))","(*.f64 (+.f64 x y) (-.f64 1 z))"]],"link":["."],"name":["Optimisation.CirclePacking:place from circle-packing-0.1.0.4, H"],"oracle":[0.7452890137479348],"outputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (*.f64 x (neg.f64 z))))"]],"time":32.862060546875,"times":[["x",3.7060546875],["y",3.72998046875],["z",3.43310546875],["(*.f64 (+.f64 x y) (-.f64 1 z))",3.908203125],["(*.f64 (+.f64 x y) (-.f64 1 z))",3.85986328125],["(+.f64 x y)",3.75],["(+.f64 x y)",3.89599609375],["(-.f64 1 z)",2.468017578125],["(-.f64 1 z)",2.52099609375]],"type":"regimes"},{"compiler":[[13,8]],"egraph":[[5,40,14,0.000270708],[4,39,14,0.00021375],[3,36,14,0.0001645],[2,30,14,0.000115791],[1,20,14,7.0875e-5],[0,10,16,3.475e-5]],"inputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (*.f64 x (neg.f64 z))))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (*.f64 x (neg.f64 z))))","(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 x z))))","(fma.f64 (-.f64 1 z) y (-.f64 x (*.f64 z x)))"]],"stop":[["done",1],["saturated",1]],"time":8.696044921875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[13,8],[13,8],[13,8]],"remove-preprocessing":[[]],"time":16.451171875,"type":"end"}]
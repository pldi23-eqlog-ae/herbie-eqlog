[{"compiler":[[13,11]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.594970703125,"type":"analyze"},{"outcomes":[["body",1024,"valid",43.344970703125,448],["body",512,"valid",134.30029296875,2067],["body",256,"valid",202.540771484375,5741]],"time":387.8369140625,"type":"sample"},{"compiler":[[12,10]],"egraph":[[0,1,1,1e-6],[11,238,16,0.0036840830000000003],[10,236,16,0.0031750830000000004],[9,210,16,0.0026445830000000003],[8,174,16,0.0020400410000000003],[7,128,16,0.0014754580000000002],[6,94,16,0.0010322080000000002],[5,57,16,0.000628583],[4,39,16,0.000383625],[3,29,16,0.000263458],[2,21,16,0.00016779099999999998],[1,16,16,9.9625e-5],[0,8,16,5.5125e-5]],"inputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","(-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":26.655029296875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,238,16,0.0036555850000000003],[10,236,16,0.0031470020000000003],[9,210,16,0.002619044],[8,174,16,0.0020100020000000003],[7,128,16,0.001447085],[6,94,16,0.00100521],[5,57,16,0.0006081680000000001],[4,39,16,0.00037179300000000004],[3,29,16,0.00025262600000000004],[2,21,16,0.000159585],[1,16,16,9.3751e-5],[0,8,16,5.1084e-5]],"inputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))","(-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (+.f64 x -1)))","(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))"]],"stop":[["saturated",1]],"time":13.97412109375,"type":"simplify"},{"compiler":[[23,19]],"time":0.425048828125,"type":"eval"},{"alts":[["(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))","next",14.767992358644088]],"compiler":[[12,10],[12,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[14.767992358644088],"time":0.868896484375,"type":"prune"},{"compiler":[[31,24]],"locations":[["(/.f64 1 (+.f64 1 x))",0.00390625,true],["(/.f64 -1 (+.f64 x -1))",0.01171875,true],["(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))",1.7653643076150247,true]],"time":7.18701171875,"type":"localize"},{"count":[[3,36]],"series":[["(/.f64 1 (+.f64 1 x))","x","-inf",0.160888671875],["(/.f64 1 (+.f64 1 x))","x","inf",0.18798828125],["(/.f64 1 (+.f64 1 x))","x","0",0.18505859375],["(/.f64 -1 (+.f64 x -1))","x","-inf",0.18408203125],["(/.f64 -1 (+.f64 x -1))","x","inf",0.256103515625],["(/.f64 -1 (+.f64 x -1))","x","0",0.2060546875],["(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))","x","-inf",0.296875],["(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))","x","inf",0.463134765625],["(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))","x","0",0.387939453125]],"time":2.467041015625,"type":"series"},{"count":[[3,140]],"egraph":[[2,3252,30,0.0266895],[1,211,30,0.003994125],[0,9,30,0.000287875]],"inputs":[["(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))","(/.f64 -1 (+.f64 x -1))","(/.f64 1 (+.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (+.f64 1 x) -2) (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) (/.f64 (pow.f64 (+.f64 x -1) -2) (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) 2) (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2)) (hypot.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 (-.f64 1 x) -3)) (/.f64 1 (-.f64 (+.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2)) (/.f64 -1 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2)) (/.f64 1 (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x -1) (fma.f64 (+.f64 1 x) -1 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (+.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2)) (/.f64 -1 (fma.f64 x x -1))) (+.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 (-.f64 1 x) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 (-.f64 1 x) -3)) (-.f64 (+.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2)) (/.f64 -1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 (-.f64 1 x) -3)) (+.f64 (pow.f64 (+.f64 x -1) -2) (-.f64 (pow.f64 (+.f64 1 x) -2) (/.f64 -1 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2)) (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1))) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 (-.f64 1 x) -3))) (neg.f64 (-.f64 (+.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2)) (/.f64 -1 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2))) (neg.f64 (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 1 x) (+.f64 1 x)) (*.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (-.f64 1 x) (*.f64 (+.f64 -1 (neg.f64 x)) 1)) (*.f64 (+.f64 -1 (neg.f64 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 1 x) (*.f64 (+.f64 -1 (neg.f64 x)) -1)) (*.f64 (+.f64 -1 (neg.f64 x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 1 x) (*.f64 (-.f64 1 x) 1)) (*.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 x) -1 (*.f64 (-.f64 1 x) -1)) (*.f64 (-.f64 1 x) (+.f64 -1 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (+.f64 -1 (neg.f64 x)) (-.f64 1 x)) (*.f64 (+.f64 x -1) (+.f64 -1 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x -1) -2) (pow.f64 (+.f64 1 x) -2)) (-.f64 (/.f64 1 (-.f64 1 x)) (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (+.f64 1 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x -1) (fma.f64 (+.f64 1 x) -1 (+.f64 x -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2)) (/.f64 -1 (fma.f64 x x -1))) (+.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 (-.f64 1 x) -3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 (+.f64 x -1) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 1 x)))) (exp.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1 (+.f64 1 x))) (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 1 x)))) (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))) (exp.f64 (/.f64 1 (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1 (-.f64 1 x))) (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))) (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (+.f64 1 x)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (-.f64 1 x)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 x)) 1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (+.f64 x -1)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (+.f64 -1 (neg.f64 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 x)) 1 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (+.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (-.f64 1 x) -1/2) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (fma.f64 x x -1)) (+.f64 1 x) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x -1)) -1 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) -2) (/.f64 1 (cbrt.f64 (+.f64 1 x))) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1)) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (pow.f64 x 3) -1) -1) (fma.f64 x (+.f64 x -1) 1) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) (-.f64 1 x) (/.f64 1 (-.f64 1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (-.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) -2)) (/.f64 1 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) -1/2) (pow.f64 (-.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x -1)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (exp.f64 (/.f64 1 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (neg.f64 (log1p.f64 (neg.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 1 x) -1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 1 x) -3)) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (+.f64 -1 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) -2) (/.f64 1 (cbrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (pow.f64 x 3) -1) -1) (fma.f64 x (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 (*.f64 x x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (+.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (+.f64 -1 (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (neg.f64 (log1p.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -1/2 (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -3 (log1p.f64 x)) 1/3))))))"]],"rules":[["egg-rr",36],["egg-rr",33],["egg-rr",71]],"stop":[["node limit",1]],"time":51.77587890625,"type":"rewrite"},{"count":[[176,182]],"egraph":[[3,2102,537,0.01713925],[2,602,538,0.0046415],[1,187,548,0.0012405],[0,64,585,0.00029875]],"inputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (pow.f64 x 2) x))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 3) x)))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (fma.f64 2 (*.f64 x x) 2) (*.f64 2 (pow.f64 x 4)))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 4) 2))","(*.f64 2 (+.f64 (fma.f64 x x 1) (pow.f64 x 4)))","(*.f64 2 (+.f64 (pow.f64 x 4) (fma.f64 x x 1)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 6) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 6) (fma.f64 2 (pow.f64 x 4) 2)))","(fma.f64 2 (fma.f64 x x (pow.f64 x 6)) (fma.f64 2 (pow.f64 x 4) 2))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (+.f64 (/.f64 -2 (*.f64 x x)) (/.f64 -2 (pow.f64 x 6))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x)))))","(-.f64 (/.f64 -2 (pow.f64 x 8)) (+.f64 (+.f64 (/.f64 2 (pow.f64 x 6)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 4))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (+.f64 (/.f64 -2 (pow.f64 x 8)) (/.f64 -2 (pow.f64 x 6))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (+.f64 (/.f64 -2 (*.f64 x x)) (/.f64 -2 (pow.f64 x 6))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x)))))","(-.f64 (/.f64 -2 (pow.f64 x 8)) (+.f64 (+.f64 (/.f64 2 (pow.f64 x 6)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 4))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (+.f64 (/.f64 -2 (pow.f64 x 8)) (/.f64 -2 (pow.f64 x 6))))","1","(+.f64 1 x)","(+.f64 x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) x))","(+.f64 1 (+.f64 x (*.f64 x x)))","(+.f64 1 (fma.f64 x x x))","(+.f64 x (fma.f64 x x 1))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 3) x)))","(+.f64 1 (+.f64 (*.f64 x x) (+.f64 x (pow.f64 x 3))))","(+.f64 (*.f64 x (fma.f64 x x x)) (+.f64 x 1))","(+.f64 1 (fma.f64 x (fma.f64 x x x) x))","(*.f64 (+.f64 x 1) (fma.f64 x x 1))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 x)))","(-.f64 (/.f64 -1 x) (/.f64 1 (*.f64 x x)))","(-.f64 (/.f64 -1 (*.f64 x x)) (/.f64 1 x))","(+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 x))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (/.f64 1 x)) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 x)) (/.f64 -1 (pow.f64 x 3)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))))","(+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (/.f64 1 x)) (/.f64 -1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 -1 x) (/.f64 -1 (pow.f64 x 3)))))","(/.f64 -1 x)","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 x)))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 x)))","(-.f64 (/.f64 -1 x) (/.f64 1 (*.f64 x x)))","(-.f64 (/.f64 -1 (*.f64 x x)) (/.f64 1 x))","(+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 x))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x))))","(neg.f64 (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))))","(-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (/.f64 1 x)) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 x)) (/.f64 -1 (pow.f64 x 3)))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))))","(+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (+.f64 (-.f64 (/.f64 -1 (*.f64 x x)) (/.f64 1 x)) (/.f64 -1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 -1 x) (/.f64 -1 (pow.f64 x 3)))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (neg.f64 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 1 (fma.f64 -1 x (*.f64 x x)))","(+.f64 (*.f64 x x) (-.f64 1 x))","(-.f64 (fma.f64 x x 1) x)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(fma.f64 -1 (pow.f64 x 3) (+.f64 1 (fma.f64 -1 x (*.f64 x x))))","(-.f64 (+.f64 (*.f64 x x) (-.f64 1 x)) (pow.f64 x 3))","(-.f64 (-.f64 (fma.f64 x x 1) x) (pow.f64 x 3))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (*.f64 x x)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (*.f64 x x))))","(+.f64 (+.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (*.f64 x x)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (*.f64 x x))))","(+.f64 (+.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))) (/.f64 -1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))"]],"stop":[["node limit",1]],"time":34.864013671875,"type":"simplify"},{"compiler":[[2934,2374]],"time":39.576171875,"type":"eval"},{"alts":[["(/.f64 -2 (*.f64 x x))","fresh",32.47863891517571],["(/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))","next",13.981645033887672],["(+.f64 (/.f64 1 (+.f64 1 x)) (pow.f64 (pow.f64 (-.f64 1 x) -1/2) 2))","fresh",26.66202536451749]],"compiler":[[6,4],[14,10],[14,12],[6,4],[14,10],[14,12]],"count":[[183,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[182,3],"picked":[1,0]}],"min-error":[0.06429465476030194],"time":46.346923828125,"type":"prune"},{"compiler":[[35,24]],"locations":[["(/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))",0.01171875,true],["(fma.f64 (+.f64 1 x) -1 (+.f64 x -1))",0.9687500000000001,true]],"time":8.48486328125,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))","x","-inf",0.238037109375],["(/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))","x","inf",0.2509765625],["(/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))","x","0",0.241943359375],["(fma.f64 (+.f64 1 x) -1 (+.f64 x -1))","x","-inf",0.2490234375],["(fma.f64 (+.f64 1 x) -1 (+.f64 x -1))","x","inf",0.369140625],["(fma.f64 (+.f64 1 x) -1 (+.f64 x -1))","x","0",0.41796875]],"time":1.85205078125,"type":"series"},{"count":[[2,111]],"egraph":[[2,2573,29,0.023609665999999998],[1,193,29,0.0033557079999999998],[0,9,29,0.000273458]],"inputs":[["(fma.f64 (+.f64 1 x) -1 (+.f64 x -1))","(/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1) (*.f64 (+.f64 1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1 x) -1) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 1 x) -1) 1) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 1 x) -1 -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 2) 1/3) (cbrt.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 2) 3) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 1 x) 3)) (pow.f64 (+.f64 x -1) 3)) (+.f64 (pow.f64 (*.f64 (+.f64 1 x) -1) 2) (-.f64 (pow.f64 (+.f64 x -1) 2) (*.f64 (*.f64 (+.f64 1 x) -1) (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 1 x) -1) 2) (pow.f64 (+.f64 x -1) 2)) (-.f64 (*.f64 (+.f64 1 x) -1) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 x -1)) (exp.f64 (*.f64 (+.f64 1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x -1))) (exp.f64 (*.f64 (+.f64 1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (+.f64 1 x) -1)) (+.f64 1 (expm1.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) 2) (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) (*.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) (sqrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (*.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (/.f64 1 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (pow.f64 (/.f64 1 (neg.f64 (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) (pow.f64 (/.f64 1 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) 1) (/.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 1) (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -1/2) (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) (sqrt.f64 (fma.f64 x x -1))) (/.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) 1) 1) (pow.f64 (/.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 1) 1) (pow.f64 (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) 1) (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (cbrt.f64 (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) 1) (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) 1) (pow.f64 (/.f64 (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (cbrt.f64 (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 x x -1) -1/2) 1) (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (sqrt.f64 (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2) (sqrt.f64 (fma.f64 x x -1))) 1) (pow.f64 (/.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) (sqrt.f64 (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 2) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 1/3) (cbrt.f64 (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 2) 3) (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x x -1) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) 2) -1) (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) 1) -1) (pow.f64 (/.f64 (cbrt.f64 (fma.f64 x x -1)) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1)) 1) -1) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1)) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -2) -1) (pow.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2)) -1) (pow.f64 (/.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1)) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 2)) -1) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1)) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) -1/2) -1) (pow.f64 (/.f64 (fma.f64 x x -1) (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1) (pow.f64 (/.f64 (cbrt.f64 (fma.f64 x x -1)) (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1)) (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1)) (sqrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x -1) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3) (pow.f64 (fma.f64 x x -1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 x x -1) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3) (pow.f64 (fma.f64 x x -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 x x -1) (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) (fma.f64 x x -1))) 1) 1))))))"]],"rules":[["egg-rr",69],["egg-rr",42]],"stop":[["node limit",1]],"time":48.593017578125,"type":"rewrite"},{"count":[[135,127]],"egraph":[[4,5310,212,0.023581833],[3,1158,215,0.010534916],[2,322,218,0.002635333],[1,101,222,0.000741375],[0,35,238,0.000188583]],"inputs":[["-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))"]],"method":["egg-herbie"],"outputs":[["-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","-2","2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(*.f64 2 (fma.f64 x x 1))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (fma.f64 2 (*.f64 x x) 2) (*.f64 2 (pow.f64 x 4)))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 4) 2))","(*.f64 2 (+.f64 (fma.f64 x x 1) (pow.f64 x 4)))","(fma.f64 2 (fma.f64 x x (pow.f64 x 4)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 6) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 6) (fma.f64 2 (pow.f64 x 4) 2)))","(fma.f64 2 (fma.f64 x x (pow.f64 x 6)) (fma.f64 2 (pow.f64 x 4) 2))","(fma.f64 2 (+.f64 (pow.f64 x 4) (fma.f64 x x (pow.f64 x 6))) 2)","(*.f64 (fma.f64 x x 1) (fma.f64 2 (pow.f64 x 4) 2))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (/.f64 -2 (pow.f64 x 6)))","(-.f64 (/.f64 -2 (*.f64 x x)) (-.f64 (/.f64 2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 4))))","(+.f64 (/.f64 -2 (*.f64 x x)) (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 4))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x)))))","(-.f64 (/.f64 -2 (pow.f64 x 8)) (+.f64 (+.f64 (/.f64 2 (pow.f64 x 6)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 4))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 8))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 4))) (+.f64 (/.f64 -2 (*.f64 x x)) (/.f64 -2 (pow.f64 x 8))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x)))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (/.f64 -2 (pow.f64 x 6)))","(-.f64 (/.f64 -2 (*.f64 x x)) (-.f64 (/.f64 2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 4))))","(+.f64 (/.f64 -2 (*.f64 x x)) (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 4))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x)))))","(-.f64 (/.f64 -2 (pow.f64 x 8)) (+.f64 (+.f64 (/.f64 2 (pow.f64 x 6)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 4))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 8))))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 4))) (+.f64 (/.f64 -2 (*.f64 x x)) (/.f64 -2 (pow.f64 x 8))))"]],"stop":[["node limit",1]],"time":38.324951171875,"type":"simplify"},{"compiler":[[2746,2111]],"time":37.343994140625,"type":"eval"},{"alts":[["(cbrt.f64 (/.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3) (pow.f64 (fma.f64 x x -1) 3)))","fresh",13.645684328432244],["(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -2) -1) (pow.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))","fresh",12.025232154760301],["(/.f64 -2 (fma.f64 x x -1))","next",0.07210715476030194]],"compiler":[[19,15],[31,25],[7,5],[19,15],[31,25],[7,5]],"count":[[130,3]],"kept":[{"done":[0,0],"fresh":[2,0],"new":[127,3],"picked":[1,0]}],"min-error":[0.060388404760301946],"time":24.76318359375,"type":"prune"},{"compiler":[[14,9]],"locations":[["(/.f64 -2 (fma.f64 x x -1))",0.07210715476030194,true]],"time":3.572998046875,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 -2 (fma.f64 x x -1))","x","-inf",0.18798828125],["(/.f64 -2 (fma.f64 x x -1))","x","inf",0.221923828125],["(/.f64 -2 (fma.f64 x x -1))","x","0",0.218994140625]],"time":0.679931640625,"type":"series"},{"count":[[1,20]],"egraph":[[2,1368,8,0.014755417],[1,122,8,0.0020097089999999997],[0,6,8,0.000209292]],"inputs":[["(/.f64 -2 (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -2 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -2 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -2 (fma.f64 x x -1))) (sqrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -1) -1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 4 (pow.f64 (fma.f64 x x -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -2 (fma.f64 x x -1))))))))"]],"rules":[["egg-rr",20]],"stop":[["node limit",1]],"time":31.883056640625,"type":"rewrite"},{"count":[[32,35]],"egraph":[[4,5307,200,0.023342959],[3,1155,203,0.010440876],[2,322,206,0.002594042],[1,101,210,0.000719751],[0,35,226,0.000180084]],"inputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -2 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(*.f64 2 (fma.f64 x x 1))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 2 (*.f64 2 (pow.f64 x 4))))","(+.f64 (fma.f64 2 (*.f64 x x) 2) (*.f64 2 (pow.f64 x 4)))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 4) 2))","(*.f64 2 (+.f64 (fma.f64 x x 1) (pow.f64 x 4)))","(fma.f64 2 (fma.f64 x x (pow.f64 x 4)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 6) (+.f64 2 (*.f64 2 (pow.f64 x 4)))))","(fma.f64 2 (*.f64 x x) (fma.f64 2 (pow.f64 x 6) (fma.f64 2 (pow.f64 x 4) 2)))","(fma.f64 2 (fma.f64 x x (pow.f64 x 6)) (fma.f64 2 (pow.f64 x 4) 2))","(fma.f64 2 (+.f64 (pow.f64 x 4) (fma.f64 x x (pow.f64 x 6))) 2)","(*.f64 (fma.f64 x x 1) (fma.f64 2 (pow.f64 x 4) 2))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(/.f64 (/.f64 -2 x) x)","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))))","(-.f64 (/.f64 -2 (*.f64 x x)) (/.f64 2 (pow.f64 x 4)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 (/.f64 -2 x) x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 6))))","(+.f64 (-.f64 (/.f64 -2 (*.f64 x x)) (/.f64 2 (pow.f64 x 4))) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 (/.f64 -2 x) x)) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (-.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 2 (*.f64 x x))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x)))))","(-.f64 (/.f64 -2 (pow.f64 x 8)) (+.f64 (/.f64 2 (pow.f64 x 4)) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 6)))))","(-.f64 (-.f64 (-.f64 (/.f64 -2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (/.f64 2 (pow.f64 x 4))) (/.f64 2 (*.f64 x x)))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 (/.f64 -2 x) x)) (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 8))))","(+.f64 (-.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 2 (pow.f64 x 4))) (-.f64 (/.f64 -2 (pow.f64 x 8)) (/.f64 2 (*.f64 x x))))","(/.f64 -2 (pow.f64 x 2))","(/.f64 -2 (*.f64 x x))","(/.f64 (/.f64 -2 x) x)","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))))","(-.f64 (/.f64 -2 (*.f64 x x)) (/.f64 2 (pow.f64 x 4)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 (/.f64 -2 x) x))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x))) (/.f64 2 (pow.f64 x 6))))","(+.f64 (-.f64 (/.f64 -2 (*.f64 x x)) (/.f64 2 (pow.f64 x 4))) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 -2 (*.f64 x x))) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 (/.f64 -2 x) x)) (/.f64 -2 (pow.f64 x 6)))","(+.f64 (/.f64 -2 (pow.f64 x 4)) (-.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 2 (*.f64 x x))))","(neg.f64 (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 4))) (*.f64 2 (/.f64 1 (pow.f64 x 2)))))))","(neg.f64 (+.f64 (+.f64 (/.f64 2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (+.f64 (/.f64 2 (pow.f64 x 4)) (/.f64 2 (*.f64 x x)))))","(-.f64 (/.f64 -2 (pow.f64 x 8)) (+.f64 (/.f64 2 (pow.f64 x 4)) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 6)))))","(-.f64 (-.f64 (-.f64 (/.f64 -2 (pow.f64 x 8)) (/.f64 2 (pow.f64 x 6))) (/.f64 2 (pow.f64 x 4))) (/.f64 2 (*.f64 x x)))","(+.f64 (+.f64 (/.f64 -2 (pow.f64 x 4)) (/.f64 (/.f64 -2 x) x)) (+.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 -2 (pow.f64 x 8))))","(+.f64 (-.f64 (/.f64 -2 (pow.f64 x 6)) (/.f64 2 (pow.f64 x 4))) (-.f64 (/.f64 -2 (pow.f64 x 8)) (/.f64 2 (*.f64 x x))))"]],"stop":[["node limit",1]],"time":36.742919921875,"type":"simplify"},{"compiler":[[394,309]],"time":6.218994140625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)","next",0.196813453602512],["(/.f64 (/.f64 -2 x) x)","fresh",32.472938010415405],["(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -2) -1) (pow.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))","fresh",12.025232154760301],["(/.f64 -2 (fma.f64 x x -1))","done",0.07210715476030194]],"compiler":[[10,8],[6,4],[31,25],[7,5],[10,8],[6,4],[31,25]],"count":[[38,4]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[35,2],"picked":[1,1]}],"min-error":[0.015625],"time":6.882080078125,"type":"prune"},{"compiler":[[31,22]],"locations":[["(/.f64 -2 (fma.f64 x x -1))",0.07210715476030194,false],["(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)",0.17548754884221007,true],["(cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))",14.493424215921548,true]],"time":8.350830078125,"type":"localize"},{"count":[[2,8]],"series":[["(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)","x","-inf",0.569091796875],["(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)","x","inf",1.073974609375],["(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)","x","0",1.11279296875],["(cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))","x","-inf",0.370849609375],["(cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))","x","inf",0.578125],["(cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))","x","0",1.373046875]],"time":5.177978515625,"type":"series"},{"count":[[2,60]],"egraph":[[2,1876,18,0.018640875],[1,190,18,0.003028583],[0,9,18,0.000307583]],"inputs":[["(cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))","(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (cbrt.f64 (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (pow.f64 (/.f64 1 (fma.f64 x x -1)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -2) (/.f64 1 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 2) (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6) (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) 1/3) (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 -2 (fma.f64 x x -1))) 1/3) (pow.f64 (sqrt.f64 (/.f64 -2 (fma.f64 x x -1))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -2) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 2) (cbrt.f64 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 -2)) (neg.f64 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -2 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -2 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -2 (fma.f64 x x -1))) (sqrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6) (*.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6) (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 2) 3) (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6) 3) (pow.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) 1) (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 2)) (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6)) (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (neg.f64 (neg.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (fma.f64 x x -1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x x -1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (fma.f64 x x -1) -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 -2) 3) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (sqrt.f64 (fma.f64 x x -1))) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -2) (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) (cbrt.f64 -2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -2 (fma.f64 x x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -2 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -2 (fma.f64 x x -1))))))))"]],"rules":[["egg-rr",33],["egg-rr",27]],"stop":[["node limit",1]],"time":39.68603515625,"type":"rewrite"},{"count":[[68,74]],"egraph":[[3,3313,273,0.016950208],[2,697,360,0.005752125],[1,212,371,0.0016145],[0,79,415,0.000356292]],"inputs":[["(*.f64 (cbrt.f64 -1) (cbrt.f64 -2))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 2)) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 (cbrt.f64 -1) (cbrt.f64 -2)))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 2)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -2/9 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 4)) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 (cbrt.f64 -1) (cbrt.f64 -2))))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 2)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -2/9 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 4)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 (cbrt.f64 -1) (cbrt.f64 -2)) (*.f64 1/3 (/.f64 (*.f64 (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 6))) 5/9) (*.f64 (cbrt.f64 -2) (pow.f64 x 6))) (pow.f64 (cbrt.f64 -1) 2))))))","2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (+.f64 (*.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1))) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4)))))) 8/9) (pow.f64 x 4)) 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (+.f64 (*.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1))) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4)))))) 8/9) (pow.f64 x 4)) (+.f64 2 (*.f64 (+.f64 8/27 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (+.f64 (*.f64 2/3 (/.f64 (*.f64 (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 6))) 5/9) (pow.f64 (cbrt.f64 -2) 2)) (cbrt.f64 -1))) (*.f64 4/27 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4)))) (cbrt.f64 -2))) (+.f64 (*.f64 -2/3 (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 6))) 5/9)) (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (+.f64 (*.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1))) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4))))) (pow.f64 (cbrt.f64 -1) 2)))))) (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 -1) (cbrt.f64 -2))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 2)) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 (cbrt.f64 -1) (cbrt.f64 -2)))","(fma.f64 -1/3 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 x x))) (*.f64 (cbrt.f64 -1) (cbrt.f64 -2)))","(fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (*.f64 -1/3 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 x x)))))","(fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (*.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) x)) x)))","(fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (*.f64 (/.f64 -1/3 (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 x x))) (cbrt.f64 -2)))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 2)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -2/9 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 4)) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 (cbrt.f64 -1) (cbrt.f64 -2))))","(fma.f64 -1/3 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 x x))) (fma.f64 -2/9 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 x 4))) (*.f64 (cbrt.f64 -1) (cbrt.f64 -2))))","(fma.f64 -1/3 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 x x))) (fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (*.f64 -2/9 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 4)) (pow.f64 (cbrt.f64 -1) 2)))))","(fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) x)) x) (*.f64 -2/9 (*.f64 (pow.f64 x 4) (/.f64 (cbrt.f64 -2) (pow.f64 (cbrt.f64 -1) 2))))))","(fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (*.f64 (/.f64 (cbrt.f64 -2) (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 x x)) (*.f64 -2/9 (pow.f64 x 4)))))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 2)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -2/9 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 4)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 (cbrt.f64 -1) (cbrt.f64 -2)) (*.f64 1/3 (/.f64 (*.f64 (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 6))) 5/9) (*.f64 (cbrt.f64 -2) (pow.f64 x 6))) (pow.f64 (cbrt.f64 -1) 2))))))","(fma.f64 -1/3 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 x x))) (fma.f64 -2/9 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 x 4))) (fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (*.f64 1/3 (/.f64 (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 6)) -5/9) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (cbrt.f64 -2) (pow.f64 x 6))))))))","(fma.f64 -1/3 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 x x))) (fma.f64 -2/9 (/.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 4)) (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (/.f64 (*.f64 -14/81 (*.f64 (cbrt.f64 -2) (pow.f64 x 6))) (pow.f64 (cbrt.f64 -1) 2)))))","(fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -2) (/.f64 (pow.f64 (cbrt.f64 -1) 2) x)) x) (fma.f64 -2/9 (*.f64 (pow.f64 x 4) (/.f64 (cbrt.f64 -2) (pow.f64 (cbrt.f64 -1) 2))) (fma.f64 (cbrt.f64 -1) (cbrt.f64 -2) (/.f64 (*.f64 (*.f64 (cbrt.f64 -2) (pow.f64 x 6)) -14/81) (pow.f64 (cbrt.f64 -1) 2)))))","(+.f64 (*.f64 (cbrt.f64 -2) (+.f64 (cbrt.f64 -1) (*.f64 (/.f64 -14/81 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 x 6)))) (*.f64 (/.f64 (cbrt.f64 -2) (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 x x)) (*.f64 -2/9 (pow.f64 x 4)))))","2","(+.f64 (*.f64 2 (pow.f64 x 2)) 2)","(fma.f64 2 (*.f64 x x) 2)","(*.f64 2 (fma.f64 x x 1))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (+.f64 (*.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1))) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4)))))) 8/9) (pow.f64 x 4)) 2))","(fma.f64 2 (*.f64 x x) (fma.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4))))) 8/9) (pow.f64 x 4) 2))","(fma.f64 2 (*.f64 x x) (fma.f64 (pow.f64 x 4) (fma.f64 (*.f64 (cbrt.f64 -1) (cbrt.f64 -2)) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (*.f64 (cbrt.f64 -1) -1)))) 8/9) 2))","(fma.f64 x (*.f64 x 2) (fma.f64 (pow.f64 x 4) (fma.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 -1) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) -1/9))) 8/9) 2))","(fma.f64 x (*.f64 x 2) (fma.f64 (pow.f64 x 4) (fma.f64 (cbrt.f64 -1) (+.f64 (/.f64 8/9 (cbrt.f64 -1)) (/.f64 2/9 (cbrt.f64 -1))) 8/9) 2))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (+.f64 (*.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1))) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4)))))) 8/9) (pow.f64 x 4)) (+.f64 2 (*.f64 (+.f64 8/27 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (+.f64 (*.f64 2/3 (/.f64 (*.f64 (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 6))) 5/9) (pow.f64 (cbrt.f64 -2) 2)) (cbrt.f64 -1))) (*.f64 4/27 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4)))) (cbrt.f64 -2))) (+.f64 (*.f64 -2/3 (-.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 6))) 5/9)) (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (+.f64 (*.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1))) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4))))) (pow.f64 (cbrt.f64 -1) 2)))))) (pow.f64 x 6)))))","(fma.f64 2 (*.f64 x x) (+.f64 (fma.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4))))) 8/9) (pow.f64 x 4) 2) (*.f64 (pow.f64 x 6) (+.f64 8/27 (fma.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (fma.f64 2/3 (/.f64 (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 6)) -5/9) (/.f64 (cbrt.f64 -1) (pow.f64 (cbrt.f64 -2) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4)) 4/27))) (fma.f64 -2/3 (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 6)) -5/9) (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 -2) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (pow.f64 (cbrt.f64 -1) 4))))) (pow.f64 (cbrt.f64 -1) 2)))))))))","(fma.f64 2 (*.f64 x x) (fma.f64 (pow.f64 x 4) (fma.f64 (*.f64 (cbrt.f64 -1) (cbrt.f64 -2)) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (*.f64 (cbrt.f64 -1) -1)))) 8/9) (fma.f64 (pow.f64 x 6) (+.f64 8/27 (fma.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (fma.f64 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (*.f64 (cbrt.f64 -1) -1)) 4/27 (/.f64 (*.f64 -28/81 (pow.f64 (cbrt.f64 -2) 2)) (cbrt.f64 -1)))) (fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 -2) (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 1/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (*.f64 (cbrt.f64 -1) -1))))) 28/81))) 2)))","(fma.f64 x (*.f64 x 2) (fma.f64 (pow.f64 x 4) (fma.f64 (cbrt.f64 -2) (*.f64 (cbrt.f64 -1) (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) -1/9))) 8/9) (fma.f64 (pow.f64 x 6) (+.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (+.f64 (*.f64 (/.f64 -28/81 (cbrt.f64 -1)) (pow.f64 (cbrt.f64 -2) 2)) (*.f64 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) -4/27))) (*.f64 -1/3 (*.f64 (fma.f64 -4/9 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) (*.f64 (/.f64 (pow.f64 (cbrt.f64 -2) 2) (cbrt.f64 -1)) -1/9)) (/.f64 (cbrt.f64 -2) (pow.f64 (cbrt.f64 -1) 2))))) 52/81) 2)))","(fma.f64 (pow.f64 x 4) (fma.f64 (cbrt.f64 -1) (+.f64 (/.f64 8/9 (cbrt.f64 -1)) (/.f64 2/9 (cbrt.f64 -1))) 8/9) (fma.f64 x (*.f64 x 2) (fma.f64 (pow.f64 x 6) (+.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (cbrt.f64 -2) (*.f64 (pow.f64 (cbrt.f64 -2) 2) (+.f64 (/.f64 4/27 (neg.f64 (cbrt.f64 -1))) (/.f64 -28/81 (cbrt.f64 -1))))) (/.f64 (+.f64 (/.f64 -8/27 (cbrt.f64 -1)) (/.f64 2/27 (neg.f64 (cbrt.f64 -1)))) (pow.f64 (cbrt.f64 -1) 2))) 52/81) 2)))"]],"stop":[["node limit",1]],"time":31.72607421875,"type":"simplify"},{"compiler":[[1791,1505]],"time":27.072998046875,"type":"eval"},{"alts":[["(/.f64 (/.f64 -2 x) x)","fresh",32.472938010415405],["(/.f64 (/.f64 -2 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.21081721337095402],["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 2)) (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))","fresh",0.23647607545447158],["(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)","done",0.196813453602512],["(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -2) -1) (pow.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))","fresh",12.025232154760301],["(/.f64 -2 (fma.f64 x x -1))","done",0.07210715476030194]],"compiler":[[6,4],[16,12],[30,24],[10,8],[31,25],[7,5]],"count":[[113,6]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[109,2],"picked":[1,1]}],"min-error":[0.00390625],"time":23.47998046875,"type":"prune"},{"accuracy":[0.07210715476030194],"baseline":[0.07210715476030194],"branch":[["x",0.07210715476030194,1],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))",0.07210715476030194,1]],"compiler":[[2,1],[12,10],[166,128]],"count":[[12,1]],"inputs":[["(/.f64 (/.f64 -2 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (cbrt.f64 (fma.f64 x x -1)))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))) 2)) (cbrt.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1)))))","(pow.f64 (cbrt.f64 (/.f64 -2 (fma.f64 x x -1))) 3)","(/.f64 (/.f64 -2 x) x)","(cbrt.f64 (/.f64 (pow.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1) 3) (pow.f64 (fma.f64 x x -1) 3)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1)) -2) -1) (pow.f64 (/.f64 (fma.f64 x x -1) (cbrt.f64 (+.f64 (fma.f64 (+.f64 1 x) -1 x) -1))) -1))","(/.f64 -2 (fma.f64 x x -1))","(/.f64 -2 (*.f64 x x))","(/.f64 (fma.f64 (+.f64 1 x) -1 (+.f64 x -1)) (fma.f64 x x -1))","(+.f64 (/.f64 1 (+.f64 1 x)) (pow.f64 (pow.f64 (-.f64 1 x) -1/2) 2))","(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 (+.f64 x -1)))","(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))"]],"link":["."],"name":["Asymptote A"],"oracle":[58.90936436950727],"outputs":[["(/.f64 -2 (fma.f64 x x -1))"]],"time":10.583984375,"times":[["x",5.26611328125],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 (-.f64 x 1)))",2.179931640625]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[0,6,8,1.2667e-5]],"inputs":[["(/.f64 -2 (fma.f64 x x -1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -2 (fma.f64 x x -1))"]],"stop":[["fuel",1],["saturated",1]],"time":8.108154296875,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":8.12890625,"type":"end"}]
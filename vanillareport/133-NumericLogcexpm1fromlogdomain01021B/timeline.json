[{"compiler":[[10,6]],"method":["search"],"sampling":[[12,0.7980482098646462,0.11170723719988018,0.09024455293547362],[11,0.7687799381092191,0.14731696783564985,0.08390309405513108],[10,0.7258531395345926,0.21268277475610375,0.06146408570930362],[9,0.6712190322577953,0.2770729726180434,0.05170799512416124],[8,0.5931703075766563,0.38243875093758106,0.024390941485762596],[7,0.49951183795928955,0.48390209302306175,0.016586069017648697],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":26.19287109375,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.0927734375,347],["body",512,"valid",0.06005859375,1],["body",256,"valid",270.038330078125,8255]],"time":289.3779296875,"type":"sample"},{"compiler":[[9,5]],"egraph":[[1,2,2,5.125e-6],[0,2,2,4.5e-6],[8,111,16,0.001422],[7,109,16,0.0011675420000000001],[6,94,16,0.00090875],[5,68,16,0.00064225],[4,56,16,0.00047475],[3,42,16,0.000330083],[2,34,16,0.000226292],[1,21,16,0.000134125],[0,9,16,5.325e-5]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x y) x) y)","(+.f64 (+.f64 (*.f64 y x) y) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0"],["(+.f64 (+.f64 (*.f64 x y) x) y)","(+.f64 y (fma.f64 x y x))","(+.f64 x (fma.f64 x y y))","(fma.f64 (+.f64 y 1) x y)","(fma.f64 x (+.f64 y 1) y)","(+.f64 (+.f64 (*.f64 y x) y) x)","(+.f64 y (fma.f64 x y x))","(+.f64 x (fma.f64 x y y))","(fma.f64 (+.f64 y 1) x y)","(fma.f64 x (+.f64 y 1) y)"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":23.47314453125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[9,110,8,0.001586084],[8,109,8,0.0013245],[7,102,8,0.001066666],[6,80,8,0.000806208],[5,58,8,0.000570833],[4,45,8,0.000402041],[3,35,8,0.000277958],[2,25,8,0.000180291],[1,12,8,9.6333e-5],[0,6,8,3.8541e-5]],"inputs":[["(+.f64 (+.f64 (*.f64 x y) x) y)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 x y) x) y)","(+.f64 y (fma.f64 x y x))","(+.f64 x (fma.f64 x y y))"]],"stop":[["saturated",1]],"time":12.31494140625,"type":"simplify"},{"compiler":[[15,7]],"time":0.304931640625,"type":"eval"},{"alts":[["(+.f64 x (fma.f64 x y y))","next",0.01953125]],"compiler":[[8,4],[8,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01953125],"time":0.781982421875,"type":"prune"},{"compiler":[[14,4]],"locations":[["(+.f64 x (fma.f64 x y y))",0.01953125,true]],"time":3.126220703125,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 x (fma.f64 x y y))","y","-inf",0.345947265625],["(+.f64 x (fma.f64 x y y))","y","inf",0.282958984375],["(+.f64 x (fma.f64 x y y))","y","0",0.26708984375],["(+.f64 x (fma.f64 x y y))","x","-inf",0.41796875],["(+.f64 x (fma.f64 x y y))","x","inf",0.35400390625],["(+.f64 x (fma.f64 x y y))","x","0",0.30615234375]],"time":2.052978515625,"type":"series"},{"count":[[1,33]],"egraph":[[2,1578,8,0.017134417],[1,110,8,0.002052625],[0,5,8,0.000135833]],"inputs":[["(+.f64 x (fma.f64 x y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x (fma.f64 x y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (fma.f64 x y y))) (/.f64 (pow.f64 (fma.f64 x y y) 2) (-.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (fma.f64 x y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (fma.f64 x y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (fma.f64 x y y))) (pow.f64 (cbrt.f64 (+.f64 x (fma.f64 x y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (fma.f64 x y y))) 2) (cbrt.f64 (+.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (fma.f64 x y y))) (sqrt.f64 (+.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x y y) 3)) (/.f64 1 (fma.f64 x x (*.f64 (fma.f64 x y y) (-.f64 (fma.f64 x y y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 x y y) 2)) (/.f64 1 (-.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (fma.f64 x y y) (-.f64 (fma.f64 x y y) x))) (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x y y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (fma.f64 x y y)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 x y y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x y y) 3)) (fma.f64 x x (*.f64 (fma.f64 x y y) (-.f64 (fma.f64 x y y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x y y) 3)) (+.f64 (pow.f64 (fma.f64 x y y) 2) (-.f64 (*.f64 x x) (*.f64 x (fma.f64 x y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 x y y) 2)) (-.f64 x (fma.f64 x y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x y y) 3))) (neg.f64 (fma.f64 x x (*.f64 (fma.f64 x y y) (-.f64 (fma.f64 x y y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 x y y) 2))) (neg.f64 (-.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x y y) 2) (*.f64 x x)) (-.f64 (fma.f64 x y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (fma.f64 x y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (fma.f64 x y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (fma.f64 x y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (fma.f64 x y y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (fma.f64 x y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (fma.f64 x y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (fma.f64 x y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 x y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (fma.f64 x y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x y y)) 2) (cbrt.f64 (fma.f64 x y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (fma.f64 x y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x y y)) (sqrt.f64 (fma.f64 x y y)) x)))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":35.08203125,"type":"rewrite"},{"count":[[57,46]],"egraph":[[7,953,166,0.012879751000000002],[6,948,166,0.010402376000000001],[5,871,166,0.007910501],[4,601,166,0.005179918],[3,301,166,0.002205501],[2,115,166,0.000854501],[1,51,174,0.000328126],[0,21,210,0.000110959]],"inputs":[["y","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","x","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(*.f64 (+.f64 1 x) y)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(*.f64 (+.f64 1 y) x)","(*.f64 (+.f64 y 1) x)","(fma.f64 y x x)","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(*.f64 (+.f64 y 1) x)","(fma.f64 y x x)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","x","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(*.f64 (+.f64 1 x) y)","(*.f64 y (+.f64 1 x))","(fma.f64 y x y)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y))","(*.f64 y (+.f64 1 x))","(fma.f64 y x y)","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(+.f64 y (*.f64 (+.f64 y 1) x))","(fma.f64 (+.f64 y 1) x y)","(+.f64 y (fma.f64 y x x))"]],"stop":[["saturated",1]],"time":26.492919921875,"type":"simplify"},{"compiler":[[552,185]],"time":5.15185546875,"type":"eval"},{"alts":[["(+.f64 y (fma.f64 y x x))","next",0.00390625],["(+.f64 x (fma.f64 x y y))","done",0.01953125]],"compiler":[[8,4],[8,4],[8,4]],"count":[[47,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[46,1],"picked":[1,1]}],"min-error":[0],"time":7.002197265625,"type":"prune"},{"compiler":[[14,4]],"locations":[["(+.f64 y (fma.f64 y x x))",0.00390625,true]],"time":3.06884765625,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 y (fma.f64 y x x))","x","-inf",0.252197265625],["(+.f64 y (fma.f64 y x x))","x","inf",0.2109375],["(+.f64 y (fma.f64 y x x))","x","0",0.23291015625],["(+.f64 y (fma.f64 y x x))","y","-inf",0.234130859375],["(+.f64 y (fma.f64 y x x))","y","inf",0.233154296875],["(+.f64 y (fma.f64 y x x))","y","0",0.4189453125]],"time":1.655029296875,"type":"series"},{"count":[[1,33]],"egraph":[[2,1578,8,0.016800874],[1,110,8,0.0020264989999999997],[0,5,8,0.000133541]],"inputs":[["(+.f64 y (fma.f64 y x x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 y (fma.f64 y x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y y) (-.f64 y (fma.f64 y x x))) (/.f64 (pow.f64 (fma.f64 y x x) 2) (-.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y (fma.f64 y x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 y (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y (fma.f64 y x x))) (pow.f64 (cbrt.f64 (+.f64 y (fma.f64 y x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y (fma.f64 y x x))) 2) (cbrt.f64 (+.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 y (fma.f64 y x x))) (sqrt.f64 (+.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 y x x) 3)) (/.f64 1 (fma.f64 y y (*.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 y y) (pow.f64 (fma.f64 y x x) 2)) (/.f64 1 (-.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y y (*.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) y))) (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 y x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 y (fma.f64 y x x)) (-.f64 (*.f64 y y) (pow.f64 (fma.f64 y x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 y x x) 3)) (fma.f64 y y (*.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 y x x) 3)) (+.f64 (pow.f64 (fma.f64 y x x) 2) (-.f64 (*.f64 y y) (*.f64 y (fma.f64 y x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y y) (pow.f64 (fma.f64 y x x) 2)) (-.f64 y (fma.f64 y x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 y x x) 3))) (neg.f64 (fma.f64 y y (*.f64 (fma.f64 y x x) (-.f64 (fma.f64 y x x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 y y) (pow.f64 (fma.f64 y x x) 2))) (neg.f64 (-.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 y x x) 2) (*.f64 y y)) (-.f64 (fma.f64 y x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y (fma.f64 y x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y (fma.f64 y x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y (fma.f64 y x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 y (fma.f64 y x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 y (fma.f64 y x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y (fma.f64 y x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 y (fma.f64 y x x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y x x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 y) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y x x)) 2) (cbrt.f64 (fma.f64 y x x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (fma.f64 y x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 y x x)) (sqrt.f64 (fma.f64 y x x)) y)))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":35.554931640625,"type":"rewrite"},{"count":[[57,46]],"egraph":[[7,953,166,0.012876624],[6,948,166,0.010422540999999999],[5,871,166,0.007916999],[4,601,166,0.005198624],[3,301,166,0.002204458],[2,115,166,0.000851083],[1,51,174,0.000327499],[0,21,174,0.000109541]],"inputs":[["x","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(*.f64 (+.f64 1 x) y)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","y","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(+.f64 y (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (+.f64 1 x) y) x)","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(*.f64 (+.f64 1 x) y)","(*.f64 (+.f64 x 1) y)","(fma.f64 x y y)","(+.f64 (*.f64 (+.f64 1 x) y) x)","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 (*.f64 (+.f64 1 x) y) x)","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y))","(*.f64 (+.f64 x 1) y)","(fma.f64 x y y)","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 x (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 x) 1) y)))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","y","(+.f64 y (*.f64 (+.f64 1 y) x))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 y (*.f64 (+.f64 1 y) x))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 y (*.f64 (+.f64 1 y) x))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(*.f64 (+.f64 1 y) x)","(*.f64 x (+.f64 1 y))","(fma.f64 x y x)","(+.f64 y (*.f64 (+.f64 1 y) x))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 y (*.f64 (+.f64 1 y) x))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 y (*.f64 (+.f64 1 y) x))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(*.f64 x (+.f64 1 y))","(fma.f64 x y x)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 (+.f64 x 1) y x)","(+.f64 x (fma.f64 x y y))"]],"stop":[["saturated",1]],"time":26.07421875,"type":"simplify"},{"compiler":[[552,185]],"time":5.171875,"type":"eval"},{"alts":[["(+.f64 y (fma.f64 y x x))","done",0.00390625],["(+.f64 x (fma.f64 x y y))","done",0.01953125]],"compiler":[[8,4],[8,4]],"count":[[48,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[46,0],"picked":[1,1]}],"min-error":[0],"time":7.0029296875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(+.f64 (+.f64 (*.f64 x y) x) y)",0.00390625,1]],"compiler":[[3,2],[3,2],[9,5],[21,9]],"count":[[3,1]],"inputs":[["(+.f64 y (fma.f64 y x x))","(+.f64 x (fma.f64 x y y))","(+.f64 (+.f64 (*.f64 x y) x) y)"]],"link":["."],"name":["Numeric.Log:$cexpm1 from log-domain-0.10.2.1, B"],"oracle":[0.0234375],"outputs":[["(+.f64 y (fma.f64 y x x))"]],"time":9.8681640625,"times":[["x",3.166015625],["y",2.9609375],["(+.f64 (+.f64 (*.f64 x y) x) y)",3.12890625]],"type":"regimes"},{"compiler":[[8,4]],"egraph":[[1,6,8,2.1667e-5],[0,5,8,1.2709e-5]],"inputs":[["(+.f64 y (fma.f64 y x x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 y (fma.f64 y x x))"]],"stop":[["done",1],["saturated",1]],"time":7.90087890625,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[8,4],[8,4],[8,4]],"remove-preprocessing":[[]],"time":15.744873046875,"type":"end"}]
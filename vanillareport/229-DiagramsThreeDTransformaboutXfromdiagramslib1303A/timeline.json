[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":106.7041015625,"type":"analyze"},{"outcomes":[["body",1024,"valid",510.05078125,1993],["body",512,"valid",159.0029296875,1076],["body",2048,"valid",4.5751953125,8],["body",256,"valid",367.81298828125,5179]],"time":1049.60791015625,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,2.375e-6],[10,1945,56,0.023883458],[9,1919,56,0.01986375],[8,1674,56,0.015731417],[7,1136,56,0.010857042],[6,743,56,0.006485625],[5,435,56,0.00353775],[4,263,56,0.002058125],[3,167,56,0.001163042],[2,104,56,0.0006545],[1,53,56,0.000336917],[0,22,56,0.000111125]],"inputs":[["0","1","2"],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(-.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(-.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(fma.f64 y (cos.f64 x) (neg.f64 (*.f64 z (sin.f64 x))))","(-.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) z) (*.f64 x (sin.f64 y)))","(-.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))","(fma.f64 x (cos.f64 z) (*.f64 y (neg.f64 (sin.f64 z))))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":48.073974609375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,589,14,0.008197707],[10,583,14,0.006965415],[9,525,14,0.005703332],[8,409,14,0.004386457],[7,306,14,0.003073999],[6,205,14,0.001878624],[5,124,14,0.001113457],[4,76,14,0.000675999],[3,49,14,0.000406083],[2,32,14,0.00023966599999999998],[1,17,14,0.000133166],[0,9,14,5.1083e-5]],"inputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"stop":[["saturated",1]],"time":18.703125,"type":"simplify"},{"compiler":[[12,8]],"time":0.246826171875,"type":"eval"},{"alts":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","next",0.1171875]],"compiler":[[12,8],[12,8]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.1171875],"time":0.718994140625,"type":"prune"},{"compiler":[[27,8]],"locations":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",0.015625,true],["(sin.f64 y)",0.015625,true],["(*.f64 z (sin.f64 y))",0.09375,true],["(*.f64 x (cos.f64 y))",0.109375,true]],"time":7.10205078125,"type":"localize"},{"count":[[4,68]],"series":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","z","-inf",0.18212890625],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","z","inf",0.193115234375],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","z","0",0.305908203125],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","y","-inf",0.198974609375],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","y","inf",0.185791015625],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","y","0",0.22900390625],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","x","-inf",0.171875],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","x","inf",0.194091796875],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","x","0",0.320068359375],["(sin.f64 y)","y","-inf",0.150146484375],["(sin.f64 y)","y","inf",0.135009765625],["(sin.f64 y)","y","0",0.218994140625],["(*.f64 z (sin.f64 y))","y","-inf",0.264892578125],["(*.f64 z (sin.f64 y))","y","inf",0.2890625],["(*.f64 z (sin.f64 y))","y","0",0.33203125],["(*.f64 z (sin.f64 y))","z","-inf",0.568115234375],["(*.f64 z (sin.f64 y))","z","inf",0.30810546875],["(*.f64 z (sin.f64 y))","z","0",0.593994140625],["(*.f64 x (cos.f64 y))","y","-inf",0.259033203125],["(*.f64 x (cos.f64 y))","y","inf",0.30419921875],["(*.f64 x (cos.f64 y))","y","0",0.508056640625],["(*.f64 x (cos.f64 y))","x","-inf",0.307861328125],["(*.f64 x (cos.f64 y))","x","inf",0.406005859375],["(*.f64 x (cos.f64 y))","x","0",0.705078125]],"time":7.592041015625,"type":"series"},{"count":[[4,258]],"egraph":[[2,2660,29,0.0239265],[1,198,29,0.003366959],[0,9,29,0.000218542]],"inputs":[["(*.f64 x (cos.f64 y))","(*.f64 z (sin.f64 y))","(sin.f64 y)","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cos.f64 y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (cos.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x (cos.f64 y)))) 2)) (cbrt.f64 (log.f64 (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x (cos.f64 y))))) (sqrt.f64 (log.f64 (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (cos.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (cos.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (cos.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (cos.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (cos.f64 y))) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (sin.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 z (sin.f64 y)))) 2)) (cbrt.f64 (log.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 z (sin.f64 y))))) (sqrt.f64 (log.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 z (sin.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 z (sin.f64 y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (sin.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (sin.f64 y))) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 y))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 y))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (sin.f64 y))) 2)) (cbrt.f64 (log.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (sin.f64 y)))) (sqrt.f64 (log.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (sin.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 y)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (neg.f64 z)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3)) (/.f64 1 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2)) (/.f64 1 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (-.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2)) (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3)) (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3))) (neg.f64 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2))) (neg.f64 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 3)) (+.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (-.f64 (pow.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 2) (*.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 3) (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 2) (-.f64 (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 2) (*.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 2)) (-.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 2) (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 2)) (-.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2)) (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))) 2)) (cbrt.f64 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))) (sqrt.f64 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x (cos.f64 y)))) (pow.f64 (exp.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 x) (cos.f64 y)) (+.f64 1 (expm1.f64 (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x (cos.f64 y)))) (+.f64 1 (expm1.f64 (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (cos.f64 y)))) (pow.f64 (exp.f64 (neg.f64 z)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))) (exp.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))) (+.f64 1 (expm1.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (neg.f64 z)) (sin.f64 y)) (+.f64 1 (expm1.f64 (*.f64 x (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cos.f64 y) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cos.f64 y) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (cos.f64 y) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) x (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) x (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) x (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cos.f64 y)) 1 (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cos.f64 y)) 1 (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cos.f64 y)) 1 (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cos.f64 y)) 1 (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) (neg.f64 z) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 1 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 1 (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 1 (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 1 (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (cos.f64 y)) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (cos.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 y) (neg.f64 z)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (cos.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (cos.f64 y)) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) 2) (cbrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (sin.f64 y))) (neg.f64 (sqrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (cos.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (cos.f64 y)) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (sqrt.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) x) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) x) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) x) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3)) (/.f64 1 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3)) (/.f64 1 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2))) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3)) (/.f64 1 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3)) (/.f64 1 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2))) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 z (sin.f64 y)) 3)) (/.f64 1 (fma.f64 (*.f64 z (sin.f64 y)) (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y))) (pow.f64 (*.f64 x (cos.f64 y)) 2))) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2)) (/.f64 1 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2)) (/.f64 1 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2)) (/.f64 1 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2)) (/.f64 1 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 z (sin.f64 y)) 2)) (/.f64 1 (fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (sin.f64 y) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))) 2) (cbrt.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))) (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) 2) (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))) (sqrt.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))) (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (sqrt.f64 (*.f64 (sin.f64 y) (neg.f64 z))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (sin.f64 y)))) (sqrt.f64 (*.f64 z (sin.f64 y))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (-.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (-.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (fma.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (-.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (-.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (-.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 z (sin.f64 y)))) (+.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2)) (cbrt.f64 (*.f64 z (sin.f64 y))) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (sin.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 (sin.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (-.f64 (*.f64 z (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) 1) (sin.f64 y) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (cbrt.f64 (sin.f64 y)) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (sqrt.f64 (sin.f64 y))) (sqrt.f64 (sin.f64 y)) (*.f64 x (cos.f64 y)))))))"]],"rules":[["egg-rr",178],["egg-rr",30],["egg-rr",25],["egg-rr",25]],"stop":[["node limit",1]],"time":61.919921875,"type":"rewrite"},{"count":[[326,291]],"egraph":[[6,7538,735,0.04607420799999999],[5,5613,735,0.032042249999999994],[4,2811,735,0.017698791],[3,1651,735,0.008761041],[2,525,740,0.003862208],[1,194,756,0.001332958],[0,69,769,0.000368416]],"inputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/2 (*.f64 x (*.f64 y y)) x)","(fma.f64 -1/2 (*.f64 y (*.f64 y x)) x)","(*.f64 x (fma.f64 (*.f64 y -1/2) y 1))","(*.f64 x (fma.f64 -1/2 (*.f64 y y) 1))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 1/24 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/2 (*.f64 x (*.f64 y y)) x))","(fma.f64 1/24 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/2 (*.f64 y (*.f64 y x)) x))","(fma.f64 x (fma.f64 1/24 (pow.f64 y 4) (*.f64 y (*.f64 y -1/2))) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(fma.f64 -1/720 (*.f64 x (pow.f64 y 6)) (fma.f64 1/24 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/2 (*.f64 x (*.f64 y y)) x)))","(fma.f64 -1/720 (*.f64 x (pow.f64 y 6)) (fma.f64 1/24 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/2 (*.f64 y (*.f64 y x)) x)))","(fma.f64 x (fma.f64 -1/720 (pow.f64 y 6) (*.f64 1/24 (pow.f64 y 4))) (*.f64 x (fma.f64 (*.f64 y -1/2) y 1)))","(*.f64 x (+.f64 (fma.f64 (*.f64 y -1/2) y 1) (fma.f64 -1/720 (pow.f64 y 6) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 x (+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (fma.f64 -1/720 (pow.f64 y 6) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (*.f64 y z))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (fma.f64 y z (*.f64 1/120 (*.f64 z (pow.f64 y 5)))))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (*.f64 z (fma.f64 1/120 (pow.f64 y 5) y)))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (fma.f64 y z (fma.f64 -1/5040 (*.f64 z (pow.f64 y 7)) (*.f64 1/120 (*.f64 z (pow.f64 y 5))))))","(+.f64 (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)) (*.f64 z (+.f64 (*.f64 1/120 (pow.f64 y 5)) (*.f64 -1/5040 (pow.f64 y 7)))))","(*.f64 z (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/5040 (pow.f64 y 7) y))))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/5040 (pow.f64 y 7) (fma.f64 1/120 (pow.f64 y 5) y))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","(fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/5040 (pow.f64 y 7) y)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/5040 (pow.f64 y 7) (fma.f64 1/120 (pow.f64 y 5) y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(fma.f64 -1 (*.f64 y z) x)","(-.f64 x (*.f64 y z))","(fma.f64 y (neg.f64 z) x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 -1 (*.f64 y z) (fma.f64 -1/2 (*.f64 x (*.f64 y y)) x))","(-.f64 (fma.f64 -1/2 (*.f64 y (*.f64 y x)) x) (*.f64 y z))","(-.f64 (*.f64 x (fma.f64 (*.f64 y -1/2) y 1)) (*.f64 y z))","(+.f64 x (*.f64 y (-.f64 (*.f64 x (*.f64 y -1/2)) z)))","(-.f64 x (*.f64 y (+.f64 z (*.f64 x (*.f64 y 1/2)))))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(fma.f64 -1 (*.f64 y z) (fma.f64 -1/2 (*.f64 x (*.f64 y y)) (fma.f64 1/6 (*.f64 z (pow.f64 y 3)) x)))","(-.f64 (fma.f64 -1/2 (*.f64 y (*.f64 y x)) (fma.f64 (*.f64 z (pow.f64 y 3)) 1/6 x)) (*.f64 y z))","(-.f64 (fma.f64 (pow.f64 y 3) (*.f64 z 1/6) (*.f64 x (fma.f64 (*.f64 y -1/2) y 1))) (*.f64 y z))","(-.f64 (*.f64 x (fma.f64 (*.f64 y -1/2) y 1)) (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)))","(-.f64 x (fma.f64 z (fma.f64 -1/6 (pow.f64 y 3) y) (*.f64 y (*.f64 x (*.f64 y 1/2)))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (cos.f64 y) x))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))"]],"stop":[["node limit",1]],"time":72.2470703125,"type":"simplify"},{"compiler":[[5678,1361]],"time":36.326904296875,"type":"eval"},{"alts":[["(/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 3) (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 2) (-.f64 (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 2) (*.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))","fresh",39.434752577287206],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 x (cos.f64 y)))","fresh",0.3562088867581883],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))","fresh",3.464120089020319],["(fma.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","fresh",16.610038769536885],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","fresh",0.15919877930532605],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","next",0.15691376953688405],["(fma.f64 x (cos.f64 y) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))","fresh",0.234375]],"compiler":[[70,23],[21,12],[19,13],[17,10],[19,13],[19,13],[21,10],[70,23],[21,12],[19,13],[17,10],[19,13],[19,13],[21,10]],"count":[[292,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[291,7],"picked":[1,0]}],"min-error":[0.01171875],"time":102.272216796875,"type":"prune"},{"compiler":[[53,23]],"locations":[["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))",0.0859375,true],["(*.f64 (sin.f64 y) (neg.f64 z))",0.09375,true],["(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))",0.125,true],["(pow.f64 (cos.f64 y) 2)",0.240566259768442,true]],"time":13.033935546875,"type":"localize"},{"count":[[4,88]],"series":[["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","z","-inf",0.18408203125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","z","inf",0.208984375],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","z","0",0.955810546875],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","y","-inf",1.18408203125],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","y","inf",1.1630859375],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","y","0",0.285888671875],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","x","-inf",0.2919921875],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","x","inf",0.236083984375],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","x","0",0.8330078125],["(*.f64 (sin.f64 y) (neg.f64 z))","z","-inf",0.154052734375],["(*.f64 (sin.f64 y) (neg.f64 z))","z","inf",0.178955078125],["(*.f64 (sin.f64 y) (neg.f64 z))","z","0",0.305908203125],["(*.f64 (sin.f64 y) (neg.f64 z))","y","-inf",0.27685546875],["(*.f64 (sin.f64 y) (neg.f64 z))","y","inf",0.31494140625],["(*.f64 (sin.f64 y) (neg.f64 z))","y","0",0.281982421875],["(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","y","-inf",1.35302734375],["(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","y","inf",1.674072265625],["(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","y","0",0.495849609375],["(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","x","-inf",0.317138671875],["(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","x","inf",1.095947265625],["(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","x","0",1.7099609375],["(pow.f64 (cos.f64 y) 2)","y","-inf",0.299072265625],["(pow.f64 (cos.f64 y) 2)","y","inf",0.317138671875],["(pow.f64 (cos.f64 y) 2)","y","0",0.328857421875]],"time":14.826904296875,"type":"series"},{"count":[[4,222]],"egraph":[[2,3293,35,0.025655375],[1,280,37,0.0046195],[0,14,51,0.000342417]],"inputs":[["(pow.f64 (cos.f64 y) 2)","(*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","(*.f64 (sin.f64 y) (neg.f64 z))","(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 y) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 y) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (pow.f64 (cbrt.f64 (cos.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 3/2) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 5) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4) 1) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) 4) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 (-.f64 y y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cos.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cos.f64 y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 y) 2) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 2) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 x) (*.f64 2/3 (log.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 2/3 (log.f64 (cos.f64 y)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 y) z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) z) (*.f64 x (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) (fma.f64 z (sin.f64 y) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) (fma.f64 -1 (*.f64 (sin.f64 y) z) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) (fma.f64 (*.f64 (sin.f64 y) z) 1 (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) z)) 2)) (cbrt.f64 (*.f64 (sin.f64 y) z)) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (sin.f64 y) z))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) z)) 2) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 (sin.f64 y) z))) (sqrt.f64 (*.f64 (sin.f64 y) z)) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cos.f64 y)) 1) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (cos.f64 y) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 x (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 x (cos.f64 y)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) 4)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 2) (cbrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) (sqrt.f64 (*.f64 x (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (sqrt.f64 x)) (cbrt.f64 (cbrt.f64 (cos.f64 y)))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))) (pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))) 2) (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))) (sqrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) (pow.f64 (*.f64 (sin.f64 y) z) 3)) (+.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (-.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2) (*.f64 (*.f64 x (cos.f64 y)) (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2) (pow.f64 (*.f64 (sin.f64 y) z) 2)) (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 x (cos.f64 y))) (pow.f64 (exp.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 x (cos.f64 y))) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (sin.f64 y)) (exp.f64 (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z))) (exp.f64 (*.f64 x (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x (cos.f64 y))) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))) 1))))))"]],"rules":[["egg-rr",161],["egg-rr",20],["egg-rr",17],["egg-rr",24]],"stop":[["node limit",1]],"time":69.43310546875,"type":"rewrite"},{"count":[[310,258]],"egraph":[[4,4811,1002,0.024982416],[3,2216,1002,0.012943375],[2,659,1003,0.004944958],[1,236,1028,0.001675625],[0,82,1155,0.000472166]],"inputs":[["1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","x","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/405 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/405 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1/1701 (*.f64 (pow.f64 y 8) x)) x)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 1/6 (*.f64 (pow.f64 y 3) z)))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/120 (*.f64 (pow.f64 y 5) z)) (*.f64 1/6 (*.f64 (pow.f64 y 3) z))))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 7) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/120 (*.f64 (pow.f64 y 5) z)) (*.f64 1/6 (*.f64 (pow.f64 y 3) z)))))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) x))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(fma.f64 -1 (*.f64 y y) 1)","(-.f64 1 (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (fma.f64 -1 (*.f64 y y) 1) (*.f64 1/3 (pow.f64 y 4)))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) 1) (*.f64 y y))","(-.f64 (*.f64 1/3 (pow.f64 y 4)) (fma.f64 y y -1))","(-.f64 1 (fma.f64 y y (*.f64 (pow.f64 y 4) -1/3)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1 (*.f64 y y) 1) (fma.f64 -2/45 (pow.f64 y 6) (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (-.f64 1 (*.f64 y y)) (fma.f64 1/3 (pow.f64 y 4) (*.f64 -2/45 (pow.f64 y 6))))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) (fma.f64 -2/45 (pow.f64 y 6) 1)) (*.f64 y y))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) (*.f64 -2/45 (pow.f64 y 6))) (fma.f64 y y -1))","(-.f64 (fma.f64 -2/45 (pow.f64 y 6) 1) (fma.f64 y y (*.f64 (pow.f64 y 4) -1/3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","x","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/3 (*.f64 (*.f64 y y) x) x)","(fma.f64 -1/3 (*.f64 y (*.f64 y x)) x)","(fma.f64 (*.f64 y y) (*.f64 x -1/3) x)","(+.f64 (*.f64 -1/405 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 -1/405 (*.f64 (pow.f64 y 6) x) (fma.f64 -1/3 (*.f64 (*.f64 y y) x) x))","(fma.f64 -1/405 (*.f64 (pow.f64 y 6) x) (fma.f64 -1/3 (*.f64 y (*.f64 y x)) x))","(fma.f64 x (fma.f64 (pow.f64 y 6) -1/405 (*.f64 (*.f64 y y) -1/3)) x)","(fma.f64 x (fma.f64 (pow.f64 y 6) -1/405 (*.f64 y (*.f64 y -1/3))) x)","(+.f64 (*.f64 -1/405 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1/1701 (*.f64 (pow.f64 y 8) x)) x)))","(fma.f64 -1/405 (*.f64 (pow.f64 y 6) x) (fma.f64 -1/3 (*.f64 (*.f64 y y) x) (fma.f64 -1/1701 (*.f64 x (pow.f64 y 8)) x)))","(fma.f64 -1/405 (*.f64 (pow.f64 y 6) x) (fma.f64 -1/3 (*.f64 y (*.f64 y x)) (fma.f64 -1/1701 (*.f64 x (pow.f64 y 8)) x)))","(fma.f64 x (fma.f64 (pow.f64 y 6) -1/405 (*.f64 (*.f64 y y) -1/3)) (fma.f64 x (*.f64 -1/1701 (pow.f64 y 8)) x))","(*.f64 x (+.f64 (fma.f64 -1/1701 (pow.f64 y 8) 1) (fma.f64 (pow.f64 y 6) -1/405 (*.f64 y (*.f64 y -1/3)))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) x)","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(*.f64 z (neg.f64 y))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 1/6 (*.f64 (pow.f64 y 3) z)))","(fma.f64 -1 (*.f64 y z) (*.f64 1/6 (*.f64 z (pow.f64 y 3))))","(*.f64 z (+.f64 (neg.f64 y) (*.f64 1/6 (pow.f64 y 3))))","(*.f64 z (-.f64 (*.f64 1/6 (pow.f64 y 3)) y))","(*.f64 z (fma.f64 1/6 (pow.f64 y 3) (neg.f64 y)))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/120 (*.f64 (pow.f64 y 5) z)) (*.f64 1/6 (*.f64 (pow.f64 y 3) z))))","(fma.f64 -1 (*.f64 y z) (fma.f64 -1/120 (*.f64 z (pow.f64 y 5)) (*.f64 1/6 (*.f64 z (pow.f64 y 3)))))","(-.f64 (*.f64 z (+.f64 (*.f64 1/6 (pow.f64 y 3)) (*.f64 -1/120 (pow.f64 y 5)))) (*.f64 y z))","(*.f64 z (-.f64 (fma.f64 -1/120 (pow.f64 y 5) (*.f64 1/6 (pow.f64 y 3))) y))","(*.f64 z (-.f64 (fma.f64 1/6 (pow.f64 y 3) (*.f64 -1/120 (pow.f64 y 5))) y))","(+.f64 (*.f64 1/5040 (*.f64 (pow.f64 y 7) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/120 (*.f64 (pow.f64 y 5) z)) (*.f64 1/6 (*.f64 (pow.f64 y 3) z)))))","(fma.f64 1/5040 (*.f64 z (pow.f64 y 7)) (fma.f64 -1 (*.f64 y z) (fma.f64 -1/120 (*.f64 z (pow.f64 y 5)) (*.f64 1/6 (*.f64 z (pow.f64 y 3))))))","(fma.f64 1/5040 (*.f64 z (pow.f64 y 7)) (-.f64 (*.f64 z (+.f64 (*.f64 1/6 (pow.f64 y 3)) (*.f64 -1/120 (pow.f64 y 5)))) (*.f64 y z)))","(*.f64 z (+.f64 (fma.f64 -1/120 (pow.f64 y 5) (*.f64 1/6 (pow.f64 y 3))) (-.f64 (*.f64 1/5040 (pow.f64 y 7)) y)))","(*.f64 z (+.f64 (*.f64 1/5040 (pow.f64 y 7)) (-.f64 (fma.f64 -1/120 (pow.f64 y 5) (*.f64 1/6 (pow.f64 y 3))) y)))","(*.f64 z (+.f64 (*.f64 1/5040 (pow.f64 y 7)) (-.f64 (fma.f64 1/6 (pow.f64 y 3) (*.f64 -1/120 (pow.f64 y 5))) y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(*.f64 1 (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(*.f64 1 (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(fma.f64 -1 (*.f64 y z) x)","(-.f64 x (*.f64 y z))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) x))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (fma.f64 -1 (*.f64 y z) x))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (-.f64 x (*.f64 y z)))","(+.f64 x (*.f64 y (-.f64 (*.f64 y (*.f64 x -1/2)) z)))","(+.f64 x (*.f64 y (fma.f64 y (*.f64 x -1/2) (neg.f64 z))))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (fma.f64 -1 (*.f64 y z) (fma.f64 1/6 (*.f64 z (pow.f64 y 3)) x)))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (-.f64 (fma.f64 1/6 (*.f64 z (pow.f64 y 3)) x) (*.f64 y z)))","(fma.f64 y (*.f64 y (*.f64 x -1/2)) (fma.f64 z (-.f64 (*.f64 1/6 (pow.f64 y 3)) y) x))","(fma.f64 z (-.f64 (*.f64 1/6 (pow.f64 y 3)) y) (fma.f64 y (*.f64 y (*.f64 x -1/2)) x))","(fma.f64 z (fma.f64 1/6 (pow.f64 y 3) (neg.f64 y)) (fma.f64 (*.f64 y y) (*.f64 x -1/2) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(*.f64 1 (*.f64 (cos.f64 y) x))","(*.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 1 (*.f64 (cos.f64 y) x)))","(-.f64 (*.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(fma.f64 (cos.f64 y) x (*.f64 z (neg.f64 (sin.f64 y))))","(fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) (neg.f64 z)))"]],"stop":[["node limit",1]],"time":52.391845703125,"type":"simplify"},{"compiler":[[7477,2255]],"time":50.195068359375,"type":"eval"},{"alts":[["(/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 3) (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 2) (-.f64 (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 2) (*.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))","fresh",39.434752577287206],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 x (cos.f64 y)))","fresh",0.3562088867581883],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))","fresh",3.464120089020319],["(fma.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","fresh",16.610038769536885],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","next",0.15919877930532605],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","done",0.15691376953688405],["(fma.f64 x (cos.f64 y) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))","fresh",0.234375]],"compiler":[[70,23],[21,12],[19,13],[17,10],[19,13],[19,13],[21,10],[70,23],[21,12],[19,13],[17,10],[19,13],[21,10]],"count":[[265,7]],"kept":[{"done":[0,0],"fresh":[6,6],"new":[258,0],"picked":[1,1]}],"min-error":[0.01171875],"time":82.0859375,"type":"prune"},{"compiler":[[51,19]],"locations":[["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))",0.06640625,true],["(*.f64 (cbrt.f64 (cos.f64 y)) x)",0.08203125,true],["(*.f64 (sin.f64 y) (neg.f64 z))",0.09375,false],["(pow.f64 (cos.f64 y) 2)",0.240566259768442,false]],"time":12.152099609375,"type":"localize"},{"count":[[2,60]],"series":[["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","z","-inf",0.178955078125],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","z","inf",0.201171875],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","z","0",0.892822265625],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","x","-inf",0.275146484375],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","x","inf",0.27099609375],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","x","0",0.919921875],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","y","-inf",0.996826171875],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","y","inf",1.024169921875],["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","y","0",0.221923828125],["(*.f64 (cbrt.f64 (cos.f64 y)) x)","x","-inf",0.31298828125],["(*.f64 (cbrt.f64 (cos.f64 y)) x)","x","inf",0.259033203125],["(*.f64 (cbrt.f64 (cos.f64 y)) x)","x","0",1.14794921875],["(*.f64 (cbrt.f64 (cos.f64 y)) x)","y","-inf",1.00390625],["(*.f64 (cbrt.f64 (cos.f64 y)) x)","y","inf",1.05517578125],["(*.f64 (cbrt.f64 (cos.f64 y)) x)","y","0",2.494873046875]],"time":11.48291015625,"type":"series"},{"count":[[2,178]],"egraph":[[2,3291,20,0.025876792],[1,280,22,0.004628667],[0,14,34,0.000347542]],"inputs":[["(*.f64 (cbrt.f64 (cos.f64 y)) x)","(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cbrt.f64 (cos.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (cos.f64 y)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (cos.f64 y))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 y) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (cos.f64 y) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) z) (*.f64 (cos.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) (fma.f64 z (sin.f64 y) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (sin.f64 y)) z (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) (fma.f64 -1 (*.f64 (sin.f64 y) z) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) (fma.f64 (*.f64 (sin.f64 y) z) 1 (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2))) (cbrt.f64 (*.f64 (sin.f64 y) z)) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (sin.f64 y) z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2)) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 (sin.f64 y) z))) (sqrt.f64 (*.f64 (sin.f64 y) z)) (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) x) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 y) x) 1) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (sin.f64 y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (sin.f64 y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (*.f64 (cbrt.f64 (sin.f64 y)) z) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (sin.f64 y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (sin.f64 y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z)) (sqrt.f64 (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 y)) z) (sqrt.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (*.f64 (sin.f64 y) z) -1))) (fma.f64 (*.f64 (sin.f64 y) z) -1 (*.f64 (*.f64 (sin.f64 y) z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (neg.f64 (sin.f64 y))))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 z (*.f64 (sin.f64 y) -1)))) (fma.f64 z (*.f64 (sin.f64 y) -1) (*.f64 z (*.f64 (sin.f64 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 z (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y)))))) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 y))) (*.f64 z (sqrt.f64 (sin.f64 y))) (*.f64 (sqrt.f64 (sin.f64 y)) (*.f64 z (sqrt.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (sin.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 y) x (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x) (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (cos.f64 y) x) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 2) (cbrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) (sqrt.f64 (*.f64 (cos.f64 y) x)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) x) (cbrt.f64 (cos.f64 y)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) 2) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x))) (sqrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (sin.f64 y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (sin.f64 y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 y) x) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))) 2) (cbrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))) (sqrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 y) x) 3) (pow.f64 (*.f64 (sin.f64 y) z) 3)) (+.f64 (pow.f64 (*.f64 (cos.f64 y) x) 2) (-.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2) (*.f64 (*.f64 (cos.f64 y) x) (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 y) x) 2) (pow.f64 (*.f64 (sin.f64 y) z) 2)) (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (cos.f64 y) x)) (pow.f64 (exp.f64 z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (cos.f64 y) x)) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (sin.f64 y)) (exp.f64 (*.f64 (cos.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z))) (exp.f64 (*.f64 (cos.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (cos.f64 y) x)) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (cos.f64 y) x (*.f64 (sin.f64 y) z))) 1))))))"]],"rules":[["egg-rr",161],["egg-rr",17]],"stop":[["node limit",1]],"time":64.55419921875,"type":"rewrite"},{"count":[[238,199]],"egraph":[[5,6432,671,0.032956541],[4,2904,671,0.019121416],[3,1435,671,0.008173040999999999],[2,444,673,0.003294041],[1,163,682,0.001157499],[0,55,711,0.000332458]],"inputs":[["x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -23/6480 (*.f64 (pow.f64 y 6) x)) x)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) x))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 x (*.f64 y y)) x)","(*.f64 x (fma.f64 -1/6 (*.f64 y y) 1))","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 -1/72 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/6 (*.f64 x (*.f64 y y)) x))","(fma.f64 x (fma.f64 -1/72 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y))) x)","(+.f64 (*.f64 -1/72 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -23/6480 (*.f64 (pow.f64 y 6) x)) x)))","(fma.f64 -1/72 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/6 (*.f64 x (*.f64 y y)) (fma.f64 -23/6480 (*.f64 x (pow.f64 y 6)) x)))","(fma.f64 x (*.f64 -1/72 (pow.f64 y 4)) (fma.f64 x (fma.f64 -1/6 (*.f64 y y) (*.f64 -23/6480 (pow.f64 y 6))) x))","(*.f64 x (+.f64 (fma.f64 -23/6480 (pow.f64 y 6) 1) (fma.f64 -1/72 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y)))))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","(*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) x)","(*.f64 x (cbrt.f64 (cos.f64 y)))","x","(+.f64 (*.f64 -1 (*.f64 y z)) x)","(fma.f64 -1 (*.f64 y z) x)","(-.f64 x (*.f64 y z))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) x))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (fma.f64 -1 (*.f64 y z) x))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (-.f64 x (*.f64 y z)))","(+.f64 x (*.f64 y (-.f64 (*.f64 y (*.f64 x -1/2)) z)))","(-.f64 x (*.f64 y (-.f64 z (*.f64 y (*.f64 x -1/2)))))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/3 x) (*.f64 -1/6 x))) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x)))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (fma.f64 -1 (*.f64 y z) (fma.f64 1/6 (*.f64 z (pow.f64 y 3)) x)))","(fma.f64 (*.f64 y y) (*.f64 x -1/2) (-.f64 (fma.f64 1/6 (*.f64 z (pow.f64 y 3)) x) (*.f64 y z)))","(fma.f64 x (*.f64 (*.f64 y y) -1/2) (fma.f64 z (fma.f64 y -1 (*.f64 1/6 (pow.f64 y 3))) x))","(fma.f64 y (*.f64 y (*.f64 x -1/2)) (fma.f64 z (-.f64 (*.f64 1/6 (pow.f64 y 3)) y) x))","(fma.f64 x (*.f64 y (*.f64 y -1/2)) (fma.f64 z (-.f64 (*.f64 1/6 (pow.f64 y 3)) y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(*.f64 x (cos.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(*.f64 x (cos.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x))","(*.f64 x (cos.f64 y))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) x)))","(fma.f64 -1 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) (neg.f64 z)))"]],"stop":[["node limit",1]],"time":56.3837890625,"type":"simplify"},{"compiler":[[7458,2200]],"time":49.129150390625,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) 3) (*.f64 (sin.f64 y) (neg.f64 z)))","fresh",0.4818726562950724],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))","fresh",3.464120089020319],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 x (cos.f64 y)))","fresh",0.3562088867581883],["(fma.f64 (cbrt.f64 (expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","next",0.16701127930532605],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","done",0.15691376953688405],["(fma.f64 x (cos.f64 y) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))","fresh",0.234375]],"compiler":[[22,16],[19,13],[21,12],[21,15],[19,13],[21,10],[22,16],[19,13],[21,12],[21,15],[21,10]],"count":[[267,6]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[260,2],"picked":[1,0]}],"min-error":[0.0078125],"time":87.783935546875,"type":"prune"},{"compiler":[[66,30]],"locations":[["(log1p.f64 (pow.f64 (cos.f64 y) 2))",0.08203125,true],["(*.f64 (sin.f64 y) (neg.f64 z))",0.09375,false],["(expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))",0.1640625,true],["(pow.f64 (cos.f64 y) 2)",0.240566259768442,false]],"time":19.697998046875,"type":"localize"},{"count":[[2,24]],"series":[["(log1p.f64 (pow.f64 (cos.f64 y) 2))","y","-inf",7.920166015625],["(log1p.f64 (pow.f64 (cos.f64 y) 2))","y","inf",20.14892578125],["(log1p.f64 (pow.f64 (cos.f64 y) 2))","y","0",0.410888671875],["(expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))","y","-inf",0.18115234375],["(expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))","y","inf",0.1669921875],["(expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))","y","0",0.2529296875]],"time":29.172119140625,"type":"series"},{"count":[[2,39]],"egraph":[[2,1276,14,0.013864751000000002],[1,121,14,0.001958209],[0,7,14,0.000207792]],"inputs":[["(expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (*.f64 2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (pow.f64 (cos.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (*.f64 (cbrt.f64 (cos.f64 y)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 (-.f64 y y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1) 3) 1) (+.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1) (+.f64 (pow.f64 (cos.f64 y) 2) 1)) (+.f64 1 (*.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1) (+.f64 (pow.f64 (cos.f64 y) 2) 1)) 1) (+.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cos.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (pow.f64 (cos.f64 y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))) (pow.f64 (cbrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))) 2) (cbrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))) (sqrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 (pow.f64 (cos.f64 y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2))))))))"]],"rules":[["egg-rr",15],["egg-rr",24]],"stop":[["node limit",1]],"time":34.908935546875,"type":"rewrite"},{"count":[[63,55]],"egraph":[[5,5568,209,0.023991459],[4,2323,209,0.0121],[3,595,209,0.004695875],[2,202,209,0.0015291660000000002],[1,90,213,0.000581208],[0,38,220,0.000177541]],"inputs":[["1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(log.f64 2)","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (log.f64 2))","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 (log.f64 2) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 (log.f64 2) (+.f64 (*.f64 7/360 (pow.f64 y 6)) (*.f64 1/24 (pow.f64 y 4)))))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(fma.f64 -1 (*.f64 y y) 1)","(-.f64 1 (*.f64 y y))","(neg.f64 (fma.f64 y y -1))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(fma.f64 -1 (*.f64 y y) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) 1) (*.f64 y y))","(-.f64 (*.f64 1/3 (pow.f64 y 4)) (fma.f64 y y -1))","(-.f64 1 (fma.f64 y y (*.f64 (pow.f64 y 4) -1/3)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1 (*.f64 y y) 1) (fma.f64 -2/45 (pow.f64 y 6) (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (-.f64 1 (*.f64 y y)) (fma.f64 1/3 (pow.f64 y 4) (*.f64 -2/45 (pow.f64 y 6))))","(-.f64 (fma.f64 -2/45 (pow.f64 y 6) (fma.f64 1/3 (pow.f64 y 4) 1)) (*.f64 y y))","(fma.f64 1/3 (pow.f64 y 4) (fma.f64 -2/45 (pow.f64 y 6) (-.f64 1 (*.f64 y y))))","(-.f64 (fma.f64 1/3 (pow.f64 y 4) (*.f64 -2/45 (pow.f64 y 6))) (fma.f64 y y -1))","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(pow.f64 (cos.f64 y) 2)","(log.f64 2)","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (log.f64 2))","(fma.f64 -1/2 (*.f64 y y) (log.f64 2))","(fma.f64 (*.f64 y y) -1/2 (log.f64 2))","(fma.f64 y (*.f64 y -1/2) (log.f64 2))","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 (log.f64 2) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (log.f64 2)) (*.f64 (pow.f64 y 4) 1/24))","(fma.f64 (*.f64 y y) -1/2 (fma.f64 (pow.f64 y 4) 1/24 (log.f64 2)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 (pow.f64 y 4) 1/24 (log.f64 2)))","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 (log.f64 2) (+.f64 (*.f64 7/360 (pow.f64 y 6)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (log.f64 2)) (fma.f64 7/360 (pow.f64 y 6) (*.f64 (pow.f64 y 4) 1/24)))","(+.f64 (fma.f64 (*.f64 y y) -1/2 (log.f64 2)) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 (pow.f64 y 6) 7/360)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 (pow.f64 y 4) 1/24 (fma.f64 (pow.f64 y 6) 7/360 (log.f64 2))))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))","(log.f64 (+.f64 1 (pow.f64 (cos.f64 y) 2)))","(log1p.f64 (pow.f64 (cos.f64 y) 2))"]],"stop":[["node limit",1]],"time":38.238037109375,"type":"simplify"},{"compiler":[[2602,1129]],"time":24.180908203125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) 3) (*.f64 (sin.f64 y) (neg.f64 z)))","fresh",0.4818726562950724],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))","fresh",3.464120089020319],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 x (cos.f64 y)))","fresh",0.3562088867581883],["(fma.f64 (cbrt.f64 (expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","done",0.16701127930532605],["(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","done",0.15691376953688405],["(fma.f64 x (cos.f64 y) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))","fresh",0.234375]],"compiler":[[22,16],[19,13],[21,12],[21,15],[19,13],[21,10]],"count":[[122,6]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[116,0],"picked":[1,1]}],"min-error":[0.0078125],"time":27.6220703125,"type":"prune"},{"accuracy":[0.1171875],"baseline":[0.1171875],"branch":[["x",0.1171875,1],["y",0.1171875,1],["z",0.1171875,1],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",0.1171875,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[214,66]],"count":[[10,1]],"inputs":[["(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) x)) 3) (*.f64 (sin.f64 y) (neg.f64 z)))","(fma.f64 (cbrt.f64 (expm1.f64 (log1p.f64 (pow.f64 (cos.f64 y) 2)))) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","(/.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 3) (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) 2) (-.f64 (pow.f64 (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y))) 2) (*.f64 (-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y))) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))))","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 2) (neg.f64 (cbrt.f64 (*.f64 z (sin.f64 y)))) (*.f64 x (cos.f64 y)))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))","(fma.f64 (sqrt.f64 (cos.f64 y)) (*.f64 (sqrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","(fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 y)) x) (*.f64 (sin.f64 y) (neg.f64 z)))","(fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (cos.f64 y) 2))) (cbrt.f64 (cos.f64 y)) (*.f64 (sin.f64 y) (neg.f64 z)))","(fma.f64 x (cos.f64 y) (fma.f64 z (neg.f64 (sin.f64 y)) (fma.f64 z (neg.f64 (sin.f64 y)) (*.f64 z (sin.f64 y)))))","(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"link":["."],"name":["Diagrams.ThreeD.Transform:aboutX from diagrams-lib-1.3.0.3, A"],"oracle":[47.95053123192938],"outputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"time":23.534912109375,"times":[["x",4.743896484375],["y",4.60302734375],["z",4.881103515625],["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",4.781982421875]],"type":"regimes"},{"compiler":[[12,8]],"egraph":[[5,39,14,0.000252584],[4,38,14,0.000204625],[3,34,14,0.00015525],[2,28,14,0.000107709],[1,16,14,6.324999999999999e-5],[0,9,14,2.3834e-5]],"inputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.51904296875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":8.248046875,"type":"end"}]
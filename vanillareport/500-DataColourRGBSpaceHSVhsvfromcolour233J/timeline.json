[{"compiler":[[13,10]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4232075861161775,0.10872872417007784],[11,0.41345625924714113,0.5031684664422755,0.08337527431058334],[10,0.34324670579007943,0.5772785506469518,0.0794747435629688],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":83.30078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",42.190185546875,1066],["body",256,"valid",331.21484375,8256]],"time":381.5771484375,"type":"sample"},{"compiler":[[12,9]],"egraph":[[0,3,3,2e-6],[17,6341,44,0.158733709],[16,6341,44,0.14437666700000001],[15,4287,44,0.130493417],[14,4287,44,0.10873795800000001],[13,4237,44,0.09656475],[12,4170,44,0.083527708],[11,4124,44,0.071128208],[10,4043,44,0.058712166],[9,3855,44,0.048225041],[8,3839,44,0.039144000000000005],[7,3801,44,0.032701875000000005],[6,3695,44,0.026321334000000002],[5,3028,44,0.019815959],[4,1653,44,0.011209959],[3,521,44,0.00384225],[2,144,44,0.0010398340000000001],[1,55,52,0.000306792],[0,20,52,9.5375e-5]],"inputs":[["0","1","2"],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))","(*.f64 y (-.f64 1 (*.f64 (-.f64 1 x) z)))","(*.f64 z (-.f64 1 (*.f64 (-.f64 1 y) x)))","(*.f64 x (-.f64 1 (*.f64 (-.f64 1 z) y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 x (fma.f64 y z (-.f64 1 z)))","(*.f64 y (-.f64 1 (*.f64 (-.f64 1 x) z)))","(*.f64 y (-.f64 1 (*.f64 z (-.f64 1 x))))","(*.f64 y (fma.f64 z (+.f64 x -1) 1))","(*.f64 y (fma.f64 x z (-.f64 1 z)))","(*.f64 z (-.f64 1 (*.f64 (-.f64 1 y) x)))","(*.f64 z (-.f64 1 (*.f64 x (-.f64 1 y))))","(*.f64 z (fma.f64 x (+.f64 y -1) 1))","(fma.f64 z (-.f64 (*.f64 x y) x) z)","(*.f64 z (fma.f64 x y (-.f64 1 x)))","(*.f64 x (-.f64 1 (*.f64 (-.f64 1 z) y)))","(*.f64 x (-.f64 1 (*.f64 y (-.f64 1 z))))","(*.f64 x (fma.f64 y (+.f64 z -1) 1))","(*.f64 x (fma.f64 y z (-.f64 1 y)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":184.47705078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[9,2708,11,0.032928833],[8,2708,11,0.026658625],[7,2598,11,0.021681874999999996],[6,1895,11,0.014929290999999997],[5,1149,11,0.008477124999999999],[4,493,11,0.003736916],[3,161,11,0.00121875],[2,49,11,0.000400291],[1,20,13,0.00013675],[0,9,13,4.9208e-5]],"inputs":[["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(fma.f64 x (fma.f64 y z (neg.f64 z)) x)"]],"stop":[["saturated",1]],"time":43.93798828125,"type":"simplify"},{"compiler":[[20,12]],"time":0.348876953125,"type":"eval"},{"alts":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","next",2.29296875]],"compiler":[[11,6],[11,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[2.29296875],"time":0.841064453125,"type":"prune"},{"compiler":[[21,6]],"locations":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)",2.1442131440984884,true]],"time":4.620849609375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","z","-inf",0.719970703125],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","z","inf",0.3662109375],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","z","0",0.341064453125],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","y","-inf",0.39892578125],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","y","inf",0.654052734375],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","y","0",0.510986328125],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","x","-inf",0.45703125],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","x","inf",0.472900390625],["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","x","0",0.587890625]],"time":4.633056640625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1773,9,0.015986208000000002],[1,142,9,0.0022799170000000002],[0,7,11,0.000157625]],"inputs":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (fma.f64 y z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 y z z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (fma.f64 y z z)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (fma.f64 y z z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 y z z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (fma.f64 y z z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z z) x)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z z) x)) 2) (cbrt.f64 (fma.f64 x (fma.f64 y z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (fma.f64 y z z) x)) (sqrt.f64 (fma.f64 x (fma.f64 y z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 y z z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 x (fma.f64 y z z)) (*.f64 x (fma.f64 y z z))) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (fma.f64 y z z)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (fma.f64 y z z)) (*.f64 x (fma.f64 y z z))) (*.f64 x x)) (-.f64 (*.f64 x (fma.f64 y z z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (fma.f64 y z z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 y z z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 y z z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (fma.f64 y z z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (fma.f64 y z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (fma.f64 y z z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (fma.f64 y z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (fma.f64 y z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (fma.f64 y z z) x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":32.89111328125,"type":"rewrite"},{"count":[[57,35]],"egraph":[[8,3207,372,0.034738834],[7,3207,372,0.028360334],[6,3152,372,0.023577584000000002],[5,2811,372,0.018671334],[4,1598,372,0.011569293000000001],[3,653,372,0.004888543],[2,233,372,0.0016871260000000002],[1,83,372,0.0005671680000000001],[0,29,373,0.000163209]],"inputs":[["(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","x","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 z (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (-.f64 (*.f64 y z) z)) 1) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(fma.f64 z (neg.f64 x) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 y (*.f64 z x))","(*.f64 z (*.f64 y x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 y (*.f64 z x))","(*.f64 z (*.f64 y x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","x","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 z (*.f64 (-.f64 y 1) x))","(*.f64 z (*.f64 x (+.f64 y -1)))","(*.f64 z (-.f64 (*.f64 y x) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x)))","(*.f64 z (*.f64 x (+.f64 y -1)))","(*.f64 z (-.f64 (*.f64 y x) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x))) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x))) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) (*.f64 z x))) x)","(*.f64 (-.f64 (fma.f64 y z 1) z) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 x (fma.f64 z (+.f64 y -1) 1))"]],"stop":[["saturated",1]],"time":52.718994140625,"type":"simplify"},{"compiler":[[387,123]],"time":3.724853515625,"type":"eval"},{"alts":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","done",2.29296875],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","next",1.6581622905828044],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","fresh",2.83984375],["(/.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 y z z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 x (fma.f64 y z z)) (*.f64 x (fma.f64 y z z))) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (fma.f64 y z z)) x))))","fresh",47.533043930407686]],"compiler":[[11,6],[16,9],[12,8],[42,16],[16,9],[12,8],[42,16]],"count":[[36,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[35,3],"picked":[1,1]}],"min-error":[0.015625],"time":6.55322265625,"type":"prune"},{"compiler":[[40,15]],"locations":[["(+.f64 (*.f64 -1 (*.f64 z x)) x)",0.0078125,true],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))",0.015625,true],["(*.f64 y (*.f64 z x))",4.849409481638939,true]],"time":7.143798828125,"type":"localize"},{"count":[[3,42]],"series":[["(+.f64 (*.f64 -1 (*.f64 z x)) x)","x","-inf",0.18310546875],["(+.f64 (*.f64 -1 (*.f64 z x)) x)","x","inf",0.150146484375],["(+.f64 (*.f64 -1 (*.f64 z x)) x)","x","0",0.14501953125],["(+.f64 (*.f64 -1 (*.f64 z x)) x)","z","-inf",0.157958984375],["(+.f64 (*.f64 -1 (*.f64 z x)) x)","z","inf",0.14404296875],["(+.f64 (*.f64 -1 (*.f64 z x)) x)","z","0",0.150146484375],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","x","-inf",0.237060546875],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","x","inf",0.416015625],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","x","0",0.301025390625],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","z","-inf",0.20703125],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","z","inf",0.333984375],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","z","0",0.23486328125],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","y","-inf",0.18603515625],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","y","inf",0.181884765625],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","y","0",0.22900390625],["(*.f64 y (*.f64 z x))","x","-inf",0.958984375],["(*.f64 y (*.f64 z x))","x","inf",0.31201171875],["(*.f64 y (*.f64 z x))","x","0",0.399169921875],["(*.f64 y (*.f64 z x))","z","-inf",0.280029296875],["(*.f64 y (*.f64 z x))","z","inf",0.402099609375],["(*.f64 y (*.f64 z x))","z","0",0.425048828125],["(*.f64 y (*.f64 z x))","y","-inf",0.260986328125],["(*.f64 y (*.f64 z x))","y","inf",0.302978515625],["(*.f64 y (*.f64 z x))","y","0",0.501953125]],"time":7.344970703125,"type":"series"},{"count":[[3,230]],"egraph":[[2,3351,23,0.026018834],[1,222,27,0.004117876],[0,10,30,0.000249584]],"inputs":[["(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) x) y)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) x) y))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (*.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (*.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (*.f64 x y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 z x x) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x)) (/.f64 (pow.f64 (fma.f64 z x x) 2) (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (fma.f64 y z (neg.f64 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)) 2) (cbrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)) (sqrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) (pow.f64 (fma.f64 z x x) 3)) (/.f64 1 (fma.f64 (fma.f64 z x x) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (pow.f64 (*.f64 z (*.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (pow.f64 (fma.f64 z x x) 2)) (/.f64 1 (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 z x x) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (pow.f64 (*.f64 z (*.f64 x y)) 2)) (+.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) (pow.f64 (fma.f64 z x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x) (-.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (pow.f64 (fma.f64 z x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) (pow.f64 (fma.f64 z x x) 3)) (fma.f64 (fma.f64 z x x) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (pow.f64 (*.f64 z (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) (pow.f64 (fma.f64 z x x) 3)) (+.f64 (pow.f64 (fma.f64 z x x) 2) (-.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (*.f64 y (*.f64 (*.f64 z x) (fma.f64 z x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (pow.f64 (fma.f64 z x x) 2)) (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) (pow.f64 (fma.f64 z x x) 3))) (neg.f64 (fma.f64 (fma.f64 z x x) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (pow.f64 (*.f64 z (*.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (pow.f64 (fma.f64 z x x) 2))) (neg.f64 (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 z x x) 2) (pow.f64 (*.f64 z (*.f64 x y)) 2)) (fma.f64 x (fma.f64 y z (neg.f64 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) 2) (*.f64 x x)) (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 z x x) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (pow.f64 (*.f64 z (*.f64 x y)) 2)) (+.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) (pow.f64 (fma.f64 z x x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) x) (-.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (pow.f64 (fma.f64 z x x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (fma.f64 z x x)) (pow.f64 (pow.f64 (exp.f64 z) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (fma.f64 z x x))) (pow.f64 (pow.f64 (exp.f64 z) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (fma.f64 z x x)) (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (fma.f64 z x x))) (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (exp.f64 (*.f64 x (fma.f64 y z (neg.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 x (fma.f64 y z (neg.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (pow.f64 (*.f64 (exp.f64 (*.f64 y z)) (exp.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (*.f64 (exp.f64 (*.f64 y z)) (exp.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y)))) (exp.f64 (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 z) x) y) (+.f64 1 (expm1.f64 (fma.f64 z x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y)))) (+.f64 1 (expm1.f64 (fma.f64 z x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 z x x))) (pow.f64 (pow.f64 (exp.f64 z) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 z x x)) (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 z x x))) (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 y z)) (exp.f64 z)) x) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x (fma.f64 y z (neg.f64 z)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (*.f64 (exp.f64 (*.f64 y z)) (exp.f64 z)) x) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (fma.f64 y z (neg.f64 z)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z x) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 x -1) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 x y) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 x (fma.f64 y z (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y z) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 z) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (fma.f64 z -1 1) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (fma.f64 y z (neg.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 1 (neg.f64 z)) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) y (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) -1 (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) 1 (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) (+.f64 y -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (*.f64 x y)) 1 (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 z x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 z x x) 1 (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 x (fma.f64 y z (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (*.f64 x y)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 z x x) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (fma.f64 y z (neg.f64 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (cbrt.f64 (*.f64 z x)) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (neg.f64 (cbrt.f64 (*.f64 z x))) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (*.f64 (cbrt.f64 (*.f64 z x)) y) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (*.f64 z x)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 z x x)) (cbrt.f64 (pow.f64 (fma.f64 z x x) 2)) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 z x x) 2)) (cbrt.f64 (fma.f64 z x x)) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (*.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2)) (cbrt.f64 (*.f64 z (*.f64 x y))) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 x (fma.f64 y z (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 x (fma.f64 y z (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) z) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (sqrt.f64 (*.f64 z x)) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (neg.f64 (sqrt.f64 (*.f64 z x))) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (*.f64 (sqrt.f64 (*.f64 z x)) -1) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (*.f64 (sqrt.f64 (*.f64 z x)) y) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (*.f64 z x)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 z x x)) (sqrt.f64 (fma.f64 z x x)) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (*.f64 x y))) (sqrt.f64 (*.f64 z (*.f64 x y))) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 x (fma.f64 y z (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) z) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (fma.f64 z x x) (pow.f64 (*.f64 z x) 2))) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 x x)) (/.f64 1 (-.f64 (*.f64 z x) x)) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) x (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) x (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (fma.f64 y z (neg.f64 z))) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (fma.f64 y z (neg.f64 z)))) 2) (cbrt.f64 (*.f64 x (fma.f64 y z (neg.f64 z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (fma.f64 y z (neg.f64 z)))) (sqrt.f64 (*.f64 x (fma.f64 y z (neg.f64 z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 x) z (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 z x))) (sqrt.f64 (*.f64 z x)) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 z -1 1) x (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (sqrt.f64 (*.f64 z x))) (sqrt.f64 (*.f64 z x)) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) 1) x (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (sqrt.f64 x)) (sqrt.f64 x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 x)) (sqrt.f64 x) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 z)) (sqrt.f64 z) (+.f64 x (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) z (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (*.f64 z x))) (sqrt.f64 (*.f64 z x)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z x) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z x) (sqrt.f64 y)) (sqrt.f64 y) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) 1) x (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 z x x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 z x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (-.f64 (*.f64 z x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 z -1 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z x x)) (cbrt.f64 (pow.f64 (fma.f64 z x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z x x) 2)) (cbrt.f64 (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z x x)) (sqrt.f64 (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (fma.f64 z x x) (pow.f64 (*.f64 z x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 x x)) (/.f64 1 (-.f64 (*.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z -1 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (fma.f64 z x x) (pow.f64 (*.f64 z x) 2)) (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 z x) x) (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 x 3)) (fma.f64 x (fma.f64 z x x) (pow.f64 (*.f64 z x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 x 3)) (fma.f64 x x (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 x (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 x x)) (-.f64 (*.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 x 3))) (neg.f64 (fma.f64 x (fma.f64 z x x) (pow.f64 (*.f64 z x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 x x))) (neg.f64 (-.f64 (*.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x (pow.f64 (*.f64 z x) 2)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z x x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z x x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (fma.f64 z x x) (pow.f64 (*.f64 z x) 2)) (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 x 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 z x) x) (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) x) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z x))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 z x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) -1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (cbrt.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (neg.f64 (cbrt.f64 (*.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (pow.f64 (*.f64 z x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (sqrt.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (neg.f64 (sqrt.f64 (*.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (*.f64 (sqrt.f64 (*.f64 z x)) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 x) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 z x))) (sqrt.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (sqrt.f64 (*.f64 z x))) (sqrt.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) 1) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (sqrt.f64 x)) (sqrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 x)) (sqrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 z)) (sqrt.f64 z) x)))))"]],"rules":[["egg-rr",83],["egg-rr",128],["egg-rr",19]],"stop":[["node limit",1]],"time":54.85009765625,"type":"rewrite"},{"count":[[272,247]],"egraph":[[8,2795,370,0.036998666],[7,2795,370,0.030862249],[6,2769,370,0.025572666],[5,2320,370,0.019996666],[4,1424,370,0.012883208],[3,630,370,0.005210291000000001],[2,271,370,0.002199375],[1,113,370,0.000723625],[0,37,383,0.000207625]],"inputs":[["(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","x","(*.f64 -1 (*.f64 z x))","(*.f64 -1 (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 -1 (*.f64 (-.f64 z 1) x))","(*.f64 -1 (*.f64 (-.f64 z 1) x))","(*.f64 -1 (*.f64 (-.f64 z 1) x))","(*.f64 -1 (*.f64 (-.f64 z 1) x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -1 (*.f64 z x)) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 (*.f64 z x) y)","(*.f64 x (*.f64 z y))","(*.f64 z (*.f64 x y))","(*.f64 y (*.f64 z x))","(*.f64 (*.f64 z x) y)","(*.f64 x (*.f64 z y))","(*.f64 z (*.f64 x y))","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(*.f64 z (fma.f64 y x (neg.f64 x)))","(*.f64 z (fma.f64 x y (neg.f64 x)))","(*.f64 z (-.f64 (*.f64 x y) x))","(*.f64 z (*.f64 x (+.f64 -1 y)))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z))","(*.f64 z (fma.f64 y x (neg.f64 x)))","(*.f64 z (fma.f64 x y (neg.f64 x)))","(*.f64 z (-.f64 (*.f64 x y) x))","(*.f64 z (*.f64 x (+.f64 -1 y)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1 z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(fma.f64 z (fma.f64 y x (neg.f64 x)) x)","(*.f64 x (-.f64 (fma.f64 z y 1) z))","(fma.f64 x (*.f64 z (+.f64 -1 y)) x)","x","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(*.f64 z (neg.f64 x))","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(*.f64 z (neg.f64 x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 -1 (*.f64 (-.f64 z 1) x))","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 -1 (*.f64 (-.f64 z 1) x))","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 -1 (*.f64 (-.f64 z 1) x))","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 -1 (*.f64 (-.f64 z 1) x))","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))"]],"stop":[["saturated",1]],"time":57.654052734375,"type":"simplify"},{"compiler":[[3846,1062]],"time":31.056884765625,"type":"eval"},{"alts":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","done",2.29296875],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","done",1.6581622905828044],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","fresh",18.51687849619374],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","next",2.8359375],["(fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) (fma.f64 z x x))","fresh",24.922584422867363]],"compiler":[[11,6],[16,9],[18,10],[14,8],[20,11],[18,10],[14,8],[20,11]],"count":[[251,5]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[247,3],"picked":[1,1]}],"min-error":[0.00390625],"time":75.35107421875,"type":"prune"},{"compiler":[[34,8]],"locations":[["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))",0.0078125,true],["(+.f64 x (*.f64 z (*.f64 x y)))",0.01171875,true],["(*.f64 z (*.f64 x y))",7.2827307705409,true]],"time":6.12109375,"type":"localize"},{"count":[[3,108]],"series":[["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","y","-inf",0.18798828125],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","y","inf",0.1689453125],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","y","0",0.240966796875],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","z","-inf",0.247802734375],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","z","inf",0.2470703125],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","z","0",0.230224609375],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","x","-inf",0.2880859375],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","x","inf",0.2529296875],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","x","0",0.325927734375],["(+.f64 x (*.f64 z (*.f64 x y)))","y","-inf",0.154052734375],["(+.f64 x (*.f64 z (*.f64 x y)))","y","inf",0.1689453125],["(+.f64 x (*.f64 z (*.f64 x y)))","y","0",0.14599609375],["(+.f64 x (*.f64 z (*.f64 x y)))","z","-inf",0.179931640625],["(+.f64 x (*.f64 z (*.f64 x y)))","z","inf",0.156982421875],["(+.f64 x (*.f64 z (*.f64 x y)))","z","0",0.14990234375],["(+.f64 x (*.f64 z (*.f64 x y)))","x","-inf",0.201904296875],["(+.f64 x (*.f64 z (*.f64 x y)))","x","inf",0.155029296875],["(+.f64 x (*.f64 z (*.f64 x y)))","x","0",0.179931640625],["(*.f64 z (*.f64 x y))","y","-inf",0.14794921875],["(*.f64 z (*.f64 x y))","y","inf",0.14990234375],["(*.f64 z (*.f64 x y))","y","0",0.1572265625],["(*.f64 z (*.f64 x y))","x","-inf",0.152099609375],["(*.f64 z (*.f64 x y))","x","inf",0.169189453125],["(*.f64 z (*.f64 x y))","x","0",0.14111328125],["(*.f64 z (*.f64 x y))","z","-inf",0.150146484375],["(*.f64 z (*.f64 x y))","z","inf",0.172119140625],["(*.f64 z (*.f64 x y))","z","0",0.183837890625]],"time":5.3828125,"type":"series"},{"count":[[3,80]],"egraph":[[2,2775,27,0.021741708999999998],[1,194,27,0.003589375],[0,9,33,0.000212625]],"inputs":[["(*.f64 z (*.f64 x y))","(+.f64 x (*.f64 z (*.f64 x y)))","(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (*.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (*.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (*.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 z (*.f64 x y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (fma.f64 z (*.f64 x y) x)) (/.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (*.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 2) (/.f64 1 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (*.f64 x y) x)) (cbrt.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 2)) (cbrt.f64 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (*.f64 x y) x)) (sqrt.f64 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 x y)) 3)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 z (*.f64 x y)) (-.f64 (*.f64 z (*.f64 x y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 z (*.f64 x y)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 z (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 z (*.f64 x y)) (-.f64 (*.f64 z (*.f64 x y)) x))) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 x y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 z (*.f64 x y) x) (pow.f64 (fma.f64 z (*.f64 x y) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 2) (fma.f64 z (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 x y)) 3)) (fma.f64 x x (*.f64 (*.f64 z (*.f64 x y)) (-.f64 (*.f64 z (*.f64 x y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 x y)) 3)) (+.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (-.f64 (*.f64 x x) (*.f64 x (*.f64 z (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 x y)) 3))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 z (*.f64 x y)) (-.f64 (*.f64 z (*.f64 x y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 2)) (neg.f64 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 x y)) 3)) (fma.f64 x x (*.f64 (*.f64 z (*.f64 x y)) (-.f64 (*.f64 z (*.f64 x y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z (*.f64 x y)) 2) (*.f64 x x)) (-.f64 (*.f64 z (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (*.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 x y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (*.f64 x y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 z (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (pow.f64 (exp.f64 z) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 x y))) 2) (cbrt.f64 (*.f64 z (*.f64 x y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (*.f64 x y))) (sqrt.f64 (*.f64 z (*.f64 x y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 z (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) y x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 x y) x) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (fma.f64 z (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z x) 1) (fma.f64 z (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 z x) x) (*.f64 z (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 z x) (*.f64 z (*.f64 x y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x z (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))) (pow.f64 (cbrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))) 2) (cbrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))) (sqrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 (fma.f64 z (*.f64 x y) x) 3)) (+.f64 (*.f64 (*.f64 z x) (*.f64 z x)) (-.f64 (pow.f64 (fma.f64 z (*.f64 x y) x) 2) (*.f64 (*.f64 z x) (fma.f64 z (*.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 z x) (*.f64 z x)) (pow.f64 (fma.f64 z (*.f64 x y) x) 2)) (-.f64 (*.f64 z x) (fma.f64 z (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x z (fma.f64 z (*.f64 x y) x))))))))"]],"rules":[["egg-rr",24],["egg-rr",44],["egg-rr",12]],"stop":[["node limit",1]],"time":45.56201171875,"type":"rewrite"},{"count":[[188,97]],"egraph":[[8,2724,894,0.037079],[7,2724,894,0.030930917000000002],[6,2698,894,0.025427375000000002],[5,2273,894,0.020072208],[4,1452,894,0.0128645],[3,674,894,0.005144708],[2,274,894,0.002073292],[1,111,894,0.000798792],[0,36,925,0.000238084]],"inputs":[["(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","x","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","x","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 y z) 1) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","(*.f64 x (fma.f64 y z 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","(*.f64 x (fma.f64 y z 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","(*.f64 x (fma.f64 y z 1))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 y z)) 1) x))","(*.f64 x (fma.f64 y z 1))","x","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","x","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(+.f64 (*.f64 y (*.f64 z x)) x)","(*.f64 x (fma.f64 y z 1))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) z) 1) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(*.f64 z (fma.f64 y x (neg.f64 x)))","(*.f64 z (-.f64 (*.f64 y x) x))","(*.f64 x (fma.f64 y z (neg.f64 z)))","(*.f64 x (*.f64 z (-.f64 y 1)))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z))","(*.f64 z (fma.f64 y x (neg.f64 x)))","(*.f64 z (-.f64 (*.f64 y x) x))","(*.f64 x (fma.f64 y z (neg.f64 z)))","(*.f64 x (*.f64 z (-.f64 y 1)))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(fma.f64 -1 (*.f64 z x) x)","(-.f64 x (*.f64 z x))","(*.f64 x (-.f64 1 z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 x (fma.f64 -1 z (fma.f64 y z 1)))","(fma.f64 z (-.f64 (*.f64 y x) x) x)","(*.f64 x (-.f64 (fma.f64 y z 1) z))"]],"stop":[["saturated",1]],"time":63.947998046875,"type":"simplify"},{"compiler":[[1483,410]],"time":11.906982421875,"type":"eval"},{"alts":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","done",2.29296875],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","done",1.6581622905828044],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","next",18.51687849619374],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","done",2.8359375],["(fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) (fma.f64 z x x))","fresh",24.922584422867363]],"compiler":[[11,6],[16,9],[18,10],[14,8],[20,11],[18,10],[20,11]],"count":[[102,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[97,0],"picked":[1,1]}],"min-error":[0.00390625],"time":19.572021484375,"type":"prune"},{"compiler":[[43,16]],"locations":[["(cbrt.f64 x)",0.06640625,true],["(pow.f64 (cbrt.f64 x) 2)",0.4655075195368841,true],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))",0.7960115429328488,true],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))",4.3457822692137205,true]],"time":9.800048828125,"type":"localize"},{"count":[[4,51]],"series":[["(cbrt.f64 x)","x","-inf",0.26904296875],["(cbrt.f64 x)","x","inf",0.2470703125],["(cbrt.f64 x)","x","0",0.203857421875],["(pow.f64 (cbrt.f64 x) 2)","x","-inf",0.455078125],["(pow.f64 (cbrt.f64 x) 2)","x","inf",0.321044921875],["(pow.f64 (cbrt.f64 x) 2)","x","0",0.30712890625],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","x","-inf",0.573974609375],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","x","inf",0.458984375],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","x","0",0.481201171875],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","z","-inf",0.35400390625],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","z","inf",0.2900390625],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","z","0",2.051025390625],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","y","-inf",0.303955078125],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","y","inf",0.23095703125],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","y","0",0.778076171875],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","x","-inf",0.637939453125],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","x","inf",0.425048828125],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","x","0",0.516845703125],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","z","-inf",0.340087890625],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","z","inf",0.4658203125],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","z","0",1.3681640625],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","y","-inf",0.316162109375],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","y","inf",0.408935546875],["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","y","0",2.0810546875]],"time":14.239990234375,"type":"series"},{"count":[[4,143]],"egraph":[[2,2596,33,0.025505416],[1,223,35,0.003650583],[0,11,43,0.0002845]],"inputs":[["(*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2))","(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","(pow.f64 (cbrt.f64 x) 2)","(cbrt.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) y) (pow.f64 (cbrt.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) y) (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) y) (pow.f64 (cbrt.f64 x) 2)))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) y) (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 (*.f64 y z))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (pow.f64 (*.f64 y z) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 (*.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x)))) 2)) (cbrt.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x))))) (sqrt.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 (*.f64 y z))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 z) y) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 x x) (pow.f64 (*.f64 y z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) (pow.f64 (*.f64 y z) 3))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 y (*.f64 z (pow.f64 (cbrt.f64 x) 2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 (*.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 2/3 (log.f64 x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 y) 1) (+.f64 (log.f64 z) (*.f64 2/3 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 y z)) 1) (*.f64 2/3 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 y z)) (*.f64 (*.f64 2/3 (log.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 y z)) 1) (*.f64 (*.f64 2/3 (log.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1) (log.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 x)) (*.f64 (log.f64 (*.f64 y z)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1) (*.f64 (log.f64 (*.f64 y z)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (+.f64 (log.f64 z) (*.f64 2/3 (log.f64 x))) (*.f64 (log.f64 y) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z x x) (*.f64 y (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 z x)) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (*.f64 z x)) 1) (fma.f64 z x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (*.f64 z x) (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) 2) (cbrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) (sqrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (*.f64 z x)) 3) (pow.f64 (fma.f64 z x x) 3)) (+.f64 (pow.f64 (*.f64 y (*.f64 z x)) 2) (-.f64 (pow.f64 (fma.f64 z x x) 2) (*.f64 (*.f64 y (*.f64 z x)) (fma.f64 z x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (*.f64 z x)) 2) (pow.f64 (fma.f64 z x x) 2)) (-.f64 (*.f64 y (*.f64 z x)) (fma.f64 z x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))) 2)) (cbrt.f64 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))) (sqrt.f64 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 z x x))) (exp.f64 (*.f64 y (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (*.f64 z x))) (+.f64 1 (expm1.f64 (fma.f64 z x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y (*.f64 z x) (fma.f64 z x x))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 (*.f64 x (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 5) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1/3) (log.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1) (log.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 x)) (*.f64 (log.f64 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1/3) (*.f64 (log.f64 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1) (*.f64 (log.f64 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 x)) (*.f64 (log.f64 (cbrt.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1/3) (*.f64 (log.f64 (cbrt.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1) (*.f64 (log.f64 (cbrt.f64 x)) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 x)))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (*.f64 x (cbrt.f64 x)))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 x))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 x)))) (sqrt.f64 (log.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 x)) 1) 1/2))))))"]],"rules":[["egg-rr",39],["egg-rr",35],["egg-rr",37],["egg-rr",32]],"stop":[["node limit",1]],"time":53.654052734375,"type":"rewrite"},{"count":[[194,159]],"egraph":[[9,7577,501,0.08190670800000001],[8,7359,501,0.068014291],[7,7099,501,0.054976999],[6,5937,501,0.041332541],[5,4390,501,0.029192541000000002],[4,2228,501,0.017177916],[3,710,501,0.0069474160000000005],[2,301,501,0.0021493750000000002],[1,118,501,0.0007864580000000001],[0,37,621,0.000238]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","x","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x)))) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 y z))","(*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y z))","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x)))","(*.f64 1 (*.f64 y (*.f64 x z)))","(*.f64 x (*.f64 y z))","(*.f64 z (*.f64 x y))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x)))","(*.f64 1 (*.f64 y (*.f64 x z)))","(*.f64 x (*.f64 y z))","(*.f64 z (*.f64 x y))","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 z x) (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 z x))) x))","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","x","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z)","(*.f64 z (fma.f64 1 (*.f64 x y) x))","(*.f64 z (fma.f64 y x x))","(*.f64 z (fma.f64 x y x))","(*.f64 x (fma.f64 y z z))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y x)) x) z) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x))))","(*.f64 z (fma.f64 1 (*.f64 x y) x))","(*.f64 z (fma.f64 y x x))","(*.f64 z (fma.f64 x y x))","(*.f64 x (fma.f64 y z z))","(+.f64 (*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x)))) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x)))) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(+.f64 (*.f64 -1 (*.f64 z (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y x))) (*.f64 -1 x)))) x)","(fma.f64 z x (fma.f64 1 (*.f64 y (*.f64 x z)) x))","(fma.f64 z (fma.f64 y x x) x)","(fma.f64 z (fma.f64 x y x) x)","(fma.f64 x (fma.f64 y z z) x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 z) 1) x))","(fma.f64 z x x)","(fma.f64 x z x)"]],"stop":[["node limit",1]],"time":105.614013671875,"type":"simplify"},{"compiler":[[3567,1256]],"time":29.383056640625,"type":"eval"},{"alts":[["(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","done",2.29296875],["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","done",1.6581622905828044],["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","done",18.51687849619374],["(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","done",2.8359375],["(fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) (fma.f64 z x x))","fresh",24.922584422867363]],"compiler":[[11,6],[16,9],[18,10],[14,8],[20,11]],"count":[[203,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[198,0],"picked":[1,1]}],"min-error":[0.00390625],"time":45.6650390625,"type":"prune"},{"accuracy":[0.04296875],"baseline":[1.6581622905828044],"branch":[["x",0.08984375,3],["y",1.6581622905828042,1],["z",1.6581622905828042,1],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))",0.04296875,3],["(-.f64 1 (*.f64 (-.f64 1 y) z))",0.046875,3],["(*.f64 (-.f64 1 y) z)",1.6581622905828044,1],["(-.f64 1 y)",1.6581622905828042,1]],"compiler":[[4,3],[4,3],[4,3],[12,9],[10,8],[8,6],[6,5],[124,54]],"count":[[8,3]],"inputs":[["(fma.f64 (*.f64 (*.f64 y z) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 z x x))","(fma.f64 (neg.f64 x) z (+.f64 x (*.f64 z (*.f64 x y))))","(fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (*.f64 z x) 2))) (cbrt.f64 (*.f64 z x)) (fma.f64 z x x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(/.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 y z z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 x (fma.f64 y z z)) (*.f64 x (fma.f64 y z z))) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (fma.f64 y z z)) x))))","(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSV:hsv from colour-2.3.3, J"],"oracle":[51.12557237090025],"outputs":[["(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 x (fma.f64 y z (neg.f64 z)) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))"]],"time":52.990966796875,"times":[["x",12.883056640625],["y",4.447998046875],["z",4.513916015625],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))",12.621826171875],["(-.f64 1 (*.f64 (-.f64 1 y) z))",8.658203125],["(*.f64 (-.f64 1 y) z)",4.384765625],["(-.f64 1 y)",3.093994140625]],"type":"regimes"},{"bstep":[[2.884920722949031e-19,4.343210418378372e-6,0.031982421875],[-1.977871857975112e+229,-1.6622385389397687e+229,0.10400390625]],"compiler":[[6,5],[12,9]],"method":["left-value","left-value"],"time":0.27685546875,"type":"bsearch"},{"compiler":[[57,28]],"egraph":[[14,370,79,0.005538750000000001],[13,362,79,0.004918500000000001],[12,335,79,0.004279875000000001],[11,298,79,0.0036615000000000003],[10,255,79,0.0030259170000000004],[9,211,79,0.0024687090000000004],[8,185,79,0.001994917],[7,158,79,0.0015431260000000001],[6,133,79,0.001181876],[5,121,79,0.0008937510000000001],[4,106,79,0.0006788340000000001],[3,85,79,0.00048145900000000005],[2,68,79,0.000303876],[1,44,79,0.000178667],[0,25,83,7.7667e-5]],"inputs":[["(if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x)) (if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) 1298074214633707/2596148429267413814265248164610048) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x)) (if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) 1298074214633707/2596148429267413814265248164610048) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))))","(if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (+.f64 (*.f64 y (*.f64 x z)) (+.f64 x (neg.f64 (*.f64 x z)))) (if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) 1298074214633707/2596148429267413814265248164610048) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (+.f64 (*.f64 y (*.f64 x z)) (+.f64 x (neg.f64 (*.f64 x z))))))","(if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (+.f64 (*.f64 y (*.f64 x z)) (-.f64 x (*.f64 x z))) (if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) 1298074214633707/2596148429267413814265248164610048) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (+.f64 (*.f64 y (*.f64 x z)) (-.f64 x (*.f64 x z)))))","(if (<=.f64 (*.f64 x (+.f64 1 (*.f64 z (+.f64 y -1)))) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (+.f64 (*.f64 y (*.f64 x z)) (-.f64 x (*.f64 x z))) (if (<=.f64 (*.f64 x (+.f64 1 (*.f64 z (+.f64 y -1)))) 1298074214633707/2596148429267413814265248164610048) (fma.f64 x (fma.f64 y z (neg.f64 z)) x) (+.f64 (*.f64 y (*.f64 x z)) (-.f64 x (*.f64 x z)))))"]],"stop":[["fuel",1],["saturated",1]],"time":18.033935546875,"type":"simplify"},{"time":0.028076171875,"type":"soundness"},{"compiler":[[57,28]],"remove-preprocessing":[[]],"time":17.068115234375,"type":"end"}]
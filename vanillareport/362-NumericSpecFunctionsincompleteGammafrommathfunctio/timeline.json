[{"compiler":[[17,14]],"method":["search"],"sampling":[[12,0.4302435948047787,0.061463370686396956,0.5082930345088243],[11,0.41560945892706513,0.09170725150033832,0.49268328957259655],[10,0.3941460596397519,0.12097552325576544,0.48487841710448265],[9,0.36682900600135326,0.17951206676661968,0.45365892723202705],[8,0.32780464366078377,0.23414617404341698,0.43804918229579926],[7,0.2809754088521004,0.34341438859701157,0.37561020255088806],[6,0.18731693923473358,0.43707285821437836,0.37561020255088806],[5,0.0,0.7492677569389343,0.2507322430610657],[4,0.0,0.7492677569389343,0.2507322430610657],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.025146484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",22.230224609375,422],["body",256,"valid",385.798828125,8256]],"time":415.791015625,"type":"sample"},{"compiler":[[16,13]],"egraph":[[0,2,2,1.75e-6],[7,4656,32,0.031756876],[6,2287,32,0.016512085000000003],[5,1139,32,0.007415793],[4,777,32,0.003737501],[3,369,32,0.0019481260000000001],[2,126,36,0.0007766260000000001],[1,46,36,0.000264918],[0,20,42,9.5209e-5]],"inputs":[["0","1"],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","(*.f64 (*.f64 3 (sqrt.f64 y)) (-.f64 (+.f64 x (/.f64 1 (*.f64 y 9))) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) -1)))","(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (+.f64 (/.f64 1/9 x) -1))))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 -3 (/.f64 1/3 x))))","(*.f64 (sqrt.f64 x) (+.f64 (fma.f64 3 y -3) (/.f64 1/3 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 (+.f64 y (/.f64 1/9 x)) -3))","(*.f64 (*.f64 3 (sqrt.f64 y)) (-.f64 (+.f64 x (/.f64 1 (*.f64 y 9))) 1))","(*.f64 (*.f64 3 (sqrt.f64 y)) (+.f64 (+.f64 x (/.f64 1 (*.f64 y 9))) -1))","(*.f64 (*.f64 3 (sqrt.f64 y)) (+.f64 (/.f64 1/9 y) (-.f64 x 1)))","(*.f64 3 (*.f64 (sqrt.f64 y) (+.f64 (/.f64 1/9 y) (+.f64 x -1))))","(*.f64 (sqrt.f64 y) (fma.f64 3 x (+.f64 -3 (/.f64 1/3 y))))","(*.f64 (sqrt.f64 y) (+.f64 (fma.f64 3 x -3) (/.f64 1/3 y)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":56.036865234375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[18,7152,16,0.166056791],[17,7152,16,0.148341833],[16,7152,16,0.130662999],[15,7152,16,0.11644595699999999],[14,7067,16,0.102842041],[13,6117,16,0.086505124],[12,6117,16,0.069495707],[11,6089,16,0.060056707],[10,5558,16,0.050629832],[9,4995,16,0.040025332000000004],[8,4311,16,0.028916082000000003],[7,2558,16,0.018007291],[6,1178,16,0.009197666],[5,585,16,0.0039016240000000002],[4,399,16,0.002005624],[3,192,16,0.001076666],[2,69,18,0.000447666],[1,28,18,0.000169708],[0,13,21,6.7166e-5]],"inputs":[["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","(*.f64 (*.f64 3 (sqrt.f64 x)) (+.f64 y (-.f64 (/.f64 1 (*.f64 x 9)) 1)))","(*.f64 (*.f64 3 (sqrt.f64 x)) (+.f64 y (+.f64 (/.f64 1/9 x) -1)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 -3 (/.f64 1/3 x))))","(*.f64 (sqrt.f64 x) (-.f64 (/.f64 1/3 x) (fma.f64 y -3 3)))","(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))"]],"stop":[["saturated",1]],"time":178.422119140625,"type":"simplify"},{"compiler":[[27,20]],"time":0.489013671875,"type":"eval"},{"alts":[["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","fresh",0.4388275390737681],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","next",0.38509750976844204]],"compiler":[[16,13],[13,10],[16,13],[13,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.25390625],"time":1.492919921875,"type":"prune"},{"compiler":[[36,24]],"locations":[["(fma.f64 y -3 (/.f64 -1/3 x))",0.03125,true],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))",0.34212875976844204,true],["(/.f64 -1/3 x)",0.3515625,true]],"time":9.096923828125,"type":"localize"},{"count":[[3,36]],"series":[["(fma.f64 y -3 (/.f64 -1/3 x))","x","-inf",0.14404296875],["(fma.f64 y -3 (/.f64 -1/3 x))","x","inf",0.179931640625],["(fma.f64 y -3 (/.f64 -1/3 x))","x","0",0.177978515625],["(fma.f64 y -3 (/.f64 -1/3 x))","y","-inf",0.176025390625],["(fma.f64 y -3 (/.f64 -1/3 x))","y","inf",0.14892578125],["(fma.f64 y -3 (/.f64 -1/3 x))","y","0",0.156005859375],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","y","-inf",0.494140625],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","y","inf",0.507080078125],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","y","0",0.98095703125],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","x","-inf",0.89599609375],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","x","inf",1.051025390625],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","x","0",0.8310546875],["(/.f64 -1/3 x)","x","-inf",0.27294921875],["(/.f64 -1/3 x)","x","inf",0.31005859375],["(/.f64 -1/3 x)","x","0",0.385986328125]],"time":6.906005859375,"type":"series"},{"count":[[3,114]],"egraph":[[2,2730,28,0.025349082999999998],[1,220,28,0.003928042],[0,10,28,0.000334084]],"inputs":[["(/.f64 -1/3 x)","(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","(fma.f64 y -3 (/.f64 -1/3 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 -1/3 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 -1/3 x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 -1/3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/3 x)) (pow.f64 (cbrt.f64 (/.f64 -1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -1/3 x)) 2) (cbrt.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -1/3 x)) (sqrt.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/9 (pow.f64 x -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -1/3 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x -3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x -3) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 -1/3 x))) 2)) (cbrt.f64 (log.f64 (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 -1/3 x)))) (sqrt.f64 (log.f64 (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/9 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 -1/3 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 -1/3 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 -1/3 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 -1/3 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x -3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 -1/3 x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) -3) (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) (sqrt.f64 x)) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 x) (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 x) (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1/2) (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 x)) 1) (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sqrt.f64 x)) (*.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1/2) (*.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 x)) 1) (*.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1) (log.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (log.f64 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1) (*.f64 (log.f64 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (log.f64 (sqrt.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1) (*.f64 (log.f64 (sqrt.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3 (sqrt.f64 x) (*.f64 (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/3 x) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3 y) (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -3 y) 1) (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -3 y) 3) (pow.f64 (/.f64 -1/3 x) 3)) (+.f64 (pow.f64 (*.f64 -3 y) 2) (-.f64 (*.f64 1/9 (pow.f64 x -2)) (*.f64 (*.f64 -3 y) (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 -3 y) 2) (*.f64 1/9 (pow.f64 x -2))) (-.f64 (*.f64 -3 y) (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2)) (cbrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))) (sqrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 -1/3 x))) (pow.f64 (exp.f64 -3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -3) y) (+.f64 1 (expm1.f64 (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3) 1/3))))))"]],"rules":[["egg-rr",37],["egg-rr",42],["egg-rr",35]],"stop":[["node limit",1]],"time":50.821044921875,"type":"rewrite"},{"count":[[150,125]],"egraph":[[11,3992,342,0.053373290000000004],[10,3992,342,0.045542915],[9,3982,342,0.039357415],[8,3944,342,0.033129207],[7,3160,342,0.026619207],[6,2378,342,0.018801332],[5,1446,342,0.010768999000000001],[4,668,342,0.005241541000000001],[3,261,342,0.002144207],[2,100,342,0.000848916],[1,46,380,0.000365707],[0,21,443,0.000131166]],"inputs":[["(*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x)))","(neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x)))","(*.f64 (+.f64 3 (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))"]],"stop":[["saturated",1]],"time":74.255126953125,"type":"simplify"},{"compiler":[[2012,1448]],"time":25.830810546875,"type":"eval"},{"alts":[["(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","fresh",0.410820019536884],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","fresh",0.4388275390737681],["(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)","fresh",27.674900146526635],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","next",0.3795700195368841],["(/.f64 (*.f64 (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) (sqrt.f64 x)) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))","fresh",35.43492128907377],["(sqrt.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","fresh",46.875833455414764],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)","fresh",0.7822192384221015],["(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","fresh",49.85517504884221],["(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3)))","fresh",0.7189791016639131],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","fresh",0.399101269536884],["(/.f64 (*.f64 (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))","fresh",26.26695253907377]],"compiler":[[21,16],[16,13],[16,13],[15,12],[32,25],[15,12],[16,13],[16,13],[16,13],[16,11],[24,19],[21,16],[16,13],[16,13],[15,12],[32,25],[15,12],[16,13],[16,13],[16,13],[16,11],[24,19]],"count":[[127,11]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[125,10],"picked":[1,0]}],"min-error":[0.05859375],"time":25.818115234375,"type":"prune"},{"compiler":[[47,34]],"locations":[["(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))",0.03125,true],["(pow.f64 (*.f64 x -3) -1)",0.296875,true],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))",0.34212875976844204,true]],"time":12.5068359375,"type":"localize"},{"count":[[3,48]],"series":[["(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))","x","-inf",0.144775390625],["(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))","x","inf",0.172119140625],["(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))","x","0",0.14501953125],["(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))","y","-inf",0.142822265625],["(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))","y","inf",0.1708984375],["(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))","y","0",0.14501953125],["(pow.f64 (*.f64 x -3) -1)","x","-inf",0.4189453125],["(pow.f64 (*.f64 x -3) -1)","x","inf",0.385009765625],["(pow.f64 (*.f64 x -3) -1)","x","0",0.932861328125],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","y","-inf",0.2978515625],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","y","inf",0.27099609375],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","y","0",0.489990234375],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","x","-inf",0.696044921875],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","x","inf",0.31884765625],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","x","0",0.57080078125]],"time":5.488037109375,"type":"series"},{"count":[[3,103]],"egraph":[[2,2901,28,0.026482000000000002],[1,238,28,0.0042072080000000005],[0,11,37,0.0003395]],"inputs":[["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","(pow.f64 (*.f64 x -3) -1)","(fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) -3) (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) (sqrt.f64 x)) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 x) (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 x) (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3 (sqrt.f64 x) (*.f64 (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 -1/3 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 -1/3 x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 -1/3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/3 x)) (cbrt.f64 (*.f64 (pow.f64 x -2) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) 1/9)) (cbrt.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -1/3 x)) (sqrt.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x -3)) -2) (cbrt.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x -3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 -1/3 x)) (sqrt.f64 (*.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 x -3)) -2) (cbrt.f64 (*.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x -2) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x -3) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 -1/3 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 -1/3 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 x -3) 2)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 -1/3 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 -1/3 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x -3)) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 -1/3 x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x -3)) -1/2) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/3 x) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3 y) (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -3 y) 1) (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -3 y) 3) (pow.f64 (*.f64 x -3) -3)) (+.f64 (pow.f64 (*.f64 -3 y) 2) (-.f64 (*.f64 (pow.f64 x -2) 1/9) (*.f64 (*.f64 -3 y) (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 -3 y) 2) (*.f64 (pow.f64 x -2) 1/9)) (-.f64 (*.f64 -3 y) (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2)) (cbrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))) (sqrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 -1/3 x))) (pow.f64 (exp.f64 y) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) -3) (+.f64 1 (expm1.f64 (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3) 1/3))))))"]],"rules":[["egg-rr",37],["egg-rr",34],["egg-rr",32]],"stop":[["node limit",1]],"time":51.30517578125,"type":"rewrite"},{"count":[[151,113]],"egraph":[[11,3992,390,0.053301707000000004],[10,3992,390,0.045443124],[9,3982,390,0.039267249000000004],[8,3944,390,0.032991249],[7,3160,390,0.026357374000000003],[6,2378,390,0.018511124],[5,1446,390,0.010497916],[4,668,390,0.005029749],[3,261,390,0.001984124],[2,100,390,0.000859957],[1,46,428,0.000374999],[0,21,491,0.000136166]],"inputs":[["(*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x)))","(neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x)))","(*.f64 (+.f64 3 (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (neg.f64 (*.f64 (-.f64 3 (/.f64 1/3 x)) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (+.f64 3 (/.f64 -1/3 x))) (*.f64 3 y)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y (+.f64 (/.f64 1/3 x) -3)))","(*.f64 (sqrt.f64 x) (+.f64 (/.f64 1/3 x) (fma.f64 3 y -3)))","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))"]],"stop":[["saturated",1]],"time":74.864013671875,"type":"simplify"},{"compiler":[[1827,1312]],"time":23.947998046875,"type":"eval"},{"alts":[["(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","fresh",0.410820019536884],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","fresh",0.4388275390737681],["(sqrt.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","fresh",46.875833455414764],["(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","fresh",49.85517504884221],["(/.f64 (*.f64 (sqrt.f64 x) (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))","fresh",26.26695253907377],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","next",0.399101269536884],["(/.f64 (*.f64 (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) (sqrt.f64 x)) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))","fresh",35.43492128907377],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","done",0.3795700195368841],["(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)","fresh",27.674900146526635],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)","fresh",0.7822192384221015],["(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3)))","fresh",0.7189791016639131]],"compiler":[[21,16],[16,13],[15,12],[16,13],[24,19],[16,11],[32,25],[15,12],[16,13],[16,13],[16,13],[21,16],[16,13],[15,12],[16,13],[24,19],[16,11],[32,25],[16,13],[16,13],[16,13]],"count":[[124,11]],"kept":[{"done":[0,0],"fresh":[10,4],"new":[113,6],"picked":[1,1]}],"min-error":[0.05859375],"time":24.558837890625,"type":"prune"},{"compiler":[[48,30]],"locations":[["(fma.f64 -3 y (/.f64 -1/3 x))",0.03125,true],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))",0.1015625,true],["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))",0.34603500976844204,true],["(/.f64 -1/3 x)",0.3515625,false]],"time":11.703125,"type":"localize"},{"count":[[3,48]],"series":[["(fma.f64 -3 y (/.f64 -1/3 x))","x","-inf",0.14404296875],["(fma.f64 -3 y (/.f64 -1/3 x))","x","inf",0.172119140625],["(fma.f64 -3 y (/.f64 -1/3 x))","x","0",0.18896484375],["(fma.f64 -3 y (/.f64 -1/3 x))","y","-inf",0.1591796875],["(fma.f64 -3 y (/.f64 -1/3 x))","y","inf",0.14306640625],["(fma.f64 -3 y (/.f64 -1/3 x))","y","0",0.147216796875],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","y","-inf",0.197998046875],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","y","inf",0.198974609375],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","y","0",0.27587890625],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","x","-inf",0.678955078125],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","x","inf",0.509033203125],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","x","0",0.402099609375],["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))","y","-inf",0.37890625],["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))","y","inf",0.41015625],["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))","y","0",0.60400390625],["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))","x","-inf",0.85693359375],["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))","x","inf",0.491943359375],["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))","x","0",0.52099609375]],"time":6.7109375,"type":"series"},{"count":[[3,207]],"egraph":[[2,2842,37,0.023776540999999998],[1,234,37,0.004104416],[0,11,44,0.000353583]],"inputs":[["(*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x))))","(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","(fma.f64 -3 y (/.f64 -1/3 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -3 y) (sqrt.f64 x)) (*.f64 (/.f64 -1/3 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (*.f64 -3 y)) (*.f64 (sqrt.f64 x) (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 -3 y (/.f64 -1/3 x)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 -3 y (/.f64 -1/3 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))) (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 -3 y) (*.f64 (sqrt.f64 x) (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3 y) (sqrt.f64 x) (*.f64 (/.f64 -1/3 x) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (sqrt.f64 x) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (fma.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (fma.f64 -1 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) 1 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)))) (cbrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) (cbrt.f64 (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) (sqrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) -3) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 x) -3) 1) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x)))) (cbrt.f64 x) (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x)))) (cbrt.f64 x) (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x)))) (cbrt.f64 x) (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x)))) (cbrt.f64 x) (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x)))) (cbrt.f64 x) (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x)))) (cbrt.f64 x) (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x)))) (cbrt.f64 x) (*.f64 (*.f64 (pow.f64 x 1/6) (fma.f64 -3 y (/.f64 -1/3 x))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (fma.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2)) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (fma.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2)) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (fma.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2)) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (fma.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2)) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (fma.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2)) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (fma.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2)) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (fma.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2)) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (pow.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) x) 1/2) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1))) (fma.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1 (*.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x))))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x))))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x))))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x))))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x))))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x))))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x))))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (neg.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (*.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2) (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2) (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2) (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2) (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2) (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2) (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2) (*.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (*.f64 x (fma.f64 -3 y (/.f64 -1/3 x))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1)))) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (*.f64 (sqrt.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x))))) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)) (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x))))) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)) (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x))))) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)) (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x))))) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)) (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x))))) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)) (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x))))) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)) (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x))))) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)) (*.f64 (pow.f64 x 1/6) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) -3 (neg.f64 (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4))))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)) (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4))))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)) (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (sqrt.f64 x) -3) (neg.f64 (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4))))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)) (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 1/6) -3) (neg.f64 (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4))))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)) (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4))))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)) (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4))))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)) (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (sqrt.f64 (*.f64 (sqrt.f64 x) -3)) (neg.f64 (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4))))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)) (*.f64 (pow.f64 x 1/4) (*.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (pow.f64 x 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sqrt.f64 x) -3) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2) (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) (sqrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 x) -3) 3) (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) 3)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 x) -3) 2) (-.f64 (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (*.f64 (*.f64 (sqrt.f64 x) -3) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 x) -3) 2) (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))) (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) -3) (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))))) (pow.f64 (exp.f64 (sqrt.f64 x)) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) -3) (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/3 x) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3 y) (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 -3 y)) (neg.f64 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -3 y) 1) (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -3 y) -1) (*.f64 (/.f64 -1/3 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 -3 y)) (*.f64 -1 (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 -3 y)) (/.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 y (/.f64 -1/3 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (neg.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)) (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) (+.f64 0 (+.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2) (*.f64 0 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -3 y) 3) (pow.f64 (/.f64 -1/3 x) 3)) (+.f64 (pow.f64 (*.f64 -3 y) 2) (-.f64 (pow.f64 (/.f64 -1/3 x) 2) (*.f64 (*.f64 -3 y) (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 -3 y) 2) (pow.f64 (/.f64 -1/3 x) 2)) (fma.f64 -3 y (neg.f64 (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2)) (cbrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))) (sqrt.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 -1/3 x))) (pow.f64 (exp.f64 y) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) -3) (+.f64 1 (expm1.f64 (/.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 1) 1))))))"]],"rules":[["egg-rr",53],["egg-rr",123],["egg-rr",31]],"stop":[["node limit",1]],"time":64.06201171875,"type":"rewrite"},{"count":[[255,220]],"egraph":[[14,2897,561,0.042334750000000004],[13,2884,561,0.037034292],[12,2788,561,0.031663250000000004],[11,2635,561,0.026148792],[10,2233,561,0.020788],[9,1567,561,0.014818834],[8,1050,561,0.009339375],[7,558,561,0.00566425],[6,297,561,0.003284333],[5,198,561,0.002094458],[4,159,561,0.001467917],[3,130,561,0.0010475],[2,83,579,0.0006841670000000001],[1,48,606,0.000384083],[0,23,642,0.000154208]],"inputs":[["(*.f64 1/3 (sqrt.f64 (/.f64 1 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(*.f64 -3 y)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (sqrt.f64 (/.f64 1 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 y (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) -3 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 3 y) -3)))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(/.f64 -1/3 x)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(*.f64 -3 y)","(*.f64 y -3)","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))","(-.f64 (*.f64 -3 y) (*.f64 1/3 (/.f64 1 x)))","(-.f64 (*.f64 y -3) (/.f64 1/3 x))","(fma.f64 y -3 (/.f64 -1/3 x))"]],"stop":[["saturated",1]],"time":71.30908203125,"type":"simplify"},{"compiler":[[7656,5166]],"time":86.745849609375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","fresh",49.85517504884221],["(fma.f64 (sqrt.f64 x) -3 (fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x)))))","fresh",0.359375],["(/.f64 (*.f64 (sqrt.f64 x) (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))","fresh",26.26695253907377],["(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","done",0.399101269536884],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","next",0.34375],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","fresh",0.4388275390737681],["(+.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))","fresh",0.5512276856003986],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","done",0.3795700195368841],["(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 x) -3) 3) (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) 3)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 x) -3) 2) (-.f64 (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (*.f64 (*.f64 (sqrt.f64 x) -3) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))","fresh",52.481214004704526],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)","fresh",0.7822192384221015],["(+.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))","fresh",0.6671703735161248]],"compiler":[[16,13],[18,13],[24,19],[16,11],[15,12],[16,13],[56,42],[15,12],[53,37],[16,13],[69,50],[16,13],[18,13],[24,19],[15,12],[16,13],[56,42],[53,37],[16,13],[69,50]],"count":[[266,11]],"kept":[{"done":[1,1],"fresh":[9,4],"new":[255,5],"picked":[1,1]}],"min-error":[0.0078125],"time":58.2509765625,"type":"prune"},{"compiler":[[41,28]],"locations":[["(fma.f64 3 y -3)",0.0625,true],["(sqrt.f64 (/.f64 1 x))",0.12109375,true],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))",0.15625,true],["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))",0.3203125,true]],"time":10.1181640625,"type":"localize"},{"count":[[4,36]],"series":[["(fma.f64 3 y -3)","y","-inf",0.139892578125],["(fma.f64 3 y -3)","y","inf",0.138916015625],["(fma.f64 3 y -3)","y","0",0.4970703125],["(sqrt.f64 (/.f64 1 x))","x","-inf",1.510986328125],["(sqrt.f64 (/.f64 1 x))","x","inf",0.26220703125],["(sqrt.f64 (/.f64 1 x))","x","0",0.238037109375],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","y","-inf",0.180908203125],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","y","inf",0.205078125],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","y","0",0.4208984375],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","x","-inf",0.49609375],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","x","inf",0.385986328125],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","x","0",0.3759765625],["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","y","-inf",0.291015625],["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","y","inf",0.281982421875],["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","y","0",0.31591796875],["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","x","-inf",0.47998046875],["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","x","inf",0.328125],["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","x","0",0.495849609375]],"time":7.27099609375,"type":"series"},{"count":[[4,155]],"egraph":[[2,2819,35,0.025306125],[1,261,36,0.004296083],[0,13,40,0.00041675]],"inputs":[["(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(sqrt.f64 (/.f64 1 x))","(fma.f64 3 y -3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 y) (sqrt.f64 x)) (*.f64 -3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (*.f64 3 y)) (*.f64 (sqrt.f64 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 3 y -3))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 3 y -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 3 y -3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 3 y -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (fma.f64 3 y -3) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))) 2)) (cbrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))) (sqrt.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (pow.f64 (fma.f64 3 y -3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 x)) (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 3 y) (*.f64 (sqrt.f64 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) (sqrt.f64 x) (*.f64 -3 (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/3 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/3 (sqrt.f64 x)) 1) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 2) (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) (sqrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 3) (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) 3)) (+.f64 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2) (-.f64 (*.f64 x (pow.f64 (fma.f64 3 y -3) 2)) (*.f64 (/.f64 1/3 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2) (*.f64 x (pow.f64 (fma.f64 3 y -3) 2))) (-.f64 (/.f64 1/3 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))) 2)) (cbrt.f64 (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))) (sqrt.f64 (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))) (cbrt.f64 (exp.f64 (pow.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 x -1/2))) (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 x -1/2))) 2)) (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 x -1/2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 x -1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 x)) (pow.f64 x -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/6) (/.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/4) (pow.f64 x -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cbrt.f64 x)) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/4) (pow.f64 x 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 -1) (sqrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 -1/2 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) -1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3/2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 x)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/6) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/4) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/2) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 -1/2 (log.f64 x))) 2)) (cbrt.f64 (*.f64 -1/2 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 -1/2 (log.f64 x)))) (sqrt.f64 (*.f64 -1/2 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -1/2 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -1/2 (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 x -3/2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 x -1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 x -1/4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 x)) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 x) -1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 -1/2 (log.f64 x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 3 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 y) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 y) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 3 y -3))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 3 y -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 3 y -3)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 3 y -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 3 y -3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3 y -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3 y -3)) (cbrt.f64 (pow.f64 (fma.f64 3 y -3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 3 y -3) 2)) (cbrt.f64 (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 3 y -3)) (sqrt.f64 (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 3 y) 3) -27) (+.f64 (pow.f64 (*.f64 3 y) 2) (-.f64 9 (*.f64 (*.f64 3 y) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 3 y) 2) 9) (fma.f64 3 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3 y -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 y -3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 y -3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3 y -3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 3 y -3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 3 y -3))) 2)) (cbrt.f64 (log.f64 (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 3 y -3)))) (sqrt.f64 (log.f64 (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 3 y -3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 3 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3 y -3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 3 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 3 y -3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 3 y -3))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 3 y -3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 3 y -3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 3 y -3)) 1) 1))))))"]],"rules":[["egg-rr",34],["egg-rr",57],["egg-rr",36],["egg-rr",28]],"stop":[["node limit",1]],"time":52.720947265625,"type":"rewrite"},{"count":[[191,168]],"egraph":[[4,90,372,0.000906458],[3,89,372,0.000709083],[2,62,372,0.000497375],[1,38,390,0.0002815],[0,20,462,0.000118875]],"inputs":[["(*.f64 -3 (sqrt.f64 x))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","-3","(-.f64 (*.f64 3 y) 3)","(-.f64 (*.f64 3 y) 3)","(-.f64 (*.f64 3 y) 3)","(*.f64 3 y)","(-.f64 (*.f64 3 y) 3)","(-.f64 (*.f64 3 y) 3)","(-.f64 (*.f64 3 y) 3)","(*.f64 3 y)","(-.f64 (*.f64 3 y) 3)","(-.f64 (*.f64 3 y) 3)","(-.f64 (*.f64 3 y) 3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -3 (sqrt.f64 x))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 -3 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (fma.f64 3 y -3))","(+.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x))) (*.f64 -3 (sqrt.f64 x)))","(fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (sqrt.f64 x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (+.f64 (*.f64 -3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 3 (*.f64 (sqrt.f64 x) y) (fma.f64 -3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","(fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (*.f64 1/3 (sqrt.f64 (/.f64 1 x))))","-3","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(*.f64 3 y)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(*.f64 3 y)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)","(-.f64 (*.f64 3 y) 3)","(fma.f64 3 y -3)"]],"stop":[["saturated",1]],"time":17.365966796875,"type":"simplify"},{"compiler":[[2818,1987]],"time":39.91796875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","fresh",49.85517504884221],["(fma.f64 (sqrt.f64 x) -3 (fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x)))))","fresh",0.359375],["(+.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))","fresh",0.5512276856003986],["(pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 3)","fresh",0.7597392091167754],["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","done",0.34375],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","fresh",0.4388275390737681],["(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","done",0.3795700195368841],["(/.f64 (-.f64 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2) (*.f64 x (pow.f64 (fma.f64 3 y -3) 2))) (-.f64 (/.f64 1/3 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))","fresh",16.121757519536885],["(/.f64 (*.f64 (sqrt.f64 x) (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))","fresh",26.26695253907377],["(+.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))","fresh",0.6671703735161248]],"compiler":[[16,13],[18,13],[56,42],[16,12],[15,12],[16,13],[15,12],[30,22],[24,19],[69,50]],"count":[[179,10]],"kept":[{"done":[2,1],"fresh":[8,6],"new":[168,2],"picked":[1,1]}],"min-error":[0],"time":37.9541015625,"type":"prune"},{"accuracy":[0.34375],"baseline":[0.34375],"branch":[["x",0.34375,1],["y",0.34375,1],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))",0.34375,1]],"compiler":[[3,2],[3,2],[16,13],[544,383]],"count":[[25,1]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) (fma.f64 3 y -3) (/.f64 1/3 (sqrt.f64 x)))) 3)","(/.f64 (-.f64 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2) (*.f64 x (pow.f64 (fma.f64 3 y -3) 2))) (-.f64 (/.f64 1/3 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3))))","(fma.f64 (sqrt.f64 x) -3 (fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 3 (*.f64 y (sqrt.f64 x)))))","(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))","(+.f64 (fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) -3) (neg.f64 (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x)))) (pow.f64 x 1/4) (*.f64 (*.f64 (pow.f64 x 1/4) (fma.f64 -3 y (/.f64 -1/3 x))) (pow.f64 x 1/4))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 x) -3) 3) (pow.f64 (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x))) 3)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 x) -3) 2) (-.f64 (*.f64 x (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (*.f64 (*.f64 (sqrt.f64 x) -3) (*.f64 (sqrt.f64 x) (fma.f64 -3 y (/.f64 -1/3 x)))))))","(+.f64 (fma.f64 -3 (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2))))","(sqrt.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","(/.f64 (*.f64 (sqrt.f64 x) (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2))) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))","(/.f64 (*.f64 (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) (sqrt.f64 x)) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))","(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 -1 (*.f64 (-.f64 3 (*.f64 1/3 (/.f64 1 x))) (sqrt.f64 x))))","(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 2)","(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (pow.f64 (*.f64 x -3) -1))))","(/.f64 (*.f64 (-.f64 -27 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 3)) (sqrt.f64 x)) (fma.f64 (fma.f64 -3 y (/.f64 -1/3 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 9))","(sqrt.f64 (*.f64 x (pow.f64 (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))) 3)","(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (sqrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 2)))","(*.f64 (sqrt.f64 x) (-.f64 -3 (pow.f64 (cbrt.f64 (fma.f64 -3 y (/.f64 -1/3 x))) 3)))","(fma.f64 (sqrt.f64 x) -3 (*.f64 (sqrt.f64 x) (neg.f64 (fma.f64 -3 y (/.f64 -1/3 x)))))","(/.f64 (*.f64 (-.f64 9 (pow.f64 (fma.f64 -3 y (/.f64 -1/3 x)) 2)) (sqrt.f64 x)) (+.f64 -3 (fma.f64 -3 y (/.f64 -1/3 x))))","(*.f64 (sqrt.f64 x) (-.f64 -3 (fma.f64 y -3 (/.f64 -1/3 x))))","(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))"]],"link":["."],"name":["Numeric.SpecFunctions:incompleteGamma from math-functions-0.1.5.2, B"],"oracle":[64.0],"outputs":[["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))"]],"time":33.98486328125,"times":[["x",8.01708984375],["y",8.23193359375],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))",8.64990234375]],"type":"regimes"},{"compiler":[[15,12]],"egraph":[[1,16,19,4.3666e-5],[0,13,19,2.7083e-5]],"inputs":[["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 1/3 (sqrt.f64 (/.f64 1 x)) (*.f64 (sqrt.f64 x) (fma.f64 3 y -3)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.41796875,"type":"simplify"},{"time":0.01708984375,"type":"soundness"},{"compiler":[[15,12]],"remove-preprocessing":[[]],"time":10.23291015625,"type":"end"}]
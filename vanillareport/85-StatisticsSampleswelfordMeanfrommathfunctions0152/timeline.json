[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.5382732431708064,0.4456356379149611,0.01609111891423254],[11,0.47586475120897376,0.520720854806541,0.0034143939844852866],[10,0.4212573207423702,0.5772785506469518,0.0014641286106780171],[9,0.29644033681870496,0.702095534570617,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":83.14599609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",84.70458984375,2066],["body",256,"valid",334.678466796875,8256]],"time":430.906005859375,"type":"sample"},{"compiler":[[10,6]],"egraph":[[0,3,3,2.25e-6],[16,7696,40,0.16353492],[15,6870,40,0.156317212],[14,6006,40,0.141476878],[13,5790,40,0.123091836],[12,5738,40,0.103109919],[11,4806,40,0.083733752],[10,4750,40,0.069457918],[9,4588,40,0.058400043],[8,4305,40,0.047399334],[7,3643,40,0.035159126],[6,1575,40,0.019730459],[5,632,40,0.005828209],[4,307,40,0.002144167],[3,140,40,0.000881334],[2,73,40,0.000391834],[1,37,40,0.000182626],[0,16,40,7.3542e-5]],"inputs":[["0","1","2"],["(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 y (/.f64 (-.f64 x y) z))","(+.f64 z (/.f64 (-.f64 y z) x))","(+.f64 x (/.f64 (-.f64 z x) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 y (/.f64 (-.f64 x y) z))","(-.f64 y (/.f64 (-.f64 y x) z))","(+.f64 z (/.f64 (-.f64 y z) x))","(-.f64 z (/.f64 (-.f64 z y) x))","(+.f64 x (/.f64 (-.f64 z x) y))","(-.f64 x (/.f64 (-.f64 x z) y))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":190.173828125,"type":"preprocess"},{"count":[[1,1]],"egraph":[[12,1671,10,0.024592709999999997],[11,1667,10,0.021172543],[10,1589,10,0.017848667999999998],[9,1496,10,0.014012376],[8,1211,10,0.010514793],[7,719,10,0.006789168],[6,381,10,0.00355221],[5,166,10,0.001525501],[4,88,10,0.0006515010000000001],[3,42,10,0.000321668],[2,24,10,0.000164834],[1,13,10,8.9209e-5],[0,7,10,3.8667e-5]],"inputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"stop":[["saturated",1]],"time":35.35302734375,"type":"simplify"},{"compiler":[[10,6]],"time":0.203125,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (-.f64 y x) z))","next",0.0234375]],"compiler":[[10,6],[10,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0234375],"time":1.122802734375,"type":"prune"},{"compiler":[[21,6]],"locations":[["(+.f64 x (/.f64 (-.f64 y x) z))",0.0078125,true],["(/.f64 (-.f64 y x) z)",0.015625,true]],"time":4.10205078125,"type":"localize"},{"count":[[2,60]],"series":[["(+.f64 x (/.f64 (-.f64 y x) z))","z","-inf",0.155029296875],["(+.f64 x (/.f64 (-.f64 y x) z))","z","inf",0.162109375],["(+.f64 x (/.f64 (-.f64 y x) z))","z","0",0.35205078125],["(+.f64 x (/.f64 (-.f64 y x) z))","y","-inf",0.208984375],["(+.f64 x (/.f64 (-.f64 y x) z))","y","inf",0.30908203125],["(+.f64 x (/.f64 (-.f64 y x) z))","y","0",0.323974609375],["(+.f64 x (/.f64 (-.f64 y x) z))","x","-inf",0.22900390625],["(+.f64 x (/.f64 (-.f64 y x) z))","x","inf",0.673095703125],["(+.f64 x (/.f64 (-.f64 y x) z))","x","0",0.369873046875],["(/.f64 (-.f64 y x) z)","z","-inf",0.3349609375],["(/.f64 (-.f64 y x) z)","z","inf",0.30517578125],["(/.f64 (-.f64 y x) z)","z","0",0.3310546875],["(/.f64 (-.f64 y x) z)","x","-inf",0.47509765625],["(/.f64 (-.f64 y x) z)","x","inf",0.341064453125],["(/.f64 (-.f64 y x) z)","x","0",0.264892578125],["(/.f64 (-.f64 y x) z)","y","-inf",0.445068359375],["(/.f64 (-.f64 y x) z)","y","inf",0.406005859375],["(/.f64 (-.f64 y x) z)","y","0",0.38818359375]],"time":6.280029296875,"type":"series"},{"count":[[2,144]],"egraph":[[2,2731,17,0.024925958],[1,167,17,0.0033455],[0,7,17,0.000164583]],"inputs":[["(/.f64 (-.f64 y x) z)","(+.f64 x (/.f64 (-.f64 y x) z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y x) z))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y x) z)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 y x) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2) (cbrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (*.f64 (cbrt.f64 (-.f64 y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 y x) z)) (sqrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 y x)) (*.f64 (sqrt.f64 (-.f64 y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 y x)) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (-.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y x)) 1) (/.f64 (sqrt.f64 (-.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (-.f64 y x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/2) (/.f64 (-.f64 y x) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (-.f64 y x)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 y x) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (-.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z (-.f64 y x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (-.f64 y x) z))) 2)) (cbrt.f64 (log.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (-.f64 y x) z)))) (sqrt.f64 (log.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 y x) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (-.f64 y x) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (-.f64 y x) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (-.f64 y x) z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (-.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (-.f64 y x) z)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (-.f64 y x) z)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (-.f64 y x)) 1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (-.f64 y x)) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (-.f64 y x)) 1) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (cbrt.f64 (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (/.f64 y (sqrt.f64 z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (/.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (-.f64 (/.f64 x z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 x (/.f64 (-.f64 y x) z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (/.f64 (-.f64 y x) z))) (/.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2) (-.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 2) (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (sqrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (-.f64 y x) z) 3)) (/.f64 1 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (-.f64 y x) z) 2)) (/.f64 1 (-.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (-.f64 y x) z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (/.f64 (-.f64 y x) z)) (-.f64 (*.f64 x x) (pow.f64 (/.f64 (-.f64 y x) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (-.f64 y x) z) 3)) (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (-.f64 y x) z) 3)) (+.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2) (-.f64 (*.f64 x x) (*.f64 x (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (-.f64 y x) z) 2)) (-.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (-.f64 y x) z) 3))) (neg.f64 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (-.f64 y x) z) 2))) (neg.f64 (-.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2) (*.f64 x x)) (-.f64 (/.f64 (-.f64 y x) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (-.f64 y x) z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (/.f64 (-.f64 y x) z)) (-.f64 (*.f64 x x) (pow.f64 (/.f64 (-.f64 y x) z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z)))) 2)) (cbrt.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z))))) (sqrt.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (-.f64 y x) z)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 x (/.f64 (-.f64 y x) z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y x) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y x) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2) (cbrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (*.f64 (cbrt.f64 (-.f64 y x)) (/.f64 1 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 y x) z)) (sqrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 y x)) (*.f64 (sqrt.f64 (-.f64 y x)) (/.f64 1 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (-.f64 y x)) (/.f64 1 (neg.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (-.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (cbrt.f64 (/.f64 y z)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (-.f64 y x)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 y x)) 1) (/.f64 (sqrt.f64 (-.f64 y x)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (-.f64 y x) (cbrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (/.f64 (-.f64 y x) (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (/.f64 y (sqrt.f64 z)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (-.f64 y x)) (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (-.f64 (/.f64 x z) x)))))))"]],"rules":[["egg-rr",81],["egg-rr",63]],"stop":[["node limit",1]],"time":50.090087890625,"type":"rewrite"},{"count":[[204,161]],"egraph":[[10,1500,468,0.022878541999999998],[9,1410,468,0.019586041999999998],[8,1329,468,0.015795917],[7,1230,468,0.012428834],[6,1024,468,0.009193584],[5,659,468,0.006137459],[4,368,468,0.003154292],[3,199,468,0.0014898749999999999],[2,107,468,0.000780708],[1,61,585,0.000388208],[0,27,661,0.000153333]],"inputs":[["(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(-.f64 x (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(/.f64 (-.f64 y x) z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(/.f64 (neg.f64 x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(/.f64 (neg.f64 x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(/.f64 (neg.f64 x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(*.f64 x (-.f64 1 (/.f64 1 z)))","(-.f64 x (/.f64 x z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 x (-.f64 1 (/.f64 1 z)))","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 x (/.f64 x z))","(*.f64 x (-.f64 1 (/.f64 1 z)))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 (-.f64 y x) z)","(fma.f64 -1 (/.f64 x z) (/.f64 y z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (-.f64 1 (/.f64 1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))"]],"stop":[["saturated",1]],"time":45.39599609375,"type":"simplify"},{"compiler":[[2175,675]],"time":19.5830078125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","next",0.08203125],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","fresh",0.15234375],["(+.f64 x (/.f64 (-.f64 y x) z))","done",0.0234375]],"compiler":[[14,10],[12,8],[10,6],[14,10],[12,8]],"count":[[162,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[161,2],"picked":[1,1]}],"min-error":[0],"time":37.988037109375,"type":"prune"},{"compiler":[[36,22]],"locations":[["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))",0.015625,true],["(*.f64 (-.f64 1 (/.f64 1 z)) x)",0.12109375,true]],"time":8.2587890625,"type":"localize"},{"count":[[2,39]],"series":[["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","y","-inf",0.17578125],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","y","inf",0.195068359375],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","y","0",0.27587890625],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","x","-inf",0.194091796875],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","x","inf",0.161865234375],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","x","0",0.1708984375],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","z","-inf",0.26806640625],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","z","inf",0.244873046875],["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","z","0",0.18212890625],["(*.f64 (-.f64 1 (/.f64 1 z)) x)","x","-inf",0.31103515625],["(*.f64 (-.f64 1 (/.f64 1 z)) x)","x","inf",0.298828125],["(*.f64 (-.f64 1 (/.f64 1 z)) x)","x","0",0.43798828125],["(*.f64 (-.f64 1 (/.f64 1 z)) x)","z","-inf",0.31298828125],["(*.f64 (-.f64 1 (/.f64 1 z)) x)","z","inf",0.264892578125],["(*.f64 (-.f64 1 (/.f64 1 z)) x)","z","0",0.34716796875]],"time":4.01611328125,"type":"series"},{"count":[[2,111]],"egraph":[[2,3136,24,0.027346416999999998],[1,222,24,0.004356624999999999],[0,10,24,0.000270459]],"inputs":[["(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 -1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 1 (/.f64 -1 z)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 1 (/.f64 -1 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 1 (/.f64 -1 z))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 1 (/.f64 -1 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z -3)) x) (+.f64 (+.f64 1 (pow.f64 z -2)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z -2)) x) (+.f64 1 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 z -3))) (+.f64 (+.f64 1 (pow.f64 z -2)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 z -2))) (+.f64 1 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 1 (/.f64 -1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log1p.f64 (/.f64 -1 z)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log1p.f64 (/.f64 -1 z)) (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (+.f64 (log1p.f64 (/.f64 -1 z)) (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (+.f64 (log1p.f64 (/.f64 -1 z)) (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (+.f64 (log1p.f64 (/.f64 -1 z)) (log.f64 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (/.f64 -1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 x (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (/.f64 -1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 x (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (/.f64 -1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 x (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 (/.f64 -1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 x (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (/.f64 -1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 x (/.f64 -1 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) (-.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z))) (/.f64 (pow.f64 (/.f64 y z) 2) (-.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))) (pow.f64 (cbrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))) 2) (cbrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))) (sqrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3) (pow.f64 (/.f64 y z) 3)) (/.f64 1 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (+.f64 x (*.f64 (/.f64 -1 z) x))) (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) (pow.f64 (/.f64 y z) 2)) (/.f64 1 (-.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (+.f64 x (*.f64 (/.f64 -1 z) x))) (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2)) (+.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3) (pow.f64 (/.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z)) (-.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3) (pow.f64 (/.f64 y z) 3)) (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (+.f64 x (*.f64 (/.f64 -1 z) x))) (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3) (pow.f64 (/.f64 y z) 3)) (+.f64 (pow.f64 (/.f64 y z) 2) (-.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) (*.f64 (+.f64 1 (/.f64 -1 z)) (*.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) (pow.f64 (/.f64 y z) 2)) (-.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3) (pow.f64 (/.f64 y z) 3))) (neg.f64 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (+.f64 x (*.f64 (/.f64 -1 z) x))) (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) (pow.f64 (/.f64 y z) 2))) (neg.f64 (-.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2)) (-.f64 (/.f64 y z) (+.f64 x (*.f64 (/.f64 -1 z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (+.f64 x (*.f64 (/.f64 -1 z) x))) (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2)) (+.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 3) (pow.f64 (/.f64 y z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z)) (-.f64 (pow.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 2) (pow.f64 (/.f64 y z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)))) (exp.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (+.f64 1 (/.f64 -1 z))) (+.f64 1 (expm1.f64 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)))) (+.f64 1 (expm1.f64 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 y z))) (pow.f64 (exp.f64 x) (+.f64 1 (/.f64 -1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 y z)) (+.f64 1 (expm1.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 y z))) (+.f64 1 (expm1.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (*.f64 (/.f64 -1 z) x)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (/.f64 -1 z)) x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (*.f64 (/.f64 -1 z) x)) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (/.f64 1 z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1 z)) 2)) (*.f64 (cbrt.f64 (+.f64 1 (/.f64 -1 z))) x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (cbrt.f64 (/.f64 y z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (+.f64 1 (/.f64 -1 z))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) (pow.f64 (cbrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) 2) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) 2) (cbrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 1 (/.f64 -1 z))) (*.f64 (sqrt.f64 (+.f64 1 (/.f64 -1 z))) x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 1 (/.f64 -1 z))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) (sqrt.f64 (+.f64 x (*.f64 (/.f64 -1 z) x))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (/.f64 y (sqrt.f64 z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 -1 z) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 y z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (/.f64 1 (cbrt.f64 z)) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 z -1/2)) (pow.f64 z -1/2) (+.f64 x (*.f64 (/.f64 -1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 1 (/.f64 -1 z)) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 1 (/.f64 -1 z)) (sqrt.f64 x)) (sqrt.f64 x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1 z)) 2))) (cbrt.f64 (+.f64 1 (/.f64 -1 z))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (+.f64 1 (/.f64 -1 z)))) (sqrt.f64 (+.f64 1 (/.f64 -1 z))) (/.f64 y z))))))"]],"rules":[["egg-rr",75],["egg-rr",36]],"stop":[["node limit",1]],"time":51.363037109375,"type":"rewrite"},{"count":[[150,125]],"egraph":[[9,1726,293,0.021314583999999998],[8,1724,293,0.018025542],[7,1608,293,0.014729167],[6,1381,293,0.010936042],[5,740,293,0.007028334000000001],[4,350,293,0.0029850420000000003],[3,171,293,0.001392625],[2,105,293,0.000714875],[1,56,347,0.000342709],[0,26,379,0.000128042]],"inputs":[["(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","x","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","x","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","x","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(/.f64 y z)","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(/.f64 y z)","(/.f64 y z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x z))","(/.f64 (neg.f64 x) z)","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","x","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","x","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (neg.f64 x)) z)","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(fma.f64 -1 (/.f64 x z) x)","(-.f64 x (/.f64 x z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (fma.f64 -1 (/.f64 x z) x) (/.f64 y z))","(+.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(/.f64 y z)"]],"stop":[["saturated",1]],"time":39.158935546875,"type":"simplify"},{"compiler":[[2099,1172]],"time":22.58203125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","done",0.08203125],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","next",0.15234375],["(+.f64 x (/.f64 (-.f64 y x) z))","done",0.0234375]],"compiler":[[14,10],[12,8],[10,6],[12,8]],"count":[[128,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[125,0],"picked":[1,1]}],"min-error":[0],"time":26.925048828125,"type":"prune"},{"compiler":[[31,11]],"locations":[["(/.f64 z (-.f64 y x))",0.00390625,true],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))",0.0078125,true],["(pow.f64 (/.f64 z (-.f64 y x)) -1)",0.2734375,true]],"time":6.671875,"type":"localize"},{"count":[[3,96]],"series":[["(/.f64 z (-.f64 y x))","x","-inf",0.220947265625],["(/.f64 z (-.f64 y x))","x","inf",0.251953125],["(/.f64 z (-.f64 y x))","x","0",0.19189453125],["(/.f64 z (-.f64 y x))","y","-inf",0.239990234375],["(/.f64 z (-.f64 y x))","y","inf",0.260986328125],["(/.f64 z (-.f64 y x))","y","0",0.280029296875],["(/.f64 z (-.f64 y x))","z","-inf",0.14697265625],["(/.f64 z (-.f64 y x))","z","inf",0.1669921875],["(/.f64 z (-.f64 y x))","z","0",0.14697265625],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","y","-inf",0.277099609375],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","y","inf",0.2548828125],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","y","0",0.18798828125],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","z","-inf",0.155029296875],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","z","inf",0.155029296875],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","z","0",0.179931640625],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","x","-inf",0.243896484375],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","x","inf",0.27490234375],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","x","0",0.166015625],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","x","-inf",0.434814453125],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","x","inf",0.503173828125],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","x","0",1.237060546875],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","y","-inf",0.492919921875],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","y","inf",0.51513671875],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","y","0",1.1669921875],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","z","-inf",0.611083984375],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","z","inf",0.623046875],["(pow.f64 (/.f64 z (-.f64 y x)) -1)","z","0",1.39404296875]],"time":11.128173828125,"type":"series"},{"count":[[3,147]],"egraph":[[2,3031,24,0.025302583],[1,206,24,0.003997458],[0,9,30,0.000242708]],"inputs":[["(pow.f64 (/.f64 z (-.f64 y x)) -1)","(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","(/.f64 z (-.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y x) z))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y x) z)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 y x) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2) (cbrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 y x) z)) (sqrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 z (-.f64 y x))) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (-.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y x)) 1) (/.f64 (sqrt.f64 (-.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 y x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (cbrt.f64 (*.f64 z z))) (/.f64 (cbrt.f64 (-.f64 y x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 (*.f64 z z))) (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 (-.f64 y x) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (-.f64 y x)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (sqrt.f64 z)) (/.f64 (sqrt.f64 (-.f64 y x)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (pow.f64 (/.f64 1 (-.f64 y x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 z)) (neg.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 z (-.f64 y x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (/.f64 z (cbrt.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 y x)) (/.f64 z (sqrt.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y 3) (pow.f64 x 3)) (*.f64 z (fma.f64 x (+.f64 y x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (-.f64 y x) z)) (sqrt.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 z (-.f64 y x))) 2)) (cbrt.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 z) (/.f64 1 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 z (-.f64 y x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z (-.f64 y x)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 y x) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 y x) z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 x (/.f64 (-.f64 y x) z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (/.f64 (-.f64 y x) z))) (/.f64 (pow.f64 (/.f64 z (-.f64 y x)) -2) (-.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 2) (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (sqrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 z (-.f64 y x)) -3)) (/.f64 1 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 z (-.f64 y x)) -2)) (/.f64 1 (-.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 z (-.f64 y x)) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (/.f64 (-.f64 y x) z)) (-.f64 (*.f64 x x) (pow.f64 (/.f64 z (-.f64 y x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 z (-.f64 y x)) -3)) (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 z (-.f64 y x)) -3)) (+.f64 (pow.f64 (/.f64 z (-.f64 y x)) -2) (-.f64 (*.f64 x x) (/.f64 x (/.f64 z (-.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 z (-.f64 y x)) -2)) (-.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 z (-.f64 y x)) -3))) (neg.f64 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 z (-.f64 y x)) -2))) (neg.f64 (-.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 z (-.f64 y x)) -2) (*.f64 x x)) (-.f64 (/.f64 (-.f64 y x) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 (-.f64 y x) z) (-.f64 (/.f64 (-.f64 y x) z) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 z (-.f64 y x)) -3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (/.f64 (-.f64 y x) z)) (-.f64 (*.f64 x x) (pow.f64 (/.f64 z (-.f64 y x)) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (-.f64 y x) z)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) z))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y x) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y x) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 2) (cbrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 y x) z)) (sqrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 z (-.f64 y x))) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (-.f64 y x)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 y x)) 1) (/.f64 (sqrt.f64 (-.f64 y x)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (*.f64 z z))) (/.f64 (-.f64 y x) (cbrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (cbrt.f64 (*.f64 z z))) (/.f64 (cbrt.f64 (-.f64 y x)) (cbrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 (*.f64 z z))) (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 (-.f64 y x) (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (-.f64 y x)) (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (sqrt.f64 z)) (/.f64 (sqrt.f64 (-.f64 y x)) (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (-.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (pow.f64 (/.f64 1 (-.f64 y x)) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (neg.f64 z)) (neg.f64 (-.f64 y x)) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 z (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 z (-.f64 y x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 z (-.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (-.f64 y x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (-.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 z (-.f64 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 1 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 z (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) (/.f64 1 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z (-.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (-.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z (-.f64 y x))) 2) (cbrt.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (/.f64 1 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 z (-.f64 y x))) (sqrt.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 1 (neg.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 y x)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) 1) (/.f64 (cbrt.f64 z) (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 y x)) 2)) (/.f64 z (cbrt.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) (pow.f64 (cbrt.f64 (-.f64 y x)) 2)) (cbrt.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (-.f64 y x)) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (-.f64 y x))) (/.f64 z (sqrt.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) (sqrt.f64 (-.f64 y x))) (/.f64 (cbrt.f64 z) (sqrt.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (-.f64 (pow.f64 y 3) (pow.f64 x 3))) (fma.f64 x (+.f64 y x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (-.f64 (*.f64 y y) (*.f64 x x))) (+.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (-.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y x) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z (-.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z (-.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 z (-.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 z 3) (pow.f64 (-.f64 y x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (-.f64 y x) z) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z (neg.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 z (-.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 z (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z (-.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 z 3) (pow.f64 (-.f64 y x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (-.f64 y x))) 1))))))"]],"rules":[["egg-rr",40],["egg-rr",60],["egg-rr",47]],"stop":[["node limit",1]],"time":52.423828125,"type":"rewrite"},{"count":[[243,194]],"egraph":[[3,6721,1053,0.026683708],[2,1848,1053,0.014471583],[1,474,1275,0.004272167],[0,135,1293,0.000785209]],"inputs":[["(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x)))) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x))) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 3) z)) (*.f64 -1 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z)))) (+.f64 (/.f64 (pow.f64 y 3) z) (*.f64 -1 (/.f64 (pow.f64 y 3) z)))) (pow.f64 x 2))) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))))","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 3) z)) (*.f64 -1 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))))))) (pow.f64 x 2))) (+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))))","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (/.f64 y z))))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z)))) (+.f64 (/.f64 (pow.f64 y 3) z) (*.f64 -1 (/.f64 (pow.f64 y 3) z)))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (/.f64 y z)))))","(/.f64 (-.f64 y x) z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 x (/.f64 y z))) (/.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x)))) (pow.f64 y 2))) (+.f64 x (/.f64 y z)))) (/.f64 x z))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 x (/.f64 y z)))) (/.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x))) (pow.f64 y 2))) (+.f64 x (/.f64 y z))))) (/.f64 x z))","(*.f64 -1 (/.f64 z x))","(+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 3) z) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))))","(/.f64 z y)","(+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2))))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 (*.f64 z (pow.f64 x 3)) (pow.f64 y 4)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))))","(/.f64 z y)","(+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2))))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 (*.f64 z (pow.f64 x 3)) (pow.f64 y 4)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))))","(/.f64 z y)","(+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2))))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 (*.f64 z (pow.f64 x 3)) (pow.f64 y 4)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))))","(*.f64 -1 (/.f64 z x))","(+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 3) z) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))))","(*.f64 -1 (/.f64 z x))","(+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 3) z) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(/.f64 (neg.f64 x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x)))) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x))) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(/.f64 (neg.f64 x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 3) z)) (*.f64 -1 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(/.f64 (neg.f64 x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z)))) (+.f64 (/.f64 (pow.f64 y 3) z) (*.f64 -1 (/.f64 (pow.f64 y 3) z)))) (pow.f64 x 2))) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z)))))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(*.f64 x (-.f64 1 (/.f64 1 z)))","(*.f64 x (+.f64 1 (/.f64 -1 z)))","(-.f64 x (/.f64 x z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x)))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))) x)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 y 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 y 3) z)) (*.f64 -1 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z))))))) (pow.f64 x 2))) (+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 x (-.f64 1 (/.f64 1 z)))","(*.f64 x (+.f64 1 (/.f64 -1 z)))","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (/.f64 y z))))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (pow.f64 y 2) (*.f64 z x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y (+.f64 (/.f64 (pow.f64 y 2) z) (*.f64 -1 (/.f64 (pow.f64 y 2) z)))) (+.f64 (/.f64 (pow.f64 y 3) z) (*.f64 -1 (/.f64 (pow.f64 y 3) z)))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (+.f64 (/.f64 (pow.f64 y 2) (*.f64 z x)) (/.f64 y z)))))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 (-.f64 y x) z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(*.f64 x (-.f64 1 (/.f64 1 z)))","(*.f64 x (+.f64 1 (/.f64 -1 z)))","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 x (/.f64 y z))) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) y)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x)))) (pow.f64 y 2))) (+.f64 x (/.f64 y z)))) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 x (/.f64 y z)))) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) (*.f64 y z))) (+.f64 (/.f64 (pow.f64 x 2) (*.f64 y z)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (pow.f64 x 3) z) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) z)) (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 2) z)) (/.f64 (pow.f64 x 2) z)) x))) (pow.f64 y 2))) (+.f64 x (/.f64 y z))))) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 1 z)) x (/.f64 y z))","(fma.f64 x (+.f64 1 (/.f64 -1 z)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 -1 (/.f64 z x))","(neg.f64 (/.f64 z x))","(/.f64 (neg.f64 z) x)","(+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))","(*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z))))","(neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y))))","(*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2)))))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)) (*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z)))))","(-.f64 (neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y)))) (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)))","(-.f64 (*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x))) (*.f64 z (/.f64 y (/.f64 (pow.f64 x 3) y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 3) z) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)) (fma.f64 -1 (/.f64 (pow.f64 y 3) (/.f64 (pow.f64 x 4) z)) (*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z))))))","(-.f64 (-.f64 (neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y)))) (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) z)) (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)))","(-.f64 (*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x))) (*.f64 z (+.f64 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 (pow.f64 y 3) (pow.f64 x 4)))))","(/.f64 z y)","(+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))","(+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y)))","(+.f64 (/.f64 z y) (*.f64 (/.f64 z y) (/.f64 x y)))","(*.f64 (+.f64 (/.f64 x y) 1) (/.f64 z y))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2))))","(+.f64 (+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y))) (/.f64 z (/.f64 (pow.f64 y 3) (*.f64 x x))))","(+.f64 (/.f64 z y) (+.f64 (*.f64 (/.f64 z y) (/.f64 x y)) (*.f64 (/.f64 z (pow.f64 y 3)) (*.f64 x x))))","(+.f64 (/.f64 z y) (*.f64 (/.f64 z (*.f64 y y)) (+.f64 (/.f64 (*.f64 x x) y) x)))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 (*.f64 z (pow.f64 x 3)) (pow.f64 y 4)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))))","(+.f64 (/.f64 z (/.f64 (pow.f64 y 3) (*.f64 x x))) (+.f64 (+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y))) (/.f64 z (/.f64 (pow.f64 y 4) (pow.f64 x 3)))))","(+.f64 (+.f64 (/.f64 z y) (+.f64 (*.f64 (/.f64 z y) (/.f64 x y)) (*.f64 (/.f64 z (pow.f64 y 3)) (*.f64 x x)))) (*.f64 (/.f64 z (pow.f64 y 4)) (pow.f64 x 3)))","(+.f64 (fma.f64 (/.f64 z (pow.f64 y 4)) (pow.f64 x 3) (/.f64 z y)) (*.f64 (/.f64 z (*.f64 y y)) (+.f64 (/.f64 (*.f64 x x) y) x)))","(/.f64 z y)","(+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))","(+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y)))","(+.f64 (/.f64 z y) (*.f64 (/.f64 z y) (/.f64 x y)))","(*.f64 (+.f64 (/.f64 x y) 1) (/.f64 z y))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2))))","(+.f64 (+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y))) (/.f64 z (/.f64 (pow.f64 y 3) (*.f64 x x))))","(+.f64 (/.f64 z y) (+.f64 (*.f64 (/.f64 z y) (/.f64 x y)) (*.f64 (/.f64 z (pow.f64 y 3)) (*.f64 x x))))","(+.f64 (/.f64 z y) (*.f64 (/.f64 z (*.f64 y y)) (+.f64 (/.f64 (*.f64 x x) y) x)))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 (*.f64 z (pow.f64 x 3)) (pow.f64 y 4)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))))","(+.f64 (/.f64 z (/.f64 (pow.f64 y 3) (*.f64 x x))) (+.f64 (+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y))) (/.f64 z (/.f64 (pow.f64 y 4) (pow.f64 x 3)))))","(+.f64 (+.f64 (/.f64 z y) (+.f64 (*.f64 (/.f64 z y) (/.f64 x y)) (*.f64 (/.f64 z (pow.f64 y 3)) (*.f64 x x)))) (*.f64 (/.f64 z (pow.f64 y 4)) (pow.f64 x 3)))","(+.f64 (fma.f64 (/.f64 z (pow.f64 y 4)) (pow.f64 x 3) (/.f64 z y)) (*.f64 (/.f64 z (*.f64 y y)) (+.f64 (/.f64 (*.f64 x x) y) x)))","(/.f64 z y)","(+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))","(+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y)))","(+.f64 (/.f64 z y) (*.f64 (/.f64 z y) (/.f64 x y)))","(*.f64 (+.f64 (/.f64 x y) 1) (/.f64 z y))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2))))","(+.f64 (+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y))) (/.f64 z (/.f64 (pow.f64 y 3) (*.f64 x x))))","(+.f64 (/.f64 z y) (+.f64 (*.f64 (/.f64 z y) (/.f64 x y)) (*.f64 (/.f64 z (pow.f64 y 3)) (*.f64 x x))))","(+.f64 (/.f64 z y) (*.f64 (/.f64 z (*.f64 y y)) (+.f64 (/.f64 (*.f64 x x) y) x)))","(+.f64 (/.f64 (*.f64 z (pow.f64 x 2)) (pow.f64 y 3)) (+.f64 (/.f64 (*.f64 z (pow.f64 x 3)) (pow.f64 y 4)) (+.f64 (/.f64 z y) (/.f64 (*.f64 z x) (pow.f64 y 2)))))","(+.f64 (/.f64 z (/.f64 (pow.f64 y 3) (*.f64 x x))) (+.f64 (+.f64 (/.f64 z y) (/.f64 (*.f64 x z) (*.f64 y y))) (/.f64 z (/.f64 (pow.f64 y 4) (pow.f64 x 3)))))","(+.f64 (+.f64 (/.f64 z y) (+.f64 (*.f64 (/.f64 z y) (/.f64 x y)) (*.f64 (/.f64 z (pow.f64 y 3)) (*.f64 x x)))) (*.f64 (/.f64 z (pow.f64 y 4)) (pow.f64 x 3)))","(+.f64 (fma.f64 (/.f64 z (pow.f64 y 4)) (pow.f64 x 3) (/.f64 z y)) (*.f64 (/.f64 z (*.f64 y y)) (+.f64 (/.f64 (*.f64 x x) y) x)))","(*.f64 -1 (/.f64 z x))","(neg.f64 (/.f64 z x))","(/.f64 (neg.f64 z) x)","(+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))","(*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z))))","(neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y))))","(*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2)))))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)) (*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z)))))","(-.f64 (neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y)))) (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)))","(-.f64 (*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x))) (*.f64 z (/.f64 y (/.f64 (pow.f64 x 3) y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 3) z) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)) (fma.f64 -1 (/.f64 (pow.f64 y 3) (/.f64 (pow.f64 x 4) z)) (*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z))))))","(-.f64 (-.f64 (neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y)))) (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) z)) (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)))","(-.f64 (*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x))) (*.f64 z (+.f64 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 (pow.f64 y 3) (pow.f64 x 4)))))","(*.f64 -1 (/.f64 z x))","(neg.f64 (/.f64 z x))","(/.f64 (neg.f64 z) x)","(+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))","(*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z))))","(neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y))))","(*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2)))))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)) (*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z)))))","(-.f64 (neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y)))) (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)))","(-.f64 (*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x))) (*.f64 z (/.f64 y (/.f64 (pow.f64 x 3) y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 2) z) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 y 3) z) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 z x)) (*.f64 -1 (/.f64 (*.f64 y z) (pow.f64 x 2))))))","(fma.f64 -1 (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)) (fma.f64 -1 (/.f64 (pow.f64 y 3) (/.f64 (pow.f64 x 4) z)) (*.f64 -1 (+.f64 (/.f64 z x) (/.f64 y (/.f64 (*.f64 x x) z))))))","(-.f64 (-.f64 (neg.f64 (+.f64 (/.f64 z x) (/.f64 z (/.f64 (*.f64 x x) y)))) (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) z)) (/.f64 (*.f64 y y) (/.f64 (pow.f64 x 3) z)))","(-.f64 (*.f64 (/.f64 z x) (-.f64 -1 (/.f64 y x))) (*.f64 z (+.f64 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 (pow.f64 y 3) (pow.f64 x 4)))))"]],"stop":[["node limit",1]],"time":53.68896484375,"type":"simplify"},{"compiler":[[3312,1401]],"time":32.2041015625,"type":"eval"},{"alts":[["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","done",0.08203125],["(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","done",0.15234375],["(+.f64 x (/.f64 (-.f64 y x) z))","done",0.0234375]],"compiler":[[14,10],[12,8],[10,6]],"count":[[197,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[194,0],"picked":[1,1]}],"min-error":[0],"time":58.73388671875,"type":"prune"},{"accuracy":[0.0234375],"baseline":[0.0234375],"branch":[["x",0.0234375,1],["y",0.0234375,1],["z",0.0234375,1],["(+.f64 x (/.f64 (-.f64 y x) z))",0.0234375,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[30,17]],"count":[[3,1]],"inputs":[["(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 x (pow.f64 (/.f64 z (-.f64 y x)) -1))","(+.f64 x (/.f64 (-.f64 y x) z))"]],"link":["."],"name":["Statistics.Sample:$swelfordMean from math-functions-0.1.5.2"],"oracle":[0.20703125],"outputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"time":15.733154296875,"times":[["x",3.283935546875],["y",4.60107421875],["z",3.1708984375],["(+.f64 x (/.f64 (-.f64 y x) z))",3.72705078125]],"type":"regimes"},{"compiler":[[10,6]],"egraph":[[4,18,10,9.7459e-5],[3,17,10,7.854200000000001e-5],[2,15,10,5.954200000000001e-5],[1,10,10,4.1209000000000005e-5],[0,7,10,1.9167e-5]],"inputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"stop":[["done",1],["saturated",1]],"time":9.307861328125,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[10,6]],"remove-preprocessing":[[]],"time":8.238037109375,"type":"end"}]
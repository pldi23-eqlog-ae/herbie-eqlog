[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.4797652819565883,0.4719642204613592,0.048270497582052485],[11,0.4212573207423702,0.5548504988481682,0.023892180409461616],[10,0.3588488287805376,0.622134654244519,0.019016516974943443],[9,0.2496339678473305,0.7411008420467624,0.009265190105907095],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":97.9599609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",76.344970703125,1652],["body",256,"valid",377.73193359375,8256]],"time":462.81103515625,"type":"sample"},{"compiler":[[15,10]],"egraph":[[0,3,3,2.208e-6],[8,6548,52,0.037793916],[7,2307,64,0.02454625],[6,1414,64,0.011320916],[5,896,64,0.006436708],[4,474,64,0.003333041],[3,269,72,0.001621583],[2,154,72,0.000772291],[1,71,72,0.000319375],[0,28,72,0.000103333]],"inputs":[["0","1","2"],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 y 4) x) (*.f64 (/.f64 y x) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 z 4) y) (*.f64 (/.f64 z y) x)))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) z) (*.f64 (/.f64 x z) y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))","(fabs.f64 (fma.f64 x (/.f64 z y) (/.f64 (-.f64 -4 x) y)))","(fabs.f64 (*.f64 (/.f64 1 y) (fma.f64 x z (-.f64 -4 x))))","(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","(fabs.f64 (-.f64 (/.f64 (+.f64 y 4) x) (*.f64 (/.f64 y x) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 4 y) x) (*.f64 z (/.f64 y x))))","(fabs.f64 (-.f64 (/.f64 y (/.f64 x z)) (/.f64 (+.f64 4 y) x)))","(fabs.f64 (fma.f64 (/.f64 z x) y (/.f64 (-.f64 -4 y) x)))","(fabs.f64 (fma.f64 y (/.f64 z x) (/.f64 (-.f64 -4 y) x)))","(fabs.f64 (*.f64 (/.f64 -1 x) (fma.f64 y z (-.f64 -4 y))))","(fabs.f64 (/.f64 (fma.f64 y z (-.f64 -4 y)) x))","(fabs.f64 (-.f64 (/.f64 (+.f64 z 4) y) (*.f64 (/.f64 z y) x)))","(fabs.f64 (-.f64 (/.f64 (+.f64 4 z) y) (*.f64 x (/.f64 z y))))","(fabs.f64 (-.f64 (/.f64 x (/.f64 y z)) (/.f64 (+.f64 4 z) y)))","(fabs.f64 (fma.f64 x (/.f64 z y) (/.f64 (-.f64 -4 z) y)))","(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 z)) y))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) z) (*.f64 (/.f64 x z) y)))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) z) (*.f64 y (/.f64 x z))))","(fabs.f64 (fma.f64 y (/.f64 x z) (/.f64 (-.f64 -4 x) z)))","(fabs.f64 (fma.f64 x (/.f64 y z) (/.f64 (-.f64 -4 x) z)))","(fabs.f64 (*.f64 (/.f64 -1 z) (fma.f64 x y (-.f64 -4 x))))","(fabs.f64 (/.f64 (fma.f64 x y (-.f64 -4 x)) z))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":62.27685546875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,5033,13,0.053201251],[12,5033,13,0.045714667],[11,4936,13,0.039502126],[10,4740,13,0.032822584],[9,3640,13,0.024965459000000002],[8,1786,13,0.016339875],[7,745,16,0.007442875],[6,444,16,0.003636083],[5,273,16,0.002098292],[4,141,16,0.0011215],[3,78,18,0.0005645],[2,46,18,0.000275083],[1,22,18,0.000128292],[0,11,18,4.85e-5]],"inputs":[["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))"]],"method":["egg-herbie"],"outputs":[["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","(fabs.f64 (fma.f64 (/.f64 x y) z (/.f64 (-.f64 -4 x) y)))","(fabs.f64 (fma.f64 x (/.f64 z y) (/.f64 (-.f64 -4 x) y)))","(fabs.f64 (*.f64 (/.f64 -1 y) (fma.f64 x z (-.f64 -4 x))))","(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))"]],"stop":[["saturated",1]],"time":64.56103515625,"type":"simplify"},{"compiler":[[24,15]],"time":0.385009765625,"type":"eval"},{"alts":[["(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","fresh",2.84375],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","next",1.2552797300709377]],"compiler":[[12,8],[15,10],[12,8],[15,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0703125],"time":1.302978515625,"type":"prune"},{"compiler":[[46,20]],"locations":[["(/.f64 (+.f64 x 4) y)",0.01953125,true],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))",0.0234375,true],["(*.f64 (/.f64 x y) z)",3.027047889472936,true]],"time":9.28515625,"type":"localize"},{"count":[[3,96]],"series":[["(/.f64 (+.f64 x 4) y)","y","-inf",0.159912109375],["(/.f64 (+.f64 x 4) y)","y","inf",0.136962890625],["(/.f64 (+.f64 x 4) y)","y","0",0.302001953125],["(/.f64 (+.f64 x 4) y)","x","-inf",0.27392578125],["(/.f64 (+.f64 x 4) y)","x","inf",0.298095703125],["(/.f64 (+.f64 x 4) y)","x","0",0.260986328125],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","z","-inf",0.19189453125],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","z","inf",0.2099609375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","z","0",0.33984375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","y","-inf",0.35302734375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","y","inf",0.362060546875],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","y","0",0.580078125],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","x","-inf",0.218017578125],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","x","inf",0.26708984375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","x","0",0.76904296875],["(*.f64 (/.f64 x y) z)","z","-inf",0.303955078125],["(*.f64 (/.f64 x y) z)","z","inf",0.333984375],["(*.f64 (/.f64 x y) z)","z","0",0.427978515625],["(*.f64 (/.f64 x y) z)","y","-inf",0.29296875],["(*.f64 (/.f64 x y) z)","y","inf",0.52197265625],["(*.f64 (/.f64 x y) z)","y","0",0.429931640625],["(*.f64 (/.f64 x y) z)","x","-inf",0.363037109375],["(*.f64 (/.f64 x y) z)","x","inf",0.385009765625],["(*.f64 (/.f64 x y) z)","x","0",0.544921875]],"time":8.623779296875,"type":"series"},{"count":[[3,190]],"egraph":[[2,3554,27,0.028730916],[1,236,27,0.004547916],[0,10,30,0.000288916]],"inputs":[["(*.f64 (/.f64 x y) z)","(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","(/.f64 (+.f64 x 4) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 x y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 x y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 x z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x y) z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) (neg.f64 z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2) (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3))) (neg.f64 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2))) (neg.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 4) y) (*.f64 y (*.f64 x z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (*.f64 (/.f64 y (+.f64 x 4)) (*.f64 x z))) (*.f64 (/.f64 y (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (fma.f64 -1 x -4) y) (*.f64 (neg.f64 y) (*.f64 x z))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 3)) (+.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (-.f64 (pow.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 2) (*.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) (neg.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 2)) (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (pow.f64 (exp.f64 z) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (+.f64 x 4) y)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (exp.f64 (*.f64 (/.f64 x y) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (pow.f64 (exp.f64 z) (/.f64 (neg.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 x y) (neg.f64 z))) (exp.f64 (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 x y) (neg.f64 z))) (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (/.f64 (neg.f64 x) y)) (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (neg.f64 z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 (neg.f64 x) y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 4) (/.f64 1 y) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 4) (/.f64 1 y) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 4) y) 1 (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 4) y) 1 (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1 (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1 (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 x 4) y) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 x y) (neg.f64 z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (*.f64 (cbrt.f64 (+.f64 x 4)) (/.f64 1 y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (*.f64 (cbrt.f64 (+.f64 x 4)) (/.f64 1 y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2) (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2) (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 2) (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 4)) (*.f64 (sqrt.f64 (+.f64 x 4)) (/.f64 1 y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 4)) (*.f64 (sqrt.f64 (+.f64 x 4)) (/.f64 1 y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 x y) z)) (neg.f64 (sqrt.f64 (*.f64 (/.f64 x y) z))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (sqrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1 x -4) (/.f64 1 (neg.f64 y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1 x -4) (/.f64 1 (neg.f64 y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2))) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 (+.f64 x 4) y) 2))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 x) y) z (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) (neg.f64 z))) 2) (cbrt.f64 (*.f64 (/.f64 x y) (neg.f64 z))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 x y) (neg.f64 z))) (sqrt.f64 (*.f64 (/.f64 x y) (neg.f64 z))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 (/.f64 x y) z))) (sqrt.f64 (*.f64 (/.f64 x y) z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (/.f64 x y) z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x 4)) y) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x 4)) y) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) 1) (/.f64 (sqrt.f64 (+.f64 x 4)) y) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) 1) (/.f64 (sqrt.f64 (+.f64 x 4)) y) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (+.f64 x 4) (cbrt.f64 y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (+.f64 x 4) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/2) (/.f64 (+.f64 x 4) (sqrt.f64 y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/2) (/.f64 (+.f64 x 4) (sqrt.f64 y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (sqrt.f64 y)) (/.f64 (cbrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (*.f64 (/.f64 x y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (sqrt.f64 y)) (/.f64 (cbrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (*.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (fma.f64 (*.f64 (/.f64 x y) (neg.f64 z)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 2)) (cbrt.f64 (*.f64 (/.f64 x y) z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (neg.f64 x) y) 1) z (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (neg.f64 x) y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (neg.f64 x) y) (sqrt.f64 z)) (sqrt.f64 z) (/.f64 (+.f64 x 4) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 x 4) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 4) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 4) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (*.f64 (cbrt.f64 (+.f64 x 4)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 4)) (*.f64 (sqrt.f64 (+.f64 x 4)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1 x -4) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) 1) (/.f64 (sqrt.f64 (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (+.f64 x 4) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/2) (/.f64 (+.f64 x 4) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (sqrt.f64 y)) (/.f64 (cbrt.f64 (+.f64 x 4)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 4) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 x 4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y (+.f64 x 4)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 x 4) y)) 1))))))"]],"rules":[["egg-rr",37],["egg-rr",125],["egg-rr",28]],"stop":[["node limit",1]],"time":60.134033203125,"type":"rewrite"},{"count":[[286,208]],"egraph":[[9,3857,790,0.04713587600000001],[8,3857,790,0.039608251000000004],[7,3782,790,0.033674751],[6,3598,790,0.027410876],[5,2882,790,0.020162876],[4,1260,790,0.011510667],[3,537,1042,0.004664917],[2,217,1042,0.00173725],[1,96,1042,0.0006652919999999999],[0,34,1102,0.000234542]],"inputs":[["(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(/.f64 z (/.f64 y x))","(*.f64 z (/.f64 x y))","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x)","(*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)))","(-.f64 (/.f64 x y) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 x y) (-.f64 1 z))","(*.f64 x (/.f64 (-.f64 1 z) y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)))","(-.f64 (/.f64 x y) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 x y) (-.f64 1 z))","(*.f64 x (/.f64 (-.f64 1 z) y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(neg.f64 (*.f64 (/.f64 z y) x))","(*.f64 x (/.f64 (neg.f64 z) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(neg.f64 (*.f64 (/.f64 z y) x))","(*.f64 x (/.f64 (neg.f64 z) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (/.f64 4 y) (*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y))))","(fma.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)) (/.f64 4 y))","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(/.f64 (+.f64 4 x) y)","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)"]],"stop":[["saturated",1]],"time":77.862060546875,"type":"simplify"},{"compiler":[[4264,2086]],"time":39.221923828125,"type":"eval"},{"alts":[["(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z))))","next",1.3021547300709377],["(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","fresh",2.84375],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 1 (/.f64 y (*.f64 x z)))))","fresh",2.857753759768442],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))","fresh",3.59765625],["(fabs.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z)))","fresh",1.3060609800709377],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 3)))","fresh",1.3569185972922417]],"compiler":[[17,12],[12,8],[17,12],[15,10],[17,12],[18,13],[17,12],[12,8],[17,12],[15,10],[17,12],[18,13]],"count":[[210,6]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[208,5],"picked":[1,0]}],"min-error":[0],"time":56.835205078125,"type":"prune"},{"compiler":[[52,23]],"locations":[["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))",0.078125,true],["(*.f64 (/.f64 x y) (neg.f64 z))",3.027047889472936,true]],"time":10.202880859375,"type":"localize"},{"count":[[2,72]],"series":[["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","z","-inf",0.19580078125],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","z","inf",0.177978515625],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","z","0",0.260986328125],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","x","-inf",0.27099609375],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","x","inf",0.260009765625],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","x","0",0.27001953125],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","y","-inf",1.174072265625],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","y","inf",0.176025390625],["(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))","y","0",0.288818359375],["(*.f64 (/.f64 x y) (neg.f64 z))","z","-inf",0.154052734375],["(*.f64 (/.f64 x y) (neg.f64 z))","z","inf",0.17919921875],["(*.f64 (/.f64 x y) (neg.f64 z))","z","0",0.22412109375],["(*.f64 (/.f64 x y) (neg.f64 z))","y","-inf",0.170166015625],["(*.f64 (/.f64 x y) (neg.f64 z))","y","inf",0.151123046875],["(*.f64 (/.f64 x y) (neg.f64 z))","y","0",0.27880859375],["(*.f64 (/.f64 x y) (neg.f64 z))","x","-inf",0.157958984375],["(*.f64 (/.f64 x y) (neg.f64 z))","x","inf",0.159912109375],["(*.f64 (/.f64 x y) (neg.f64 z))","x","0",0.31103515625]],"time":5.080078125,"type":"series"},{"count":[[2,215]],"egraph":[[2,3430,21,0.027020376],[1,259,23,0.004608001],[0,12,28,0.000344084]],"inputs":[["(*.f64 (/.f64 x y) (neg.f64 z))","(fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (/.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (/.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 x z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (/.f64 y z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (fma.f64 z (/.f64 x y) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (fma.f64 (neg.f64 (/.f64 x y)) z (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (fma.f64 -1 (/.f64 x (/.f64 y z)) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (fma.f64 (/.f64 x (/.f64 y z)) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2)) (cbrt.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x (/.f64 y z)))) (sqrt.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x 4) y) 1) (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (/.f64 1 y) z) x))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 y) z)) x (*.f64 (*.f64 (/.f64 1 y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 x y))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 x y)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 x y))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 x y)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z)) (sqrt.f64 (/.f64 x y)) (*.f64 (*.f64 (sqrt.f64 (/.f64 x y)) z) (sqrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 x (/.f64 y z)) -1))) (fma.f64 (/.f64 x (/.f64 y z)) -1 (*.f64 (/.f64 x (/.f64 y z)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 x z)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 x z) (*.f64 (/.f64 1 y) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 z (neg.f64 (/.f64 x y))))) (fma.f64 z (neg.f64 (/.f64 x y)) (*.f64 z (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (cbrt.f64 z)) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (cbrt.f64 z) (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z))))) (fma.f64 (neg.f64 (sqrt.f64 z)) (*.f64 (/.f64 x y) (sqrt.f64 z)) (*.f64 (sqrt.f64 z) (*.f64 (/.f64 x y) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 z (*.f64 (/.f64 x y) -1)))) (fma.f64 z (*.f64 (/.f64 x y) -1) (*.f64 z (*.f64 (/.f64 x y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x y))) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (*.f64 z (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 2) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 y) (sqrt.f64 (+.f64 x 4))) (sqrt.f64 (+.f64 x 4)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (*.f64 z (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 (/.f64 x y)) (*.f64 z (sqrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) 2) (cbrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (sqrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) (pow.f64 (/.f64 x (/.f64 y z)) 3)) (+.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (-.f64 (pow.f64 (/.f64 x (/.f64 y z)) 2) (*.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2) (pow.f64 (/.f64 x (/.f64 y z)) 2)) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (+.f64 x 4) y)) (pow.f64 (exp.f64 z) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (+.f64 x 4) y)) (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (/.f64 x y)) (exp.f64 (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z)))) (exp.f64 (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (+.f64 x 4) y)) (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) 1))))))"]],"rules":[["egg-rr",184],["egg-rr",31]],"stop":[["node limit",1]],"time":67.472900390625,"type":"rewrite"},{"count":[[287,230]],"egraph":[[9,3442,703,0.043843625000000004],[8,3442,703,0.036204167],[7,3428,703,0.030170084],[6,3020,703,0.024001500999999998],[5,2116,703,0.016508626],[4,921,703,0.007579084],[3,476,712,0.003304667],[2,206,742,0.001504542],[1,92,772,0.000635542],[0,36,806,0.000225792]],"inputs":[["(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 4 y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(/.f64 4 y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (+.f64 (/.f64 1 y) (neg.f64 (/.f64 z y))))","(*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)))","(-.f64 (/.f64 x y) (*.f64 z (/.f64 x y)))","(/.f64 (fma.f64 z (neg.f64 x) x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x))","(*.f64 x (+.f64 (/.f64 1 y) (neg.f64 (/.f64 z y))))","(*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)))","(-.f64 (/.f64 x y) (*.f64 z (/.f64 x y)))","(/.f64 (fma.f64 z (neg.f64 x) x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (/.f64 4 y) (/.f64 x y))","(/.f64 (+.f64 x 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (fma.f64 -1 (*.f64 z x) x)) y)","(/.f64 (+.f64 x (-.f64 4 (*.f64 z x))) y)","(/.f64 (fma.f64 (fma.f64 -1 z 1) x 4) y)","(/.f64 (fma.f64 x (-.f64 1 z) 4) y)","(/.f64 (-.f64 x (fma.f64 z x -4)) y)"]],"stop":[["saturated",1]],"time":72.43505859375,"type":"simplify"},{"compiler":[[7643,3272]],"time":57.011962890625,"type":"eval"},{"alts":[["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))","fresh",3.59765625],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))","fresh",1.3165285582184734],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))))","fresh",1.310801523933272],["(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z))))","done",1.3021547300709377],["(fabs.f64 (/.f64 (-.f64 x (fma.f64 z x -4)) y))","fresh",2.84375],["(fabs.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z)))","next",1.3060609800709377],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1)))))","fresh",3.849941259768442]],"compiler":[[15,10],[53,24],[47,26],[17,12],[12,8],[17,12],[35,22],[15,10],[53,24],[47,26],[12,8],[17,12],[35,22]],"count":[[236,7]],"kept":[{"done":[0,0],"fresh":[5,1],"new":[230,5],"picked":[1,1]}],"min-error":[0],"time":70.5810546875,"type":"prune"},{"compiler":[[58,30]],"locations":[["(/.f64 y (+.f64 x 4))",0.01171875,true],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))",0.0234375,true],["(pow.f64 (/.f64 y (+.f64 x 4)) -1)",0.12109375,true],["(*.f64 (/.f64 x y) z)",3.027047889472936,false]],"time":12.4990234375,"type":"localize"},{"count":[[3,84]],"series":[["(/.f64 y (+.f64 x 4))","x","-inf",0.23291015625],["(/.f64 y (+.f64 x 4))","x","inf",0.27197265625],["(/.f64 y (+.f64 x 4))","x","0",0.260986328125],["(/.f64 y (+.f64 x 4))","y","-inf",0.147216796875],["(/.f64 y (+.f64 x 4))","y","inf",0.156982421875],["(/.f64 y (+.f64 x 4))","y","0",0.14501953125],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","z","-inf",0.196044921875],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","z","inf",0.18115234375],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","z","0",0.448974609375],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","x","-inf",0.18798828125],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","x","inf",0.191162109375],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","x","0",0.16796875],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","y","-inf",0.195068359375],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","y","inf",0.1708984375],["(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","y","0",0.18994140625],["(pow.f64 (/.f64 y (+.f64 x 4)) -1)","x","-inf",0.718017578125],["(pow.f64 (/.f64 y (+.f64 x 4)) -1)","x","inf",0.7158203125],["(pow.f64 (/.f64 y (+.f64 x 4)) -1)","x","0",0.780029296875],["(pow.f64 (/.f64 y (+.f64 x 4)) -1)","y","-inf",0.623046875],["(pow.f64 (/.f64 y (+.f64 x 4)) -1)","y","inf",0.476806640625],["(pow.f64 (/.f64 y (+.f64 x 4)) -1)","y","0",0.675048828125]],"time":7.391845703125,"type":"series"},{"count":[[3,211]],"egraph":[[2,3987,30,0.030474500999999998],[1,278,30,0.005554667],[0,12,36,0.00035975]],"inputs":[["(pow.f64 (/.f64 y (+.f64 x 4)) -1)","(-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z))","(/.f64 y (+.f64 x 4))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 x 4) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 4) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 4) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (+.f64 x 4)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 y y))) (/.f64 (+.f64 x 4) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (+.f64 x 4) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) 1) (/.f64 (sqrt.f64 (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (cbrt.f64 (*.f64 y y))) (/.f64 (cbrt.f64 (+.f64 x 4)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 (*.f64 y y))) (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (sqrt.f64 y)) (/.f64 (cbrt.f64 (+.f64 x 4)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (/.f64 (sqrt.f64 (+.f64 x 4)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 y)) (fma.f64 -1 x -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x 4) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 y (+.f64 x 4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (/.f64 y (cbrt.f64 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 x 4)) (/.f64 y (sqrt.f64 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 x -4) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 64 (pow.f64 x 3)) (*.f64 y (-.f64 (fma.f64 x x 16) (*.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 y) (/.f64 1 (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -16) (*.f64 y (+.f64 x -4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) 2)) (cbrt.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x 4) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x 4) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x 4) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x 4) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 x 4) y)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (/.f64 (neg.f64 x) y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2) (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2)) (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3))) (neg.f64 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2))) (neg.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (*.f64 (/.f64 y (+.f64 x 4)) (*.f64 x z))) (*.f64 (/.f64 y (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 3)) (+.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (-.f64 (pow.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 2) (*.f64 (/.f64 (+.f64 x 4) y) (*.f64 z (/.f64 (neg.f64 x) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 2)) (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 z (/.f64 (neg.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2)) (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (pow.f64 (exp.f64 z) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (+.f64 x 4) y)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (exp.f64 (*.f64 z (/.f64 (neg.f64 x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (+.f64 x 4) y)) (/.f64 1 (pow.f64 (exp.f64 z) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y))) (/.f64 1 (pow.f64 (exp.f64 z) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 z (/.f64 (neg.f64 x) y))) (exp.f64 (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 z) (/.f64 x y))) (exp.f64 (/.f64 (+.f64 x 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 z (/.f64 (neg.f64 x) y))) (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 z) (/.f64 x y))) (+.f64 1 (expm1.f64 (/.f64 (+.f64 x 4) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 4) (/.f64 1 y) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 4) (/.f64 1 y) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (/.f64 x y) z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 4) y) 1 (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 4) y) 1 (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (neg.f64 z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 (neg.f64 x) y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 1 (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 1 (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 x 4) y) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 x 4) y) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (/.f64 (neg.f64 x) y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2) (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2) (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 2) (cbrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 x y) z)) (neg.f64 (sqrt.f64 (*.f64 (/.f64 x y) z))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (sqrt.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2))) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -3) (pow.f64 (*.f64 (/.f64 x y) z) 3)) (/.f64 1 (fma.f64 (*.f64 (/.f64 x y) z) (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y)) (pow.f64 (/.f64 y (+.f64 x 4)) -2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (+.f64 x 4)) -1) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (+.f64 x 4)) -1) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -2) (pow.f64 (*.f64 (/.f64 x y) z) 2)) (/.f64 1 (fma.f64 (/.f64 x y) z (/.f64 (+.f64 x 4) y))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 x) y) z (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 (neg.f64 x) y))) 2) (cbrt.f64 (*.f64 z (/.f64 (neg.f64 x) y))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (/.f64 (neg.f64 x) y))) (sqrt.f64 (*.f64 z (/.f64 (neg.f64 x) y))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 (/.f64 x y) z))) (sqrt.f64 (*.f64 (/.f64 x y) z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (*.f64 y y))) (/.f64 (+.f64 x 4) (cbrt.f64 y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (*.f64 y y))) (/.f64 (+.f64 x 4) (cbrt.f64 y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (+.f64 x 4) (sqrt.f64 y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (+.f64 x 4) (sqrt.f64 y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x 4)) y) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x 4)) y) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) 1) (/.f64 (sqrt.f64 (+.f64 x 4)) y) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) 1) (/.f64 (sqrt.f64 (+.f64 x 4)) y) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (cbrt.f64 (*.f64 y y))) (/.f64 (cbrt.f64 (+.f64 x 4)) (cbrt.f64 y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (cbrt.f64 (*.f64 y y))) (/.f64 (cbrt.f64 (+.f64 x 4)) (cbrt.f64 y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 (*.f64 y y))) (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 (*.f64 y y))) (/.f64 (sqrt.f64 (+.f64 x 4)) (cbrt.f64 y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (sqrt.f64 y)) (/.f64 (cbrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) (sqrt.f64 y)) (/.f64 (cbrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (/.f64 (sqrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (/.f64 (sqrt.f64 (+.f64 x 4)) (sqrt.f64 y)) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (neg.f64 y)) (fma.f64 -1 x -4) (*.f64 z (/.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (neg.f64 y)) (fma.f64 -1 x -4) (*.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (fma.f64 (/.f64 (neg.f64 x) y) z (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (fma.f64 (*.f64 z (/.f64 (neg.f64 x) y)) 1 (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x 4) y)) (sqrt.f64 (*.f64 (/.f64 x y) z))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 x y) z))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2)) (*.f64 (/.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) z) 2))) (cbrt.f64 (*.f64 (/.f64 x y) z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (neg.f64 x) y) 1) z (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (neg.f64 x) y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (neg.f64 x) y) (sqrt.f64 z)) (sqrt.f64 z) (/.f64 (+.f64 x 4) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 y (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 y (+.f64 x 4)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 y (+.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (+.f64 x 4))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (+.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 y (+.f64 x 4)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 x 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (/.f64 1 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) (pow.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) 2) (cbrt.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (+.f64 x 4))) (sqrt.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (fma.f64 -1 x -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 4)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (/.f64 y (cbrt.f64 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 x 4))) (/.f64 y (sqrt.f64 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (+.f64 x 4))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 64 (pow.f64 x 3))) (-.f64 (fma.f64 x x 16) (*.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (fma.f64 x x -16)) (+.f64 x -4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 x 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 4) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 x 4)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 x 4))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (+.f64 x 4))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) (pow.f64 (+.f64 x 4) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (+.f64 x 4) y) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (fma.f64 -1 x -4)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 y (+.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 x 4)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (+.f64 x 4) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (+.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (+.f64 x 4))) 1))))))"]],"rules":[["egg-rr",40],["egg-rr",125],["egg-rr",46]],"stop":[["node limit",1]],"time":63.5380859375,"type":"rewrite"},{"count":[[295,242]],"egraph":[[4,4957,805,0.024601],[3,1335,812,0.011607917],[2,463,894,0.003455042],[1,185,915,0.001194417],[0,69,919,0.000356334]],"inputs":[["(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(*.f64 1/4 y)","(+.f64 (*.f64 -1/16 (*.f64 y x)) (*.f64 1/4 y))","(+.f64 (*.f64 -1/16 (*.f64 y x)) (+.f64 (*.f64 1/64 (*.f64 y (pow.f64 x 2))) (*.f64 1/4 y)))","(+.f64 (*.f64 -1/256 (*.f64 y (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (*.f64 y x)) (+.f64 (*.f64 1/64 (*.f64 y (pow.f64 x 2))) (*.f64 1/4 y))))","(/.f64 y x)","(+.f64 (/.f64 y x) (*.f64 -4 (/.f64 y (pow.f64 x 2))))","(+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3)))))","(+.f64 (*.f64 -64 (/.f64 y (pow.f64 x 4))) (+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3))))))","(/.f64 y x)","(+.f64 (/.f64 y x) (*.f64 -4 (/.f64 y (pow.f64 x 2))))","(+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3)))))","(+.f64 (*.f64 -64 (/.f64 y (pow.f64 x 4))) (+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x)","(*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)))","(-.f64 (/.f64 x y) (/.f64 z (/.f64 y x)))","(-.f64 (/.f64 x y) (*.f64 x (/.f64 z y)))","(*.f64 (/.f64 x y) (-.f64 1 z))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 (/.f64 1 y) (/.f64 z y)))","(-.f64 (/.f64 x y) (/.f64 z (/.f64 y x)))","(-.f64 (/.f64 x y) (*.f64 x (/.f64 z y)))","(*.f64 (/.f64 x y) (-.f64 1 z))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(/.f64 (neg.f64 (*.f64 x z)) y)","(/.f64 (*.f64 x (neg.f64 z)) y)","(neg.f64 (/.f64 z (/.f64 y x)))","(*.f64 x (/.f64 (neg.f64 z) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(/.f64 (neg.f64 (*.f64 x z)) y)","(/.f64 (*.f64 x (neg.f64 z)) y)","(neg.f64 (/.f64 z (/.f64 y x)))","(*.f64 x (/.f64 (neg.f64 z) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 4 (-.f64 x (*.f64 x z))) y)","(/.f64 (-.f64 x (fma.f64 x z -4)) y)","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(/.f64 y (+.f64 4 x))","(*.f64 1/4 y)","(*.f64 y 1/4)","(+.f64 (*.f64 -1/16 (*.f64 y x)) (*.f64 1/4 y))","(fma.f64 -1/16 (*.f64 x y) (*.f64 y 1/4))","(*.f64 y (+.f64 1/4 (*.f64 x -1/16)))","(*.f64 y (fma.f64 x -1/16 1/4))","(+.f64 (*.f64 -1/16 (*.f64 y x)) (+.f64 (*.f64 1/64 (*.f64 y (pow.f64 x 2))) (*.f64 1/4 y)))","(fma.f64 -1/16 (*.f64 x y) (fma.f64 1/64 (*.f64 y (*.f64 x x)) (*.f64 y 1/4)))","(fma.f64 -1/16 (*.f64 x y) (fma.f64 y 1/4 (*.f64 (*.f64 x x) (*.f64 y 1/64))))","(fma.f64 (*.f64 x x) (*.f64 y 1/64) (*.f64 y (+.f64 1/4 (*.f64 x -1/16))))","(*.f64 y (+.f64 (*.f64 x (+.f64 -1/16 (*.f64 x 1/64))) 1/4))","(+.f64 (*.f64 -1/256 (*.f64 y (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (*.f64 y x)) (+.f64 (*.f64 1/64 (*.f64 y (pow.f64 x 2))) (*.f64 1/4 y))))","(fma.f64 -1/256 (*.f64 y (pow.f64 x 3)) (fma.f64 -1/16 (*.f64 x y) (fma.f64 1/64 (*.f64 y (*.f64 x x)) (*.f64 y 1/4))))","(fma.f64 -1/256 (*.f64 y (pow.f64 x 3)) (fma.f64 -1/16 (*.f64 x y) (fma.f64 y 1/4 (*.f64 (*.f64 x x) (*.f64 y 1/64)))))","(fma.f64 y (*.f64 -1/256 (pow.f64 x 3)) (fma.f64 (*.f64 x x) (*.f64 y 1/64) (*.f64 y (+.f64 1/4 (*.f64 x -1/16)))))","(fma.f64 y (fma.f64 x -1/16 1/4) (*.f64 (*.f64 y (*.f64 x x)) (+.f64 1/64 (*.f64 x -1/256))))","(*.f64 y (+.f64 (fma.f64 x -1/16 1/4) (*.f64 (*.f64 x x) (+.f64 1/64 (*.f64 x -1/256)))))","(/.f64 y x)","(+.f64 (/.f64 y x) (*.f64 -4 (/.f64 y (pow.f64 x 2))))","(+.f64 (/.f64 y x) (*.f64 -4 (/.f64 y (*.f64 x x))))","(fma.f64 -4 (/.f64 (/.f64 y x) x) (/.f64 y x))","(*.f64 (+.f64 (/.f64 -4 x) 1) (/.f64 y x))","(*.f64 (/.f64 y x) (+.f64 1 (/.f64 -4 x)))","(+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3)))))","(+.f64 (/.f64 y x) (fma.f64 -4 (/.f64 y (*.f64 x x)) (*.f64 16 (/.f64 y (pow.f64 x 3)))))","(+.f64 (fma.f64 -4 (/.f64 (/.f64 y x) x) (/.f64 y x)) (/.f64 16 (/.f64 (pow.f64 x 3) y)))","(+.f64 (/.f64 y x) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 (/.f64 16 x) -4)))","(fma.f64 (/.f64 y (*.f64 x x)) (+.f64 -4 (/.f64 16 x)) (/.f64 y x))","(+.f64 (*.f64 -64 (/.f64 y (pow.f64 x 4))) (+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3))))))","(fma.f64 -64 (/.f64 y (pow.f64 x 4)) (+.f64 (/.f64 y x) (fma.f64 -4 (/.f64 y (*.f64 x x)) (*.f64 16 (/.f64 y (pow.f64 x 3))))))","(+.f64 (fma.f64 -4 (/.f64 (/.f64 y x) x) (/.f64 16 (/.f64 (pow.f64 x 3) y))) (fma.f64 -64 (/.f64 y (pow.f64 x 4)) (/.f64 y x)))","(+.f64 (/.f64 y x) (fma.f64 -64 (/.f64 y (pow.f64 x 4)) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 (/.f64 16 x) -4))))","(fma.f64 (+.f64 1 (/.f64 -4 x)) (/.f64 y x) (*.f64 (/.f64 y (pow.f64 x 3)) (+.f64 16 (/.f64 -64 x))))","(/.f64 y x)","(+.f64 (/.f64 y x) (*.f64 -4 (/.f64 y (pow.f64 x 2))))","(+.f64 (/.f64 y x) (*.f64 -4 (/.f64 y (*.f64 x x))))","(fma.f64 -4 (/.f64 (/.f64 y x) x) (/.f64 y x))","(*.f64 (+.f64 (/.f64 -4 x) 1) (/.f64 y x))","(*.f64 (/.f64 y x) (+.f64 1 (/.f64 -4 x)))","(+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3)))))","(+.f64 (/.f64 y x) (fma.f64 -4 (/.f64 y (*.f64 x x)) (*.f64 16 (/.f64 y (pow.f64 x 3)))))","(+.f64 (fma.f64 -4 (/.f64 (/.f64 y x) x) (/.f64 y x)) (/.f64 16 (/.f64 (pow.f64 x 3) y)))","(+.f64 (/.f64 y x) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 (/.f64 16 x) -4)))","(fma.f64 (/.f64 y (*.f64 x x)) (+.f64 -4 (/.f64 16 x)) (/.f64 y x))","(+.f64 (*.f64 -64 (/.f64 y (pow.f64 x 4))) (+.f64 (/.f64 y x) (+.f64 (*.f64 -4 (/.f64 y (pow.f64 x 2))) (*.f64 16 (/.f64 y (pow.f64 x 3))))))","(fma.f64 -64 (/.f64 y (pow.f64 x 4)) (+.f64 (/.f64 y x) (fma.f64 -4 (/.f64 y (*.f64 x x)) (*.f64 16 (/.f64 y (pow.f64 x 3))))))","(+.f64 (fma.f64 -4 (/.f64 (/.f64 y x) x) (/.f64 16 (/.f64 (pow.f64 x 3) y))) (fma.f64 -64 (/.f64 y (pow.f64 x 4)) (/.f64 y x)))","(+.f64 (/.f64 y x) (fma.f64 -64 (/.f64 y (pow.f64 x 4)) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 (/.f64 16 x) -4))))","(fma.f64 (+.f64 1 (/.f64 -4 x)) (/.f64 y x) (*.f64 (/.f64 y (pow.f64 x 3)) (+.f64 16 (/.f64 -64 x))))"]],"stop":[["node limit",1]],"time":48.123046875,"type":"simplify"},{"compiler":[[5771,2889]],"time":54.18994140625,"type":"eval"},{"alts":[["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))","fresh",3.59765625],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))","fresh",1.3165285582184734],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))))","next",1.310801523933272],["(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z))))","done",1.3021547300709377],["(fabs.f64 (/.f64 (-.f64 x (fma.f64 z x -4)) y))","fresh",2.84375],["(fabs.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z)))","done",1.3060609800709377],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1)))))","fresh",3.849941259768442]],"compiler":[[15,10],[53,24],[47,26],[17,12],[12,8],[17,12],[35,22],[15,10],[53,24],[47,26],[12,8],[35,22]],"count":[[279,7]],"kept":[{"done":[1,1],"fresh":[5,5],"new":[272,0],"picked":[1,1]}],"min-error":[0],"time":92.868896484375,"type":"prune"},{"compiler":[[190,85]],"locations":[["(/.f64 z (cbrt.f64 y))",0.2578125,true],["(pow.f64 (cbrt.f64 y) 2)",0.47103500976844204,true],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))",3.1248378459626562,true],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))",47.69150892584148,true]],"time":36.51513671875,"type":"localize"},{"count":[[4,75]],"series":[["(/.f64 z (cbrt.f64 y))","y","-inf",0.337158203125],["(/.f64 z (cbrt.f64 y))","y","inf",0.4931640625],["(/.f64 z (cbrt.f64 y))","y","0",0.235107421875],["(/.f64 z (cbrt.f64 y))","z","-inf",0.1669921875],["(/.f64 z (cbrt.f64 y))","z","inf",0.14306640625],["(/.f64 z (cbrt.f64 y))","z","0",0.1630859375],["(pow.f64 (cbrt.f64 y) 2)","y","-inf",0.47314453125],["(pow.f64 (cbrt.f64 y) 2)","y","inf",0.343017578125],["(pow.f64 (cbrt.f64 y) 2)","y","0",0.35595703125],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","x","-inf",0.14208984375],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","x","inf",0.158935546875],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","x","0",0.143798828125],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","y","-inf",1.324951171875],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","y","inf",0.357177734375],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","y","0",0.8701171875],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","z","-inf",0.159912109375],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","z","inf",0.14306640625],["(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","z","0",0.14794921875],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","x","-inf",0.594970703125],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","x","inf",0.59814453125],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","x","0",3.402099609375],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","y","-inf",0.93505859375],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","y","inf",0.535888671875],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","y","0",0.756103515625],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","z","-inf",0.615966796875],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","z","inf",0.5859375],["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","z","0",6.364990234375]],"time":20.89892578125,"type":"series"},{"count":[[4,719]],"egraph":[[2,3608,35,0.027341125],[1,263,35,0.004977208],[0,12,65,0.000316458]],"inputs":[["(fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))","(*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))","(pow.f64 (cbrt.f64 y) 2)","(/.f64 z (cbrt.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2)) (cbrt.f64 (/.f64 z (/.f64 y x))) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (/.f64 y x)))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (/.f64 y x)))) (sqrt.f64 (/.f64 z (/.f64 y x))) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z))) (fma.f64 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) z (*.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x))) (fma.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y)))) x (*.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))) (fma.f64 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 y) (*.f64 z x)))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 1 y) (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 z (/.f64 y x)) -1))) (fma.f64 (/.f64 z (/.f64 y x)) -1 (*.f64 (/.f64 z (/.f64 y x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 y))) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (*.f64 (/.f64 z (cbrt.f64 y)) x) (*.f64 (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 z (cbrt.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y))) (/.f64 z 1) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y)))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6))))) (fma.f64 (neg.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6))) (/.f64 z (pow.f64 y 1/6)) (*.f64 (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1)))) (fma.f64 (neg.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (/.f64 z (cbrt.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (fma.f64 (neg.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (*.f64 (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 y)) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 z (cbrt.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (/.f64 y x)) 1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 2) (cbrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (*.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2) (*.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) (sqrt.f64 (/.f64 z (/.f64 y x))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z x) (/.f64 1 y) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 z (/.f64 y x)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (/.f64 1 (cbrt.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z 1) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (cbrt.f64 (cbrt.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (pow.f64 y 1/6)) (/.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 y 1/6)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 y)) (/.f64 x (cbrt.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) 1) (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (/.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (/.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 2)) (cbrt.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (sqrt.f64 x) (cbrt.f64 y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (*.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))) (cbrt.f64 (exp.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))))) (log.f64 (cbrt.f64 (exp.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (+.f64 (/.f64 z (cbrt.f64 y)) (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))) 2) (cbrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))) (sqrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 z (/.f64 y x)) 3) (pow.f64 (/.f64 z (/.f64 y x)) 3)) (+.f64 (pow.f64 (/.f64 z (/.f64 y x)) 2) (-.f64 (pow.f64 (/.f64 z (/.f64 y x)) 2) (pow.f64 (/.f64 z (/.f64 y x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 z (/.f64 y x)) 2) (pow.f64 (/.f64 z (/.f64 y x)) 2)) (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 z (/.f64 y x))) (exp.f64 (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x)))) (exp.f64 (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 z (/.f64 y x))) (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x)))) (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x)))) (exp.f64 (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 z (/.f64 y x))) (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x)))) (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (/.f64 z (/.f64 y x)) (/.f64 z (/.f64 y x)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 z (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 z (/.f64 y x)))) (cbrt.f64 (exp.f64 (/.f64 z (/.f64 y x)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (/.f64 y x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 z (/.f64 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (*.f64 (cbrt.f64 y) (/.f64 (pow.f64 (cbrt.f64 y) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 (cbrt.f64 y) (*.f64 x (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 z (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 y) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (/.f64 (cbrt.f64 y) z) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 (cbrt.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (/.f64 (cbrt.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) x) (/.f64 (cbrt.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 y) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (/.f64 z (cbrt.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 z) (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) x) (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (/.f64 (cbrt.f64 y) z) (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x)) (neg.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) x) (*.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) 1) (*.f64 (cbrt.f64 y) (/.f64 (pow.f64 (cbrt.f64 y) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) 1) (*.f64 (neg.f64 (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 y) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (neg.f64 x)) (*.f64 (cbrt.f64 y) (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (neg.f64 x)) (*.f64 (neg.f64 (cbrt.f64 y)) (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (neg.f64 x)) (*.f64 (cbrt.f64 y) (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) z) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (cbrt.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 z)) (*.f64 (pow.f64 (cbrt.f64 y) 2) (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (neg.f64 z)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (pow.f64 y 1/6)) (pow.f64 y 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) 1) (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 z (cbrt.f64 y)) x) (cbrt.f64 (*.f64 y (cbrt.f64 y)))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (*.f64 x (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 z (cbrt.f64 y))) (neg.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (neg.f64 x)) (neg.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) (neg.f64 z)) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (/.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z (/.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z (/.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 z (/.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) x) (/.f64 (cbrt.f64 y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) (*.f64 z (*.f64 x (pow.f64 (cbrt.f64 y) -2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (/.f64 z (cbrt.f64 y)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 z (/.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (exp.f64 (/.f64 z (/.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 z (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z (/.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 z (cbrt.f64 y)) 3) (pow.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x (pow.f64 (cbrt.f64 y) -2)) 3) (pow.f64 (/.f64 z (cbrt.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 z (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (/.f64 y x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2))) (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) (cbrt.f64 (*.f64 y (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) (*.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (pow.f64 y 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 1/6) (*.f64 (pow.f64 y 1/6) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 y (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 y)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 z (cbrt.f64 y)))) (cbrt.f64 (exp.f64 (/.f64 z (cbrt.f64 y)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (cbrt.f64 y))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 z (cbrt.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 1 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (neg.f64 (/.f64 1 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (cbrt.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2) (neg.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) (/.f64 1 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (/.f64 1 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 1 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 1 (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 z (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 y 1/6)) (/.f64 z (pow.f64 y 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 y 1/6)) (/.f64 (cbrt.f64 z) (pow.f64 y 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (/.f64 z (cbrt.f64 y)))) (sqrt.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z (cbrt.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 z (cbrt.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cbrt.f64 y) z) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 z (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 z (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 z (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z (cbrt.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 z 3) y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (cbrt.f64 y))) 1))))))"]],"rules":[["egg-rr",51],["egg-rr",21],["egg-rr",69],["egg-rr",578]],"stop":[["node limit",1]],"time":171.069091796875,"type":"rewrite"},{"count":[[794,727]],"egraph":[[8,7673,405,0.045986209],[7,6606,405,0.036932124999999996],[6,4543,405,0.026900042],[5,2270,405,0.016185042],[4,972,405,0.007138417],[3,566,405,0.0033749590000000003],[2,282,405,0.0017371670000000002],[1,98,477,0.0007343340000000001],[0,31,741,0.000225125]],"inputs":[["(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (/.f64 x y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x y)))) z)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 z (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 x y)) (*.f64 -1 (/.f64 x y)))))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 z y))) (/.f64 z y)) x)","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 (pow.f64 1 1/3) (/.f64 z y))) x))","(*.f64 (+.f64 (/.f64 x y) (neg.f64 (/.f64 x y))) z)","(*.f64 z 0)","0","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 x y) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 y)))"]],"stop":[["node limit",1]],"time":92.40185546875,"type":"simplify"},{"compiler":[[63926,27938]],"time":443.26220703125,"type":"eval"},{"alts":[["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))","fresh",3.59765625],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))","fresh",1.3165285582184734],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))))","done",1.310801523933272],["(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z))))","done",1.3021547300709377],["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (/.f64 z (/.f64 y x)))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))))","fresh",1.7072172644611232],["(fabs.f64 (/.f64 (-.f64 x (fma.f64 z x -4)) y))","fresh",2.84375],["(fabs.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z)))","done",1.3060609800709377]],"compiler":[[15,10],[53,24],[47,26],[17,12],[41,24],[12,8],[17,12]],"count":[[950,7]],"kept":[{"done":[2,2],"fresh":[4,3],"new":[943,1],"picked":[1,1]}],"min-error":[0],"time":1036.65380859375,"type":"prune"},{"accuracy":[0.09603500976844201],"baseline":[1.2552797300709377],"branch":[["x",1.2552797300709377,1],["y",1.2552797300709377,1],["z",1.2552797300709377,1],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))",0.09603500976844201,2],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))",1.2552797300709377,1]],"compiler":[[4,3],[4,3],[4,3],[15,10],[14,9],[278,144]],"count":[[13,2]],"inputs":[["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (/.f64 z (/.f64 y x)))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))","(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (*.f64 (cbrt.f64 (/.f64 x y)) z) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))","(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (pow.f64 (cbrt.f64 y) 2))))))","(fabs.f64 (/.f64 (-.f64 x (fma.f64 z x -4)) y))","(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1)))))","(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 x 4) (*.f64 (/.f64 x y) (neg.f64 z))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 1 (/.f64 y (*.f64 x z)))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (/.f64 x (/.f64 y z))))","(fabs.f64 (-.f64 (pow.f64 (/.f64 y (+.f64 x 4)) -1) (*.f64 (/.f64 x y) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) z)) 3)))","(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))"]],"link":["."],"name":["fabs fraction 1"],"oracle":[8.008674944976663],"outputs":[["(fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1)))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))"]],"time":36.56298828125,"times":[["x",5.3759765625],["y",5.35498046875],["z",5.200927734375],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))",10.56689453125],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))",5.535888671875]],"type":"regimes"},{"bstep":[[1.713965620839339e+55,2.904008730769369e+59,0.079833984375]],"compiler":[[6,5],[15,10]],"method":["left-value"],"time":0.231201171875,"type":"bsearch"},{"compiler":[[56,31]],"egraph":[[6,107,80,0.000753917],[5,106,80,0.000633792],[4,102,80,0.000512375],[3,90,80,0.000387167],[2,75,80,0.00026037499999999997],[1,51,80,0.00015275],[0,25,80,6.5083e-5]],"inputs":[["(if (<=.f64 (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 20000000000000000204701340408171022992608776270649491456) (fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))) (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 20000000000000000204701340408171022992608776270649491456) (fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))) (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))","(if (<=.f64 (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 20000000000000000204701340408171022992608776270649491456) (fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 z y) (neg.f64 x))) (fma.f64 (/.f64 (neg.f64 z) y) x (*.f64 x (/.f64 z y))))) (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))","(if (<=.f64 (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))) 20000000000000000204701340408171022992608776270649491456) (fabs.f64 (+.f64 (fma.f64 1 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 (neg.f64 z) y))) (fma.f64 (/.f64 (neg.f64 z) y) x (*.f64 x (/.f64 z y))))) (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))))"]],"stop":[["fuel",1],["saturated",1]],"time":10.296875,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[56,31]],"remove-preprocessing":[[]],"time":16.099853515625,"type":"end"}]
[{"compiler":[[22,17]],"method":["search"],"sampling":[[12,0.03508763572426887,0.23976551078250397,0.7251468534932272],[11,0.023391757149512582,0.26120795483622383,0.7154002880142636],[10,0.0,0.3196873477100053,0.6803126522899947],[9,0.0,0.34307910485951787,0.6569208951404821],[8,0.0,0.34307910485951787,0.6569208951404821],[7,0.0,0.3742681143922013,0.6257318856077987],[6,0.0,0.9356702859805033,0.06432971401949672],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":75.613037109375,"type":"analyze"},{"outcomes":[["body",256,"invalid",73.310546875,918],["body",512,"valid",155.49609375,925],["body",1024,"valid",186.060791015625,549],["body",2048,"valid",2.03173828125,4],["body",256,"valid",531.638916015625,6778]],"time":958.06494140625,"type":"sample"},{"compiler":[[21,16]],"egraph":[[0,4,4,2.583e-6],[5,4926,161,0.022495667],[4,2259,161,0.011791875],[3,908,161,0.004717875],[2,293,161,0.00181425],[1,111,161,0.000595459],[0,48,168,0.000178125]],"inputs":[["0","1","2","3"],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 y 1) (log.f64 x)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 x)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 y)) (*.f64 (-.f64 x 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 t 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) x)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 z)) (*.f64 (-.f64 y 1) (log.f64 (-.f64 1 z)))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 t)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 t)))) y)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 t 1) (log.f64 (-.f64 1 y)))) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (+.f64 x -1) (log.f64 y))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","(fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (-.f64 y 1) (log.f64 x)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 x)))) t)","(-.f64 (fma.f64 (+.f64 y -1) (log.f64 x) (*.f64 (+.f64 z -1) (log.f64 (-.f64 1 x)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 x)) (*.f64 (+.f64 y -1) (log.f64 x))) t)","(-.f64 (+.f64 (*.f64 (-.f64 z 1) (log.f64 y)) (*.f64 (-.f64 x 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log.f64 y) (*.f64 (+.f64 x -1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 z -1))) t)","(fma.f64 (+.f64 x -1) (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) (+.f64 z -1) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (-.f64 t 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) x)","(-.f64 (fma.f64 (+.f64 t -1) (log.f64 y) (*.f64 (+.f64 z -1) (log.f64 (-.f64 1 y)))) x)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) (+.f64 t -1))) x)","(-.f64 (fma.f64 (log.f64 y) (+.f64 t -1) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) x)","(fma.f64 (log.f64 y) (+.f64 t -1) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 x)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 z)) (*.f64 (-.f64 y 1) (log.f64 (-.f64 1 z)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 z) (*.f64 (+.f64 y -1) (log.f64 (-.f64 1 z)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 z) (*.f64 (+.f64 y -1) (log1p.f64 (neg.f64 z)))) t)","(fma.f64 (+.f64 x -1) (log.f64 z) (-.f64 (*.f64 (+.f64 y -1) (log1p.f64 (neg.f64 z))) t))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 t)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 t)))) y)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 t) (*.f64 (+.f64 z -1) (log.f64 (-.f64 1 t)))) y)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 t)) (*.f64 (+.f64 x -1) (log.f64 t))) y)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 t) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 t)))) y)","(fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 t)) (fma.f64 (+.f64 x -1) (log.f64 t) (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 t 1) (log.f64 (-.f64 1 y)))) z)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (log.f64 (-.f64 1 y)) (+.f64 t -1))) z)","(fma.f64 (+.f64 x -1) (log.f64 y) (-.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 t -1)) z))","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 t -1))) z)","(fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 (neg.f64 y)) (+.f64 t -1) (neg.f64 z)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":47.757080078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,5982,23,0.07319220900000001],[11,5172,23,0.05986837500000001],[10,5162,23,0.04840020800000001],[9,5147,23,0.040987667000000005],[8,5020,23,0.033327417000000005],[7,4532,23,0.024614500000000004],[6,2548,23,0.015166917000000002],[5,1011,23,0.007880001000000001],[4,370,23,0.002567959],[3,162,23,0.000949751],[2,65,23,0.000428376],[1,31,23,0.000174334],[0,15,24,6.9417e-5]],"inputs":[["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (+.f64 z -1) (log.f64 (-.f64 1 y)))) t)","(fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (fma.f64 (-.f64 x 1) (log.f64 y) (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)))) t)","(-.f64 (fma.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y)) (*.f64 (+.f64 x -1) (log.f64 y))) t)","(-.f64 (*.f64 (+.f64 z -1) (log1p.f64 (neg.f64 y))) (fma.f64 (log.f64 y) (-.f64 1 x) t))","(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))"]],"stop":[["node limit",1]],"time":84.927001953125,"type":"simplify"},{"compiler":[[36,25]],"time":0.56201171875,"type":"eval"},{"alts":[["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","next",0.1328125]],"compiler":[[19,14],[19,14]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.1328125],"time":1.02001953125,"type":"prune"},{"compiler":[[52,26]],"locations":[["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)",0.01171875,true],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))",0.015625,true],["(*.f64 (+.f64 x -1) (log.f64 y))",0.17578125,true]],"time":12.801025390625,"type":"localize"},{"count":[[3,108]],"series":[["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","t","-inf",0.150146484375],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","t","inf",0.177001953125],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","t","0",0.156005859375],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","z","-inf",0.1650390625],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","z","inf",0.197021484375],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","z","0",0.175048828125],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","y","-inf",0.256103515625],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","y","inf",0.260986328125],["(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)","y","0",0.244873046875],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","t","-inf",0.263916015625],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","t","inf",0.2900390625],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","t","0",1.984130859375],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","z","-inf",0.287109375],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","z","inf",0.430908203125],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","z","0",2.075927734375],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","y","-inf",0.47705078125],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","y","inf",0.468017578125],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","y","0",0.347900390625],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","x","-inf",0.237060546875],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","x","inf",0.2080078125],["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","x","0",2.15087890625],["(*.f64 (+.f64 x -1) (log.f64 y))","y","-inf",9.845947265625],["(*.f64 (+.f64 x -1) (log.f64 y))","y","inf",6.115966796875],["(*.f64 (+.f64 x -1) (log.f64 y))","y","0",12.343017578125],["(*.f64 (+.f64 x -1) (log.f64 y))","x","-inf",0.316162109375],["(*.f64 (+.f64 x -1) (log.f64 y))","x","inf",0.35791015625],["(*.f64 (+.f64 x -1) (log.f64 y))","x","0",3.43798828125]],"time":43.906005859375,"type":"series"},{"count":[[3,168]],"egraph":[[2,4123,40,0.030159042],[1,314,40,0.00540375],[0,15,44,0.000376375]],"inputs":[["(*.f64 (+.f64 x -1) (log.f64 y))","(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 -1 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (log.f64 y)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (*.f64 (log.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) -1) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (+.f64 x -1)))) (log.f64 (sqrt.f64 (pow.f64 y (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (log.f64 y)) (-.f64 (fma.f64 x x 1) (*.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (log.f64 y)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (fma.f64 x x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (*.f64 -1 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 y) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (*.f64 (log.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) -1 (*.f64 (log.f64 y) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))) 2)) (log.f64 (cbrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))) (log.f64 (sqrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3))) (neg.f64 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))) (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 3)) (+.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (-.f64 (pow.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 2) (*.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 2)) (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (+.f64 1 (expm1.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (+.f64 1 (expm1.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (exp.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 y (+.f64 x -1)) (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 x -1) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 x -1) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1 (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (neg.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (*.f64 (sqrt.f64 (+.f64 x -1)) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (*.f64 (sqrt.f64 (+.f64 x -1)) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (sqrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))) (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 (+.f64 x -1))) (sqrt.f64 (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 (+.f64 x -1))) (sqrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 t (*.f64 (log1p.f64 y) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)) 3) (pow.f64 t 3)) (+.f64 (pow.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)) 2) (-.f64 (*.f64 t t) (*.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)) 2) (*.f64 t t)) (-.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 t) (exp.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 t)) (exp.f64 (*.f64 (log1p.f64 y) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 y) (-.f64 1 z))) (+.f64 1 (expm1.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))))"]],"rules":[["egg-rr",29],["egg-rr",111],["egg-rr",28]],"stop":[["node limit",1]],"time":64.90185546875,"type":"rewrite"},{"count":[[276,248]],"egraph":[[3,7063,1856,0.027571624],[2,1624,1894,0.013033208],[1,433,2085,0.003191791],[0,126,2368,0.0006725]],"inputs":[["(*.f64 -1 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(-.f64 (*.f64 -1 (log.f64 y)) (+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 y (-.f64 1 z))) t)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 y (-.f64 1 z)))) t)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 y 3) (-.f64 1 z))) (*.f64 y (-.f64 1 z))))) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) t))","(-.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(*.f64 -1 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(*.f64 -1 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","t","(+.f64 (*.f64 -1 (*.f64 y (-.f64 1 z))) t)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 1 z))) t))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 1 z))) (+.f64 t (*.f64 -1/3 (*.f64 (pow.f64 y 3) (-.f64 1 z))))))","(+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) t)","(+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 t (*.f64 -1 (/.f64 (-.f64 1 z) y))))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 t (*.f64 -1 (/.f64 (-.f64 1 z) y)))))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 t (+.f64 (*.f64 -1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (*.f64 -1 (/.f64 (-.f64 1 z) y))))))","(+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y)))))","(+.f64 t (+.f64 (*.f64 -1 (/.f64 (-.f64 1 z) y)) (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 t (+.f64 (*.f64 -1 (/.f64 (-.f64 1 z) y)) (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y)))))))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 t (+.f64 (*.f64 -1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 1 z) y)) (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))))","(+.f64 t (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))","(+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","t","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","t","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (log.f64 y))","(neg.f64 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(-.f64 (*.f64 -1 (log.f64 y)) (+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t))","(-.f64 (neg.f64 (log.f64 y)) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (neg.f64 (log.f64 y)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) t)","(-.f64 (*.f64 (log.f64 y) (+.f64 x -1)) t)","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 y (-.f64 1 z))) t)","(-.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 y (-.f64 1 z))) t)","(fma.f64 (log.f64 y) (+.f64 -1 x) (-.f64 (*.f64 y (-.f64 1 z)) t))","(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 y (-.f64 1 z)))) t)","(-.f64 (fma.f64 1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 y (-.f64 1 z)))) t)","(fma.f64 1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 (log.f64 y) (+.f64 -1 x) (-.f64 (*.f64 y (-.f64 1 z)) t)))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (-.f64 1 z) (+.f64 y (*.f64 1/2 (*.f64 y y))))) t)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 y 3) (-.f64 1 z))) (*.f64 y (-.f64 1 z))))) t)","(-.f64 (fma.f64 1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 1/3 (*.f64 (-.f64 1 z) (pow.f64 y 3)) (*.f64 y (-.f64 1 z))))) t)","(-.f64 (fma.f64 1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (-.f64 1 z) (+.f64 y (*.f64 1/3 (pow.f64 y 3)))))) t)","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (-.f64 1 z) (+.f64 (fma.f64 1/3 (pow.f64 y 3) y) (*.f64 1/2 (*.f64 y y))))) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) t))","(-.f64 (*.f64 (neg.f64 (neg.f64 (log.f64 y))) (+.f64 x -1)) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t))","(-.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (+.f64 (/.f64 1 y) (*.f64 (neg.f64 (neg.f64 (log.f64 y))) (+.f64 x -1))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) (+.f64 t (/.f64 z y))))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (/.f64 1 y)) (+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (/.f64 z y)))","(fma.f64 (log.f64 y) (+.f64 -1 x) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (+.f64 (/.f64 1 y) (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (*.f64 (neg.f64 (neg.f64 (log.f64 y))) (+.f64 x -1)))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) (+.f64 t (/.f64 z y))))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 -1 x))) (+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (/.f64 z y))))","(+.f64 (*.f64 (/.f64 (-.f64 1 z) y) (/.f64 1/2 y)) (fma.f64 (log.f64 y) (+.f64 -1 x) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t))))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (+.f64 (/.f64 1/2 y) 1) (/.f64 (-.f64 1 z) y))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (*.f64 (neg.f64 (neg.f64 (log.f64 y))) (+.f64 x -1)))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) (+.f64 t (/.f64 z y)))))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (*.f64 (log.f64 y) (+.f64 -1 x)))) (+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (/.f64 z y))))","(+.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 1/2 (/.f64 1/3 y)))) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t)))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))) (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (neg.f64 (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (-.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (fma.f64 -1 (/.f64 (+.f64 z -1) y) (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1)))) (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(-.f64 (fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (/.f64 (-.f64 1 z) y)) (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(-.f64 (fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (/.f64 (-.f64 1 z) y)) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (/.f64 (-.f64 1 z) y)) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 -1 (/.f64 (+.f64 z -1) y) (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))) (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (/.f64 (-.f64 1 z) y))) (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(-.f64 (fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (*.f64 (+.f64 (/.f64 1/2 y) 1) (/.f64 (-.f64 1 z) y))) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (+.f64 (/.f64 1/2 y) 1) (/.f64 (-.f64 1 z) y))) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 z 1) y)) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (fma.f64 -1 (/.f64 (+.f64 z -1) y) (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1)))))) (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (/.f64 (-.f64 1 z) y)))) (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(+.f64 (fma.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (/.f64 (-.f64 1 z) y)) (-.f64 (*.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 1/2 (/.f64 1/3 y))) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t)))","(+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (/.f64 (-.f64 1 z) y)) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t)) (*.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 1/2 (/.f64 1/3 y))))","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (+.f64 (log1p.f64 (neg.f64 y)) t))","(fma.f64 (log.f64 y) (+.f64 -1 x) (-.f64 (neg.f64 t) (log1p.f64 (neg.f64 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 x -1)) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (*.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y))))","(fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z)))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 -1 t)","(neg.f64 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 -1 t)","(neg.f64 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","t","(+.f64 (*.f64 -1 (*.f64 y (-.f64 1 z))) t)","(fma.f64 -1 (*.f64 y (-.f64 1 z)) t)","(-.f64 t (*.f64 y (-.f64 1 z)))","(fma.f64 y (+.f64 -1 z) t)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 1 z))) t))","(fma.f64 -1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 -1 (*.f64 y (-.f64 1 z)) t))","(+.f64 t (*.f64 (-.f64 1 z) (+.f64 (*.f64 (*.f64 y y) -1/2) (neg.f64 y))))","(fma.f64 (-.f64 1 z) (fma.f64 (*.f64 y y) -1/2 (neg.f64 y)) t)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 1 z))) (+.f64 t (*.f64 -1/3 (*.f64 (pow.f64 y 3) (-.f64 1 z))))))","(fma.f64 -1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 (fma.f64 -1 (*.f64 y (-.f64 1 z)) t) (*.f64 (*.f64 -1/3 (pow.f64 y 3)) (-.f64 1 z))))","(+.f64 (fma.f64 (*.f64 (-.f64 1 z) (pow.f64 y 3)) -1/3 t) (*.f64 (-.f64 1 z) (+.f64 (*.f64 (*.f64 y y) -1/2) (neg.f64 y))))","(+.f64 t (*.f64 (-.f64 1 z) (+.f64 (fma.f64 (*.f64 y y) -1/2 (neg.f64 y)) (*.f64 (pow.f64 y 3) -1/3))))","(+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) t)","(fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) t)","(fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t)","(+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 t (*.f64 -1 (/.f64 (-.f64 1 z) y))))","(+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) t) (neg.f64 (/.f64 (-.f64 1 z) y)))","(-.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (/.f64 (-.f64 1 z) y))","(+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (/.f64 (+.f64 -1 z) y))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 t (*.f64 -1 (/.f64 (-.f64 1 z) y)))))","(fma.f64 -1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) t) (neg.f64 (/.f64 (-.f64 1 z) y))))","(fma.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) -1/2 (-.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (/.f64 (-.f64 1 z) y)))","(+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (*.f64 (/.f64 (-.f64 1 z) y) (+.f64 -1 (/.f64 -1/2 y))))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 t (+.f64 (*.f64 -1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (*.f64 -1 (/.f64 (-.f64 1 z) y))))))","(fma.f64 -1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) t) (fma.f64 -1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (neg.f64 (/.f64 (-.f64 1 z) y)))))","(fma.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) -1/2 (+.f64 (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t) (-.f64 (*.f64 (/.f64 (-.f64 1 z) (pow.f64 y 3)) -1/3) (/.f64 (-.f64 1 z) y))))","(fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) (+.f64 (*.f64 (/.f64 (-.f64 1 z) y) (+.f64 -1 (/.f64 -1/2 y))) (fma.f64 (/.f64 (-.f64 1 z) (pow.f64 y 3)) -1/3 t)))","(+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y)))))","(+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))","(fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t)","(+.f64 t (+.f64 (*.f64 -1 (/.f64 (-.f64 1 z) y)) (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(+.f64 t (*.f64 -1 (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(-.f64 (-.f64 t (/.f64 (-.f64 1 z) y)) (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))","(+.f64 t (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) (/.f64 (+.f64 -1 z) y)))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 t (+.f64 (*.f64 -1 (/.f64 (-.f64 1 z) y)) (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y)))))))","(fma.f64 -1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 t (*.f64 -1 (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))))","(fma.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) -1/2 (-.f64 (-.f64 t (/.f64 (-.f64 1 z) y)) (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(+.f64 (*.f64 (/.f64 (-.f64 1 z) y) (+.f64 -1 (/.f64 -1/2 y))) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) t))","(+.f64 (*.f64 -1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 t (+.f64 (*.f64 -1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 1 z) y)) (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))))","(fma.f64 -1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 t (fma.f64 -1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (*.f64 -1 (+.f64 (/.f64 (-.f64 1 z) y) (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))))","(+.f64 (fma.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) -1/2 (-.f64 (-.f64 t (/.f64 (-.f64 1 z) y)) (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))) (*.f64 (/.f64 (-.f64 1 z) (pow.f64 y 3)) -1/3))","(+.f64 t (+.f64 (*.f64 (/.f64 (-.f64 1 z) y) (+.f64 -1 (/.f64 -1/2 y))) (fma.f64 (log.f64 (/.f64 -1 y)) (+.f64 -1 z) (*.f64 (/.f64 (-.f64 1 z) (pow.f64 y 3)) -1/3))))","(+.f64 t (log.f64 (-.f64 1 y)))","(+.f64 (log.f64 (-.f64 1 y)) t)","(+.f64 (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))))","(neg.f64 (*.f64 z (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (neg.f64 z))","(*.f64 z (neg.f64 (log1p.f64 (neg.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))))","(neg.f64 (*.f64 z (log.f64 (-.f64 1 y))))","(*.f64 (log1p.f64 (neg.f64 y)) (neg.f64 z))","(*.f64 z (neg.f64 (log1p.f64 (neg.f64 y))))","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 -1 (*.f64 z (log.f64 (-.f64 1 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))","(*.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)))","(+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","t","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","t","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)","(+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t)","(fma.f64 -1 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (log.f64 (-.f64 1 y)) t))","(+.f64 (log1p.f64 (neg.f64 y)) (fma.f64 (neg.f64 z) (log1p.f64 (neg.f64 y)) t))","(fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)"]],"stop":[["node limit",1]],"time":60.5419921875,"type":"simplify"},{"compiler":[[6188,3675]],"time":69.0390625,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))","fresh",9.045092970908696],["(-.f64 (/.f64 (*.f64 (log.f64 y) (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",16.584316259768443],["(-.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",30.30859375],["(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))","fresh",9.16463537460344],["(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t)","fresh",0.6672755241907745],["(-.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",14.96226503907377],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","next",0.41450893560039836],["(-.f64 (/.f64 (*.f64 (log.f64 y) (fma.f64 x x -1)) (+.f64 x 1)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",12.828125],["(fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))","fresh",9.052311708824925]],"compiler":[[26,20],[30,22],[30,23],[25,17],[17,12],[22,17],[22,17],[24,17],[26,20],[26,20],[30,22],[30,23],[25,17],[17,12],[22,17],[22,17],[24,17],[26,20]],"count":[[249,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[248,9],"picked":[1,0]}],"min-error":[0.03515625],"time":67.658935546875,"type":"prune"},{"compiler":[[72,40]],"locations":[["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))",0.015625,true],["(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))",0.11328125,true],["(*.f64 (+.f64 x -1) (log.f64 y))",0.17578125,false],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)",0.748901562590145,true]],"time":18.739013671875,"type":"localize"},{"count":[[3,74]],"series":[["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","t","-inf",0.192138671875],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","t","inf",0.22607421875],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","t","0",0.58203125],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","z","-inf",0.223876953125],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","z","inf",0.2060546875],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","z","0",0.623046875],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","y","-inf",0.307861328125],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","y","inf",0.344970703125],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","y","0",0.238037109375],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","x","-inf",0.306884765625],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","x","inf",0.35791015625],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","x","0",0.717041015625],["(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))","y","-inf",0.21484375],["(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))","y","inf",0.196044921875],["(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))","y","0",0.1689453125],["(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))","x","-inf",0.2939453125],["(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))","x","inf",0.27099609375],["(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))","x","0",0.532958984375],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)","y","-inf",1.491943359375],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)","y","inf",1.48486328125],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)","y","0",1.56201171875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)","x","-inf",0.947998046875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)","x","inf",1.028076171875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)","x","0",2.6611328125]],"time":15.716064453125,"type":"series"},{"count":[[3,202]],"egraph":[[2,4644,41,0.033052375],[1,382,41,0.006510875],[0,18,43,0.000474042]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)","(cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))","(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 -1 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (log.f64 y)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (*.f64 (log.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) -1) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) (cbrt.f64 (pow.f64 y (+.f64 x -1))))) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (+.f64 x -1)))) (log.f64 (sqrt.f64 (pow.f64 y (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (*.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x -1)) (*.f64 (sqrt.f64 (+.f64 x -1)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) 3) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) 3) (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (sqrt.f64 (+.f64 x -1))) (sqrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) 1) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (log.f64 y)) (-.f64 (fma.f64 x x 1) (*.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (log.f64 y)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (fma.f64 x x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (*.f64 -1 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 y) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (*.f64 (log.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) -1 (*.f64 (log.f64 y) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))) (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1/3) (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))) (cbrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (log.f64 (cbrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))) (log.f64 (sqrt.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3))) (neg.f64 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))) (neg.f64 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 3)) (+.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (-.f64 (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))) (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y (+.f64 x -1)) (+.f64 1 (expm1.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (+.f64 1 (expm1.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (exp.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 y (+.f64 x -1)) (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)) (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (log.f64 y) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) (log.f64 y) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 x -1) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 x -1) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1 (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) 2) (cbrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (neg.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (*.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (*.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (*.f64 (sqrt.f64 (+.f64 x -1)) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (*.f64 (sqrt.f64 (+.f64 x -1)) (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 3)) (/.f64 1 (fma.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (/.f64 1 (fma.f64 (+.f64 x -1) (log.f64 y) (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))) (cbrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) 3) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))) 3) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) 3) (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) 3) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) 3) (pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) 3) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (-.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (sqrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t))) (+.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t) 2))) (cbrt.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 (+.f64 x -1))) (sqrt.f64 (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 (+.f64 x -1))) (sqrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) 1) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) 1) (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)))) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (log.f64 y)) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6)) (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1/6) (*.f64 (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)) 1))))))"]],"rules":[["egg-rr",127],["egg-rr",27],["egg-rr",48]],"stop":[["node limit",1]],"time":69.916015625,"type":"rewrite"},{"count":[[276,275]],"egraph":[[2,2792,2588,0.018822292],[1,791,2652,0.005722625],[0,228,3172,0.001276167]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y)))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y)))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 (log.f64 y) 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 y)) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))) (cbrt.f64 -1))))))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (pow.f64 x 3)))))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 11)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2)))) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 11)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) (/.f64 (*.f64 (pow.f64 x 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3)))))) (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1)))))","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y)))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 (log.f64 y) 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 y)) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))) (cbrt.f64 -1))))))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (pow.f64 x 3))))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(*.f64 -1 (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(*.f64 -1 (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))) t)","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) t)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))))) t)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 y 3) (-.f64 1 z))) (+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))))) t)","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) t))","(-.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(*.f64 -1 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(*.f64 -1 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y)))","(neg.f64 (log.f64 y))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))))","(fma.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) 1) x (neg.f64 (log.f64 y)))","(-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) x) (log.f64 y))","(-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (*.f64 -1 (cbrt.f64 -1)))) x) (log.f64 y))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y)))))","(fma.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) 1) x (fma.f64 (fma.f64 2/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)))) -1/9) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)))))) (*.f64 x x) (neg.f64 (log.f64 y))))","(fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) x (fma.f64 (+.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 -1/9 (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) 1/9)) (*.f64 x x) (neg.f64 (log.f64 y))))","(-.f64 (*.f64 x (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (*.f64 -1 (cbrt.f64 -1)))) (*.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) -1/9)) (cbrt.f64 (log.f64 y)))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) 1/9))) x))) (log.f64 y))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 (log.f64 y) 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 y)) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))) (cbrt.f64 -1))))))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (pow.f64 x 3)))))","(fma.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) 1) x (fma.f64 (fma.f64 2/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)))) -1/9) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)))))) (*.f64 x x) (fma.f64 -1 (log.f64 y) (*.f64 (fma.f64 1/3 (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)))) -1/9) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (+.f64 (*.f64 -1/3 (fma.f64 1/27 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (pow.f64 (log.f64 y) 2)) (*.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 y))) (/.f64 (fma.f64 1/27 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1)))))) (*.f64 -2/27 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)))))) (pow.f64 x 3)))))","(fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) x (fma.f64 (+.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 -1/9 (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) 1/9)) (*.f64 x x) (fma.f64 (fma.f64 1/3 (*.f64 (*.f64 -1/9 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18))) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 -1) (fma.f64 2/27 (pow.f64 (log.f64 y) 2) (/.f64 (*.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 1 (log.f64 y)))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27)) (cbrt.f64 -1)))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -2/27)))) (pow.f64 x 3) (neg.f64 (log.f64 y)))))","(fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (*.f64 -1 (cbrt.f64 -1)))) x (-.f64 (*.f64 (*.f64 x x) (+.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) -1/9)) (cbrt.f64 (log.f64 y)))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) 1/9))) (*.f64 (fma.f64 1/3 (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) -1/9)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18))) (fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27) (fma.f64 (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 y))) (/.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (cbrt.f64 -1) -5/27))) (*.f64 2/27 (pow.f64 (log.f64 y) 2))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -2/27)))) x))) (log.f64 y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))","(*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)))","(*.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1)))","(fma.f64 1/3 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))))","(fma.f64 1/3 (*.f64 x (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 11)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2)))) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1))))","(fma.f64 1/3 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 11) 1/18) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)) (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))))) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)))))","(fma.f64 1/3 (*.f64 x (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)) (*.f64 -1/9 (*.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)))))","(fma.f64 1/3 (*.f64 x (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))) (*.f64 (*.f64 x x) (*.f64 (pow.f64 (pow.f64 (log.f64 y) 11) 1/18) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)))) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 11)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) (/.f64 (*.f64 (pow.f64 x 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3)))))) (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (cbrt.f64 -1)))))","(fma.f64 1/3 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 11) 1/18) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)) (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (log.f64 y) 2))) (/.f64 (pow.f64 x 3) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (fma.f64 1/27 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2))))))) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))))))","(fma.f64 1/3 (*.f64 x (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 -1/9 (*.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)) (fma.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)) (*.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (log.f64 y) 2))) (*.f64 (/.f64 (pow.f64 x 3) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27)))))))","(fma.f64 1/3 (*.f64 x (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))) (*.f64 (*.f64 x x) (*.f64 (pow.f64 (pow.f64 (log.f64 y) 11) 1/18) (pow.f64 (pow.f64 (log.f64 y) 11) 1/18)))) (fma.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (log.f64 y) 2))) (*.f64 -1/3 (*.f64 (/.f64 (pow.f64 x 3) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27)))))))","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1)))","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 -1 x)))","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1)))","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 -1 x)))","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1)))","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 -1 x)))","(pow.f64 (*.f64 (-.f64 x 1) (log.f64 y)) 1/3)","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1)))","(cbrt.f64 (*.f64 (log.f64 y) (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 -1 x))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (log.f64 y) (+.f64 1 (neg.f64 x)))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 -1 x))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (log.f64 y) (+.f64 1 (neg.f64 x)))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 -1 x))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (log.f64 y) (+.f64 1 (neg.f64 x)))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 -1 x))))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (*.f64 (log.f64 y) (+.f64 1 (neg.f64 x)))))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(cbrt.f64 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(cbrt.f64 (*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(cbrt.f64 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(cbrt.f64 (*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(cbrt.f64 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(cbrt.f64 (*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))))","(pow.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1)) 1/3)","(cbrt.f64 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(cbrt.f64 (*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))) t))","(-.f64 (neg.f64 (log.f64 y)) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (neg.f64 (log.f64 y)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y)))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) 1) x (neg.f64 (log.f64 y))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) x (-.f64 (neg.f64 (log.f64 y)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)))","(fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (*.f64 -1 (cbrt.f64 -1)))) x (-.f64 (neg.f64 (log.f64 y)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) 1) x (fma.f64 (fma.f64 2/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)))) -1/9) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)))))) (*.f64 x x) (neg.f64 (log.f64 y)))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) x (fma.f64 (+.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 -1/9 (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) 1/9)) (*.f64 x x) (neg.f64 (log.f64 y)))) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (*.f64 x (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (*.f64 -1 (cbrt.f64 -1)))) (*.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) -1/9)) (cbrt.f64 (log.f64 y)))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) 1/9))) x))) (+.f64 (log.f64 y) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (*.f64 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 (log.f64 y)) 1/3)))) (pow.f64 x 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (log.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 (log.f64 y) 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (log.f64 y)) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))) (cbrt.f64 -1))))))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (pow.f64 (log.f64 y) 7) 1/3))))))) (pow.f64 x 3))))) (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(-.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) 1) x (fma.f64 (fma.f64 2/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)))) -1/9) (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y)))))) (*.f64 x x) (fma.f64 -1 (log.f64 y) (*.f64 (fma.f64 1/3 (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)))) -1/9) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (+.f64 (*.f64 -1/3 (fma.f64 1/27 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (pow.f64 (log.f64 y) 2)) (*.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 y))) (/.f64 (fma.f64 1/27 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1)))))) (*.f64 -2/27 (/.f64 (*.f64 1 (cbrt.f64 (pow.f64 (log.f64 y) 7))) (pow.f64 (cbrt.f64 -1) 2)))))) (pow.f64 x 3))))) (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 -1) 4))) x (fma.f64 (+.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 -1/9 (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 -1)))) 1/9)) (*.f64 x x) (fma.f64 (fma.f64 1/3 (*.f64 (*.f64 -1/9 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18))) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 -1) (fma.f64 2/27 (pow.f64 (log.f64 y) 2) (/.f64 (*.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 1 (log.f64 y)))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27)) (cbrt.f64 -1)))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -2/27)))) (pow.f64 x 3) (neg.f64 (log.f64 y))))) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 13) 1/18) (pow.f64 (pow.f64 (log.f64 y) 13) 1/18)) (cbrt.f64 (*.f64 -1 (cbrt.f64 -1)))) x (-.f64 (*.f64 (*.f64 x x) (+.f64 (+.f64 (*.f64 (cbrt.f64 -1) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) -1/9)) (cbrt.f64 (log.f64 y)))) (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 -1))) (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 17) 1/18) (pow.f64 (pow.f64 (log.f64 y) 17) 1/18)) 1/9))) (*.f64 (fma.f64 1/3 (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log.f64 y) 14) 1/18) (pow.f64 (pow.f64 (log.f64 y) 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) -1/9)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 (pow.f64 (pow.f64 (log.f64 y) 7) 1/18) (pow.f64 (pow.f64 (log.f64 y) 7) 1/18))) (fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -5/27) (fma.f64 (*.f64 (cbrt.f64 -1) (cbrt.f64 (log.f64 y))) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 y))) (/.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (cbrt.f64 -1) -5/27))) (*.f64 2/27 (pow.f64 (log.f64 y) 2))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 y) 7)) (pow.f64 (cbrt.f64 -1) 2)) -2/27)))) x))) (log.f64 y))) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(*.f64 -1 (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(neg.f64 (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(neg.f64 (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z)) t)","(*.f64 -1 (+.f64 t (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)))))","(neg.f64 (fma.f64 (-.f64 1 z) (log.f64 (-.f64 1 y)) t))","(neg.f64 (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z)) t)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))) t)","(-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t)","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) t)","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) t)","(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) t)","(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))))) t)","(-.f64 (fma.f64 1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 y (-.f64 1 z) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))))) t)","(+.f64 (*.f64 (-.f64 1 z) (+.f64 (*.f64 1/2 (*.f64 y y)) y)) (-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) t))","(+.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (-.f64 (*.f64 (-.f64 1 z) (+.f64 (*.f64 1/2 (*.f64 y y)) y)) t))","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (-.f64 1 z))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 y 3) (-.f64 1 z))) (+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))))) t)","(-.f64 (fma.f64 1/2 (*.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 1/3 (*.f64 (-.f64 1 z) (pow.f64 y 3)) (fma.f64 y (-.f64 1 z) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))))) t)","(+.f64 (*.f64 (-.f64 1 z) (+.f64 (*.f64 1/2 (*.f64 y y)) (*.f64 1/3 (pow.f64 y 3)))) (-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t))","(+.f64 (*.f64 (-.f64 1 z) (+.f64 (*.f64 (*.f64 y y) (+.f64 1/2 (*.f64 1/3 y))) y)) (-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) t))","(-.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) t))","(-.f64 (neg.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) t))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t))","(-.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(+.f64 (/.f64 1 y) (-.f64 (neg.f64 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) (+.f64 t (/.f64 z y)))))","(-.f64 (+.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (/.f64 1 y)) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) (+.f64 t (/.f64 z y))))","(+.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(-.f64 (+.f64 (/.f64 1 y) (fma.f64 -1 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1)) (*.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y))))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) (+.f64 t (/.f64 z y))))","(+.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 -1 x))) (-.f64 (/.f64 1 y) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) (+.f64 t (/.f64 z y)))))","(+.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (*.f64 (log.f64 y) (+.f64 -1 x))) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)))))) (+.f64 (*.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (+.f64 (/.f64 z y) t)))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 -1 (*.f64 (neg.f64 (log.f64 y)) (+.f64 x -1)) (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 -1) (neg.f64 (neg.f64 (log.f64 y)))) (+.f64 t (/.f64 z y)))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (-.f64 (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (/.f64 (*.f64 1/3 (-.f64 1 z)) (pow.f64 y 3))) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) (+.f64 t (/.f64 z y))))))","(+.f64 (+.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (-.f64 1 z) (+.f64 (log.f64 y) (log.f64 -1)) t))) (*.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 1/2 (/.f64 1/3 y))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(fma.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))) (neg.f64 (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))))","(-.f64 (*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(-.f64 (*.f64 (+.f64 -1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) (fma.f64 (+.f64 -1 z) (log.f64 (/.f64 -1 y)) t))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (*.f64 -1 (/.f64 (-.f64 z 1) y))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (fma.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))) (neg.f64 (/.f64 (+.f64 z -1) y))) (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(-.f64 (fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (+.f64 -1 x) (/.f64 (-.f64 1 z) y)) (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (+.f64 -1 x) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (+.f64 -1 z) (log.f64 (/.f64 -1 y)) t)))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (*.f64 -1 (/.f64 (-.f64 z 1) y)))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (fma.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (neg.f64 (/.f64 (+.f64 z -1) y)))) (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(-.f64 (fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (+.f64 -1 x) (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (/.f64 (-.f64 1 z) y))) (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(-.f64 (fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (+.f64 -1 x) (*.f64 (+.f64 (/.f64 1/2 y) 1) (/.f64 (-.f64 1 z) y))) (fma.f64 (+.f64 -1 z) (log.f64 (/.f64 -1 y)) t))","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 1 z) (pow.f64 y 2))) (+.f64 (*.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3))) (*.f64 -1 (/.f64 (-.f64 z 1) y))))) (+.f64 t (*.f64 -1 (*.f64 (-.f64 1 z) (log.f64 (/.f64 -1 y))))))","(-.f64 (fma.f64 1 (*.f64 (+.f64 x -1) (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (neg.f64 (/.f64 (+.f64 z -1) y))))) (+.f64 t (neg.f64 (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z)))))","(-.f64 (fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (+.f64 -1 x) (fma.f64 1/2 (/.f64 (-.f64 1 z) (*.f64 y y)) (fma.f64 1/3 (/.f64 (-.f64 1 z) (pow.f64 y 3)) (/.f64 (-.f64 1 z) y)))) (-.f64 t (*.f64 (log.f64 (/.f64 -1 y)) (-.f64 1 z))))","(fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (+.f64 -1 x) (+.f64 (*.f64 (/.f64 (-.f64 1 z) (*.f64 y y)) (+.f64 1/2 (/.f64 1/3 y))) (-.f64 (/.f64 (-.f64 1 z) y) (fma.f64 (+.f64 -1 z) (log.f64 (/.f64 -1 y)) t))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) (+.f64 (log.f64 (-.f64 1 y)) t))","(fma.f64 (+.f64 -1 x) (log.f64 y) (neg.f64 (+.f64 (log1p.f64 (neg.f64 y)) t)))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (+.f64 t (log.f64 (-.f64 1 y))))","(-.f64 (fma.f64 z (log.f64 (-.f64 1 y)) (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1)))) (+.f64 (log.f64 (-.f64 1 y)) t))","(-.f64 (fma.f64 (+.f64 -1 x) (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 (log1p.f64 (neg.f64 y)) t))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (*.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y))))","(fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z)))","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 -1 t)","(neg.f64 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(*.f64 -1 t)","(neg.f64 t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)","(-.f64 (+.f64 (*.f64 -1 t) (*.f64 (pow.f64 1 1/3) (*.f64 (-.f64 x 1) (log.f64 y)))) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (-.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 x -1))) t) (*.f64 (-.f64 1 z) (log.f64 (-.f64 1 y))))","(-.f64 (*.f64 (log.f64 y) (+.f64 -1 x)) (fma.f64 (-.f64 1 z) (log1p.f64 (neg.f64 y)) t))","(-.f64 (fma.f64 (log.f64 y) (+.f64 -1 x) (*.f64 (log1p.f64 (neg.f64 y)) (+.f64 -1 z))) t)"]],"stop":[["node limit",1]],"time":56.47705078125,"type":"simplify"},{"compiler":[[9834,6363]],"time":109.178955078125,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","done",0.41450893560039836],["(-.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","next",0.24971265861039993],["(-.f64 (/.f64 (*.f64 (log.f64 y) (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",16.584316259768443],["(-.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",0.38325893560039836],["(-.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",30.30859375],["(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t)","fresh",0.6672755241907745],["(-.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",14.96226503907377],["(-.f64 (/.f64 (*.f64 (log.f64 y) (fma.f64 x x -1)) (+.f64 x 1)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",12.828125],["(-.f64 (*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",0.2608376465266302]],"compiler":[[22,17],[27,21],[30,22],[26,18],[30,23],[17,12],[22,17],[24,17],[27,21],[27,21],[30,22],[26,18],[30,23],[17,12],[22,17],[24,17],[27,21]],"count":[[320,9]],"kept":[{"done":[0,0],"fresh":[8,5],"new":[311,3],"picked":[1,1]}],"min-error":[0.03515625],"time":106.640869140625,"type":"prune"},{"compiler":[[86,53]],"locations":[["(cbrt.f64 (+.f64 x -1))",0.046875,true],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))",0.14910126953688402,true],["(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))",0.17025375976844204,true],["(pow.f64 (cbrt.f64 (+.f64 x -1)) 2)",0.26171875,true]],"time":22.0361328125,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (+.f64 x -1))","x","-inf",0.218017578125],["(cbrt.f64 (+.f64 x -1))","x","inf",0.16796875],["(cbrt.f64 (+.f64 x -1))","x","0",0.3330078125],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))","y","-inf",0.304931640625],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))","y","inf",0.31787109375],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))","y","0",0.302978515625],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))","x","-inf",0.80419921875],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))","x","inf",0.22802734375],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))","x","0",0.258056640625],["(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))","y","-inf",0.335205078125],["(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))","y","inf",0.376220703125],["(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))","y","0",1.273193359375],["(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))","x","-inf",0.44677734375],["(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))","x","inf",0.365966796875],["(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))","x","0",0.9951171875],["(pow.f64 (cbrt.f64 (+.f64 x -1)) 2)","x","-inf",0.442138671875],["(pow.f64 (cbrt.f64 (+.f64 x -1)) 2)","x","inf",0.38623046875],["(pow.f64 (cbrt.f64 (+.f64 x -1)) 2)","x","0",0.880859375]],"time":8.69091796875,"type":"series"},{"count":[[4,150]],"egraph":[[2,2593,35,0.024522582],[1,225,35,0.0037342910000000003],[0,11,35,0.000308]],"inputs":[["(pow.f64 (cbrt.f64 (+.f64 x -1)) 2)","(*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))","(*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))","(cbrt.f64 (+.f64 x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 4) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x -1) 1/6) (sqrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x -1)) (pow.f64 (+.f64 x -1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 5) (cbrt.f64 (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (+.f64 x -1))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (+.f64 x -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) (log.f64 (cbrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) (log.f64 (cbrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) (*.f64 (log.f64 (+.f64 x -1)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) (*.f64 (log.f64 (+.f64 x -1)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) (*.f64 (log.f64 (+.f64 x -1)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (cbrt.f64 (+.f64 x -1)))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (cbrt.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (cbrt.f64 (+.f64 x -1))))) (log.f64 (sqrt.f64 (pow.f64 y (cbrt.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) (pow.f64 (log.f64 y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))) 2)) (cbrt.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))))) (sqrt.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 y (cbrt.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (+.f64 x -1) (pow.f64 (log.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y (cbrt.f64 (+.f64 x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) (pow.f64 (log.f64 y) 3))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (log.f64 (cbrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 (log.f64 (+.f64 x -1)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (*.f64 (log.f64 (+.f64 x -1)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x -1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (+.f64 x -1)))) (log.f64 (sqrt.f64 (pow.f64 y (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (log.f64 y)) (-.f64 (fma.f64 x x 1) (*.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (log.f64 y)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (+.f64 x -1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 2)) (cbrt.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))))) (sqrt.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y (+.f64 x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (+.f64 x -1)) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1) (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1) (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (log.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 (log.f64 (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (*.f64 (log.f64 (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 1) (*.f64 2/3 (log.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) 1) (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (+.f64 x -1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (+.f64 x -1))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (+.f64 x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x -1) 1/6) (pow.f64 (+.f64 x -1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 4)) (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 -1 (pow.f64 x 3))) (cbrt.f64 (-.f64 (fma.f64 x x 1) (*.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x -1)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (+.f64 x -1)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (+.f64 x -1))))) (sqrt.f64 (log.f64 (cbrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (+.f64 x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1) 1/2))))))"]],"rules":[["egg-rr",41],["egg-rr",40],["egg-rr",34],["egg-rr",35]],"stop":[["node limit",1]],"time":52.7529296875,"type":"rewrite"},{"count":[[198,184]],"egraph":[[3,4303,695,0.021128083],[2,911,728,0.008103833000000001],[1,298,778,0.0020755],[0,102,855,0.000554875]],"inputs":[["(pow.f64 (cbrt.f64 -1) 2)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) x)) (pow.f64 (cbrt.f64 -1) 2))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) x)) (+.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (pow.f64 x 2))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) x)) (+.f64 (pow.f64 (cbrt.f64 -1) 2) (+.f64 (*.f64 (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1))) (*.f64 2/27 (pow.f64 1 1/3))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (pow.f64 x 2)))))","(*.f64 (cbrt.f64 -1) (log.f64 y))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x))) (*.f64 (cbrt.f64 -1) (log.f64 y)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x))) (+.f64 (*.f64 (cbrt.f64 -1) (log.f64 y)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (log.f64 y) (pow.f64 x 2))))))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 (log.f64 y) (pow.f64 x 3))) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x))) (+.f64 (*.f64 (cbrt.f64 -1) (log.f64 y)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (log.f64 y) (pow.f64 x 2)))))))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 -1 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(cbrt.f64 -1)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x)) (cbrt.f64 -1))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2))) (cbrt.f64 -1)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x)) (+.f64 (*.f64 -1/3 (/.f64 (*.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2))) (cbrt.f64 -1))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (cbrt.f64 -1) 2)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) x)) (pow.f64 (cbrt.f64 -1) 2))","(fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (pow.f64 (cbrt.f64 -1) 2))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) x)) (+.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (pow.f64 x 2))))","(+.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) -1/9) (*.f64 x x)))","(fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) -1/9) (*.f64 x x) (pow.f64 (cbrt.f64 -1) 2)))","(fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (fma.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) (*.f64 (*.f64 x x) -1/9) (pow.f64 (cbrt.f64 -1) 2)))","(fma.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) (*.f64 (*.f64 x x) -1/9) (fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (pow.f64 (cbrt.f64 -1) 2)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3) x)) (+.f64 (pow.f64 (cbrt.f64 -1) 2) (+.f64 (*.f64 (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1))) (*.f64 2/27 (pow.f64 1 1/3))) (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (pow.f64 x 2)))))","(+.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 (fma.f64 -2/3 (/.f64 (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1)) 2/27) (pow.f64 x 3) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) -1/9) (*.f64 x x))))","(+.f64 (fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (pow.f64 (cbrt.f64 -1) 2)) (fma.f64 (fma.f64 -2/3 (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) -5/27) (cbrt.f64 -1)) 2/27) (pow.f64 x 3) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4))) -1/9) (*.f64 x x))))","(fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (fma.f64 x (*.f64 x (*.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) -1/9)) (fma.f64 (fma.f64 -2/3 (/.f64 (/.f64 -5/27 (pow.f64 (cbrt.f64 -1) 2)) (cbrt.f64 -1)) 2/27) (pow.f64 x 3) (pow.f64 (cbrt.f64 -1) 2))))","(fma.f64 2/3 (*.f64 (cbrt.f64 (cbrt.f64 -1)) x) (fma.f64 (cbrt.f64 (/.f64 -1 (cbrt.f64 -1))) (*.f64 (*.f64 x x) -1/9) (fma.f64 -4/81 (pow.f64 x 3) (pow.f64 (cbrt.f64 -1) 2))))","(*.f64 (cbrt.f64 -1) (log.f64 y))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x))) (*.f64 (cbrt.f64 -1) (log.f64 y)))","(fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 x (log.f64 y))) (*.f64 (cbrt.f64 -1) (log.f64 y)))","(fma.f64 (cbrt.f64 -1) (log.f64 y) (*.f64 1/3 (*.f64 x (*.f64 (log.f64 y) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))))","(*.f64 (log.f64 y) (fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x))) (+.f64 (*.f64 (cbrt.f64 -1) (log.f64 y)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (log.f64 y) (pow.f64 x 2))))))","(fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 x (log.f64 y))) (fma.f64 (cbrt.f64 -1) (log.f64 y) (*.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))) (*.f64 (*.f64 x x) (log.f64 y))))))","(fma.f64 1/3 (*.f64 x (*.f64 (log.f64 y) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 (cbrt.f64 -1) (log.f64 y) (*.f64 -1/9 (*.f64 (*.f64 x x) (*.f64 (log.f64 y) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))))))))","(fma.f64 (cbrt.f64 -1) (log.f64 y) (*.f64 (log.f64 y) (*.f64 x (+.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 x (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))))))))","(*.f64 (log.f64 y) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))) (*.f64 (*.f64 x x) -1/9) (fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1))))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 (log.f64 y) (pow.f64 x 3))) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x))) (+.f64 (*.f64 (cbrt.f64 -1) (log.f64 y)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (log.f64 y) (pow.f64 x 2)))))))","(fma.f64 -1/3 (/.f64 (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 x 3) (log.f64 y)))) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 x (log.f64 y))) (fma.f64 (cbrt.f64 -1) (log.f64 y) (*.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))) (*.f64 (*.f64 x x) (log.f64 y)))))))","(fma.f64 -1/3 (*.f64 (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) -5/27) (pow.f64 (cbrt.f64 -1) 2)) (*.f64 (pow.f64 x 3) (log.f64 y))) (fma.f64 1/3 (*.f64 x (*.f64 (log.f64 y) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (fma.f64 (cbrt.f64 -1) (log.f64 y) (*.f64 -1/9 (*.f64 (*.f64 x x) (*.f64 (log.f64 y) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))))))))","(fma.f64 -1/3 (*.f64 (*.f64 (pow.f64 x 3) (log.f64 y)) (*.f64 (/.f64 -1 (cbrt.f64 -1)) -5/27)) (fma.f64 (cbrt.f64 -1) (log.f64 y) (*.f64 (log.f64 y) (*.f64 x (+.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 x (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))))))))))","(+.f64 (*.f64 (log.f64 y) (fma.f64 (*.f64 x x) (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (cbrt.f64 -1))) (*.f64 (log.f64 y) (fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 (/.f64 (pow.f64 x 3) (cbrt.f64 -1)) -5/81))))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 y))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 (pow.f64 (*.f64 1 (-.f64 x 1)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 x -1)))","(*.f64 (log.f64 y) (cbrt.f64 (+.f64 -1 x)))","(*.f64 -1 (log.f64 y))","(neg.f64 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (log.f64 y) x)","(*.f64 x (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (log.f64 y) x)","(*.f64 x (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (-.f64 x 1) (log.f64 y))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(fma.f64 (log.f64 y) x (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 -1 x))","(cbrt.f64 -1)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x)) (cbrt.f64 -1))","(fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1))","(fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) x (cbrt.f64 -1))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2))) (cbrt.f64 -1)))","(fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (fma.f64 -1/9 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (cbrt.f64 -1)))","(fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) x (fma.f64 -1/9 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (cbrt.f64 -1)))","(fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (fma.f64 (*.f64 x x) (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (cbrt.f64 -1)))","(fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))) (*.f64 (*.f64 x x) -1/9) (fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x)) (+.f64 (*.f64 -1/3 (/.f64 (*.f64 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2))) (cbrt.f64 -1))))","(fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (fma.f64 -1/3 (/.f64 (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (/.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 x 3))) (fma.f64 -1/9 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (cbrt.f64 -1))))","(fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (fma.f64 -1/3 (*.f64 (/.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) -5/27) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 x 3)) (fma.f64 -1/9 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (cbrt.f64 -1))))","(fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (fma.f64 -1/3 (*.f64 (pow.f64 x 3) (*.f64 (/.f64 -1 (cbrt.f64 -1)) -5/27)) (fma.f64 (*.f64 x x) (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)))) (cbrt.f64 -1))))","(+.f64 (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7))) (*.f64 (*.f64 x x) -1/9) (fma.f64 1/3 (*.f64 x (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (cbrt.f64 -1))) (*.f64 (/.f64 (pow.f64 x 3) (cbrt.f64 -1)) -5/81))"]],"stop":[["node limit",1]],"time":42.171142578125,"type":"simplify"},{"compiler":[[6628,4465]],"time":73.837890625,"type":"eval"},{"alts":[["(-.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 5) (cbrt.f64 (cbrt.f64 (+.f64 x -1)))) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",0.38585165433081864],["(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t)","fresh",0.6672755241907745],["(-.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",14.96226503907377],["(-.f64 (/.f64 (*.f64 (fma.f64 x x -1) (log.f64 y)) (+.f64 x 1)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",12.828125],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","done",0.41450893560039836],["(-.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","done",0.24971265861039993],["(-.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",12.590507519536885],["(-.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 4) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",0.3114916011567815],["(-.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",30.30859375],["(-.f64 (*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","next",0.2608376465266302]],"compiler":[[34,27],[17,12],[22,17],[24,17],[22,17],[27,21],[27,21],[36,29],[30,23],[27,21],[34,27],[17,12],[22,17],[24,17],[27,21],[36,29],[30,23],[27,21]],"count":[[241,10]],"kept":[{"done":[1,1],"fresh":[7,3],"new":[232,5],"picked":[1,1]}],"min-error":[0.02734375],"time":66.64111328125,"type":"prune"},{"compiler":[[88,55]],"locations":[["(cbrt.f64 (+.f64 x -1))",0.046875,false],["(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))",0.174160009768442,true],["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))",0.17578125,true],["(pow.f64 (cbrt.f64 (+.f64 x -1)) 2)",0.26171875,false]],"time":22.738037109375,"type":"localize"},{"count":[[2,40]],"series":[["(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))","x","-inf",0.20703125],["(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))","x","inf",0.22802734375],["(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))","x","0",0.4990234375],["(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))","y","-inf",0.27587890625],["(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))","y","inf",0.240966796875],["(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))","y","0",0.967041015625],["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))","x","-inf",0.502197265625],["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))","x","inf",0.278076171875],["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))","x","0",0.3359375],["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))","y","-inf",0.33203125],["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))","y","inf",0.3720703125],["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))","y","0",1.7099609375]],"time":6.1279296875,"type":"series"},{"count":[[2,83]],"egraph":[[2,2600,23,0.024518915999999998],[1,225,23,0.003734458],[0,11,23,0.000302041]],"inputs":[["(*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))","(*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))) (log.f64 (sqrt.f64 (pow.f64 y (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (sqrt.f64 (log.f64 y))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 x -1) 2) (pow.f64 (log.f64 y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (sqrt.f64 (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1))))) 2)) (cbrt.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))))) (sqrt.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (sqrt.f64 (log.f64 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 y (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 x -1) 2) (pow.f64 (log.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (+.f64 x -1) 2) (pow.f64 (log.f64 y) 3))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (sqrt.f64 (log.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (*.f64 2/3 (log.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1) (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x -1))) 1) (*.f64 (log.f64 (log.f64 y)) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 y) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 -1 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (log.f64 y)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) (*.f64 (log.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) -1) (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 y x) y)) 2)) (log.f64 (cbrt.f64 (/.f64 (pow.f64 y x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (pow.f64 y x) y))) (log.f64 (sqrt.f64 (/.f64 (pow.f64 y x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (log.f64 y) (+.f64 x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (fma.f64 x x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (log.f64 y) (+.f64 x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 x -1) 3) (pow.f64 (log.f64 y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (log.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (log.f64 y) (+.f64 x -1)))) 2)) (cbrt.f64 (log.f64 (*.f64 (log.f64 y) (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (log.f64 y) (+.f64 x -1))))) (sqrt.f64 (log.f64 (*.f64 (log.f64 y) (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (/.f64 (pow.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 (pow.f64 y x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (log.f64 y) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (log.f64 y) (+.f64 x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 x -1)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 x -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (log.f64 y) (+.f64 x -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (log.f64 y) (+.f64 x -1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (log.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 (log.f64 (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (log.f64 y)) 1) (*.f64 (log.f64 (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (+.f64 x -1)) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) (*.f64 (log.f64 (log.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1/3) (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1) (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1) (log.f64 (cbrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) (*.f64 (log.f64 (+.f64 x -1)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1) (*.f64 (log.f64 (+.f64 x -1)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (+.f64 (log.f64 (log.f64 y)) (*.f64 2/3 (log.f64 (+.f64 x -1)))) 1) (*.f64 (log.f64 (cbrt.f64 (+.f64 x -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (*.f64 (log.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) -1 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (*.f64 -1 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 y) (*.f64 x (log.f64 y)))))))"]],"rules":[["egg-rr",53],["egg-rr",30]],"stop":[["node limit",1]],"time":47.0400390625,"type":"rewrite"},{"count":[[123,103]],"egraph":[[5,6714,430,0.030466333],[4,3035,430,0.018746167],[3,1111,433,0.007892291999999999],[2,356,447,0.002722375],[1,134,449,0.000909125],[0,46,449,0.00026]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(log.f64 y)","(+.f64 (*.f64 -2/3 (*.f64 (log.f64 y) x)) (log.f64 y))","(+.f64 (*.f64 -2/3 (*.f64 (log.f64 y) x)) (+.f64 (*.f64 -1/9 (*.f64 (log.f64 y) (pow.f64 x 2))) (log.f64 y)))","(+.f64 (*.f64 -2/3 (*.f64 (log.f64 y) x)) (+.f64 (*.f64 -4/81 (*.f64 (log.f64 y) (pow.f64 x 3))) (+.f64 (*.f64 -1/9 (*.f64 (log.f64 y) (pow.f64 x 2))) (log.f64 y))))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 -1 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (log.f64 (/.f64 1 y))))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 x 1) 2)) 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 x 1) 2)) (log.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (log.f64 y))","(log.f64 y)","(+.f64 (*.f64 -2/3 (*.f64 (log.f64 y) x)) (log.f64 y))","(fma.f64 -2/3 (*.f64 x (log.f64 y)) (log.f64 y))","(fma.f64 x (*.f64 (log.f64 y) -2/3) (log.f64 y))","(*.f64 (log.f64 y) (fma.f64 x -2/3 1))","(+.f64 (*.f64 -2/3 (*.f64 (log.f64 y) x)) (+.f64 (*.f64 -1/9 (*.f64 (log.f64 y) (pow.f64 x 2))) (log.f64 y)))","(fma.f64 -2/3 (*.f64 x (log.f64 y)) (fma.f64 -1/9 (*.f64 (log.f64 y) (*.f64 x x)) (log.f64 y)))","(+.f64 (log.f64 y) (*.f64 (log.f64 y) (+.f64 (*.f64 x -2/3) (*.f64 x (*.f64 x -1/9)))))","(fma.f64 x (*.f64 (log.f64 y) (+.f64 (*.f64 x -1/9) -2/3)) (log.f64 y))","(fma.f64 (*.f64 x (log.f64 y)) (+.f64 -2/3 (*.f64 x -1/9)) (log.f64 y))","(+.f64 (*.f64 -2/3 (*.f64 (log.f64 y) x)) (+.f64 (*.f64 -4/81 (*.f64 (log.f64 y) (pow.f64 x 3))) (+.f64 (*.f64 -1/9 (*.f64 (log.f64 y) (pow.f64 x 2))) (log.f64 y))))","(fma.f64 -2/3 (*.f64 x (log.f64 y)) (fma.f64 -4/81 (*.f64 (log.f64 y) (pow.f64 x 3)) (fma.f64 -1/9 (*.f64 (log.f64 y) (*.f64 x x)) (log.f64 y))))","(+.f64 (log.f64 y) (fma.f64 x (*.f64 (log.f64 y) -2/3) (*.f64 (log.f64 y) (+.f64 (*.f64 x (*.f64 x -1/9)) (*.f64 -4/81 (pow.f64 x 3))))))","(fma.f64 x (*.f64 (log.f64 y) (+.f64 (*.f64 x -1/9) -2/3)) (*.f64 (log.f64 y) (fma.f64 -4/81 (pow.f64 x 3) 1)))","(*.f64 (log.f64 y) (+.f64 (fma.f64 x -2/3 1) (*.f64 (*.f64 x x) (+.f64 -1/9 (*.f64 x -4/81)))))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) (-.f64 x 1)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) (-.f64 x 1))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 -1 (log.f64 y))","(neg.f64 (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (log.f64 y) x)","(*.f64 x (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(*.f64 (log.f64 y) x)","(*.f64 x (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (log.f64 y)))","(*.f64 (-.f64 x 1) (log.f64 y))","(*.f64 (+.f64 x -1) (log.f64 y))"]],"stop":[["node limit",1]],"time":49.030029296875,"type":"simplify"},{"compiler":[[6641,4345]],"time":70.748046875,"type":"eval"},{"alts":[["(-.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 5) (cbrt.f64 (cbrt.f64 (+.f64 x -1)))) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",0.38585165433081864],["(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t)","fresh",0.6672755241907745],["(-.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",14.96226503907377],["(-.f64 (/.f64 (*.f64 (fma.f64 x x -1) (log.f64 y)) (+.f64 x 1)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",12.828125],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","done",0.41450893560039836],["(-.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","done",0.24971265861039993],["(-.f64 (*.f64 (*.f64 (log.f64 y) (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) 3/2) 2)) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",0.33602022698949413],["(-.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",12.590507519536885],["(-.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",30.30859375],["(-.f64 (*.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 4))) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","fresh",0.2932815304623596],["(-.f64 (*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","done",0.2608376465266302]],"compiler":[[34,27],[17,12],[22,17],[24,17],[22,17],[27,21],[32,26],[27,21],[30,23],[36,29],[27,21]],"count":[[251,11]],"kept":[{"done":[2,2],"fresh":[7,6],"new":[241,2],"picked":[1,1]}],"min-error":[0.0234375],"time":65.992919921875,"type":"prune"},{"accuracy":[0.1328125],"baseline":[0.1328125],"branch":[["x",0.1328125,1],["y",0.1328125,1],["z",0.1328125,1],["t",0.1328125,1],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)",0.1328125,1],["(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))))",0.1328125,1],["(-.f64 x 1)",0.1328125,1],["(-.f64 z 1)",0.1328125,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[21,16],[19,15],[7,6],[7,6],[481,296]],"count":[[21,1]],"inputs":[["(-.f64 (*.f64 (*.f64 (log.f64 y) (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) 3/2) 2)) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (*.f64 (*.f64 (log.f64 y) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 4))) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 5) (cbrt.f64 (cbrt.f64 (+.f64 x -1)))) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (/.f64 (*.f64 (fma.f64 x x -1) (log.f64 y)) (+.f64 x 1)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1) 2)) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1))) 4) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2))) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (*.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) (log.f64 y)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))","(-.f64 (/.f64 (*.f64 (log.f64 y) (+.f64 -1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) (*.f64 x -1))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 x -1))))) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))","(-.f64 (fma.f64 y (-.f64 1 z) (*.f64 (log.f64 y) (+.f64 -1 x))) t)","(-.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 2) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) (log.f64 y))) 3) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (/.f64 (*.f64 (log.f64 y) (fma.f64 x x -1)) (+.f64 x 1)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)) (neg.f64 (fma.f64 (log1p.f64 y) (-.f64 1 z) t)))","(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))","(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)"]],"link":["."],"name":["Statistics.Distribution.Beta:$cdensity from math-functions-0.1.5.2"],"oracle":[36.01289575306741],"outputs":[["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))"]],"time":64.671875,"times":[["x",7.306884765625],["y",7.4169921875],["z",7.4619140625],["t",7.5791015625],["(-.f64 (+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y)))) t)",7.626220703125],["(+.f64 (*.f64 (-.f64 x 1) (log.f64 y)) (*.f64 (-.f64 z 1) (log.f64 (-.f64 1 y))))",7.575927734375],["(-.f64 x 1)",5.677978515625],["(-.f64 z 1)",4.89501953125]],"type":"regimes"},{"compiler":[[19,14]],"egraph":[[4,40,23,0.00020554000000000001],[3,38,23,0.00016012400000000001],[2,33,23,0.00011537400000000001],[1,25,23,7.3249e-5],[0,15,23,3.5166e-5]],"inputs":[["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 (+.f64 x -1) (log.f64 y)) (fma.f64 (log1p.f64 (neg.f64 y)) (-.f64 1 z) t))"]],"stop":[["fuel",1],["saturated",1]],"time":8.8720703125,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[19,14]],"remove-preprocessing":[[]],"time":10.4111328125,"type":"end"}]
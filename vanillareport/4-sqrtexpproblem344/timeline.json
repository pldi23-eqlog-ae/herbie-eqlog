[{"compiler":[[14,12]],"method":["search"],"sampling":[[12,0.3138115406036377,0.4431428909301758,0.24304556846618652],[11,0.3133234977722168,0.4441189765930176,0.24255752563476563],[10,0.312347412109375,0.4450950622558594,0.24255752563476563],[9,0.3084430694580078,0.44899940490722656,0.24255752563476563],[8,0.3045387268066406,0.45290374755859375,0.24255752563476563],[7,0.29673004150390625,0.4685211181640625,0.23474884033203125],[6,0.2811126708984375,0.499755859375,0.2191314697265625],[5,0.2498779296875,0.562225341796875,0.187896728515625],[4,0.2498779296875,0.62469482421875,0.12542724609375],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":72.58984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.714599609375,49],["body",512,"valid",151.23486328125,1338],["body",1024,"valid",598.157470703125,2806],["body",256,"valid",182.310302734375,3828],["body",2048,"valid",73.2998046875,284]],"time":1015.47607421875,"type":"sample"},{"compiler":[[13,11]],"egraph":[[0,1,1,1.5e-6],[6,1341,8,0.013179249],[5,349,8,0.002962124],[4,127,11,0.001145666],[3,59,13,0.000571957],[2,34,13,0.000318624],[1,25,13,0.000167791],[0,11,13,7.8416e-5]],"inputs":[["0"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (+.f64 1 (exp.f64 x)) 1))","(sqrt.f64 (+.f64 1 (exp.f64 x)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":36.5830078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[6,1341,8,0.012925790999999999],[5,349,8,0.002921249],[4,127,11,0.001118958],[3,59,13,0.000542416],[2,34,13,0.000294583],[1,25,13,0.000161333],[0,11,13,7.2041e-5]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (+.f64 1 (exp.f64 x)) 1))","(sqrt.f64 (+.f64 1 (exp.f64 x)))"]],"stop":[["node limit",1]],"time":23.802978515625,"type":"simplify"},{"compiler":[[18,14]],"time":0.4150390625,"type":"eval"},{"alts":[["(sqrt.f64 (+.f64 1 (exp.f64 x)))","next",0.0078125]],"compiler":[[6,5],[6,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.765869140625,"type":"prune"},{"compiler":[[14,8]],"locations":[["(+.f64 1 (exp.f64 x))",0.00390625,true],["(sqrt.f64 (+.f64 1 (exp.f64 x)))",0.0078125,true]],"time":3.401123046875,"type":"localize"},{"count":[[2,8]],"series":[["(+.f64 1 (exp.f64 x))","x","-inf",0.137939453125],["(+.f64 1 (exp.f64 x))","x","inf",0.158935546875],["(+.f64 1 (exp.f64 x))","x","0",0.19091796875],["(sqrt.f64 (+.f64 1 (exp.f64 x)))","x","-inf",0.275146484375],["(sqrt.f64 (+.f64 1 (exp.f64 x)))","x","inf",0.349853515625],["(sqrt.f64 (+.f64 1 (exp.f64 x)))","x","0",0.56103515625]],"time":1.7470703125,"type":"series"},{"count":[[2,58]],"egraph":[[2,1429,14,0.015065667000000001],[1,118,14,0.002104167],[0,6,14,0.000178917]],"inputs":[["(sqrt.f64 (+.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (+.f64 1 (exp.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))) (cbrt.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) (cbrt.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 1/4) (pow.f64 (+.f64 1 (exp.f64 x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) 2)) (sqrt.f64 (cbrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) 2) 1/2) (pow.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3))) (sqrt.f64 (+.f64 1 (*.f64 (exp.f64 x) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 1 (exp.f64 (+.f64 x x)))) (sqrt.f64 (-.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (exp.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (exp.f64 x)) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 1 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (-.f64 1 (exp.f64 x))) (/.f64 (exp.f64 (+.f64 x x)) (-.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 (exp.f64 x))) (sqrt.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) (pow.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) (*.f64 (cbrt.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))) (sqrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) 2) (cbrt.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 1/4) (*.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 1/4) (sqrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3)) (/.f64 1 (+.f64 1 (*.f64 (exp.f64 x) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (exp.f64 (+.f64 x x))) (/.f64 1 (-.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (+.f64 1 (exp.f64 x))) (pow.f64 (+.f64 1 (exp.f64 x)) 1/4)) (pow.f64 (+.f64 1 (exp.f64 x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (+.f64 1 (exp.f64 x))) (cbrt.f64 (+.f64 1 (exp.f64 x)))) (cbrt.f64 (sqrt.f64 (+.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (*.f64 (exp.f64 x) (expm1.f64 x))) (+.f64 1 (pow.f64 (exp.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (exp.f64 x)) (-.f64 1 (exp.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3)) (+.f64 1 (*.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3)) (+.f64 (exp.f64 (+.f64 x x)) (-.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (exp.f64 (+.f64 x x))) (-.f64 1 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3))) (neg.f64 (+.f64 1 (*.f64 (exp.f64 x) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (exp.f64 (+.f64 x x)))) (neg.f64 (-.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (+.f64 x x)) 1) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1 (exp.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 x)) (sqrt.f64 (exp.f64 x)) 1)))))"]],"rules":[["egg-rr",35],["egg-rr",23]],"stop":[["node limit",1]],"time":35.20703125,"type":"rewrite"},{"count":[[66,71]],"egraph":[[4,5494,103,0.021478333000000002],[3,1110,103,0.009404667],[2,339,131,0.002334208],[1,109,137,0.000854458],[0,35,169,0.000180208]],"inputs":[["(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","2","(+.f64 2 x)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(fma.f64 1/2 (/.f64 x (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x))) (/.f64 x (sqrt.f64 2)))))","(fma.f64 1/2 (+.f64 (/.f64 x (sqrt.f64 2)) (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x)))) (sqrt.f64 2))","(fma.f64 1/2 (fma.f64 (-.f64 (/.f64 1/2 (sqrt.f64 2)) (/.f64 (/.f64 1/4 (sqrt.f64 2)) 2)) (*.f64 x x) (/.f64 x (sqrt.f64 2))) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (*.f64 (/.f64 1/2 (sqrt.f64 2)) (+.f64 x (*.f64 x (*.f64 x 3/8)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 1/2 (/.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (/.f64 (sqrt.f64 2) (pow.f64 x 3))) (*.f64 1/2 (+.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x))) (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 1/2 (+.f64 (/.f64 x (sqrt.f64 2)) (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x)))) (/.f64 (*.f64 7/192 (pow.f64 x 3)) (sqrt.f64 2))))","(fma.f64 1/2 (fma.f64 (/.f64 7/96 (sqrt.f64 2)) (pow.f64 x 3) (fma.f64 (-.f64 (/.f64 1/2 (sqrt.f64 2)) (/.f64 (/.f64 1/4 (sqrt.f64 2)) 2)) (*.f64 x x) (/.f64 x (sqrt.f64 2)))) (sqrt.f64 2))","(+.f64 (*.f64 (/.f64 1/2 (sqrt.f64 2)) (+.f64 x (*.f64 x (*.f64 x 3/8)))) (fma.f64 (/.f64 7/192 (sqrt.f64 2)) (pow.f64 x 3) (sqrt.f64 2)))","(+.f64 (sqrt.f64 2) (fma.f64 (/.f64 3/16 (sqrt.f64 2)) (*.f64 x x) (*.f64 (/.f64 1/2 (sqrt.f64 2)) (+.f64 x (*.f64 7/96 (pow.f64 x 3))))))","2","(+.f64 2 x)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 2 (fma.f64 1/2 (*.f64 x x) x))","(fma.f64 (fma.f64 1/2 x 1) x 2)","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(fma.f64 1/6 (pow.f64 x 3) (+.f64 2 (fma.f64 1/2 (*.f64 x x) x)))","(+.f64 (fma.f64 1/2 (*.f64 x x) x) (fma.f64 1/6 (pow.f64 x 3) 2))","(+.f64 2 (fma.f64 1/6 (pow.f64 x 3) (fma.f64 1/2 (*.f64 x x) x)))","(fma.f64 (fma.f64 1/2 x 1) x (fma.f64 1/6 (pow.f64 x 3) 2))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 (fma.f64 1/2 x 1) x 2))"]],"stop":[["node limit",1]],"time":34.14697265625,"type":"simplify"},{"compiler":[[818,581]],"time":11.708984375,"type":"eval"},{"alts":[["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))","next",0.014003759768442016],["(cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3/2))","fresh",0.25390625]],"compiler":[[12,8],[8,7],[12,8],[8,7]],"count":[[72,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[71,2],"picked":[1,0]}],"min-error":[0],"time":13.21484375,"type":"prune"},{"compiler":[[35,16]],"locations":[["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))",0.0078125,true],["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)",0.015625,true],["(fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1)",0.015625,true],["(cbrt.f64 (exp.f64 x))",0.2467985624232245,true]],"time":6.922119140625,"type":"localize"},{"count":[[4,48]],"series":[["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))","x","-inf",0.2451171875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))","x","inf",0.664794921875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))","x","0",0.199951171875],["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)","x","-inf",0.162841796875],["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)","x","inf",0.174072265625],["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)","x","0",0.17919921875],["(fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1)","x","-inf",0.5439453125],["(fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1)","x","inf",0.52392578125],["(fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1)","x","0",0.202880859375],["(cbrt.f64 (exp.f64 x))","x","-inf",0.9599609375],["(cbrt.f64 (exp.f64 x))","x","inf",1.324951171875],["(cbrt.f64 (exp.f64 x))","x","0",0.262939453125]],"time":5.60791015625,"type":"series"},{"count":[[4,81]],"egraph":[[2,1733,27,0.016836416],[1,171,27,0.002726291],[0,9,27,0.000258125]],"inputs":[["(cbrt.f64 (exp.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1)","(pow.f64 (cbrt.f64 (exp.f64 x)) 2)","(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (cbrt.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 1/6) (pow.f64 (exp.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 1/3) (pow.f64 (sqrt.f64 (exp.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (exp.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (exp.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1)) (sqrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) (*.f64 (cbrt.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))) (sqrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2) (cbrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 1/4) (*.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 1/4) (sqrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1)) (pow.f64 (+.f64 (exp.f64 x) 1) 1/4)) (pow.f64 (+.f64 (exp.f64 x) 1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1)) (cbrt.f64 (+.f64 (exp.f64 x) 1))) (cbrt.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (exp.f64 x) 3) 1) (+.f64 (pow.f64 (exp.f64 x) 2) (-.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 x) 2) 1) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (exp.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (exp.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 x)) (pow.f64 (exp.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 1/6) (*.f64 (pow.f64 (exp.f64 x) 1/6) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2)) (cbrt.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (*.f64 x 1/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (+.f64 (exp.f64 x) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) (cbrt.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))) (cbrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 1/4) (pow.f64 (+.f64 (exp.f64 x) 1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2)) (sqrt.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2) 1/2) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (exp.f64 x) 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (exp.f64 x)) 1/2))))))"]],"rules":[["egg-rr",20],["egg-rr",16],["egg-rr",25],["egg-rr",20]],"stop":[["node limit",1]],"time":41.275146484375,"type":"rewrite"},{"count":[[129,114]],"egraph":[[4,6943,381,0.02527075],[3,1691,381,0.012750250000000001],[2,533,421,0.003689875],[1,190,433,0.0013198749999999999],[0,67,517,0.000331042]],"inputs":[["1","(+.f64 1 (*.f64 1/3 x))","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 1 (+.f64 (*.f64 1/162 (pow.f64 x 3)) (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x))))","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","2","(+.f64 2 x)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","1","(+.f64 (*.f64 2/3 x) 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (*.f64 2/9 (pow.f64 x 2))))","(+.f64 (*.f64 2/3 x) (+.f64 1 (+.f64 (*.f64 2/9 (pow.f64 x 2)) (*.f64 4/81 (pow.f64 x 3)))))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 1/3 x 1)","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 1 (fma.f64 1/18 (*.f64 x x) (*.f64 1/3 x)))","(+.f64 1 (fma.f64 1/3 x (*.f64 x (*.f64 x 1/18))))","(fma.f64 1/3 x (fma.f64 x (*.f64 x 1/18) 1))","(fma.f64 x (fma.f64 x 1/18 1/3) 1)","(+.f64 1 (+.f64 (*.f64 1/162 (pow.f64 x 3)) (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x))))","(+.f64 1 (fma.f64 1/162 (pow.f64 x 3) (fma.f64 1/18 (*.f64 x x) (*.f64 1/3 x))))","(+.f64 (fma.f64 1/162 (pow.f64 x 3) (*.f64 x (*.f64 x 1/18))) (fma.f64 1/3 x 1))","(fma.f64 1/162 (pow.f64 x 3) (fma.f64 1/3 x (fma.f64 x (*.f64 x 1/18) 1)))","(fma.f64 1/3 x (fma.f64 (*.f64 x x) (fma.f64 x 1/162 1/18) 1))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","2","(+.f64 2 x)","(+.f64 x 2)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 2 (fma.f64 1/2 (*.f64 x x) x))","(+.f64 2 (fma.f64 (*.f64 x x) 1/2 x))","(+.f64 x (fma.f64 (*.f64 x x) 1/2 2))","(fma.f64 (fma.f64 x 1/2 1) x 2)","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(fma.f64 1/6 (pow.f64 x 3) (+.f64 2 (fma.f64 1/2 (*.f64 x x) x)))","(+.f64 (fma.f64 (*.f64 x x) 1/2 x) (fma.f64 (pow.f64 x 3) 1/6 2))","(+.f64 x (fma.f64 (pow.f64 x 3) 1/6 (fma.f64 (*.f64 x x) 1/2 2)))","(fma.f64 (pow.f64 x 3) 1/6 (fma.f64 (fma.f64 x 1/2 1) x 2))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x)))","(+.f64 1 (*.f64 1 (exp.f64 x)))","(+.f64 1 (exp.f64 x))","1","(+.f64 (*.f64 2/3 x) 1)","(fma.f64 2/3 x 1)","(fma.f64 x 2/3 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (*.f64 2/9 (pow.f64 x 2))))","(+.f64 (fma.f64 2/3 x 1) (*.f64 (*.f64 x x) 2/9))","(fma.f64 x 2/3 (fma.f64 (*.f64 x x) 2/9 1))","(fma.f64 x (fma.f64 x 2/9 2/3) 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (+.f64 (*.f64 2/9 (pow.f64 x 2)) (*.f64 4/81 (pow.f64 x 3)))))","(+.f64 (fma.f64 2/3 x 1) (fma.f64 2/9 (*.f64 x x) (*.f64 (pow.f64 x 3) 4/81)))","(+.f64 (fma.f64 x 2/3 1) (fma.f64 (*.f64 x x) 2/9 (*.f64 (pow.f64 x 3) 4/81)))","(fma.f64 x 2/3 (fma.f64 (*.f64 x x) 2/9 (fma.f64 (pow.f64 x 3) 4/81 1)))","(fma.f64 (pow.f64 x 3) 4/81 (fma.f64 x (fma.f64 x 2/9 2/3) 1))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 1/2 x) (sqrt.f64 2)))","(fma.f64 1/2 (/.f64 x (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x))) (/.f64 x (sqrt.f64 2)))))","(fma.f64 1/2 (+.f64 (/.f64 x (sqrt.f64 2)) (*.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (sqrt.f64 2)) (*.f64 x x))) (sqrt.f64 2))","(fma.f64 1/2 (fma.f64 (-.f64 (/.f64 1/2 (sqrt.f64 2)) (/.f64 (/.f64 1/4 (sqrt.f64 2)) 2)) (*.f64 x x) (/.f64 x (sqrt.f64 2))) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (*.f64 (/.f64 1/2 (sqrt.f64 2)) (+.f64 x (*.f64 x (*.f64 x 3/8)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 1/2 (/.f64 (+.f64 1/6 (*.f64 -1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (/.f64 (sqrt.f64 2) (pow.f64 x 3))) (*.f64 1/2 (+.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x))) (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 1/2 (+.f64 (/.f64 x (sqrt.f64 2)) (*.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (sqrt.f64 2)) (*.f64 x x))) (/.f64 (*.f64 7/192 (pow.f64 x 3)) (sqrt.f64 2))))","(fma.f64 1/2 (fma.f64 (/.f64 7/96 (sqrt.f64 2)) (pow.f64 x 3) (fma.f64 (-.f64 (/.f64 1/2 (sqrt.f64 2)) (/.f64 (/.f64 1/4 (sqrt.f64 2)) 2)) (*.f64 x x) (/.f64 x (sqrt.f64 2)))) (sqrt.f64 2))","(+.f64 (*.f64 (/.f64 1/2 (sqrt.f64 2)) (+.f64 x (*.f64 x (*.f64 x 3/8)))) (fma.f64 (/.f64 7/192 (sqrt.f64 2)) (pow.f64 x 3) (sqrt.f64 2)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (*.f64 (pow.f64 1 1/3) (exp.f64 x))))","(sqrt.f64 (+.f64 1 (*.f64 1 (exp.f64 x))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))"]],"stop":[["node limit",1]],"time":43.0439453125,"type":"simplify"},{"compiler":[[1858,1179]],"time":24.946044921875,"type":"eval"},{"alts":[["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))","done",0.014003759768442016],["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))","next",0.25390625]],"compiler":[[12,8],[8,7],[8,7]],"count":[[144,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[142,1],"picked":[1,1]}],"min-error":[0],"time":37.760986328125,"type":"prune"},{"compiler":[[23,15]],"locations":[["(+.f64 (exp.f64 x) 1)",0.00390625,true],["(pow.f64 (+.f64 (exp.f64 x) 1) 3/2)",0.01171875,true],["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))",0.23989503563729753,true]],"time":6.446044921875,"type":"localize"},{"count":[[3,36]],"series":[["(+.f64 (exp.f64 x) 1)","x","-inf",0.137939453125],["(+.f64 (exp.f64 x) 1)","x","inf",0.156982421875],["(+.f64 (exp.f64 x) 1)","x","0",0.152099609375],["(pow.f64 (+.f64 (exp.f64 x) 1) 3/2)","x","-inf",11.1650390625],["(pow.f64 (+.f64 (exp.f64 x) 1) 3/2)","x","inf",15.753173828125],["(pow.f64 (+.f64 (exp.f64 x) 1) 3/2)","x","0",0.3720703125],["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))","x","-inf",0.333984375],["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))","x","inf",0.3671875],["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))","x","0",1.133056640625]],"time":29.7080078125,"type":"series"},{"count":[[3,75]],"egraph":[[2,1920,23,0.017834791],[1,164,23,0.0029822909999999998],[0,8,26,0.000275708]],"inputs":[["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))","(pow.f64 (+.f64 (exp.f64 x) 1) 3/2)","(+.f64 (exp.f64 x) 1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 1 (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) (cbrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) (cbrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2)) (sqrt.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (hypot.f64 1 (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/4) 1/3) (pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/4) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3))) (sqrt.f64 (+.f64 (pow.f64 (exp.f64 x) 2) (-.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) -1)) (sqrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (exp.f64 x) 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (+.f64 (exp.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 x) 1) (hypot.f64 1 (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) (+.f64 (exp.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/4) (pow.f64 (+.f64 (exp.f64 x) 1) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 3/2) (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2) 3/2) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) 3/2) (pow.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 x) 1) (cbrt.f64 (+.f64 (exp.f64 x) 1))) (cbrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 x) 1) (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))))) (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3/2 (log1p.f64 (exp.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (exp.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (exp.f64 x) 2) (expm1.f64 x)) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (exp.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) (hypot.f64 1 (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) (*.f64 (cbrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 2) (cbrt.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) (*.f64 (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))) (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3)) (/.f64 1 (+.f64 (pow.f64 (exp.f64 x) 2) (-.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (exp.f64 x) (exp.f64 x) -1) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/4) (sqrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) (cbrt.f64 (+.f64 (exp.f64 x) 1))) (cbrt.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (exp.f64 x) 2) (-.f64 1 (exp.f64 x))) (+.f64 1 (pow.f64 (exp.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3)) (+.f64 (pow.f64 (exp.f64 x) 2) (-.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3)) (+.f64 1 (-.f64 (pow.f64 (exp.f64 x) 2) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (exp.f64 x) (exp.f64 x) -1) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (exp.f64 x) 3))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) 2) (-.f64 1 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) -1)) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (exp.f64 x) 2)) (-.f64 1 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (exp.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 1 (sqrt.f64 (exp.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 x)) (sqrt.f64 (exp.f64 x)) 1)))))"]],"rules":[["egg-rr",35],["egg-rr",17],["egg-rr",23]],"stop":[["node limit",1]],"time":41.870849609375,"type":"rewrite"},{"count":[[111,99]],"egraph":[[4,6241,356,0.024677959],[3,1617,356,0.011900334],[2,489,388,0.003493751],[1,166,412,0.001198459],[0,58,446,0.000282917]],"inputs":[["(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 8)","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (sqrt.f64 8))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (sqrt.f64 8)))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (+.f64 (sqrt.f64 8) (*.f64 27/128 (*.f64 (sqrt.f64 8) (pow.f64 x 3))))))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","2","(+.f64 2 x)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(fma.f64 1/2 (/.f64 x (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x))) (/.f64 x (sqrt.f64 2)))))","(fma.f64 1/2 (+.f64 (/.f64 x (sqrt.f64 2)) (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x)))) (sqrt.f64 2))","(fma.f64 1/2 (fma.f64 (-.f64 (/.f64 1/2 (sqrt.f64 2)) (/.f64 (/.f64 1/4 (sqrt.f64 2)) 2)) (*.f64 x x) (/.f64 x (sqrt.f64 2))) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (*.f64 (/.f64 1/2 (sqrt.f64 2)) (+.f64 x (*.f64 x (*.f64 x 3/8)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 1/2 (/.f64 (+.f64 1/6 (*.f64 -1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (/.f64 (sqrt.f64 2) (pow.f64 x 3))) (*.f64 1/2 (+.f64 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x))) (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 1/2 (+.f64 (/.f64 x (sqrt.f64 2)) (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (/.f64 (sqrt.f64 2) (*.f64 x x)))) (/.f64 7/192 (/.f64 (sqrt.f64 2) (pow.f64 x 3)))))","(fma.f64 1/2 (fma.f64 (/.f64 7/96 (sqrt.f64 2)) (pow.f64 x 3) (fma.f64 (-.f64 (/.f64 1/2 (sqrt.f64 2)) (/.f64 (/.f64 1/4 (sqrt.f64 2)) 2)) (*.f64 x x) (/.f64 x (sqrt.f64 2)))) (sqrt.f64 2))","(fma.f64 1/2 (fma.f64 (/.f64 7/96 (sqrt.f64 2)) (pow.f64 x 3) (fma.f64 (/.f64 3/8 (sqrt.f64 2)) (*.f64 x x) (/.f64 x (sqrt.f64 2)))) (sqrt.f64 2))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 8)","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (sqrt.f64 8))","(fma.f64 3/4 (*.f64 x (sqrt.f64 8)) (sqrt.f64 8))","(*.f64 (+.f64 (*.f64 x 3/4) 1) (sqrt.f64 8))","(*.f64 (sqrt.f64 8) (+.f64 1 (*.f64 x 3/4)))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (sqrt.f64 8)))","(fma.f64 3/4 (*.f64 x (sqrt.f64 8)) (fma.f64 15/32 (*.f64 (*.f64 x x) (sqrt.f64 8)) (sqrt.f64 8)))","(fma.f64 3/4 (*.f64 x (sqrt.f64 8)) (fma.f64 15/32 (*.f64 x (*.f64 x (sqrt.f64 8))) (sqrt.f64 8)))","(+.f64 (sqrt.f64 8) (*.f64 (sqrt.f64 8) (+.f64 (*.f64 x 3/4) (*.f64 x (*.f64 x 15/32)))))","(+.f64 (sqrt.f64 8) (*.f64 x (*.f64 (sqrt.f64 8) (+.f64 3/4 (*.f64 x 15/32)))))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (+.f64 (sqrt.f64 8) (*.f64 27/128 (*.f64 (sqrt.f64 8) (pow.f64 x 3))))))","(fma.f64 3/4 (*.f64 x (sqrt.f64 8)) (fma.f64 15/32 (*.f64 (*.f64 x x) (sqrt.f64 8)) (+.f64 (sqrt.f64 8) (*.f64 27/128 (*.f64 (pow.f64 x 3) (sqrt.f64 8))))))","(fma.f64 3/4 (*.f64 x (sqrt.f64 8)) (fma.f64 15/32 (*.f64 x (*.f64 x (sqrt.f64 8))) (fma.f64 27/128 (*.f64 (pow.f64 x 3) (sqrt.f64 8)) (sqrt.f64 8))))","(+.f64 (*.f64 (+.f64 (*.f64 x 3/4) 1) (sqrt.f64 8)) (*.f64 (sqrt.f64 8) (+.f64 (*.f64 (pow.f64 x 3) 27/128) (*.f64 x (*.f64 x 15/32)))))","(+.f64 (sqrt.f64 8) (*.f64 (sqrt.f64 8) (+.f64 (*.f64 x 3/4) (*.f64 (*.f64 x x) (+.f64 15/32 (*.f64 x 27/128))))))","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","(sqrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3))","(pow.f64 (+.f64 1 (exp.f64 x)) 3/2)","2","(+.f64 2 x)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 2 (fma.f64 1/2 (*.f64 x x) x))","(+.f64 x (fma.f64 1/2 (*.f64 x x) 2))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(fma.f64 1/6 (pow.f64 x 3) (+.f64 2 (fma.f64 1/2 (*.f64 x x) x)))","(+.f64 (fma.f64 1/2 (*.f64 x x) x) (fma.f64 1/6 (pow.f64 x 3) 2))","(fma.f64 1/6 (pow.f64 x 3) (+.f64 x (fma.f64 1/2 (*.f64 x x) 2)))","(+.f64 2 (fma.f64 1/6 (pow.f64 x 3) (fma.f64 1/2 (*.f64 x x) x)))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))","(+.f64 1 (exp.f64 x))"]],"stop":[["node limit",1]],"time":40.916015625,"type":"simplify"},{"compiler":[[1223,884]],"time":17.947998046875,"type":"eval"},{"alts":[["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))","done",0.014003759768442016],["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))","done",0.25390625]],"compiler":[[12,8],[8,7]],"count":[[101,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[99,0],"picked":[1,1]}],"min-error":[0],"time":24.363037109375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))",0.0078125,1],["(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))",0.0078125,1]],"compiler":[[2,1],[13,11],[12,10],[43,30]],"count":[[5,1]],"inputs":[["(cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) 1) 3/2))","(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (cbrt.f64 (exp.f64 x)) 1))","(cbrt.f64 (pow.f64 (+.f64 1 (exp.f64 x)) 3/2))","(sqrt.f64 (+.f64 1 (exp.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))"]],"link":["."],"name":["sqrtexp (problem 3.4.4)"],"oracle":[42.17819246969043],"outputs":[["(sqrt.f64 (+.f64 1 (exp.f64 x)))"]],"time":7.9150390625,"times":[["x",2.903076171875],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))",1.89697265625],["(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))",2.0029296875]],"type":"regimes"},{"compiler":[[6,5]],"egraph":[[1,9,8,3.3209e-5],[0,6,8,2.1792e-5]],"inputs":[["(sqrt.f64 (+.f64 1 (exp.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 1 (exp.f64 x)))"]],"stop":[["done",1],["saturated",1]],"time":8.18701171875,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[6,5]],"remove-preprocessing":[[]],"time":7.743896484375,"type":"end"}]
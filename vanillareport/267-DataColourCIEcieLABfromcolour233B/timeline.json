[{"compiler":[[7,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.238037109375,"type":"analyze"},{"outcomes":[["body",256,"valid",216.2587890625,8256]],"time":223.720947265625,"type":"sample"},{"compiler":[[6,5]],"egraph":[[0,1,1,1.042e-6],[1,7,7,5.4417000000000004e-5],[0,6,7,3.15e-5]],"inputs":[["0"],["(/.f64 (+.f64 x 16) 116)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (+.f64 x 16) 116)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.5849609375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,7,7,5.2499e-5],[0,6,7,2.9833e-5]],"inputs":[["(/.f64 (+.f64 x 16) 116)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x 16) 116)"]],"stop":[["saturated",1]],"time":10.703857421875,"type":"simplify"},{"compiler":[[6,5]],"time":0.2060546875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x 16) 116)","next",0.00390625]],"compiler":[[6,5],[6,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.6591796875,"type":"prune"},{"compiler":[[12,9]],"locations":[["(/.f64 (+.f64 x 16) 116)",0.00390625,true]],"time":2.787841796875,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (+.f64 x 16) 116)","x","-inf",0.299072265625],["(/.f64 (+.f64 x 16) 116)","x","inf",0.346923828125],["(/.f64 (+.f64 x 16) 116)","x","0",0.26806640625]],"time":0.9560546875,"type":"series"},{"count":[[1,23]],"egraph":[[2,1742,7,0.017780417],[1,141,7,0.0026888750000000003],[0,6,7,0.000257333]],"inputs":[["(/.f64 (+.f64 x 16) 116)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (+.f64 x 16) 1/116)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 16) 1/116)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x 16) 1/116) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x 16) 1/116))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 16)) 2) (*.f64 (cbrt.f64 (+.f64 x 16)) 1/116))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 x 16) 1/116)) (sqrt.f64 (*.f64 (+.f64 x 16) 1/116)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 16)) (*.f64 (sqrt.f64 (+.f64 x 16)) 1/116))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -16 (neg.f64 x)) -1/116)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/116 (+.f64 x 16))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x 16) 1/116) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x 16) 1/116) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x 16) 1/116)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 116 (+.f64 x 16)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x 16) -116))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x 16)) 1/116))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x 16) 1/116) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x 16) 1/116)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x 16) 1/116)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x 16) 1/116)))))))"]],"rules":[["egg-rr",23]],"stop":[["node limit",1]],"time":34.613037109375,"type":"rewrite"},{"count":[[35,27]],"egraph":[[2,10,54,0.000124417],[1,8,54,8.137500000000001e-5],[0,6,72,4.2333e-5]],"inputs":[["4/29","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(*.f64 1/116 x)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(*.f64 1/116 x)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))"]],"method":["egg-herbie"],"outputs":[["4/29","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(*.f64 1/116 x)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(*.f64 1/116 x)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(fma.f64 1/116 x 4/29)"]],"stop":[["saturated",1]],"time":11.116943359375,"type":"simplify"},{"compiler":[[209,178]],"time":3.721923828125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))","next",15.111660009768443],["(/.f64 (+.f64 x 16) 116)","done",0.00390625]],"compiler":[[16,14],[6,5],[16,14]],"count":[[28,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[27,1],"picked":[1,1]}],"min-error":[0],"time":3.97412109375,"type":"prune"},{"compiler":[[55,46]],"locations":[["(*.f64 (+.f64 x 16) 1/116)",0.05859375,true],["(*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)",0.17025375976844204,true],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))",0.185878759768442,true],["(cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456))",14.312956252068929,true]],"time":14.47900390625,"type":"localize"},{"count":[[4,40]],"series":[["(*.f64 (+.f64 x 16) 1/116)","x","-inf",0.134033203125],["(*.f64 (+.f64 x 16) 1/116)","x","inf",0.135986328125],["(*.f64 (+.f64 x 16) 1/116)","x","0",0.1630859375],["(*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)","x","-inf",0.2119140625],["(*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)","x","inf",0.2470703125],["(*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)","x","0",0.2119140625],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))","x","-inf",0.427001953125],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))","x","inf",0.43408203125],["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))","x","0",1.947021484375],["(cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456))","x","-inf",0.36083984375],["(cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456))","x","inf",0.5849609375],["(cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456))","x","0",1.337890625]],"time":6.39892578125,"type":"series"},{"count":[[4,213]],"egraph":[[2,3054,28,0.025154333],[1,274,36,0.00462575],[0,13,64,0.000457625]],"inputs":[["(cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456))","(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))","(*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)","(*.f64 (+.f64 x 16) 1/116)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) (cbrt.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 4) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 16)) 2) (cbrt.f64 1/13456))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/13456) (pow.f64 (cbrt.f64 (+.f64 x 16)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 16)) (*.f64 (cbrt.f64 1/116) (cbrt.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 1/116 4/29)) (pow.f64 (fma.f64 x 1/116 4/29) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 1/116 4/29) 1/6) (sqrt.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 5) (cbrt.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) (cbrt.f64 (+.f64 x 16))) (cbrt.f64 1/116))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/116 4/29) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 4) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 6) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/116 4/29)) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 1/6) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 3) 2/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))) 2)) (cbrt.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))))) (sqrt.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 1/116 4/29))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/116) 4/29)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 4/29 (*.f64 x 1/116))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 4/29 (*.f64 1/116 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/116 x) 4/29)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/116 4/29))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/116 4/29)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x 1/116 4/29))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 4096 (pow.f64 x 3)) 1/116) (-.f64 (fma.f64 x x 256) (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -256) 1/116) (+.f64 x -16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/116 (+.f64 4096 (pow.f64 x 3))) (-.f64 (fma.f64 x x 256) (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/116 (fma.f64 x x -256)) (+.f64 x -16))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/116 4/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/116 4/29)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x 1/116 4/29))) 2)) (cbrt.f64 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x 1/116 4/29)))) (sqrt.f64 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 x 1/116 4/29))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 1/116 4/29) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x 1/116 4/29))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x 1/116 4/29))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/116 4/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/116 x 4/29)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (fma.f64 x 1/116 4/29) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/116 4/29) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2)) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/116 4/29)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29)))) 2)) (cbrt.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))))) (sqrt.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 1/116 4/29) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 1/116 4/29) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x 1/116 4/29) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) (log.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) (log.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1) (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (fma.f64 x 1/116 4/29)) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 4)) (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 4)) (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 1/116 4/29))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/116) 4/29)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 4/29 (*.f64 x 1/116))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 4/29 (*.f64 1/116 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/116 x) 4/29)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/116 4/29))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/116 4/29)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x 1/116 4/29))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 4096 (pow.f64 x 3)) 1/116) (-.f64 (fma.f64 x x 256) (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -256) 1/116) (+.f64 x -16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/116 (+.f64 4096 (pow.f64 x 3))) (-.f64 (fma.f64 x x 256) (*.f64 x 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/116 (fma.f64 x x -256)) (+.f64 x -16))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/116 4/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/116 4/29)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/116 4/29) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x 1/116 4/29))) 2)) (cbrt.f64 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x 1/116 4/29)))) (sqrt.f64 (log.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 1/116 4/29) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 x 1/116 4/29))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x 1/116 4/29))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 1/116 4/29) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 1/116 4/29)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x 1/116 4/29))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x 1/116 4/29))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (*.f64 2 (log.f64 (fma.f64 x 1/116 4/29))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 x 1/116 4/29)) 1/3) (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x 1/116 4/29))) 1) (*.f64 (*.f64 2/3 (log.f64 (fma.f64 x 1/116 4/29))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/116 4/29)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/116 x 4/29)))))"]],"rules":[["egg-rr",59],["egg-rr",38],["egg-rr",59],["egg-rr",57]],"stop":[["node limit",1]],"time":56.123046875,"type":"rewrite"},{"count":[[253,179]],"egraph":[[3,2736,541,0.015642334],[2,546,541,0.004728417],[1,174,558,0.001263751],[0,65,660,0.000350042]],"inputs":[["(*.f64 (cbrt.f64 1/13456) (cbrt.f64 256))","(+.f64 (*.f64 32/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)) 1/3) (*.f64 (cbrt.f64 1/13456) x))) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256)))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (-.f64 1 (*.f64 1024/3 (pow.f64 (/.f64 1 (cbrt.f64 256)) 1/3))) (*.f64 (cbrt.f64 1/13456) (pow.f64 x 2))) (pow.f64 (cbrt.f64 256) 2))) (+.f64 (*.f64 32/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)) 1/3) (*.f64 (cbrt.f64 1/13456) x))) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256))))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 1/13456) (*.f64 (pow.f64 x 3) (+.f64 (*.f64 64/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 5)) 1/3) (-.f64 1 (*.f64 1024/3 (pow.f64 (/.f64 1 (cbrt.f64 256)) 1/3))))) (*.f64 32768/27 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)))))) (pow.f64 (cbrt.f64 256) 2))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (-.f64 1 (*.f64 1024/3 (pow.f64 (/.f64 1 (cbrt.f64 256)) 1/3))) (*.f64 (cbrt.f64 1/13456) (pow.f64 x 2))) (pow.f64 (cbrt.f64 256) 2))) (+.f64 (*.f64 32/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)) 1/3) (*.f64 (cbrt.f64 1/13456) x))) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256)))))","(*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","16/841","(+.f64 (*.f64 2/841 x) 16/841)","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(*.f64 1/13456 (pow.f64 x 2))","(+.f64 (*.f64 2/841 x) (*.f64 1/13456 (pow.f64 x 2)))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(*.f64 1/13456 (pow.f64 x 2))","(+.f64 (*.f64 2/841 x) (*.f64 1/13456 (pow.f64 x 2)))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","4/29","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(*.f64 1/116 x)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(*.f64 1/116 x)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 1/116 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 1/13456) (cbrt.f64 256))","(+.f64 (*.f64 32/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)) 1/3) (*.f64 (cbrt.f64 1/13456) x))) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256)))","(fma.f64 32/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) (*.f64 (cbrt.f64 1/13456) x)) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256)))","(fma.f64 (cbrt.f64 1/13456) (cbrt.f64 256) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) (*.f64 (*.f64 (cbrt.f64 1/13456) x) 32/3)))","(*.f64 (cbrt.f64 1/13456) (+.f64 (cbrt.f64 256) (*.f64 32/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) x))))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (-.f64 1 (*.f64 1024/3 (pow.f64 (/.f64 1 (cbrt.f64 256)) 1/3))) (*.f64 (cbrt.f64 1/13456) (pow.f64 x 2))) (pow.f64 (cbrt.f64 256) 2))) (+.f64 (*.f64 32/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)) 1/3) (*.f64 (cbrt.f64 1/13456) x))) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256))))","(fma.f64 1/3 (/.f64 (+.f64 1 (*.f64 -1024/3 (cbrt.f64 (/.f64 1 (cbrt.f64 256))))) (/.f64 (pow.f64 (cbrt.f64 256) 2) (*.f64 (cbrt.f64 1/13456) (*.f64 x x)))) (fma.f64 32/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) (*.f64 (cbrt.f64 1/13456) x)) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256))))","(fma.f64 1/3 (/.f64 (+.f64 1 (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3)) (/.f64 (pow.f64 (cbrt.f64 256) 2) (*.f64 (cbrt.f64 1/13456) (*.f64 x x)))) (fma.f64 (cbrt.f64 1/13456) (cbrt.f64 256) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) (*.f64 (*.f64 (cbrt.f64 1/13456) x) 32/3))))","(fma.f64 1/3 (*.f64 (/.f64 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3 1) (/.f64 (pow.f64 (cbrt.f64 256) 2) (*.f64 x x))) (cbrt.f64 1/13456)) (*.f64 (cbrt.f64 1/13456) (+.f64 (cbrt.f64 256) (*.f64 32/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) x)))))","(fma.f64 32/3 (*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) x)) (*.f64 (cbrt.f64 1/13456) (+.f64 (cbrt.f64 256) (*.f64 (/.f64 (*.f64 1/3 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3 1)) (/.f64 (pow.f64 (cbrt.f64 256) 2) x)) x))))","(+.f64 (*.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 1/13456) (*.f64 (pow.f64 x 3) (+.f64 (*.f64 64/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 5)) 1/3) (-.f64 1 (*.f64 1024/3 (pow.f64 (/.f64 1 (cbrt.f64 256)) 1/3))))) (*.f64 32768/27 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)))))) (pow.f64 (cbrt.f64 256) 2))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (-.f64 1 (*.f64 1024/3 (pow.f64 (/.f64 1 (cbrt.f64 256)) 1/3))) (*.f64 (cbrt.f64 1/13456) (pow.f64 x 2))) (pow.f64 (cbrt.f64 256) 2))) (+.f64 (*.f64 32/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2)) 1/3) (*.f64 (cbrt.f64 1/13456) x))) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256)))))","(fma.f64 -1/3 (/.f64 (*.f64 (*.f64 (cbrt.f64 1/13456) (pow.f64 x 3)) (fma.f64 64/3 (*.f64 (+.f64 1 (*.f64 -1024/3 (cbrt.f64 (/.f64 1 (cbrt.f64 256))))) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 5)))) (/.f64 32768/27 (pow.f64 (cbrt.f64 256) 2)))) (pow.f64 (cbrt.f64 256) 2)) (fma.f64 1/3 (/.f64 (+.f64 1 (*.f64 -1024/3 (cbrt.f64 (/.f64 1 (cbrt.f64 256))))) (/.f64 (pow.f64 (cbrt.f64 256) 2) (*.f64 (cbrt.f64 1/13456) (*.f64 x x)))) (fma.f64 32/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) (*.f64 (cbrt.f64 1/13456) x)) (*.f64 (cbrt.f64 1/13456) (cbrt.f64 256)))))","(fma.f64 -1/3 (*.f64 (/.f64 (cbrt.f64 1/13456) (pow.f64 (cbrt.f64 256) 2)) (*.f64 (pow.f64 x 3) (fma.f64 64/3 (*.f64 (+.f64 1 (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 5)))) (/.f64 32768/27 (pow.f64 (cbrt.f64 256) 2))))) (fma.f64 1/3 (/.f64 (+.f64 1 (*.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3)) (/.f64 (pow.f64 (cbrt.f64 256) 2) (*.f64 (cbrt.f64 1/13456) (*.f64 x x)))) (fma.f64 (cbrt.f64 1/13456) (cbrt.f64 256) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) (*.f64 (*.f64 (cbrt.f64 1/13456) x) 32/3)))))","(fma.f64 1/3 (*.f64 (/.f64 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3 1) (/.f64 (pow.f64 (cbrt.f64 256) 2) (*.f64 x x))) (cbrt.f64 1/13456)) (fma.f64 -1/3 (*.f64 (*.f64 (pow.f64 x 3) (fma.f64 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3 1) (*.f64 64/3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 5)))) (/.f64 32768/27 (pow.f64 (cbrt.f64 256) 2)))) (/.f64 (cbrt.f64 1/13456) (pow.f64 (cbrt.f64 256) 2))) (*.f64 (cbrt.f64 1/13456) (+.f64 (cbrt.f64 256) (*.f64 32/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) x))))))","(fma.f64 1/3 (*.f64 (cbrt.f64 1/13456) (*.f64 (/.f64 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3 1) (/.f64 (pow.f64 (cbrt.f64 256) 2) x)) x)) (fma.f64 -1/3 (*.f64 (*.f64 (pow.f64 x 3) (fma.f64 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 256))) -1024/3 1) (*.f64 64/3 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 5)))) (/.f64 32768/27 (pow.f64 (cbrt.f64 256) 2)))) (/.f64 (cbrt.f64 1/13456) (pow.f64 (cbrt.f64 256) 2))) (*.f64 (cbrt.f64 1/13456) (+.f64 (cbrt.f64 256) (*.f64 32/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 256) 2))) x))))))","(*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456)))","(*.f64 (*.f64 16 (cbrt.f64 1/116)) (cbrt.f64 1/13456))","(*.f64 (cbrt.f64 1/13456) (*.f64 16 (cbrt.f64 1/116)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x))","(*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116))","(*.f64 (cbrt.f64 1/13456) (*.f64 x (cbrt.f64 1/116)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x))","(*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116))","(*.f64 (cbrt.f64 1/13456) (*.f64 x (cbrt.f64 1/116)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","(+.f64 (*.f64 16 (*.f64 (cbrt.f64 1/116) (cbrt.f64 1/13456))) (*.f64 (cbrt.f64 1/116) (*.f64 (cbrt.f64 1/13456) x)))","(fma.f64 16 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (*.f64 (*.f64 (cbrt.f64 1/13456) x) (cbrt.f64 1/116)))","(*.f64 (*.f64 (cbrt.f64 1/13456) (cbrt.f64 1/116)) (+.f64 16 x))","(*.f64 (cbrt.f64 1/13456) (*.f64 (cbrt.f64 1/116) (+.f64 x 16)))","16/841","(+.f64 (*.f64 2/841 x) 16/841)","(fma.f64 2/841 x 16/841)","(fma.f64 x 2/841 16/841)","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (fma.f64 2/841 x 16/841) (*.f64 1/13456 (*.f64 x x)))","(fma.f64 x 2/841 (fma.f64 1/13456 (*.f64 x x) 16/841))","(fma.f64 1/13456 (*.f64 x x) (fma.f64 x 2/841 16/841))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (fma.f64 2/841 x 16/841) (*.f64 1/13456 (*.f64 x x)))","(fma.f64 x 2/841 (fma.f64 1/13456 (*.f64 x x) 16/841))","(fma.f64 1/13456 (*.f64 x x) (fma.f64 x 2/841 16/841))","(*.f64 1/13456 (pow.f64 x 2))","(*.f64 1/13456 (*.f64 x x))","(+.f64 (*.f64 2/841 x) (*.f64 1/13456 (pow.f64 x 2)))","(fma.f64 2/841 x (*.f64 1/13456 (*.f64 x x)))","(fma.f64 1/13456 (*.f64 x x) (*.f64 x 2/841))","(*.f64 x (+.f64 2/841 (*.f64 1/13456 x)))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (fma.f64 2/841 x 16/841) (*.f64 1/13456 (*.f64 x x)))","(fma.f64 x 2/841 (fma.f64 1/13456 (*.f64 x x) 16/841))","(fma.f64 1/13456 (*.f64 x x) (fma.f64 x 2/841 16/841))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (fma.f64 2/841 x 16/841) (*.f64 1/13456 (*.f64 x x)))","(fma.f64 x 2/841 (fma.f64 1/13456 (*.f64 x x) 16/841))","(fma.f64 1/13456 (*.f64 x x) (fma.f64 x 2/841 16/841))","(*.f64 1/13456 (pow.f64 x 2))","(*.f64 1/13456 (*.f64 x x))","(+.f64 (*.f64 2/841 x) (*.f64 1/13456 (pow.f64 x 2)))","(fma.f64 2/841 x (*.f64 1/13456 (*.f64 x x)))","(fma.f64 1/13456 (*.f64 x x) (*.f64 x 2/841))","(*.f64 x (+.f64 2/841 (*.f64 1/13456 x)))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (fma.f64 2/841 x 16/841) (*.f64 1/13456 (*.f64 x x)))","(fma.f64 x 2/841 (fma.f64 1/13456 (*.f64 x x) 16/841))","(fma.f64 1/13456 (*.f64 x x) (fma.f64 x 2/841 16/841))","(+.f64 (*.f64 2/841 x) (+.f64 16/841 (*.f64 1/13456 (pow.f64 x 2))))","(+.f64 (fma.f64 2/841 x 16/841) (*.f64 1/13456 (*.f64 x x)))","(fma.f64 x 2/841 (fma.f64 1/13456 (*.f64 x x) 16/841))","(fma.f64 1/13456 (*.f64 x x) (fma.f64 x 2/841 16/841))","4/29","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(*.f64 1/116 x)","(*.f64 x 1/116)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(*.f64 1/116 x)","(*.f64 x 1/116)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)","(+.f64 4/29 (*.f64 1/116 x))","(+.f64 4/29 (*.f64 x 1/116))","(fma.f64 x 1/116 4/29)"]],"stop":[["node limit",1]],"time":35.01708984375,"type":"simplify"},{"compiler":[[3042,2676]],"time":47.031005859375,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))","done",15.111660009768443],["(/.f64 (+.f64 x 16) 116)","done",0.00390625]],"compiler":[[16,14],[6,5]],"count":[[181,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[179,0],"picked":[1,1]}],"min-error":[0],"time":37.1328125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["(/.f64 (+.f64 x 16) 116)",0.00390625,1],["(+.f64 x 16)",0.00390625,1]],"compiler":[[2,1],[6,5],[4,3],[21,18]],"count":[[2,1]],"inputs":[["(*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x 16) 2) 1/13456)) (cbrt.f64 (*.f64 (+.f64 x 16) 1/116)))","(/.f64 (+.f64 x 16) 116)"]],"link":["."],"name":["Data.Colour.CIE:cieLAB from colour-2.3.3, B"],"oracle":[15.115566259768443],"outputs":[["(/.f64 (+.f64 x 16) 116)"]],"time":7.859130859375,"times":[["x",2.72509765625],["(/.f64 (+.f64 x 16) 116)",2.22314453125],["(+.f64 x 16)",2.23193359375]],"type":"regimes"},{"compiler":[[6,5]],"egraph":[[1,7,7,2.35e-5],[0,6,7,1.475e-5]],"inputs":[["(/.f64 (+.f64 x 16) 116)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x 16) 116)"]],"stop":[["done",1],["saturated",1]],"time":8.177978515625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[6,5]],"remove-preprocessing":[[]],"time":7.818115234375,"type":"end"}]
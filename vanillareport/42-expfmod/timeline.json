[{"compiler":[[12,9]],"method":["search"],"sampling":[[12,0.499755859375,0.499755859375,0.00048828125],[11,0.499755859375,0.499755859375,0.00048828125],[10,0.499755859375,0.499755859375,0.00048828125],[9,0.499755859375,0.499755859375,0.00048828125],[8,0.499755859375,0.499755859375,0.00048828125],[7,0.499755859375,0.499755859375,0.00048828125],[6,0.499755859375,0.499755859375,0.00048828125],[5,0.499755859375,0.499755859375,0.00048828125],[4,0.499755859375,0.499755859375,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":107.841064453125,"type":"analyze"},{"outcomes":[["body",512,"invalid",97.438232421875,827],["body",256,"invalid",54.465087890625,866],["body",8192,"exit",2552.46875,1596],["body",1024,"invalid",333.30615234375,1719],["body",512,"valid",297.116943359375,2031],["body",1024,"valid",1076.279296875,4087],["body",2048,"valid",70.577880859375,180],["body",256,"valid",150.4755859375,1958]],"time":4657.046875,"type":"sample"},{"compiler":[[11,8]],"egraph":[[0,1,1,1.416e-6],[12,7114,15,0.045391248999999995],[11,5780,15,0.034588915],[10,5040,15,0.023013456999999998],[9,3140,15,0.015287539999999999],[8,1177,15,0.008744749],[7,734,15,0.004292041],[6,280,15,0.002451833],[5,120,15,0.001241125],[4,63,15,0.00069425],[3,39,15,0.000416041],[2,26,15,0.000251041],[1,16,17,0.000145],[0,9,17,6.8708e-5]],"inputs":[["0"],["(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":68.989990234375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,7114,15,0.044528956],[11,5780,15,0.033924956],[10,5040,15,0.022647956],[9,3140,15,0.01502854],[8,1177,15,0.008611624],[7,734,15,0.004251416],[6,280,15,0.002434833],[5,120,15,0.001227375],[4,63,15,0.000686],[3,39,15,0.000404208],[2,26,15,0.00024391700000000002],[1,16,17,0.000137667],[0,9,17,6.3167e-5]],"inputs":[["(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))"]],"stop":[["node limit",1]],"time":56.085205078125,"type":"simplify"},{"compiler":[[20,9]],"time":0.875,"type":"eval"},{"alts":[["(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","next",60.32533452885785]],"compiler":[[10,6],[10,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[60.32533452885785],"time":0.86083984375,"type":"prune"},{"compiler":[[24,6]],"locations":[["(cos.f64 x)",0.015625,true],["(sqrt.f64 (cos.f64 x))",0.04296875,true],["(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))",0.7364228567785984,true],["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))",4.69978736585811,true]],"time":6.1220703125,"type":"localize"},{"count":[[4,12]],"series":[["(cos.f64 x)","x","-inf",0.159912109375],["(cos.f64 x)","x","inf",0.134765625],["(cos.f64 x)","x","0",0.18115234375],["(sqrt.f64 (cos.f64 x))","x","-inf",0.2431640625],["(sqrt.f64 (cos.f64 x))","x","inf",0.42919921875],["(sqrt.f64 (cos.f64 x))","x","0",0.26220703125],["(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","x","-inf",0.44189453125],["(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","x","inf",0.48291015625],["(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","x","0",0.576171875],["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","x","-inf",0.214111328125],["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","x","inf",0.184814453125],["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","x","0",0.238037109375]],"time":3.68798828125,"type":"series"},{"count":[[4,88]],"egraph":[[2,1746,33,0.017295624],[1,139,33,0.0024506659999999998],[0,7,33,0.000168958]],"inputs":[["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(sqrt.f64 (cos.f64 x))","(cos.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2) (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (/.f64 1 (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 x)) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) 1) (/.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 1) (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (exp.f64 x))) (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (sqrt.f64 (exp.f64 x))) (/.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 x) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 3) (pow.f64 (exp.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (cos.f64 x))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 1/4) (pow.f64 (cos.f64 x) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (sqrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) 1/2) (pow.f64 (cbrt.f64 (cos.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (cos.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (sqrt.f64 (cos.f64 x))) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 1/4) (*.f64 (pow.f64 (cos.f64 x) 1/4) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 1/4)) (pow.f64 (cos.f64 x) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 x)))))))"]],"rules":[["egg-rr",21],["egg-rr",20],["egg-rr",31],["egg-rr",16]],"stop":[["node limit",1]],"time":42.26806640625,"type":"rewrite"},{"count":[[100,108]],"egraph":[[3,2542,195,0.017784792],[2,491,217,0.0046555],[1,155,257,0.001125125],[0,59,277,0.000280917]],"inputs":[["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (+.f64 (*.f64 -1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 1/6 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))))","1","(+.f64 1 (*.f64 -1/4 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1/96 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -1/96 (pow.f64 x 4)) (*.f64 -19/5760 (pow.f64 x 6)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","(-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 1 x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x))))","(fma.f64 -1 (*.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/2) (*.f64 x x)) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))","(fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (+.f64 (neg.f64 x) 1) (*.f64 x (*.f64 x -1/2))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (+.f64 (*.f64 -1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 1/6 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))))","(fma.f64 -1 (*.f64 (fma.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/2) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/3)) (pow.f64 x 3)) (fma.f64 -1 (*.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/2) (*.f64 x x)) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))","(-.f64 (fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (*.f64 (fma.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/3 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2)) (pow.f64 x 3)))","(fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (fma.f64 (pow.f64 x 3) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/6) (*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(+.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 1 x)) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (*.f64 1/2 (*.f64 x x)) (*.f64 (pow.f64 x 3) 1/6))))","1","(+.f64 1 (*.f64 -1/4 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) -1/4))","(fma.f64 (*.f64 x x) -1/4 1)","(fma.f64 x (*.f64 x -1/4) 1)","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1/96 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/4 (*.f64 x x) (*.f64 -1/96 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/96 (pow.f64 x 4) (*.f64 (*.f64 x x) -1/4)))","(fma.f64 x (*.f64 x -1/4) (fma.f64 -1/96 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -1/96 (pow.f64 x 4)) (*.f64 -19/5760 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 -1/4 (*.f64 x x) (fma.f64 -1/96 (pow.f64 x 4) (*.f64 -19/5760 (pow.f64 x 6)))))","(+.f64 (fma.f64 (*.f64 x x) -1/4 1) (fma.f64 -1/96 (pow.f64 x 4) (*.f64 -19/5760 (pow.f64 x 6))))","(+.f64 (fma.f64 x (*.f64 x -1/4) 1) (fma.f64 -1/96 (pow.f64 x 4) (*.f64 -19/5760 (pow.f64 x 6))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) -1/2))","(fma.f64 (*.f64 x x) -1/2 1)","(fma.f64 x (*.f64 x -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 (pow.f64 x 4) 1/24)))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (*.f64 (pow.f64 x 4) 1/24))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 1/24 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 4) (*.f64 (pow.f64 x 6) -1/720))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 (pow.f64 x 4) 1/24 (*.f64 (pow.f64 x 6) -1/720)))","(+.f64 (fma.f64 (pow.f64 x 6) -1/720 (*.f64 (*.f64 x x) -1/2)) (fma.f64 (pow.f64 x 4) 1/24 1))","(+.f64 (fma.f64 x (*.f64 x -1/2) 1) (fma.f64 (pow.f64 x 6) -1/720 (*.f64 (pow.f64 x 4) 1/24)))"]],"stop":[["node limit",1]],"time":31.9609375,"type":"simplify"},{"compiler":[[1661,612]],"time":14.700927734375,"type":"eval"},{"alts":[["(-.f64 (+.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 1)","fresh",60.32336513520396],["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","next",60.30826720928884],["(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","fresh",60.3112937266253],["(log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))","fresh",60.32132342610379]],"compiler":[[14,10],[12,8],[11,8],[12,8],[14,10],[12,8],[11,8],[12,8]],"count":[[109,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[108,4],"picked":[1,0]}],"min-error":[60.287856221212714],"time":30.669189453125,"type":"prune"},{"compiler":[[35,18]],"locations":[["(cbrt.f64 (pow.f64 (cos.f64 x) 3/2))",0.02734375,true],["(pow.f64 (cos.f64 x) 3/2)",0.1015625,true],["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))",0.7364228567785984,true],["(fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2)))",4.69978736585811,true]],"time":12.40185546875,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (pow.f64 (cos.f64 x) 3/2))","x","-inf",0.2880859375],["(cbrt.f64 (pow.f64 (cos.f64 x) 3/2))","x","inf",0.31982421875],["(cbrt.f64 (pow.f64 (cos.f64 x) 3/2))","x","0",0.193115234375],["(pow.f64 (cos.f64 x) 3/2)","x","-inf",10.455078125],["(pow.f64 (cos.f64 x) 3/2)","x","inf",15.60302734375],["(pow.f64 (cos.f64 x) 3/2)","x","0",0.701904296875],["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","x","-inf",0.301025390625],["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","x","inf",0.2861328125],["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","x","0",0.291015625],["(fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2)))","x","-inf",0.179931640625],["(fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2)))","x","inf",0.214111328125],["(fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2)))","x","0",0.240966796875]],"time":29.284912109375,"type":"series"},{"count":[[4,84]],"egraph":[[2,2231,36,0.020186293],[1,184,36,0.0033732090000000003],[0,9,45,0.000266459]],"inputs":[["(fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2)))","(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","(pow.f64 (cos.f64 x) 3/2)","(cbrt.f64 (pow.f64 (cos.f64 x) 3/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2) (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (/.f64 1 (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 x)) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) 1) (/.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 1) (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (exp.f64 x))) (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (sqrt.f64 (exp.f64 x))) (/.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 x) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 3) (pow.f64 (exp.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 x) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 3/4) (pow.f64 (cos.f64 x) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 3/2) (pow.f64 (cos.f64 x) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) 3/2) (pow.f64 (cbrt.f64 (cos.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) 3/2) (pow.f64 (sqrt.f64 (cos.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (sqrt.f64 (sqrt.f64 (cos.f64 x)))) (sqrt.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cos.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 x) 3/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cos.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cos.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3/2 (log.f64 (cos.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (cos.f64 x))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (cos.f64 x))) (sqrt.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (sqrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 x) 3/4) 1/3) (pow.f64 (pow.f64 (cos.f64 x) 3/4) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (cos.f64 x))))))))"]],"rules":[["egg-rr",20],["egg-rr",17],["egg-rr",31],["egg-rr",16]],"stop":[["node limit",1]],"time":48.43310546875,"type":"rewrite"},{"count":[[132,106]],"egraph":[[3,2525,521,0.018101792],[2,497,543,0.0047754170000000006],[1,160,601,0.001179917],[0,61,621,0.000314458]],"inputs":[["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (+.f64 (*.f64 -1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 1/6 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","1","(+.f64 1 (*.f64 -3/4 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 5/32 (pow.f64 x 4)) (*.f64 -3/4 (pow.f64 x 2))))","(+.f64 (*.f64 -19/1920 (pow.f64 x 6)) (+.f64 1 (+.f64 (*.f64 5/32 (pow.f64 x 4)) (*.f64 -3/4 (pow.f64 x 2)))))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","1","(+.f64 1 (*.f64 -1/4 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1/96 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -1/96 (pow.f64 x 4)) (*.f64 -19/5760 (pow.f64 x 6)))))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","(-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 1 x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x))))","(fma.f64 -1 (*.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/2) (*.f64 x x)) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))","(fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (+.f64 (neg.f64 x) 1) (*.f64 (*.f64 x x) -1/2)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (+.f64 (*.f64 -1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 1/6 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/2 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 -1 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))))","(fma.f64 -1 (*.f64 (fma.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/2) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/3)) (pow.f64 x 3)) (fma.f64 -1 (*.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/2) (*.f64 x x)) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))","(-.f64 (fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))) (*.f64 (fma.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/3 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2)) (pow.f64 x 3)))","(fma.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1/2) (*.f64 x x) (fma.f64 (pow.f64 x 3) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) -1/6) (*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(+.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (*.f64 1/2 (*.f64 x x)) x)) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 1 (*.f64 (pow.f64 x 3) 1/6))))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","1","(+.f64 1 (*.f64 -3/4 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) -3/4))","(fma.f64 (*.f64 x x) -3/4 1)","(fma.f64 x (*.f64 x -3/4) 1)","(+.f64 1 (+.f64 (*.f64 5/32 (pow.f64 x 4)) (*.f64 -3/4 (pow.f64 x 2))))","(+.f64 1 (fma.f64 5/32 (pow.f64 x 4) (*.f64 (*.f64 x x) -3/4)))","(fma.f64 x (*.f64 x -3/4) (fma.f64 5/32 (pow.f64 x 4) 1))","(+.f64 (*.f64 -19/1920 (pow.f64 x 6)) (+.f64 1 (+.f64 (*.f64 5/32 (pow.f64 x 4)) (*.f64 -3/4 (pow.f64 x 2)))))","(fma.f64 -19/1920 (pow.f64 x 6) (+.f64 1 (fma.f64 5/32 (pow.f64 x 4) (*.f64 (*.f64 x x) -3/4))))","(+.f64 (fma.f64 5/32 (pow.f64 x 4) (*.f64 (*.f64 x x) -3/4)) (fma.f64 -19/1920 (pow.f64 x 6) 1))","(fma.f64 -19/1920 (pow.f64 x 6) (fma.f64 x (*.f64 x -3/4) (fma.f64 5/32 (pow.f64 x 4) 1)))","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","(sqrt.f64 (pow.f64 (cos.f64 x) 3))","(pow.f64 (cos.f64 x) 3/2)","1","(+.f64 1 (*.f64 -1/4 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) -1/4))","(fma.f64 (*.f64 x x) -1/4 1)","(fma.f64 x (*.f64 x -1/4) 1)","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1/96 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/4 (*.f64 x x) (*.f64 (pow.f64 x 4) -1/96)))","(+.f64 1 (fma.f64 (pow.f64 x 4) -1/96 (*.f64 (*.f64 x x) -1/4)))","(fma.f64 x (*.f64 x -1/4) (fma.f64 (pow.f64 x 4) -1/96 1))","(+.f64 1 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (+.f64 (*.f64 -1/96 (pow.f64 x 4)) (*.f64 -19/5760 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 -1/4 (*.f64 x x) (fma.f64 -1/96 (pow.f64 x 4) (*.f64 (pow.f64 x 6) -19/5760))))","(+.f64 (fma.f64 (*.f64 x x) -1/4 1) (fma.f64 (pow.f64 x 4) -1/96 (*.f64 (pow.f64 x 6) -19/5760)))","(+.f64 1 (fma.f64 (pow.f64 x 4) -1/96 (fma.f64 (pow.f64 x 6) -19/5760 (*.f64 x (*.f64 x -1/4)))))","(+.f64 1 (fma.f64 (pow.f64 x 4) -1/96 (fma.f64 x (*.f64 x -1/4) (*.f64 (pow.f64 x 6) -19/5760))))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))","(sqrt.f64 (cos.f64 x))"]],"stop":[["node limit",1]],"time":35.85107421875,"type":"simplify"},{"compiler":[[1645,604]],"time":14.56591796875,"type":"eval"},{"alts":[["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","done",60.30826720928884],["(-.f64 (+.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 1)","fresh",60.32336513520396],["(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","next",60.3112937266253],["(log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))","fresh",60.32132342610379]],"compiler":[[12,8],[14,10],[11,8],[12,8],[14,10],[11,8],[12,8]],"count":[[110,4]],"kept":[{"done":[0,0],"fresh":[3,0],"new":[106,3],"picked":[1,1]}],"min-error":[60.287856221212714],"time":30.529052734375,"type":"prune"},{"compiler":[[41,8]],"locations":[["(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))",0.18570816730886947,true],["(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)",1.7343348328743593,true],["(log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))",2.1160783612720846,true],["(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))",4.69978736585811,false]],"time":7.995849609375,"type":"localize"},{"count":[[3,20]],"series":[["(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","x","-inf",0.18896484375],["(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","x","inf",0.206787109375],["(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","x","0",0.314208984375],["(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","x","-inf",0.208984375],["(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","x","inf",0.2548828125],["(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","x","0",0.221923828125],["(log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","x","-inf",8.09912109375],["(log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","x","inf",17.096923828125],["(log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","x","0",10.85302734375]],"time":37.586181640625,"type":"series"},{"count":[[3,92]],"egraph":[[2,2318,42,0.021723709],[1,179,42,0.003241209],[0,9,42,0.000217917]],"inputs":[["(log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2)) (log.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (log.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (cbrt.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2)) (cbrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (sqrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))) (log.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2)) (log.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)) (pow.f64 (cbrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)) 2) (cbrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)) (sqrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))) (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x x)) (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 x x))) (neg.f64 (+.f64 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 3) (pow.f64 (neg.f64 x) 3)) (+.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2)) (cbrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (sqrt.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))) (neg.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2) (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) 1) (/.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 1) (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (/.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (exp.f64 x))) (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (sqrt.f64 (exp.f64 x))) (/.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (exp.f64 x) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) 2) (/.f64 (exp.f64 x) (cbrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (/.f64 (exp.f64 x) (sqrt.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (sqrt.f64 (exp.f64 x))) (sqrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 1) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)) 2)) (cbrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))) (sqrt.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) 3) (pow.f64 (exp.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))))))"]],"rules":[["egg-rr",36],["egg-rr",38],["egg-rr",18]],"stop":[["node limit",1]],"time":51.08203125,"type":"rewrite"},{"count":[[112,105]],"egraph":[[5,5550,293,0.026252376],[4,2104,293,0.012798376],[3,556,303,0.004559793],[2,180,325,0.001481293],[1,72,363,0.0005394180000000001],[0,27,382,0.000171334]],"inputs":[["(log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))","(+.f64 (*.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x))))","(+.f64 (*.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 2))) (+.f64 (*.f64 -1/6 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 3))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)","(fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (neg.f64 (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(-.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (fma.f64 x -1 1))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 1 x))","(+.f64 (*.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 2))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x))))","(fma.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x x)) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (neg.f64 (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))))","(-.f64 (fma.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x x)) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (+.f64 (*.f64 1/2 (*.f64 x x)) (neg.f64 x))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (fma.f64 1/2 (*.f64 x x) 1) x))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (fma.f64 x (*.f64 x 1/2) 1) x))","(+.f64 (*.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 2))) (+.f64 (*.f64 -1/6 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 3))) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 -1 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) x)))))","(fma.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x x)) (fma.f64 -1/6 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 3)) (+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (neg.f64 (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))))","(fma.f64 1/2 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 x x)) (-.f64 (fma.f64 -1/6 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (pow.f64 x 3)) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 x (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(+.f64 (*.f64 (+.f64 (neg.f64 x) 1) (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (+.f64 (*.f64 1/2 (*.f64 x x)) (*.f64 -1/6 (pow.f64 x 3)))))","(+.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (*.f64 (*.f64 x x) (+.f64 1/2 (*.f64 x -1/6))) x)))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (+.f64 (-.f64 1 x) (*.f64 x (*.f64 x (+.f64 1/2 (*.f64 x -1/6))))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (-.f64 (*.f64 x (+.f64 -1 (*.f64 x (+.f64 1/2 (*.f64 x -1/6))))) -1))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(exp.f64 (fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(exp.f64 (fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(exp.f64 (fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(exp.f64 (+.f64 (*.f64 -1 x) (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(exp.f64 (fma.f64 -1 x (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))))))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))"]],"stop":[["node limit",1]],"time":42.798828125,"type":"simplify"},{"compiler":[[2018,555]],"time":14.193115234375,"type":"eval"},{"alts":[["(exp.f64 (neg.f64 x))","next",26.617855447015447],["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","done",60.30826720928884],["(+.f64 1 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))","fresh",60.3158637407496],["(exp.f64 (log1p.f64 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))","fresh",60.3162053924725],["(log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))","fresh",60.32132342610379]],"compiler":[[4,3],[12,8],[13,10],[13,10],[12,8],[4,3],[13,10],[13,10],[12,8]],"count":[[125,5]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[121,3],"picked":[1,0]}],"min-error":[25.055493868333183],"time":20.118896484375,"type":"prune"},{"compiler":[[7,3]],"time":2.087158203125,"type":"localize"},{"compiler":[[1,1]],"time":0.0869140625,"type":"eval"},{"alts":[["(exp.f64 (neg.f64 x))","done",26.617855447015447],["(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","done",60.30826720928884],["(+.f64 1 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))","fresh",60.3158637407496],["(exp.f64 (log1p.f64 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))","fresh",60.3162053924725],["(log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))","fresh",60.32132342610379]],"compiler":[[4,3],[12,8],[13,10],[13,10],[12,8]],"count":[[5,5]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[0,0],"picked":[1,1]}],"min-error":[25.055493868333183],"time":1.574951171875,"type":"prune"},{"accuracy":[25.48284246657322],"baseline":[26.617855447015447],"branch":[["x",26.617855447015447,1],["(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))",25.48284246657322,3]],"compiler":[[2,1],[11,8],[126,32]],"count":[[12,3]],"inputs":[["(exp.f64 (neg.f64 x))","(+.f64 1 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x)))","(exp.f64 (log1p.f64 (expm1.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))))","(-.f64 (+.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 1)","(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","(log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))","(-.f64 (+.f64 1 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))) 1)","(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","(exp.f64 (-.f64 (log.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x)))) x))","(log.f64 (exp.f64 (/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))))","(/.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 x))","(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))"]],"link":["."],"name":["expfmod"],"oracle":[61.850217799894246],"outputs":[["(exp.f64 (neg.f64 x))","(/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x))","(exp.f64 (neg.f64 x))"]],"time":11.89404296875,"times":[["x",5.1181640625],["(*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x)))",4.885986328125]],"type":"regimes"},{"bstep":[[1.0000000000000002,{"type":"real","value":"NaN"},0.052978515625],[0.0,3.996802888650548e-15,0.02978515625]],"compiler":[[4,3],[11,8]],"method":["left-value","left-value"],"time":0.18798828125,"type":"bsearch"},{"compiler":[[44,19]],"egraph":[[3,28,72,0.000166583],[2,27,72,0.000126625],[1,25,72,8.6375e-5],[0,21,72,4.6042e-5]],"inputs":[["(if (<=.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))) 0) (exp.f64 (neg.f64 x)) (if (<=.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))) 2) (/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x)) (exp.f64 (neg.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))) 0) (exp.f64 (neg.f64 x)) (if (<=.f64 (*.f64 (fmod.f64 (exp.f64 x) (sqrt.f64 (cos.f64 x))) (exp.f64 (neg.f64 x))) 2) (/.f64 (fmod.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (cos.f64 x) 3/2))) (exp.f64 x)) (exp.f64 (neg.f64 x))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.25390625,"type":"simplify"},{"time":0.02001953125,"type":"soundness"},{"compiler":[[44,19]],"remove-preprocessing":[[]],"time":13.72900390625,"type":"end"}]
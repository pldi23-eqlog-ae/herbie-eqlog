[{"compiler":[[12,9]],"method":["search"],"sampling":[[12,0.6331702789757401,0.2839022360276431,0.08292748499661684],[11,0.6185361430980265,0.29853637190535665,0.08292748499661684],[10,0.5814629988744855,0.3473168248310685,0.07122017629444599],[9,0.5541459452360868,0.37463387846946716,0.07122017629444599],[8,0.48390209302306175,0.46829234808683395,0.047805558890104294],[7,0.43707285821437836,0.5151215828955173,0.047805558890104294],[6,0.31219489872455597,0.6868287771940231,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":59.8740234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",8.69970703125,149],["body",8192,"exit",1165.40185546875,2574],["body",512,"valid",36.6455078125,270],["body",1024,"valid",58.688720703125,220],["body",256,"valid",427.413330078125,7766]],"time":1706.955078125,"type":"sample"},{"compiler":[[11,8]],"egraph":[[0,2,2,1.917e-6],[16,7252,22,0.045654377],[15,5888,22,0.03582396],[14,3095,22,0.026143585],[13,1267,22,0.01758896],[12,826,22,0.012132751],[11,678,22,0.009608459],[10,638,22,0.007882166999999999],[9,546,22,0.0063303759999999995],[8,428,22,0.004849917],[7,321,22,0.0034364169999999998],[6,231,22,0.002314292],[5,150,22,0.0014264590000000001],[4,101,22,0.000900959],[3,71,22,0.000537417],[2,45,22,0.000315251],[1,32,22,0.000172667],[0,14,22,7.6292e-5]],"inputs":[["0","1"],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))","(-.f64 (log.f64 (+.f64 1 (exp.f64 y))) (*.f64 y x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(fma.f64 x (neg.f64 y) (log1p.f64 (exp.f64 x)))","(-.f64 (log.f64 (+.f64 1 (exp.f64 y))) (*.f64 y x))","(-.f64 (log1p.f64 (exp.f64 y)) (*.f64 x y))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":70.1298828125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[17,7666,11,0.045062916],[16,6027,11,0.037388166],[15,4925,11,0.027260124000000004],[14,1685,11,0.018838666000000004],[13,749,11,0.011104291000000002],[12,521,11,0.007947875000000002],[11,442,11,0.006420875000000001],[10,416,11,0.005253791000000001],[9,354,11,0.004211333],[8,275,11,0.0031705],[7,206,11,0.0022425830000000002],[6,154,11,0.001550416],[5,100,11,0.000995333],[4,66,11,0.0006268739999999999],[3,47,11,0.000380624],[2,30,11,0.000223124],[1,19,11,0.000122541],[0,9,11,5.2833e-5]],"inputs":[["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"stop":[["node limit",1]],"time":56.41796875,"type":"simplify"},{"compiler":[[18,10]],"time":0.364013671875,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","next",0.2578125]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.2578125],"time":0.814208984375,"type":"prune"},{"compiler":[[19,6]],"locations":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))",0.0078125,true],["(log1p.f64 (exp.f64 x))",0.2460271365683597,true]],"time":5.056884765625,"type":"localize"},{"count":[[2,36]],"series":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","y","-inf",0.27001953125],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","y","inf",0.273193359375],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","y","0",3.884033203125],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","x","-inf",0.25390625],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","x","inf",0.323974609375],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","x","0",0.237060546875],["(log1p.f64 (exp.f64 x))","x","-inf",11.10107421875],["(log1p.f64 (exp.f64 x))","x","inf",15.384033203125],["(log1p.f64 (exp.f64 x))","x","0",0.43701171875]],"time":32.325927734375,"type":"series"},{"count":[[2,52]],"egraph":[[2,2015,16,0.019582165999999998],[1,147,16,0.002629166],[0,7,16,0.000175541]],"inputs":[["(log1p.f64 (exp.f64 x))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 2) (cbrt.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) (sqrt.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 (exp.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (exp.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (*.f64 (*.f64 x (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 y) x (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 x) y (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (*.f64 x (neg.f64 y)) 1 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 x y))) (sqrt.f64 (*.f64 x y)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (neg.f64 y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 2) (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (sqrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2)) (/.f64 1 (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) (sqrt.f64 (*.f64 x y))) (-.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) (sqrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3)) (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2)) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2))) (neg.f64 (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x (neg.f64 y)) 3)) (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (-.f64 (*.f64 (*.f64 x (neg.f64 y)) (*.f64 x (neg.f64 y))) (*.f64 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x (neg.f64 y)) (*.f64 x (neg.f64 y)))) (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 2) (cbrt.f64 (log1p.f64 (exp.f64 x))) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) (sqrt.f64 (log1p.f64 (exp.f64 x))) (*.f64 x (neg.f64 y)))))))"]],"rules":[["egg-rr",37],["egg-rr",15]],"stop":[["node limit",1]],"time":41.326171875,"type":"rewrite"},{"count":[[88,71]],"egraph":[[5,3841,321,0.020167293],[4,1389,321,0.009039209999999999],[3,431,321,0.003336251],[2,182,333,0.0013020850000000001],[1,86,333,0.000538876],[0,34,363,0.000170667]],"inputs":[["(log.f64 2)","(+.f64 (*.f64 1/2 x) (log.f64 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (log.f64 2)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (log.f64 2)))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(log.f64 2)","(+.f64 (*.f64 1/2 x) (log.f64 2))","(fma.f64 1/2 x (log.f64 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (log.f64 2)))","(fma.f64 1/8 (*.f64 x x) (fma.f64 1/2 x (log.f64 2)))","(fma.f64 x (*.f64 x 1/8) (fma.f64 1/2 x (log.f64 2)))","(fma.f64 x (fma.f64 x 1/8 1/2) (log.f64 2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 1/2 x (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2))))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/8) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2))))","(fma.f64 x (fma.f64 x 1/8 1/2) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2)))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(fma.f64 x (-.f64 1/2 y) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (log.f64 2)))","(fma.f64 (-.f64 1/2 y) x (fma.f64 1/8 (*.f64 x x) (log.f64 2)))","(fma.f64 x (-.f64 1/2 y) (fma.f64 1/8 (*.f64 x x) (log.f64 2)))","(fma.f64 x (*.f64 x 1/8) (fma.f64 x (-.f64 1/2 y) (log.f64 2)))","(fma.f64 x (-.f64 (fma.f64 x 1/8 1/2) y) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(fma.f64 (-.f64 1/2 y) x (fma.f64 1/8 (*.f64 x x) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2))))","(fma.f64 x (-.f64 1/2 y) (fma.f64 1/8 (*.f64 x x) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2))))","(fma.f64 x (-.f64 1/2 y) (fma.f64 x (*.f64 x 1/8) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2))))","(fma.f64 x (-.f64 (fma.f64 x 1/8 1/2) y) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2)))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 x y))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log1p.f64 (exp.f64 x)) (neg.f64 (*.f64 x y)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"stop":[["node limit",1]],"time":36.801025390625,"type":"simplify"},{"compiler":[[977,351]],"time":9.248779296875,"type":"eval"},{"alts":[["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","fresh",12.334659967217194],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","next",12.26856578237228],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","done",0.2578125]],"compiler":[[11,8],[9,7],[9,6],[11,8],[9,7]],"count":[[72,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[71,2],"picked":[1,1]}],"min-error":[0],"time":13.987060546875,"type":"prune"},{"compiler":[[18,13]],"locations":[["(fma.f64 x (-.f64 1/2 y) (log.f64 2))",0.00390625,true]],"time":5.85107421875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","y","-inf",0.24609375],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","y","inf",0.328857421875],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","y","0",1.051025390625],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","x","-inf",0.327880859375],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","x","inf",0.2841796875],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","x","0",1.962890625]],"time":4.2880859375,"type":"series"},{"count":[[1,21]],"egraph":[[2,2029,10,0.018667376],[1,170,10,0.002902834],[0,8,10,0.000267917]],"inputs":[["(fma.f64 x (-.f64 1/2 y) (log.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 2) (*.f64 x (-.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1/2 y)) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 1/2 y)) 1) (log.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (-.f64 1/2 y) (log.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (-.f64 1/2 y) (log.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))) 2) (cbrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))) (sqrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 1/2 y)) 3) (pow.f64 (log.f64 2) 3)) (+.f64 (*.f64 (*.f64 x (-.f64 1/2 y)) (*.f64 x (-.f64 1/2 y))) (-.f64 (pow.f64 (log.f64 2) 2) (*.f64 (*.f64 x (-.f64 1/2 y)) (log.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (-.f64 1/2 y)) (*.f64 x (-.f64 1/2 y))) (pow.f64 (log.f64 2) 2)) (-.f64 (*.f64 x (-.f64 1/2 y)) (log.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (-.f64 1/2 y) (log.f64 2))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":36.117919921875,"type":"rewrite"},{"count":[[45,30]],"egraph":[[10,1127,216,0.015385667],[9,1107,216,0.012855875000000001],[8,886,216,0.010254333000000001],[7,671,216,0.0069976660000000005],[6,454,216,0.0044838740000000005],[5,252,216,0.002538999],[4,157,216,0.001429416],[3,106,216,0.000834291],[2,60,216,0.000482791],[1,33,216,0.00023524899999999998],[0,16,216,9.0833e-5]],"inputs":[["(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(*.f64 (-.f64 1/2 y) x)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(*.f64 (-.f64 1/2 y) x)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 1/2 x) (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(*.f64 (-.f64 1/2 y) x)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(*.f64 (-.f64 1/2 y) x)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 1/2 x) (log.f64 2))","(fma.f64 1/2 x (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(*.f64 y (neg.f64 x))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(*.f64 y (neg.f64 x))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 1/2 x) (+.f64 (log.f64 2) (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))"]],"stop":[["saturated",1]],"time":33.676025390625,"type":"simplify"},{"compiler":[[325,251]],"time":5.2138671875,"type":"eval"},{"alts":[["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","next",12.334659967217194],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","done",12.26856578237228],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","done",0.2578125]],"compiler":[[11,8],[9,7],[9,6],[11,8]],"count":[[33,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[30,0],"picked":[1,1]}],"min-error":[0],"time":4.943115234375,"type":"prune"},{"compiler":[[36,8]],"locations":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))",0.0078125,false],["(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))",0.015625,true],["(log1p.f64 (exp.f64 x))",0.2460271365683597,false],["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))",1.0924724672171915,true]],"time":7.48388671875,"type":"localize"},{"count":[[2,48]],"series":[["(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))","y","-inf",0.625],["(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))","y","inf",0.51416015625],["(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))","y","0",0.514892578125],["(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))","x","-inf",0.613037109375],["(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))","x","inf",0.69091796875],["(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))","x","0",0.679931640625],["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","y","-inf",0.176025390625],["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","y","inf",0.203125],["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","y","0",0.1611328125],["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","x","-inf",0.181884765625],["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","x","inf",0.2119140625],["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","x","0",0.234130859375]],"time":5.041015625,"type":"series"},{"count":[[2,58]],"egraph":[[2,2223,24,0.020271125],[1,168,24,0.0029467079999999997],[0,9,24,0.000205333]],"inputs":[["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","(log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 (exp.f64 x)) (*.f64 (*.f64 x (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 y) x (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 x) y (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (*.f64 x (neg.f64 y)) 1 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 x y))) (sqrt.f64 (*.f64 x y)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (neg.f64 y)) (log1p.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))) (/.f64 (pow.f64 (*.f64 x y) 3) (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (/.f64 (pow.f64 (*.f64 x y) 2) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 2) (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) (sqrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2)) (/.f64 1 (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) (sqrt.f64 (*.f64 x y))) (-.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) (sqrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3)) (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2)) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x y) 3))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x y) (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (pow.f64 (*.f64 x y) 2))) (neg.f64 (+.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)) 3) 1) (+.f64 (*.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)) (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y))) (+.f64 1 (*.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 3) (pow.f64 (*.f64 x (neg.f64 y)) 3)) (+.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (-.f64 (*.f64 (*.f64 x (neg.f64 y)) (*.f64 x (neg.f64 y))) (*.f64 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)) (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y))) 1) (+.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 (exp.f64 x)) 2) (*.f64 (*.f64 x (neg.f64 y)) (*.f64 x (neg.f64 y)))) (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 (exp.f64 x)) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 (exp.f64 x))) 2) (cbrt.f64 (log1p.f64 (exp.f64 x))) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 (exp.f64 x))) (sqrt.f64 (log1p.f64 (exp.f64 x))) (*.f64 x (neg.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) (pow.f64 (cbrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) 2) (cbrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) (sqrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (-.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y)))))))))"]],"rules":[["egg-rr",15],["egg-rr",43]],"stop":[["node limit",1]],"time":42.87109375,"type":"rewrite"},{"count":[[106,115]],"egraph":[[2,1550,1263,0.013630542],[1,462,1313,0.003121917],[0,155,1426,0.000695417]],"inputs":[["(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (log.f64 2)))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(log.f64 (+.f64 1 (exp.f64 x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(log.f64 (+.f64 1 (log.f64 2)))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (log.f64 2)))) (/.f64 y (+.f64 1 (log.f64 2)))) x) (log.f64 (+.f64 1 (log.f64 2))))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (log.f64 2)))) (/.f64 y (+.f64 1 (log.f64 2)))) x) (+.f64 (log.f64 (+.f64 1 (log.f64 2))) (*.f64 1/2 (*.f64 (+.f64 (*.f64 1/4 (/.f64 1 (+.f64 1 (log.f64 2)))) (*.f64 -1 (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 1 (log.f64 2)) 2)))) (pow.f64 x 2)))))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (log.f64 2)))) (/.f64 y (+.f64 1 (log.f64 2)))) x) (+.f64 (log.f64 (+.f64 1 (log.f64 2))) (+.f64 (*.f64 1/2 (*.f64 (+.f64 (*.f64 1/4 (/.f64 1 (+.f64 1 (log.f64 2)))) (*.f64 -1 (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 1 (log.f64 2)) 2)))) (pow.f64 x 2))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 2 (/.f64 (pow.f64 (-.f64 1/2 y) 3) (pow.f64 (+.f64 1 (log.f64 2)) 3))) (*.f64 -3/4 (/.f64 (-.f64 1/2 y) (pow.f64 (+.f64 1 (log.f64 2)) 2)))) (pow.f64 x 3))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (neg.f64 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))) (log.f64 (neg.f64 y))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))) (log.f64 (neg.f64 y)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))) (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (neg.f64 (*.f64 -1 y))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) y)) x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (neg.f64 (*.f64 -1 y)))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) y)) x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (log.f64 (neg.f64 (*.f64 -1 y))))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) y)) x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 y))) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3))))))))","(log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))))","(+.f64 (log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2))) (+.f64 (log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2))) (+.f64 (log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))))) (*.f64 -1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3))))))","(+.f64 (log.f64 (neg.f64 x)) (*.f64 -1 (log.f64 (/.f64 1 y))))","(+.f64 (log.f64 (neg.f64 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x)))))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (neg.f64 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))))))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (neg.f64 x)) (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x)))))))","(+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (*.f64 -1 (log.f64 (/.f64 -1 y))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (*.f64 -1 (/.f64 (+.f64 (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) x) (/.f64 1 x)) y))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) x) (/.f64 1 x)) y)) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) x) (/.f64 1 x)) y)) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3))))))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 2)","(+.f64 (*.f64 (-.f64 1/2 y) x) (log.f64 2))","(fma.f64 (-.f64 1/2 y) x (log.f64 2))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (log.f64 2)))","(fma.f64 (-.f64 1/2 y) x (fma.f64 1/8 (*.f64 x x) (log.f64 2)))","(fma.f64 (-.f64 1/2 y) x (fma.f64 x (*.f64 x 1/8) (log.f64 2)))","(+.f64 (*.f64 (-.f64 1/2 y) x) (+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/192 (pow.f64 x 4)) (log.f64 2))))","(fma.f64 (-.f64 1/2 y) x (fma.f64 1/8 (*.f64 x x) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2))))","(fma.f64 (-.f64 1/2 y) x (fma.f64 x (*.f64 x 1/8) (fma.f64 -1/192 (pow.f64 x 4) (log.f64 2))))","(*.f64 -1 (*.f64 y x))","(*.f64 (neg.f64 y) x)","(*.f64 y (neg.f64 x))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(*.f64 (neg.f64 y) x)","(*.f64 y (neg.f64 x))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(log.f64 (+.f64 1 (exp.f64 x)))","(log1p.f64 (exp.f64 x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(*.f64 (neg.f64 y) x)","(*.f64 y (neg.f64 x))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(*.f64 -1 (*.f64 y x))","(*.f64 (neg.f64 y) x)","(*.f64 y (neg.f64 x))","(*.f64 x (neg.f64 y))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(+.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 (neg.f64 y) x) (log1p.f64 (exp.f64 x)))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 y x))","(log.f64 (+.f64 1 (log.f64 2)))","(log1p.f64 (log.f64 2))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (log.f64 2)))) (/.f64 y (+.f64 1 (log.f64 2)))) x) (log.f64 (+.f64 1 (log.f64 2))))","(fma.f64 (-.f64 (/.f64 1/2 (+.f64 (log.f64 2) 1)) (/.f64 y (+.f64 (log.f64 2) 1))) x (log1p.f64 (log.f64 2)))","(fma.f64 x (-.f64 (/.f64 1/2 (+.f64 (log.f64 2) 1)) (/.f64 y (+.f64 (log.f64 2) 1))) (log1p.f64 (log.f64 2)))","(fma.f64 x (/.f64 (-.f64 1/2 y) (+.f64 (log.f64 2) 1)) (log1p.f64 (log.f64 2)))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (log.f64 2)))) (/.f64 y (+.f64 1 (log.f64 2)))) x) (+.f64 (log.f64 (+.f64 1 (log.f64 2))) (*.f64 1/2 (*.f64 (+.f64 (*.f64 1/4 (/.f64 1 (+.f64 1 (log.f64 2)))) (*.f64 -1 (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 1 (log.f64 2)) 2)))) (pow.f64 x 2)))))","(+.f64 (fma.f64 (-.f64 (/.f64 1/2 (+.f64 (log.f64 2) 1)) (/.f64 y (+.f64 (log.f64 2) 1))) x (log1p.f64 (log.f64 2))) (*.f64 1/2 (*.f64 (*.f64 x x) (+.f64 (/.f64 1/4 (+.f64 (log.f64 2) 1)) (neg.f64 (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 (log.f64 2) 1) 2)))))))","(fma.f64 x (-.f64 (/.f64 1/2 (+.f64 (log.f64 2) 1)) (/.f64 y (+.f64 (log.f64 2) 1))) (fma.f64 1/2 (*.f64 (*.f64 x x) (-.f64 (/.f64 1/4 (+.f64 (log.f64 2) 1)) (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 (log.f64 2) 1) 2)))) (log1p.f64 (log.f64 2))))","(fma.f64 x (/.f64 (-.f64 1/2 y) (+.f64 (log.f64 2) 1)) (fma.f64 (*.f64 x x) (fma.f64 1/2 (/.f64 (neg.f64 (pow.f64 (-.f64 1/2 y) 2)) (pow.f64 (+.f64 (log.f64 2) 1) 2)) (/.f64 1/8 (+.f64 (log.f64 2) 1))) (log1p.f64 (log.f64 2))))","(+.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (+.f64 1 (log.f64 2)))) (/.f64 y (+.f64 1 (log.f64 2)))) x) (+.f64 (log.f64 (+.f64 1 (log.f64 2))) (+.f64 (*.f64 1/2 (*.f64 (+.f64 (*.f64 1/4 (/.f64 1 (+.f64 1 (log.f64 2)))) (*.f64 -1 (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 1 (log.f64 2)) 2)))) (pow.f64 x 2))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 2 (/.f64 (pow.f64 (-.f64 1/2 y) 3) (pow.f64 (+.f64 1 (log.f64 2)) 3))) (*.f64 -3/4 (/.f64 (-.f64 1/2 y) (pow.f64 (+.f64 1 (log.f64 2)) 2)))) (pow.f64 x 3))))))","(+.f64 (fma.f64 (-.f64 (/.f64 1/2 (+.f64 (log.f64 2) 1)) (/.f64 y (+.f64 (log.f64 2) 1))) x (log1p.f64 (log.f64 2))) (fma.f64 1/2 (*.f64 (*.f64 x x) (+.f64 (/.f64 1/4 (+.f64 (log.f64 2) 1)) (neg.f64 (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 (log.f64 2) 1) 2))))) (*.f64 1/6 (*.f64 (fma.f64 2 (/.f64 (pow.f64 (-.f64 1/2 y) 3) (pow.f64 (+.f64 (log.f64 2) 1) 3)) (*.f64 -3/4 (/.f64 (-.f64 1/2 y) (pow.f64 (+.f64 (log.f64 2) 1) 2)))) (pow.f64 x 3)))))","(+.f64 (fma.f64 x (-.f64 (/.f64 1/2 (+.f64 (log.f64 2) 1)) (/.f64 y (+.f64 (log.f64 2) 1))) (log1p.f64 (log.f64 2))) (fma.f64 1/6 (*.f64 (fma.f64 2 (/.f64 (pow.f64 (-.f64 1/2 y) 3) (pow.f64 (+.f64 (log.f64 2) 1) 3)) (/.f64 -3/4 (/.f64 (pow.f64 (+.f64 (log.f64 2) 1) 2) (-.f64 1/2 y)))) (pow.f64 x 3)) (*.f64 (*.f64 x x) (*.f64 1/2 (-.f64 (/.f64 1/4 (+.f64 (log.f64 2) 1)) (/.f64 (pow.f64 (-.f64 1/2 y) 2) (pow.f64 (+.f64 (log.f64 2) 1) 2)))))))","(fma.f64 x (/.f64 (-.f64 1/2 y) (+.f64 (log.f64 2) 1)) (fma.f64 (*.f64 x x) (fma.f64 1/2 (/.f64 (neg.f64 (pow.f64 (-.f64 1/2 y) 2)) (pow.f64 (+.f64 (log.f64 2) 1) 2)) (/.f64 1/8 (+.f64 (log.f64 2) 1))) (fma.f64 (pow.f64 x 3) (+.f64 (*.f64 (pow.f64 (/.f64 (-.f64 1/2 y) (+.f64 (log.f64 2) 1)) 3) 1/3) (/.f64 -1/8 (/.f64 (pow.f64 (+.f64 (log.f64 2) 1) 2) (-.f64 1/2 y)))) (log1p.f64 (log.f64 2)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (neg.f64 y)))","(fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 (neg.f64 y)))","(+.f64 (log.f64 x) (log.f64 (neg.f64 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))) (log.f64 (neg.f64 y))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)) (log.f64 (neg.f64 y))))","(+.f64 (log.f64 x) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 (neg.f64 y))) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))) (log.f64 (neg.f64 y)))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (fma.f64 -1 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)) (log.f64 (neg.f64 y)))))","(+.f64 (log.f64 x) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)))))","(+.f64 (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x))) (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 y y)) (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))) (log.f64 (neg.f64 y))))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (fma.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 -1 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)) (log.f64 (neg.f64 y))))))","(+.f64 (log.f64 x) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (fma.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x))))))","(+.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) x) 3) (pow.f64 y 3)) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)))) (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 y y)) (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (neg.f64 (*.f64 -1 y))))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 (*.f64 1 y)))","(-.f64 (log.f64 y) (log.f64 (/.f64 -1 x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) y)) x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (neg.f64 (*.f64 -1 y)))))","(fma.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 (*.f64 1 y))))","(-.f64 (-.f64 (log.f64 y) (log.f64 (/.f64 -1 x))) (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) y)) x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (log.f64 (neg.f64 (*.f64 -1 y))))))","(fma.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (log.f64 (*.f64 1 y)))))","(-.f64 (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (log.f64 y)) (log.f64 (/.f64 -1 x))) (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x))","(-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (log.f64 y)) (+.f64 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x) (log.f64 (/.f64 -1 x))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) y)) x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 y))) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3))))))))","(fma.f64 -1 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (log.f64 (*.f64 1 y))) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3)))))))","(-.f64 (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (fma.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (log.f64 y))) (log.f64 (/.f64 -1 x))) (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x))","(-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (fma.f64 -1/3 (/.f64 (pow.f64 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) x) 3) (pow.f64 y 3)) (log.f64 y))) (+.f64 (/.f64 (+.f64 (/.f64 1 y) (/.f64 (log1p.f64 (exp.f64 x)) y)) x) (log.f64 (/.f64 -1 x))))","(log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))))","(log1p.f64 (log1p.f64 (exp.f64 x)))","(+.f64 (log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))))))","(+.f64 (log1p.f64 (log1p.f64 (exp.f64 x))) (/.f64 (*.f64 (neg.f64 y) x) (+.f64 1 (log1p.f64 (exp.f64 x)))))","(-.f64 (log1p.f64 (log1p.f64 (exp.f64 x))) (*.f64 (/.f64 y (+.f64 1 (log1p.f64 (exp.f64 x)))) x))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2))) (+.f64 (log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))) (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))))))","(fma.f64 -1/2 (/.f64 (*.f64 y y) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x x))) (+.f64 (log1p.f64 (log1p.f64 (exp.f64 x))) (/.f64 (*.f64 (neg.f64 y) x) (+.f64 1 (log1p.f64 (exp.f64 x))))))","(fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2)) (*.f64 x x)) (-.f64 (log1p.f64 (log1p.f64 (exp.f64 x))) (*.f64 (/.f64 y (+.f64 1 (log1p.f64 (exp.f64 x)))) x)))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2))) (+.f64 (log.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))))) (*.f64 -1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3))))))","(fma.f64 -1/2 (/.f64 (*.f64 y y) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x x))) (+.f64 (log1p.f64 (log1p.f64 (exp.f64 x))) (fma.f64 -1 (/.f64 (*.f64 y x) (+.f64 1 (log1p.f64 (exp.f64 x)))) (*.f64 -1/3 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 y 3)) (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3))))))","(+.f64 (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2)) (*.f64 x x)) (-.f64 (log1p.f64 (log1p.f64 (exp.f64 x))) (*.f64 (/.f64 y (+.f64 1 (log1p.f64 (exp.f64 x)))) x))) (/.f64 (*.f64 -1/3 (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3)))","(fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2)) (*.f64 x x)) (-.f64 (fma.f64 -1/3 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) y) 3)) (log1p.f64 (log1p.f64 (exp.f64 x)))) (*.f64 (/.f64 y (+.f64 1 (log1p.f64 (exp.f64 x)))) x)))","(+.f64 (log.f64 (neg.f64 x)) (*.f64 -1 (log.f64 (/.f64 1 y))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 (neg.f64 y)))","(+.f64 (log.f64 x) (log.f64 (neg.f64 y)))","(+.f64 (log.f64 (neg.f64 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x)))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)) (log.f64 (neg.f64 y))))","(+.f64 (log.f64 x) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 (neg.f64 y))) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (neg.f64 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x))))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (fma.f64 -1 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)) (log.f64 (neg.f64 y)))))","(+.f64 (log.f64 x) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)))))","(+.f64 (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x))) (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 y y)) (log.f64 x)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (neg.f64 x)) (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (*.f64 -1 (/.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) (*.f64 y x)))))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (fma.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 -1 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)) (log.f64 (neg.f64 y))))))","(+.f64 (log.f64 x) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (fma.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x))))))","(+.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) x) 3) (pow.f64 y 3)) (-.f64 (log.f64 (neg.f64 y)) (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) (*.f64 y x)))) (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 y y)) (log.f64 x)))","(+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (*.f64 -1 (log.f64 (/.f64 -1 y))))","(+.f64 (log.f64 (*.f64 1 x)) (neg.f64 (log.f64 (/.f64 -1 y))))","(-.f64 (log.f64 x) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (*.f64 -1 (/.f64 (+.f64 (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) x) (/.f64 1 x)) y))))","(fma.f64 -1 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 (*.f64 1 x)) (neg.f64 (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y))))","(-.f64 (-.f64 (log.f64 x) (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y)) (log.f64 (/.f64 -1 y)))","(-.f64 (log.f64 x) (+.f64 (log.f64 (/.f64 -1 y)) (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) x) (/.f64 1 x)) y)) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))))))","(fma.f64 -1 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 (*.f64 1 x)) (fma.f64 -1 (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y)))))))","(+.f64 (-.f64 (-.f64 (log.f64 x) (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y)) (log.f64 (/.f64 -1 y))) (*.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 y y))))","(-.f64 (-.f64 (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 y y)) (log.f64 x)) (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y)) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (log.f64 (neg.f64 (*.f64 -1 x))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 (log.f64 (+.f64 1 (exp.f64 x))) x) (/.f64 1 x)) y)) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log.f64 (+.f64 1 (exp.f64 x)))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3))))))))","(fma.f64 -1 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 (*.f64 1 x)) (fma.f64 -1 (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))))))))","(+.f64 (-.f64 (-.f64 (log.f64 x) (/.f64 (+.f64 (/.f64 1 x) (/.f64 (log1p.f64 (exp.f64 x)) x)) y)) (log.f64 (/.f64 -1 y))) (fma.f64 -1/2 (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x (*.f64 x (*.f64 y y)))) (/.f64 (*.f64 -1/3 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 3)) (*.f64 (pow.f64 x 3) (pow.f64 y 3)))))","(+.f64 (fma.f64 (/.f64 (/.f64 -1/2 y) y) (/.f64 (pow.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) 2) (*.f64 x x)) (/.f64 (fma.f64 -1 (/.f64 (log1p.f64 (exp.f64 x)) x) (/.f64 -1 x)) y)) (-.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (/.f64 (+.f64 1 (log1p.f64 (exp.f64 x))) x) 3) (pow.f64 y 3)) (log.f64 x)) (log.f64 (/.f64 -1 y))))"]],"stop":[["node limit",1]],"time":36.001953125,"type":"simplify"},{"compiler":[[3707,1857]],"time":36.14697265625,"type":"eval"},{"alts":[["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","done",12.334659967217194],["(fma.f64 x (-.f64 1/2 y) (log.f64 2))","done",12.26856578237228],["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","done",0.2578125]],"compiler":[[11,8],[9,7],[9,6]],"count":[[189,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[186,0],"picked":[1,1]}],"min-error":[0],"time":37.5009765625,"type":"prune"},{"accuracy":[0.2578125],"baseline":[0.2578125],"branch":[["x",0.2578125,1],["y",0.2578125,1],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))",0.2578125,1]],"compiler":[[3,2],[3,2],[11,8],[34,17]],"count":[[4,1]],"inputs":[["(expm1.f64 (log1p.f64 (-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))))","(fma.f64 x (-.f64 1/2 y) (log.f64 2))","(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))","(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))"]],"link":["."],"name":["Logistic regression 2"],"oracle":[20.256464490425625],"outputs":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"time":10.402099609375,"times":[["x",3.3359375],["y",3.25],["(-.f64 (log.f64 (+.f64 1 (exp.f64 x))) (*.f64 x y))",2.97021484375]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[5,36,11,0.0002435],[4,35,11,0.000197333],[3,31,11,0.000150417],[2,25,11,0.000104542],[1,13,11,6.125e-5],[0,7,11,2.3625e-5]],"inputs":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (log1p.f64 (exp.f64 x)) (*.f64 x y))"]],"stop":[["done",1],["saturated",1]],"time":8.654052734375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.6298828125,"type":"end"}]
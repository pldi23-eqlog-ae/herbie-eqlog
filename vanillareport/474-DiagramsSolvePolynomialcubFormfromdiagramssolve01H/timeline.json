[{"compiler":[[20,14]],"method":["search"],"sampling":[[12,0.15204642147183178,0.8460018835740384,0.0019516949541298345],[11,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[10,0.0,0.9980483050458702,0.0019516949541298345],[9,0.0,0.9980483050458702,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":196.25,"type":"analyze"},{"outcomes":[["body",256,"invalid",180.39892578125,3137],["body",256,"valid",472.073974609375,8256]],"time":665.51806640625,"type":"sample"},{"compiler":[[19,13]],"egraph":[[0,4,4,2.875e-6],[6,7275,112,0.043580209],[5,3619,112,0.029365959],[4,1386,133,0.011756500999999999],[3,608,154,0.003731251],[2,290,154,0.001471876],[1,122,154,0.000583667],[0,43,154,0.000176917]],"inputs":[["0","1","2","3"],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","(+.f64 (-.f64 y (/.f64 x (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) x)))","(+.f64 (-.f64 z (/.f64 y (*.f64 x 3))) (/.f64 t (*.f64 (*.f64 x 3) y)))","(+.f64 (-.f64 t (/.f64 y (*.f64 z 3))) (/.f64 x (*.f64 (*.f64 z 3) y)))","(+.f64 (-.f64 x (/.f64 z (*.f64 y 3))) (/.f64 t (*.f64 (*.f64 y 3) z)))","(+.f64 (-.f64 x (/.f64 t (*.f64 z 3))) (/.f64 y (*.f64 (*.f64 z 3) t)))","(+.f64 (-.f64 x (/.f64 y (*.f64 t 3))) (/.f64 z (*.f64 (*.f64 t 3) y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 y (*.f64 z 3))))","(+.f64 x (-.f64 (*.f64 -1/3 (/.f64 y z)) (*.f64 -1/3 (/.f64 t (*.f64 y z)))))","(+.f64 x (*.f64 -1/3 (-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))))","(-.f64 x (*.f64 (/.f64 -1/3 z) (-.f64 (/.f64 t y) y)))","(+.f64 x (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))))","(+.f64 (-.f64 y (/.f64 x (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) x)))","(+.f64 (-.f64 y (/.f64 x (*.f64 z 3))) (/.f64 t (*.f64 x (*.f64 z 3))))","(-.f64 y (-.f64 (/.f64 x (*.f64 z 3)) (/.f64 t (*.f64 z (*.f64 x 3)))))","(+.f64 y (*.f64 -1/3 (-.f64 (/.f64 x z) (/.f64 t (*.f64 x z)))))","(+.f64 y (*.f64 (/.f64 -1/3 z) (-.f64 x (/.f64 t x))))","(+.f64 (-.f64 z (/.f64 y (*.f64 x 3))) (/.f64 t (*.f64 (*.f64 x 3) y)))","(+.f64 (-.f64 z (/.f64 y (*.f64 x 3))) (/.f64 t (*.f64 x (*.f64 y 3))))","(-.f64 (+.f64 (/.f64 (/.f64 t y) (*.f64 x 3)) z) (/.f64 y (*.f64 x 3)))","(-.f64 (+.f64 z (/.f64 (/.f64 t y) (*.f64 x 3))) (/.f64 y (*.f64 x 3)))","(+.f64 z (-.f64 (/.f64 t (*.f64 3 (*.f64 x y))) (/.f64 y (*.f64 x 3))))","(+.f64 z (*.f64 -1/3 (-.f64 (/.f64 y x) (/.f64 t (*.f64 x y)))))","(+.f64 z (*.f64 (/.f64 -1/3 x) (-.f64 y (/.f64 t y))))","(+.f64 (-.f64 t (/.f64 y (*.f64 z 3))) (/.f64 x (*.f64 (*.f64 z 3) y)))","(+.f64 (-.f64 t (/.f64 y (*.f64 z 3))) (/.f64 x (*.f64 y (*.f64 z 3))))","(+.f64 (+.f64 t (*.f64 -1/3 (/.f64 y z))) (/.f64 x (*.f64 y (*.f64 z 3))))","(+.f64 t (*.f64 -1/3 (-.f64 (/.f64 y z) (/.f64 x (*.f64 y z)))))","(+.f64 t (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 x y))))","(+.f64 (-.f64 x (/.f64 z (*.f64 y 3))) (/.f64 t (*.f64 (*.f64 y 3) z)))","(+.f64 (/.f64 t (*.f64 y (*.f64 z 3))) (-.f64 x (/.f64 z (*.f64 y 3))))","(+.f64 x (+.f64 (/.f64 t (*.f64 y (*.f64 z 3))) (*.f64 -1/3 (/.f64 z y))))","(+.f64 x (*.f64 -1/3 (-.f64 (/.f64 z y) (/.f64 t (*.f64 y z)))))","(+.f64 x (*.f64 (/.f64 -1/3 y) (-.f64 z (/.f64 t z))))","(+.f64 (-.f64 x (/.f64 t (*.f64 z 3))) (/.f64 y (*.f64 (*.f64 z 3) t)))","(+.f64 (-.f64 x (/.f64 t (*.f64 z 3))) (/.f64 y (*.f64 z (*.f64 3 t))))","(-.f64 x (-.f64 (/.f64 t (*.f64 z 3)) (/.f64 y (*.f64 3 (*.f64 z t)))))","(-.f64 x (-.f64 (/.f64 (/.f64 t z) 3) (/.f64 y (*.f64 z (*.f64 3 t)))))","(+.f64 x (*.f64 -1/3 (-.f64 (/.f64 t z) (/.f64 y (*.f64 z t)))))","(-.f64 x (*.f64 (/.f64 -1/3 z) (-.f64 (/.f64 y t) t)))","(+.f64 (-.f64 x (/.f64 y (*.f64 t 3))) (/.f64 z (*.f64 (*.f64 t 3) y)))","(+.f64 (-.f64 x (/.f64 y (*.f64 3 t))) (/.f64 z (*.f64 y (*.f64 3 t))))","(+.f64 (-.f64 x (/.f64 (/.f64 y 3) t)) (/.f64 z (*.f64 3 (*.f64 t y))))","(+.f64 (-.f64 x (/.f64 (/.f64 y 3) t)) (/.f64 z (*.f64 3 (*.f64 y t))))","(+.f64 (+.f64 x (*.f64 -1/3 (/.f64 y t))) (/.f64 z (*.f64 y (*.f64 3 t))))","(+.f64 x (*.f64 -1/3 (-.f64 (/.f64 y t) (/.f64 z (*.f64 y t)))))","(+.f64 x (*.f64 (/.f64 -1/3 t) (-.f64 y (/.f64 z y))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":70.123046875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,7574,14,0.076708501],[11,7300,14,0.063605918],[10,6690,14,0.05396395899999999],[9,5725,14,0.044022375999999995],[8,4742,14,0.034434916999999995],[7,3500,14,0.024041042],[6,1243,14,0.013082459000000001],[5,550,16,0.004979376000000001],[4,255,20,0.002037001],[3,116,22,0.000838251],[2,59,22,0.000362709],[1,25,22,0.000170834],[0,12,22,6.5167e-5]],"inputs":[["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 y (*.f64 z 3))))","(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 (/.f64 t z) (*.f64 y 3)))","(+.f64 (+.f64 x (*.f64 -1/3 (/.f64 y z))) (/.f64 t (*.f64 y (*.f64 z 3))))","(+.f64 x (fma.f64 -1/3 (/.f64 y z) (/.f64 t (*.f64 y (*.f64 z 3)))))","(+.f64 x (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)"]],"stop":[["node limit",1]],"time":90.10498046875,"type":"simplify"},{"compiler":[[29,18]],"time":0.507080078125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","next",2.7607612793053264],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908]],"compiler":[[14,9],[19,13],[14,9],[19,13]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.13738251953688405],"time":1.512939453125,"type":"prune"},{"compiler":[[30,12]],"locations":[["(-.f64 y (/.f64 t y))",0.00390625,true],["(/.f64 -1/3 z)",0.390625,true],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)",2.5153463480180136,true]],"time":6.81787109375,"type":"localize"},{"count":[[3,72]],"series":[["(-.f64 y (/.f64 t y))","t","-inf",0.153076171875],["(-.f64 y (/.f64 t y))","t","inf",0.16796875],["(-.f64 y (/.f64 t y))","t","0",0.15087890625],["(-.f64 y (/.f64 t y))","y","-inf",0.205078125],["(-.f64 y (/.f64 t y))","y","inf",0.296875],["(-.f64 y (/.f64 t y))","y","0",0.246826171875],["(/.f64 -1/3 z)","z","-inf",0.19384765625],["(/.f64 -1/3 z)","z","inf",0.205078125],["(/.f64 -1/3 z)","z","0",0.23583984375],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","x","-inf",0.3779296875],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","x","inf",0.241943359375],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","x","0",0.400146484375],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","t","-inf",0.341064453125],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","t","inf",0.68310546875],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","t","0",0.489990234375],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","y","-inf",0.323974609375],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","y","inf",0.3330078125],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","y","0",0.552001953125],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","z","-inf",0.31591796875],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","z","inf",0.407958984375],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","z","0",0.61083984375]],"time":7.24609375,"type":"series"},{"count":[[3,211]],"egraph":[[2,3101,25,0.027972834],[1,223,25,0.0044226249999999995],[0,10,25,0.000342125]],"inputs":[["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(/.f64 -1/3 z)","(-.f64 y (/.f64 t y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 2) (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) (sqrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))) 2) (*.f64 x x)) (-.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (exp.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 -1/3 z))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 -1/3 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 -1/3 z)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 -1/3 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 -1/3 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/3 z)) (pow.f64 (cbrt.f64 (/.f64 -1/3 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -1/3 z)) 2) (cbrt.f64 (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -1/3 z)) (sqrt.f64 (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1/3 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 (*.f64 z z)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1/3 z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1/3 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -1/3 z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z -1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z -1/3) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1/9 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 -1/3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1/3 z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -1/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 -1/3 z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (/.f64 (neg.f64 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (/.f64 (neg.f64 t) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (/.f64 t y)) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (/.f64 t y)) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (/.f64 t y)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (/.f64 t y)) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (/.f64 t y)) (fma.f64 -1 (/.f64 t y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (/.f64 t y)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2)) (cbrt.f64 (/.f64 t y)) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (/.f64 t y)) (fma.f64 (neg.f64 t) (/.f64 1 y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 t) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y))) (pow.f64 (cbrt.f64 t) 2) (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y))) (pow.f64 (cbrt.f64 t) 2) (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y))) (pow.f64 (cbrt.f64 t) 2) (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y))) (pow.f64 (cbrt.f64 t) 2) (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y))) (pow.f64 (cbrt.f64 t) 2) (*.f64 (*.f64 (cbrt.f64 t) (/.f64 1 y)) (pow.f64 (cbrt.f64 t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y))) (sqrt.f64 t) (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y))) (sqrt.f64 t) (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y))) (sqrt.f64 t) (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y))) (sqrt.f64 t) (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y))) (sqrt.f64 t) (*.f64 (*.f64 (sqrt.f64 t) (/.f64 1 y)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 y))) (neg.f64 t) (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 y))) (neg.f64 t) (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 y))) (neg.f64 t) (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 y))) (neg.f64 t) (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 y))) (neg.f64 t) (*.f64 (/.f64 1 (neg.f64 y)) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1) (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1) (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1) (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1) (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1) (*.f64 (/.f64 (cbrt.f64 t) y) (/.f64 (pow.f64 (cbrt.f64 t) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) y)) (/.f64 (sqrt.f64 t) 1) (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) y)) (/.f64 (sqrt.f64 t) 1) (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) y)) (/.f64 (sqrt.f64 t) 1) (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) y)) (/.f64 (sqrt.f64 t) 1) (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) y)) (/.f64 (sqrt.f64 t) 1) (*.f64 (/.f64 (sqrt.f64 t) y) (/.f64 (sqrt.f64 t) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 t (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 t (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 t (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 t (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 t (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 t (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (/.f64 t y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y))) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y))) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y))) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y))) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y))) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 y)) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 t (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 t (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 t (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 t (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 t (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 t (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 y (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (sqrt.f64 y) (neg.f64 (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 t) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 y (/.f64 t y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 y (/.f64 t y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 y (/.f64 t y))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 y (/.f64 t y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (/.f64 t y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (cbrt.f64 (-.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (sqrt.f64 (-.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3)) (/.f64 1 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2)) (/.f64 1 (+.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (-.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y)) (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 y (/.f64 t y)) (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3)) (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2)) (+.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3))) (neg.f64 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2))) (neg.f64 (+.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 3) (pow.f64 (/.f64 (neg.f64 t) y) 3)) (fma.f64 y y (-.f64 (pow.f64 (/.f64 (neg.f64 t) y) 2) (*.f64 y (/.f64 (neg.f64 t) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 (neg.f64 t) y) 2)) (-.f64 y (/.f64 (neg.f64 t) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 y (/.f64 t y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 y (/.f64 t y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y)) (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y (/.f64 t y)) (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 y (/.f64 t y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 y)) (exp.f64 (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 y) (+.f64 1 (expm1.f64 (/.f64 t y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 y)) (+.f64 1 (expm1.f64 (/.f64 t y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 y)) (exp.f64 (/.f64 (neg.f64 t) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 y)) (/.f64 1 (exp.f64 (/.f64 t y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (neg.f64 t) y)) (exp.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (neg.f64 t) y)) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (/.f64 t y))) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 y (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 y (/.f64 t y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (/.f64 (neg.f64 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (*.f64 (/.f64 (neg.f64 t) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (neg.f64 (/.f64 1 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y (/.f64 t y)) 1 (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y (/.f64 t y)) 1 (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y (/.f64 t y)) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y (/.f64 t y)) 1 (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (/.f64 (neg.f64 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (*.f64 (/.f64 (neg.f64 t) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 y (/.f64 t y)) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 y (/.f64 t y)) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 y (/.f64 t y)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 y (/.f64 t y)) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (neg.f64 t) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (cbrt.f64 (-.f64 y (/.f64 t y))) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (cbrt.f64 (-.f64 y (/.f64 t y))) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (cbrt.f64 (-.f64 y (/.f64 t y))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (cbrt.f64 (-.f64 y (/.f64 t y))) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (/.f64 (neg.f64 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (*.f64 (/.f64 (neg.f64 t) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (/.f64 (neg.f64 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (*.f64 (/.f64 (neg.f64 t) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (neg.f64 (cbrt.f64 (/.f64 t y))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (sqrt.f64 (-.f64 y (/.f64 t y))) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (sqrt.f64 (-.f64 y (/.f64 t y))) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (sqrt.f64 (-.f64 y (/.f64 t y))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (sqrt.f64 (-.f64 y (/.f64 t y))) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (/.f64 (neg.f64 t) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (*.f64 (/.f64 (neg.f64 t) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 t y)) (neg.f64 (sqrt.f64 (/.f64 t y))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) (/.f64 1 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3)) (/.f64 1 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y))) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3)) (/.f64 1 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y))) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3)) (/.f64 1 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 y 3) (pow.f64 (/.f64 t y) 3)) (/.f64 1 (fma.f64 (/.f64 t y) (+.f64 y (/.f64 t y)) (*.f64 y y))) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2)) (/.f64 1 (+.f64 y (/.f64 t y))) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2)) (/.f64 1 (+.f64 y (/.f64 t y))) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2)) (/.f64 1 (+.f64 y (/.f64 t y))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 y y) (pow.f64 (/.f64 t y) 2)) (/.f64 1 (+.f64 y (/.f64 t y))) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (neg.f64 t) y)) 2) (cbrt.f64 (/.f64 (neg.f64 t) y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (neg.f64 t) y)) (sqrt.f64 (/.f64 (neg.f64 t) y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 t y))) (sqrt.f64 (/.f64 t y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 t y) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (-.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (fma.f64 (neg.f64 (/.f64 1 y)) t (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (-.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (fma.f64 (/.f64 (neg.f64 t) y) 1 (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (-.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 t y))) (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (-.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 t y))) (+.f64 (/.f64 (neg.f64 t) y) (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2)) (cbrt.f64 (/.f64 t y)) y)))))"]],"rules":[["egg-rr",154],["egg-rr",27],["egg-rr",30]],"stop":[["node limit",1]],"time":65.117919921875,"type":"rewrite"},{"count":[[283,230]],"egraph":[[12,7874,718,0.080275502],[11,7604,718,0.071769043],[10,7106,718,0.060040876],[9,6278,718,0.047809168],[8,5076,718,0.034917418],[7,2346,718,0.021150167999999997],[6,1324,718,0.009804084],[5,679,718,0.005456875999999999],[4,349,718,0.002934501],[3,188,718,0.00149871],[2,108,718,0.000847376],[1,53,718,0.00043416700000000006],[0,23,718,0.000167667]],"inputs":[["(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(*.f64 -1 (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(*.f64 -1 (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(*.f64 -1 (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(*.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 1/3 (/.f64 (/.f64 t y) z))","(*.f64 t (/.f64 (/.f64 1/3 y) z))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(fma.f64 1/3 (/.f64 t (*.f64 y z)) x)","(fma.f64 1/3 (/.f64 (/.f64 t y) z) x)","(fma.f64 (/.f64 t y) (/.f64 1/3 z) x)","(fma.f64 t (/.f64 (/.f64 1/3 y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(*.f64 -1/3 (/.f64 y z))","(*.f64 y (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(*.f64 -1/3 (/.f64 y z))","(*.f64 y (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 1/3 (/.f64 (/.f64 t y) z))","(*.f64 t (/.f64 (/.f64 1/3 y) z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 1/3 (/.f64 (/.f64 t y) z))","(*.f64 t (/.f64 (/.f64 1/3 y) z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(*.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(*.f64 -1 (/.f64 t y))","(neg.f64 (/.f64 t y))","(/.f64 (neg.f64 t) y)","(/.f64 t (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(*.f64 -1 (/.f64 t y))","(neg.f64 (/.f64 t y))","(/.f64 (neg.f64 t) y)","(/.f64 t (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(*.f64 -1 (/.f64 t y))","(neg.f64 (/.f64 t y))","(/.f64 (neg.f64 t) y)","(/.f64 t (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(-.f64 y (/.f64 t y))"]],"stop":[["node limit",1]],"time":114.09814453125,"type":"simplify"},{"compiler":[[5429,2126]],"time":47.931884765625,"type":"eval"},{"alts":[["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","next",2.7311325195368843],["(fma.f64 (/.f64 -1/3 z) (pow.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) 3) x)","fresh",2.9151727051372824],["(*.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 2))","fresh",3.2361553344423566],["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","done",2.7607612793053264],["(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","fresh",3.294816375145254],["(fma.f64 t (/.f64 (/.f64 1/3 y) z) x)","fresh",22.882924052104993],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908],["(pow.f64 (sqrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 2)","fresh",33.57429511722131]],"compiler":[[14,9],[17,12],[29,17],[14,9],[19,13],[12,8],[19,13],[17,12],[14,9],[17,12],[29,17],[19,13],[12,8],[19,13],[17,12]],"count":[[232,8]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[230,6],"picked":[1,1]}],"min-error":[0.0234375],"time":75.029052734375,"type":"prune"},{"compiler":[[34,10]],"locations":[["(-.f64 y (/.f64 t y))",0.00390625,false],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)",0.21484375,true],["(/.f64 (-.f64 y (/.f64 t y)) z)",2.4341789772726887,true]],"time":6.881103515625,"type":"localize"},{"count":[[2,72]],"series":[["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","x","-inf",0.18115234375],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","x","inf",0.23095703125],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","x","0",0.384033203125],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","z","-inf",0.305908203125],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","z","inf",0.240966796875],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","z","0",0.248046875],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","t","-inf",0.3369140625],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","t","inf",0.2900390625],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","t","0",0.318115234375],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","y","-inf",0.256103515625],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","y","inf",0.27099609375],["(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","y","0",0.264892578125],["(/.f64 (-.f64 y (/.f64 t y)) z)","z","-inf",1.197021484375],["(/.f64 (-.f64 y (/.f64 t y)) z)","z","inf",0.378173828125],["(/.f64 (-.f64 y (/.f64 t y)) z)","z","0",0.4111328125],["(/.f64 (-.f64 y (/.f64 t y)) z)","t","-inf",0.307861328125],["(/.f64 (-.f64 y (/.f64 t y)) z)","t","inf",0.3310546875],["(/.f64 (-.f64 y (/.f64 t y)) z)","t","0",0.363037109375],["(/.f64 (-.f64 y (/.f64 t y)) z)","y","-inf",0.410888671875],["(/.f64 (-.f64 y (/.f64 t y)) z)","y","inf",0.31103515625],["(/.f64 (-.f64 y (/.f64 t y)) z)","y","0",0.5048828125]],"time":8.02099609375,"type":"series"},{"count":[[2,239]],"egraph":[[2,3301,24,0.030672790999999998],[1,225,24,0.0054568329999999995],[0,10,24,0.00032825]],"inputs":[["(/.f64 (-.f64 y (/.f64 t y)) z)","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y (/.f64 t y)) z) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 t y) z))) (sqrt.f64 (/.f64 (/.f64 t y) z)) (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y (/.f64 t y)) z) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 y (/.f64 t y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) z) 1))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) z)) 1 (*.f64 (/.f64 (/.f64 t y) z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (*.f64 (cbrt.f64 (/.f64 (/.f64 t y) z)) (cbrt.f64 (/.f64 (/.f64 t y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (cbrt.f64 z))) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 t y) (cbrt.f64 z)) (/.f64 1 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 t y) (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1)))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) z)) (/.f64 t 1) (*.f64 (/.f64 (/.f64 1 y) z) (/.f64 t 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) z) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z)) (/.f64 (sqrt.f64 (/.f64 t y)) 1) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) z) (/.f64 (sqrt.f64 (/.f64 t y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z))) (/.f64 t (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (/.f64 1 y) (cbrt.f64 z)) (/.f64 t (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z))) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 (/.f64 t y)) (cbrt.f64 z)) (/.f64 (sqrt.f64 (/.f64 t y)) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z))) (/.f64 t (sqrt.f64 z)) (*.f64 (/.f64 (/.f64 1 y) (sqrt.f64 z)) (/.f64 t (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 (/.f64 t y)) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 t y)) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y (/.f64 t y)) z))) (cbrt.f64 (exp.f64 (/.f64 (-.f64 y (/.f64 t y)) z))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 (/.f64 t y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 y (/.f64 t y)) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (/.f64 t y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y (/.f64 t y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (*.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) 2) (cbrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (*.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) (sqrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 y (/.f64 t y))) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 y (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 (-.f64 y (/.f64 t y)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 (-.f64 y (/.f64 t y)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) 1) (/.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) 1) (/.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (-.f64 y (/.f64 t y))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 y (/.f64 t y)) 2)) (sqrt.f64 z)) (/.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (-.f64 y (/.f64 t y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 y (/.f64 t y)) 3) (pow.f64 z 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z (-.f64 y (/.f64 t y))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y (/.f64 t y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y (/.f64 t y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y (/.f64 t y)) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 y (/.f64 t y)) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 y (/.f64 t y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 y (/.f64 t y)) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x))) (cbrt.f64 (exp.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 2) (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) (sqrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) 3) (pow.f64 x 3)) (fma.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) (-.f64 (*.f64 x x) (*.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) (neg.f64 (*.f64 x x))) (-.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (exp.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 1))))))"]],"rules":[["egg-rr",29],["egg-rr",210]],"stop":[["node limit",1]],"time":87.739990234375,"type":"rewrite"},{"count":[[311,258]],"egraph":[[12,7800,790,0.066544586],[11,7539,790,0.059329127],[10,7142,790,0.050188294],[9,6342,790,0.041074169],[8,5143,790,0.030633544000000002],[7,2450,790,0.019397335],[6,1427,790,0.010125127000000001],[5,801,790,0.005722419],[4,413,790,0.003104335],[3,220,790,0.0017188350000000002],[2,116,922,0.000879876],[1,54,922,0.000442751],[0,23,994,0.000168959]],"inputs":[["(*.f64 -1 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(*.f64 -1 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(*.f64 -1 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 t (*.f64 y z)))","(neg.f64 (/.f64 t (*.f64 y z)))","(/.f64 (/.f64 (neg.f64 t) y) z)","(/.f64 (neg.f64 t) (*.f64 y z))","(/.f64 t (neg.f64 (*.f64 y z)))","(/.f64 t (*.f64 y (neg.f64 z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(*.f64 -1 (/.f64 t (*.f64 y z)))","(neg.f64 (/.f64 t (*.f64 y z)))","(/.f64 (/.f64 (neg.f64 t) y) z)","(/.f64 (neg.f64 t) (*.f64 y z))","(/.f64 t (neg.f64 (*.f64 y z)))","(/.f64 t (*.f64 y (neg.f64 z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(*.f64 -1 (/.f64 t (*.f64 y z)))","(neg.f64 (/.f64 t (*.f64 y z)))","(/.f64 (/.f64 (neg.f64 t) y) z)","(/.f64 (neg.f64 t) (*.f64 y z))","(/.f64 t (neg.f64 (*.f64 y z)))","(/.f64 t (*.f64 y (neg.f64 z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(/.f64 (-.f64 y (/.f64 t y)) z)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 (/.f64 t (*.f64 y z)) 1/3)","(*.f64 (/.f64 t z) (/.f64 1/3 y))","(/.f64 (/.f64 1/3 y) (/.f64 z t))","(/.f64 (/.f64 t (*.f64 3 z)) y)","(/.f64 (/.f64 t (*.f64 z 3)) y)","(/.f64 (/.f64 (*.f64 t 1/3) z) y)","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(fma.f64 1/3 (/.f64 t (*.f64 y z)) x)","(fma.f64 (/.f64 t (*.f64 y z)) 1/3 x)","(fma.f64 t (/.f64 1/3 (*.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(*.f64 (/.f64 y z) -1/3)","(*.f64 y (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 (/.f64 y z) -1/3 x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 y z))","(*.f64 (/.f64 y z) -1/3)","(*.f64 y (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 (/.f64 y z) -1/3 x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 (/.f64 y z) -1/3 x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 (/.f64 t (*.f64 y z)) 1/3)","(*.f64 (/.f64 t z) (/.f64 1/3 y))","(/.f64 (/.f64 1/3 y) (/.f64 z t))","(/.f64 (/.f64 t (*.f64 3 z)) y)","(/.f64 (/.f64 t (*.f64 z 3)) y)","(/.f64 (/.f64 (*.f64 t 1/3) z) y)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 (/.f64 t (*.f64 y z)) 1/3)","(*.f64 (/.f64 t z) (/.f64 1/3 y))","(/.f64 (/.f64 1/3 y) (/.f64 z t))","(/.f64 (/.f64 t (*.f64 3 z)) y)","(/.f64 (/.f64 t (*.f64 z 3)) y)","(/.f64 (/.f64 (*.f64 t 1/3) z) y)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z))","(*.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z))","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)","(+.f64 (*.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 1/3 (/.f64 (-.f64 (/.f64 t y) y) z) x)"]],"stop":[["node limit",1]],"time":103.350830078125,"type":"simplify"},{"compiler":[[14812,5183]],"time":103.5,"type":"eval"},{"alts":[["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","done",2.7607612793053264],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","next",2.734375],["(fma.f64 -1/3 (+.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))) x)","fresh",2.8832589356003977],["(/.f64 (/.f64 (*.f64 t 1/3) z) y)","fresh",45.055649023104],["(pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 3)","fresh",3.203354101663913],["(fma.f64 -1/3 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z))) x)","fresh",31.166053808610656],["(fma.f64 t (/.f64 (/.f64 1/3 y) z) x)","fresh",22.882924052104993],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908],["(*.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 2))","fresh",3.223842822358587]],"compiler":[[14,9],[16,11],[45,23],[11,8],[17,12],[22,14],[12,8],[19,13],[29,16],[16,11],[45,23],[11,8],[17,12],[22,14],[12,8],[19,13],[29,16]],"count":[[425,9]],"kept":[{"done":[1,1],"fresh":[6,2],"new":[417,6],"picked":[1,0]}],"min-error":[0.00390625],"time":181.4580078125,"type":"prune"},{"compiler":[[45,27]],"locations":[["(fma.f64 t (neg.f64 (/.f64 1 y)) y)",0.08203125,true],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)",0.21484375,true],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)",2.4341789772726887,true]],"time":11.5751953125,"type":"localize"},{"count":[[3,108]],"series":[["(fma.f64 t (neg.f64 (/.f64 1 y)) y)","y","-inf",0.177001953125],["(fma.f64 t (neg.f64 (/.f64 1 y)) y)","y","inf",0.139892578125],["(fma.f64 t (neg.f64 (/.f64 1 y)) y)","y","0",0.181884765625],["(fma.f64 t (neg.f64 (/.f64 1 y)) y)","t","-inf",0.14794921875],["(fma.f64 t (neg.f64 (/.f64 1 y)) y)","t","inf",0.14599609375],["(fma.f64 t (neg.f64 (/.f64 1 y)) y)","t","0",0.176025390625],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","x","-inf",0.172119140625],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","x","inf",0.18701171875],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","x","0",0.7998046875],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","z","-inf",0.260009765625],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","z","inf",0.241943359375],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","z","0",0.256103515625],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","y","-inf",0.212890625],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","y","inf",0.18505859375],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","y","0",0.2021484375],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","t","-inf",0.2548828125],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","t","inf",0.23095703125],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","t","0",0.218994140625],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","z","-inf",0.337890625],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","z","inf",0.34716796875],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","z","0",0.619873046875],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","y","-inf",0.484130859375],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","y","inf",0.3291015625],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","y","0",0.346923828125],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","t","-inf",0.35498046875],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","t","inf",0.360107421875],["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","t","0",0.490966796875]],"time":8.286865234375,"type":"series"},{"count":[[3,119]],"egraph":[[2,3022,34,0.025898083000000002],[1,246,34,0.00425175],[0,12,34,0.000336917]],"inputs":[["(/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z)","(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","(fma.f64 t (neg.f64 (/.f64 1 y)) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (fma.f64 t (/.f64 1 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 t (/.f64 1 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 t (/.f64 1 y) y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) 2) (cbrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) 2) (*.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) (sqrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) (*.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (fma.f64 t (/.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) 2) 1) (/.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) 1) (/.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (fma.f64 t (/.f64 1 y) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) 2) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) (cbrt.f64 (*.f64 z z))) (/.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/2) (/.f64 (fma.f64 t (/.f64 1 y) y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 t (/.f64 1 y)) y) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (fma.f64 t (/.f64 1 y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (fma.f64 t (/.f64 1 y) y) 3) (pow.f64 z 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z (fma.f64 t (/.f64 1 y) y)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))) 2)) (cbrt.f64 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))) (sqrt.f64 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 t (/.f64 1 y) y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (fma.f64 t (/.f64 1 y) y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) 2) (cbrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) (sqrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3) 2) (*.f64 x x)) (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))) 2)) (cbrt.f64 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))) (sqrt.f64 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 -1/3) (/.f64 (fma.f64 t (/.f64 1 y) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -1/3) (/.f64 (fma.f64 t (/.f64 1 y) y) z)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (/.f64 (fma.f64 t (/.f64 1 y) y) z) -1/3 x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 t (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 t (/.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (/.f64 1 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t (/.f64 1 y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 t (/.f64 1 y) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 t (/.f64 1 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (/.f64 1 y) y)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (/.f64 1 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 t (/.f64 1 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 t (/.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 t (/.f64 1 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) 2) (cbrt.f64 (fma.f64 t (/.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) (sqrt.f64 (fma.f64 t (/.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 t 3) (pow.f64 y -3)) (pow.f64 y 3)) (+.f64 (pow.f64 (*.f64 t (/.f64 1 y)) 2) (-.f64 (*.f64 y y) (*.f64 (*.f64 t (/.f64 1 y)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 t (/.f64 1 y)) 2) (*.f64 y y)) (-.f64 (*.f64 t (/.f64 1 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 t (/.f64 1 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 t (/.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 t (/.f64 1 y) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 t (/.f64 1 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 t (/.f64 1 y) y))) 2)) (cbrt.f64 (log.f64 (fma.f64 t (/.f64 1 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 t (/.f64 1 y) y)))) (sqrt.f64 (log.f64 (fma.f64 t (/.f64 1 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 t (/.f64 1 y) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 t (/.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 t (/.f64 1 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 y)) (pow.f64 (exp.f64 t) (/.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 t) (/.f64 1 y)) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 t (/.f64 1 y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 t (/.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 t (/.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 t (/.f64 1 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 t (/.f64 1 y) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 t (/.f64 1 y) y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 t (/.f64 1 y) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 t (/.f64 1 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 t (/.f64 1 y) y)) 1) 1))))))"]],"rules":[["egg-rr",36],["egg-rr",36],["egg-rr",47]],"stop":[["node limit",1]],"time":52.156982421875,"type":"rewrite"},{"count":[[227,145]],"egraph":[[12,7913,1057,0.06628229100000001],[11,7646,1057,0.059002707],[10,7249,1057,0.049798957000000005],[9,6432,1057,0.040815874],[8,5229,1057,0.030344457],[7,2471,1057,0.01900354],[6,1434,1057,0.009907707],[5,716,1057,0.00558554],[4,378,1057,0.002980249],[3,221,1189,0.001732999],[2,122,1189,0.000997583],[1,56,1279,0.000514749],[0,25,1329,0.000203208]],"inputs":[["(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(*.f64 -1 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(*.f64 -1 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(*.f64 -1 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 y z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(*.f64 -1 (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(*.f64 -1 (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(*.f64 -1 (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(*.f64 -1 (/.f64 t (*.f64 y z)))","(neg.f64 (/.f64 t (*.f64 y z)))","(/.f64 (/.f64 (neg.f64 t) y) z)","(/.f64 t (*.f64 y (neg.f64 z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(*.f64 -1 (/.f64 t (*.f64 y z)))","(neg.f64 (/.f64 t (*.f64 y z)))","(/.f64 (/.f64 (neg.f64 t) y) z)","(/.f64 t (*.f64 y (neg.f64 z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(*.f64 -1 (/.f64 t (*.f64 y z)))","(neg.f64 (/.f64 t (*.f64 y z)))","(/.f64 (/.f64 (neg.f64 t) y) z)","(/.f64 t (*.f64 y (neg.f64 z)))","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1 (/.f64 t (*.f64 y z))) (/.f64 y z))","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)","(fma.f64 -1 (/.f64 t (*.f64 y z)) (/.f64 y z))","(-.f64 (/.f64 y z) (/.f64 t (*.f64 y z)))","(/.f64 (-.f64 y (/.f64 t y)) z)","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 (/.f64 y z) -1/3 x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 (/.f64 t (*.f64 y z)) 1/3)","(/.f64 t (/.f64 (*.f64 y z) 1/3))","(*.f64 t (/.f64 (/.f64 1/3 z) y))","(*.f64 t (/.f64 1/3 (*.f64 y z)))","(*.f64 t (/.f64 (/.f64 1/3 y) z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 (/.f64 t (*.f64 y z)) 1/3)","(/.f64 t (/.f64 (*.f64 y z) 1/3))","(*.f64 t (/.f64 (/.f64 1/3 z) y))","(*.f64 t (/.f64 1/3 (*.f64 y z)))","(*.f64 t (/.f64 (/.f64 1/3 y) z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(*.f64 1/3 (/.f64 t (*.f64 y z)))","(*.f64 (/.f64 t (*.f64 y z)) 1/3)","(/.f64 t (/.f64 (*.f64 y z) 1/3))","(*.f64 t (/.f64 (/.f64 1/3 z) y))","(*.f64 t (/.f64 1/3 (*.f64 y z)))","(*.f64 t (/.f64 (/.f64 1/3 y) z))","(+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x)","(fma.f64 1/3 (/.f64 t (*.f64 y z)) x)","(fma.f64 (/.f64 t (*.f64 y z)) 1/3 x)","(fma.f64 (/.f64 (/.f64 1/3 z) y) t x)","(fma.f64 t (/.f64 (/.f64 1/3 z) y) x)","(fma.f64 t (/.f64 1/3 (*.f64 y z)) x)","(fma.f64 (/.f64 t z) (/.f64 1/3 y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(*.f64 -1/3 (/.f64 y z))","(*.f64 (/.f64 y z) -1/3)","(*.f64 y (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 (/.f64 y z) -1/3 x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(*.f64 -1/3 (/.f64 y z))","(*.f64 (/.f64 y z) -1/3)","(*.f64 y (/.f64 -1/3 z))","(+.f64 (*.f64 -1/3 (/.f64 y z)) x)","(fma.f64 -1/3 (/.f64 y z) x)","(fma.f64 (/.f64 y z) -1/3 x)","(fma.f64 y (/.f64 -1/3 z) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z))","(/.f64 (*.f64 -1/3 (fma.f64 -1 (/.f64 t y) y)) z)","(/.f64 (*.f64 (-.f64 y (/.f64 t y)) -1/3) z)","(*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3)","(*.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z))","(/.f64 (*.f64 -1/3 (fma.f64 -1 (/.f64 t y) y)) z)","(/.f64 (*.f64 (-.f64 y (/.f64 t y)) -1/3) z)","(*.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3)","(*.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z))","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 x (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)))","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","x","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","(+.f64 (*.f64 -1/3 (/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) y) z)) x)","(fma.f64 -1/3 (/.f64 y z) (fma.f64 1/3 (/.f64 t (*.f64 y z)) x))","(fma.f64 (/.f64 y z) -1/3 (fma.f64 (/.f64 t (*.f64 y z)) 1/3 x))","(fma.f64 (/.f64 (/.f64 1/3 z) y) t (fma.f64 (/.f64 y z) -1/3 x))","(fma.f64 (-.f64 y (/.f64 t y)) (/.f64 -1/3 z) x)","(fma.f64 (/.f64 1/3 z) (-.f64 (/.f64 t y) y) x)","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(*.f64 -1 (/.f64 t y))","(neg.f64 (/.f64 t y))","(/.f64 (neg.f64 t) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(*.f64 -1 (/.f64 t y))","(neg.f64 (/.f64 t y))","(/.f64 (neg.f64 t) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(*.f64 -1 (/.f64 t y))","(neg.f64 (/.f64 t y))","(/.f64 (neg.f64 t) y)","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","y","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))","(+.f64 (*.f64 -1 (/.f64 t y)) y)","(fma.f64 -1 (/.f64 t y) y)","(-.f64 y (/.f64 t y))"]],"stop":[["node limit",1]],"time":106.697021484375,"type":"simplify"},{"compiler":[[2331,1454]],"time":30.262939453125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","done",2.7607612793053264],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","done",2.734375],["(fma.f64 -1/3 (+.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))) x)","next",2.8832589356003977],["(/.f64 (/.f64 (*.f64 t 1/3) z) y)","fresh",45.055649023104],["(pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 3)","fresh",3.203354101663913],["(fma.f64 (/.f64 t z) (/.f64 1/3 y) x)","fresh",20.493656361306375],["(fma.f64 t (/.f64 (/.f64 1/3 y) z) x)","fresh",22.882924052104993],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908],["(fma.f64 -1/3 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (fma.f64 t (/.f64 1 y) y) (cbrt.f64 z))) x)","fresh",18.33874895122325]],"compiler":[[14,9],[16,11],[45,23],[11,8],[17,12],[12,8],[12,8],[19,13],[21,14],[45,23],[11,8],[17,12],[12,8],[12,8],[19,13],[21,14]],"count":[[154,9]],"kept":[{"done":[1,1],"fresh":[7,5],"new":[145,2],"picked":[1,1]}],"min-error":[0],"time":33.856201171875,"type":"prune"},{"compiler":[[167,62]],"locations":[["(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))",0.4928512695368841,true],["(*.f64 (/.f64 1 z) (/.f64 t y))",3.1248805935913477,true],["(cbrt.f64 (/.f64 y z))",9.461265899687335,true],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))",45.76266558506525,true]],"time":30.267822265625,"type":"localize"},{"count":[[4,72]],"series":[["(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))","z","-inf",0.344970703125],["(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))","z","inf",0.219970703125],["(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))","z","0",0.287109375],["(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))","y","-inf",0.534912109375],["(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))","y","inf",0.26904296875],["(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))","y","0",0.287841796875],["(*.f64 (/.f64 1 z) (/.f64 t y))","y","-inf",0.1669921875],["(*.f64 (/.f64 1 z) (/.f64 t y))","y","inf",0.14306640625],["(*.f64 (/.f64 1 z) (/.f64 t y))","y","0",0.149169921875],["(*.f64 (/.f64 1 z) (/.f64 t y))","t","-inf",0.172119140625],["(*.f64 (/.f64 1 z) (/.f64 t y))","t","inf",0.14599609375],["(*.f64 (/.f64 1 z) (/.f64 t y))","t","0",0.175048828125],["(*.f64 (/.f64 1 z) (/.f64 t y))","z","-inf",0.152099609375],["(*.f64 (/.f64 1 z) (/.f64 t y))","z","inf",0.14599609375],["(*.f64 (/.f64 1 z) (/.f64 t y))","z","0",0.18505859375],["(cbrt.f64 (/.f64 y z))","z","-inf",0.3740234375],["(cbrt.f64 (/.f64 y z))","z","inf",0.365966796875],["(cbrt.f64 (/.f64 y z))","z","0",0.37890625],["(cbrt.f64 (/.f64 y z))","y","-inf",0.4560546875],["(cbrt.f64 (/.f64 y z))","y","inf",0.35595703125],["(cbrt.f64 (/.f64 y z))","y","0",0.475830078125],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","y","-inf",0.564208984375],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","y","inf",0.534912109375],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","y","0",0.77294921875],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","t","-inf",1.055908203125],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","t","inf",1.384033203125],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","t","0",2.969970703125],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","z","-inf",0.73291015625],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","z","inf",0.657958984375],["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","z","0",0.955810546875]],"time":15.861083984375,"type":"series"},{"count":[[4,164]],"egraph":[[2,3656,36,0.029398166],[1,273,38,0.005104083],[0,13,39,0.000329583]],"inputs":[["(fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))","(cbrt.f64 (/.f64 y z))","(*.f64 (/.f64 1 z) (/.f64 t y))","(*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 t z) y) (/.f64 (/.f64 t z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 t z) y) (/.f64 (/.f64 t z) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t y) (+.f64 (/.f64 1 z) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) 2) (cbrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) (sqrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (/.f64 t z) y) 3) (pow.f64 (/.f64 (/.f64 t z) y) 3)) (+.f64 (pow.f64 (/.f64 (/.f64 t z) y) 2) (-.f64 (pow.f64 (/.f64 (/.f64 t z) y) 2) (pow.f64 (/.f64 (/.f64 t z) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (/.f64 t z) y) 2) (pow.f64 (/.f64 (/.f64 t z) y) 2)) (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (/.f64 t z) y)) (exp.f64 (/.f64 (/.f64 t z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y))) (exp.f64 (/.f64 (/.f64 t z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (/.f64 t z) y)) (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y))) (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y))) (exp.f64 (/.f64 (/.f64 t z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (/.f64 t z) y)) (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y))) (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 (pow.f64 (exp.f64 (/.f64 (/.f64 t z) y)) 2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 y z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 y z))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 y z))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))) (cbrt.f64 (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 1 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y z) 1/6) (pow.f64 (/.f64 y z) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y z))) 4)) (sqrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 y) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 y)) (neg.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y z) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z y) -3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y z)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y z) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z y) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 z) (cbrt.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 y z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (/.f64 t z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (/.f64 t z) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (/.f64 t z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (/.f64 t z) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (/.f64 t z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (/.f64 t z) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 z (/.f64 y t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 z y) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (/.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (/.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 z) (/.f64 y t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 t (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 t (/.f64 z (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 t y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (/.f64 y t) -2)) (/.f64 z (cbrt.f64 (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 t) 2) (/.f64 (*.f64 z y) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 t y)) (/.f64 z (sqrt.f64 (/.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 t) (/.f64 (*.f64 z y) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 z (/.f64 y t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 z) (/.f64 y t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 y t) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 t) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 t) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 t) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 t) (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 t z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 t y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 t z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 t) 1) (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 t)) (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 t)) (*.f64 (neg.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 t -1) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 t) -1) (*.f64 (neg.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t y) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t y) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 t y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 t y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 t) (/.f64 1 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (neg.f64 t)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 t y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 t z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 t z) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 t z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 t z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 t z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 t y) 3) (pow.f64 z 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (/.f64 y t)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y t) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 z y) t) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (/.f64 t y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (/.f64 t z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 t z) y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (/.f64 t z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (/.f64 t z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 (/.f64 t z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 t z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 t y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (/.f64 t z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (/.f64 t z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (/.f64 t z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 t z) y)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 y z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y z) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z y) -3) 2/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y z))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y z)) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y z) 1/6) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z y) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (/.f64 y z))) 1))))))"]],"rules":[["egg-rr",27],["egg-rr",65],["egg-rr",38],["egg-rr",34]],"stop":[["node limit",1]],"time":57.955078125,"type":"rewrite"},{"count":[[236,171]],"egraph":[[9,1402,288,0.014299625],[8,1292,288,0.01176275],[7,1117,288,0.008925833000000001],[6,648,288,0.005814042],[5,333,288,0.00294825],[4,180,288,0.001456375],[3,141,288,0.000881292],[2,101,288,0.00064175],[1,44,396,0.00036425],[0,20,612,0.000129125]],"inputs":[["(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","0","0","0","0","0","0","0","0","0","0","0","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))","(/.f64 t (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 t y)) z)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 t y))) z))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y)","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(*.f64 -1 (/.f64 (+.f64 (/.f64 t z) (*.f64 -1 (/.f64 t z))) y))","(/.f64 (*.f64 0 (/.f64 t y)) z)","(/.f64 0 z)","0","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)","(/.f64 t (*.f64 y z))","(/.f64 (/.f64 t z) y)"]],"stop":[["saturated",1]],"time":34.9228515625,"type":"simplify"},{"compiler":[[13406,5122]],"time":90.123046875,"type":"eval"},{"alts":[["(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","done",2.7607612793053264],["(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","done",2.734375],["(fma.f64 -1/3 (+.f64 (fma.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))) x)","fresh",16.14817134956427],["(fma.f64 t (/.f64 (/.f64 1/3 y) z) x)","fresh",22.882924052104993],["(fma.f64 -1/3 (+.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))) x)","done",2.8832589356003977],["(/.f64 (/.f64 (*.f64 t 1/3) z) y)","fresh",45.055649023104],["(pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 3)","fresh",3.203354101663913],["(fma.f64 (/.f64 t z) (/.f64 1/3 y) x)","fresh",20.493656361306375],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","fresh",3.2520985108912908]],"compiler":[[14,9],[16,11],[42,25],[12,8],[45,23],[11,8],[17,12],[12,8],[19,13]],"count":[[322,9]],"kept":[{"done":[2,2],"fresh":[6,5],"new":[313,1],"picked":[1,1]}],"min-error":[0],"time":121.381103515625,"type":"prune"},{"accuracy":[0.20703125],"baseline":[2.7311325195368843],"branch":[["x",2.7311325195368843,1],["y",0.4772262695368841,3],["z",0.20703125,3],["t",0.21388627930532605,3],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))",0.221035009768442,3],["(*.f64 z 3)",0.20703125,3]],"compiler":[[5,4],[5,4],[5,4],[5,4],[19,13],[7,6],[292,140]],"count":[[17,3]],"inputs":[["(fma.f64 -1/3 (+.f64 (fma.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))) x)","(fma.f64 (/.f64 t z) (/.f64 1/3 y) x)","(fma.f64 -1/3 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (fma.f64 t (/.f64 1 y) y) (cbrt.f64 z))) x)","(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","(fma.f64 -1/3 (+.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (cbrt.f64 (/.f64 y z)) (neg.f64 (*.f64 (/.f64 1 z) (/.f64 t y)))) (fma.f64 (neg.f64 (/.f64 1 z)) (/.f64 t y) (*.f64 (/.f64 1 z) (/.f64 t y)))) x)","(/.f64 (/.f64 (*.f64 t 1/3) z) y)","(pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 3)","(fma.f64 -1/3 (fma.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)) (neg.f64 (/.f64 (/.f64 t y) z))) x)","(*.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 y (/.f64 t y)) z) -1/3 x)) 2))","(fma.f64 -1/3 (/.f64 (-.f64 y (/.f64 t y)) z) x)","(fma.f64 (/.f64 -1/3 z) (pow.f64 (cbrt.f64 (-.f64 y (/.f64 t y))) 3) x)","(*.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 2))","(+.f64 (*.f64 -1/3 (/.f64 y z)) (+.f64 (*.f64 1/3 (/.f64 t (*.f64 y z))) x))","(fma.f64 t (/.f64 (/.f64 1/3 y) z) x)","(pow.f64 (sqrt.f64 (fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)) 2)","(fma.f64 (/.f64 -1/3 z) (-.f64 y (/.f64 t y)) x)","(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, H"],"oracle":[63.6856634077538],"outputs":[["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))","(fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x)","(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))"]],"time":151.77099609375,"times":[["x",6.84716796875],["y",52.427978515625],["z",24.652099609375],["t",17.637939453125],["(+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))",17.389892578125],["(*.f64 z 3)",18.755126953125]],"type":"regimes"},{"bstep":[[9.95665105530113e-13,5.4816610916823616e-11,0.032958984375],[-5.4840489429914806e-43,-2.3831452236546848e-46,0.10595703125]],"compiler":[[17,11],[7,6]],"method":["left-value","left-value"],"time":0.331787109375,"type":"bsearch"},{"compiler":[[57,38]],"egraph":[[5,54,77,0.000393457],[4,53,77,0.000313707],[3,50,77,0.000250041],[2,45,77,0.000187958],[1,38,77,0.000128458],[0,26,77,7.4625e-5]],"inputs":[["(if (<=.f64 (*.f64 z 3) -6277101735386681/12554203470773361527671578846415332832204710888928069025792) (+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y))) (if (<=.f64 (*.f64 z 3) 4951760157141521/4951760157141521099596496896) (fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x) (+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 z 3) -6277101735386681/12554203470773361527671578846415332832204710888928069025792) (+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y))) (if (<=.f64 (*.f64 z 3) 4951760157141521/4951760157141521099596496896) (fma.f64 -1/3 (/.f64 (fma.f64 t (neg.f64 (/.f64 1 y)) y) z) x) (+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))))","(if (<=.f64 (*.f64 z 3) -6277101735386681/12554203470773361527671578846415332832204710888928069025792) (+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y))) (if (<=.f64 (*.f64 z 3) 4951760157141521/4951760157141521099596496896) (fma.f64 -1/3 (/.f64 (fma.f64 t (/.f64 -1 y) y) z) x) (+.f64 (-.f64 x (/.f64 y (*.f64 z 3))) (/.f64 t (*.f64 (*.f64 z 3) y)))))"]],"stop":[["fuel",1],["saturated",1]],"time":10.43408203125,"type":"simplify"},{"time":0.026123046875,"type":"soundness"},{"compiler":[[57,38]],"remove-preprocessing":[[]],"time":19.306884765625,"type":"end"}]
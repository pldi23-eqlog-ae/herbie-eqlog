[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.16179298695079536,0.7465869156886099,0.09162009736059473],[11,0.13255329051390463,0.842103257382453,0.025343452103642417],[10,0.08187115002329404,0.9005826502562344,0.017546199720471556],[9,0.062378019065366885,0.9200757812141616,0.017546199720471556],[8,0.031189009532683443,0.9668592955131867,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":135.419921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",371.985595703125,8533],["body",256,"valid",396.890380859375,8256]],"time":784.695068359375,"type":"sample"},{"compiler":[[12,8]],"egraph":[[1,4,4,6.917e-6],[0,4,4,5.708e-6],[2,64,84,0.000296959],[1,56,84,0.000197584],[0,32,84,9.4e-5]],"inputs":[["0","1","2","3"],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","(*.f64 A (sqrt.f64 (/.f64 c0 (*.f64 V l))))","(*.f64 V (sqrt.f64 (/.f64 A (*.f64 c0 l))))","(*.f64 l (sqrt.f64 (/.f64 A (*.f64 V c0))))","(*.f64 c0 (sqrt.f64 (/.f64 V (*.f64 A l))))","(*.f64 c0 (sqrt.f64 (/.f64 l (*.f64 V A))))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3","2"],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","(*.f64 A (sqrt.f64 (/.f64 c0 (*.f64 V l))))","(*.f64 V (sqrt.f64 (/.f64 A (*.f64 c0 l))))","(*.f64 l (sqrt.f64 (/.f64 A (*.f64 V c0))))","(*.f64 l (sqrt.f64 (/.f64 A (*.f64 c0 V))))","(*.f64 c0 (sqrt.f64 (/.f64 V (*.f64 A l))))","(*.f64 c0 (sqrt.f64 (/.f64 l (*.f64 V A))))","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 l V) A)))","(*.f64 c0 (sqrt.f64 (/.f64 l (*.f64 A V))))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort V l)"]],"time":22.90380859375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[2,15,12,0.000104292],[1,13,12,7.1208e-5],[0,9,12,3.6625e-5]],"inputs":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"stop":[["saturated",1]],"time":10.9521484375,"type":"simplify"},{"compiler":[[12,8]],"time":0.238037109375,"type":"eval"},{"alts":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","next",19.942158949779635]],"compiler":[[12,8],[12,8]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[19.942158949779635],"time":0.72705078125,"type":"prune"},{"compiler":[[30,8]],"locations":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))",0.8757738229057016,true],["(/.f64 A (*.f64 V l))",4.860911776425642,true],["(sqrt.f64 (/.f64 A (*.f64 V l)))",18.101403097062256,true]],"time":5.4599609375,"type":"localize"},{"count":[[3,12]],"series":[["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","l","-inf",0.54296875],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","l","inf",0.35400390625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","l","0",0.5029296875],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","V","-inf",0.81689453125],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","V","inf",0.3779296875],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","V","0",0.470947265625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","A","-inf",0.568115234375],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","A","inf",0.385009765625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","A","0",0.5009765625],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","c0","-inf",0.826904296875],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","c0","inf",1.1630859375],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))","c0","0",0.712158203125],["(/.f64 A (*.f64 V l))","l","-inf",0.302978515625],["(/.f64 A (*.f64 V l))","l","inf",0.344970703125],["(/.f64 A (*.f64 V l))","l","0",0.43408203125],["(/.f64 A (*.f64 V l))","V","-inf",0.27197265625],["(/.f64 A (*.f64 V l))","V","inf",0.4169921875],["(/.f64 A (*.f64 V l))","V","0",0.3759765625],["(/.f64 A (*.f64 V l))","A","-inf",0.386962890625],["(/.f64 A (*.f64 V l))","A","inf",0.81591796875],["(/.f64 A (*.f64 V l))","A","0",0.47998046875],["(sqrt.f64 (/.f64 A (*.f64 V l)))","l","-inf",0.5458984375],["(sqrt.f64 (/.f64 A (*.f64 V l)))","l","inf",0.37890625],["(sqrt.f64 (/.f64 A (*.f64 V l)))","l","0",0.6669921875],["(sqrt.f64 (/.f64 A (*.f64 V l)))","V","-inf",0.593994140625],["(sqrt.f64 (/.f64 A (*.f64 V l)))","V","inf",0.39208984375],["(sqrt.f64 (/.f64 A (*.f64 V l)))","V","0",0.6640625],["(sqrt.f64 (/.f64 A (*.f64 V l)))","A","-inf",0.6279296875],["(sqrt.f64 (/.f64 A (*.f64 V l)))","A","inf",0.487060546875],["(sqrt.f64 (/.f64 A (*.f64 V l)))","A","0",0.81982421875]],"time":16.599853515625,"type":"series"},{"count":[[3,90]],"egraph":[[2,2456,28,0.022397583],[1,185,28,0.0032814999999999997],[0,9,28,0.000190625]],"inputs":[["(sqrt.f64 (/.f64 A (*.f64 V l)))","(/.f64 A (*.f64 V l))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 A) (sqrt.f64 (/.f64 1 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 A) (pow.f64 (/.f64 1 (*.f64 V l)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 A) (/.f64 1 (sqrt.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 V l)) 1/4) (pow.f64 (/.f64 A (*.f64 V l)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) 2)) (sqrt.f64 (cbrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) 2) 1/2) (pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (/.f64 V (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 (*.f64 V l)) (sqrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 A)) (sqrt.f64 (*.f64 l (neg.f64 V))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 A)) (neg.f64 (sqrt.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 A (*.f64 V l))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 A (*.f64 V l)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 A (/.f64 1 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (*.f64 V l)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (sqrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 A (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 A) 2) (*.f64 (cbrt.f64 A) (/.f64 1 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))) (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) 2) (cbrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 A) (*.f64 (sqrt.f64 A) (/.f64 1 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 V l)) 1/4) (*.f64 (pow.f64 (/.f64 A (*.f64 V l)) 1/4) (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 A) (/.f64 1 (*.f64 l (neg.f64 V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 V l)) A)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A V) (/.f64 1 l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (pow.f64 (/.f64 A (*.f64 V l)) 1/4)) (pow.f64 (/.f64 A (*.f64 V l)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 V) (/.f64 A l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) V) (/.f64 (cbrt.f64 A) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 A) V) (/.f64 (sqrt.f64 A) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 A) l) (/.f64 (sqrt.f64 A) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 l) (/.f64 A V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) 1) (/.f64 (cbrt.f64 A) (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 A) 1) (/.f64 (sqrt.f64 A) (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 V l)) 2)) (/.f64 A (cbrt.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) (pow.f64 (cbrt.f64 (*.f64 V l)) 2)) (cbrt.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 A) (pow.f64 (cbrt.f64 (*.f64 V l)) 2)) (/.f64 (sqrt.f64 A) (cbrt.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (*.f64 V l))) (/.f64 A (sqrt.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) (sqrt.f64 (*.f64 V l))) (/.f64 (cbrt.f64 A) (sqrt.f64 (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) (cbrt.f64 (/.f64 A (*.f64 V l)))) (cbrt.f64 (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 V l)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 A (*.f64 V l))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 V (/.f64 A l)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 A (*.f64 l (neg.f64 V))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 A 3) (pow.f64 (*.f64 V l) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 A (*.f64 V l))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 A (*.f64 V l))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 A) c0) (sqrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 c0 (sqrt.f64 A)) (sqrt.f64 (*.f64 V l)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (/.f64 A (*.f64 V l)) (*.f64 c0 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 V l)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 A (*.f64 V l)) 3/2) (pow.f64 c0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 c0 3) (pow.f64 (/.f64 A (*.f64 V l)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)))))))"]],"rules":[["egg-rr",16],["egg-rr",44],["egg-rr",30]],"stop":[["node limit",1]],"time":46.126953125,"type":"rewrite"},{"count":[[102,91]],"egraph":[[2,15,144,0.00013666699999999998],[1,13,144,9.3042e-5],[0,9,144,4.7e-5]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"stop":[["saturated",1]],"time":12.2041015625,"type":"simplify"},{"compiler":[[1148,423]],"time":11.14306640625,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 V l)))))","fresh",54.811254299742195],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","next",18.52054634854141],["(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)) 2)","fresh",38.82116368126137],["(*.f64 c0 (/.f64 (sqrt.f64 (neg.f64 A)) (sqrt.f64 (*.f64 l (neg.f64 V)))))","fresh",37.92576346462764],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)) 3)","fresh",20.244646710728226],["(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l)))","fresh",24.42237996269862],["(*.f64 c0 (pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 1/4) 2))","fresh",20.084775232220938],["(*.f64 c0 (*.f64 (sqrt.f64 A) (sqrt.f64 (/.f64 1 (*.f64 V l)))))","fresh",37.98226242757057],["(sqrt.f64 (*.f64 (/.f64 A (*.f64 V l)) (*.f64 c0 c0)))","fresh",45.54697438130957],["(*.f64 c0 (/.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 V l))))","fresh",37.983883667802125],["(*.f64 c0 (/.f64 1 (sqrt.f64 (/.f64 V (/.f64 A l)))))","fresh",19.188306009300252]],"compiler":[[14,10],[18,12],[15,11],[15,11],[15,11],[13,9],[15,11],[15,11],[14,9],[13,9],[14,10],[14,10],[18,12],[15,11],[15,11],[15,11],[13,9],[15,11],[15,11],[14,9],[13,9],[14,10]],"count":[[92,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[91,11],"picked":[1,0]}],"min-error":[4.152589574527066],"time":21.48486328125,"type":"prune"},{"compiler":[[62,27]],"locations":[["(pow.f64 (cbrt.f64 A) 2)",0.517910009768442,true],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))",0.8757738229057016,true],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))",3.0573034519525044,true],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))",18.101403097062256,true]],"time":13.732177734375,"type":"localize"},{"count":[[4,48]],"series":[["(pow.f64 (cbrt.f64 A) 2)","A","-inf",0.526123046875],["(pow.f64 (cbrt.f64 A) 2)","A","inf",0.372802734375],["(pow.f64 (cbrt.f64 A) 2)","A","0",0.469970703125],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","V","-inf",0.305908203125],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","V","inf",0.296875],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","V","0",0.260009765625],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","l","-inf",0.34521484375],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","l","inf",0.299072265625],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","l","0",0.260986328125],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","A","-inf",0.4150390625],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","A","inf",0.29296875],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","A","0",0.281982421875],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","c0","-inf",0.280029296875],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","c0","inf",0.36181640625],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","c0","0",10.23095703125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","V","-inf",0.22216796875],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","V","inf",0.240966796875],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","V","0",0.974853515625],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","l","-inf",0.22412109375],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","l","inf",0.240966796875],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","l","0",0.98486328125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","A","-inf",1.3740234375],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","A","inf",0.219970703125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","A","0",1.301025390625],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","V","-inf",0.3359375],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","V","inf",0.2890625],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","V","0",7.84814453125],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","l","-inf",0.342041015625],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","l","inf",0.36279296875],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","l","0",7.572998046875],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","A","-inf",0.579833984375],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","A","inf",0.3427734375],["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","A","0",27.73291015625]],"time":66.6240234375,"type":"series"},{"count":[[4,143]],"egraph":[[2,3634,34,0.029488209],[1,278,34,0.005083792],[0,13,34,0.000320417]],"inputs":[["(sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))","(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","(pow.f64 (cbrt.f64 A) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/6) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (pow.f64 (/.f64 (/.f64 A l) V) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/4) (pow.f64 (/.f64 (/.f64 A l) V) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (cbrt.f64 A) V)) (/.f64 (cbrt.f64 A) (sqrt.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 A) (sqrt.f64 l)) (sqrt.f64 (/.f64 (cbrt.f64 A) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 A l)) (sqrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 A l) V)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (/.f64 A l) V))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (/.f64 A l) V)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 A (*.f64 l V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 A) (*.f64 (*.f64 l (pow.f64 (cbrt.f64 A) -2)) V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 A) (*.f64 V (*.f64 l (pow.f64 (cbrt.f64 A) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 A) 2) (*.f64 l (/.f64 V (cbrt.f64 A))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 A) 2) (*.f64 (/.f64 V (cbrt.f64 A)) l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 A) 2) (/.f64 (*.f64 l V) (cbrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 A) 2) (/.f64 l (/.f64 (cbrt.f64 A) V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 V (cbrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 A) V) (*.f64 l (pow.f64 (cbrt.f64 A) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (*.f64 l (pow.f64 (cbrt.f64 A) -2)) (/.f64 V (cbrt.f64 A))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 V (cbrt.f64 A)) (*.f64 l (pow.f64 (cbrt.f64 A) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 l V) A))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 l (/.f64 A V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 V (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 A) (/.f64 (*.f64 l V) (sqrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 A)) (*.f64 (*.f64 l (pow.f64 (cbrt.f64 A) -2)) (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 A) 2)) (*.f64 (/.f64 V (cbrt.f64 A)) (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A V) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 A l) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 A) (neg.f64 (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 A V)) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 A l)) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 A) 2)) (cbrt.f64 A)) (*.f64 (neg.f64 l) V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 A) 2)) 1) (*.f64 (neg.f64 l) (/.f64 V (cbrt.f64 A))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 A) 2) (neg.f64 (cbrt.f64 A))) (*.f64 l (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 A) 2)) (neg.f64 (cbrt.f64 A))) (*.f64 (neg.f64 l) (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 A)) (pow.f64 (cbrt.f64 A) 2)) (*.f64 (neg.f64 V) l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 A)) 1) (*.f64 (neg.f64 V) (*.f64 l (pow.f64 (cbrt.f64 A) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) (neg.f64 (pow.f64 (cbrt.f64 A) 2))) (*.f64 V (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 A)) (neg.f64 (pow.f64 (cbrt.f64 A) 2))) (*.f64 (neg.f64 V) (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) 1) l)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) (pow.f64 (cbrt.f64 l) 2)) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A V) (sqrt.f64 l)) (sqrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) 1) V)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) (pow.f64 (cbrt.f64 V) 2)) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 A l) (sqrt.f64 V)) (sqrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 A) 2)) (/.f64 (cbrt.f64 A) V)) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 A)) (/.f64 (pow.f64 (cbrt.f64 A) 2) l)) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (neg.f64 (cbrt.f64 A))) (neg.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 A) V) (neg.f64 (pow.f64 (cbrt.f64 A) 2))) (neg.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 A) (sqrt.f64 l)) 6) (pow.f64 (/.f64 (cbrt.f64 A) V) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 A) V) 3) (pow.f64 (/.f64 (cbrt.f64 A) (sqrt.f64 l)) 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 l (pow.f64 (cbrt.f64 A) -2)) (/.f64 V (cbrt.f64 A))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 V (cbrt.f64 A)) (*.f64 l (pow.f64 (cbrt.f64 A) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 l V) A) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 l (/.f64 A V)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 V (/.f64 A l)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 A) (sqrt.f64 l)) 6) (pow.f64 (/.f64 (cbrt.f64 A) V) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 A) V) 3) (pow.f64 (/.f64 (cbrt.f64 A) (sqrt.f64 l)) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 A l) V)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (/.f64 A l) V) (*.f64 c0 c0)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2) (pow.f64 c0 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 c0 3) (pow.f64 (/.f64 (/.f64 A l) V) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (/.f64 (/.f64 A l) V) (*.f64 c0 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2) (pow.f64 c0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 c0 3) (pow.f64 (/.f64 (/.f64 A l) V) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 A) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 A) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 A) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 A) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 A) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 A) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 A) (cbrt.f64 A))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 A) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 A) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 A)) 2) (cbrt.f64 (*.f64 A (cbrt.f64 A))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 A)) 2) (*.f64 (cbrt.f64 (cbrt.f64 A)) (cbrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 A (cbrt.f64 A))) (pow.f64 (cbrt.f64 (cbrt.f64 A)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 A) (pow.f64 A 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 A 1/6) (*.f64 (pow.f64 A 1/6) (cbrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 A) (pow.f64 (cbrt.f64 (cbrt.f64 A)) 2)) (cbrt.f64 (cbrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 A (cbrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 A) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 A) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 A A))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 A) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 A) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 A)) 1))))))"]],"rules":[["egg-rr",21],["egg-rr",21],["egg-rr",69],["egg-rr",32]],"stop":[["node limit",1]],"time":56.33984375,"type":"rewrite"},{"count":[[191,145]],"egraph":[[2,15,396,0.00019754099999999997],[1,13,396,0.00013312399999999998],[0,9,396,6.7208e-5]],"inputs":[["(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"method":["egg-herbie"],"outputs":[["(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"stop":[["saturated",1]],"time":14.2109375,"type":"simplify"},{"compiler":[[1962,810]],"time":19.72607421875,"type":"eval"},{"alts":[["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A V) l)))","fresh",19.511093986221468],["(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)) 2)","fresh",38.82116368126137],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","next",18.900767972988852],["(*.f64 c0 (/.f64 (sqrt.f64 (neg.f64 A)) (sqrt.f64 (*.f64 l (neg.f64 V)))))","fresh",37.92576346462764],["(log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))","fresh",54.8536571450336],["(*.f64 c0 (sqrt.f64 (/.f64 1 (/.f64 V (/.f64 A l)))))","fresh",19.158677249508195],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)) 3)","fresh",19.14310823590715],["(*.f64 c0 (*.f64 (sqrt.f64 A) (sqrt.f64 (/.f64 1 (*.f64 V l)))))","fresh",37.98226242757057],["(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","done",18.52054634854141],["(sqrt.f64 (*.f64 (/.f64 A (*.f64 V l)) (*.f64 c0 c0)))","fresh",45.54697438130957],["(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l)))","fresh",24.42237996269862],["(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A l)) (sqrt.f64 V)))","fresh",51.429596131409205]],"compiler":[[12,8],[15,11],[14,10],[15,11],[14,10],[14,10],[15,11],[15,11],[18,12],[14,9],[13,9],[13,9],[12,8],[15,11],[14,10],[15,11],[14,10],[14,10],[15,11],[15,11],[14,9],[13,9],[13,9]],"count":[[156,12]],"kept":[{"done":[0,0],"fresh":[10,4],"new":[145,7],"picked":[1,1]}],"min-error":[3.67174968952928],"time":40.580078125,"type":"prune"},{"compiler":[[41,13]],"locations":[["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)",0.3984375,true],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))",0.8757738229057016,true],["(/.f64 (/.f64 A l) V)",3.2095001883980974,true],["(cbrt.f64 (/.f64 (/.f64 A l) V))",20.21559443197391,true]],"time":13.0439453125,"type":"localize"},{"count":[[4,48]],"series":[["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","V","-inf",0.626953125],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","V","inf",0.55712890625],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","V","0",0.47607421875],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","l","-inf",0.616943359375],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","l","inf",0.569091796875],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","l","0",0.489990234375],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","A","-inf",0.752197265625],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","A","inf",0.5380859375],["(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)","A","0",0.819091796875],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","V","-inf",0.85400390625],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","V","inf",0.31494140625],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","V","0",0.29296875],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","l","-inf",0.487060546875],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","l","inf",0.305908203125],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","l","0",0.2939453125],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","A","-inf",0.282958984375],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","A","inf",0.30810546875],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","A","0",0.27587890625],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","c0","-inf",0.280029296875],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","c0","inf",0.434814453125],["(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","c0","0",0.509033203125],["(/.f64 (/.f64 A l) V)","V","-inf",0.14404296875],["(/.f64 (/.f64 A l) V)","V","inf",0.14306640625],["(/.f64 (/.f64 A l) V)","V","0",0.1689453125],["(/.f64 (/.f64 A l) V)","l","-inf",0.14599609375],["(/.f64 (/.f64 A l) V)","l","inf",0.169189453125],["(/.f64 (/.f64 A l) V)","l","0",0.14404296875],["(/.f64 (/.f64 A l) V)","A","-inf",0.14794921875],["(/.f64 (/.f64 A l) V)","A","inf",0.175048828125],["(/.f64 (/.f64 A l) V)","A","0",0.14892578125],["(cbrt.f64 (/.f64 (/.f64 A l) V))","V","-inf",0.367919921875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","V","inf",0.31201171875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","V","0",0.28515625],["(cbrt.f64 (/.f64 (/.f64 A l) V))","l","-inf",0.35888671875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","l","inf",0.31201171875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","l","0",0.260986328125],["(cbrt.f64 (/.f64 (/.f64 A l) V))","A","-inf",0.32421875],["(cbrt.f64 (/.f64 (/.f64 A l) V))","A","inf",0.330078125],["(cbrt.f64 (/.f64 (/.f64 A l) V))","A","0",0.31494140625]],"time":14.81103515625,"type":"series"},{"count":[[4,162]],"egraph":[[2,3123,37,0.026533293],[1,236,37,0.004336751],[0,11,43,0.000296667]],"inputs":[["(cbrt.f64 (/.f64 (/.f64 A l) V))","(/.f64 (/.f64 A l) V)","(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","(pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 A (*.f64 l V))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 A (*.f64 l V))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 l V)) 1/6) (pow.f64 (/.f64 A (*.f64 l V)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 2) (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (/.f64 V (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 V) (cbrt.f64 (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 A) (cbrt.f64 (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 A) l)) (cbrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 A l))) (neg.f64 (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 l V)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 l V))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 V (/.f64 A l)) -2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 l V)) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 l V)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 V (/.f64 A l)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 V (/.f64 A l))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 V) (cbrt.f64 (/.f64 A l))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 A (*.f64 l V))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (/.f64 A (*.f64 l V)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 A (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 A (*.f64 l V)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 A (*.f64 l V))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 A (*.f64 l V))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 A (*.f64 l V))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 A (*.f64 l V)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 A (/.f64 1 (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A l) (/.f64 1 V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (*.f64 l V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) (pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 l V))) (sqrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 A (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 2) (cbrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2) (*.f64 (cbrt.f64 (/.f64 A l)) (/.f64 1 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A l)) (*.f64 (sqrt.f64 (/.f64 A l)) (/.f64 1 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 A) l) (/.f64 1 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 V) (/.f64 A l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 l V)) 1/4) (pow.f64 (/.f64 A (*.f64 l V)) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 l V)) 3/4) (pow.f64 (/.f64 A (*.f64 l V)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) V) (/.f64 (cbrt.f64 A) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 A) V) (/.f64 (sqrt.f64 A) l))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A 1) (/.f64 (/.f64 1 l) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2) 1) (/.f64 (cbrt.f64 (/.f64 A l)) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 A l)) 1) (/.f64 (sqrt.f64 (/.f64 A l)) V))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (pow.f64 (cbrt.f64 V) 2)) (/.f64 (/.f64 1 l) (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 V) -2) (/.f64 (/.f64 A l) (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 A l)) (pow.f64 (cbrt.f64 V) 2)) (/.f64 (sqrt.f64 (/.f64 A l)) (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 A (sqrt.f64 V)) (/.f64 (/.f64 1 l) (sqrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 V -1/2) (/.f64 (/.f64 A l) (sqrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2) (sqrt.f64 V)) (/.f64 (cbrt.f64 (/.f64 A l)) (sqrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 l V)) 5/6) (pow.f64 (/.f64 A (*.f64 l V)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 2) 1) (cbrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V))))) 2) (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A (*.f64 l V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A (*.f64 l V))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 V (/.f64 A l)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 l V)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 l V)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 l V)) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 V (/.f64 A l)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A (*.f64 l V)) 1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 A l) 3) (pow.f64 V 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 l A) V) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 l V) A) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 V (/.f64 A l)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) 4) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 A l) (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 V (/.f64 A l)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 A (*.f64 l V)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 A l) 3) (pow.f64 V 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 A (*.f64 l V)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (/.f64 A (*.f64 l V)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 V (/.f64 A l))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))) 1) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 l V))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 l V)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 l V)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 l V)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 A (*.f64 l V)) (*.f64 c0 c0)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (/.f64 A (*.f64 l V)) (*.f64 c0 c0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 A (*.f64 l V))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 A (*.f64 l V))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A (*.f64 l V))) (pow.f64 (/.f64 A (*.f64 l V)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A (*.f64 l V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 l V)) 1/6) (cbrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A l)) (sqrt.f64 (/.f64 1 V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A (*.f64 l V)) 1/4) (pow.f64 (/.f64 A (*.f64 l V)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (/.f64 V (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 A l)) (sqrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (neg.f64 A) l)) (sqrt.f64 (neg.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 A (*.f64 l V)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 A (*.f64 l V))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 A (*.f64 l V))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 A (*.f64 l V)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 A (*.f64 l V)) 3/2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (/.f64 A (*.f64 l V)))) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (/.f64 A (*.f64 l V)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/4 (log.f64 (/.f64 A (*.f64 l V)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 A (*.f64 l V))) 1/3) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 A (*.f64 l V)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 A (*.f64 l V)))) 3/4) 2))))))"]],"rules":[["egg-rr",33],["egg-rr",21],["egg-rr",66],["egg-rr",42]],"stop":[["node limit",1]],"time":53.969970703125,"type":"rewrite"},{"count":[[210,164]],"egraph":[[2,15,396,0.000197541],[1,13,396,0.0001335],[0,9,396,6.7708e-5]],"inputs":[["(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"method":["egg-herbie"],"outputs":[["(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(/.f64 A (*.f64 V l))","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"stop":[["saturated",1]],"time":15.014892578125,"type":"simplify"},{"compiler":[[2318,1007]],"time":23.134033203125,"type":"eval"},{"alts":[["(*.f64 c0 (/.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 l V))))","fresh",37.983883667802125],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A V) l)))","fresh",19.511093986221468],["(*.f64 c0 (/.f64 (sqrt.f64 (neg.f64 A)) (sqrt.f64 (*.f64 l (neg.f64 V)))))","fresh",37.92576346462764],["(sqrt.f64 (*.f64 (/.f64 A (*.f64 l V)) (*.f64 c0 c0)))","fresh",45.54697438130957],["(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l)))","fresh",24.42237996269862],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)) 3)","fresh",19.14310823590715],["(*.f64 c0 (*.f64 (sqrt.f64 A) (sqrt.f64 (/.f64 1 (*.f64 V l)))))","fresh",37.98226242757057],["(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 (neg.f64 A) l)) (sqrt.f64 (neg.f64 V))))","fresh",21.29119968933544],["(*.f64 c0 (pow.f64 (/.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 V)) 3/2))","fresh",8.85265311725265],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","next",8.84424685512165],["(log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))","fresh",54.8536571450336],["(pow.f64 (sqrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))) 2)","fresh",38.82116368126137]],"compiler":[[13,9],[12,8],[15,11],[14,9],[13,9],[15,11],[15,11],[15,11],[15,11],[17,13],[14,10],[15,11],[13,9],[12,8],[15,11],[14,9],[13,9],[15,11],[15,11],[15,11],[15,11],[17,13],[14,10],[15,11]],"count":[[176,12]],"kept":[{"done":[1,0],"fresh":[10,6],"new":[164,6],"picked":[1,0]}],"min-error":[1.2722621112997308],"time":40.123046875,"type":"prune"},{"compiler":[[57,30]],"locations":[["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))",0.3951950195368841,true],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)",0.3984375,true],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))",0.8757738229057016,true],["(cbrt.f64 (/.f64 A l))",12.332632333321126,true]],"time":18.343994140625,"type":"localize"},{"count":[[4,12]],"series":[["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","V","-inf",0.195068359375],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","V","inf",0.199951171875],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","V","0",0.16796875],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","l","-inf",0.226806640625],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","l","inf",0.173095703125],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","l","0",0.169921875],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","A","-inf",0.220947265625],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","A","inf",0.169921875],["(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))","A","0",0.200927734375],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","V","-inf",0.3359375],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","V","inf",0.387939453125],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","V","0",0.345947265625],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","l","-inf",0.3330078125],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","l","inf",0.388916015625],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","l","0",0.35888671875],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","A","-inf",0.35595703125],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","A","inf",0.326171875],["(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","A","0",0.398193359375],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","V","-inf",0.380126953125],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","V","inf",0.305908203125],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","V","0",0.277099609375],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","l","-inf",0.298828125],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","l","inf",0.320068359375],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","l","0",0.2900390625],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","A","-inf",0.468994140625],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","A","inf",0.322998046875],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","A","0",0.260009765625],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","c0","-inf",0.201171875],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","c0","inf",0.172119140625],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","c0","0",0.243896484375],["(cbrt.f64 (/.f64 A l))","l","-inf",0.212890625],["(cbrt.f64 (/.f64 A l))","l","inf",0.2109375],["(cbrt.f64 (/.f64 A l))","l","0",0.236083984375],["(cbrt.f64 (/.f64 A l))","A","-inf",0.224853515625],["(cbrt.f64 (/.f64 A l))","A","inf",0.2451171875],["(cbrt.f64 (/.f64 A l))","A","0",0.283935546875]],"time":10.324951171875,"type":"series"},{"count":[[4,97]],"egraph":[[2,3559,36,0.028708125],[1,290,36,0.005158749999999999],[0,14,51,0.00036825]],"inputs":[["(cbrt.f64 (/.f64 A l))","(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","(pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2)","(*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 A l)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 A l))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 A l))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 A l))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 A l)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 A l)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 A l))) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2)) (cbrt.f64 (cbrt.f64 (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 A) (/.f64 1 (cbrt.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 A l) 1/6) (pow.f64 (/.f64 A l) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (/.f64 l A)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 l) (cbrt.f64 A)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 A) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 A)) (cbrt.f64 (neg.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 A)) (neg.f64 (cbrt.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 A l) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 A l)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A l) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A l) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 A l))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 A l) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 A l)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 l A) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 l A)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 l) (cbrt.f64 A)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 A l)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 A l)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 A l))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 A l)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 A l))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 c0 c0) (/.f64 (/.f64 A l) V)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 c0 c0) (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) (pow.f64 (/.f64 (/.f64 A l) V) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/6) (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 A l)) (pow.f64 V -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 V -1/2) (sqrt.f64 (/.f64 A l)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/4) (pow.f64 (/.f64 (/.f64 A l) V) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 3/2) (sqrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 A l) V) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (/.f64 A l) V))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 (/.f64 A l) V)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 V))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 A) (*.f64 (cbrt.f64 V) (cbrt.f64 l)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) 1) (*.f64 (cbrt.f64 l) (cbrt.f64 V)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 A) (pow.f64 (cbrt.f64 V) -1)) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 V) -1) (cbrt.f64 A)) (cbrt.f64 l))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 A l) V) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 A l) V) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 A l) V))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (/.f64 A l) V))) 1))))))"]],"rules":[["egg-rr",24],["egg-rr",20],["egg-rr",17],["egg-rr",36]],"stop":[["node limit",1]],"time":52.986083984375,"type":"rewrite"},{"count":[[109,98]],"egraph":[[2,15,144,0.000136042],[1,13,144,9.2e-5],[0,9,144,4.7125e-5]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)","(*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)"]],"stop":[["saturated",1]],"time":11.873046875,"type":"simplify"},{"compiler":[[1399,644]],"time":14.597900390625,"type":"eval"},{"alts":[["(*.f64 c0 (/.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 l V))))","fresh",37.983883667802125],["(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A V) l)))","fresh",19.511093986221468],["(*.f64 c0 (/.f64 (sqrt.f64 (neg.f64 A)) (sqrt.f64 (*.f64 l (neg.f64 V)))))","fresh",37.92576346462764],["(sqrt.f64 (*.f64 (/.f64 A (*.f64 l V)) (*.f64 c0 c0)))","fresh",45.54697438130957],["(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l)))","fresh",24.42237996269862],["(*.f64 c0 (pow.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 V) -1) (cbrt.f64 A)) (cbrt.f64 l)) 3/2))","fresh",1.373877960820923],["(*.f64 c0 (*.f64 (sqrt.f64 A) (sqrt.f64 (/.f64 1 (*.f64 V l)))))","fresh",37.98226242757057],["(*.f64 c0 (pow.f64 (/.f64 (cbrt.f64 A) (*.f64 (cbrt.f64 V) (cbrt.f64 l))) 3/2))","fresh",1.322272895264288],["(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 (neg.f64 A) l)) (sqrt.f64 (neg.f64 V))))","fresh",21.29119968933544],["(pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 3)","fresh",19.14310823590715],["(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","done",8.84424685512165],["(pow.f64 (sqrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))) 2)","fresh",38.82116368126137]],"compiler":[[13,9],[12,8],[15,11],[14,9],[13,9],[18,14],[15,11],[16,12],[15,11],[15,11],[17,13],[15,11]],"count":[[110,12]],"kept":[{"done":[0,0],"fresh":[11,8],"new":[98,3],"picked":[1,1]}],"min-error":[0.7429613229057015],"time":20.007080078125,"type":"prune"},{"accuracy":[1.3222728952642866],"baseline":[1.322272895264288],"branch":[["c0",1.322272895264288,1],["A",1.3222728952642866,1],["V",1.322272895264287,1],["l",1.3222728952642884,1],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))",1.322272895264287,1],["(sqrt.f64 (/.f64 A (*.f64 V l)))",1.322272895264287,1],["(sqrt.f64 (/.f64 A (*.f64 V l)))",1.322272895264287,1],["(/.f64 A (*.f64 V l))",1.322272895264287,1],["(/.f64 A (*.f64 V l))",1.322272895264287,1],["(*.f64 V l)",1.3222728952642868,1],["(*.f64 V l)",1.3222728952642868,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[12,8],[10,7],[10,7],[9,6],[9,6],[7,5],[7,5],[298,131]],"count":[[28,1]],"inputs":[["(*.f64 c0 (pow.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 V) -1) (cbrt.f64 A)) (cbrt.f64 l)) 3/2))","(*.f64 c0 (pow.f64 (/.f64 (cbrt.f64 A) (*.f64 (cbrt.f64 V) (cbrt.f64 l))) 3/2))","(pow.f64 (cbrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A l) V)))) 3)","(*.f64 c0 (/.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 l V))))","(sqrt.f64 (*.f64 (/.f64 A (*.f64 l V)) (*.f64 c0 c0)))","(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 (neg.f64 A) l)) (sqrt.f64 (neg.f64 V))))","(*.f64 c0 (pow.f64 (/.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 V)) 3/2))","(*.f64 c0 (pow.f64 (*.f64 (cbrt.f64 (/.f64 A l)) (cbrt.f64 (/.f64 1 V))) 3/2))","(pow.f64 (sqrt.f64 (*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 l V))))) 2)","(*.f64 c0 (sqrt.f64 (/.f64 (/.f64 A V) l)))","(*.f64 c0 (pow.f64 (cbrt.f64 (/.f64 (/.f64 A l) V)) 3/2))","(log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 (/.f64 A l) V))))","(*.f64 c0 (sqrt.f64 (/.f64 1 (/.f64 V (/.f64 A l)))))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 A l) V)) c0)) 3)","(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l)))","(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A l)) (sqrt.f64 V)))","(log.f64 (pow.f64 (exp.f64 c0) (sqrt.f64 (/.f64 A (*.f64 V l)))))","(*.f64 c0 (sqrt.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 A) 2) l) (/.f64 (cbrt.f64 A) V))))","(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)) 2)","(*.f64 c0 (/.f64 (sqrt.f64 (neg.f64 A)) (sqrt.f64 (*.f64 l (neg.f64 V)))))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 A (*.f64 V l))) c0)) 3)","(*.f64 c0 (/.f64 (sqrt.f64 (/.f64 A V)) (sqrt.f64 l)))","(*.f64 c0 (pow.f64 (pow.f64 (/.f64 A (*.f64 V l)) 1/4) 2))","(*.f64 c0 (*.f64 (sqrt.f64 A) (sqrt.f64 (/.f64 1 (*.f64 V l)))))","(sqrt.f64 (*.f64 (/.f64 A (*.f64 V l)) (*.f64 c0 c0)))","(*.f64 c0 (/.f64 (sqrt.f64 A) (sqrt.f64 (*.f64 V l))))","(*.f64 c0 (/.f64 1 (sqrt.f64 (/.f64 V (/.f64 A l)))))","(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))"]],"link":["."],"name":["Henrywood and Agarwal, Equation (3)"],"oracle":[64.0],"outputs":[["(*.f64 c0 (pow.f64 (/.f64 (cbrt.f64 A) (*.f64 (cbrt.f64 V) (cbrt.f64 l))) 3/2))"]],"time":93.455078125,"times":[["c0",8.9169921875],["A",9.03515625],["V",9.110107421875],["l",9.1689453125],["(*.f64 c0 (sqrt.f64 (/.f64 A (*.f64 V l))))",6.348876953125],["(sqrt.f64 (/.f64 A (*.f64 V l)))",6.282958984375],["(sqrt.f64 (/.f64 A (*.f64 V l)))",6.381103515625],["(/.f64 A (*.f64 V l))",10.405029296875],["(/.f64 A (*.f64 V l))",6.177001953125],["(*.f64 V l)",7.615966796875],["(*.f64 V l)",7.7470703125]],"type":"regimes"},{"compiler":[[16,12]],"egraph":[[1,15,19,3.1708e-5],[0,13,19,1.9417e-5]],"inputs":[["(*.f64 c0 (pow.f64 (/.f64 (cbrt.f64 A) (*.f64 (cbrt.f64 V) (cbrt.f64 l))) 3/2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 c0 (pow.f64 (/.f64 (cbrt.f64 A) (*.f64 (cbrt.f64 V) (cbrt.f64 l))) 3/2))"]],"stop":[["fuel",1],["saturated",1]],"time":8.52294921875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[16,12],[16,12],[16,12]],"remove-preprocessing":[["(sort V l)"]],"time":10.655029296875,"type":"end"}]
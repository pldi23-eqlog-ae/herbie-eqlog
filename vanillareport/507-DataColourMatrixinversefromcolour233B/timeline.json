[{"compiler":[[15,10]],"method":["search"],"sampling":[[12,0.046760670786183844,0.9508003059857382,0.0024390232280779856],[11,0.031173780524122563,0.9663871962477995,0.0024390232280779856],[10,0.0,0.997560976771922,0.0024390232280779856],[9,0.0,0.997560976771922,0.0024390232280779856],[8,0.0,0.997560976771922,0.0024390232280779856],[7,0.0,0.997560976771922,0.0024390232280779856],[6,0.0,0.997560976771922,0.0024390232280779856],[5,0.0,0.997560976771922,0.0024390232280779856],[4,0.0,0.997560976771922,0.0024390232280779856],[3,0.0,0.997560976771922,0.0024390232280779856],[2,0.0,0.997560976771922,0.0024390232280779856],[1,0.0,0.997560976771922,0.0024390232280779856],[0,0.0,0.997560976771922,0.0024390232280779856]],"time":157.042236328125,"type":"analyze"},{"outcomes":[["body",256,"invalid",153.014404296875,3159],["body",256,"valid",402.23046875,8256]],"time":565.27880859375,"type":"sample"},{"compiler":[[14,9]],"egraph":[[1,5,5,1.0458e-5],[0,5,5,9e-6],[7,6638,143,0.041636084000000004],[6,3022,143,0.026939625000000002],[5,2129,143,0.013265042000000001],[4,1106,143,0.0068251250000000005],[3,489,143,0.002878958],[2,294,143,0.001327875],[1,137,143,0.000606583],[0,42,143,0.000181333]],"inputs":[["0","1","2","3","4"],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 z t)) a)","(/.f64 (-.f64 (*.f64 z y) (*.f64 x t)) a)","(/.f64 (-.f64 (*.f64 t y) (*.f64 z x)) a)","(/.f64 (-.f64 (*.f64 a y) (*.f64 z t)) x)","(/.f64 (-.f64 (*.f64 x z) (*.f64 y t)) a)","(/.f64 (-.f64 (*.f64 x t) (*.f64 z y)) a)","(/.f64 (-.f64 (*.f64 x a) (*.f64 z t)) y)","(/.f64 (-.f64 (*.f64 x y) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 x y) (*.f64 a t)) z)","(/.f64 (-.f64 (*.f64 x y) (*.f64 z a)) t)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2","3","2","4"],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","(/.f64 (fma.f64 t (neg.f64 z) (*.f64 x y)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 z t)) a)","(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","(/.f64 (fma.f64 t (neg.f64 z) (*.f64 x y)) a)","(/.f64 (-.f64 (*.f64 z y) (*.f64 x t)) a)","(/.f64 (-.f64 (*.f64 y z) (*.f64 x t)) a)","(/.f64 (fma.f64 y z (*.f64 t (neg.f64 x))) a)","(/.f64 (-.f64 (*.f64 t y) (*.f64 z x)) a)","(/.f64 (-.f64 (*.f64 y t) (*.f64 x z)) a)","(/.f64 (fma.f64 y t (*.f64 x (neg.f64 z))) a)","(/.f64 (fma.f64 x (neg.f64 z) (*.f64 y t)) a)","(/.f64 (-.f64 (*.f64 a y) (*.f64 z t)) x)","(/.f64 (-.f64 (*.f64 y a) (*.f64 z t)) x)","(/.f64 (-.f64 (*.f64 x z) (*.f64 y t)) a)","(/.f64 (fma.f64 t (neg.f64 y) (*.f64 x z)) a)","(/.f64 (-.f64 (*.f64 x t) (*.f64 z y)) a)","(/.f64 (-.f64 (*.f64 x t) (*.f64 y z)) a)","(/.f64 (fma.f64 x t (*.f64 y (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 x a) (*.f64 z t)) y)","(/.f64 (-.f64 (*.f64 x y) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","(/.f64 (fma.f64 t (neg.f64 z) (*.f64 x y)) a)","(/.f64 (-.f64 (*.f64 x y) (*.f64 a t)) z)","(/.f64 (-.f64 (*.f64 x y) (*.f64 t a)) z)","(/.f64 (fma.f64 x y (neg.f64 (*.f64 t a))) z)","(/.f64 (-.f64 (*.f64 x y) (*.f64 z a)) t)","(/.f64 (fma.f64 x y (*.f64 a (neg.f64 z))) t)"]],"stop":[["unsound",1],["node limit",1]],"symmetry":[["(sort x y)","(sort z t)"]],"time":68.38818359375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,2778,13,0.034698542000000006],[12,2773,13,0.030153792000000006],[11,2743,13,0.025619167000000005],[10,2656,13,0.020776876000000003],[9,1762,13,0.015908501000000002],[8,1188,13,0.010385167],[7,733,13,0.006299333000000001],[6,483,13,0.0034030830000000003],[5,292,13,0.0019964170000000003],[4,161,13,0.0010833750000000001],[3,77,13,0.000538458],[2,46,13,0.000263792],[1,21,13,0.00013225],[0,10,13,4.5708e-5]],"inputs":[["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","(/.f64 (fma.f64 z (neg.f64 t) (*.f64 x y)) a)"]],"stop":[["saturated",1]],"time":45.811767578125,"type":"simplify"},{"compiler":[[23,12]],"time":0.34619140625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 z (neg.f64 t) (*.f64 x y)) a)","fresh",8.117525706345557],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","next",8.113619456345557]],"compiler":[[14,9],[14,9],[14,9],[14,9]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[8.109713206345557],"time":1.27587890625,"type":"prune"},{"compiler":[[32,9]],"locations":[["(-.f64 (*.f64 x y) (*.f64 z t))",0.0234375,true],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)",7.680897692738472,true]],"time":6.136962890625,"type":"localize"},{"count":[[2,108]],"series":[["(-.f64 (*.f64 x y) (*.f64 z t))","t","-inf",0.150146484375],["(-.f64 (*.f64 x y) (*.f64 z t))","t","inf",0.150146484375],["(-.f64 (*.f64 x y) (*.f64 z t))","t","0",0.166015625],["(-.f64 (*.f64 x y) (*.f64 z t))","z","-inf",0.14990234375],["(-.f64 (*.f64 x y) (*.f64 z t))","z","inf",0.14794921875],["(-.f64 (*.f64 x y) (*.f64 z t))","z","0",0.16796875],["(-.f64 (*.f64 x y) (*.f64 z t))","y","-inf",0.150146484375],["(-.f64 (*.f64 x y) (*.f64 z t))","y","inf",0.1640625],["(-.f64 (*.f64 x y) (*.f64 z t))","y","0",0.14697265625],["(-.f64 (*.f64 x y) (*.f64 z t))","x","-inf",0.151123046875],["(-.f64 (*.f64 x y) (*.f64 z t))","x","inf",0.16796875],["(-.f64 (*.f64 x y) (*.f64 z t))","x","0",0.159912109375],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","a","-inf",0.3330078125],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","a","inf",0.368896484375],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","a","0",0.5029296875],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","t","-inf",0.369140625],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","t","inf",0.3759765625],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","t","0",0.375],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","z","-inf",0.3720703125],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","z","inf",0.6728515625],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","z","0",0.406982421875],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","y","-inf",0.35302734375],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","y","inf",0.371826171875],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","y","0",0.541015625],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","x","-inf",0.365966796875],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","x","inf",0.445068359375],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","x","0",0.548095703125]],"time":8.60205078125,"type":"series"},{"count":[[2,234]],"egraph":[[2,3311,23,0.027291208],[1,227,23,0.004208249999999999],[0,10,23,0.0002295]],"inputs":[["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)","(-.f64 (*.f64 x y) (*.f64 z t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (/.f64 a y)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (/.f64 a y)) (/.f64 z (/.f64 a t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (*.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)) 2) (cbrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (*.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)) (sqrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (/.f64 1 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (-.f64 (*.f64 x y) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 a) -2) (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a -1/2) (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) 1) (/.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) 1) (/.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (sqrt.f64 a)) (/.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 a (-.f64 (*.f64 x y) (*.f64 z t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 3) (pow.f64 a 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 a (-.f64 (*.f64 x y) (*.f64 z t))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 3) (pow.f64 a 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) (/.f64 1 a) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (/.f64 a y)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 a y))) 2) (cbrt.f64 (/.f64 x (/.f64 a y))) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (/.f64 a y))) (sqrt.f64 (/.f64 x (/.f64 a y))) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 y a) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (*.f64 x y)) a) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 x y)) 1) (/.f64 (sqrt.f64 (*.f64 x y)) a) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 a) 2)) (/.f64 y (cbrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (pow.f64 (cbrt.f64 a) 2)) (/.f64 x (cbrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) -2) (/.f64 (*.f64 x y) (cbrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (sqrt.f64 (*.f64 x y)) (cbrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 a)) (/.f64 y (sqrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (sqrt.f64 a)) (/.f64 x (sqrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 a -1/2) (/.f64 (*.f64 x y) (sqrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (*.f64 x y)) (sqrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 a)) (/.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 a)) (neg.f64 (/.f64 z (/.f64 a t))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (-.f64 (*.f64 x y) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (neg.f64 t)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (*.f64 x y) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (*.f64 x y) (*.f64 z t)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (*.f64 x y) (*.f64 z t))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x y) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3)) (/.f64 1 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2)) (/.f64 1 (fma.f64 x y (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2)) (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x y (*.f64 z t)) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3)) (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2)) (fma.f64 x y (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3))) (neg.f64 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2))) (neg.f64 (fma.f64 x y (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (neg.f64 t)) 3)) (+.f64 (pow.f64 (*.f64 x y) 2) (-.f64 (pow.f64 (*.f64 z (neg.f64 t)) 2) (*.f64 (*.f64 x y) (*.f64 z (neg.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 3) (pow.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2) (-.f64 (pow.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 2) (*.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (neg.f64 t)) 2)) (-.f64 (*.f64 x y) (*.f64 z (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2) (pow.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 2)) (-.f64 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2)) (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x y (*.f64 z t)) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x y) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (pow.f64 (exp.f64 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 x y)) (+.f64 1 (expm1.f64 (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (+.f64 1 (expm1.f64 (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (exp.f64 (*.f64 z (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (pow.f64 (exp.f64 z) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x y) (*.f64 z t)))) (exp.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 z (neg.f64 t) (*.f64 z t))) (exp.f64 (-.f64 (*.f64 x y) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 z (neg.f64 t) (*.f64 z t))) (+.f64 1 (expm1.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 z (neg.f64 t))) (exp.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 z (neg.f64 t))) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (neg.f64 t)) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x y) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (*.f64 x y) (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 t) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (neg.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 1 (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 1 (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 1 (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 1 (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x y) (*.f64 z t)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x y) (*.f64 z t)) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x y) (*.f64 z t)) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 z (neg.f64 t) (*.f64 z t)) (-.f64 (*.f64 x y) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (neg.f64 t)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (neg.f64 (cbrt.f64 (*.f64 z t))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (sqrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z t)) (neg.f64 (sqrt.f64 (*.f64 z t))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3)) (/.f64 1 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2))) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3)) (/.f64 1 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2))) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3)) (/.f64 1 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3)) (/.f64 1 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2))) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z t) 3)) (/.f64 1 (fma.f64 (*.f64 z t) (fma.f64 x y (*.f64 z t)) (pow.f64 (*.f64 x y) 2))) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2)) (/.f64 1 (fma.f64 x y (*.f64 z t))) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2)) (/.f64 1 (fma.f64 x y (*.f64 z t))) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2)) (/.f64 1 (fma.f64 x y (*.f64 z t))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2)) (/.f64 1 (fma.f64 x y (*.f64 z t))) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z t) 2)) (/.f64 1 (fma.f64 x y (*.f64 z t))) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) t (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 z (neg.f64 t) (*.f64 z t))) 2) (cbrt.f64 (fma.f64 z (neg.f64 t) (*.f64 z t))) (-.f64 (*.f64 x y) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (neg.f64 t))) 2) (cbrt.f64 (*.f64 z (neg.f64 t))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 z (neg.f64 t) (*.f64 z t))) (sqrt.f64 (fma.f64 z (neg.f64 t) (*.f64 z t))) (-.f64 (*.f64 x y) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (neg.f64 t))) (sqrt.f64 (*.f64 z (neg.f64 t))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 z t))) (sqrt.f64 (*.f64 z t)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 z t) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (fma.f64 z (neg.f64 t) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (fma.f64 (*.f64 z (neg.f64 t)) 1 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 z t)) 2) (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (*.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 z t))) (+.f64 (fma.f64 z (neg.f64 t) (*.f64 z t)) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z t)) 2)) (cbrt.f64 (*.f64 z t)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) 1) t (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (sqrt.f64 t)) (sqrt.f64 t) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 z (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 z (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (-.f64 (*.f64 z t) (fma.f64 z (neg.f64 t) (*.f64 z t)))))))))"]],"rules":[["egg-rr",175],["egg-rr",59]],"stop":[["node limit",1]],"time":59.233154296875,"type":"rewrite"},{"count":[[342,246]],"egraph":[[14,2904,1140,0.042075290999999994],[13,2904,1140,0.037300248999999994],[12,2899,1140,0.032962082],[11,2869,1140,0.028596332],[10,2826,1140,0.023969457],[9,2193,1140,0.019468541],[8,1369,1140,0.013666541],[7,883,1140,0.008713916],[6,612,1140,0.0051629580000000005],[5,375,1140,0.003138291],[4,230,1140,0.001907499],[3,133,1140,0.001171707],[2,75,1140,0.000697374],[1,40,1140,0.000392083],[0,17,1332,0.000168458]],"inputs":[["(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 x (/.f64 y a))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 x (/.f64 y a))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 x (/.f64 y a))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 x (/.f64 y a))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 x (/.f64 y a))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 x (/.f64 y a))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(*.f64 t (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(*.f64 t (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(*.f64 t (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(*.f64 t (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(*.f64 t (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(*.f64 t (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x))","(-.f64 (*.f64 y x) (*.f64 t z))"]],"stop":[["saturated",1]],"time":86.91796875,"type":"simplify"},{"compiler":[[4690,1122]],"time":31.134033203125,"type":"eval"},{"alts":[["(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","fresh",8.097994456345557],["(/.f64 (fma.f64 x y (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t)))) a)","fresh",8.172213206345557],["(*.f64 t (/.f64 (neg.f64 z) a))","fresh",32.78756709702773],["(-.f64 (/.f64 x (/.f64 a y)) (/.f64 z (/.f64 a t)))","fresh",8.554311300287766],["(*.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) 1) (/.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) a))","fresh",25.525907794474637],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","next",6.601289369062602],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","fresh",7.041773326789026],["(fma.f64 (*.f64 x y) (/.f64 1 a) (neg.f64 (/.f64 z (/.f64 a t))))","fresh",8.332558248123119],["(/.f64 (fma.f64 (*.f64 (neg.f64 z) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t) (*.f64 x y)) a)","fresh",8.32853957356686]],"compiler":[[18,12],[21,11],[11,8],[16,10],[28,16],[18,12],[17,11],[18,12],[20,13],[18,12],[21,11],[11,8],[16,10],[28,16],[18,12],[17,11],[18,12],[20,13]],"count":[[248,9]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[246,9],"picked":[1,0]}],"min-error":[0],"time":76.56396484375,"type":"prune"},{"compiler":[[44,15]],"locations":[["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))",3.5961569184697257,true],["(/.f64 z (/.f64 a t))",5.370838347829254,true]],"time":8.510986328125,"type":"localize"},{"count":[[2,96]],"series":[["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","t","-inf",0.239990234375],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","t","inf",0.184814453125],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","t","0",0.2841796875],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","z","-inf",0.196044921875],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","z","inf",0.22802734375],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","z","0",0.287841796875],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","a","-inf",0.47802734375],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","a","inf",0.429931640625],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","a","0",0.363037109375],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","x","-inf",0.376220703125],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","x","inf",0.34521484375],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","x","0",0.383056640625],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","y","-inf",0.31591796875],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","y","inf",0.31591796875],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","y","0",0.47119140625],["(/.f64 z (/.f64 a t))","t","-inf",0.303955078125],["(/.f64 z (/.f64 a t))","t","inf",0.342041015625],["(/.f64 z (/.f64 a t))","t","0",0.349853515625],["(/.f64 z (/.f64 a t))","a","-inf",0.3349609375],["(/.f64 z (/.f64 a t))","a","inf",0.3388671875],["(/.f64 z (/.f64 a t))","a","0",0.318115234375],["(/.f64 z (/.f64 a t))","z","-inf",0.2880859375],["(/.f64 z (/.f64 a t))","z","inf",1.1298828125],["(/.f64 z (/.f64 a t))","z","0",0.44482421875]],"time":9.43896484375,"type":"series"},{"count":[[2,432]],"egraph":[[2,3617,21,0.027332667999999997],[1,281,21,0.004587959],[0,13,23,0.000309792]],"inputs":[["(/.f64 z (/.f64 a t))","(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (/.f64 t a))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (/.f64 t a)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (/.f64 t a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (neg.f64 (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (/.f64 z a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (/.f64 t a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (/.f64 t a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (cbrt.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (sqrt.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 1 (/.f64 (neg.f64 a) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t a) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (/.f64 z (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z a) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z a) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (/.f64 (cbrt.f64 z) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) a) (/.f64 (sqrt.f64 z) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) (/.f64 a t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) (/.f64 a t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (/.f64 z (cbrt.f64 (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (cbrt.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 a t))) (/.f64 z (sqrt.f64 (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (cbrt.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (sqrt.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 z a)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 z) a) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 z) 1) (/.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z 1) (/.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (neg.f64 a)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (cbrt.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (sqrt.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (/.f64 z a)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z a) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z a) (sqrt.f64 t)) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (/.f64 t a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (/.f64 t a)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 a (*.f64 z t)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 z 3) (pow.f64 (/.f64 a t) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 a t) (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 a (*.f64 z t)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z (/.f64 (neg.f64 a) t)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (/.f64 t a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (*.f64 z (/.f64 t a))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (/.f64 t a)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 z 3) (pow.f64 (/.f64 a t) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (/.f64 t a))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (/.f64 t a)) (*.f64 y (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 (/.f64 t a)) z (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 (/.f64 z a)) t (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 -1 (*.f64 z (/.f64 t a)) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 1 (*.f64 z (/.f64 t a)) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (*.f64 z (/.f64 t a)) 1 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a))))) (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (*.f64 z (/.f64 t a)) -1 (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 z) (/.f64 t a) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 t) (/.f64 z a) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 x a)) (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (/.f64 x a)) 1) (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (/.f64 t a)) z))) (fma.f64 (neg.f64 (neg.f64 (/.f64 t a))) z (*.f64 (neg.f64 (/.f64 t a)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 z) (/.f64 t a))) (pow.f64 (cbrt.f64 z) 2) (*.f64 (*.f64 (cbrt.f64 z) (/.f64 t a)) (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a))))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2) (*.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 z) (/.f64 t a))) (sqrt.f64 z) (*.f64 (*.f64 (sqrt.f64 z) (/.f64 t a)) (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 t a)) (neg.f64 z) (*.f64 (/.f64 t a) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (neg.f64 a) t))) (neg.f64 z) (*.f64 (/.f64 1 (/.f64 (neg.f64 a) t)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a)))) (fma.f64 (neg.f64 (/.f64 z (/.f64 1 t))) (/.f64 1 a) (*.f64 (/.f64 z (/.f64 1 t)) (/.f64 1 a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z a)))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z a) (*.f64 (neg.f64 t) (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) a) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 1 t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t))) (/.f64 (sqrt.f64 z) a) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 1 t)) (/.f64 (sqrt.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (*.f64 (/.f64 (cbrt.f64 z) (/.f64 a t)) (/.f64 (pow.f64 (cbrt.f64 z) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (/.f64 a t))) (/.f64 (sqrt.f64 z) 1) (*.f64 (/.f64 (sqrt.f64 z) (/.f64 a t)) (/.f64 (sqrt.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 (/.f64 a t)))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 z (cbrt.f64 (/.f64 a t))) (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t)))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)) (*.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 a t))) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (/.f64 a t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 (/.f64 a t)))) (/.f64 1 (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 z (sqrt.f64 (/.f64 a t))) (/.f64 1 (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t)))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))) (*.f64 (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 a t))) (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 a t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (neg.f64 (/.f64 z a))))) (fma.f64 (neg.f64 t) (neg.f64 (/.f64 z a)) (*.f64 t (neg.f64 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (/.f64 (neg.f64 z) a)))) (fma.f64 (neg.f64 t) (/.f64 (neg.f64 z) a) (*.f64 t (/.f64 (neg.f64 z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 (neg.f64 z) 1) (*.f64 (/.f64 t a) (/.f64 (neg.f64 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a))))) (fma.f64 (neg.f64 (neg.f64 t)) (/.f64 z (neg.f64 a)) (*.f64 (neg.f64 t) (/.f64 z (neg.f64 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)) (*.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 t a))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a))))))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))) (*.f64 (sqrt.f64 (*.f64 z (/.f64 t a))) (*.f64 -1 (sqrt.f64 (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 -1 (/.f64 z a))))) (fma.f64 (neg.f64 t) (*.f64 -1 (/.f64 z a)) (*.f64 t (*.f64 -1 (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 t)) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 t) (*.f64 (/.f64 z a) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 x a) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 y (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x a) y (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (*.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x a))) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x a) 2))) (cbrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 x a))) (sqrt.f64 (/.f64 x a)) (neg.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t))))) (fma.f64 (neg.f64 (sqrt.f64 t)) (*.f64 (/.f64 z a) (sqrt.f64 t)) (*.f64 (sqrt.f64 t) (*.f64 (/.f64 z a) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (/.f64 x a)) (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y (/.f64 x a) 0) (*.f64 z (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))) 2) (cbrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))) (sqrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (/.f64 x a)) 3) (pow.f64 (*.f64 z (/.f64 t a)) 3)) (+.f64 (pow.f64 (*.f64 y (/.f64 x a)) 2) (-.f64 (pow.f64 (*.f64 z (/.f64 t a)) 2) (*.f64 (*.f64 y (/.f64 x a)) (*.f64 z (/.f64 t a))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 x a)) 2) (pow.f64 (*.f64 z (/.f64 t a)) 2)) (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 y (/.f64 x a))) (pow.f64 (exp.f64 z) (/.f64 t a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 y (/.f64 x a))) (+.f64 1 (expm1.f64 (*.f64 z (/.f64 t a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (/.f64 t a)) (exp.f64 (*.f64 y (/.f64 x a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (/.f64 t a)))) (exp.f64 (*.f64 y (/.f64 x a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (/.f64 x a))) (+.f64 1 (expm1.f64 (*.f64 z (/.f64 t a))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (/.f64 x a) (*.f64 z (/.f64 t a)))) 1))))))"]],"rules":[["egg-rr",365],["egg-rr",67]],"stop":[["node limit",1]],"time":99.77685546875,"type":"rewrite"},{"count":[[528,440]],"egraph":[[10,2489,972,0.036245293],[9,2489,972,0.03164446],[8,2484,972,0.027399626],[7,2454,972,0.023153001],[6,2326,972,0.018484667],[5,1732,972,0.014097167],[4,888,972,0.007754542],[3,406,972,0.003517625],[2,160,972,0.001333583],[1,62,972,0.000533292],[0,20,1164,0.000187125]],"inputs":[["(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (*.f64 y x)) (*.f64 -1 (*.f64 t z))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)"]],"stop":[["saturated",1]],"time":78.129150390625,"type":"simplify"},{"compiler":[[16745,4712]],"time":90.473876953125,"type":"eval"},{"alts":[["(/.f64 (fma.f64 x y (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t)))) a)","fresh",8.172213206345557],["(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))","fresh",8.841558970598205],["(-.f64 (/.f64 x (/.f64 a y)) (/.f64 z (/.f64 a t)))","fresh",8.554311300287766],["(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (*.f64 (/.f64 1 a) (/.f64 z (/.f64 1 t)))))","fresh",7.3951121568546],["(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))","fresh",8.470852861912112],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","next",7.041773326789026]],"compiler":[[21,11],[36,22],[16,10],[22,16],[36,22],[17,11],[21,11],[36,22],[16,10],[22,16],[36,22],[17,11]],"count":[[449,6]],"kept":[{"done":[0,0],"fresh":[8,2],"new":[440,4],"picked":[1,0]}],"min-error":[0],"time":168.99609375,"type":"prune"},{"compiler":[[39,12]],"locations":[["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))",0.015625,true],["(/.f64 y (/.f64 a x))",3.7466264138168333,true],["(/.f64 t (/.f64 a z))",5.247840173584878,true]],"time":7.388916015625,"type":"localize"},{"count":[[3,132]],"series":[["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","x","-inf",0.174072265625],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","x","inf",0.1689453125],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","x","0",0.220947265625],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","y","-inf",0.175048828125],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","y","inf",0.194091796875],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","y","0",0.25390625],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","z","-inf",0.2919921875],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","z","inf",0.50390625],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","z","0",0.27783203125],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","a","-inf",0.364013671875],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","a","inf",0.171875],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","a","0",0.302978515625],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","t","-inf",1.759033203125],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","t","inf",0.201904296875],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","t","0",0.302978515625],["(/.f64 y (/.f64 a x))","x","-inf",0.3349609375],["(/.f64 y (/.f64 a x))","x","inf",0.31298828125],["(/.f64 y (/.f64 a x))","x","0",0.365966796875],["(/.f64 y (/.f64 a x))","a","-inf",0.29296875],["(/.f64 y (/.f64 a x))","a","inf",0.347900390625],["(/.f64 y (/.f64 a x))","a","0",0.324951171875],["(/.f64 y (/.f64 a x))","y","-inf",0.255859375],["(/.f64 y (/.f64 a x))","y","inf",0.35888671875],["(/.f64 y (/.f64 a x))","y","0",0.35302734375],["(/.f64 t (/.f64 a z))","z","-inf",0.151123046875],["(/.f64 t (/.f64 a z))","z","inf",0.175048828125],["(/.f64 t (/.f64 a z))","z","0",0.139892578125],["(/.f64 t (/.f64 a z))","a","-inf",0.15185546875],["(/.f64 t (/.f64 a z))","a","inf",0.178955078125],["(/.f64 t (/.f64 a z))","a","0",0.14306640625],["(/.f64 t (/.f64 a z))","t","-inf",0.18017578125],["(/.f64 t (/.f64 a z))","t","inf",0.155029296875],["(/.f64 t (/.f64 a z))","t","0",0.195068359375]],"time":10.166015625,"type":"series"},{"count":[[3,125]],"egraph":[[2,3710,30,0.028855792],[1,258,31,0.004666625],[0,12,31,0.000278583]],"inputs":[["(/.f64 t (/.f64 a z))","(/.f64 y (/.f64 a x))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 t z) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 t z) a))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 t z) a)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (*.f64 t z) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (/.f64 z a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 t a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 t z) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 t z) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 t) 2) (*.f64 (cbrt.f64 t) (/.f64 z a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 t z) a)) (pow.f64 (cbrt.f64 (/.f64 (*.f64 t z) a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 t z) a)) 2) (cbrt.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) (/.f64 z a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (*.f64 t z) a)) (sqrt.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 t) (/.f64 1 (/.f64 (neg.f64 a) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z a) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t a) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 t) 2) 1) (/.f64 (cbrt.f64 t) (/.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 t) 1) (/.f64 (sqrt.f64 t) (/.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 t) a) (/.f64 (sqrt.f64 t) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 t) 2) a) (/.f64 (cbrt.f64 t) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a z)) 2)) (/.f64 t (cbrt.f64 (/.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 t) 2) (pow.f64 (cbrt.f64 (/.f64 a z)) 2)) (cbrt.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 t) (pow.f64 (cbrt.f64 (/.f64 a z)) 2)) (/.f64 (sqrt.f64 t) (cbrt.f64 (/.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 a z))) (/.f64 t (sqrt.f64 (/.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 t) 2) (sqrt.f64 (/.f64 a z))) (/.f64 (cbrt.f64 t) (sqrt.f64 (/.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t 1) (/.f64 z a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t (neg.f64 a)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 t a) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 t a) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 t a) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 t z) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 t z) a) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 t z) a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 t z) a)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 a (*.f64 t z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 t 3) (pow.f64 (/.f64 a z) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 a (*.f64 t z)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 t (/.f64 (neg.f64 a) z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 t z) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 t z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 t z) a) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 t 3) (pow.f64 (/.f64 a z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 t z) a)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 x a))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 x a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 x a)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 x a)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (/.f64 x a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (/.f64 x a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 2) (cbrt.f64 (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) (sqrt.f64 (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (/.f64 (neg.f64 a) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x a) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y a) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (/.f64 a x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (/.f64 a x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) a) (/.f64 (sqrt.f64 y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (/.f64 y (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) a) (/.f64 (cbrt.f64 y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 a x)) 2)) (/.f64 y (cbrt.f64 (/.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (/.f64 a x)) 2)) (cbrt.f64 (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (/.f64 a x)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (/.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 a x))) (/.f64 y (sqrt.f64 (/.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (/.f64 a x))) (/.f64 (cbrt.f64 y) (sqrt.f64 (/.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y 1) (/.f64 x a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (neg.f64 a)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y a) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y a) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y a) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 x a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (/.f64 x a)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (/.f64 x a))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (/.f64 x a))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 a (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) (pow.f64 (/.f64 a x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 a (*.f64 y x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (/.f64 (neg.f64 a) x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (/.f64 x a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (/.f64 x a)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (/.f64 a x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (/.f64 x a))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 x a)) (neg.f64 (/.f64 (*.f64 t z) a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (*.f64 t z) a)) (*.f64 y (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (/.f64 (*.f64 t z) a)) 1) (*.f64 y (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))) 2) (cbrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))) (sqrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (neg.f64 (/.f64 (*.f64 t z) a)) 3) (pow.f64 (*.f64 y (/.f64 x a)) 3)) (+.f64 (pow.f64 (neg.f64 (/.f64 (*.f64 t z) a)) 2) (-.f64 (pow.f64 (*.f64 y (/.f64 x a)) 2) (*.f64 (neg.f64 (/.f64 (*.f64 t z) a)) (*.f64 y (/.f64 x a))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (neg.f64 (/.f64 (*.f64 t z) a)) 2) (pow.f64 (*.f64 y (/.f64 x a)) 2)) (-.f64 (neg.f64 (/.f64 (*.f64 t z) a)) (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) (/.f64 x a)) (exp.f64 (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x a)))) (exp.f64 (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (/.f64 (*.f64 t z) a))) (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x a))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a)))) 1))))))"]],"rules":[["egg-rr",29],["egg-rr",48],["egg-rr",48]],"stop":[["node limit",1]],"time":53.70703125,"type":"rewrite"},{"count":[[257,133]],"egraph":[[10,3100,1224,0.033966041999999995],[9,3095,1224,0.029313166999999998],[8,3057,1224,0.024670499999999998],[7,2809,1224,0.01970375],[6,1788,1224,0.0141255],[5,898,1224,0.0071902500000000005],[4,419,1224,0.003505625],[3,222,1224,0.001815709],[2,111,1224,0.000971875],[1,47,1368,0.00046833399999999994],[0,20,1416,0.00018475]],"inputs":[["(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 z (/.f64 (neg.f64 t) a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 z (/.f64 (neg.f64 t) a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 z (/.f64 (neg.f64 t) a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 z (/.f64 (neg.f64 t) a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 z (/.f64 (neg.f64 t) a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (*.f64 t (neg.f64 z)) a)","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 z (/.f64 (neg.f64 t) a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(*.f64 (/.f64 x a) y)","(*.f64 y (/.f64 x a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(-.f64 (*.f64 (/.f64 y a) x) (*.f64 (/.f64 t a) z))","(/.f64 (fma.f64 y x (*.f64 t (neg.f64 z))) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)"]],"stop":[["saturated",1]],"time":73.41796875,"type":"simplify"},{"compiler":[[2229,667]],"time":17.18310546875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 x y (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t)))) a)","fresh",8.172213206345557],["(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))","fresh",8.841558970598205],["(-.f64 (/.f64 x (/.f64 a y)) (/.f64 z (/.f64 a t)))","fresh",8.554311300287766],["(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))","fresh",8.470852861912112],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","next",7.244040712844306],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","done",7.041773326789026],["(pow.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 1)","fresh",7.3179446275492745]],"compiler":[[21,11],[36,22],[16,10],[36,22],[21,15],[17,11],[18,12],[21,11],[36,22],[16,10],[36,22],[21,15],[18,12]],"count":[[139,7]],"kept":[{"done":[0,0],"fresh":[5,4],"new":[133,2],"picked":[1,1]}],"min-error":[0],"time":33.660888671875,"type":"prune"},{"compiler":[[56,30]],"locations":[["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))",0.015625,true],["(/.f64 t (/.f64 1 z))",0.5145755030597267,true],["(/.f64 y (/.f64 a x))",3.7466264138168333,false],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))",5.461276529840044,true]],"time":11.962158203125,"type":"localize"},{"count":[[3,120]],"series":[["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","x","-inf",0.1611328125],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","x","inf",0.176025390625],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","x","0",0.157958984375],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","y","-inf",0.178955078125],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","y","inf",0.159912109375],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","y","0",0.1630859375],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","z","-inf",0.177001953125],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","z","inf",0.1611328125],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","z","0",0.175048828125],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","t","-inf",0.162109375],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","t","inf",0.161865234375],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","t","0",0.176025390625],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","a","-inf",0.1650390625],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","a","inf",0.177001953125],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","a","0",0.1630859375],["(/.f64 t (/.f64 1 z))","z","-inf",0.2109375],["(/.f64 t (/.f64 1 z))","z","inf",0.201904296875],["(/.f64 t (/.f64 1 z))","z","0",0.135009765625],["(/.f64 t (/.f64 1 z))","t","-inf",0.212158203125],["(/.f64 t (/.f64 1 z))","t","inf",0.195068359375],["(/.f64 t (/.f64 1 z))","t","0",0.15087890625],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","z","-inf",0.153076171875],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","z","inf",0.14892578125],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","z","0",0.157958984375],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","t","-inf",0.154052734375],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","t","inf",0.174072265625],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","t","0",0.155029296875],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","a","-inf",0.156005859375],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","a","inf",0.178955078125],["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","a","0",0.19287109375]],"time":5.4189453125,"type":"series"},{"count":[[3,120]],"egraph":[[2,4426,27,0.032160291],[1,319,28,0.005520541],[0,15,37,0.000358958]],"inputs":[["(*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z)))","(/.f64 t (/.f64 1 z))","(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 t (/.f64 z a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 t (/.f64 z a)))) (cbrt.f64 (exp.f64 (*.f64 t (/.f64 z a)))))) (log.f64 (cbrt.f64 (exp.f64 (*.f64 t (/.f64 z a))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 t (/.f64 z a))))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 t (/.f64 z a))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 t (/.f64 z a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 a (/.f64 1 (*.f64 t z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 1 (*.f64 t z)) a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 a z) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 a (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 1 z) (/.f64 t a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 a) (/.f64 1 (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 t (/.f64 a z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 t z) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 a) (/.f64 1 (*.f64 t z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 1 (*.f64 t z)) (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 t z)) 2) (/.f64 a (cbrt.f64 (*.f64 t z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 t) 2) (/.f64 (/.f64 a z) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 t z)) (/.f64 a (sqrt.f64 (*.f64 t z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 t) (/.f64 (/.f64 a z) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 t) (neg.f64 (/.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 t) (*.f64 (neg.f64 a) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 t) (*.f64 a (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 t a) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 t z)) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 t a)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 t) 1) (*.f64 (/.f64 -1 z) a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 t)) (*.f64 (neg.f64 a) (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 t -1) (*.f64 (/.f64 1 z) (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 t) -1) (*.f64 (/.f64 -1 z) (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 t z) (sqrt.f64 a)) (sqrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t a) 1) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 t z) (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t a) (cbrt.f64 (pow.f64 z -2))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 t a) (pow.f64 z -1/2)) (pow.f64 z -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 t z)) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 t) (/.f64 1 a)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 a) (neg.f64 t)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 t z) -1) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 t (/.f64 z a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 t (/.f64 z a)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 t (/.f64 z a))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 t (/.f64 z a))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 t (/.f64 z a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 t (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 t (/.f64 z a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 t (/.f64 z a)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 t z) 3) (pow.f64 a 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 (pow.f64 a -2) a) (pow.f64 (*.f64 t z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 t z) 3) (/.f64 (pow.f64 a -2) a)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 t (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 t (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 t (/.f64 z a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 t (/.f64 z a))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 t z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 t) z)) (cbrt.f64 (pow.f64 (exp.f64 t) z)))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 t) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 t) z))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 t) z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 t z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 t z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t z)) (pow.f64 (cbrt.f64 (*.f64 t z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 t z)) 2) (cbrt.f64 (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 t) 2) (*.f64 (cbrt.f64 t) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 t z)) (sqrt.f64 (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 t) (/.f64 1 (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 t) 2) 1) (/.f64 (cbrt.f64 t) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 t) 1) (/.f64 (sqrt.f64 t) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 z -2))) (/.f64 t (cbrt.f64 (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 (pow.f64 z -2))) (cbrt.f64 (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 t) (cbrt.f64 (pow.f64 z -2))) (/.f64 (sqrt.f64 t) (cbrt.f64 (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 z -1/2)) (/.f64 t (pow.f64 z -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 t) 2) (pow.f64 z -1/2)) (/.f64 (cbrt.f64 t) (pow.f64 z -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 t -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 t z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 t z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 t z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 t z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (*.f64 t z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 t (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 t z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 t) z))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 t z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 t z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 t 3) (/.f64 (pow.f64 z -2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 t z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 x a)) (/.f64 (neg.f64 t) (/.f64 a z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 t) (/.f64 a z)) (*.f64 y (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (neg.f64 t) (/.f64 a z)) 1) (*.f64 y (/.f64 x a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))))) (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))) 2) (cbrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))) (sqrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (neg.f64 t) (/.f64 a z)) 3) (pow.f64 (*.f64 y (/.f64 x a)) 3)) (fma.f64 (/.f64 (neg.f64 t) (/.f64 a z)) (/.f64 (neg.f64 t) (/.f64 a z)) (-.f64 (pow.f64 (*.f64 y (/.f64 x a)) 2) (*.f64 (/.f64 (neg.f64 t) (/.f64 a z)) (*.f64 y (/.f64 x a))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (neg.f64 t) (/.f64 a z)) (/.f64 (neg.f64 t) (/.f64 a z))) (pow.f64 (*.f64 y (/.f64 x a)) 2)) (-.f64 (/.f64 (neg.f64 t) (/.f64 a z)) (*.f64 y (/.f64 x a))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) (/.f64 x a)) (exp.f64 (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x a)))) (exp.f64 (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (neg.f64 t) (/.f64 a z))) (+.f64 1 (expm1.f64 (*.f64 y (/.f64 x a))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (/.f64 x a) (/.f64 (neg.f64 t) (/.f64 a z)))) 1))))))"]],"rules":[["egg-rr",29],["egg-rr",39],["egg-rr",52]],"stop":[["node limit",1]],"time":56.81591796875,"type":"rewrite"},{"count":[[240,129]],"egraph":[[10,3098,1068,0.033924667],[9,3093,1068,0.029306084],[8,3055,1068,0.024675584],[7,2807,1068,0.019727542],[6,1786,1068,0.014173251000000001],[5,898,1068,0.007210709],[4,419,1068,0.003453459],[3,222,1068,0.001749709],[2,111,1068,0.000931125],[1,47,1068,0.0004435],[0,20,1116,0.000172375]],"inputs":[["(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(/.f64 (*.f64 t z) a)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(*.f64 -1 (/.f64 (*.f64 t z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (*.f64 y x) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(/.f64 (*.f64 t z) a)","(/.f64 t (/.f64 a z))","(*.f64 (/.f64 t a) z)","(*.f64 z (/.f64 t a))","(*.f64 t (/.f64 z a))","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(*.f64 t z)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 y x)) a)","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (+.f64 (*.f64 t z) (*.f64 -1 (*.f64 y x))) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(/.f64 x (/.f64 a y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (neg.f64 t) (/.f64 a z))","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (neg.f64 t) (/.f64 a z))","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(/.f64 x (/.f64 a y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (neg.f64 t) (/.f64 a z))","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (neg.f64 t) (/.f64 a z))","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (neg.f64 t) (/.f64 a z))","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(/.f64 x (/.f64 a y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(/.f64 x (/.f64 a y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(*.f64 -1 (/.f64 (*.f64 t z) a))","(/.f64 (neg.f64 (*.f64 t z)) a)","(/.f64 (neg.f64 t) (/.f64 a z))","(*.f64 (/.f64 t a) (neg.f64 z))","(*.f64 (neg.f64 z) (/.f64 t a))","(*.f64 t (/.f64 (neg.f64 z) a))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(/.f64 x (/.f64 a y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(/.f64 (*.f64 y x) a)","(/.f64 y (/.f64 a x))","(*.f64 (/.f64 y a) x)","(/.f64 x (/.f64 a y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 -1 (*.f64 t z) (*.f64 y x)) a)","(/.f64 (-.f64 (*.f64 y x) (*.f64 t z)) a)"]],"stop":[["saturated",1]],"time":68.6279296875,"type":"simplify"},{"compiler":[[3248,1351]],"time":27.985107421875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 x y (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t)))) a)","fresh",8.172213206345557],["(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))","fresh",8.841558970598205],["(-.f64 (/.f64 x (/.f64 a y)) (/.f64 z (/.f64 a t)))","fresh",8.554311300287766],["(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))","fresh",8.470852861912112],["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","done",7.244040712844306],["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","done",7.041773326789026],["(pow.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 1)","fresh",7.3179446275492745]],"compiler":[[21,11],[36,22],[16,10],[36,22],[21,15],[17,11],[18,12]],"count":[[185,7]],"kept":[{"done":[1,1],"fresh":[5,5],"new":[178,0],"picked":[1,1]}],"min-error":[0],"time":48.31494140625,"type":"prune"},{"accuracy":[0.8519007063455579],"baseline":[6.601289369062602],"branch":[["x",4.215402926904395,3],["y",3.136488298541352,5],["z",5.101189518482775,2],["t",5.326078974181453,2],["a",3.402351099481355,3],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)",0.8675257063455579,3],["(-.f64 (*.f64 x y) (*.f64 z t))",0.8519007063455579,3],["(-.f64 (*.f64 x y) (*.f64 z t))",0.8519007063455579,3],["(*.f64 x y)",3.350758817494116,3],["(*.f64 x y)",3.350758817494116,3],["(*.f64 z t)",3.689537461546685,3],["(*.f64 z t)",3.689537461546685,3]],"compiler":[[6,5],[6,5],[6,5],[6,5],[6,5],[14,9],[12,8],[12,8],[8,6],[8,6],[8,6],[8,6],[265,114]],"count":[[17,3]],"inputs":[["(fma.f64 -1 (*.f64 (/.f64 1 a) (/.f64 t (/.f64 1 z))) (/.f64 y (/.f64 a x)))","(pow.f64 (fma.f64 y (/.f64 x a) (neg.f64 (/.f64 (*.f64 t z) a))) 1)","(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 t (*.f64 (/.f64 z a) 1)))) (fma.f64 (neg.f64 t) (*.f64 (/.f64 z a) 1) (*.f64 t (*.f64 (/.f64 z a) 1))))","(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (*.f64 (/.f64 1 a) (/.f64 z (/.f64 1 t)))))","(+.f64 (fma.f64 (*.f64 y x) (/.f64 1 a) (neg.f64 (*.f64 (/.f64 t a) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 t a)) (/.f64 z 1) (*.f64 (/.f64 t a) (/.f64 z 1))))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(/.f64 (fma.f64 x y (fma.f64 z (neg.f64 t) (fma.f64 z (neg.f64 t) (*.f64 z t)))) a)","(*.f64 t (/.f64 (neg.f64 z) a))","(-.f64 (/.f64 x (/.f64 a y)) (/.f64 z (/.f64 a t)))","(*.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 2)) 1) (/.f64 (cbrt.f64 (-.f64 (*.f64 x y) (*.f64 z t))) a))","(fma.f64 (/.f64 y 1) (/.f64 x a) (neg.f64 (/.f64 z (/.f64 a t))))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(fma.f64 (*.f64 x y) (/.f64 1 a) (neg.f64 (/.f64 z (/.f64 a t))))","(/.f64 (fma.f64 (*.f64 (neg.f64 z) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t) (*.f64 x y)) a)","(/.f64 (fma.f64 z (neg.f64 t) (*.f64 x y)) a)","(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)"]],"link":["."],"name":["Data.Colour.Matrix:inverse from colour-2.3.3, B"],"oracle":[49.34064143079192],"outputs":[["(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a))","(fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))"]],"time":210.373046875,"times":[["x",20.755126953125],["y",29.300048828125],["z",11.69384765625],["t",11.788818359375],["a",23.297119140625],["(/.f64 (-.f64 (*.f64 x y) (*.f64 z t)) a)",14.88720703125],["(-.f64 (*.f64 x y) (*.f64 z t))",15.805908203125],["(-.f64 (*.f64 x y) (*.f64 z t))",16.135009765625],["(*.f64 x y)",15.489990234375],["(*.f64 x y)",15.47509765625],["(*.f64 z t)",15.220947265625],["(*.f64 z t)",15.51318359375]],"type":"regimes"},{"bstep":[[7.47673945438392e+207,1.2016628125329909e+216,0.06396484375],[{"type":"real","value":"-inf"},-4.852730583407944e+289,0.041015625]],"compiler":[[10,8],[12,8]],"method":["left-value","left-value"],"time":0.25390625,"type":"bsearch"},{"compiler":[[60,25]],"egraph":[[5,65,80,0.000383083],[4,64,80,0.000312458],[3,59,80,0.000240833],[2,52,80,0.000170333],[1,38,80,0.000101083],[0,28,82,4.5e-5]],"inputs":[["(if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) -inf.0) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x))) (if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 9999999999999999818630698308109481982927274216983785721776674794699138106539424938898600659703096825493544616522696356805028364441642842329313746550197144253860793660984920822957311285732475861572950035529728) (+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a)) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) -inf.0) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x))) (if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 9999999999999999818630698308109481982927274216983785721776674794699138106539424938898600659703096825493544616522696356805028364441642842329313746550197144253860793660984920822957311285732475861572950035529728) (+.f64 (*.f64 -1 (/.f64 (*.f64 t z) a)) (/.f64 (*.f64 y x) a)) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))))","(if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) -inf.0) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x))) (if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 9999999999999999818630698308109481982927274216983785721776674794699138106539424938898600659703096825493544616522696356805028364441642842329313746550197144253860793660984920822957311285732475861572950035529728) (+.f64 (neg.f64 (/.f64 (*.f64 z t) a)) (/.f64 (*.f64 x y) a)) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))))","(if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) -inf.0) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x))) (if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z t)) 9999999999999999818630698308109481982927274216983785721776674794699138106539424938898600659703096825493544616522696356805028364441642842329313746550197144253860793660984920822957311285732475861572950035529728) (-.f64 (/.f64 (*.f64 x y) a) (/.f64 (*.f64 z t) a)) (fma.f64 -1 (/.f64 t (/.f64 a z)) (/.f64 y (/.f64 a x)))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.80517578125,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[60,25],[60,25],[60,25],[60,25],[60,25],[60,25],[60,25]],"remove-preprocessing":[["(sort z t)"]],"time":26.89501953125,"type":"end"}]
[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.2662112235246923,0.29546520413180133,0.4383235723435064],[11,0.22818104873545053,0.3646996249019594,0.4071193263625901],[10,0.17552388364265425,0.448561035975672,0.37591508038167376],[9,0.11701592242843617,0.5070689971898901,0.37591508038167376],[8,0.07801061495229078,0.6084827966278681,0.31350658841984114],[7,0.031204245980916312,0.7176976575610752,0.2510980964580085],[6,0.0,0.7489019035419915,0.2510980964580085],[5,0.0,0.8737188874656567,0.12628111253434326],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":69.60107421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",43.81005859375,1053],["body",256,"valid",417.423095703125,8256]],"time":469.9951171875,"type":"sample"},{"compiler":[[11,7]],"egraph":[[0,3,3,2.125e-6],[16,7829,48,0.128063875],[15,7027,48,0.1191255],[14,7027,48,0.10145074999999999],[13,6955,48,0.088238292],[12,6831,48,0.077828167],[11,6721,48,0.068515251],[10,6027,48,0.058182292000000004],[9,4907,48,0.046908667],[8,4161,48,0.035665625],[7,2969,48,0.024990417],[6,1851,48,0.014168624999999999],[5,828,48,0.0059143749999999995],[4,342,48,0.002120875],[3,123,48,0.0009075],[2,65,48,0.00041383399999999997],[1,42,48,0.000208667],[0,20,48,7.6667e-5]],"inputs":[["0","1","2"],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(-.f64 (*.f64 y (log.f64 (/.f64 y x))) z)","(-.f64 (*.f64 z (log.f64 (/.f64 z y))) x)","(-.f64 (*.f64 x (log.f64 (/.f64 x z))) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(-.f64 (*.f64 y (log.f64 (/.f64 y x))) z)","(fma.f64 y (log.f64 (/.f64 y x)) (neg.f64 z))","(-.f64 (*.f64 z (log.f64 (/.f64 z y))) x)","(fma.f64 z (log.f64 (/.f64 z y)) (neg.f64 x))","(-.f64 (*.f64 x (log.f64 (/.f64 x z))) y)","(fma.f64 x (log.f64 (/.f64 x z)) (neg.f64 y))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":152.673828125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[24,7877,12,0.17362758300000006],[23,7877,12,0.15994929100000005],[22,7865,12,0.14788812400000004],[21,7773,12,0.13537879100000003],[20,7763,12,0.12160500000000002],[19,7713,12,0.11354745800000002],[18,7628,12,0.10648550000000001],[17,7303,12,0.09930304100000001],[16,6863,12,0.090998041],[15,5637,12,0.079050666],[14,4255,12,0.05815429100000001],[13,4241,12,0.04957833300000001],[12,4202,12,0.04289874900000001],[11,4081,12,0.03628674900000001],[10,3707,12,0.029517458000000003],[9,2192,12,0.020880541000000002],[8,1276,12,0.011826708],[7,920,12,0.007455583],[6,499,12,0.004060958],[5,232,12,0.001698375],[4,98,12,0.000709833],[3,39,12,0.000345167],[2,23,12,0.000179917],[1,15,12,0.00010012500000000001],[0,8,12,4.3e-5]],"inputs":[["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))"]],"stop":[["node limit",1]],"time":187.3759765625,"type":"simplify"},{"compiler":[[19,9]],"time":0.31201171875,"type":"eval"},{"alts":[["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","next",14.3359375],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","fresh",14.33984375]],"compiler":[[11,7],[11,7],[11,7],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[14.33203125],"time":1.237060546875,"type":"prune"},{"compiler":[[23,7]],"locations":[["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))",0.109375,true],["(log.f64 (/.f64 x y))",14.38267662921025,true]],"time":5.7880859375,"type":"localize"},{"count":[[2,60]],"series":[["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","z","-inf",0.179931640625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","z","inf",0.244873046875],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","z","0",1.98291015625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","y","-inf",0.385986328125],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","y","inf",0.321044921875],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","y","0",0.349853515625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","x","-inf",8.006103515625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","x","inf",0.37890625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","x","0",0.296142578125],["(log.f64 (/.f64 x y))","y","-inf",7.43701171875],["(log.f64 (/.f64 x y))","y","inf",6.2001953125],["(log.f64 (/.f64 x y))","y","0",6.76708984375],["(log.f64 (/.f64 x y))","x","-inf",10.583984375],["(log.f64 (/.f64 x y))","x","inf",4.43408203125],["(log.f64 (/.f64 x y))","x","0",15.958984375]],"time":63.76904296875,"type":"series"},{"count":[[2,48]],"egraph":[[2,2138,16,0.019367791999999998],[1,165,16,0.002885875],[0,8,18,0.00018475]],"inputs":[["(log.f64 (/.f64 x y))","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 x) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 x y))) (log.f64 (sqrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 x) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 2) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (/.f64 x y))) (sqrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 y) 3)) (+.f64 (*.f64 (log.f64 x) (log.f64 x)) (+.f64 (*.f64 (log.f64 y) (log.f64 y)) (*.f64 (log.f64 x) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 (log.f64 y) (log.f64 y))) (+.f64 (log.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 x y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (/.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 (/.f64 x y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (log.f64 (/.f64 x y)) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (log.f64 (/.f64 x y))) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 (/.f64 x y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 (/.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 2) (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) (sqrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 x (log.f64 (/.f64 x y)))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 (/.f64 x y))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 x (log.f64 (/.f64 x y)))) (*.f64 z z)) (fma.f64 x (log.f64 (/.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)))))))"]],"rules":[["egg-rr",23],["egg-rr",25]],"stop":[["node limit",1]],"time":41.538818359375,"type":"rewrite"},{"count":[[108,68]],"egraph":[[14,6235,540,0.10908929299999998],[13,6235,540,0.09774158499999998],[12,6219,540,0.08716037599999998],[11,6177,540,0.07590066799999999],[10,6175,540,0.063595085],[9,6165,540,0.05513095999999999],[8,6103,540,0.047432959999999996],[7,5889,540,0.038946044],[6,5008,540,0.030619294],[5,3109,540,0.020656502],[4,1352,540,0.010546543],[3,490,540,0.003511959],[2,173,540,0.0012835429999999998],[1,93,540,0.000550043],[0,42,723,0.000209959]],"inputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(log.f64 (/.f64 x y))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 x (fma.f64 -1 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 y))))","(*.f64 x (log.f64 (/.f64 x y)))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 x (fma.f64 -1 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 y))))","(*.f64 x (log.f64 (/.f64 x y)))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 x (fma.f64 -1 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 y))))","(*.f64 x (log.f64 (/.f64 x y)))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(-.f64 (*.f64 x (fma.f64 -1 (log.f64 y) (log.f64 x))) z)","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(neg.f64 (fma.f64 x (log.f64 (/.f64 y x)) z))"]],"stop":[["node limit",1]],"time":142.01416015625,"type":"simplify"},{"compiler":[[827,296]],"time":7.880859375,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 y) 3)) (+.f64 (*.f64 (log.f64 x) (log.f64 x)) (+.f64 (*.f64 (log.f64 y) (log.f64 y)) (*.f64 (log.f64 x) (log.f64 y))))) (neg.f64 z))","fresh",33.50481980128694],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","fresh",30.889215070395597],["(fma.f64 x (*.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 2) (cbrt.f64 (log.f64 (/.f64 x y)))) (neg.f64 z))","fresh",14.602672705137286],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(fma.f64 x (/.f64 (-.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 (log.f64 y) (log.f64 y))) (+.f64 (log.f64 x) (log.f64 y))) (neg.f64 z))","fresh",33.463140119237806],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 3)","fresh",37.67706950666176],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","done",14.3359375],["(/.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 x (log.f64 (/.f64 x y)))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 (/.f64 x y))) z))))","fresh",53.43531603994546],["(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","next",14.392910009768443]],"compiler":[[34,18],[16,12],[20,11],[14,10],[24,12],[13,9],[11,7],[42,17],[20,12],[34,18],[16,12],[20,11],[14,10],[24,12],[13,9],[42,17],[20,12]],"count":[[70,9]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[68,8],"picked":[1,1]}],"min-error":[0.03515625],"time":14.7880859375,"type":"prune"},{"compiler":[[64,22]],"locations":[["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))",0.30859375,true],["(pow.f64 (cbrt.f64 (/.f64 x y)) 2)",0.47398378907376815,true],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))",3.4415330989371036,true],["(cbrt.f64 (/.f64 x y))",14.45811618138708,true]],"time":14.85498046875,"type":"localize"},{"count":[[4,0]],"series":[["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))","y","-inf",0.635009765625],["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))","y","inf",0.51318359375],["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))","y","0",0.43603515625],["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))","x","-inf",0.777099609375],["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))","x","inf",0.4990234375],["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))","x","0",0.617919921875],["(pow.f64 (cbrt.f64 (/.f64 x y)) 2)","y","-inf",0.376953125],["(pow.f64 (cbrt.f64 (/.f64 x y)) 2)","y","inf",0.328857421875],["(pow.f64 (cbrt.f64 (/.f64 x y)) 2)","y","0",0.25390625],["(pow.f64 (cbrt.f64 (/.f64 x y)) 2)","x","-inf",0.388916015625],["(pow.f64 (cbrt.f64 (/.f64 x y)) 2)","x","inf",0.2939453125],["(pow.f64 (cbrt.f64 (/.f64 x y)) 2)","x","0",0.275146484375],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))","y","-inf",0.469970703125],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))","y","inf",0.388916015625],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))","y","0",0.327880859375],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))","x","-inf",0.873046875],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))","x","inf",0.39794921875],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))","x","0",0.75],["(cbrt.f64 (/.f64 x y))","y","-inf",0.339111328125],["(cbrt.f64 (/.f64 x y))","y","inf",0.265869140625],["(cbrt.f64 (/.f64 x y))","y","0",0.2958984375],["(cbrt.f64 (/.f64 x y))","x","-inf",0.468017578125],["(cbrt.f64 (/.f64 x y))","x","inf",0.2939453125],["(cbrt.f64 (/.f64 x y))","x","0",0.43701171875]],"time":10.987060546875,"type":"series"},{"count":[[4,234]],"egraph":[[2,2718,30,0.024844707],[1,214,32,0.003803999],[0,10,32,0.000268916]],"inputs":[["(cbrt.f64 (/.f64 x y))","(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))","(pow.f64 (cbrt.f64 (/.f64 x y)) 2)","(+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (exp.f64 1) (fma.f64 (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 1 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (exp.f64 1) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (exp.f64 1) (fma.f64 (neg.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (exp.f64 1) (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (exp.f64 1) (*.f64 -1 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (exp.f64 1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (exp.f64 1) (*.f64 (neg.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2) (cbrt.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 1/6) (pow.f64 (/.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 4)) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 1) (*.f64 1/3 (*.f64 2/3 (log.f64 (/.f64 x y))))) (pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 1) (*.f64 1/6 (log.f64 (/.f64 x y)))) (pow.f64 (exp.f64 1) (*.f64 1/6 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 1) (exp.f64 (log1p.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))) (pow.f64 (exp.f64 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 x))) (pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 2) (*.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (*.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 (log.f64 (/.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (*.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2))) (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 x y)))) (*.f64 (sqrt.f64 (log.f64 (/.f64 x y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y))))) (*.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 2)) (*.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) 1) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) 1) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (cbrt.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))) (sqrt.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))) (sqrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) 1/3) (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 1) (+.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))) (-.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) 1) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))) (cbrt.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))) (cbrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) 2)) (cbrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (sqrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))) (sqrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x y)) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 4)) (*.f64 1/3 (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (/.f64 x y)))) (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (log.f64 (/.f64 x y))) (log.f64 (sqrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 x y))) (*.f64 1/6 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 5)) (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 2/3 (log.f64 (/.f64 x y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 2 (log.f64 (cbrt.f64 x))) (*.f64 2 (log.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 x))) (log.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 2) (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (*.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (*.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (log.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 1/3 (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2/3 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 1 (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 (cbrt.f64 (/.f64 x y))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (-.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (log.f64 (cbrt.f64 (/.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (exp.f64 2) (fma.f64 (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 1 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (exp.f64 2) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (exp.f64 2) (fma.f64 (neg.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 4) (pow.f64 (exp.f64 2) (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 4) (pow.f64 (exp.f64 2) (*.f64 -1 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 4) (pow.f64 (exp.f64 2) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 4) (pow.f64 (exp.f64 2) (*.f64 (neg.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 1/6) (sqrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x y)) (pow.f64 (/.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 5) (cbrt.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 2) (*.f64 1/3 (*.f64 2/3 (log.f64 (/.f64 x y))))) (pow.f64 (exp.f64 2) (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 2) (*.f64 1/6 (log.f64 (/.f64 x y)))) (pow.f64 (exp.f64 2) (*.f64 1/6 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 1) (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 4))) (pow.f64 (exp.f64 1) (*.f64 1/3 (*.f64 2/3 (log.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 4) (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 2) (exp.f64 (log1p.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))) (exp.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 2) (log.f64 (cbrt.f64 x))) (pow.f64 (exp.f64 2) (log.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 1) (exp.f64 (log1p.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))) (pow.f64 (exp.f64 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (/.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 x) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (/.f64 y x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 2 (log.f64 (cbrt.f64 x))) (log.f64 (/.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (sqrt.f64 x)) (log.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 2) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 -1) (log.f64 (neg.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (neg.f64 x))) (log.f64 (neg.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 x (sqrt.f64 y))) (log.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 x 1)) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 x (pow.f64 (cbrt.f64 y) 2))) (log.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (cbrt.f64 x))) (log.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (log.f64 (sqrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (/.f64 x y))) (sqrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3)) (/.f64 1 (-.f64 (fma.f64 4 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)) (*.f64 2 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (/.f64 1 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 4 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)) (*.f64 2 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2))) (+.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3)) (-.f64 (fma.f64 4 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)) (*.f64 2 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3)) (+.f64 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2) (-.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 2) (*.f64 2 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3))) (neg.f64 (-.f64 (fma.f64 4 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)) (*.f64 2 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2) (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 2)) (-.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (*.f64 2/3 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 4 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2)) (*.f64 2 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2))) (+.f64 (pow.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (/.f64 y x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (/.f64 x y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 2/3 (log.f64 (/.f64 x y))))) (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (+.f64 1 (-.f64 (cbrt.f64 (/.f64 x y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 2/3 (log.f64 (/.f64 x y))))) (+.f64 1 (-.f64 (cbrt.f64 (/.f64 x y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (cbrt.f64 (/.f64 x y)) 1)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (cbrt.f64 (/.f64 x y)) (+.f64 1 (expm1.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (-.f64 (cbrt.f64 (/.f64 x y)) 1)) (+.f64 1 (expm1.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 x y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 (/.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (log.f64 (cbrt.f64 (/.f64 x y))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2/3 (log.f64 (/.f64 x y))) 1 (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 2 (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 1 (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2/3 (log.f64 (/.f64 x y))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 (cbrt.f64 (/.f64 x y))) (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 x) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 2) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) 2) (cbrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (*.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (*.f64 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (log.f64 (/.f64 x y)) (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (cbrt.f64 (log.f64 x)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 x)) (sqrt.f64 (log.f64 x)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (-.f64 (sqrt.f64 (*.f64 2/3 (log.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (*.f64 2/3 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))))"]],"rules":[["egg-rr",78],["egg-rr",36],["egg-rr",44],["egg-rr",76]],"stop":[["node limit",1]],"time":64.06591796875,"type":"rewrite"},{"count":[[234,234]],"egraph":[[0,0,0,2.0416e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":13.06298828125,"type":"simplify"},{"compiler":[[7357,2634]],"time":58.666015625,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 (-.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 (log.f64 y) (log.f64 y))) (+.f64 (log.f64 x) (log.f64 y))) (neg.f64 z))","fresh",33.463140119237806],["(fma.f64 x (/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","next",14.369472509768443],["(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (neg.f64 z))","fresh",14.417675048842211],["(/.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 x (log.f64 (/.f64 x y)))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 (/.f64 x y))) z))))","fresh",53.43531603994546],["(fma.f64 x (-.f64 (*.f64 2 (log.f64 (cbrt.f64 x))) (log.f64 (/.f64 y (cbrt.f64 x)))) (neg.f64 z))","fresh",35.6728167735756],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","fresh",30.889215070395597],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 3)","fresh",37.67706950666176],["(fma.f64 x (-.f64 (log.f64 (sqrt.f64 x)) (log.f64 (/.f64 y (sqrt.f64 x)))) (neg.f64 z))","fresh",36.56558586483824],["(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","done",14.392910009768443]],"compiler":[[24,12],[23,11],[34,20],[42,17],[18,12],[16,12],[14,10],[13,9],[16,10],[20,12],[24,12],[23,11],[34,20],[42,17],[18,12],[16,12],[14,10],[13,9],[16,10]],"count":[[319,10]],"kept":[{"done":[1,0],"fresh":[7,5],"new":[310,4],"picked":[1,1]}],"min-error":[0.0234375],"time":115.466064453125,"type":"prune"},{"compiler":[[70,11]],"locations":[["(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))",0.33984375,true],["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))",0.38671875,true],["(log.f64 (/.f64 x y))",14.38267662921025,false],["(cbrt.f64 (/.f64 x y))",14.45811618138708,false]],"time":10.6728515625,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))","y","-inf",0.177978515625],["(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))","y","inf",0.155029296875],["(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))","y","0",0.1669921875],["(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))","x","-inf",0.1650390625],["(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))","x","inf",0.166015625],["(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))","x","0",0.177978515625],["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))","y","-inf",0.52392578125],["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))","y","inf",0.47900390625],["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))","y","0",0.454833984375],["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))","x","-inf",0.541015625],["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))","x","inf",0.541015625],["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))","x","0",0.868896484375]],"time":4.589111328125,"type":"series"},{"count":[[2,62]],"egraph":[[2,2591,22,0.020791959],[1,186,22,0.003389667],[0,9,42,0.0001925]],"inputs":[["(*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))","(/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (log.f64 (/.f64 x y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3) (pow.f64 (log.f64 (/.f64 x y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) (log.f64 (/.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 x) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 x y))) (log.f64 (sqrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 x) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (log.f64 x) 1) (/.f64 (log.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (*.f64 (log.f64 (/.f64 x y)) (/.f64 1 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (/.f64 1 (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) 2) (*.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (/.f64 1 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 2) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (*.f64 (sqrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (/.f64 1 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (/.f64 x y))) (sqrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (/.f64 1 (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 (cbrt.f64 (/.f64 x y)))) (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (/.f64 (log.f64 (/.f64 x y)) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 1) (/.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) 2) 1) (/.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) 1) (/.f64 (sqrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (log.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (/.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (/.f64 (log.f64 (/.f64 x y)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) 2) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (/.f64 (sqrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (/.f64 x y)) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (/.f64 (log.f64 (cbrt.f64 (/.f64 x y))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) 2) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (/.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y))))) (sqrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (/.f64 x y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) 3) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 x y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (/.f64 x y))))))))"]],"rules":[["egg-rr",48],["egg-rr",14]],"stop":[["node limit",1]],"time":43.069091796875,"type":"rewrite"},{"count":[[86,68]],"egraph":[[16,7804,212,0.106846583],[15,5774,212,0.100738792],[14,5554,212,0.08705275],[13,5474,212,0.076506834],[12,5470,212,0.067297542],[11,3996,212,0.058013042],[10,3964,212,0.045409000000000005],[9,3753,212,0.03859875],[8,3311,212,0.031513042],[7,2690,212,0.024503417],[6,2084,212,0.017130917],[5,1009,212,0.01098675],[4,527,212,0.004868625],[3,225,212,0.001831],[2,92,212,0.000703583],[1,50,212,0.000292541],[0,25,232,0.000111833]],"inputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(fma.f64 -1 (log.f64 y) (log.f64 x))","(-.f64 (log.f64 x) (log.f64 y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (neg.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (neg.f64 x)))"]],"stop":[["node limit",1]],"time":127.427001953125,"type":"simplify"},{"compiler":[[6551,1714]],"time":39.48486328125,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 (-.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 (log.f64 y) (log.f64 y))) (+.f64 (log.f64 x) (log.f64 y))) (neg.f64 z))","fresh",33.463140119237806],["(fma.f64 x (/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","done",14.369472509768443],["(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (neg.f64 z))","next",14.417675048842211],["(/.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 x (log.f64 (/.f64 x y)))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 (/.f64 x y))) z))))","fresh",53.43531603994546],["(fma.f64 x (-.f64 (*.f64 2 (log.f64 (cbrt.f64 x))) (log.f64 (/.f64 y (cbrt.f64 x)))) (neg.f64 z))","fresh",35.6728167735756],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","fresh",30.889215070395597],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 3)","fresh",37.67706950666176],["(fma.f64 x (-.f64 (log.f64 (sqrt.f64 x)) (log.f64 (/.f64 y (sqrt.f64 x)))) (neg.f64 z))","fresh",36.56558586483824],["(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","done",14.392910009768443]],"compiler":[[24,12],[23,11],[34,20],[42,17],[18,12],[16,12],[14,10],[13,9],[16,10],[20,12],[24,12],[34,20],[42,17],[18,12],[16,12],[14,10],[13,9],[16,10]],"count":[[261,10]],"kept":[{"done":[1,1],"fresh":[8,8],"new":[251,0],"picked":[1,1]}],"min-error":[0.0234375],"time":84.736083984375,"type":"prune"},{"compiler":[[157,60]],"locations":[["(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))",2.9857251388414854,true],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))",3.4415330989371036,false],["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))",4.572809664234075,true],["(cbrt.f64 (/.f64 x y))",14.45811618138708,false]],"time":63.5478515625,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))","y","-inf",1.221923828125],["(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))","y","inf",1.154052734375],["(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))","y","0",0.755859375],["(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))","x","-inf",1.18896484375],["(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))","x","inf",0.97998046875],["(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))","x","0",0.801025390625],["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))","y","-inf",8.77294921875],["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))","y","inf",7.155029296875],["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))","y","0",5.3701171875],["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))","x","-inf",8.56103515625],["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))","x","inf",6.795166015625],["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))","x","0",6.5419921875]],"time":49.506103515625,"type":"series"},{"count":[[2,58]],"egraph":[[2,2696,21,0.024915916],[1,261,21,0.00392075],[0,13,21,0.000340125]],"inputs":[["(pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))","(pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y))) 2) (cbrt.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 1 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x y) 1/6) (pow.f64 (/.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 2/3)) (log.f64 (/.f64 x y))) (cbrt.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (*.f64 2 (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y)))))) (cbrt.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (exp.f64 (log1p.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (log.f64 (cbrt.f64 x))) (pow.f64 (E.f64) (log.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (exp.f64 (log1p.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (*.f64 2 (*.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (*.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2) (*.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 x y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (exp.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) 2) 4))) (cbrt.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (exp.f64 (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 5/6))) (pow.f64 (log.f64 (cbrt.f64 (/.f64 x y))) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x y)) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x y)) 1/3) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))) (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))) (pow.f64 (exp.f64 2/3) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 2/3) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))) (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (E.f64) (*.f64 2 (*.f64 1/3 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))) (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (E.f64) (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))) (exp.f64 (log1p.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (exp.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 3) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) 3))))))"]],"rules":[["egg-rr",21],["egg-rr",37]],"stop":[["node limit",1]],"time":46.15087890625,"type":"rewrite"},{"count":[[58,58]],"egraph":[[0,0,0,2e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.97607421875,"type":"simplify"},{"compiler":[[12414,5245]],"time":103.155029296875,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 (-.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 (log.f64 y) (log.f64 y))) (+.f64 (log.f64 x) (log.f64 y))) (neg.f64 z))","fresh",33.463140119237806],["(fma.f64 x (/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","done",14.369472509768443],["(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (neg.f64 z))","done",14.417675048842211],["(/.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 x (log.f64 (/.f64 x y)))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 (/.f64 x y))) z))))","fresh",53.43531603994546],["(fma.f64 x (-.f64 (*.f64 2 (log.f64 (cbrt.f64 x))) (log.f64 (/.f64 y (cbrt.f64 x)))) (neg.f64 z))","fresh",35.6728167735756],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","fresh",30.889215070395597],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 3)","fresh",37.67706950666176],["(fma.f64 x (-.f64 (log.f64 (sqrt.f64 x)) (log.f64 (/.f64 y (sqrt.f64 x)))) (neg.f64 z))","fresh",36.56558586483824],["(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","done",14.392910009768443]],"compiler":[[24,12],[23,11],[34,20],[42,17],[18,12],[16,12],[14,10],[13,9],[16,10],[20,12]],"count":[[340,10]],"kept":[{"done":[2,2],"fresh":[7,7],"new":[330,0],"picked":[1,1]}],"min-error":[0.0234375],"time":139.199951171875,"type":"prune"},{"accuracy":[0.273266359170533],"baseline":[14.3359375],"branch":[["x",0.273266359170533,2],["y",0.27326635917053305,2],["z",14.3359375,1],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)",5.359375,3],["(*.f64 x (log.f64 (/.f64 x y)))",5.359375,3],["(*.f64 x (log.f64 (/.f64 x y)))",5.359375,3]],"compiler":[[4,3],[4,3],[4,3],[11,7],[9,6],[9,6],[257,98]],"count":[[14,2]],"inputs":[["(fma.f64 x (/.f64 (*.f64 (log.f64 (/.f64 x y)) (log.f64 (cbrt.f64 (/.f64 x y)))) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (pow.f64 (pow.f64 (exp.f64 1) (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (/.f64 x y))))))) (neg.f64 z))","(fma.f64 x (-.f64 (*.f64 2 (log.f64 (cbrt.f64 x))) (log.f64 (/.f64 y (cbrt.f64 x)))) (neg.f64 z))","(fma.f64 x (-.f64 (log.f64 (sqrt.f64 x)) (log.f64 (/.f64 y (sqrt.f64 x)))) (neg.f64 z))","(fma.f64 x (/.f64 (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 y) 3)) (+.f64 (*.f64 (log.f64 x) (log.f64 x)) (+.f64 (*.f64 (log.f64 y) (log.f64 y)) (*.f64 (log.f64 x) (log.f64 y))))) (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(fma.f64 x (*.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 2) (cbrt.f64 (log.f64 (/.f64 x y)))) (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(fma.f64 x (/.f64 (-.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 (log.f64 y) (log.f64 y))) (+.f64 (log.f64 x) (log.f64 y))) (neg.f64 z))","(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) z)) 3)","(/.f64 (+.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (log.f64 (/.f64 x y))) (*.f64 x (log.f64 (/.f64 x y)))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (log.f64 (/.f64 x y))) z))))","(fma.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (log.f64 (cbrt.f64 (/.f64 x y)))) (neg.f64 z))","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)"]],"link":["."],"name":["Numeric.SpecFunctions.Extra:bd0 from math-functions-0.1.5.2"],"oracle":[64.0],"outputs":[["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)"]],"time":70.906005859375,"times":[["x",10.69482421875],["y",10.60693359375],["z",5.735107421875],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)",13.118896484375],["(*.f64 x (log.f64 (/.f64 x y)))",13.489990234375],["(*.f64 x (log.f64 (/.f64 x y)))",13.387939453125]],"type":"regimes"},{"bstep":[[-1.3627538798365988e-306,7.59985283874232e-307,1.466064453125]],"compiler":[[15,11],[17,13],[13,9],[4,3]],"method":["binary-search"],"time":1.60302734375,"type":"bsearch"},{"compiler":[[28,19]],"egraph":[[4,47,39,0.000236666],[3,44,39,0.00018479099999999999],[2,40,39,0.000128666],[1,33,39,8.2333e-5],[0,22,41,4.0458e-5]],"inputs":[["(if (<=.f64 x 0) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x 0) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z))","(if (<=.f64 x 0) (-.f64 (*.f64 x (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (neg.f64 x)))) z) (-.f64 (*.f64 x (+.f64 (neg.f64 (log.f64 y)) (log.f64 x))) z))","(if (<=.f64 x 0) (-.f64 (*.f64 x (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (neg.f64 x)))) z) (-.f64 (*.f64 x (-.f64 (log.f64 x) (log.f64 y))) z))"]],"stop":[["fuel",1],["saturated",1]],"time":9.10302734375,"type":"simplify"},{"time":0.01904296875,"type":"soundness"},{"compiler":[[28,19]],"remove-preprocessing":[[]],"time":12.078857421875,"type":"end"}]
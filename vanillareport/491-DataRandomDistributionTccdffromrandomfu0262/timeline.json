[{"compiler":[[10,6]],"method":["search"],"sampling":[[12,0.7658531109336764,0.15024379501119256,0.08390309405513108],[11,0.7512189750559628,0.1775608486495912,0.07122017629444599],[10,0.6595117235556245,0.28878028132021427,0.05170799512416124],[9,0.6321946699172258,0.33560951612889767,0.032195813953876495],[8,0.45268260315060616,0.5307313278317451,0.016586069017648697],[7,0.40585336834192276,0.5931703075766563,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":32.55810546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",14.109130859375,432],["body",256,"valid",271.4296875,8256]],"time":293.3369140625,"type":"sample"},{"compiler":[[9,5]],"egraph":[[0,2,2,1.334e-6],[3,22,20,0.000183583],[2,18,20,0.000136],[1,13,20,8.850000000000001e-5],[0,9,20,4.5583e-5]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y y))","(/.f64 (+.f64 y x) (+.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y y))","(/.f64 (+.f64 y x) (+.f64 x x))","(/.f64 (+.f64 x y) (+.f64 x x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.77392578125,"type":"preprocess"},{"count":[[1,1]],"egraph":[[3,14,10,0.00013770900000000002],[2,12,10,0.00010304200000000001],[1,9,10,6.804200000000001e-5],[0,6,10,3.5667e-5]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) (+.f64 y y))"]],"stop":[["saturated",1]],"time":10.343017578125,"type":"simplify"},{"compiler":[[9,5]],"time":0.18701171875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (+.f64 y y))","next",0.015625]],"compiler":[[9,5],[9,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.6630859375,"type":"prune"},{"compiler":[[17,5]],"locations":[["(/.f64 (+.f64 x y) (+.f64 y y))",0.015625,true]],"time":3.52783203125,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 x y) (+.f64 y y))","y","-inf",0.364013671875],["(/.f64 (+.f64 x y) (+.f64 y y))","y","inf",0.715087890625],["(/.f64 (+.f64 x y) (+.f64 y y))","y","0",0.467041015625],["(/.f64 (+.f64 x y) (+.f64 y y))","x","-inf",0.3759765625],["(/.f64 (+.f64 x y) (+.f64 y y))","x","inf",0.47802734375],["(/.f64 (+.f64 x y) (+.f64 y y))","x","0",0.467041015625]],"time":2.945068359375,"type":"series"},{"count":[[1,33]],"egraph":[[2,2378,10,0.019174417],[1,142,10,0.002953792],[0,6,10,0.00015725]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (+.f64 x y) (/.f64 0 0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (*.f64 (+.f64 x y) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (/.f64 0 0)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)) (pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (+.f64 x y)) (/.f64 0 0)) (*.f64 (sqrt.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x y)) (*.f64 (sqrt.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1) (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x y)) 1) (*.f64 (sqrt.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 0 0)) (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 2) (/.f64 (cbrt.f64 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x y)) 2) (/.f64 (sqrt.f64 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (*.f64 2 (pow.f64 y 3))) (fma.f64 y y 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) 0) 0)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) (/.f64 0 0)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) (/.f64 0 0)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 0 0)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (+.f64 x y)) (/.f64 0 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (/.f64 y (+.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x y) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x y)) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (/.f64 0 0)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 3) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x y) (/.f64 0 0))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x y) (/.f64 0 0))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x y) (/.f64 0 0))))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":36.64208984375,"type":"rewrite"},{"count":[[57,38]],"egraph":[[5,33,168,0.00048162399999999994],[4,32,168,0.00038704099999999997],[3,28,168,0.000302708],[2,20,168,0.00020333299999999999],[1,11,168,0.000121999],[0,7,204,5.3666e-5]],"inputs":[["1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 x (/.f64 y 1/2))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 x (/.f64 y 1/2))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 x (/.f64 y 1/2))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 1/2 (/.f64 x y) 1/2)"]],"stop":[["saturated",1]],"time":13.212890625,"type":"simplify"},{"compiler":[[401,236]],"time":5.0390625,"type":"eval"},{"alts":[["(fma.f64 1/2 (/.f64 x y) 1/2)","next",0]],"compiler":[[8,6],[8,6]],"count":[[39,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[38,1],"picked":[1,0]}],"min-error":[0],"time":3.802001953125,"type":"prune"},{"compiler":[[14,7]],"time":3.25390625,"type":"localize"},{"compiler":[[2,2]],"time":0.0849609375,"type":"eval"},{"alts":[["(fma.f64 1/2 (/.f64 x y) 1/2)","done",0]],"compiler":[[8,6]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.5,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(/.f64 (+.f64 x y) (+.f64 y y))",0,1]],"compiler":[[3,2],[3,2],[9,5],[15,9]],"count":[[2,1]],"inputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)","(/.f64 (+.f64 x y) (+.f64 y y))"]],"link":["."],"name":["Data.Random.Distribution.T:$ccdf from random-fu-0.2.6.2"],"oracle":[0.015625],"outputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)"]],"time":7.466064453125,"times":[["x",2.373046875],["y",2.376953125],["(/.f64 (+.f64 x y) (+.f64 y y))",2.2158203125]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[0,6,8,1.2834e-5]],"inputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 1/2 (/.f64 x y) 1/2)"]],"stop":[["done",1],["saturated",1]],"time":8.110107421875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.801025390625,"type":"end"}]
[{"compiler":[[13,12]],"method":["search"],"sampling":[[1,0.9990236759185791,0.0,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":0.180908203125,"type":"analyze"},{"outcomes":[["body",512,"valid",90.015625,1040],["body",1024,"valid",311.754150390625,2060],["body",256,"valid",198.7060546875,4933],["body",2048,"valid",42.744384765625,223]],"time":650.943115234375,"type":"sample"},{"compiler":[[12,11]],"egraph":[[0,2,2,1.75e-6],[9,6401,30,0.031944792],[8,4976,30,0.020388917],[7,1912,30,0.012011875],[6,599,30,0.004632958],[5,226,30,0.0018630830000000002],[4,103,30,0.0009162490000000001],[3,58,30,0.000514541],[2,41,30,0.000293416],[1,29,30,0.000169708],[0,16,30,8.4416e-5]],"inputs":[["0","1"],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 y)))) 1)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 y)))) 1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) y))) -1)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":55.512939453125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,7165,15,0.031859417],[9,4196,15,0.022238709000000002],[8,2582,15,0.013040459],[7,1000,15,0.006431334],[6,325,15,0.0025742919999999997],[5,124,15,0.0011095419999999998],[4,59,15,0.0005712919999999999],[3,34,15,0.000332375],[2,25,15,0.000199084],[1,19,15,0.000117293],[0,10,15,6.0209e-5]],"inputs":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (/.f64 x -1/2)))) -1)"]],"stop":[["node limit",1]],"time":43.06396484375,"type":"simplify"},{"compiler":[[22,20]],"time":0.4580078125,"type":"eval"},{"alts":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","next",27.720908701775]],"compiler":[[12,11],[12,11]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[27.720908701775],"time":0.928955078125,"type":"prune"},{"compiler":[[37,31]],"locations":[["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",0.01171875,true],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)",2.4566261596699297,true]],"time":9.59912109375,"type":"localize"},{"count":[[2,16]],"series":[["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))","x","-inf",0.39599609375],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))","x","inf",0.403076171875],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))","x","0",0.205078125],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","x","-inf",0.591064453125],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","x","inf",0.7041015625],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","x","0",0.54296875]],"time":2.930908203125,"type":"series"},{"count":[[2,102]],"egraph":[[2,2720,27,0.024187833],[1,217,27,0.0036799579999999997],[0,10,27,0.000342375]],"inputs":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))) (log.f64 (sqrt.f64 (exp.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) (cbrt.f64 (pow.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 2)) (cbrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) (sqrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3) -1) (/.f64 1 (+.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) 1) (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) -1) (/.f64 1 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) 1) (-.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) 1) (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) (fma.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3) -1) (+.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) 1) (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3) -1) (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) (-.f64 1 (*.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) -1) (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3) -1)) (neg.f64 (+.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) 1) (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) -1)) (neg.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) 1) (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) (fma.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) (fma.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2) -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))) 2)) (cbrt.f64 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))) (sqrt.f64 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (/.f64 1 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 (/.f64 1 (+.f64 1 (pow.f64 (exp.f64 x) -2))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (/.f64 1 (+.f64 -1 (neg.f64 (pow.f64 (exp.f64 x) -2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) (cbrt.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2))) (cbrt.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2))) (*.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) (*.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (exp.f64 x) -2))) 2 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -6))) (fma.f64 (pow.f64 (exp.f64 x) -2) (expm1.f64 (*.f64 -2 x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 2 (-.f64 1 (pow.f64 (exp.f64 x) -4))) (-.f64 1 (pow.f64 (exp.f64 x) -2)) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (/.f64 1 (+.f64 1 (pow.f64 (exp.f64 x) -2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 1 (+.f64 -1 (neg.f64 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) (cbrt.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2))) (cbrt.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2))) (*.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) (*.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 (pow.f64 (exp.f64 x) -2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -6))) (fma.f64 (pow.f64 (exp.f64 x) -2) (expm1.f64 (*.f64 -2 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (-.f64 1 (pow.f64 (exp.f64 x) -4))) (-.f64 1 (pow.f64 (exp.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 2) (hypot.f64 1 (pow.f64 (exp.f64 x) -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) 1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (expm1.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) 1/2) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 2)) (cbrt.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))) (sqrt.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 8 (pow.f64 (+.f64 1 (pow.f64 (exp.f64 x) -2)) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log1p.f64 (pow.f64 (exp.f64 x) -2)) (log.f64 1/2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 1) (log1p.f64 (pow.f64 (exp.f64 x) -2))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2)))) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))) 2) (cbrt.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))) (sqrt.f64 (+.f64 1 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))))) -1)))))"]],"rules":[["egg-rr",46],["egg-rr",56]],"stop":[["node limit",1]],"time":48.4970703125,"type":"rewrite"},{"count":[[118,118]],"egraph":[[9,7459,200,0.044351665],[8,6311,200,0.033826415],[7,3954,200,0.023079873],[6,2496,200,0.013770332],[5,1647,200,0.008559582],[4,792,200,0.0049261240000000005],[3,444,200,0.002492124],[2,178,200,0.0012339579999999998],[1,85,200,0.0005247909999999999],[0,32,200,0.000181375]],"inputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x))","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(fma.f64 -1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 -17/315 (pow.f64 x 7) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 -17/315 (pow.f64 x 7) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) (fma.f64 -17/315 (pow.f64 x 7) x)))","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","(-.f64 (*.f64 2 (/.f64 1 (+.f64 1 (exp.f64 (*.f64 -2 x))))) 1)","(+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 x -2)))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 x) -2))) -1)","(+.f64 (/.f64 2 (+.f64 1 (pow.f64 (exp.f64 -2) x))) -1)","1","(+.f64 1 x)","(+.f64 x 1)","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x))","(+.f64 (fma.f64 -1/3 (pow.f64 x 3) x) 1)","(+.f64 x (fma.f64 -1/3 (pow.f64 x 3) 1))","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5)))))","(+.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 1)","(+.f64 (fma.f64 -1/3 (pow.f64 x 3) x) (fma.f64 2/15 (pow.f64 x 5) 1))"]],"stop":[["node limit",1]],"time":59.886962890625,"type":"simplify"},{"compiler":[[1920,1591]],"time":27.907958984375,"type":"eval"},{"alts":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","done",27.720908701775],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","next",33.38529000712595]],"compiler":[[12,11],[13,10],[13,10]],"count":[[119,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[118,1],"picked":[1,1]}],"min-error":[0],"time":21.20703125,"type":"prune"},{"compiler":[[30,22]],"locations":[["(fma.f64 2/15 (pow.f64 x 5) x)",0.0078125,true],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))",19.316325747378034,true]],"time":8.903076171875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 2/15 (pow.f64 x 5) x)","x","-inf",0.39501953125],["(fma.f64 2/15 (pow.f64 x 5) x)","x","inf",0.384033203125],["(fma.f64 2/15 (pow.f64 x 5) x)","x","0",0.256103515625],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","x","-inf",0.47705078125],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","x","inf",0.48193359375],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","x","0",0.702880859375]],"time":2.7880859375,"type":"series"},{"count":[[2,43]],"egraph":[[2,2260,23,0.020566959000000003],[1,218,23,0.003725417],[0,10,23,0.000423417]],"inputs":[["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/15 (pow.f64 x 5) x) (*.f64 -1/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/3 (pow.f64 x 3)) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/3 (pow.f64 x 3)) 1) (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5))) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) (pow.f64 (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) 2) (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) (sqrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -1/3 (pow.f64 x 3)) 3) (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 3)) (+.f64 (*.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -1/3 (pow.f64 x 3))) (-.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2) (*.f64 (*.f64 -1/3 (pow.f64 x 3)) (fma.f64 2/15 (pow.f64 x 5) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -1/3 (pow.f64 x 3))) (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2)) (-.f64 (*.f64 -1/3 (pow.f64 x 3)) (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 2/15 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/15 (pow.f64 x 5)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/15 (pow.f64 x 5)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 2/15 (pow.f64 x 5) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2/15 (pow.f64 x 5) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 2/15 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (pow.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) 2) (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) (sqrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 2/15 (pow.f64 x 5)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 2/15 (pow.f64 x 5)) (*.f64 2/15 (pow.f64 x 5))) (-.f64 (*.f64 x x) (*.f64 (*.f64 2/15 (pow.f64 x 5)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 2/15 (pow.f64 x 5)) (*.f64 2/15 (pow.f64 x 5))) (*.f64 x x)) (-.f64 (*.f64 2/15 (pow.f64 x 5)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 2/15 (pow.f64 x 5) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 2/15 (pow.f64 x 5) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 2/15 (pow.f64 x 5) x)))))))"]],"rules":[["egg-rr",21],["egg-rr",22]],"stop":[["node limit",1]],"time":41.076904296875,"type":"rewrite"},{"count":[[67,53]],"egraph":[[20,7248,228,0.101266249],[19,7088,228,0.087439999],[18,6766,228,0.078336083],[17,6362,228,0.069406875],[16,5868,228,0.06082070800000001],[15,5358,228,0.05321416600000001],[14,4424,228,0.04554662500000001],[13,3670,228,0.037228041],[12,3072,228,0.030172833],[11,2616,228,0.024191666],[10,2286,228,0.019310958],[9,2073,228,0.015129166],[8,1911,228,0.011862333],[7,1803,228,0.009052125],[6,1157,228,0.0062305],[5,765,228,0.004015042],[4,301,228,0.0022928749999999998],[3,160,228,0.001156833],[2,75,228,0.0006323749999999999],[1,41,228,0.000318458],[0,16,228,0.000123917]],"inputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","x","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(fma.f64 -1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x))","(*.f64 2/15 (pow.f64 x 5))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 x (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 2/15 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x))","x","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 (*.f64 2/15 (pow.f64 x 5)) x)","(fma.f64 2/15 (pow.f64 x 5) x)","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(*.f64 2/15 (pow.f64 x 5))","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)","(+.f64 x (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 2/15 (pow.f64 x 5) x)"]],"stop":[["node limit",1]],"time":121.093994140625,"type":"simplify"},{"compiler":[[827,639]],"time":12.406005859375,"type":"eval"},{"alts":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","done",27.720908701775],["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","done",33.38529000712595]],"compiler":[[12,11],[13,10]],"count":[[55,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[53,0],"picked":[1,1]}],"min-error":[0],"time":7.248046875,"type":"prune"},{"accuracy":[0],"baseline":[27.720908701775],"branch":[["x",0,3],["y",20.73410130624487,9],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)",0,3],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",0,3],["(+.f64 1 (exp.f64 (*.f64 -2 x)))",0,3],["(exp.f64 (*.f64 -2 x))",0,3],["(*.f64 -2 x)",0,3]],"compiler":[[3,2],[3,2],[12,11],[10,9],[8,7],[6,5],[5,4],[23,19]],"count":[[2,3]],"inputs":[["(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)"]],"link":["."],"name":["Logistic function from Lakshay Garg"],"oracle":[61.1061987089009],"outputs":[["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)"]],"time":54.467041015625,"times":[["x",7.632080078125],["y",21.450927734375],["(-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)",4.31201171875],["(/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x))))",4.248046875],["(+.f64 1 (exp.f64 (*.f64 -2 x)))",4.112060546875],["(exp.f64 (*.f64 -2 x))",4.231201171875],["(*.f64 -2 x)",7.608154296875]],"type":"regimes"},{"bstep":[[0.00019563268756774205,14.429106844547825,0.031005859375],[-1778798.6917585193,-0.0013626466248336448,0.08984375]],"compiler":[[12,11],[5,4]],"method":["left-value","left-value"],"time":0.2099609375,"type":"bsearch"},{"compiler":[[45,38]],"egraph":[[2,33,63,0.000130958],[1,32,63,9.4374e-5],[0,25,63,5.5666e-5]],"inputs":[["(if (<=.f64 (*.f64 -2 x) -1000000) (-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1) (if (<=.f64 (*.f64 -2 x) 7378697629483821/36893488147419103232) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) (-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 -2 x) -1000000) (-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1) (if (<=.f64 (*.f64 -2 x) 7378697629483821/36893488147419103232) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) (-.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) 1)))","(if (<=.f64 (*.f64 -2 x) -1000000) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1) (if (<=.f64 (*.f64 -2 x) 7378697629483821/36893488147419103232) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)) (+.f64 (/.f64 2 (+.f64 1 (exp.f64 (*.f64 -2 x)))) -1)))"]],"stop":[["done",1],["saturated",1]],"time":9.06591796875,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[45,38]],"remove-preprocessing":[[]],"time":19.30712890625,"type":"end"}]
[{"compiler":[[19,16]],"method":["search"],"sampling":[[12,0.17951206676661968,0.10780480096582323,0.7126831322675571],[11,0.17951206676661968,0.12195113231427968,0.6985368009191006],[10,0.17170719429850578,0.15024379501119256,0.6780490106903017],[9,0.17170719429850578,0.17560963053256273,0.6526831751689315],[8,0.15609744936227798,0.22634130157530308,0.6175612490624189],[7,0.15609744936227798,0.2653656639158726,0.5785368867218494],[6,0.12487795948982239,0.34341438859701157,0.531707651913166],[5,0.12487795948982239,0.37463387846946716,0.5004881620407104],[4,0.0,0.49951183795928955,0.5004881620407104],[3,0.0,0.49951183795928955,0.5004881620407104],[2,0.0,0.49951183795928955,0.5004881620407104],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":53.81298828125,"type":"analyze"},{"outcomes":[["body",512,"invalid",107.71728515625,697],["body",256,"invalid",157.271240234375,2367],["body",1024,"invalid",374.08544921875,1417],["body",256,"valid",639.4638671875,8256]],"time":1289.849853515625,"type":"sample"},{"compiler":[[18,15]],"egraph":[[0,2,2,1.875e-6],[7,7381,40,0.029609791999999996],[6,4249,40,0.020982624999999998],[5,1887,40,0.011409625],[4,670,44,0.004885333],[3,257,44,0.001864416],[2,119,44,0.0007355829999999999],[1,52,44,0.000310083],[0,21,50,0.00010825]],"inputs":[["0","1"],["(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))","(*.f64 (/.f64 1 (sqrt.f64 n)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) k) (/.f64 (-.f64 1 n) 2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))","(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (-.f64 1/2 (/.f64 k 2))))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (-.f64 1/2 (/.f64 k 2))) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (/.f64 (-.f64 1 k) 2)) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (+.f64 1/2 (/.f64 k -2))) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (+.f64 1/2 (*.f64 -1/2 k))) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","(*.f64 (/.f64 1 (sqrt.f64 n)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) k) (/.f64 (-.f64 1 n) 2)))","(*.f64 (/.f64 1 (sqrt.f64 n)) (pow.f64 (*.f64 2 (*.f64 (PI.f64) k)) (-.f64 1/2 (/.f64 n 2))))","(/.f64 (pow.f64 (*.f64 k (*.f64 2 (PI.f64))) (/.f64 (-.f64 1 n) 2)) (sqrt.f64 n))","(/.f64 (pow.f64 (*.f64 k (*.f64 2 (PI.f64))) (+.f64 1/2 (/.f64 n -2))) (sqrt.f64 n))","(/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 k 2)) (+.f64 1/2 (*.f64 -1/2 n))) (sqrt.f64 n))","(/.f64 (pow.f64 (*.f64 k (*.f64 2 (PI.f64))) (fma.f64 -1/2 n 1/2)) (sqrt.f64 n))","(/.f64 (pow.f64 (*.f64 k (*.f64 2 (PI.f64))) (fma.f64 n -1/2 1/2)) (sqrt.f64 n))","(/.f64 (pow.f64 (*.f64 2 (*.f64 k (PI.f64))) (fma.f64 n -1/2 1/2)) (sqrt.f64 n))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":53.865966796875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[7,5663,20,0.022879417000000003],[6,2213,20,0.014408667000000002],[5,983,20,0.006283500000000001],[4,360,22,0.0027413330000000003],[3,141,22,0.001116208],[2,68,22,0.00046687500000000006],[1,32,22,0.000209833],[0,14,25,8.125e-5]],"inputs":[["(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))","(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (-.f64 1/2 (/.f64 k 2))))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (-.f64 1/2 (/.f64 k 2))) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (+.f64 1/2 (/.f64 k -2))) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (+.f64 1/2 (*.f64 -1/2 k))) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 k))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))"]],"stop":[["node limit",1]],"time":33.8720703125,"type":"simplify"},{"compiler":[[31,23]],"time":0.533935546875,"type":"eval"},{"alts":[["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","next",0.3571635937289185],["(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))","fresh",0.39972133966101653]],"compiler":[[15,12],[18,15],[15,12],[18,15]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.2855935621082647],"time":1.6259765625,"type":"prune"},{"compiler":[[45,26]],"locations":[["(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))",0.17805980134525137,true],["(*.f64 (PI.f64) n)",0.22265625,true],["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))",0.25390625,true]],"time":14.510009765625,"type":"localize"},{"count":[[3,48]],"series":[["(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))","k","-inf",0.179931640625],["(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))","k","inf",0.157958984375],["(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))","k","0",0.429931640625],["(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))","n","-inf",0.184814453125],["(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))","n","inf",0.20703125],["(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))","n","0",0.174072265625],["(*.f64 (PI.f64) n)","n","-inf",0.27294921875],["(*.f64 (PI.f64) n)","n","inf",0.143798828125],["(*.f64 (PI.f64) n)","n","0",0.14111328125],["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","k","-inf",0.805908203125],["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","k","inf",0.613037109375],["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","k","0",1.7421875],["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","n","-inf",11.369873046875],["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","n","inf",6.4189453125],["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","n","0",16.349853515625]],"time":39.43603515625,"type":"series"},{"count":[[3,87]],"egraph":[[2,3305,40,0.027721167],[1,274,40,0.00466025],[0,13,40,0.000398833]],"inputs":[["(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","(*.f64 (PI.f64) n)","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 2) (*.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))) k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))) k)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) (sqrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) (*.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (/.f64 1 (neg.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (*.f64 (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 2) 1) (/.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 1) (/.f64 (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (pow.f64 k 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 2) (cbrt.f64 k)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (cbrt.f64 k)) (/.f64 (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (pow.f64 k 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (pow.f64 k 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 k -1/4) (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 2) (pow.f64 k 1/4)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) (pow.f64 k 1/4)) (/.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))) k) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 k) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) 3) (fma.f64 k -1/2 1/2)) (pow.f64 k 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sqrt.f64 k) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (neg.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))) k))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) 3) (fma.f64 k -1/2 1/2)) (pow.f64 k 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (PI.f64) n))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) n)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) n))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) n))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (PI.f64) n))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) n) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) n) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) n) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) n)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) n)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) n) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (PI.f64)) n))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (PI.f64) n))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) n) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (PI.f64) n)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (PI.f64) n)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (PI.f64) n)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) n)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (pow.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) 2) (cbrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (pow.f64 2 (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))) (sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (fma.f64 k -1/2 1/2)) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (*.f64 2 (fma.f64 k -1/2 1/2))) (pow.f64 (cbrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (fma.f64 k -1/2 1/2)) (pow.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 2 (PI.f64)) (fma.f64 k -1/2 1/2)) (pow.f64 n (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)) (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 (*.f64 k -1/2) 1)) (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (exp.f64 (log1p.f64 (fma.f64 k -1/2 1/2)))) (*.f64 n (*.f64 2 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) 3) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 k -1/2 1/2) (log.f64 (*.f64 n (*.f64 2 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (fma.f64 k -1/2 1/2) (log.f64 (*.f64 n (*.f64 2 (PI.f64))))) 1))))))"]],"rules":[["egg-rr",27],["egg-rr",17],["egg-rr",43]],"stop":[["node limit",1]],"time":53.512939453125,"type":"rewrite"},{"count":[[135,108]],"egraph":[[4,6905,842,0.032234749],[3,3622,842,0.016745374],[2,643,901,0.0056785410000000005],[1,204,1024,0.001402249],[0,73,1106,0.000402208]],"inputs":[["(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(*.f64 n (PI.f64))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64)))))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (+.f64 (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 3) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 3))) (sqrt.f64 (*.f64 n (PI.f64))))))))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64)))))))","(*.f64 (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2)) (sqrt.f64 (/.f64 1 k)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n)))))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2)))","(*.f64 (sqrt.f64 (/.f64 1 k)) (pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2)))","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(*.f64 n (PI.f64))","(*.f64 (PI.f64) n)","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (log.f64 n) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 n))) (log.f64 (*.f64 2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2))))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n))))","(pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2))))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n))))","(pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2))))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n))))","(pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2))","(exp.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 k)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 (*.f64 -2 (PI.f64))))))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (fma.f64 -1 (log.f64 (/.f64 -1 n)) (log.f64 (*.f64 (PI.f64) -2))))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (-.f64 (log.f64 (*.f64 (PI.f64) -2)) (log.f64 (/.f64 -1 n))))","(pow.f64 (*.f64 -2 (/.f64 (PI.f64) (/.f64 -1 n))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 -2 (*.f64 (*.f64 -1 n) (PI.f64))) (fma.f64 -1/2 k 1/2))","(*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 (PI.f64) n)))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 k (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (*.f64 (PI.f64) n)))) (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 (PI.f64) n))))","(*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (+.f64 (sqrt.f64 2) (*.f64 (*.f64 -1/2 (sqrt.f64 2)) (*.f64 k (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))))))","(*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (fma.f64 (*.f64 (*.f64 -1/2 k) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 2) (sqrt.f64 2)))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (fma.f64 (*.f64 (*.f64 -1/2 k) (log.f64 (*.f64 2 (*.f64 n (PI.f64))))) (sqrt.f64 2) (sqrt.f64 2)))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64)))))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 k (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (*.f64 (PI.f64) n)))) (fma.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 (PI.f64) n)) (*.f64 1/8 (*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k k)) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 2))))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 2) (*.f64 k (*.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) (sqrt.f64 (*.f64 (PI.f64) n))))) (*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (+.f64 (sqrt.f64 2) (*.f64 1/8 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 k k) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 2)))))))","(*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))))) (fma.f64 (*.f64 1/8 (*.f64 k (*.f64 k (sqrt.f64 2)))) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 2) (sqrt.f64 2))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (+.f64 (+.f64 1 (*.f64 (*.f64 -1/2 k) (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (*.f64 (*.f64 1/8 (*.f64 k k)) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2)))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (+.f64 (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 3) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 3))) (sqrt.f64 (*.f64 n (PI.f64))))))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 k (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 (*.f64 (PI.f64) n)))) (fma.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 (PI.f64) n)) (fma.f64 1/8 (*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k k)) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 2))) (*.f64 -1/48 (*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 k 3)) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 3)))))))","(+.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (+.f64 (sqrt.f64 2) (*.f64 (*.f64 -1/2 (sqrt.f64 2)) (*.f64 k (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))))) (*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (+.f64 (*.f64 -1/48 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 3) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 3)))) (*.f64 1/8 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 k k) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 2)))))))","(*.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (+.f64 (fma.f64 (*.f64 (*.f64 -1/2 k) (log.f64 (*.f64 2 (*.f64 (PI.f64) n)))) (sqrt.f64 2) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 -1/48 (*.f64 (pow.f64 k 3) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 3))) (*.f64 1/8 (*.f64 (*.f64 k k) (pow.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) n))) 2)))))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2) (+.f64 (*.f64 1/8 (*.f64 k k)) (*.f64 -1/48 (*.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) (pow.f64 k 3))))) (*.f64 (*.f64 -1/2 k) (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 k -1/2 1/2))","(pow.f64 (exp.f64 (fma.f64 k -1/2 1/2)) (+.f64 (log.f64 (*.f64 2 (PI.f64))) (log.f64 n)))","(pow.f64 (exp.f64 (fma.f64 -1/2 k 1/2)) (log.f64 (*.f64 2 (*.f64 (PI.f64) n))))","(pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 -1/2 k 1/2))","(pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (fma.f64 -1/2 k 1/2))"]],"stop":[["node limit",1]],"time":58.614013671875,"type":"simplify"},{"compiler":[[2221,1487]],"time":27.1201171875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","next",0.2578125],["(*.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2))","fresh",0.3558138618120567],["(/.f64 (pow.f64 (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) n)) 3)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","fresh",0.49769672375533264],["(sqrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))) k))","fresh",9.235249808382429],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2) (+.f64 (*.f64 1/8 (*.f64 k k)) (*.f64 -1/48 (*.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) (pow.f64 k 3))))) (*.f64 (*.f64 -1/2 k) (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))) (sqrt.f64 k))","fresh",21.811751522789685],["(*.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) (*.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2)))","fresh",0.4372851618149906],["(*.f64 (/.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))","fresh",0.4310751592008345]],"compiler":[[21,16],[16,13],[18,15],[17,14],[54,39],[21,17],[22,18],[21,16],[16,13],[18,15],[17,14],[54,39],[21,17],[22,18]],"count":[[110,7]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[108,7],"picked":[1,0]}],"min-error":[0.0078125],"time":25.75390625,"type":"prune"},{"compiler":[[70,46]],"locations":[["(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))",0.01171875,true],["(sqrt.f64 (*.f64 n (*.f64 2 (PI.f64))))",0.1015625,true],["(*.f64 n (*.f64 2 (PI.f64)))",0.22265625,true],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))",0.25390625,true]],"time":17.822998046875,"type":"localize"},{"count":[[4,24]],"series":[["(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))","k","-inf",0.470947265625],["(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))","k","inf",0.761962890625],["(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))","k","0",0.344970703125],["(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))","n","-inf",0.674072265625],["(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))","n","inf",0.69384765625],["(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))","n","0",0.6328125],["(sqrt.f64 (*.f64 n (*.f64 2 (PI.f64))))","n","-inf",0.425048828125],["(sqrt.f64 (*.f64 n (*.f64 2 (PI.f64))))","n","inf",0.35205078125],["(sqrt.f64 (*.f64 n (*.f64 2 (PI.f64))))","n","0",0.486083984375],["(*.f64 n (*.f64 2 (PI.f64)))","n","-inf",0.14697265625],["(*.f64 n (*.f64 2 (PI.f64)))","n","inf",0.1728515625],["(*.f64 n (*.f64 2 (PI.f64)))","n","0",0.153076171875],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","k","-inf",1.6259765625],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","k","inf",1.35595703125],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","k","0",1.660888671875],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","n","-inf",1.086181640625],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","n","inf",1.099853515625],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","n","0",1.660888671875]],"time":14.083984375,"type":"series"},{"count":[[4,121]],"egraph":[[2,3808,53,0.030418959],[1,298,57,0.005336376],[0,14,75,0.000389417]],"inputs":[["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","(*.f64 n (*.f64 2 (PI.f64)))","(sqrt.f64 (*.f64 n (*.f64 2 (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (/.f64 1 (/.f64 (sqrt.f64 k) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) (cbrt.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 2) k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 2) k)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 2) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) (sqrt.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (*.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (/.f64 1 (neg.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) 1) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (sqrt.f64 k)) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 2) 1) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 1) (/.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 k)) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 2) (cbrt.f64 k)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (cbrt.f64 k)) (/.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k 1/4)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (pow.f64 k 1/4)) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 k 1/4)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 2) (pow.f64 k 1/4)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 2) k) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 k) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 3) (pow.f64 k 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sqrt.f64 k) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (neg.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 2) k))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 3) (pow.f64 k 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (PI.f64) (*.f64 n 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 2) (PI.f64)) n)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 2) (PI.f64)) n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 2) (PI.f64)) n))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 2) (PI.f64)) n))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 n 3) (pow.f64 (*.f64 2 (PI.f64)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 2 (PI.f64)) 3) (pow.f64 n 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 2) (PI.f64)) n))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 n 3) (pow.f64 (*.f64 2 (PI.f64)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 2 (PI.f64)) 3) (pow.f64 n 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2 (PI.f64))) (sqrt.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 n) (sqrt.f64 (*.f64 2 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/4) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 n 2)) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (+.f64 1/2 (*.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3/2) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) 3) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3/2) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) 3) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 k -1/2 1/2) (log.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (fma.f64 k -1/2 1/2) (log.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 1))))))"]],"rules":[["egg-rr",23],["egg-rr",28],["egg-rr",21],["egg-rr",49]],"stop":[["node limit",1]],"time":59.111083984375,"type":"rewrite"},{"count":[[145,132]],"egraph":[[6,7276,495,0.045581457],[5,5818,495,0.032736082],[4,4213,495,0.021285791],[3,2675,502,0.010906041],[2,410,513,0.003979375],[1,123,572,0.0008920830000000001],[0,41,598,0.000234042]],"inputs":[["(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64)))))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (+.f64 (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 3) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 3))) (sqrt.f64 (*.f64 n (PI.f64))))))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 n))","(*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))) (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (*.f64 k (*.f64 (log.f64 (*.f64 (PI.f64) (*.f64 2 n))) -1/2)) (sqrt.f64 2))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (fma.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 2) (sqrt.f64 2)))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (fma.f64 (*.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) (*.f64 -1/2 k)) (sqrt.f64 2) (sqrt.f64 2)))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64)))))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))) (fma.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 1/8 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 (*.f64 k k) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2)) (sqrt.f64 (*.f64 n (PI.f64))))))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 1/8 (*.f64 (sqrt.f64 2) (*.f64 k (*.f64 k (pow.f64 (log.f64 (*.f64 (PI.f64) (*.f64 2 n))) 2))))))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (*.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) (*.f64 -1/2 (*.f64 (sqrt.f64 2) k))) (fma.f64 (*.f64 (sqrt.f64 2) 1/8) (*.f64 k (*.f64 k (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 2))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 1/8 k) (*.f64 k (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (+.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) 1))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (*.f64 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))) (+.f64 (*.f64 1/8 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) -1/2)))))","(+.f64 (*.f64 -1/2 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 (*.f64 n (PI.f64))))) (+.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (+.f64 (*.f64 1/8 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 2) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 3) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 3))) (sqrt.f64 (*.f64 n (PI.f64))))))))","(fma.f64 -1/2 (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))) (fma.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64))) (fma.f64 1/8 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 (*.f64 k k) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2)) (sqrt.f64 (*.f64 n (PI.f64))))) (*.f64 -1/48 (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 k 3) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 3))))))))","(+.f64 (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (*.f64 k (*.f64 (log.f64 (*.f64 (PI.f64) (*.f64 2 n))) -1/2)) (sqrt.f64 2)))) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (*.f64 1/8 (*.f64 (sqrt.f64 2) (*.f64 k (*.f64 k (pow.f64 (log.f64 (*.f64 (PI.f64) (*.f64 2 n))) 2))))) (*.f64 -1/48 (*.f64 (pow.f64 (log.f64 (*.f64 (PI.f64) (*.f64 2 n))) 3) (*.f64 (sqrt.f64 2) (pow.f64 k 3)))))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (fma.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (sqrt.f64 2) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 1/8 k) (*.f64 k (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2))) (*.f64 (*.f64 -1/48 (pow.f64 k 3)) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 3))))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) (*.f64 (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2) (+.f64 (*.f64 -1/48 (*.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) (pow.f64 k 3))) (*.f64 1/8 (*.f64 k k))))))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 -1/48 (pow.f64 k 3)) (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 3)) (*.f64 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))) (+.f64 (*.f64 1/8 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))) -1/2))))))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))","(*.f64 (*.f64 (sqrt.f64 2) (exp.f64 (*.f64 -1/2 (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64)))))))) (sqrt.f64 (*.f64 n (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (*.f64 (sqrt.f64 2) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (exp.f64 -1/2) (*.f64 k (log.f64 (*.f64 (PI.f64) (*.f64 2 n)))))))","(*.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k))))","(*.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 (*.f64 n (PI.f64)))) (pow.f64 (*.f64 2 (*.f64 n (PI.f64))) (*.f64 -1/2 k)))"]],"stop":[["node limit",1]],"time":65.569091796875,"type":"simplify"},{"compiler":[[3459,2347]],"time":41.054931640625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 (sqrt.f64 k))))","fresh",0.3688851074528622],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","next",0.244472509768442],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","fresh",0.3424988281475361],["(*.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) (*.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2)))","fresh",0.4372851618149906],["(*.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 k)) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 (sqrt.f64 k))))","fresh",0.3815613281475362],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","done",0.2578125],["(sqrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))) k))","fresh",9.235249808382429],["(*.f64 (/.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))","fresh",0.4310751592008345]],"compiler":[[25,19],[22,17],[32,25],[21,17],[25,19],[21,16],[17,14],[22,18],[25,19],[22,17],[32,25],[21,17],[25,19],[17,14],[22,18]],"count":[[162,8]],"kept":[{"done":[0,0],"fresh":[6,3],"new":[155,4],"picked":[1,1]}],"min-error":[0],"time":41.593017578125,"type":"prune"},{"compiler":[[66,45]],"locations":[["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))",0.01171875,true],["(sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))",0.1015625,true],["(*.f64 (PI.f64) (*.f64 n 2))",0.22265625,true],["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))",0.34603500976844204,true]],"time":25.177978515625,"type":"localize"},{"count":[[4,12]],"series":[["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","k","-inf",1.02197265625],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","k","inf",0.4658203125],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","k","0",0.881103515625],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","n","-inf",0.406005859375],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","n","inf",0.611083984375],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","n","0",0.77001953125],["(sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))","n","-inf",0.2177734375],["(sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))","n","inf",0.242919921875],["(sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))","n","0",0.22607421875],["(*.f64 (PI.f64) (*.f64 n 2))","n","-inf",0.16796875],["(*.f64 (PI.f64) (*.f64 n 2))","n","inf",0.14013671875],["(*.f64 (PI.f64) (*.f64 n 2))","n","0",0.14306640625],["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))","k","-inf",0.458984375],["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))","k","inf",0.4189453125],["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))","k","0",0.446044921875],["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))","n","-inf",0.52294921875],["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))","n","inf",0.4658203125],["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))","n","0",0.658935546875]],"time":8.5029296875,"type":"series"},{"count":[[4,92]],"egraph":[[2,3622,55,0.028437751],[1,298,57,0.005229834],[0,14,66,0.000392875]],"inputs":[["(*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2))","(*.f64 (PI.f64) (*.f64 n 2))","(sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))","(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (PI.f64) (+.f64 n n)) (pow.f64 k -1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 1/4) (pow.f64 k -1/4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3/2) (pow.f64 (pow.f64 k -1/2) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 k -1/2) 3) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 (PI.f64) (+.f64 n n)) (pow.f64 k -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3/2) (pow.f64 (pow.f64 k -1/2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 k -1/2) 3) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) n) (*.f64 (PI.f64) n))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (PI.f64) (+.f64 n n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 n) 2) (PI.f64))) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 n) 2) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 n) 2) (PI.f64)))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 n) 2) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (PI.f64) (+.f64 n n)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) n) 2) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 (+.f64 n n) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 n n) 3) (pow.f64 (PI.f64) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) n) 2) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 n) 2) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 (+.f64 n n) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 n n) 3) (pow.f64 (PI.f64) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) (+.f64 n n))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 n n)) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) (sqrt.f64 (+.f64 n n)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 1/4) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) n)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) (+.f64 n n))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)) 2) (pow.f64 k -1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))) (pow.f64 k -1/4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)) 3) (pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (*.f64 k -1/2)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (*.f64 k -1/2)) 3) (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)) 2) (pow.f64 k -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 k -1/2)) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)) 3) (pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (*.f64 k -1/2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (*.f64 k -1/2)) 3) (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n))) (pow.f64 k -1/2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 k -1/2) (pow.f64 (*.f64 (PI.f64) (+.f64 n n)) (fma.f64 k -1/2 1/2)))) 1))))))"]],"rules":[["egg-rr",21],["egg-rr",28],["egg-rr",22],["egg-rr",21]],"stop":[["node limit",1]],"time":54.01513671875,"type":"rewrite"},{"count":[[104,93]],"egraph":[[3,19,96,0.000217833],[2,17,96,0.00016075],[1,10,96,0.000101458],[0,6,96,4.8875e-5]],"inputs":[["(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))","(*.f64 2 (*.f64 n (PI.f64)))"]],"stop":[["saturated",1]],"time":11.97998046875,"type":"simplify"},{"compiler":[[2725,1600]],"time":32.5390625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 (sqrt.f64 k))))","fresh",0.3688851074528622],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","done",0.244472509768442],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (sqrt.f64 (*.f64 (*.f64 (PI.f64) (+.f64 n n)) (pow.f64 k -1))))","fresh",9.12890625],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","next",0.3424988281475361],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) (pow.f64 k -1/2)))","fresh",0.35259633791597816],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","done",0.2578125],["(*.f64 (/.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))","fresh",0.4310751592008345]],"compiler":[[25,19],[22,17],[22,16],[32,25],[30,19],[21,16],[22,18],[25,19],[22,16],[32,25],[30,19],[22,18]],"count":[[124,7]],"kept":[{"done":[1,1],"fresh":[6,3],"new":[116,2],"picked":[1,1]}],"min-error":[0],"time":27.868896484375,"type":"prune"},{"compiler":[[141,100]],"locations":[["(*.f64 n (*.f64 2 (PI.f64)))",0.22265625,false],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))",0.25390625,true],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))",0.34765625,true],["(pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)",0.4655075195368841,true]],"time":37.468017578125,"type":"localize"},{"count":[[3,0]],"series":[["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","k","-inf",2.007080078125],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","k","inf",0.73291015625],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","k","0",0.948974609375],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","n","-inf",0.85693359375],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","n","inf",0.77783203125],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","n","0",0.79296875],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))","n","-inf",0.43603515625],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))","n","inf",0.368896484375],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))","n","0",0.451904296875],["(pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)","n","-inf",0.630859375],["(pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)","n","inf",0.489990234375],["(pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)","n","0",0.85205078125]],"time":9.550048828125,"type":"series"},{"count":[[3,87]],"egraph":[[2,4777,52,0.03531425],[1,427,52,0.0069600420000000005],[0,20,54,0.000484875]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)","(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))","(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/6) (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (*.f64 (cbrt.f64 (*.f64 n 2)) (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (PI.f64)) 2) (cbrt.f64 (*.f64 (*.f64 n n) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 (PI.f64))) (cbrt.f64 (*.f64 n 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) n) 2) 4))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (*.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/6) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (/.f64 1 (*.f64 (sqrt.f64 k) (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (pow.f64 k -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1))) (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))) (cbrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)) (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (/.f64 k -4))) (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (/.f64 k -4))) (pow.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))) (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (neg.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))) (/.f64 1 (neg.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 k -1/2) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1) (/.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/6) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) 1) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (sqrt.f64 k)) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1))) 1) (/.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (/.f64 k -4))) 1) (/.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (/.f64 k -4))) (sqrt.f64 k)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 k)) (/.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/6) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 k)) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 k)) (/.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1))) (cbrt.f64 k)) (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (/.f64 k -4))) (cbrt.f64 k)) (/.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2)))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (/.f64 k -4))) (cbrt.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k 1/4)) (/.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) 1/6) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k 1/4)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (pow.f64 k 1/4)) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 k -1/4) (/.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1))) (pow.f64 k 1/4)) (/.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))) (pow.f64 k 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k)) (/.f64 (sqrt.f64 k) (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) 3) (pow.f64 k 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k)) (/.f64 (sqrt.f64 k) (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) (neg.f64 (sqrt.f64 k))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2))) 3) (pow.f64 k 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1)) k))) 1))))))"]],"rules":[["egg-rr",50],["egg-rr",16],["egg-rr",21]],"stop":[["node limit",1]],"time":62.39990234375,"type":"rewrite"},{"count":[[87,87]],"egraph":[[0,0,0,2.0292e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.946044921875,"type":"simplify"},{"compiler":[[3145,2212]],"time":35.212890625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 (sqrt.f64 k))))","fresh",0.3688851074528622],["(*.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1))) 1) (/.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))) (sqrt.f64 k)))","fresh",0.5355263183790943],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (sqrt.f64 (*.f64 (*.f64 (PI.f64) (+.f64 n n)) (pow.f64 k -1))))","fresh",9.12890625],["(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","done",0.3424988281475361],["(*.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (sqrt.f64 k)))","fresh",0.292011279305326],["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) (pow.f64 k -1/2)))","fresh",0.35259633791597816],["(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","done",0.2578125]],"compiler":[[25,19],[41,31],[22,16],[32,25],[23,18],[30,19],[21,16]],"count":[[117,7]],"kept":[{"done":[2,1],"fresh":[4,3],"new":[110,2],"picked":[1,1]}],"min-error":[0],"time":26.16796875,"type":"prune"},{"accuracy":[0.244472509768442],"baseline":[0.244472509768442],"branch":[["k",0.24447250976844204,1],["n",0.24447250976844204,1],["(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))",0.244472509768442,1],["(*.f64 (*.f64 2 (PI.f64)) n)",0.24447250976844204,1]],"compiler":[[3,2],[3,2],[18,15],[7,6],[390,258]],"count":[[17,1]],"inputs":[["(*.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) (*.f64 n 2)) (pow.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) k) -1))) 1) (/.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)))) (sqrt.f64 k)))","(*.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (sqrt.f64 k)))","(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (sqrt.f64 (*.f64 (*.f64 (PI.f64) (+.f64 n n)) (pow.f64 k -1))))","(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) (cbrt.f64 (*.f64 (PI.f64) (+.f64 n n)))) (pow.f64 k -1/2)))","(*.f64 (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 k)) (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 (sqrt.f64 k))))","(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))","(/.f64 (*.f64 (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 (PI.f64) (*.f64 n 2))))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","(*.f64 (/.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (cbrt.f64 k)) (/.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (cbrt.f64 (sqrt.f64 k))))","(/.f64 (*.f64 (sqrt.f64 (*.f64 n (*.f64 2 (PI.f64)))) (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 k -1/2))) (sqrt.f64 k))","(*.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2))","(/.f64 (pow.f64 (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) n)) 3)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","(sqrt.f64 (/.f64 (pow.f64 (*.f64 n (*.f64 2 (PI.f64))) (*.f64 2 (fma.f64 k -1/2 1/2))) k))","(/.f64 (*.f64 (sqrt.f64 (*.f64 n (PI.f64))) (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (pow.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) 2) (+.f64 (*.f64 1/8 (*.f64 k k)) (*.f64 -1/48 (*.f64 (log.f64 (*.f64 2 (*.f64 n (PI.f64)))) (pow.f64 k 3))))) (*.f64 (*.f64 -1/2 k) (log.f64 (*.f64 2 (*.f64 n (PI.f64))))))))) (sqrt.f64 k))","(*.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) (*.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (pow.f64 k -1/2)))","(*.f64 (/.f64 (pow.f64 2 (fma.f64 k -1/2 1/2)) 1) (/.f64 (pow.f64 (*.f64 (PI.f64) n) (fma.f64 k -1/2 1/2)) (sqrt.f64 k)))","(/.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) n)) (fma.f64 k -1/2 1/2)) (sqrt.f64 k))","(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))"]],"link":["."],"name":["Migdal et al, Equation (51)"],"oracle":[31.140948503076206],"outputs":[["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))"]],"time":30.049072265625,"times":[["k",6.413818359375],["n",6.2900390625],["(*.f64 (/.f64 1 (sqrt.f64 k)) (pow.f64 (*.f64 (*.f64 2 (PI.f64)) n) (/.f64 (-.f64 1 k) 2)))",4.194091796875],["(*.f64 (*.f64 2 (PI.f64)) n)",6.525146484375]],"type":"regimes"},{"compiler":[[22,17]],"egraph":[[1,19,32,4.6583e-5],[0,14,32,2.6875e-5]],"inputs":[["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (PI.f64) (*.f64 n 2)) (*.f64 k -1/2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) (*.f64 n 2))) (pow.f64 k -1/2)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.37109375,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[22,17]],"remove-preprocessing":[[]],"time":11.714111328125,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.24878030992113054,0.7502433659974486,0.0009763240814208984],[11,0.2478047008626163,0.7512189750559628,0.0009763240814208984],[10,0.24585348274558783,0.7531701931729913,0.0009763240814208984],[9,0.24195104651153088,0.7570726294070482,0.0009763240814208984],[8,0.23414617404341698,0.7648775018751621,0.0009763240814208984],[7,0.21853642910718918,0.7804872468113899,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":148.612060546875,"type":"analyze"},{"outcomes":[["body",4096,"valid",2.212890625,2],["body",512,"valid",181.115966796875,1474],["body",1024,"valid",834.920654296875,3637],["body",2048,"valid",609.8056640625,1251],["body",256,"valid",110.516845703125,1892]],"time":1747.173828125,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.459e-6],[11,411,22,0.0058237490000000005],[10,407,22,0.004969208],[9,355,22,0.004099458],[8,284,22,0.0030955830000000003],[7,199,22,0.0022027920000000003],[6,141,22,0.001485542],[5,81,22,0.000860417],[4,53,22,0.000513875],[3,38,22,0.000333125],[2,25,22,0.00020404199999999998],[1,17,22,0.000123083],[0,11,22,6.1e-5]],"inputs":[["0","1"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 eps))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 eps))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":28.217041015625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,231,11,0.0035532080000000004],[10,229,11,0.0030569160000000002],[9,203,11,0.0025487500000000002],[8,167,11,0.001961083],[7,123,11,0.0014142500000000001],[6,86,11,0.0009855],[5,48,11,0.0005739170000000001],[4,31,11,0.00034750000000000004],[3,22,11,0.00023262500000000003],[2,15,11,0.000146667],[1,10,11,9.0667e-5],[0,7,11,4.3875e-5]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"stop":[["saturated",1]],"time":14.595947265625,"type":"simplify"},{"compiler":[[9,6]],"time":0.237060546875,"type":"eval"},{"alts":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","next",37.09582113922123]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[37.09582113922123],"time":0.694091796875,"type":"prune"},{"compiler":[[20,6]],"locations":[["(tan.f64 x)",0.2044525390737681,true],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.6763721071844737,true],["(tan.f64 (+.f64 x eps))",5.416395321971812,true]],"time":5.847900390625,"type":"localize"},{"count":[[3,60]],"series":[["(tan.f64 x)","x","-inf",0.141845703125],["(tan.f64 x)","x","inf",0.14599609375],["(tan.f64 x)","x","0",0.27587890625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","eps","-inf",0.218017578125],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","eps","inf",0.80810546875],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","eps","0",0.885009765625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","x","-inf",0.463134765625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","x","inf",0.829833984375],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","x","0",0.64208984375],["(tan.f64 (+.f64 x eps))","eps","-inf",0.458984375],["(tan.f64 (+.f64 x eps))","eps","inf",0.446044921875],["(tan.f64 (+.f64 x eps))","eps","0",0.766845703125],["(tan.f64 (+.f64 x eps))","x","-inf",0.673095703125],["(tan.f64 (+.f64 x eps))","x","inf",0.462890625],["(tan.f64 (+.f64 x eps))","x","0",1.032958984375]],"time":8.52490234375,"type":"series"},{"count":[[3,192]],"egraph":[[2,2619,20,0.023831207],[1,169,20,0.003200666],[0,7,20,0.000182333]],"inputs":[["(tan.f64 (+.f64 x eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (tan.f64 (+.f64 x eps)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 (+.f64 x eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 (+.f64 x eps))))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 (+.f64 x eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 (+.f64 x eps)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2) (cbrt.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (+.f64 x eps)) (pow.f64 (/.f64 1 (cos.f64 (+.f64 x eps))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps)))) 2) 3) (cbrt.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3/2) 1/3) (pow.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3/2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (sqrt.f64 (tan.f64 (+.f64 x eps)))) 1/3) (cbrt.f64 (sqrt.f64 (tan.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (+.f64 x eps))) (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 (+.f64 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (+.f64 (tan.f64 x) (tan.f64 eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 (+.f64 x eps))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 (+.f64 x eps)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (fma.f64 -1 (tan.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (cbrt.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (tan.f64 (+.f64 x eps)) 1 (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (tan.f64 (+.f64 x eps)) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2) (cbrt.f64 (tan.f64 (+.f64 x eps))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 (+.f64 x eps))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2) (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (pow.f64 (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2)) (pow.f64 (/.f64 1 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) 1) (pow.f64 (-.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2) (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))) 1/3) (cbrt.f64 (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))) 2) 3) (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2)) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2))) (neg.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x))) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (neg.f64 (tan.f64 x)) 3)) (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (-.f64 (pow.f64 (neg.f64 (tan.f64 x)) 2) (*.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (neg.f64 (tan.f64 x)) 2)) (-.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (tan.f64 (+.f64 x eps)))) (exp.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (tan.f64 (+.f64 x eps))) (+.f64 1 (expm1.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (tan.f64 (+.f64 x eps)))) (+.f64 1 (expm1.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (tan.f64 (+.f64 x eps)))) (exp.f64 (neg.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (tan.f64 (+.f64 x eps))) (/.f64 1 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (tan.f64 (+.f64 x eps)))) (/.f64 1 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (tan.f64 x))) (exp.f64 (tan.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (tan.f64 x))) (exp.f64 (tan.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (tan.f64 x))) (+.f64 1 (expm1.f64 (tan.f64 (+.f64 x eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (tan.f64 x))) (+.f64 1 (expm1.f64 (tan.f64 (+.f64 x eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 (+.f64 x eps)) 1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 (+.f64 x eps)) 1 (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1 (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1 (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) 1 (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (tan.f64 (+.f64 x eps)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (neg.f64 (cbrt.f64 (tan.f64 x))) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2) (cbrt.f64 (tan.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2) (cbrt.f64 (tan.f64 (+.f64 x eps))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2) (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2) (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 2) (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (tan.f64 x)) (neg.f64 (sqrt.f64 (tan.f64 x))) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 (+.f64 x eps))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (sqrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (tan.f64 x))) 2) (cbrt.f64 (neg.f64 (tan.f64 x))) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (tan.f64 x))) (sqrt.f64 (neg.f64 (tan.f64 x))) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (tan.f64 x))) (sqrt.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (tan.f64 x) (tan.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (tan.f64 (+.f64 x eps))) (sqrt.f64 (tan.f64 x))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (cbrt.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (tan.f64 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 x)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 x)) (sqrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (pow.f64 (/.f64 1 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (tan.f64 x))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (tan.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2) 3) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 x) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 x) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (tan.f64 x) 3/2) 1/3) (pow.f64 (pow.f64 (tan.f64 x) 3/2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 x) 2) (sqrt.f64 (tan.f64 x))) 1/3) (cbrt.f64 (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 x)) 1))))))"]],"rules":[["egg-rr",35],["egg-rr",116],["egg-rr",41]],"stop":[["node limit",1]],"time":55.93603515625,"type":"rewrite"},{"count":[[252,232]],"egraph":[[2,1337,1780,0.013813332000000001],[1,415,1945,0.002823916],[0,140,2032,0.000712791]],"inputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (sin.f64 eps) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (cos.f64 eps)) (+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (+.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2))) (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/6 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 x) (cos.f64 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (sin.f64 eps) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/2 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (sin.f64 x)) (cos.f64 x)) (*.f64 1/6 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))))) (pow.f64 eps 4))) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(fma.f64 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(fma.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 x (fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (sin.f64 eps) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (cos.f64 eps)) (+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (fma.f64 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (*.f64 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 x x)))))","(+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) x (*.f64 (/.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)) (*.f64 (sin.f64 eps) (*.f64 x x)))))","(+.f64 x (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 x x)) (fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x) (+.f64 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 (sin.f64 eps) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2))) (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/6 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(fma.f64 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) x (+.f64 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (*.f64 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 x x)))) (fma.f64 -1 (*.f64 (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))))) (fma.f64 -1/2 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (+.f64 1/6 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) 1/6)))) (pow.f64 x 3)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (-.f64 (fma.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) -1/2 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) 1/6 1/6)) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (pow.f64 x 3))) (fma.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) x (*.f64 (/.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)) (*.f64 (sin.f64 eps) (*.f64 x x)))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 x x)) (fma.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) x (fma.f64 (pow.f64 x 3) (fma.f64 -1 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) -1/3) (*.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 (cos.f64 eps) 2)))) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 eps (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))","(fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 eps (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (/.f64 (cos.f64 x) (*.f64 (sin.f64 x) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))","(+.f64 (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (/.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))","(fma.f64 (/.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 (fma.f64 eps (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (/.f64 (cos.f64 x) (*.f64 (sin.f64 x) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (neg.f64 (*.f64 (pow.f64 eps 3) (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/6 (fma.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2)) (*.f64 -1/2 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(+.f64 (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (sin.f64 x) (cos.f64 x))) (-.f64 (*.f64 (/.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 -1/2 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1/6)))))","(-.f64 (fma.f64 (/.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (sin.f64 x) (cos.f64 x)))) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)))","(+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2)))","(fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 x 2) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps))) (cos.f64 eps)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (*.f64 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 x x)))) (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2))))","(+.f64 (*.f64 (/.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)) (*.f64 (sin.f64 eps) (*.f64 x x))) (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 x x)) (fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (sin.f64 eps) (*.f64 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 x 2))) (cos.f64 eps)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 1/2 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (pow.f64 (cos.f64 eps) 2)))))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (*.f64 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (*.f64 x x)))) (fma.f64 -1 (*.f64 (pow.f64 x 3) (fma.f64 -1/2 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (+.f64 1/2 (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))))))))) (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)))))","(+.f64 (*.f64 (/.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)) (*.f64 (sin.f64 eps) (*.f64 x x))) (-.f64 (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2))) (*.f64 (pow.f64 x 3) (+.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) 1/6) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (fma.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) -1/2 1/2)))))","(fma.f64 (pow.f64 x 3) (neg.f64 (+.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (-.f64 1/6 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 0 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) -1/2)))) (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 x x)) (fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 (-.f64 eps (*.f64 -1 x)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(*.f64 eps (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(+.f64 eps (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))","(+.f64 eps (*.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)))","(fma.f64 eps (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (/.f64 (cos.f64 x) (*.f64 (sin.f64 x) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (/.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))","(fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(+.f64 (fma.f64 eps (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (/.f64 (cos.f64 x) (*.f64 (sin.f64 x) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (neg.f64 (*.f64 (pow.f64 eps 3) (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/6 (fma.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2)) (*.f64 -1/2 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))","(-.f64 (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (/.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 -1/2 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1/6))))","(fma.f64 (pow.f64 eps 3) (+.f64 (neg.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x)))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (sin.f64 x)) (cos.f64 x)) (*.f64 1/6 (/.f64 (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))))) (pow.f64 eps 4))) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))))))","(+.f64 (fma.f64 eps (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (/.f64 (cos.f64 x) (*.f64 (sin.f64 x) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (fma.f64 -1 (*.f64 (fma.f64 -1/2 (/.f64 (sin.f64 x) (/.f64 (cos.f64 x) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (+.f64 (/.f64 (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/6 (fma.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2)) (*.f64 -1/2 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 1/6 (/.f64 (sin.f64 x) (/.f64 (cos.f64 x) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))) (pow.f64 eps 4)) (neg.f64 (*.f64 (pow.f64 eps 3) (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/6 (fma.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2)) (*.f64 -1/2 (-.f64 1 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (fma.f64 -1 (fma.f64 (fma.f64 -1/2 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (fma.f64 1/6 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (/.f64 (+.f64 (fma.f64 -1/2 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1/6)) (cos.f64 x)) (sin.f64 x)))) (pow.f64 eps 4) (*.f64 (pow.f64 eps 3) (+.f64 (fma.f64 -1/2 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (cos.f64 x) 2) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (fma.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1/6)))) (*.f64 (/.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(-.f64 (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x)))) (fma.f64 (fma.f64 (/.f64 (-.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x)) (sin.f64 x) (*.f64 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) -1/3)) (pow.f64 eps 4) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 (-.f64 x (*.f64 -1 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(fma.f64 (pow.f64 x 3) 1/3 x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 17/315 (pow.f64 x 7) (fma.f64 2/15 (pow.f64 x 5) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"stop":[["node limit",1]],"time":42.857177734375,"type":"simplify"},{"compiler":[[5076,2050]],"time":43.348876953125,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","next",20.740304590393702],["(fma.f64 (pow.f64 x 3) (neg.f64 (+.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (-.f64 1/6 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 0 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) -1/2)))) (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 x x)) (fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","fresh",32.32879877946135],["(fma.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))","fresh",37.179059645969296],["(-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (tan.f64 x))","fresh",20.751982450495706],["(pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 3)","fresh",37.2038746151232],["(+.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))","fresh",20.981841957600896],["(fma.f64 (pow.f64 eps 3) (+.f64 (neg.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x)))))","fresh",32.88811698114416],["(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","fresh",32.89202323114416],["(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))","fresh",20.807563644951],["(-.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))))) (tan.f64 x))","fresh",41.305695837213094],["(+.f64 eps (*.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",32.65442155745041],["(-.f64 (*.f64 (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3)) (tan.f64 x))","fresh",53.269693603246346],["(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)))","fresh",41.518451592247914]],"compiler":[[20,12],[81,50],[16,10],[20,12],[12,9],[41,25],[76,50],[103,74],[32,17],[28,16],[15,11],[24,17],[30,15],[20,12],[81,50],[16,10],[20,12],[12,9],[41,25],[76,50],[103,74],[32,17],[28,16],[15,11],[24,17],[30,15]],"count":[[233,13]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[232,13],"picked":[1,0]}],"min-error":[0.22960754005235257],"time":56.10107421875,"type":"prune"},{"compiler":[[56,19]],"locations":[["(tan.f64 x)",0.2044525390737681,false],["(*.f64 (tan.f64 x) (tan.f64 eps))",0.22265625,true],["(tan.f64 eps)",0.2421875,true],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))",3.6509256344457035,true]],"time":11.39404296875,"type":"localize"},{"count":[[3,60]],"series":[["(*.f64 (tan.f64 x) (tan.f64 eps))","eps","-inf",0.160888671875],["(*.f64 (tan.f64 x) (tan.f64 eps))","eps","inf",0.1630859375],["(*.f64 (tan.f64 x) (tan.f64 eps))","eps","0",0.35205078125],["(*.f64 (tan.f64 x) (tan.f64 eps))","x","-inf",0.16796875],["(*.f64 (tan.f64 x) (tan.f64 eps))","x","inf",0.197998046875],["(*.f64 (tan.f64 x) (tan.f64 eps))","x","0",0.361083984375],["(tan.f64 eps)","eps","-inf",0.14501953125],["(tan.f64 eps)","eps","inf",0.14892578125],["(tan.f64 eps)","eps","0",0.27197265625],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","eps","-inf",1.364013671875],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","eps","inf",1.39501953125],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","eps","0",1.666015625],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","x","-inf",1.06689453125],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","x","inf",2.5810546875],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","x","0",0.76513671875]],"time":11.1328125,"type":"series"},{"count":[[3,95]],"egraph":[[2,3715,35,0.02786775],[1,265,37,0.004931541],[0,12,40,0.000323833]],"inputs":[["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","(tan.f64 eps)","(*.f64 (tan.f64 x) (tan.f64 eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 1) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) 2) (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (sqrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (+.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (-.f64 (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (exp.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (+.f64 1 (expm1.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (tan.f64 x)) (exp.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (tan.f64 x))) (exp.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (+.f64 1 (expm1.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (tan.f64 x) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (tan.f64 eps))) 2)) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 eps)) (cbrt.f64 (pow.f64 (tan.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 eps) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 eps) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 eps) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 eps)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 eps) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 eps)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (tan.f64 x)) (tan.f64 eps))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (tan.f64 x)) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (tan.f64 x)) (tan.f64 eps)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (tan.f64 x)) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (tan.f64 eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 eps) (tan.f64 x)) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (sin.f64 eps)) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 eps) (sin.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (tan.f64 x) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (tan.f64 x)) (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (tan.f64 x) (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 (log1p.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (tan.f64 x) (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (tan.f64 x) (tan.f64 eps))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 3)) (/.f64 1 (fma.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) 2)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) -1)))))"]],"rules":[["egg-rr",34],["egg-rr",27],["egg-rr",34]],"stop":[["node limit",1]],"time":52.62109375,"type":"rewrite"},{"count":[[155,137]],"egraph":[[3,7142,2436,0.027513958999999998],[2,1374,2438,0.012082292],[1,458,2492,0.0028505839999999998],[0,149,2504,0.000724042]],"inputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)))) (sin.f64 eps)) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/3 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 -1 (/.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (sin.f64 x)) (cos.f64 x)))))) (+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (*.f64 x (sin.f64 eps)) (cos.f64 eps))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 3)) (cos.f64 eps))) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))","(+.f64 (*.f64 2/15 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 5)) (cos.f64 eps))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 3)) (cos.f64 eps))) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps))))","(+.f64 (*.f64 2/15 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 5)) (cos.f64 eps))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 3)) (cos.f64 eps))) (+.f64 (*.f64 17/315 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 7)) (cos.f64 eps))) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (cos.f64 x))) (+.f64 (*.f64 2/15 (/.f64 (*.f64 (pow.f64 eps 5) (sin.f64 x)) (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (cos.f64 x))) (+.f64 (*.f64 2/15 (/.f64 (*.f64 (pow.f64 eps 5) (sin.f64 x)) (cos.f64 x))) (+.f64 (*.f64 17/315 (/.f64 (*.f64 (pow.f64 eps 7) (sin.f64 x)) (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 eps) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) x) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) x)))","(+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) x))","(fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(fma.f64 (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3))) (*.f64 x x) (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) x))))","(+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3))) (*.f64 x x) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) x)))","(fma.f64 x (*.f64 x (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 3))) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)))) (sin.f64 eps)) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 x (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(fma.f64 (fma.f64 -1 (/.f64 (fma.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 3) (fma.f64 (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3))) (*.f64 x x) (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) x)))))","(fma.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (/.f64 (-.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) -1/3) (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3))) (/.f64 (cos.f64 eps) (sin.f64 eps)))) (pow.f64 x 3) (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3))) (*.f64 x x) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) x))))","(fma.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) -1/3)) (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 3)))) (pow.f64 x 3) (fma.f64 x (*.f64 x (+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 3))) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(+.f64 eps (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) eps) (pow.f64 (cos.f64 x) 2)))","(fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps)","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(fma.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 eps eps) (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))","(fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))))))","(fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))","(+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(fma.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 eps eps) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (fma.f64 -1 (/.f64 (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(fma.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 eps eps) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (-.f64 1/3 (/.f64 (fma.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3))) (/.f64 (cos.f64 x) (sin.f64 x))))) (+.f64 eps (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) eps) (pow.f64 (cos.f64 x) 2)))))","(fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps)))","(+.f64 (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/3 (/.f64 (sin.f64 x) (cos.f64 x))) (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 -1 (/.f64 (*.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x)) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (sin.f64 x)) (cos.f64 x)))))) (+.f64 (*.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (pow.f64 eps 2)) (+.f64 (*.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (sin.f64 x)) (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(fma.f64 (pow.f64 eps 4) (fma.f64 1/3 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 (+.f64 (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (/.f64 (+.f64 (/.f64 (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (cos.f64 x) (sin.f64 x)))))) (fma.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 eps eps) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (pow.f64 eps 3) (+.f64 1/3 (fma.f64 -1 (/.f64 (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)))) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(fma.f64 (pow.f64 eps 4) (-.f64 (-.f64 (/.f64 (*.f64 (sin.f64 x) 1/3) (cos.f64 x)) (fma.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)))) (*.f64 (/.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (/.f64 (fma.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3))) (/.f64 (cos.f64 x) (sin.f64 x)))) (cos.f64 x)) (sin.f64 x))) (fma.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (*.f64 eps eps) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (-.f64 1/3 (/.f64 (fma.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3))) (/.f64 (cos.f64 x) (sin.f64 x))))) (+.f64 eps (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) eps) (pow.f64 (cos.f64 x) 2))))))","(fma.f64 (pow.f64 eps 4) (-.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (*.f64 (sin.f64 x) (/.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 x) (cos.f64 x))) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (cos.f64 x)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))))","(fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(+.f64 eps (*.f64 (pow.f64 eps 3) 1/3))","(fma.f64 (pow.f64 eps 3) 1/3 eps)","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (fma.f64 1/3 (pow.f64 eps 3) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 (fma.f64 (pow.f64 eps 3) 1/3 eps) (*.f64 2/15 (pow.f64 eps 5)))","(fma.f64 (pow.f64 eps 3) 1/3 (fma.f64 2/15 (pow.f64 eps 5) eps))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","(+.f64 eps (fma.f64 1/3 (pow.f64 eps 3) (fma.f64 17/315 (pow.f64 eps 7) (*.f64 2/15 (pow.f64 eps 5)))))","(+.f64 (fma.f64 (pow.f64 eps 3) 1/3 eps) (fma.f64 2/15 (pow.f64 eps 5) (*.f64 17/315 (pow.f64 eps 7))))","(+.f64 eps (fma.f64 2/15 (pow.f64 eps 5) (fma.f64 (pow.f64 eps 3) 1/3 (*.f64 17/315 (pow.f64 eps 7)))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (*.f64 x (sin.f64 eps)) (cos.f64 eps))","(/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) x))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) x)","(*.f64 (sin.f64 eps) (/.f64 x (cos.f64 eps)))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 3)) (cos.f64 eps))) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))","(fma.f64 1/3 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (pow.f64 x 3))) (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) x)))","(fma.f64 1/3 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 3)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) x))","(fma.f64 1/3 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 3)) (*.f64 (sin.f64 eps) (/.f64 x (cos.f64 eps))))","(+.f64 (*.f64 2/15 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 5)) (cos.f64 eps))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 3)) (cos.f64 eps))) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps))))","(fma.f64 2/15 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (pow.f64 x 5))) (fma.f64 1/3 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (pow.f64 x 3))) (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) x))))","(fma.f64 2/15 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 5)) (fma.f64 1/3 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 3)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) x)))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) x (fma.f64 1/3 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 3)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 2/15 (pow.f64 x 5)))))","(+.f64 (*.f64 2/15 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 5)) (cos.f64 eps))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 3)) (cos.f64 eps))) (+.f64 (*.f64 17/315 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 7)) (cos.f64 eps))) (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)))))","(fma.f64 2/15 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (pow.f64 x 5))) (fma.f64 1/3 (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) (pow.f64 x 3))) (fma.f64 17/315 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 7)) (cos.f64 eps)) (/.f64 (sin.f64 eps) (/.f64 (cos.f64 eps) x)))))","(fma.f64 2/15 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 5)) (fma.f64 1/3 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 3)) (fma.f64 17/315 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 7)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) x))))","(fma.f64 1/3 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 3)) (fma.f64 2/15 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 x 5)) (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) x (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 17/315 (pow.f64 x 7))))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))","(/.f64 eps (/.f64 (cos.f64 x) (sin.f64 x)))","(*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))","(fma.f64 1/3 (/.f64 (pow.f64 eps 3) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 eps (/.f64 (cos.f64 x) (sin.f64 x))))","(fma.f64 1/3 (*.f64 (/.f64 (pow.f64 eps 3) (cos.f64 x)) (sin.f64 x)) (*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x)))","(fma.f64 1/3 (*.f64 (sin.f64 x) (/.f64 (pow.f64 eps 3) (cos.f64 x))) (*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x))))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (cos.f64 x))) (+.f64 (*.f64 2/15 (/.f64 (*.f64 (pow.f64 eps 5) (sin.f64 x)) (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x))))","(fma.f64 1/3 (/.f64 (pow.f64 eps 3) (/.f64 (cos.f64 x) (sin.f64 x))) (fma.f64 2/15 (/.f64 (pow.f64 eps 5) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 eps (/.f64 (cos.f64 x) (sin.f64 x)))))","(fma.f64 1/3 (*.f64 (/.f64 (pow.f64 eps 3) (cos.f64 x)) (sin.f64 x)) (fma.f64 2/15 (*.f64 (/.f64 (pow.f64 eps 5) (cos.f64 x)) (sin.f64 x)) (*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))))","(fma.f64 1/3 (*.f64 (sin.f64 x) (/.f64 (pow.f64 eps 3) (cos.f64 x))) (fma.f64 2/15 (*.f64 (sin.f64 x) (/.f64 (pow.f64 eps 5) (cos.f64 x))) (*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)))))","(+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (cos.f64 x))) (+.f64 (*.f64 2/15 (/.f64 (*.f64 (pow.f64 eps 5) (sin.f64 x)) (cos.f64 x))) (+.f64 (*.f64 17/315 (/.f64 (*.f64 (pow.f64 eps 7) (sin.f64 x)) (cos.f64 x))) (/.f64 (*.f64 eps (sin.f64 x)) (cos.f64 x)))))","(fma.f64 1/3 (/.f64 (pow.f64 eps 3) (/.f64 (cos.f64 x) (sin.f64 x))) (fma.f64 2/15 (/.f64 (pow.f64 eps 5) (/.f64 (cos.f64 x) (sin.f64 x))) (fma.f64 17/315 (/.f64 (pow.f64 eps 7) (/.f64 (cos.f64 x) (sin.f64 x))) (/.f64 eps (/.f64 (cos.f64 x) (sin.f64 x))))))","(fma.f64 1/3 (*.f64 (/.f64 (pow.f64 eps 3) (cos.f64 x)) (sin.f64 x)) (fma.f64 2/15 (*.f64 (/.f64 (pow.f64 eps 5) (cos.f64 x)) (sin.f64 x)) (fma.f64 17/315 (/.f64 (sin.f64 x) (/.f64 (cos.f64 x) (pow.f64 eps 7))) (*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x)))))","(fma.f64 1/3 (*.f64 (sin.f64 x) (/.f64 (pow.f64 eps 3) (cos.f64 x))) (fma.f64 2/15 (*.f64 (sin.f64 x) (/.f64 (pow.f64 eps 5) (cos.f64 x))) (fma.f64 17/315 (*.f64 (sin.f64 x) (/.f64 (pow.f64 eps 7) (cos.f64 x))) (*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x))))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x)))"]],"stop":[["node limit",1]],"time":61.72900390625,"type":"simplify"},{"compiler":[[7581,3113]],"time":61.425048828125,"type":"eval"},{"alts":[["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","next",12.293232023981023],["(fma.f64 (+.f64 (tan.f64 x) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",20.732476838618485],["(+.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))","fresh",20.981841957600896],["(fma.f64 (+.f64 (tan.f64 x) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",23.018346118380514],["(fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))))","fresh",32.98880399483111],["(fma.f64 (pow.f64 eps 3) (+.f64 (neg.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x)))))","fresh",32.88811698114416],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 x)))) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",20.71377669690028],["(-.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))))) (tan.f64 x))","fresh",41.305695837213094],["(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)))","fresh",41.518451592247914],["(fma.f64 (+.f64 (tan.f64 x) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",28.87255253651634],["(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.667272841373144],["(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2) 3) (cbrt.f64 (tan.f64 x))) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",20.801851445071495],["(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))","fresh",20.807563644951],["(+.f64 eps (*.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",32.65442155745041],["(-.f64 (*.f64 (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3)) (tan.f64 x))","fresh",53.269693603246346]],"compiler":[[47,18],[25,17],[41,25],[27,17],[130,57],[76,50],[35,22],[28,16],[30,15],[29,16],[47,20],[30,19],[32,17],[15,11],[24,17],[47,18],[25,17],[41,25],[27,17],[130,57],[76,50],[35,22],[28,16],[30,15],[29,16],[47,20],[30,19],[32,17],[15,11],[24,17]],"count":[[306,15]],"kept":[{"done":[0,0],"fresh":[12,7],"new":[293,8],"picked":[1,0]}],"min-error":[0.15306007241209263],"time":96.552978515625,"type":"prune"},{"compiler":[[153,31]],"locations":[["(/.f64 (sin.f64 x) (cos.f64 x))",0.1328125,true],["(/.f64 (sin.f64 eps) (cos.f64 eps))",0.203125,true],["(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))",0.203125,true],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))",4.666883807272901,true]],"time":22.472900390625,"type":"localize"},{"count":[[4,44]],"series":[["(/.f64 (sin.f64 x) (cos.f64 x))","x","-inf",0.156982421875],["(/.f64 (sin.f64 x) (cos.f64 x))","x","inf",0.141845703125],["(/.f64 (sin.f64 x) (cos.f64 x))","x","0",0.14892578125],["(/.f64 (sin.f64 eps) (cos.f64 eps))","eps","-inf",0.14404296875],["(/.f64 (sin.f64 eps) (cos.f64 eps))","eps","inf",0.14208984375],["(/.f64 (sin.f64 eps) (cos.f64 eps))","eps","0",0.166015625],["(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","eps","-inf",0.150146484375],["(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","eps","inf",0.158203125],["(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","eps","0",0.22216796875],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","-inf",1.05712890625],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","inf",1.126953125],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","0",0.732177734375],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","x","-inf",0.9609375],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","x","inf",2.990966796875],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","x","0",1.281982421875]],"time":9.857177734375,"type":"series"},{"count":[[4,292]],"egraph":[[2,5119,28,0.033472542],[1,331,28,0.006516792],[0,15,34,0.000373375]],"inputs":[["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))) (cbrt.f64 (exp.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))))) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)) (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x)))) (neg.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2))) (neg.f64 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (sin.f64 x))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 x) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (sin.f64 x))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (/.f64 1 (tan.f64 x))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 1)) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (tan.f64 x) (/.f64 1 (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1 (tan.f64 x)) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) 1)) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (tan.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) 1)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (sin.f64 x)))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (tan.f64 x) (neg.f64 (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (neg.f64 (tan.f64 x)) 3)) (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (tan.f64 x))) (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (tan.f64 x)))) (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (exp.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (+.f64 1 (expm1.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (+.f64 1 (expm1.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (exp.f64 (neg.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 1 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (/.f64 1 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (tan.f64 x))) (exp.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (tan.f64 x))) (exp.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (tan.f64 x))) (+.f64 1 (expm1.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (tan.f64 x))) (+.f64 1 (expm1.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (neg.f64 (/.f64 1 (cos.f64 x))) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (tan.f64 x)) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 1 (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1 (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1 (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1 (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1 (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2)) (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (neg.f64 (cbrt.f64 (tan.f64 x))) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (*.f64 (cbrt.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (*.f64 (cbrt.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2) (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2) (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (tan.f64 x)) (neg.f64 (sqrt.f64 (tan.f64 x))) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (tan.f64 x)) (*.f64 (sqrt.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (tan.f64 x)) (*.f64 (sqrt.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (cos.f64 x)) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cos.f64 x) (tan.f64 x) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 (tan.f64 x))) (cbrt.f64 (neg.f64 (tan.f64 x)))) (cbrt.f64 (neg.f64 (tan.f64 x))) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (tan.f64 x))) (sqrt.f64 (neg.f64 (tan.f64 x))) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (tan.f64 x))) (sqrt.f64 (tan.f64 x)) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (cbrt.f64 (sin.f64 x)) (cos.f64 x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (cbrt.f64 (sin.f64 x)) (cos.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) 1) (/.f64 (/.f64 1 (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) 1) (/.f64 (/.f64 1 (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 1) (/.f64 (cbrt.f64 (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 1) (/.f64 (cbrt.f64 (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (tan.f64 x)) 1) (/.f64 (sqrt.f64 (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (tan.f64 x)) 1) (/.f64 (sqrt.f64 (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (/.f64 (/.f64 1 (cos.f64 x)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (/.f64 (/.f64 1 (cos.f64 x)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (/.f64 (sqrt.f64 (tan.f64 x)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) 2))) (/.f64 (sqrt.f64 (tan.f64 x)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (/.f64 1 (cos.f64 x)) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (/.f64 1 (cos.f64 x)) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (tan.f64 x) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (tan.f64 x) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (cbrt.f64 (tan.f64 x)) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (cbrt.f64 (tan.f64 x)) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (cbrt.f64 (tan.f64 x)) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (tan.f64 eps))) (cbrt.f64 (exp.f64 (tan.f64 eps))))) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 eps))) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cos.f64 eps)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 1 (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (neg.f64 (/.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 eps)) (pow.f64 (cbrt.f64 (tan.f64 eps)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2) (neg.f64 (cbrt.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) (*.f64 (cbrt.f64 (sin.f64 eps)) (/.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 eps)) (neg.f64 (sqrt.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 eps)) (*.f64 (sqrt.f64 (sin.f64 eps)) (/.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 eps)) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) 1) (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sqrt.f64 (sin.f64 eps)) (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (cos.f64 eps))) (/.f64 (sin.f64 eps) (sqrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) 1) (/.f64 (cbrt.f64 (sin.f64 eps)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) (sqrt.f64 (cos.f64 eps))) (/.f64 (cbrt.f64 (sin.f64 eps)) (sqrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sqrt.f64 (cos.f64 eps))) (/.f64 (sin.f64 eps) (sqrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (tan.f64 eps))) (sqrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2)) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 eps) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 eps)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 eps)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 eps)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (tan.f64 eps))) (cbrt.f64 (exp.f64 (tan.f64 eps))))) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 eps))) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cos.f64 eps)) (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (/.f64 1 (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (neg.f64 (/.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 eps)) (pow.f64 (cbrt.f64 (tan.f64 eps)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2) (neg.f64 (cbrt.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) (*.f64 (cbrt.f64 (sin.f64 eps)) (/.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 eps)) (neg.f64 (sqrt.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 eps)) (*.f64 (sqrt.f64 (sin.f64 eps)) (/.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 eps)) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) 1) (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sqrt.f64 (sin.f64 eps)) (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (cos.f64 eps))) (/.f64 (sin.f64 eps) (sqrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) 1) (/.f64 (cbrt.f64 (sin.f64 eps)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 eps)) 2) (sqrt.f64 (cos.f64 eps))) (/.f64 (cbrt.f64 (sin.f64 eps)) (sqrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sqrt.f64 (cos.f64 eps))) (/.f64 (sin.f64 eps) (sqrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (tan.f64 eps))) (sqrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2)) (cbrt.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 eps) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 eps)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 eps)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (tan.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (tan.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 eps)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 eps)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (tan.f64 x))) (cbrt.f64 (exp.f64 (tan.f64 x))))) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 x)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (/.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 x)) (sqrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 1) (/.f64 (cbrt.f64 (sin.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 x)) 1) (/.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sqrt.f64 (sin.f64 x)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (cos.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sqrt.f64 (cos.f64 x))) (/.f64 (cbrt.f64 (sin.f64 x)) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 x)))))"]],"rules":[["egg-rr",36],["egg-rr",49],["egg-rr",49],["egg-rr",158]],"stop":[["node limit",1]],"time":75.177978515625,"type":"rewrite"},{"count":[[336,286]],"egraph":[[3,7997,1440,0.029602457999999998],[2,1499,1455,0.013742208],[1,435,1492,0.003058791],[0,145,1569,0.000707583]],"inputs":[["(/.f64 (*.f64 (pow.f64 x 2) (sin.f64 eps)) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 x 3)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (+.f64 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)) (*.f64 -1 (*.f64 (+.f64 1/6 (+.f64 (*.f64 -1/2 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps)) (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (sin.f64 eps)) (cos.f64 eps))))) (pow.f64 x 5))))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (/.f64 (*.f64 (sin.f64 x) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (pow.f64 eps 4))) (+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 -1 eps)","(+.f64 (*.f64 -1 eps) (*.f64 -1/3 (pow.f64 eps 3)))","(+.f64 (*.f64 -1 eps) (+.f64 (*.f64 -1/3 (pow.f64 eps 3)) (*.f64 -2/15 (pow.f64 eps 5))))","(+.f64 (*.f64 -1 eps) (+.f64 (*.f64 -17/315 (pow.f64 eps 7)) (+.f64 (*.f64 -1/3 (pow.f64 eps 3)) (*.f64 -2/15 (pow.f64 eps 5)))))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (pow.f64 x 2) (sin.f64 eps)) (cos.f64 eps))","(/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x))","(*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 x 3)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 3))))","(+.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x)) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps))))","(+.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 3))) (fma.f64 -1 (*.f64 (fma.f64 -1 (/.f64 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (fma.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 0))) (pow.f64 x 4)) (/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps)))))","(+.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x)) (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3)) (*.f64 (pow.f64 x 4) (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (/.f64 (cos.f64 eps) (sin.f64 eps)))))))","(fma.f64 (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 (sin.f64 eps) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)))) (neg.f64 (pow.f64 x 4)) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(fma.f64 (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (fma.f64 (sin.f64 eps) 1/3 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps))) (neg.f64 (pow.f64 x 4)) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (+.f64 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)) (*.f64 -1 (*.f64 (+.f64 1/6 (+.f64 (*.f64 -1/2 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps)) (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (sin.f64 eps)) (cos.f64 eps))))) (pow.f64 x 5))))))","(+.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 3))) (+.f64 (fma.f64 -1 (*.f64 (fma.f64 -1 (/.f64 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (fma.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 0))) (pow.f64 x 4)) (/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps)))) (neg.f64 (*.f64 (+.f64 1/6 (fma.f64 -1/2 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (+.f64 (/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 1/6) (/.f64 (cos.f64 eps) (sin.f64 eps))) (/.f64 (fma.f64 -1 (/.f64 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (fma.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 0))) (/.f64 (cos.f64 eps) (sin.f64 eps)))))) (pow.f64 x 5)))))","(+.f64 (fma.f64 (neg.f64 (+.f64 1/6 (+.f64 (/.f64 (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (/.f64 (cos.f64 eps) (sin.f64 eps)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (fma.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) -1/2 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) 1/6)))))) (pow.f64 x 5) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x))) (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3)) (*.f64 (pow.f64 x 4) (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (/.f64 (cos.f64 eps) (sin.f64 eps)))))))","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (fma.f64 (+.f64 (*.f64 (sin.f64 eps) (+.f64 (/.f64 1/6 (/.f64 (pow.f64 (cos.f64 eps) 2) (sin.f64 eps))) (/.f64 (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 (sin.f64 eps) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)))) (cos.f64 eps)))) (+.f64 0 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) -1/2) (pow.f64 (cos.f64 eps) 2)))) (neg.f64 (pow.f64 x 5)) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (*.f64 (pow.f64 x 4) (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 (sin.f64 eps) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps))))))","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (fma.f64 (+.f64 (*.f64 (sin.f64 eps) (+.f64 (/.f64 1/6 (/.f64 (pow.f64 (cos.f64 eps) 2) (sin.f64 eps))) (/.f64 (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (fma.f64 (sin.f64 eps) 1/3 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps))) (cos.f64 eps)))) (+.f64 0 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) -1/2) (pow.f64 (cos.f64 eps) 2)))) (neg.f64 (pow.f64 x 5)) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (*.f64 (pow.f64 x 4) (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (fma.f64 (sin.f64 eps) 1/3 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))","(*.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))","(*.f64 (pow.f64 (sin.f64 x) 2) (/.f64 eps (pow.f64 (cos.f64 x) 2)))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 eps eps) (/.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (sin.f64 x) 3))))","(+.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (*.f64 (/.f64 (*.f64 eps eps) (pow.f64 (cos.f64 x) 3)) (pow.f64 (sin.f64 x) 3)))","(fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (/.f64 eps (pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) 3)) eps))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 eps eps) (/.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (sin.f64 x) 3))) (neg.f64 (*.f64 (pow.f64 eps 3) (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (/.f64 (*.f64 -1/3 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))))))","(+.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (-.f64 (*.f64 (/.f64 (*.f64 eps eps) (pow.f64 (cos.f64 x) 3)) (pow.f64 (sin.f64 x) 3)) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))))))","(fma.f64 (pow.f64 eps 3) (neg.f64 (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)))) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (/.f64 eps (pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) 3)) eps)))","(fma.f64 (pow.f64 eps 3) (neg.f64 (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 4))) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (/.f64 eps (pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) 3)) eps)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (/.f64 (*.f64 (sin.f64 x) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (pow.f64 eps 4))) (+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))","(fma.f64 -1 (*.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (/.f64 (*.f64 (sin.f64 x) (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (/.f64 (*.f64 -1/3 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))) (cos.f64 x))) (pow.f64 eps 4)) (+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 eps eps) (/.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (sin.f64 x) 3))) (neg.f64 (*.f64 (pow.f64 eps 3) (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (/.f64 (*.f64 -1/3 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))))))","(+.f64 (-.f64 (*.f64 (/.f64 (*.f64 eps eps) (pow.f64 (cos.f64 x) 3)) (pow.f64 (sin.f64 x) 3)) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))))) (fma.f64 (neg.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)))))) (pow.f64 eps 4) (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))))","(-.f64 (fma.f64 (pow.f64 eps 3) (neg.f64 (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)))) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (/.f64 eps (pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) 3)) eps))) (*.f64 (fma.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (-.f64 (*.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (/.f64 (cos.f64 x) (sin.f64 x))))) (pow.f64 eps 4)))","(-.f64 (fma.f64 (pow.f64 eps 3) (neg.f64 (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 4))) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (/.f64 eps (pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) 3)) eps))) (*.f64 (fma.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (-.f64 (*.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 4) (/.f64 (cos.f64 x) (sin.f64 x))))) (pow.f64 eps 4)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) 1))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 x) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (sin.f64 eps) (/.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 -1 eps)","(neg.f64 eps)","(+.f64 (*.f64 -1 eps) (*.f64 -1/3 (pow.f64 eps 3)))","(fma.f64 -1 eps (*.f64 -1/3 (pow.f64 eps 3)))","(-.f64 (*.f64 -1/3 (pow.f64 eps 3)) eps)","(fma.f64 -1/3 (pow.f64 eps 3) (neg.f64 eps))","(+.f64 (*.f64 -1 eps) (+.f64 (*.f64 -1/3 (pow.f64 eps 3)) (*.f64 -2/15 (pow.f64 eps 5))))","(fma.f64 -1 eps (fma.f64 -1/3 (pow.f64 eps 3) (*.f64 -2/15 (pow.f64 eps 5))))","(-.f64 (fma.f64 -2/15 (pow.f64 eps 5) (*.f64 -1/3 (pow.f64 eps 3))) eps)","(fma.f64 -1/3 (pow.f64 eps 3) (fma.f64 -2/15 (pow.f64 eps 5) (neg.f64 eps)))","(+.f64 (*.f64 -1 eps) (+.f64 (*.f64 -17/315 (pow.f64 eps 7)) (+.f64 (*.f64 -1/3 (pow.f64 eps 3)) (*.f64 -2/15 (pow.f64 eps 5)))))","(fma.f64 -1 eps (fma.f64 -17/315 (pow.f64 eps 7) (fma.f64 -1/3 (pow.f64 eps 3) (*.f64 -2/15 (pow.f64 eps 5)))))","(-.f64 (fma.f64 -17/315 (pow.f64 eps 7) (fma.f64 -2/15 (pow.f64 eps 5) (*.f64 -1/3 (pow.f64 eps 3)))) eps)","(-.f64 (fma.f64 -1/3 (pow.f64 eps 3) (fma.f64 -2/15 (pow.f64 eps 5) (*.f64 -17/315 (pow.f64 eps 7)))) eps)","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","(*.f64 -1 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))","eps","(+.f64 eps (*.f64 1/3 (pow.f64 eps 3)))","(fma.f64 1/3 (pow.f64 eps 3) eps)","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (*.f64 2/15 (pow.f64 eps 5))))","(+.f64 eps (fma.f64 1/3 (pow.f64 eps 3) (*.f64 (pow.f64 eps 5) 2/15)))","(fma.f64 1/3 (pow.f64 eps 3) (fma.f64 (pow.f64 eps 5) 2/15 eps))","(+.f64 eps (+.f64 (*.f64 1/3 (pow.f64 eps 3)) (+.f64 (*.f64 17/315 (pow.f64 eps 7)) (*.f64 2/15 (pow.f64 eps 5)))))","(+.f64 eps (fma.f64 1/3 (pow.f64 eps 3) (fma.f64 17/315 (pow.f64 eps 7) (*.f64 (pow.f64 eps 5) 2/15))))","(+.f64 eps (fma.f64 1/3 (pow.f64 eps 3) (fma.f64 (pow.f64 eps 7) 17/315 (*.f64 (pow.f64 eps 5) 2/15))))","(fma.f64 1/3 (pow.f64 eps 3) (+.f64 eps (fma.f64 (pow.f64 eps 7) 17/315 (*.f64 (pow.f64 eps 5) 2/15))))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(fma.f64 (pow.f64 x 3) 1/3 x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 (pow.f64 x 5) 2/15 x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 (pow.f64 x 5) 2/15 x)))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 17/315 (pow.f64 x 7) (fma.f64 (pow.f64 x 5) 2/15 x)))"]],"stop":[["node limit",1]],"time":59.15087890625,"type":"simplify"},{"compiler":[[22830,6339]],"time":122.93408203125,"type":"eval"},{"alts":[["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (*.f64 (pow.f64 (sin.f64 x) 2) (/.f64 eps (pow.f64 (cos.f64 x) 2))))","fresh",21.965115905240033],["(+.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))","fresh",20.981841957600896],["(fma.f64 (+.f64 (tan.f64 x) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",23.018346118380514],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))","fresh",21.958924645475776],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (log.f64 (exp.f64 (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","fresh",12.297705471528017],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","next",12.266668084560157],["(fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))))","fresh",32.98880399483111],["(fma.f64 (pow.f64 eps 3) (+.f64 (neg.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x)))))","fresh",32.88811698114416],["(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)))","fresh",41.518451592247914],["(fma.f64 (+.f64 (tan.f64 x) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",28.87255253651634],["(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.667272841373144],["(fma.f64 (+.f64 (tan.f64 x) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",20.732476838618485],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (cbrt.f64 (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","fresh",12.284384224142176],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps)))) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","fresh",12.289325773981025],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (log.f64 (exp.f64 (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","fresh",12.315587064641003],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x))))","fresh",13.23197202413334],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (fma.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x))))","fresh",12.320766477723982],["(-.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))))) (tan.f64 x))","fresh",41.305695837213094],["(+.f64 eps (*.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",32.65442155745041],["(-.f64 (*.f64 (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3)) (tan.f64 x))","fresh",53.269693603246346]],"compiler":[[33,20],[41,25],[27,17],[33,20],[46,21],[56,25],[130,57],[76,50],[30,15],[29,16],[47,20],[25,17],[57,28],[55,26],[46,21],[48,26],[37,22],[28,16],[15,11],[24,17],[33,20],[41,25],[27,17],[33,20],[46,21],[56,25],[130,57],[76,50],[30,15],[29,16],[47,20],[25,17],[57,28],[55,26],[46,21],[48,26],[37,22],[28,16],[15,11],[24,17]],"count":[[489,20]],"kept":[{"done":[0,0],"fresh":[14,11],"new":[474,9],"picked":[1,0]}],"min-error":[0.1072473719543147],"time":244.760009765625,"type":"prune"},{"compiler":[[238,67]],"locations":[["(/.f64 (sin.f64 eps) (cos.f64 eps))",0.203125,false],["(/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))",0.203125,false],["(pow.f64 (cbrt.f64 (cos.f64 x)) 2)",0.23503876953688402,true],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))",4.666883807272901,true]],"time":36.3818359375,"type":"localize"},{"count":[[2,36]],"series":[["(pow.f64 (cbrt.f64 (cos.f64 x)) 2)","x","-inf",1.14990234375],["(pow.f64 (cbrt.f64 (cos.f64 x)) 2)","x","inf",1.60107421875],["(pow.f64 (cbrt.f64 (cos.f64 x)) 2)","x","0",0.991943359375],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","-inf",0.674072265625],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","inf",1.387939453125],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","eps","0",0.3701171875],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","x","-inf",0.7470703125],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","x","inf",1.921142578125],["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","x","0",0.63916015625]],"time":9.7021484375,"type":"series"},{"count":[[2,114]],"egraph":[[2,6581,27,0.040877417],[1,451,27,0.008888709000000002],[0,20,34,0.000525917]],"inputs":[["(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(pow.f64 (cbrt.f64 (cos.f64 x)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (*.f64 (neg.f64 (tan.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 x)) 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (tan.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) (+.f64 (neg.f64 (tan.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 2) (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (cos.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (/.f64 1 (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (*.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (/.f64 1 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))) (-.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (-.f64 (*.f64 (cos.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (*.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))) (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cos.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3)) (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (*.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2)) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (cos.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))) (neg.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (tan.f64 x) 3))) (neg.f64 (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (*.f64 (tan.f64 x) (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (pow.f64 (tan.f64 x) 2))) (neg.f64 (+.f64 (tan.f64 x) (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (sin.f64 x))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 x) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (sin.f64 x))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (cos.f64 x)) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (sin.f64 x))) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (/.f64 1 (tan.f64 x))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 1)) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (tan.f64 x) (/.f64 1 (tan.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1 (tan.f64 x)) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) 1)) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (tan.f64 x))) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) 1)) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))))) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (neg.f64 (cos.f64 x))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (sin.f64 x)))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (tan.f64 x) (neg.f64 (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (neg.f64 (sin.f64 x)))) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))) (*.f64 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (tan.f64 x) (cbrt.f64 (cos.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))) (*.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1) (tan.f64 x)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (cbrt.f64 (cos.f64 x))) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))) (*.f64 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 3) (pow.f64 (neg.f64 (tan.f64 x)) 3)) (+.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (tan.f64 x))) (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2) (*.f64 (neg.f64 (tan.f64 x)) (neg.f64 (tan.f64 x)))) (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 (cos.f64 x) (tan.f64 x)) (*.f64 (sin.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (/.f64 1 (*.f64 (cos.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (*.f64 (cbrt.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (pow.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) 2) (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (tan.f64 x)) (*.f64 (sqrt.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (sqrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (tan.f64 x) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) 1) (/.f64 (/.f64 1 (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) 1) (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (cbrt.f64 (sin.f64 x)) (cos.f64 x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (/.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) 1) (/.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 1) (/.f64 (cbrt.f64 (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (tan.f64 x)) 1) (/.f64 (sqrt.f64 (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)) (/.f64 (/.f64 1 (cos.f64 x)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)) (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)) (/.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)) (cbrt.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1)) 2)) (/.f64 (sqrt.f64 (tan.f64 x)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (/.f64 1 (cos.f64 x)) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (tan.f64 x) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (/.f64 (cbrt.f64 (tan.f64 x)) (sqrt.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) 1))) (neg.f64 (tan.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 1/6) (*.f64 (pow.f64 (cos.f64 x) 1/6) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 2)) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cos.f64 x)) (/.f64 1 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cbrt.f64 (cos.f64 x)))) 1))))))"]],"rules":[["egg-rr",23],["egg-rr",91]],"stop":[["node limit",1]],"time":68.90185546875,"type":"rewrite"},{"count":[[150,141]],"egraph":[[3,7517,1317,0.029037791],[2,1331,1337,0.012899958],[1,378,1374,0.0026944160000000003],[0,127,1448,0.000620625]],"inputs":[["(/.f64 (*.f64 (pow.f64 x 2) (sin.f64 eps)) (cos.f64 eps))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 x 3)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (+.f64 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)) (*.f64 -1 (*.f64 (+.f64 1/6 (+.f64 (*.f64 -1/2 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps)) (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (sin.f64 eps)) (cos.f64 eps))))) (pow.f64 x 5))))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (/.f64 (*.f64 (sin.f64 x) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (pow.f64 eps 4))) (+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 -1/405 (pow.f64 x 6))))","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/405 (pow.f64 x 6)) (*.f64 -1/1701 (pow.f64 x 8)))))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (pow.f64 x 2) (sin.f64 eps)) (cos.f64 eps))","(/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x))","(*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 x 3)) (pow.f64 (cos.f64 eps) 2)) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)))","(+.f64 (/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 3))))","(+.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x)) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3)))","(fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps))))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps))))","(+.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 3))) (fma.f64 -1 (*.f64 (fma.f64 -1 (/.f64 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (fma.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 0))) (pow.f64 x 4)) (/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps)))))","(+.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x)) (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3)) (*.f64 (pow.f64 x 4) (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (/.f64 (cos.f64 eps) (sin.f64 eps)))))))","(fma.f64 (-.f64 (/.f64 (*.f64 (sin.f64 eps) -1/3) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (neg.f64 (pow.f64 x 4)) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(fma.f64 (-.f64 (/.f64 (*.f64 (sin.f64 eps) -1/3) (cos.f64 eps)) (/.f64 (fma.f64 (sin.f64 eps) 1/3 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps))) (neg.f64 (pow.f64 x 4)) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(+.f64 (/.f64 (*.f64 (pow.f64 x 3) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2)) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (pow.f64 x 4))) (+.f64 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 x 2)) (cos.f64 eps)) (*.f64 -1 (*.f64 (+.f64 1/6 (+.f64 (*.f64 -1/2 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))) (sin.f64 eps)) (cos.f64 eps)) (/.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1/3 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (sin.f64 eps)) (cos.f64 eps))) (+.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (+.f64 (*.f64 1/2 (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 -1/2 (/.f64 (sin.f64 eps) (cos.f64 eps)))))) (sin.f64 eps)) (cos.f64 eps))))) (pow.f64 x 5))))))","(+.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (/.f64 (pow.f64 (cos.f64 eps) 2) (pow.f64 x 3))) (+.f64 (fma.f64 -1 (*.f64 (fma.f64 -1 (/.f64 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (fma.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 0))) (pow.f64 x 4)) (/.f64 (*.f64 x x) (/.f64 (cos.f64 eps) (sin.f64 eps)))) (neg.f64 (*.f64 (+.f64 1/6 (fma.f64 -1/2 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (+.f64 (/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 1/6) (/.f64 (cos.f64 eps) (sin.f64 eps))) (/.f64 (fma.f64 -1 (/.f64 (-.f64 1/3 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)))) (/.f64 (cos.f64 eps) (sin.f64 eps))) (fma.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 0))) (/.f64 (cos.f64 eps) (sin.f64 eps)))))) (pow.f64 x 5)))))","(+.f64 (fma.f64 (neg.f64 (+.f64 1/6 (+.f64 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (/.f64 (cos.f64 eps) (sin.f64 eps)))) (cos.f64 eps)) (sin.f64 eps)) (fma.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) -1/2 (/.f64 (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) 1/6) (/.f64 (cos.f64 eps) (sin.f64 eps))))))) (pow.f64 x 5) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 x x))) (-.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3)) (*.f64 (pow.f64 x 4) (-.f64 (*.f64 -1/3 (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (/.f64 (cos.f64 eps) (sin.f64 eps)))))))","(-.f64 (fma.f64 (-.f64 (/.f64 (*.f64 (sin.f64 eps) -1/3) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (neg.f64 (pow.f64 x 4)) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps))))) (*.f64 (+.f64 (*.f64 (sin.f64 eps) (+.f64 (/.f64 1/6 (/.f64 (pow.f64 (cos.f64 eps) 2) (sin.f64 eps))) (/.f64 (-.f64 (/.f64 (*.f64 (sin.f64 eps) -1/3) (cos.f64 eps)) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 1/3 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (cos.f64 eps)))) (+.f64 0 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) -1/2) (pow.f64 (cos.f64 eps) 2)))) (pow.f64 x 5)))","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (pow.f64 x 3) (*.f64 (*.f64 x x) (/.f64 (sin.f64 eps) (cos.f64 eps)))) (+.f64 (*.f64 (pow.f64 x 4) (-.f64 (/.f64 (*.f64 (sin.f64 eps) -1/3) (cos.f64 eps)) (/.f64 (fma.f64 (sin.f64 eps) 1/3 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps)))) (*.f64 (+.f64 (*.f64 (sin.f64 eps) (+.f64 (/.f64 1/6 (/.f64 (pow.f64 (cos.f64 eps) 2) (sin.f64 eps))) (/.f64 (-.f64 (/.f64 (*.f64 (sin.f64 eps) -1/3) (cos.f64 eps)) (/.f64 (fma.f64 (sin.f64 eps) 1/3 (/.f64 (pow.f64 (sin.f64 eps) 3) (pow.f64 (cos.f64 eps) 2))) (cos.f64 eps))) (cos.f64 eps)))) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) -1/2) (pow.f64 (cos.f64 eps) 2))) (pow.f64 x 5))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2))","(/.f64 eps (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2)))","(*.f64 (pow.f64 (sin.f64 x) 2) (/.f64 eps (pow.f64 (cos.f64 x) 2)))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)))","(+.f64 (/.f64 eps (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (/.f64 (*.f64 eps eps) (/.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (sin.f64 x) 3))))","(+.f64 (/.f64 eps (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (*.f64 (/.f64 (*.f64 eps eps) (pow.f64 (cos.f64 x) 3)) (pow.f64 (sin.f64 x) 3)))","(fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (*.f64 eps eps)))","(+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(+.f64 (+.f64 (/.f64 eps (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (/.f64 (*.f64 eps eps) (/.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (sin.f64 x) 3)))) (neg.f64 (*.f64 (pow.f64 eps 3) (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))","(+.f64 (/.f64 eps (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (-.f64 (*.f64 (/.f64 (*.f64 eps eps) (pow.f64 (cos.f64 x) 3)) (pow.f64 (sin.f64 x) 3)) (*.f64 (pow.f64 eps 3) (-.f64 (/.f64 -1/3 (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))))))","(-.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (*.f64 eps eps))) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)))))","(-.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (*.f64 eps eps))) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 4))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (/.f64 (*.f64 (sin.f64 x) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (cos.f64 x))) (pow.f64 eps 4))) (+.f64 (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (pow.f64 (sin.f64 x) 3)) (pow.f64 (cos.f64 x) 3)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))))))","(fma.f64 -1 (*.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (/.f64 (sin.f64 x) (/.f64 (cos.f64 x) (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))) (pow.f64 eps 4)) (+.f64 (+.f64 (/.f64 eps (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (/.f64 (*.f64 eps eps) (/.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (sin.f64 x) 3)))) (neg.f64 (*.f64 (pow.f64 eps 3) (fma.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (*.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))","(+.f64 (-.f64 (*.f64 (/.f64 (*.f64 eps eps) (pow.f64 (cos.f64 x) 3)) (pow.f64 (sin.f64 x) 3)) (*.f64 (pow.f64 eps 3) (-.f64 (/.f64 -1/3 (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4))))) (fma.f64 (neg.f64 (fma.f64 -1/3 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3)) (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 (/.f64 -1/3 (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)))))) (pow.f64 eps 4) (/.f64 eps (/.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (sin.f64 x) 2)))))","(-.f64 (fma.f64 (fma.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (-.f64 (*.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)) (/.f64 (cos.f64 x) (sin.f64 x))))) (neg.f64 (pow.f64 eps 4)) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (*.f64 eps eps)))) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (/.f64 (pow.f64 (sin.f64 x) 4) (pow.f64 (cos.f64 x) 4)))))","(-.f64 (fma.f64 (fma.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (-.f64 (*.f64 -1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (/.f64 (pow.f64 (sin.f64 x) 5) (pow.f64 (cos.f64 x) 4)) (cos.f64 x)))) (neg.f64 (pow.f64 eps 4)) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2) (*.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3) (*.f64 eps eps)))) (*.f64 (pow.f64 eps 3) (-.f64 (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 4))))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (sin.f64 x) (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))) 1) (cos.f64 x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 -1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))) 1)) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 x))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x)))","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(fma.f64 -1/3 (*.f64 x x) 1)","(fma.f64 (*.f64 x x) -1/3 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 -1/405 (pow.f64 x 6))))","(+.f64 (fma.f64 -1/3 (*.f64 x x) 1) (*.f64 -1/405 (pow.f64 x 6)))","(fma.f64 (*.f64 x x) -1/3 (fma.f64 -1/405 (pow.f64 x 6) 1))","(fma.f64 x (*.f64 x -1/3) (fma.f64 -1/405 (pow.f64 x 6) 1))","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/405 (pow.f64 x 6)) (*.f64 -1/1701 (pow.f64 x 8)))))","(+.f64 (fma.f64 -1/3 (*.f64 x x) 1) (fma.f64 -1/405 (pow.f64 x 6) (*.f64 -1/1701 (pow.f64 x 8))))","(+.f64 (fma.f64 (*.f64 x x) -1/3 1) (fma.f64 -1/405 (pow.f64 x 6) (*.f64 -1/1701 (pow.f64 x 8))))","(fma.f64 x (*.f64 x -1/3) (fma.f64 -1/405 (pow.f64 x 6) (fma.f64 -1/1701 (pow.f64 x 8) 1)))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))"]],"stop":[["node limit",1]],"time":55.212158203125,"type":"simplify"},{"compiler":[[14319,4470]],"time":80.222900390625,"type":"eval"},{"alts":[["(fma.f64 (+.f64 (tan.f64 x) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",20.732476838618485],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (fma.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1)) (neg.f64 (tan.f64 x))))","fresh",12.312297943984472],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (log.f64 (exp.f64 (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","fresh",12.315587064641003],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2)) (cbrt.f64 (tan.f64 eps))) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","fresh",12.269004285686503],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (*.f64 (pow.f64 (sin.f64 x) 2) (/.f64 eps (pow.f64 (cos.f64 x) 2))))","fresh",21.965115905240033],["(+.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))","fresh",20.981841957600896],["(fma.f64 (+.f64 (tan.f64 x) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",23.018346118380514],["(fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))))","fresh",32.98880399483111],["(fma.f64 (pow.f64 eps 3) (+.f64 (neg.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x)))))","fresh",32.88811698114416],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))","fresh",21.958924645475776],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x))))","fresh",13.23197202413334],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x))))","fresh",12.292984356412372],["(-.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))))) (tan.f64 x))","fresh",41.305695837213094],["(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)))","fresh",41.518451592247914],["(fma.f64 (+.f64 (tan.f64 x) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","fresh",28.87255253651634],["(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","fresh",20.667272841373144],["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","done",12.266668084560157],["(+.f64 eps (*.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",32.65442155745041],["(-.f64 (*.f64 (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3)) (tan.f64 x))","fresh",53.269693603246346]],"compiler":[[25,17],[38,23],[46,21],[60,31],[33,20],[41,25],[27,17],[130,57],[76,50],[33,20],[48,26],[47,21],[28,16],[30,15],[29,16],[47,20],[56,25],[15,11],[24,17]],"count":[[286,19]],"kept":[{"done":[0,0],"fresh":[19,14],"new":[266,4],"picked":[1,1]}],"min-error":[0.1072473719543147],"time":95.670166015625,"type":"prune"},{"accuracy":[0.33600407481657546],"baseline":[12.266668084560157],"branch":[["x",10.024132887160121,3],["eps",0.33600407481657546,3],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",6.740659438467703,3],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",6.740659438467703,3]],"compiler":[[3,2],[3,2],[9,6],[9,6],[1398,547]],"count":[[35,3]],"inputs":[["(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (fma.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (+.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) -1)) (neg.f64 (tan.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 eps)) 2)) (cbrt.f64 (tan.f64 eps))) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (/.f64 (sin.f64 eps) (cos.f64 x))) (cos.f64 eps)))) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (*.f64 (pow.f64 (sin.f64 x) 2) (/.f64 eps (pow.f64 (cos.f64 x) 2))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (*.f64 eps (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (log.f64 (exp.f64 (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (cbrt.f64 (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))) (/.f64 (sin.f64 eps) (cbrt.f64 (cos.f64 eps)))) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (log.f64 (exp.f64 (tan.f64 x))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (-.f64 (*.f64 (neg.f64 (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (sin.f64 x))) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) -1) (cos.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (fma.f64 (neg.f64 (tan.f64 x)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 eps) -1)) (neg.f64 (tan.f64 x))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))","(fma.f64 (+.f64 (tan.f64 x) (*.f64 (sin.f64 eps) (/.f64 1 (cos.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (*.f64 (cbrt.f64 (pow.f64 (tan.f64 eps) 2)) (cbrt.f64 (tan.f64 eps)))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 x)))) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 eps)))))) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2) 3) (cbrt.f64 (tan.f64 x))) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 x 3) (neg.f64 (+.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) (-.f64 1/6 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))))) (+.f64 0 (*.f64 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2)) -1/2)))) (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (cos.f64 eps) 2))) (*.f64 x x)) (fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2) (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(fma.f64 (sin.f64 (+.f64 x eps)) (/.f64 1 (cos.f64 (+.f64 x eps))) (neg.f64 (tan.f64 x)))","(-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))))) (tan.f64 x))","(pow.f64 (cbrt.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))) 3)","(+.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (/.f64 1 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (cos.f64 x))) (sin.f64 x) (*.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))","(fma.f64 (pow.f64 eps 3) (+.f64 (neg.f64 (*.f64 (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) -1/3)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (fma.f64 eps (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (*.f64 (*.f64 (sin.f64 x) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))) (/.f64 (*.f64 eps eps) (cos.f64 x)))))","(+.f64 (*.f64 eps (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (+.f64 (/.f64 (*.f64 (pow.f64 eps 2) (*.f64 (sin.f64 x) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))))) (cos.f64 x)) (*.f64 -1 (*.f64 (pow.f64 eps 3) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1/6 (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (pow.f64 (cos.f64 x) 2))) (*.f64 -1/2 (-.f64 1 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))))))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (sin.f64 x))) (*.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)))","(-.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 2) (pow.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 (+.f64 x eps))))) (tan.f64 x))","(+.f64 eps (*.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(-.f64 (*.f64 (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3)) 1/3)) (tan.f64 x))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) 3) (pow.f64 (tan.f64 x) 3)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 x eps)) 2)))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"link":["."],"name":["2tan (problem 3.3.2)"],"oracle":[63.595569095863624],"outputs":[["(-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x)))","(fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))"]],"time":112.8779296875,"times":[["x",27.08203125],["eps",27.932861328125],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",20.967041015625],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",17.90380859375]],"type":"regimes"},{"bstep":[[1.3839758794450668e-5,556910.3939491732,30.72802734375],[-0.000820236557523614,-2.6775802749050807e-8,31.927001953125]],"compiler":[[11,8],[3,2]],"method":["binary-search","binary-search"],"time":63.10693359375,"type":"bsearch"},{"compiler":[[237,96]],"egraph":[[5,158,377,0.000985374],[4,155,377,0.0008049159999999999],[3,144,377,0.0006095409999999999],[2,123,377,0.00042129099999999996],[1,96,377,0.000258583],[0,68,377,0.000107583]],"inputs":[["(if (<=.f64 eps -7565346928269325/9223372036854775808) (-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x))) (if (<=.f64 eps 510596977046205/36893488147419103232) (fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps)))) (+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 eps -7565346928269325/9223372036854775808) (-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (/.f64 (sin.f64 x) (cos.f64 x))) (if (<=.f64 eps 510596977046205/36893488147419103232) (fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps)))) (+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))))","(if (<=.f64 eps -7565346928269325/9223372036854775808) (-.f64 (+.f64 (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (-.f64 1 (/.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) (-.f64 1 (/.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (/.f64 (sin.f64 x) (cos.f64 x))) (if (<=.f64 eps 510596977046205/36893488147419103232) (fma.f64 (pow.f64 eps 4) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))) (*.f64 (/.f64 -1/3 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))) (cos.f64 x)) (sin.f64 x) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)))) (fma.f64 eps (*.f64 eps (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3))) (fma.f64 (pow.f64 eps 3) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) (+.f64 1/3 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 1/3 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) 3)) (/.f64 (cos.f64 x) (sin.f64 x))))) (fma.f64 eps (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) eps)))) (+.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x)))) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) 1)) (/.f64 (sin.f64 x) (cos.f64 x))))))"]],"stop":[["fuel",1],["saturated",1]],"time":15.110107421875,"type":"simplify"},{"time":0.02099609375,"type":"soundness"},{"compiler":[[237,96]],"remove-preprocessing":[[]],"time":46.36083984375,"type":"end"}]
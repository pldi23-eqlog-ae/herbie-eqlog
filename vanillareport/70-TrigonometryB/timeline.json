[{"compiler":[[17,9]],"method":["search"],"sampling":[[12,0.499755859375,0.499755859375,0.00048828125],[11,0.499755859375,0.499755859375,0.00048828125],[10,0.499755859375,0.499755859375,0.00048828125],[9,0.499755859375,0.499755859375,0.00048828125],[8,0.499755859375,0.499755859375,0.00048828125],[7,0.499755859375,0.499755859375,0.00048828125],[6,0.499755859375,0.499755859375,0.00048828125],[5,0.499755859375,0.499755859375,0.00048828125],[4,0.499755859375,0.499755859375,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":87.14794921875,"type":"analyze"},{"outcomes":[["body",1024,"valid",347.697021484375,2085],["body",512,"valid",107.327392578125,1035],["body",2048,"valid",0.81005859375,3],["body",256,"valid",250.91259765625,5133]],"time":714.93603515625,"type":"sample"},{"compiler":[[16,8]],"egraph":[[0,1,1,1.208e-6],[10,7012,22,0.040238502],[9,3898,22,0.027682543],[8,1535,22,0.014026376],[7,616,22,0.005483751],[6,281,22,0.002384334],[5,169,22,0.001375876],[4,99,22,0.000824209],[3,49,22,0.000444251],[2,31,22,0.000243876],[1,19,22,0.000131126],[0,8,24,6.0167e-5]],"inputs":[["0"],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 x) 1))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":63.324951171875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,7012,22,0.039837040000000004],[9,3898,22,0.027398582],[8,1535,22,0.013951166000000001],[7,616,22,0.005500166000000001],[6,281,22,0.002416749],[5,169,22,0.001382749],[4,99,22,0.000824041],[3,49,22,0.00044408299999999996],[2,31,22,0.000239166],[1,19,22,0.000126208],[0,8,24,5.5541e-5]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 x) 1))"]],"stop":[["node limit",1]],"time":51.451904296875,"type":"simplify"},{"compiler":[[30,13]],"time":0.401123046875,"type":"eval"},{"alts":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 x) 1))","fresh",0.441558896681231],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","next",0.43852136707707645]],"compiler":[[15,8],[16,8],[15,8],[16,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.4268026170770764],"time":1.73388671875,"type":"prune"},{"compiler":[[39,13]],"locations":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))",0.16015625,true],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))",0.16336319020555173,true],["(*.f64 (tan.f64 x) (tan.f64 x))",0.27181625976844204,true],["(tan.f64 x)",0.2871475586106521,true]],"time":6.802001953125,"type":"localize"},{"count":[[4,48]],"series":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","x","-inf",0.921875],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","x","inf",0.554931640625],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","x","0",0.2490234375],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","x","-inf",0.18408203125],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","x","inf",0.208984375],["(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","x","0",0.200927734375],["(*.f64 (tan.f64 x) (tan.f64 x))","x","-inf",0.380126953125],["(*.f64 (tan.f64 x) (tan.f64 x))","x","inf",0.401123046875],["(*.f64 (tan.f64 x) (tan.f64 x))","x","0",0.433837890625],["(tan.f64 x)","x","-inf",0.407958984375],["(tan.f64 x)","x","inf",0.447998046875],["(tan.f64 x)","x","0",0.399169921875]],"time":4.962158203125,"type":"series"},{"count":[[4,280]],"egraph":[[2,2553,38,0.024025083],[1,180,38,0.0033913330000000003],[0,8,38,0.000233042]],"inputs":[["(tan.f64 x)","(*.f64 (tan.f64 x) (tan.f64 x))","(-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x)))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (tan.f64 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 x)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) (pow.f64 1 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 x)) (sqrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (pow.f64 (/.f64 1 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4)) (pow.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 5) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (sqrt.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (tan.f64 x))) (pow.f64 (pow.f64 (tan.f64 x) 3/2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4)) (sqrt.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4)) 1) (pow.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (tan.f64 x) 3/2) 1/2) (sqrt.f64 (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 5) 1/2) (sqrt.f64 (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 4) 1/3) (cbrt.f64 (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (tan.f64 x) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (tan.f64 x))) 2) 3) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (tan.f64 x))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (tan.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (sin.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 x)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 (log1p.f64 (pow.f64 (tan.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 1 (tan.f64 x)) (hypot.f64 1 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (-.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2)) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (/.f64 1 (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (pow.f64 (/.f64 1 (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (+.f64 1 (pow.f64 (tan.f64 x) 6))) 1) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 2) 3) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2)) (-.f64 1 (pow.f64 (tan.f64 x) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6)) (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 6))) (neg.f64 (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (fma.f64 -1 (pow.f64 (tan.f64 x) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (*.f64 -1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 2) (neg.f64 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 2)) (-.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) 1) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 4)) (hypot.f64 1 (tan.f64 x))) (hypot.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2)) (-.f64 1 (pow.f64 (tan.f64 x) 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) (neg.f64 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) 2) (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (sqrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4)) (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (tan.f64 x)) 1) (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (cbrt.f64 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (tan.f64 x)) (sqrt.f64 (tan.f64 x))) (sqrt.f64 (tan.f64 x)) 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (fma.f64 (neg.f64 (sqrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2))) (sqrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x)))) (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (pow.f64 (tan.f64 x) 2) (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (pow.f64 (tan.f64 x) 2) (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (pow.f64 (tan.f64 x) 2) (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (pow.f64 (tan.f64 x) 2) (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (pow.f64 (tan.f64 x) 2) (*.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1))) (fma.f64 (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 1 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1))) (fma.f64 (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 1 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1))) (fma.f64 (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 1 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1))) (fma.f64 (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 1 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1))) (fma.f64 (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 1 (*.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6)))))) (fma.f64 (neg.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2)))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6)))))) (fma.f64 (neg.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2)))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6)))))) (fma.f64 (neg.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2)))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6)))))) (fma.f64 (neg.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2)))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6)))))) (fma.f64 (neg.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2)))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (*.f64 (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (tan.f64 x) 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))) (cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 4)) (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 -1 (pow.f64 (tan.f64 x) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (/.f64 1 (fma.f64 -1 (pow.f64 (tan.f64 x) 2) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (pow.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 1 (tan.f64 x))) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) 1) 1) (pow.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1) 1) (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) 1) (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) 1) (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) 1) (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (hypot.f64 1 (tan.f64 x))) 1) (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (hypot.f64 1 (tan.f64 x))) 1) (pow.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (-.f64 1 (pow.f64 (tan.f64 x) 4))) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (pow.f64 (tan.f64 x) 6))) 1) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 6)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 4) (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1/3) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 5/2) 1/3) (cbrt.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))) 2) 3) (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 2) -1) (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)) 1) -1) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2) (-.f64 1 (pow.f64 (tan.f64 x) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (hypot.f64 1 (tan.f64 x)) 1) -1) (pow.f64 (/.f64 (hypot.f64 1 (tan.f64 x)) (-.f64 1 (pow.f64 (tan.f64 x) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) -2) -1) (pow.f64 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2)) -1) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (hypot.f64 1 (tan.f64 x)) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2)) -1) (pow.f64 (/.f64 (hypot.f64 1 (tan.f64 x)) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) -1/2) -1) (pow.f64 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)) (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1) (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2) (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (hypot.f64 1 (tan.f64 x)) (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1) (pow.f64 (/.f64 (hypot.f64 1 (tan.f64 x)) (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (-.f64 1 (pow.f64 (tan.f64 x) 6))) -1) (/.f64 1 (+.f64 (+.f64 1 (pow.f64 (tan.f64 x) 4)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (-.f64 1 (pow.f64 (tan.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) (pow.f64 (hypot.f64 1 (tan.f64 x)) 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 2) (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 -1 (pow.f64 (tan.f64 x) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) (pow.f64 (hypot.f64 1 (tan.f64 x)) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (log1p.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (log1p.f64 (pow.f64 (tan.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (tan.f64 x) 6))) (+.f64 1 (-.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (tan.f64 x) 2))) (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (pow.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) 2)))))))"]],"rules":[["egg-rr",138],["egg-rr",64],["egg-rr",33],["egg-rr",45]],"stop":[["node limit",1]],"time":72.972900390625,"type":"rewrite"},{"count":[[328,311]],"egraph":[[4,3136,793,0.018836707],[3,1369,793,0.008074832],[2,418,793,0.003204707],[1,171,795,0.001136541],[0,67,802,0.000326291]],"inputs":[["x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(pow.f64 x 2)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 17/315 (pow.f64 x 7) (fma.f64 2/15 (pow.f64 x 5) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 2/3 (pow.f64 x 4) (*.f64 x x))","(fma.f64 x x (*.f64 2/3 (pow.f64 x 4)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 x x (*.f64 17/45 (pow.f64 x 6))))","(fma.f64 x x (fma.f64 2/3 (pow.f64 x 4) (*.f64 17/45 (pow.f64 x 6))))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 62/315 (pow.f64 x 8) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 x x (fma.f64 62/315 (pow.f64 x 8) (*.f64 17/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 x x (fma.f64 17/45 (pow.f64 x 6) (*.f64 62/315 (pow.f64 x 8)))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (neg.f64 (*.f64 x x)))","(-.f64 1 (*.f64 x x))","(neg.f64 (fma.f64 x x -1))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(fma.f64 -2/3 (pow.f64 x 4) (+.f64 1 (neg.f64 (*.f64 x x))))","(-.f64 (fma.f64 (pow.f64 x 4) -2/3 1) (*.f64 x x))","(-.f64 1 (fma.f64 x x (*.f64 2/3 (pow.f64 x 4))))","(-.f64 1 (fma.f64 2/3 (pow.f64 x 4) (*.f64 x x)))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(fma.f64 -2/3 (pow.f64 x 4) (+.f64 1 (fma.f64 -1 (*.f64 x x) (*.f64 (pow.f64 x 6) -17/45))))","(+.f64 (-.f64 (*.f64 (pow.f64 x 6) -17/45) (*.f64 x x)) (fma.f64 (pow.f64 x 4) -2/3 1))","(fma.f64 (pow.f64 x 4) -2/3 (-.f64 (fma.f64 (pow.f64 x 6) -17/45 1) (*.f64 x x)))","(-.f64 (fma.f64 (pow.f64 x 4) -2/3 1) (fma.f64 x x (*.f64 17/45 (pow.f64 x 6))))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(fma.f64 -2 (*.f64 x x) 1)","(fma.f64 (*.f64 x x) -2 1)","(fma.f64 x (*.f64 x -2) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) 1))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 (*.f64 x x) -2 1))","(fma.f64 x (*.f64 x -2) (fma.f64 2/3 (pow.f64 x 4) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) (+.f64 1 (*.f64 (pow.f64 x 6) -4/45))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 (*.f64 x x) -2 (fma.f64 (pow.f64 x 6) -4/45 1)))","(fma.f64 x (*.f64 x -2) (fma.f64 2/3 (pow.f64 x 4) (fma.f64 (pow.f64 x 6) -4/45 1)))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)) 1))"]],"stop":[["node limit",1]],"time":42.924072265625,"type":"simplify"},{"compiler":[[14090,8407]],"time":146.1259765625,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))","fresh",0.641012544096335],["(/.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.6378685539972266],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.4083889715528792],["(+.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))","fresh",0.6294476092510387],["(/.f64 (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (cos.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",0.4761478632405513],["(*.f64 (/.f64 1 (hypot.f64 1 (tan.f64 x))) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))))","fresh",0.5340919441047642],["(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))))))","fresh",0.8477552653212466],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))))))","fresh",1.2304608582680778],["(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))","fresh",0.8855319544625305],["(+.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))","fresh",0.5666659534853238],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","next",0.38538083753755886],["(log.f64 (pow.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))","fresh",1.3348523979901121],["(+.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))","fresh",0.6903821416922068],["(*.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))","fresh",0.5252541511169503],["(/.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","fresh",1.3224185904629617]],"compiler":[[67,46],[36,25],[19,12],[69,48],[19,12],[19,14],[82,50],[28,21],[100,68],[61,40],[24,18],[16,13],[66,47],[21,16],[30,23],[67,46],[36,25],[19,12],[69,48],[19,12],[19,14],[82,50],[28,21],[100,68],[61,40],[24,18],[16,13],[66,47],[21,16],[30,23]],"count":[[510,15]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[508,15],"picked":[1,0]}],"min-error":[0.01688253162065376],"time":294.468994140625,"type":"prune"},{"compiler":[[70,43]],"locations":[["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))",0.16015625,true],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))",0.16336319020555173,true],["(pow.f64 (sin.f64 x) 2)",0.240566259768442,true],["(pow.f64 (cos.f64 x) 2)",0.25228500976844204,true]],"time":15.2900390625,"type":"localize"},{"count":[[4,16]],"series":[["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","-inf",0.340087890625],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","inf",0.343017578125],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","x","0",0.180908203125],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","x","-inf",0.4228515625],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","x","inf",0.428955078125],["(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","x","0",0.18310546875],["(pow.f64 (sin.f64 x) 2)","x","-inf",0.299072265625],["(pow.f64 (sin.f64 x) 2)","x","inf",0.294189453125],["(pow.f64 (sin.f64 x) 2)","x","0",0.257080078125],["(pow.f64 (cos.f64 x) 2)","x","-inf",0.302001953125],["(pow.f64 (cos.f64 x) 2)","x","inf",0.31298828125],["(pow.f64 (cos.f64 x) 2)","x","0",0.27490234375]],"time":3.784912109375,"type":"series"},{"count":[[4,225]],"egraph":[[2,3529,41,0.028236041],[1,265,56,0.004724125],[0,12,65,0.000348958]],"inputs":[["(pow.f64 (cos.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2)))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 x) 2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 x) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cos.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) (cbrt.f64 (pow.f64 (cos.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) (*.f64 (cbrt.f64 (cos.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) (*.f64 (sqrt.f64 (cos.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) 3) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 (-.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 x) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cos.f64 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (sin.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (cbrt.f64 (pow.f64 (sin.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (*.f64 (cbrt.f64 (sin.f64 x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (pow.f64 (cbrt.f64 (sin.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) 3) (sqrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 x x)) (cos.f64 (+.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (sin.f64 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (/.f64 1 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)) (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (fma.f64 -1 (pow.f64 (tan.f64 x) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) (neg.f64 (pow.f64 (tan.f64 x) 2))) (neg.f64 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)) (neg.f64 (pow.f64 (tan.f64 x) 2)))) (-.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)) 1) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)) (hypot.f64 1 (tan.f64 x))) (hypot.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1) 1) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 x) 2) (neg.f64 (pow.f64 (cos.f64 x) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) (neg.f64 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (pow.f64 (cos.f64 x) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2)))) (cbrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (sqrt.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (tan.f64 x)) (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (sqrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x)))) (/.f64 (tan.f64 x) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 1 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2)))) (fma.f64 (neg.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (tan.f64 x) 2) (*.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (tan.f64 x) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (tan.f64 x) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) (hypot.f64 1 (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (/.f64 (pow.f64 (tan.f64 x) 2) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 2) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 1 (fma.f64 -1 (pow.f64 (tan.f64 x) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 1 (tan.f64 x))) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (hypot.f64 1 (tan.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) (-.f64 1 (pow.f64 (tan.f64 x) 2))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 -1 (pow.f64 (tan.f64 x) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) 3) (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (log1p.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 (pow.f64 (tan.f64 x) 2))) (log1p.f64 (pow.f64 (tan.f64 x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))) (fma.f64 (pow.f64 (tan.f64 x) 2) (-.f64 (pow.f64 (tan.f64 x) 2) 1) 1) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))))))"]],"rules":[["egg-rr",124],["egg-rr",55],["egg-rr",23],["egg-rr",23]],"stop":[["node limit",1]],"time":80.34814453125,"type":"rewrite"},{"count":[[241,250]],"egraph":[[4,5016,190,0.019970584],[3,1132,190,0.009001124999999999],[2,341,192,0.002508458],[1,132,196,0.000852125],[0,53,207,0.000234]],"inputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 -2/45 (pow.f64 x 6)) (*.f64 1/3 (pow.f64 x 4)))))","(pow.f64 x 2)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (neg.f64 (*.f64 x x)))","(-.f64 1 (*.f64 x x))","(fma.f64 x (neg.f64 x) 1)","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1 (*.f64 x x) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 (-.f64 1 (*.f64 x x)) (*.f64 1/3 (pow.f64 x 4)))","(fma.f64 1/3 (pow.f64 x 4) (fma.f64 x (neg.f64 x) 1))","(-.f64 (*.f64 1/3 (pow.f64 x 4)) (fma.f64 x x -1))","(-.f64 1 (fma.f64 x x (*.f64 (pow.f64 x 4) -1/3)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (+.f64 (*.f64 -2/45 (pow.f64 x 6)) (*.f64 1/3 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 -1 (*.f64 x x) (fma.f64 -2/45 (pow.f64 x 6) (*.f64 1/3 (pow.f64 x 4)))))","(+.f64 (-.f64 1 (*.f64 x x)) (fma.f64 -2/45 (pow.f64 x 6) (*.f64 1/3 (pow.f64 x 4))))","(+.f64 (fma.f64 1/3 (pow.f64 x 4) (fma.f64 x (neg.f64 x) 1)) (*.f64 -2/45 (pow.f64 x 6)))","(-.f64 (fma.f64 1/3 (pow.f64 x 4) (*.f64 -2/45 (pow.f64 x 6))) (fma.f64 x x -1))","(-.f64 1 (fma.f64 (pow.f64 x 6) 2/45 (fma.f64 x x (*.f64 (pow.f64 x 4) -1/3))))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 -1/3 (pow.f64 x 4) (*.f64 x x))","(fma.f64 (pow.f64 x 4) -1/3 (*.f64 x x))","(fma.f64 x x (*.f64 (pow.f64 x 4) -1/3))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x)))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 x x (*.f64 (pow.f64 x 6) 2/45)))","(fma.f64 x x (fma.f64 (pow.f64 x 6) 2/45 (*.f64 (pow.f64 x 4) -1/3)))","(fma.f64 (pow.f64 x 6) 2/45 (fma.f64 x x (*.f64 (pow.f64 x 4) -1/3)))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 -1/315 (pow.f64 x 8) (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x))))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 -1/315 (pow.f64 x 8) (fma.f64 x x (*.f64 (pow.f64 x 6) 2/45))))","(fma.f64 -1/315 (pow.f64 x 8) (fma.f64 x x (fma.f64 (pow.f64 x 6) 2/45 (*.f64 (pow.f64 x 4) -1/3))))","(fma.f64 x x (fma.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 4) -1/315 -1/3) (*.f64 (pow.f64 x 6) 2/45)))","1","(+.f64 1 (*.f64 -1 (pow.f64 x 2)))","(+.f64 1 (neg.f64 (*.f64 x x)))","(-.f64 1 (*.f64 x x))","(fma.f64 x (neg.f64 x) 1)","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (*.f64 -1 (pow.f64 x 2))))","(fma.f64 -2/3 (pow.f64 x 4) (+.f64 1 (neg.f64 (*.f64 x x))))","(-.f64 (fma.f64 (pow.f64 x 4) -2/3 1) (*.f64 x x))","(fma.f64 (pow.f64 x 4) -2/3 (fma.f64 x (neg.f64 x) 1))","(-.f64 (*.f64 (pow.f64 x 4) -2/3) (fma.f64 x x -1))","(-.f64 1 (fma.f64 x x (*.f64 (pow.f64 x 4) 2/3)))","(+.f64 (*.f64 -2/3 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1 (pow.f64 x 2)) (*.f64 -17/45 (pow.f64 x 6)))))","(fma.f64 -2/3 (pow.f64 x 4) (+.f64 1 (fma.f64 -1 (*.f64 x x) (*.f64 (pow.f64 x 6) -17/45))))","(+.f64 (fma.f64 (pow.f64 x 6) -17/45 (*.f64 x (neg.f64 x))) (fma.f64 (pow.f64 x 4) -2/3 1))","(fma.f64 (pow.f64 x 4) -2/3 (-.f64 (fma.f64 (pow.f64 x 6) -17/45 1) (*.f64 x x)))","(-.f64 (fma.f64 (pow.f64 x 4) -2/3 (fma.f64 (pow.f64 x 6) -17/45 1)) (*.f64 x x))","(-.f64 (fma.f64 (pow.f64 x 4) -2/3 1) (fma.f64 x x (*.f64 (pow.f64 x 6) 17/45)))","1","(+.f64 (*.f64 -2 (pow.f64 x 2)) 1)","(fma.f64 -2 (*.f64 x x) 1)","(fma.f64 (*.f64 x x) -2 1)","(fma.f64 x (*.f64 x -2) 1)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 1))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 -2 (*.f64 x x) 1))","(fma.f64 (pow.f64 x 4) 2/3 (fma.f64 (*.f64 x x) -2 1))","(fma.f64 x (*.f64 x -2) (fma.f64 (pow.f64 x 4) 2/3 1))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 1 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (+.f64 (fma.f64 -2 (*.f64 x x) 1) (*.f64 (pow.f64 x 6) -4/45)))","(fma.f64 (pow.f64 x 4) 2/3 (fma.f64 (*.f64 x x) -2 (fma.f64 (pow.f64 x 6) -4/45 1)))","(fma.f64 (pow.f64 x 4) 2/3 (fma.f64 (pow.f64 x 6) -4/45 (fma.f64 x (*.f64 x -2) 1)))","(fma.f64 x (*.f64 x -2) (fma.f64 (pow.f64 x 6) -4/45 (fma.f64 (pow.f64 x 4) 2/3 1)))"]],"stop":[["node limit",1]],"time":37.034912109375,"type":"simplify"},{"compiler":[[12909,8222]],"time":133.544921875,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))","fresh",0.5666659534853238],["(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))","fresh",0.5324609608083609],["(/.f64 (-.f64 1 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.40866392986495487],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","done",0.38538083753755886],["(-.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) 1)","fresh",0.4891751160770161],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","next",0.4083889715528792],["(fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","fresh",0.5558742664309577],["(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))","fresh",0.6839397424362853],["(log.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","fresh",0.5575535528293227],["(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))","fresh",0.5815713917517471],["(/.f64 (-.f64 1 (/.f64 (log.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.4587698043362147],["(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))","fresh",0.5693438535764525]],"compiler":[[61,40],[95,58],[28,22],[24,18],[18,13],[19,12],[42,25],[87,60],[16,11],[68,43],[26,20],[74,53],[61,40],[95,58],[28,22],[18,13],[19,12],[42,25],[87,60],[16,11],[68,43],[26,20],[74,53]],"count":[[326,12]],"kept":[{"done":[0,0],"fresh":[14,2],"new":[311,9],"picked":[1,1]}],"min-error":[0.01688253162065376],"time":145.26904296875,"type":"prune"},{"compiler":[[62,17]],"locations":[["(/.f64 (sin.f64 x) (cos.f64 x))",0.17578125,true],["(*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))",0.27181625976844204,true],["(*.f64 (tan.f64 x) (tan.f64 x))",0.27181625976844204,false],["(tan.f64 x)",0.2871475586106521,false]],"time":11.625,"type":"localize"},{"count":[[2,16]],"series":[["(/.f64 (sin.f64 x) (cos.f64 x))","x","-inf",0.141845703125],["(/.f64 (sin.f64 x) (cos.f64 x))","x","inf",0.159912109375],["(/.f64 (sin.f64 x) (cos.f64 x))","x","0",0.155029296875],["(*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))","x","-inf",1.3740234375],["(*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))","x","inf",0.51806640625],["(*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))","x","0",0.3330078125]],"time":2.762939453125,"type":"series"},{"count":[[2,63]],"egraph":[[2,1648,9,0.017351083],[1,146,9,0.0022175],[0,7,11,0.000177167]],"inputs":[["(*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (*.f64 (cos.f64 x) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (*.f64 (/.f64 1 (tan.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 x) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 1 (tan.f64 x)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (*.f64 (/.f64 1 (tan.f64 x)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 1) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) 1) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (sqrt.f64 (cos.f64 x))) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (tan.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 x)) (sqrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (/.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2)) (sqrt.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) 1) (/.f64 (cbrt.f64 (sin.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 x)) 1) (/.f64 (sqrt.f64 (sin.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (/.f64 (sqrt.f64 (sin.f64 x)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (cos.f64 x))) (/.f64 (sin.f64 x) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (sqrt.f64 (cos.f64 x))) (/.f64 (cbrt.f64 (sin.f64 x)) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 x) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 x)))))"]],"rules":[["egg-rr",34],["egg-rr",29]],"stop":[["node limit",1]],"time":38.18603515625,"type":"rewrite"},{"count":[[79,78]],"egraph":[[5,7780,216,0.028485791000000003],[4,3707,216,0.016333374],[3,778,216,0.006549749],[2,259,216,0.001926957],[1,108,216,0.0007380819999999999],[0,42,216,0.000212291]],"inputs":[["(pow.f64 x 2)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 2/3 (pow.f64 x 4) (*.f64 x x))","(fma.f64 x x (*.f64 2/3 (pow.f64 x 4)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 x x (*.f64 17/45 (pow.f64 x 6))))","(fma.f64 x x (fma.f64 17/45 (pow.f64 x 6) (*.f64 2/3 (pow.f64 x 4))))","(fma.f64 x x (fma.f64 2/3 (pow.f64 x 4) (*.f64 17/45 (pow.f64 x 6))))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 62/315 (pow.f64 x 8) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 62/315 (pow.f64 x 8) (fma.f64 x x (*.f64 17/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 17/45 (pow.f64 x 6) (fma.f64 x x (*.f64 62/315 (pow.f64 x 8)))))","(fma.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 4) 62/315 2/3) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 17/45 (pow.f64 x 6) (fma.f64 62/315 (pow.f64 x 8) (*.f64 x x))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) (fma.f64 17/315 (pow.f64 x 7) x)))"]],"stop":[["node limit",1]],"time":42.900146484375,"type":"simplify"},{"compiler":[[6297,2800]],"time":51.81689453125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))","fresh",0.5666659534853238],["(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))","fresh",0.5324609608083609],["(/.f64 (-.f64 1 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.40866392986495487],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","done",0.38538083753755886],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))))","next",0.35952902271041687],["(-.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) 1)","fresh",0.4891751160770161],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","done",0.4083889715528792],["(fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","fresh",0.5558742664309577],["(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))","fresh",0.6839397424362853],["(log.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","fresh",0.5575535528293227],["(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))","fresh",0.5815713917517471],["(/.f64 (-.f64 1 (/.f64 (log.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.4587698043362147],["(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))","fresh",0.5693438535764525]],"compiler":[[61,40],[95,58],[28,22],[24,18],[22,12],[18,13],[19,12],[42,25],[87,60],[16,11],[68,43],[26,20],[74,53],[61,40],[95,58],[28,22],[22,12],[18,13],[42,25],[87,60],[16,11],[68,43],[26,20],[74,53]],"count":[[287,13]],"kept":[{"done":[1,1],"fresh":[10,10],"new":[275,1],"picked":[1,1]}],"min-error":[0.01297628162065376],"time":107.5048828125,"type":"prune"},{"compiler":[[71,17]],"locations":[["(/.f64 (sin.f64 x) (cos.f64 x))",0.17578125,false],["(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))",0.27181625976844204,true],["(*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))",0.27181625976844204,false],["(tan.f64 x)",0.2871475586106521,false]],"time":12.029052734375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))","x","-inf",0.1640625],["(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))","x","inf",0.429931640625],["(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))","x","0",0.214111328125]],"time":0.861083984375,"type":"series"},{"count":[[1,30]],"egraph":[[2,1653,6,0.01762371],[1,146,6,0.002248251],[0,7,8,0.000177542]],"inputs":[["(*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (tan.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (*.f64 (cos.f64 x) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (*.f64 (/.f64 1 (tan.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (/.f64 (cos.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 x) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 1 (tan.f64 x)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 x) (*.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (*.f64 (/.f64 1 (tan.f64 x)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 1) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) 1) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (sqrt.f64 (cos.f64 x))) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (tan.f64 x) (neg.f64 (sin.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (tan.f64 x) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (tan.f64 x) 2)))))))"]],"rules":[["egg-rr",30]],"stop":[["node limit",1]],"time":35.554931640625,"type":"rewrite"},{"count":[[42,38]],"egraph":[[7,7505,170,0.041187125],[6,6897,170,0.030793083],[5,6494,170,0.021289999999999996],[4,2130,170,0.011701416999999999],[3,432,170,0.003846042],[2,147,170,0.0011407919999999998],[1,64,170,0.000465542],[0,26,170,0.000149125]],"inputs":[["(pow.f64 x 2)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 2/3 (pow.f64 x 4) (*.f64 x x))","(fma.f64 x x (*.f64 2/3 (pow.f64 x 4)))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x)))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 x x (*.f64 17/45 (pow.f64 x 6))))","(fma.f64 x x (fma.f64 2/3 (pow.f64 x 4) (*.f64 17/45 (pow.f64 x 6))))","(fma.f64 x x (fma.f64 17/45 (pow.f64 x 6) (*.f64 2/3 (pow.f64 x 4))))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 62/315 (pow.f64 x 8)) (+.f64 (*.f64 17/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 62/315 (pow.f64 x 8) (fma.f64 17/45 (pow.f64 x 6) (*.f64 x x))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 62/315 (pow.f64 x 8) (fma.f64 x x (*.f64 17/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 x x (fma.f64 17/45 (pow.f64 x 6) (*.f64 62/315 (pow.f64 x 8)))))","(fma.f64 x x (fma.f64 17/45 (pow.f64 x 6) (*.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 4) 62/315 2/3))))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))","(/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))"]],"stop":[["node limit",1]],"time":55.741943359375,"type":"simplify"},{"compiler":[[6530,2575]],"time":48.086181640625,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))","fresh",0.5666659534853238],["(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))","fresh",0.5324609608083609],["(/.f64 (-.f64 1 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.40866392986495487],["(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","done",0.38538083753755886],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))))","done",0.35952902271041687],["(-.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) 1)","fresh",0.4891751160770161],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","done",0.4083889715528792],["(fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","fresh",0.5558742664309577],["(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))","fresh",0.6839397424362853],["(log.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","fresh",0.5575535528293227],["(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))","fresh",0.5815713917517471],["(/.f64 (-.f64 1 (/.f64 (log.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","fresh",0.4587698043362147],["(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))","fresh",0.5693438535764525]],"compiler":[[61,40],[95,58],[28,22],[24,18],[22,12],[18,13],[19,12],[42,25],[87,60],[16,11],[68,43],[26,20],[74,53]],"count":[[274,13]],"kept":[{"done":[2,2],"fresh":[10,10],"new":[261,0],"picked":[1,1]}],"min-error":[0.01297628162065376],"time":96.3359375,"type":"prune"},{"accuracy":[0.35952902271041687],"baseline":[0.35952902271041687],"branch":[["x",0.35952902271041687,1],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))",0.35952902271041687,1],["(*.f64 (tan.f64 x) (tan.f64 x))",0.359529022710417,1],["(tan.f64 x)",0.35952902271041687,1],["(tan.f64 x)",0.35952902271041687,1]],"compiler":[[2,1],[16,8],[6,3],[3,2],[3,2],[1138,716]],"count":[[27,1]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (sqrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (cbrt.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (tan.f64 x) (tan.f64 x) 1) 2))))))","(/.f64 (-.f64 1 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 x x)))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(-.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) 1)","(fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)))) (cbrt.f64 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) 2) 1))))","(log.f64 (exp.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (fma.f64 (tan.f64 x) (tan.f64 x) 1))))","(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1))) (/.f64 (pow.f64 (sin.f64 x) 2) 1) (*.f64 (/.f64 (pow.f64 (cos.f64 x) -2) (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (/.f64 (pow.f64 (sin.f64 x) 2) 1))))","(/.f64 (-.f64 1 (/.f64 (log.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(+.f64 (fma.f64 1 (/.f64 1 (fma.f64 (tan.f64 x) (tan.f64 x) 1)) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (pow.f64 (tan.f64 x) 2) 2))))))","(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))","(/.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 4) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(+.f64 (fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 1 (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 1 (hypot.f64 1 (tan.f64 x))))))","(/.f64 (-.f64 1 (/.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (cos.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(*.f64 (/.f64 1 (hypot.f64 1 (tan.f64 x))) (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (hypot.f64 1 (tan.f64 x))))","(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (hypot.f64 1 (tan.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (hypot.f64 1 (tan.f64 x))))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (tan.f64 x) 2)))))))","(+.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2))) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (pow.f64 (cbrt.f64 (hypot.f64 1 (tan.f64 x))) 2)) (/.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 4) (cbrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) 4))))))","(+.f64 (fma.f64 (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (sqrt.f64 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)) (neg.f64 (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2))) (/.f64 (tan.f64 x) 1) (*.f64 (/.f64 (tan.f64 x) (pow.f64 (hypot.f64 1 (tan.f64 x)) 2)) (/.f64 (tan.f64 x) 1))))","(/.f64 (-.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (+.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))))","(log.f64 (pow.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (pow.f64 (hypot.f64 1 (tan.f64 x)) -2)))","(+.f64 (fma.f64 1 (pow.f64 (hypot.f64 1 (tan.f64 x)) -2) (neg.f64 (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4)))))) (fma.f64 (neg.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2))) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (*.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (/.f64 (pow.f64 (tan.f64 x) 2) (-.f64 1 (pow.f64 (tan.f64 x) 4))))))","(*.f64 (/.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)) (-.f64 1 (pow.f64 (tan.f64 x) 4))) (-.f64 1 (pow.f64 (tan.f64 x) 2)))","(/.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (tan.f64 x) 2)))))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (fma.f64 (tan.f64 x) (tan.f64 x) 1))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))"]],"link":["."],"name":["Trigonometry B"],"oracle":[2.013003151987504],"outputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))))"]],"time":59.52294921875,"times":[["x",8.823974609375],["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))) (+.f64 1 (*.f64 (tan.f64 x) (tan.f64 x))))",8.107177734375],["(*.f64 (tan.f64 x) (tan.f64 x))",6.3349609375],["(tan.f64 x)",8.98291015625],["(tan.f64 x)",8.56396484375]],"type":"regimes"},{"compiler":[[22,11]],"egraph":[[6,50,34,0.00038287499999999997],[5,49,34,0.00032062499999999995],[4,46,34,0.00025749999999999997],[3,40,34,0.00019495799999999999],[2,32,34,0.000136375],[1,21,34,8.5167e-5],[0,12,34,4.0583e-5]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (tan.f64 x))))","(/.f64 (-.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (+.f64 1 (*.f64 (tan.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))))"]],"stop":[["fuel",1],["saturated",1]],"time":10.137939453125,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[22,11]],"remove-preprocessing":[[]],"time":10.748046875,"type":"end"}]
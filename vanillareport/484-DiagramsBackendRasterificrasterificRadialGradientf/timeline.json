[{"compiler":[[13,8]],"method":["search"],"sampling":[[12,0.26523609083778865,0.6884436769539661,0.046320232208245216],[11,0.21842972186641418,0.7469516381681842,0.0346186399654016],[10,0.18722547588549787,0.7918077417657514,0.020966782348750712],[9,0.015602122990458156,0.9751326869036347,0.009265190105907095],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":116.147216796875,"type":"analyze"},{"outcomes":[["body",256,"invalid",68.38671875,1701],["body",256,"valid",337.485107421875,8256]],"time":414.825927734375,"type":"sample"},{"compiler":[[12,7]],"egraph":[[0,3,3,1.917e-6],[8,5780,44,0.039555043],[7,2727,44,0.025021751000000002],[6,1329,44,0.012190043],[5,672,44,0.0056812089999999996],[4,318,44,0.002238834],[3,177,44,0.0009795429999999998],[2,77,44,0.00047020899999999997],[1,35,44,0.00018841799999999998],[0,20,52,7.1459e-5]],"inputs":[["0","1","2"],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(/.f64 (+.f64 y (*.f64 x (-.f64 z y))) z)","(/.f64 (+.f64 z (*.f64 y (-.f64 x z))) x)","(/.f64 (+.f64 x (*.f64 z (-.f64 y x))) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(/.f64 (+.f64 y (*.f64 x (-.f64 z y))) z)","(/.f64 (fma.f64 x (-.f64 z y) y) z)","(/.f64 (+.f64 z (*.f64 y (-.f64 x z))) x)","(/.f64 (fma.f64 y (-.f64 x z) z) x)","(/.f64 (+.f64 x (*.f64 z (-.f64 y x))) y)","(/.f64 (fma.f64 z (-.f64 y x) x) y)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":64.421875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[14,7621,11,0.086401668],[13,7441,11,0.074896251],[12,7246,11,0.062135209000000004],[11,6851,11,0.050574125000000004],[10,6303,11,0.039255375],[9,4893,11,0.028270250000000004],[8,1650,11,0.016080625],[7,580,11,0.005817333],[6,299,11,0.002482875],[5,175,11,0.001309083],[4,101,11,0.000710458],[3,53,11,0.00037129100000000005],[2,25,11,0.000190833],[1,12,11,9.3041e-5],[0,8,13,3.7125e-5]],"inputs":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)"]],"stop":[["node limit",1]],"time":98.527099609375,"type":"simplify"},{"compiler":[[20,11]],"time":0.364013671875,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","next",3.1953125],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","fresh",9.83203125]],"compiler":[[11,7],[12,7],[11,7],[12,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.03125],"time":1.617919921875,"type":"prune"},{"compiler":[[23,13]],"locations":[["(/.f64 (-.f64 1 y) z)",0.00390625,true],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)",3.0264746840131007,true]],"time":5.634033203125,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (-.f64 1 y) z)","z","-inf",0.237060546875],["(/.f64 (-.f64 1 y) z)","z","inf",0.218017578125],["(/.f64 (-.f64 1 y) z)","z","0",0.22900390625],["(/.f64 (-.f64 1 y) z)","y","-inf",0.14990234375],["(/.f64 (-.f64 1 y) z)","y","inf",0.162841796875],["(/.f64 (-.f64 1 y) z)","y","0",0.161865234375],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","z","-inf",0.596923828125],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","z","inf",0.333984375],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","z","0",0.364990234375],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","-inf",0.44482421875],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","inf",0.55712890625],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","0",0.416015625],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","x","-inf",0.426025390625],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","x","inf",0.31005859375],["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","x","0",0.5]],"time":5.303955078125,"type":"series"},{"count":[[2,56]],"egraph":[[2,2294,18,0.020612791000000002],[1,170,18,0.002958208],[0,8,18,0.000211458]],"inputs":[["(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(/.f64 (-.f64 1 y) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 x (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (/.f64 (-.f64 1 y) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 2) (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) (sqrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) 3) (pow.f64 y 3)) (+.f64 (*.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) (*.f64 x (/.f64 (-.f64 1 y) z))) (-.f64 (*.f64 y y) (*.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) (*.f64 x (/.f64 (-.f64 1 y) z))) (*.f64 y y)) (-.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 z) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (*.f64 (cbrt.f64 (-.f64 1 y)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) 2) (cbrt.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 y)) (*.f64 (sqrt.f64 (-.f64 1 y)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 1 y) z)) (sqrt.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 y)) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 (-.f64 1 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 (-.f64 1 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 y)) 1) (/.f64 (sqrt.f64 (-.f64 1 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 y)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (-.f64 1 y)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (-.f64 1 y)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (-.f64 1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 1 y) z)))))))"]],"rules":[["egg-rr",34],["egg-rr",22]],"stop":[["node limit",1]],"time":41.5419921875,"type":"rewrite"},{"count":[[104,74]],"egraph":[[8,2558,433,0.030091501],[7,2415,433,0.024395709],[6,2114,433,0.018075042],[5,1357,433,0.011739626],[4,732,433,0.005772167],[3,340,433,0.0025903339999999997],[2,150,433,0.001064584],[1,66,550,0.000436209],[0,26,608,0.000154792]],"inputs":[["y","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(/.f64 x z)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z))))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(/.f64 1 z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(*.f64 -1 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(*.f64 -1 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (/.f64 (-.f64 1 y) z) x)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (/.f64 (-.f64 1 y) z) x)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 x z)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z))))","(*.f64 y (+.f64 1 (neg.f64 (/.f64 x z))))","(*.f64 y (-.f64 1 (/.f64 x z)))","(-.f64 y (/.f64 (*.f64 y x) z))","(-.f64 y (*.f64 (/.f64 y z) x))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y))","(*.f64 y (+.f64 1 (neg.f64 (/.f64 x z))))","(*.f64 y (-.f64 1 (/.f64 x z)))","(-.f64 y (/.f64 (*.f64 y x) z))","(-.f64 y (*.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (/.f64 (-.f64 1 y) z) x)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 1 z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(*.f64 -1 (/.f64 y z))","(neg.f64 (/.f64 y z))","(/.f64 (neg.f64 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(*.f64 -1 (/.f64 y z))","(neg.f64 (/.f64 y z))","(/.f64 (neg.f64 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(-.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (-.f64 1 y) z)"]],"stop":[["saturated",1]],"time":49.47900390625,"type":"simplify"},{"compiler":[[909,545]],"time":11.802978515625,"type":"eval"},{"alts":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","fresh",9.83203125],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","fresh",3.3509750976844206],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","next",0.0390625]],"compiler":[[12,7],[24,18],[11,7],[12,7],[24,18],[11,7]],"count":[[76,3]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[74,2],"picked":[1,0]}],"min-error":[0.0078125],"time":14.68310546875,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 (-.f64 1 y) (/.f64 x z) y)",0.0390625,true]],"time":4.8330078125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","z","-inf",0.33203125],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","z","inf",0.31689453125],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","z","0",0.333984375],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","x","-inf",0.33984375],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","x","inf",0.39111328125],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","x","0",0.3388671875],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","y","-inf",0.39013671875],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","y","inf",0.267822265625],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","y","0",0.4150390625]],"time":3.2470703125,"type":"series"},{"count":[[1,21]],"egraph":[[2,2219,11,0.020563292],[1,168,11,0.002832667],[0,8,11,0.000208542]],"inputs":[["(fma.f64 (-.f64 1 y) (/.f64 x z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (-.f64 1 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 y) (/.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) (/.f64 x z)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 (-.f64 1 y) (/.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 1 y) (/.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)) 2) (cbrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)) (sqrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (-.f64 1 y) (/.f64 x z)) 3) (pow.f64 y 3)) (+.f64 (*.f64 (*.f64 (-.f64 1 y) (/.f64 x z)) (*.f64 (-.f64 1 y) (/.f64 x z))) (-.f64 (*.f64 y y) (*.f64 (*.f64 (-.f64 1 y) (/.f64 x z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 1 y) (/.f64 x z)) (*.f64 (-.f64 1 y) (/.f64 x z))) (*.f64 y y)) (-.f64 (*.f64 (-.f64 1 y) (/.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (-.f64 1 y) (/.f64 x z) y)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":38.015869140625,"type":"rewrite"},{"count":[[57,34]],"egraph":[[8,2536,354,0.030019333],[7,2393,354,0.024285583],[6,2092,354,0.0179425],[5,1340,354,0.011566375],[4,707,354,0.005613375],[3,327,354,0.002423917],[2,138,354,0.0009732079999999999],[1,59,444,0.000390917],[0,24,502,0.000137708]],"inputs":[["(/.f64 x z)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z))))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","y","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x z)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z))))","(*.f64 y (+.f64 1 (neg.f64 (/.f64 x z))))","(*.f64 y (-.f64 1 (/.f64 x z)))","(-.f64 y (*.f64 (/.f64 x z) y))","(fma.f64 y (/.f64 (neg.f64 x) z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y))","(*.f64 y (+.f64 1 (neg.f64 (/.f64 x z))))","(*.f64 y (-.f64 1 (/.f64 x z)))","(-.f64 y (*.f64 (/.f64 x z) y))","(fma.f64 y (/.f64 (neg.f64 x) z) y)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(*.f64 x (-.f64 (/.f64 1 z) (/.f64 y z)))","(*.f64 (/.f64 x z) (-.f64 1 y))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(*.f64 x (-.f64 (/.f64 1 z) (/.f64 y z)))","(*.f64 (/.f64 x z) (-.f64 1 y))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(*.f64 x (-.f64 (/.f64 1 z) (/.f64 y z)))","(*.f64 (/.f64 x z) (-.f64 1 y))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(fma.f64 y (+.f64 1 (neg.f64 (/.f64 x z))) (/.f64 x z))","(fma.f64 y (-.f64 1 (/.f64 x z)) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)"]],"stop":[["saturated",1]],"time":47.677001953125,"type":"simplify"},{"compiler":[[409,209]],"time":4.822998046875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","fresh",9.83203125],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","next",3.3509750976844206],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","done",0.0390625]],"compiler":[[12,7],[24,18],[11,7],[12,7],[24,18]],"count":[[37,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[34,0],"picked":[1,1]}],"min-error":[0.0078125],"time":6.39306640625,"type":"prune"},{"compiler":[[88,60]],"locations":[["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))",0.35546875,true],["(pow.f64 (cbrt.f64 z) 2)",0.4896087890737681,true],["(cbrt.f64 (/.f64 (-.f64 1 y) z))",2.9783854253723856,true],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)",3.0264746840131007,true]],"time":22.9970703125,"type":"localize"},{"count":[[4,64]],"series":[["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))","z","-inf",0.751953125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))","z","inf",0.345947265625],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))","z","0",0.710205078125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))","y","-inf",0.151123046875],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))","y","inf",0.155029296875],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))","y","0",0.18896484375],["(pow.f64 (cbrt.f64 z) 2)","z","-inf",0.4990234375],["(pow.f64 (cbrt.f64 z) 2)","z","inf",0.302001953125],["(pow.f64 (cbrt.f64 z) 2)","z","0",0.35693359375],["(cbrt.f64 (/.f64 (-.f64 1 y) z))","z","-inf",0.3759765625],["(cbrt.f64 (/.f64 (-.f64 1 y) z))","z","inf",0.2919921875],["(cbrt.f64 (/.f64 (-.f64 1 y) z))","z","0",0.2568359375],["(cbrt.f64 (/.f64 (-.f64 1 y) z))","y","-inf",0.275146484375],["(cbrt.f64 (/.f64 (-.f64 1 y) z))","y","inf",0.360107421875],["(cbrt.f64 (/.f64 (-.f64 1 y) z))","y","0",0.77587890625],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","z","-inf",0.791015625],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","z","inf",0.308837890625],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","z","0",0.552978515625],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","y","-inf",0.826904296875],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","y","inf",0.3310546875],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","y","0",0.583984375],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","x","-inf",0.22509765625],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","x","inf",0.218994140625],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","x","0",1.52099609375]],"time":11.505859375,"type":"series"},{"count":[[4,193]],"egraph":[[2,4262,33,0.030141124],[1,337,33,0.006034374],[0,16,75,0.000412041]],"inputs":[["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","(cbrt.f64 (/.f64 (-.f64 1 y) z))","(pow.f64 (cbrt.f64 z) 2)","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 x (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (/.f64 (-.f64 1 y) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y))) (cbrt.f64 (exp.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (/.f64 (-.f64 1 y) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 2) (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) (sqrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) 3) (pow.f64 y 3)) (fma.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) (*.f64 x (/.f64 (-.f64 1 y) z)) (-.f64 (*.f64 y y) (*.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) (*.f64 x (/.f64 (-.f64 1 y) z)) (neg.f64 (*.f64 y y))) (-.f64 (*.f64 x (/.f64 (-.f64 1 y) z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 y) (exp.f64 (*.f64 x (/.f64 (-.f64 1 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 y)) (exp.f64 (*.f64 x (/.f64 (-.f64 1 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x (/.f64 (-.f64 1 y) z))) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (/.f64 (-.f64 1 y) z) y)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)))) (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)))))) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (sqrt.f64 (pow.f64 (cbrt.f64 z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (pow.f64 (/.f64 1 z) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (/.f64 1 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2))) (cbrt.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 1/6) (pow.f64 (/.f64 (-.f64 1 y) z) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)) 2))) (sqrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (-.f64 1 y) z)) 1/3) (pow.f64 (sqrt.f64 (/.f64 (-.f64 1 y) z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) 1) (/.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 1 y) 1/6) 1) (/.f64 (pow.f64 (-.f64 1 y) 1/6) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (/.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (-.f64 1 y) 1/6) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (/.f64 (pow.f64 (-.f64 1 y) 1/6) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 z 1/6)) (/.f64 (cbrt.f64 (-.f64 1 y)) (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) (pow.f64 z 1/6)) (/.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (/.f64 z (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 z) (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) (/.f64 (cbrt.f64 z) (cbrt.f64 (cbrt.f64 (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 y) 1/6) (/.f64 (cbrt.f64 z) (pow.f64 (-.f64 1 y) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (-.f64 1 y))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (-.f64 1 y) (cbrt.f64 z))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))) (sqrt.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (-.f64 1 y))) (neg.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (-.f64 1 y)) (pow.f64 z 1/6)) (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (-.f64 1 y)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (-.f64 1 y)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 y) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z (-.f64 1 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 z) (cbrt.f64 (-.f64 1 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 1 y) z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2))) (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (cbrt.f64 (*.f64 z (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (*.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 z))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/6) (*.f64 (pow.f64 z 1/6) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 z (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 y) z) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 y z))) (sqrt.f64 (/.f64 y z)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 y) z) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 z))) (/.f64 (sqrt.f64 y) (sqrt.f64 z)) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 z) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 y z) 1))) (fma.f64 (neg.f64 (/.f64 y z)) 1 (*.f64 (/.f64 y z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 y z) 1))) (fma.f64 (neg.f64 (/.f64 y z)) 1 (*.f64 (/.f64 y z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 y z) 1))) (fma.f64 (neg.f64 (/.f64 y z)) 1 (*.f64 (/.f64 y z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 1 z) y))) (fma.f64 (neg.f64 (/.f64 1 z)) y (*.f64 (/.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 1 z) y))) (fma.f64 (neg.f64 (/.f64 1 z)) y (*.f64 (/.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 1 z) y))) (fma.f64 (neg.f64 (/.f64 1 z)) y (*.f64 (/.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2)))) (fma.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (pow.f64 (cbrt.f64 z) -2) (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2)))) (fma.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (pow.f64 (cbrt.f64 z) -2) (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2)))) (fma.f64 (neg.f64 (/.f64 y (cbrt.f64 z))) (pow.f64 (cbrt.f64 z) -2) (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y z))) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (*.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y z))) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (*.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y z))) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))) (*.f64 (cbrt.f64 (/.f64 y z)) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (*.f64 (/.f64 (cbrt.f64 y) z) (/.f64 (pow.f64 (cbrt.f64 y) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 y) z)) (/.f64 (sqrt.f64 y) 1) (*.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 y) z)) (/.f64 (sqrt.f64 y) 1) (*.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 y) z)) (/.f64 (sqrt.f64 y) 1) (*.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z))) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z))) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z))) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (*.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 y (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 y (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 y (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 y (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 y (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 y (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 y (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 y (sqrt.f64 z))) (/.f64 1 (sqrt.f64 z)) (*.f64 (/.f64 y (sqrt.f64 z)) (/.f64 1 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z))) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)) (*.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 y) z))) (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 y) z))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 y) z)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 z (-.f64 1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (cbrt.f64 z) (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (/.f64 z (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (/.f64 (pow.f64 (cbrt.f64 z) 2) (cbrt.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 1 y)) (/.f64 z (sqrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 z (fma.f64 y (+.f64 1 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 y y)) (*.f64 z (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 z (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 y) (cbrt.f64 z))) (neg.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (-.f64 1 y))) (neg.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 y)) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))) (*.f64 (cbrt.f64 z) (neg.f64 (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) 1) (*.f64 (fma.f64 y (+.f64 1 y) 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 y y)) 1) (*.f64 (+.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z (*.f64 z y)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 y) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 1 z) 3) (pow.f64 (/.f64 y z) 3)) (fma.f64 (/.f64 1 z) (/.f64 1 z) (fma.f64 (/.f64 y z) (/.f64 y z) (*.f64 (/.f64 1 z) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1 z) (/.f64 1 z)) (*.f64 (/.f64 y z) (/.f64 y z))) (+.f64 (/.f64 1 z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 y) (cbrt.f64 z)) 1) (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z (cbrt.f64 z)))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 y) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) (neg.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (/.f64 1 z)) (fma.f64 y (+.f64 1 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 y y)) (/.f64 1 z)) (+.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2)) (cbrt.f64 (-.f64 1 y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))) (neg.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (-.f64 1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z (-.f64 1 y)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 1 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 1 y) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 z) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 (/.f64 1 z))) (cbrt.f64 (/.f64 1 z)) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1 z)) (sqrt.f64 (/.f64 1 z)) (neg.f64 (/.f64 y z)))))))"]],"rules":[["egg-rr",91],["egg-rr",21],["egg-rr",52],["egg-rr",29]],"stop":[["node limit",1]],"time":63.98193359375,"type":"rewrite"},{"count":[[257,222]],"egraph":[[4,6894,748,0.030711832999999997],[3,2802,748,0.016238707999999998],[2,677,748,0.005377583],[1,228,765,0.0016007080000000002],[0,77,832,0.000417458]],"inputs":[["y","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(/.f64 x z)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z))))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 y) x) (*.f64 (cbrt.f64 -1) z))) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 y) x) (*.f64 (cbrt.f64 -1) z))) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 y) x) (*.f64 (cbrt.f64 -1) z))) y)","(pow.f64 (/.f64 1 z) 1/3)","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/9) y)) (pow.f64 (/.f64 1 z) 1/3))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/9) (pow.f64 y 2))) (pow.f64 (/.f64 1 z) 1/3)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/9) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/3))))))) (pow.f64 (/.f64 1 z) 1/3))))","(/.f64 1 z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(*.f64 -1 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(*.f64 -1 (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x)","(*.f64 (/.f64 (-.f64 1 y) z) x)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (-.f64 1 y) (/.f64 x z))","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(*.f64 (/.f64 (-.f64 1 y) z) x)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (-.f64 1 y) (/.f64 x z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(/.f64 x z)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z))))","(*.f64 y (+.f64 1 (neg.f64 (/.f64 x z))))","(*.f64 y (-.f64 1 (/.f64 x z)))","(-.f64 y (*.f64 y (/.f64 x z)))","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (/.f64 x z)))) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y))","(*.f64 y (+.f64 1 (neg.f64 (/.f64 x z))))","(*.f64 y (-.f64 1 (/.f64 x z)))","(-.f64 y (*.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 x z) 1) y)) (/.f64 x z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(*.f64 (/.f64 (-.f64 1 y) z) x)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (-.f64 1 y) (/.f64 x z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","y","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 (/.f64 (-.f64 1 y) z) x))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 y) x) (*.f64 (cbrt.f64 -1) z))) y)","(fma.f64 -1 (*.f64 (/.f64 (-.f64 1 y) (cbrt.f64 -1)) (/.f64 x z)) y)","(-.f64 y (*.f64 (/.f64 x z) (/.f64 (-.f64 1 y) (cbrt.f64 -1))))","(fma.f64 (/.f64 (+.f64 y -1) (cbrt.f64 -1)) (/.f64 x z) y)","(fma.f64 (/.f64 x (cbrt.f64 -1)) (/.f64 (+.f64 y -1) z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 y) x) (*.f64 (cbrt.f64 -1) z))) y)","(fma.f64 -1 (*.f64 (/.f64 (-.f64 1 y) (cbrt.f64 -1)) (/.f64 x z)) y)","(-.f64 y (*.f64 (/.f64 x z) (/.f64 (-.f64 1 y) (cbrt.f64 -1))))","(fma.f64 (/.f64 (+.f64 y -1) (cbrt.f64 -1)) (/.f64 x z) y)","(fma.f64 (/.f64 x (cbrt.f64 -1)) (/.f64 (+.f64 y -1) z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 1 y) x) (*.f64 (cbrt.f64 -1) z))) y)","(fma.f64 -1 (*.f64 (/.f64 (-.f64 1 y) (cbrt.f64 -1)) (/.f64 x z)) y)","(-.f64 y (*.f64 (/.f64 x z) (/.f64 (-.f64 1 y) (cbrt.f64 -1))))","(fma.f64 (/.f64 (+.f64 y -1) (cbrt.f64 -1)) (/.f64 x z) y)","(fma.f64 (/.f64 x (cbrt.f64 -1)) (/.f64 (+.f64 y -1) z) y)","(pow.f64 (/.f64 1 z) 1/3)","(cbrt.f64 (/.f64 1 z))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/9) y)) (pow.f64 (/.f64 1 z) 1/3))","(fma.f64 -1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (cbrt.f64 (/.f64 1 z)))","(fma.f64 (*.f64 (*.f64 -1/3 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18)) y (cbrt.f64 (/.f64 1 z)))","(fma.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (*.f64 -1/3 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (cbrt.f64 (/.f64 1 z)))","(fma.f64 y (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (cbrt.f64 (/.f64 1 z)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/9) (pow.f64 y 2))) (pow.f64 (/.f64 1 z) 1/3)))","(fma.f64 -1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18)) (*.f64 y y)) (cbrt.f64 (/.f64 1 z))))","(fma.f64 (*.f64 (*.f64 -1/3 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18)) y (fma.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18))) (*.f64 y y) (cbrt.f64 (/.f64 1 z))))","(fma.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (*.f64 -1/3 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (fma.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18)) (*.f64 -1/9 (*.f64 y y)) (cbrt.f64 (/.f64 1 z))))","(fma.f64 y (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (fma.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18)) (*.f64 y (*.f64 y -1/9)) (cbrt.f64 (/.f64 1 z))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/9) (pow.f64 y 2))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 z 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/3))))))) (pow.f64 (/.f64 1 z) 1/3))))","(fma.f64 -1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18)) (*.f64 y y)) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (pow.f64 y 3)) (fma.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 z 7))) (*.f64 2/9 (cbrt.f64 (/.f64 1 (pow.f64 z 7)))))) (cbrt.f64 (/.f64 1 z)))))","(fma.f64 -1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (fma.f64 -1/9 (*.f64 y (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18)))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (pow.f64 y 3) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 z 7))) 5/27))) (cbrt.f64 (/.f64 1 z)))))","(fma.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (*.f64 -1/3 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (fma.f64 -1/9 (*.f64 y (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18)))) (fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (pow.f64 y 3) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 z 7))) -5/81)) (cbrt.f64 (/.f64 1 z)))))","(fma.f64 y (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 7)) 1/18))) (fma.f64 -1/9 (*.f64 y (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18) (pow.f64 (/.f64 1 (pow.f64 z 11)) 1/18)))) (fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (pow.f64 y 3) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 z 7))) -5/81)) (cbrt.f64 (/.f64 1 z)))))","(/.f64 1 z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(*.f64 -1 (/.f64 y z))","(neg.f64 (/.f64 y z))","(/.f64 (neg.f64 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(*.f64 -1 (/.f64 y z))","(neg.f64 (/.f64 y z))","(/.f64 (neg.f64 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z))","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(/.f64 (-.f64 1 y) z)","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))","(neg.f64 (/.f64 (-.f64 1 y) (*.f64 z (cbrt.f64 -1))))","(/.f64 (neg.f64 (-.f64 1 y)) (*.f64 z (cbrt.f64 -1)))","(/.f64 (/.f64 (+.f64 y -1) (cbrt.f64 -1)) z)","(/.f64 (/.f64 (+.f64 y -1) z) (cbrt.f64 -1))","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))","(neg.f64 (/.f64 (-.f64 1 y) (*.f64 z (cbrt.f64 -1))))","(/.f64 (neg.f64 (-.f64 1 y)) (*.f64 z (cbrt.f64 -1)))","(/.f64 (/.f64 (+.f64 y -1) (cbrt.f64 -1)) z)","(/.f64 (/.f64 (+.f64 y -1) z) (cbrt.f64 -1))","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))","(neg.f64 (/.f64 (-.f64 1 y) (*.f64 z (cbrt.f64 -1))))","(/.f64 (neg.f64 (-.f64 1 y)) (*.f64 z (cbrt.f64 -1)))","(/.f64 (/.f64 (+.f64 y -1) (cbrt.f64 -1)) z)","(/.f64 (/.f64 (+.f64 y -1) z) (cbrt.f64 -1))","(*.f64 -1 (/.f64 (-.f64 1 y) (*.f64 (cbrt.f64 -1) z)))","(neg.f64 (/.f64 (-.f64 1 y) (*.f64 z (cbrt.f64 -1))))","(/.f64 (neg.f64 (-.f64 1 y)) (*.f64 z (cbrt.f64 -1)))","(/.f64 (/.f64 (+.f64 y -1) (cbrt.f64 -1)) z)","(/.f64 (/.f64 (+.f64 y -1) z) (cbrt.f64 -1))"]],"stop":[["node limit",1]],"time":52.4921875,"type":"simplify"},{"compiler":[[5258,3174]],"time":56.342041015625,"type":"eval"},{"alts":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","next",9.83203125],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","done",3.3509750976844206],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","done",0.0390625]],"compiler":[[12,7],[24,18],[11,7],[12,7]],"count":[[225,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[222,0],"picked":[1,1]}],"min-error":[0.0078125],"time":67.972900390625,"type":"prune"},{"compiler":[[30,7]],"locations":[["(+.f64 x (*.f64 y (-.f64 z x)))",0.0078125,true],["(*.f64 y (-.f64 z x))",0.01171875,true],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)",9.241925441678392,true]],"time":5.077880859375,"type":"localize"},{"count":[[3,96]],"series":[["(+.f64 x (*.f64 y (-.f64 z x)))","z","-inf",0.176025390625],["(+.f64 x (*.f64 y (-.f64 z x)))","z","inf",0.160888671875],["(+.f64 x (*.f64 y (-.f64 z x)))","z","0",0.160888671875],["(+.f64 x (*.f64 y (-.f64 z x)))","y","-inf",0.1669921875],["(+.f64 x (*.f64 y (-.f64 z x)))","y","inf",0.14599609375],["(+.f64 x (*.f64 y (-.f64 z x)))","y","0",0.169921875],["(+.f64 x (*.f64 y (-.f64 z x)))","x","-inf",0.160888671875],["(+.f64 x (*.f64 y (-.f64 z x)))","x","inf",0.154052734375],["(+.f64 x (*.f64 y (-.f64 z x)))","x","0",0.18017578125],["(*.f64 y (-.f64 z x))","x","-inf",0.14892578125],["(*.f64 y (-.f64 z x))","x","inf",0.1728515625],["(*.f64 y (-.f64 z x))","x","0",0.15283203125],["(*.f64 y (-.f64 z x))","z","-inf",0.153076171875],["(*.f64 y (-.f64 z x))","z","inf",0.18212890625],["(*.f64 y (-.f64 z x))","z","0",0.15283203125],["(*.f64 y (-.f64 z x))","y","-inf",0.217041015625],["(*.f64 y (-.f64 z x))","y","inf",0.2001953125],["(*.f64 y (-.f64 z x))","y","0",0.256103515625],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","z","-inf",0.87109375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","z","inf",0.451904296875],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","z","0",1.881103515625],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","y","-inf",0.451904296875],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","y","inf",0.488037109375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","y","0",0.5458984375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","x","-inf",0.375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","x","inf",0.4169921875],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","x","0",0.481201171875]],"time":9.377197265625,"type":"series"},{"count":[[3,145]],"egraph":[[2,2856,26,0.026236458],[1,184,26,0.003624458],[0,8,30,0.000190042]],"inputs":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(*.f64 y (-.f64 z x))","(+.f64 x (*.f64 y (-.f64 z x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (fma.f64 y (-.f64 z x) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (-.f64 z x) x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 y (-.f64 z x) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)) (cbrt.f64 (pow.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) -2)) (cbrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2) (*.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)) (sqrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) (*.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (-.f64 z x) x)) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (fma.f64 y (-.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2) 1) (/.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) 1) (/.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (fma.f64 y (-.f64 z x) x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/2) (/.f64 (fma.f64 y (-.f64 z x) x) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (fma.f64 y (-.f64 z x) x) 3) (pow.f64 z 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))) 2)) (cbrt.f64 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))) (sqrt.f64 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 y (-.f64 z x) x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 y (-.f64 z x) x) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (fma.f64 y (-.f64 z x) x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (*.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (-.f64 z x))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (-.f64 z x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (-.f64 z x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z 3) (pow.f64 x 3)) y) (fma.f64 x (+.f64 x z) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z (*.f64 (neg.f64 x) x)) y) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (pow.f64 z 3) (pow.f64 x 3))) (fma.f64 x (+.f64 x z) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (fma.f64 z z (*.f64 (neg.f64 x) x))) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (-.f64 z x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 y (-.f64 z x)))) 2)) (cbrt.f64 (log.f64 (*.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 y (-.f64 z x))))) (sqrt.f64 (log.f64 (*.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (-.f64 z x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 y (-.f64 z x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 y (-.f64 z x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 y (-.f64 z x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 y (-.f64 z x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 y (-.f64 z x))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 (neg.f64 x) y))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (-.f64 z x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 y (-.f64 z x)))) (/.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2) (-.f64 x (*.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (-.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (-.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2) (cbrt.f64 (fma.f64 y (-.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) (sqrt.f64 (fma.f64 y (-.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (-.f64 z x)) 3)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 y (-.f64 z x)) (fma.f64 y (-.f64 z x) (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (-.f64 z x)) 2)) (/.f64 1 (-.f64 x (*.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 y (-.f64 z x)) (fma.f64 y (-.f64 z x) (neg.f64 x)))) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (-.f64 z x)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (*.f64 y (-.f64 z x))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (-.f64 z x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (-.f64 z x)) 3)) (fma.f64 x x (*.f64 (*.f64 y (-.f64 z x)) (fma.f64 y (-.f64 z x) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (-.f64 z x)) 3)) (+.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 x y) (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (-.f64 z x)) 2)) (-.f64 x (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (-.f64 z x)) 3))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 y (-.f64 z x)) (fma.f64 y (-.f64 z x) (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (-.f64 z x)) 2))) (neg.f64 (-.f64 x (*.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2) (*.f64 x x)) (fma.f64 y (-.f64 z x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (-.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 z x) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 z x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 y (-.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x (*.f64 (*.f64 y (-.f64 z x)) (fma.f64 y (-.f64 z x) (neg.f64 x)))) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (-.f64 z x)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (*.f64 y (-.f64 z x))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 y (-.f64 z x)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 y (-.f64 z x) x))) 2)) (cbrt.f64 (log.f64 (fma.f64 y (-.f64 z x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 y (-.f64 z x) x)))) (sqrt.f64 (log.f64 (fma.f64 y (-.f64 z x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (-.f64 z x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (-.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (-.f64 z x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 y) (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (*.f64 y (-.f64 z x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (*.f64 y (-.f64 z x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y (-.f64 z x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) (-.f64 z x)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y (-.f64 z x)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (-.f64 z x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (-.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (-.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (-.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (-.f64 z x) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 y (-.f64 z x) x) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y (-.f64 z x) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y (-.f64 z x) x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z x) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (-.f64 z x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 z x)) 2) (*.f64 (cbrt.f64 (-.f64 z x)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) 2) (cbrt.f64 (*.f64 y (-.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 z x)) (*.f64 (sqrt.f64 (-.f64 z x)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (-.f64 z x))) (sqrt.f64 (*.f64 y (-.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 (-.f64 z x)) 2)) (cbrt.f64 (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (-.f64 z x))) (sqrt.f64 (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z x) (sqrt.f64 y)) (sqrt.f64 y) x)))))"]],"rules":[["egg-rr",65],["egg-rr",33],["egg-rr",47]],"stop":[["node limit",1]],"time":52.742919921875,"type":"rewrite"},{"count":[[241,175]],"egraph":[[10,7618,774,0.068696835],[9,7523,774,0.059827876],[8,6982,774,0.050400834000000005],[7,4993,774,0.039682209],[6,3939,774,0.028561584],[5,2409,774,0.019326251],[4,1010,774,0.008862084],[3,471,774,0.003412542],[2,234,774,0.001615501],[1,113,855,0.000719459],[0,46,1089,0.000251709]],"inputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z)","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","x","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z)","(/.f64 (*.f64 x (+.f64 1 (neg.f64 y))) z)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (/.f64 x z) (-.f64 1 y))","(*.f64 (-.f64 1 y) (/.f64 x z))","(*.f64 (/.f64 (-.f64 1 y) z) x)","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z))","(/.f64 (*.f64 x (+.f64 1 (neg.f64 y))) z)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (/.f64 x z) (-.f64 1 y))","(*.f64 (-.f64 1 y) (/.f64 x z))","(*.f64 (/.f64 (-.f64 1 y) z) x)","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 (*.f64 y (-.f64 z x)) z)","(*.f64 (/.f64 y z) (-.f64 z x))","(*.f64 y (/.f64 (-.f64 z x) z))","(-.f64 y (/.f64 (*.f64 y x) z))","(*.f64 y (-.f64 1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 (*.f64 y (-.f64 z x)) z)","(*.f64 (/.f64 y z) (-.f64 z x))","(*.f64 y (/.f64 (-.f64 z x) z))","(-.f64 y (/.f64 (*.f64 y x) z))","(*.f64 y (-.f64 1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(/.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)","(/.f64 (*.f64 x (+.f64 1 (neg.f64 y))) z)","(/.f64 x (/.f64 z (-.f64 1 y)))","(*.f64 (/.f64 x z) (-.f64 1 y))","(*.f64 (-.f64 1 y) (/.f64 x z))","(*.f64 (/.f64 (-.f64 1 y) z) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (fma.f64 -1 (/.f64 y z) (/.f64 1 z)) x y)","(fma.f64 (-.f64 (/.f64 1 z) (/.f64 y z)) x y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(*.f64 -1 (*.f64 y x))","(*.f64 (neg.f64 y) x)","(*.f64 y (neg.f64 x))","(*.f64 x (neg.f64 y))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(*.f64 (neg.f64 y) x)","(*.f64 y (neg.f64 x))","(*.f64 x (neg.f64 y))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(*.f64 (neg.f64 y) x)","(*.f64 y (neg.f64 x))","(*.f64 x (neg.f64 y))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 x (+.f64 1 (neg.f64 y)))","(-.f64 x (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 y 1) x))","(*.f64 x (+.f64 1 (neg.f64 y)))","(-.f64 x (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","x","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(*.f64 y (-.f64 z x))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(*.f64 y (-.f64 z x))","(fma.f64 y z (*.f64 (neg.f64 y) x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 x (+.f64 1 (neg.f64 y)))","(-.f64 x (*.f64 y x))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y z (*.f64 x (+.f64 1 (neg.f64 y))))","(fma.f64 y (-.f64 z x) x)"]],"stop":[["node limit",1]],"time":99.973876953125,"type":"simplify"},{"compiler":[[2472,804]],"time":20.295166015625,"type":"eval"},{"alts":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","done",9.83203125],["(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","done",3.3509750976844206],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))","fresh",10.383999072358588],["(fma.f64 (-.f64 1 y) (/.f64 x z) y)","done",0.0390625],["(pow.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) -1)","fresh",9.98046875]],"compiler":[[12,7],[24,18],[27,15],[11,7],[13,8]],"count":[[178,5]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[175,2],"picked":[1,1]}],"min-error":[0],"time":37.613037109375,"type":"prune"},{"accuracy":[0.0390625],"baseline":[0.0390625],"branch":[["x",0.0390625,1],["y",0.0390625,1],["z",0.0390625,1],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)",0.0390625,1]],"compiler":[[4,3],[4,3],[4,3],[12,7],[83,43]],"count":[[6,1]],"inputs":[["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 z x) x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (fma.f64 y (-.f64 z x) x) z)))","(pow.f64 (/.f64 z (fma.f64 y (-.f64 z x) x)) -1)","(fma.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (-.f64 1 y) z))) y)","(fma.f64 (-.f64 1 y) (/.f64 x z) y)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)"]],"link":["."],"name":["Diagrams.Backend.Rasterific:rasterificRadialGradient from diagrams-rasterific-1.3.1.3"],"oracle":[13.558822851663919],"outputs":[["(fma.f64 (-.f64 1 y) (/.f64 x z) y)"]],"time":17.3818359375,"times":[["x",3.94091796875],["y",3.93505859375],["z",4.2138671875],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)",3.703857421875]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[4,19,11,0.000104459],[3,18,11,8.3917e-5],[2,16,11,6.3125e-5],[1,12,11,4.3042e-5],[0,8,11,2.1667e-5]],"inputs":[["(fma.f64 (-.f64 1 y) (/.f64 x z) y)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (-.f64 1 y) (/.f64 x z) y)"]],"stop":[["fuel",1],["saturated",1]],"time":8.572021484375,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.371826171875,"type":"end"}]
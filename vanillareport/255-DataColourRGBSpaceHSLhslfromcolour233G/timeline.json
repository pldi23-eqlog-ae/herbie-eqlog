[{"compiler":[[7,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.25,"type":"analyze"},{"outcomes":[["body",256,"valid",217.5439453125,8256]],"time":225.234130859375,"type":"sample"},{"compiler":[[6,5]],"egraph":[[0,1,1,1e-6],[2,13,4,9.5333e-5],[1,12,4,7.0875e-5],[0,7,4,4.55e-5]],"inputs":[["0"],["(-.f64 x (/.f64 1 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 x (/.f64 1 3))","(+.f64 x -1/3)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.52978515625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,13,4,9.3417e-5],[1,12,4,6.9083e-5],[0,7,4,4.375e-5]],"inputs":[["(-.f64 x (/.f64 1 3))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (/.f64 1 3))","(+.f64 x -1/3)"]],"stop":[["saturated",1]],"time":10.14013671875,"type":"simplify"},{"compiler":[[9,7]],"time":0.306884765625,"type":"eval"},{"alts":[["(+.f64 x -1/3)","next",0.01171875]],"compiler":[[4,3],[4,3]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.737060546875,"type":"prune"},{"compiler":[[6,4]],"locations":[["(+.f64 x -1/3)",0.01171875,true]],"time":3.114990234375,"type":"localize"},{"count":[[1,12]],"series":[["(+.f64 x -1/3)","x","-inf",0.18310546875],["(+.f64 x -1/3)","x","inf",0.252197265625],["(+.f64 x -1/3)","x","0",0.222900390625]],"time":0.697998046875,"type":"series"},{"count":[[1,30]],"egraph":[[2,1151,4,0.015199083],[1,91,4,0.0017123330000000001],[0,4,4,0.000174583]],"inputs":[["(+.f64 x -1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1/27 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (-.f64 1/9 (*.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (-.f64 1/9 (*.f64 x -1/3))) (+.f64 -1/27 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x 1/3) (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/27 (pow.f64 x 3)) (fma.f64 x x (-.f64 1/9 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/27 (pow.f64 x 3)) (+.f64 1/9 (-.f64 (*.f64 x x) (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -1/27 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (-.f64 1/9 (*.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x x -1/9)) (neg.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (*.f64 x x)) (-.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x -1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x -1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) -1/3)))))"]],"rules":[["egg-rr",30]],"stop":[["node limit",1]],"time":32.75,"type":"rewrite"},{"count":[[42,34]],"egraph":[[2,8,39,0.000111542],[1,7,39,8.1709e-5],[0,5,39,5.0375e-5]],"inputs":[["-1/3","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)"]],"method":["egg-herbie"],"outputs":[["-1/3","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)"]],"stop":[["saturated",1]],"time":19.77099609375,"type":"simplify"},{"compiler":[[268,198]],"time":6.64013671875,"type":"eval"},{"alts":[["(+.f64 x -1/3)","done",0.01171875],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))","fresh",15.0078125],["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","next",15.0078125]],"compiler":[[4,3],[14,10],[9,6],[14,10],[9,6]],"count":[[35,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[34,2],"picked":[1,1]}],"min-error":[0],"time":7.06298828125,"type":"prune"},{"compiler":[[19,12]],"locations":[["(fma.f64 x x -1/9)",0.01171875,true],["(+.f64 x 1/3)",0.01953125,true],["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))",13.876871690409493,true]],"time":5.580810546875,"type":"localize"},{"count":[[3,36]],"series":[["(fma.f64 x x -1/9)","x","-inf",0.200927734375],["(fma.f64 x x -1/9)","x","inf",0.208984375],["(fma.f64 x x -1/9)","x","0",0.197998046875],["(+.f64 x 1/3)","x","-inf",0.135986328125],["(+.f64 x 1/3)","x","inf",0.155029296875],["(+.f64 x 1/3)","x","0",0.14306640625],["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","x","-inf",0.54296875],["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","x","inf",0.364990234375],["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","x","0",0.552001953125]],"time":2.6171875,"type":"series"},{"count":[[3,92]],"egraph":[[2,2065,13,0.018784290999999998],[1,158,13,0.0029262079999999996],[0,7,20,0.000283333]],"inputs":[["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","(+.f64 x 1/3)","(fma.f64 x x -1/9)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1/9)) 2) (*.f64 (cbrt.f64 (fma.f64 x x -1/9)) (/.f64 1 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x -1/9)) (*.f64 (sqrt.f64 (fma.f64 x x -1/9)) (/.f64 1 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x x -1/9)) (/.f64 1 (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1/9)) 2) 1) (/.f64 (cbrt.f64 (fma.f64 x x -1/9)) (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1/9)) 1) (/.f64 (sqrt.f64 (fma.f64 x x -1/9)) (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (/.f64 (fma.f64 x x -1/9) (cbrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1/9)) 2) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 x x -1/9)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (/.f64 (sqrt.f64 (fma.f64 x x -1/9)) (cbrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 x 1/3))) (/.f64 (fma.f64 x x -1/9) (sqrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1/9)) 2) (sqrt.f64 (+.f64 x 1/3))) (/.f64 (cbrt.f64 (fma.f64 x x -1/9)) (sqrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 1/27 (pow.f64 x 3))) (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x x -1/9) (fma.f64 x x -1/9)) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x -1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 x -1/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x -1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 x x -1/9) 3) (pow.f64 (+.f64 x 1/3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) -1/3)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (cbrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 1/3)) (sqrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/27 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1/9) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3))) (+.f64 1/27 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x -1/3) (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x x -1/9)) (neg.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/27 (pow.f64 x 3)) (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/27 (pow.f64 x 3)) (+.f64 1/9 (-.f64 (*.f64 x x) (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1/27 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (*.f64 x x)) (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1/3)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/9 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x x -1/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x -1/9)) (pow.f64 (cbrt.f64 (fma.f64 x x -1/9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1/9)) 2) (cbrt.f64 (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x -1/9)) (sqrt.f64 (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x x) 3) 1/729) (+.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (+.f64 1/81 (*.f64 (*.f64 x x) 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x x) 3) -1/729) (+.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (-.f64 1/81 (*.f64 (*.f64 x x) -1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 x x)) 1/81) (+.f64 (*.f64 x x) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 x x)) 1/81) (-.f64 (*.f64 x x) -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x -1/9) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -1/9) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x -1/9)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x -1/9)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x x -1/9) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x -1/9) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x x -1/9)))))))"]],"rules":[["egg-rr",24],["egg-rr",30],["egg-rr",38]],"stop":[["node limit",1]],"time":42.052978515625,"type":"rewrite"},{"count":[[128,102]],"egraph":[[22,7351,132,0.111907625],[21,6410,132,0.0973965],[20,6376,132,0.083797541],[19,6306,132,0.074093],[18,6028,132,0.06559891600000001],[17,5738,132,0.057864457],[16,5346,132,0.050654582000000004],[15,4511,132,0.04369029],[14,3823,132,0.035963457],[13,3255,132,0.029240624],[12,2770,132,0.023476166],[11,2377,132,0.018525291],[10,2082,132,0.014377374],[9,1874,132,0.010992791],[8,1690,132,0.008212749],[7,1494,132,0.005925833],[6,616,132,0.003527249],[5,178,132,0.001682583],[4,74,132,0.000798666],[3,45,132,0.000455375],[2,32,132,0.000283041],[1,21,132,0.00017104099999999998],[0,11,150,8.0125e-5]],"inputs":[["-1/3","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","1/3","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","-1/9","(-.f64 (pow.f64 x 2) 1/9)","(-.f64 (pow.f64 x 2) 1/9)","(-.f64 (pow.f64 x 2) 1/9)","(pow.f64 x 2)","(-.f64 (pow.f64 x 2) 1/9)","(-.f64 (pow.f64 x 2) 1/9)","(-.f64 (pow.f64 x 2) 1/9)","(pow.f64 x 2)","(-.f64 (pow.f64 x 2) 1/9)","(-.f64 (pow.f64 x 2) 1/9)","(-.f64 (pow.f64 x 2) 1/9)"]],"method":["egg-herbie"],"outputs":[["-1/3","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","1/3","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","x","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","x","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","-1/9","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)","(-.f64 (pow.f64 x 2) 1/9)","(+.f64 (*.f64 x x) -1/9)","(fma.f64 x x -1/9)"]],"stop":[["node limit",1]],"time":130.376953125,"type":"simplify"},{"compiler":[[1180,811]],"time":17.5458984375,"type":"eval"},{"alts":[["(+.f64 x -1/3)","done",0.01171875],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))","next",15.0078125],["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","done",15.0078125]],"compiler":[[4,3],[14,10],[9,6],[14,10]],"count":[[105,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[102,0],"picked":[1,1]}],"min-error":[0],"time":18.197998046875,"type":"prune"},{"compiler":[[35,21]],"locations":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))",0.00390625,true],["(+.f64 x 1/3)",0.01953125,false],["(/.f64 1/9 (+.f64 x 1/3))",0.1796875,true],["(/.f64 (*.f64 x x) (+.f64 x 1/3))",13.947184190409493,true]],"time":7.56103515625,"type":"localize"},{"count":[[3,36]],"series":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))","x","-inf",0.40380859375],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))","x","inf",0.43310546875],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))","x","0",0.803955078125],["(/.f64 1/9 (+.f64 x 1/3))","x","-inf",0.234130859375],["(/.f64 1/9 (+.f64 x 1/3))","x","inf",0.246826171875],["(/.f64 1/9 (+.f64 x 1/3))","x","0",0.219970703125],["(/.f64 (*.f64 x x) (+.f64 x 1/3))","x","-inf",0.2001953125],["(/.f64 (*.f64 x x) (+.f64 x 1/3))","x","inf",0.26220703125],["(/.f64 (*.f64 x x) (+.f64 x 1/3))","x","0",0.3349609375]],"time":3.26513671875,"type":"series"},{"count":[[3,255]],"egraph":[[2,3391,21,0.02762025],[1,219,21,0.004533957999999999],[0,9,30,0.000330875]],"inputs":[["(/.f64 (*.f64 x x) (+.f64 x 1/3))","(/.f64 1/9 (+.f64 x 1/3))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (/.f64 (+.f64 x 1/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x (/.f64 1 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (/.f64 1 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 x (sqrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 x)) (/.f64 1 (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1/3)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 x (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 x 1/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) x) 1) (/.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (/.f64 x (cbrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) -2) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1/3) -1/2) (/.f64 (*.f64 x x) (sqrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (sqrt.f64 (+.f64 x 1/3))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x x) (fma.f64 x x -1/9)) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x x) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x x) (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x 1/3)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x 1/3))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1/9 (+.f64 x 1/3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (+.f64 x 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/9 (/.f64 1 (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1/3)) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (fma.f64 x x -1/9)) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 (+.f64 x 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x 1/3) 9) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x 1/3) 9) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1/9 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/9 (+.f64 x 1/3))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1/3) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1/3) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1/3) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1/3) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 (+.f64 x 1/3)) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 x -1/3))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 x -1/3)))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9)) (pow.f64 (+.f64 x 1/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (+.f64 x 1/3) 2) (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x 1/3) (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)) (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9)) (pow.f64 (+.f64 x 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3))) (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x x -1/9)) (+.f64 -1/3 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9))) (neg.f64 (pow.f64 (+.f64 x 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3)))) (neg.f64 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3))) (neg.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (+.f64 x 1/3)) (*.f64 (/.f64 (+.f64 x 1/3) x) 1/9)) (*.f64 (/.f64 (+.f64 x 1/3) x) (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1/3) (*.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) 1/9)) (*.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (neg.f64 x)) (+.f64 x 1/3)) (*.f64 (+.f64 -1/3 (neg.f64 x)) 1/9)) (*.f64 (+.f64 -1/3 (neg.f64 x)) (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (*.f64 (+.f64 x 1/3) 9)) (*.f64 (/.f64 (+.f64 x 1/3) x) 1)) (*.f64 (/.f64 (+.f64 x 1/3) x) (*.f64 (+.f64 x 1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 (+.f64 x 1/3) 9)) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) (*.f64 (+.f64 x 1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 1/3) 9) (*.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) 1)) (*.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) (*.f64 (+.f64 x 1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (neg.f64 x)) (*.f64 (+.f64 x 1/3) 9)) (*.f64 (+.f64 -1/3 (neg.f64 x)) 1)) (*.f64 (+.f64 -1/3 (neg.f64 x)) (*.f64 (+.f64 x 1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (+.f64 -1/3 (neg.f64 x))) (*.f64 (/.f64 (+.f64 x 1/3) x) -1/9)) (*.f64 (/.f64 (+.f64 x 1/3) x) (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 -1/3 (neg.f64 x))) (*.f64 (+.f64 x 1/3) -1/9)) (*.f64 (+.f64 x 1/3) (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 -1/3 (neg.f64 x)) (*.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) -1/9)) (*.f64 (*.f64 (+.f64 x 1/3) (pow.f64 x -2)) (+.f64 -1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (neg.f64 x)) (+.f64 -1/3 (neg.f64 x))) (*.f64 (+.f64 -1/3 (neg.f64 x)) -1/9)) (pow.f64 (+.f64 -1/3 (neg.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (neg.f64 x) 1/9) (+.f64 -1/3 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) 1/27) (fma.f64 x x (+.f64 1/9 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) (pow.f64 (+.f64 x 1/3) -3) (pow.f64 (/.f64 -1/9 (+.f64 x 1/3)) 3)) (fma.f64 (pow.f64 x 4) (pow.f64 (+.f64 x 1/3) -2) (-.f64 (pow.f64 (/.f64 -1/9 (+.f64 x 1/3)) 2) (*.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) (/.f64 -1/9 (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4) (pow.f64 (/.f64 -1/9 (+.f64 x 1/3)) 2)) (-.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) (/.f64 -1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9)) (+.f64 x 1/3)) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -1/9) 1) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -1/9) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (cbrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -1/9) (sqrt.f64 (+.f64 x 1/3))) (sqrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x -1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 x 1/3) 2) (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 1/3) (fma.f64 x x -1/9)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)) (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x -1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))) (exp.f64 (/.f64 1/9 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (+.f64 1 (expm1.f64 (/.f64 1/9 (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))) (+.f64 1 (expm1.f64 (/.f64 1/9 (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))) (exp.f64 (/.f64 -1/9 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))) (pow.f64 (exp.f64 1) (/.f64 -1/9 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 -1/9 (+.f64 x 1/3))) (exp.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 -1/9 (+.f64 x 1/3))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 1) (/.f64 -1/9 (+.f64 x 1/3))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (/.f64 (+.f64 x 1/3) x)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (/.f64 (+.f64 x 1/3) x)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x (/.f64 1 (+.f64 x 1/3))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x (/.f64 1 (+.f64 x 1/3))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (/.f64 1 (+.f64 x 1/3)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (/.f64 1 (+.f64 x 1/3)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) 1 (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x) 1 (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/9 (neg.f64 (/.f64 1 (+.f64 x 1/3))) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1/3) 1 (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1/3) 1 (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1/3) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1/3) 1 (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 x (+.f64 x 1/3)) x) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 x (+.f64 x 1/3)) x) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1/3) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1/3) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1/3) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1/3) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1/9 (+.f64 x 1/3)) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (+.f64 x 1/3))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (+.f64 x 1/3))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3))) (neg.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (neg.f64 x)) (/.f64 1 (+.f64 -1/3 (neg.f64 x))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (neg.f64 x)) (/.f64 1 (+.f64 -1/3 (neg.f64 x))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/9 (/.f64 1 (+.f64 x 1/3)) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9)) (pow.f64 (+.f64 x 1/3) -2) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9)) (pow.f64 (+.f64 x 1/3) -2) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9)) (pow.f64 (+.f64 x 1/3) -2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 x 1/3)) (*.f64 (+.f64 x 1/3) 1/9)) (pow.f64 (+.f64 x 1/3) -2) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4))) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 6) (/.f64 1/729 (pow.f64 (+.f64 x 1/3) 3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) 4))) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x 1/3)) (*.f64 x x) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x 1/3)) (*.f64 x x) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x -1/9) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x -1/9) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x -1/9) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x -1/9) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9))) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9)) (+.f64 x -1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x 1/3)) (fma.f64 x x 1/9))) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 -1/9 (+.f64 x 1/3))) 2) (cbrt.f64 (/.f64 -1/9 (+.f64 x 1/3))) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 x) x)) (sqrt.f64 (pow.f64 (cbrt.f64 x) 2)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 -1/9 (+.f64 x 1/3))) (sqrt.f64 (/.f64 -1/9 (+.f64 x 1/3))) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3))) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1/9 (+.f64 x 1/3)) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 x (+.f64 x 1/3)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 x (+.f64 x 1/3)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (+.f64 x 1/3)) x (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (+.f64 x 1/3)) x (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) 1) (/.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x 1/3)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) 1) (/.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x 1/3)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (/.f64 x (cbrt.f64 (+.f64 x 1/3))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (/.f64 x (cbrt.f64 (+.f64 x 1/3))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) -2) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 x 1/3))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) -2) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 x 1/3))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x 1/3)) x)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1/3) -1/2) (/.f64 (*.f64 x x) (sqrt.f64 (+.f64 x 1/3))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1/3) -1/2) (/.f64 (*.f64 x x) (sqrt.f64 (+.f64 x 1/3))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (sqrt.f64 (+.f64 x 1/3))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 x 1/3))) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (sqrt.f64 (+.f64 x 1/3))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 x 1/3))) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x 1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x 1/3)))) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2)))) (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3))) (*.f64 (/.f64 x (+.f64 x 1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x 1/3))) 1/9 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1 (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x 1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x 1/3) -2))) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)) (+.f64 (/.f64 -1/9 (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x -1/9)) (+.f64 x -1/3) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x -1/9)) (+.f64 x -1/3) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)) (/.f64 -1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (+.f64 1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x 1/3)) (*.f64 (/.f64 -1/9 (+.f64 x 1/3)) 1))))))"]],"rules":[["egg-rr",185],["egg-rr",29],["egg-rr",41]],"stop":[["node limit",1]],"time":62.288818359375,"type":"rewrite"},{"count":[[291,284]],"egraph":[[4,3338,337,0.018840333],[3,1108,337,0.007807083],[2,386,349,0.002785958],[1,152,353,0.001008458],[0,56,358,0.00029825]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -9 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 (*.f64 -9 (pow.f64 x 3)) (*.f64 27 (pow.f64 x 4))))","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 (*.f64 -9 (pow.f64 x 3)) (+.f64 (*.f64 -81 (pow.f64 x 5)) (*.f64 27 (pow.f64 x 4)))))","x","(-.f64 x 1/3)","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) 1/3)","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) (+.f64 1/3 (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","x","(-.f64 x 1/3)","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) 1/3)","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) (+.f64 1/3 (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","1/3","(+.f64 1/3 (*.f64 -1 x))","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 1/3 (*.f64 -1 x)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 1/3 (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))))","(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","-1/3","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -9 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -9 (pow.f64 x 3)))","(fma.f64 -9 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -9)))","(*.f64 x (*.f64 x (fma.f64 x -9 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 (*.f64 -9 (pow.f64 x 3)) (*.f64 27 (pow.f64 x 4))))","(fma.f64 3 (*.f64 x x) (fma.f64 -9 (pow.f64 x 3) (*.f64 27 (pow.f64 x 4))))","(fma.f64 27 (pow.f64 x 4) (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -9))))","(fma.f64 x (*.f64 x (fma.f64 x -9 3)) (*.f64 27 (pow.f64 x 4)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 (*.f64 -9 (pow.f64 x 3)) (+.f64 (*.f64 -81 (pow.f64 x 5)) (*.f64 27 (pow.f64 x 4)))))","(fma.f64 3 (*.f64 x x) (fma.f64 -9 (pow.f64 x 3) (fma.f64 -81 (pow.f64 x 5) (*.f64 27 (pow.f64 x 4)))))","(fma.f64 3 (*.f64 x x) (fma.f64 -9 (pow.f64 x 3) (fma.f64 27 (pow.f64 x 4) (*.f64 -81 (pow.f64 x 5)))))","(fma.f64 x (*.f64 x (fma.f64 x -9 3)) (fma.f64 -81 (pow.f64 x 5) (*.f64 27 (pow.f64 x 4))))","(fma.f64 x (*.f64 x (fma.f64 x -9 3)) (fma.f64 27 (pow.f64 x 4) (*.f64 -81 (pow.f64 x 5))))","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) 1/3)","(+.f64 (+.f64 x (/.f64 1/9 x)) -1/3)","(+.f64 x (+.f64 (/.f64 1/9 x) -1/3))","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) (+.f64 1/3 (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 x (/.f64 1/9 x)) (+.f64 1/3 (/.f64 1/27 (*.f64 x x))))","(+.f64 x (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 -1/27 (*.f64 x x)) -1/3)))","(+.f64 (+.f64 x -1/3) (+.f64 (/.f64 1/9 x) (/.f64 -1/27 (*.f64 x x))))","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) 1/3)","(+.f64 (+.f64 x (/.f64 1/9 x)) -1/3)","(+.f64 x (+.f64 (/.f64 1/9 x) -1/3))","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 x)) x) (+.f64 1/3 (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 x (/.f64 1/9 x)) (+.f64 1/3 (/.f64 1/27 (*.f64 x x))))","(+.f64 x (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 -1/27 (*.f64 x x)) -1/3)))","(+.f64 (+.f64 x -1/3) (+.f64 (/.f64 1/9 x) (/.f64 -1/27 (*.f64 x x))))","1/3","(+.f64 1/3 (*.f64 -1 x))","(+.f64 1/3 (neg.f64 x))","(-.f64 1/3 x)","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 1/3 (*.f64 -1 x)))","(fma.f64 3 (*.f64 x x) (+.f64 1/3 (neg.f64 x)))","(-.f64 (fma.f64 3 (*.f64 x x) 1/3) x)","(fma.f64 3 (*.f64 x x) (-.f64 1/3 x))","(fma.f64 x (fma.f64 3 x -1) 1/3)","(+.f64 (*.f64 3 (pow.f64 x 2)) (+.f64 1/3 (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))))","(fma.f64 3 (*.f64 x x) (+.f64 1/3 (fma.f64 -1 x (*.f64 -9 (pow.f64 x 3)))))","(+.f64 (-.f64 1/3 x) (fma.f64 -9 (pow.f64 x 3) (*.f64 3 (*.f64 x x))))","(fma.f64 3 (*.f64 x x) (-.f64 (fma.f64 -9 (pow.f64 x 3) 1/3) x))","(fma.f64 x (*.f64 x (fma.f64 x -9 3)) (-.f64 1/3 x))","(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x)))","(+.f64 (/.f64 1/9 x) (/.f64 -1/27 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1/9 x) (/.f64 1/81 (pow.f64 x 3))) (/.f64 1/27 (*.f64 x x)))","(+.f64 (/.f64 1/9 x) (-.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/27 (*.f64 x x))))","(+.f64 (+.f64 (/.f64 1/9 x) (/.f64 -1/27 (*.f64 x x))) (/.f64 1/81 (pow.f64 x 3)))","(+.f64 (/.f64 1/9 x) (*.f64 (/.f64 1 (*.f64 x x)) (-.f64 (/.f64 1/81 x) 1/27)))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (-.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (-.f64 (/.f64 -1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 -1/27 (*.f64 x x)) (/.f64 -1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 -1/243 (pow.f64 x 4)) (*.f64 (/.f64 1 (*.f64 x x)) (-.f64 (/.f64 1/81 x) 1/27))))","(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x)))","(+.f64 (/.f64 1/9 x) (/.f64 -1/27 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1/9 x) (/.f64 1/81 (pow.f64 x 3))) (/.f64 1/27 (*.f64 x x)))","(+.f64 (/.f64 1/9 x) (-.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/27 (*.f64 x x))))","(+.f64 (+.f64 (/.f64 1/9 x) (/.f64 -1/27 (*.f64 x x))) (/.f64 1/81 (pow.f64 x 3)))","(+.f64 (/.f64 1/9 x) (*.f64 (/.f64 1 (*.f64 x x)) (-.f64 (/.f64 1/81 x) 1/27)))","(-.f64 (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (*.f64 1/9 (/.f64 1 x))) (+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (-.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (-.f64 (/.f64 -1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 -1/27 (*.f64 x x)) (/.f64 -1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 -1/243 (pow.f64 x 4)) (*.f64 (/.f64 1 (*.f64 x x)) (-.f64 (/.f64 1/81 x) 1/27))))","-1/3","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)"]],"stop":[["node limit",1]],"time":38.239013671875,"type":"simplify"},{"compiler":[[6856,4973]],"time":84.780029296875,"type":"eval"},{"alts":[["(+.f64 x -1/3)","done",0.01171875],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))","done",15.0078125],["(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","done",15.0078125]],"compiler":[[4,3],[14,10],[9,6]],"count":[[353,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[350,0],"picked":[1,1]}],"min-error":[0],"time":156.3271484375,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["(-.f64 x (/.f64 1 3))",0.01171875,1]],"compiler":[[2,1],[6,5],[30,21]],"count":[[4,1]],"inputs":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))","(/.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))","(+.f64 x -1/3)","(-.f64 x (/.f64 1 3))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, G"],"oracle":[15.015625],"outputs":[["(+.f64 x -1/3)"]],"time":6.697021484375,"times":[["x",3.258056640625],["(-.f64 x (/.f64 1 3))",2.651123046875]],"type":"regimes"},{"compiler":[[4,3]],"egraph":[[1,5,4,2.1291e-5],[0,4,4,1.3208e-5]],"inputs":[["(+.f64 x -1/3)"]],"method":["egg-herbie"],"outputs":[["(+.f64 x -1/3)"]],"stop":[["done",1],["saturated",1]],"time":8.23486328125,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[4,3]],"remove-preprocessing":[[]],"time":7.182861328125,"type":"end"}]
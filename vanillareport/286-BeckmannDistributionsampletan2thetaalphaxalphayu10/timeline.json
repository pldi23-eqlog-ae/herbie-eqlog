[{"compiler":[[57,41]],"method":["search"],"sampling":[[12,7.296140480202946e-9,3.0805926471967995e-9,0.9999999896232669],[11,7.296140480202946e-9,3.0805926471967995e-9,0.9999999896232669],[10,6.809731114856083e-9,3.5670020125436625e-9,0.9999999896232669],[9,5.836912384162357e-9,4.539820743237389e-9,0.9999999896232669],[8,3.891274922774904e-9,6.485458204624841e-9,0.9999999896232669],[7,3.891274922774904e-9,6.485458204624841e-9,0.9999999896232669],[6,3.891274922774904e-9,6.485458204624841e-9,0.9999999896232669],[5,2.5941832818499365e-9,7.782549845549809e-9,0.9999999896232669],[4,0.0,1.0376733127399746e-8,0.9999999896232669],[3,0.0,1.0376733127399746e-8,0.9999999896232669],[2,0.0,1.0376733127399746e-8,0.9999999896232669],[1,0.0,1.0376733127399746e-8,0.9999999896232669],[0,0.0,1.0376733127399746e-8,0.9999999896232669]],"time":118.029052734375,"type":"analyze"},{"outcomes":[["body",256,"valid",793.64208984375,8256]],"time":801.64208984375,"type":"sample"},{"compiler":[[22,15]],"egraph":[[0,5,5,3.208e-6],[11,6663,275,0.045216707],[10,3511,275,0.032273624],[9,2403,275,0.019738666000000002],[8,1710,275,0.013450458],[7,1063,275,0.00948825],[6,678,275,0.006520959],[5,546,275,0.004298042],[4,408,275,0.002930084],[3,337,275,0.00189175],[2,235,275,0.001125834],[1,145,275,0.000540584],[0,63,286,0.000200917]],"inputs":[["0","1","2","3","4"],["(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphay alphay)) (/.f64 sin2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 alphax))) (+.f64 (/.f64 cos2phi (*.f64 u0 u0)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 alphax (*.f64 cos2phi cos2phi)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 alphax (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 alphay))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 u0 u0))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 alphay (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 cos2phi cos2phi))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 alphay (*.f64 sin2phi sin2phi))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 cos2phi))) (+.f64 (/.f64 u0 (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 sin2phi))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 u0 (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 sin2phi (*.f64 alphax alphax)) (/.f64 cos2phi (*.f64 alphay alphay))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3","4"],["(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphay alphay)) (/.f64 sin2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphay alphay)) (/.f64 sin2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphay alphay)) (/.f64 (/.f64 sin2phi alphax) alphax)))","(/.f64 (neg.f64 (log.f64 (-.f64 1 alphax))) (+.f64 (/.f64 cos2phi (*.f64 u0 u0)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 alphax))) (+.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 cos2phi (*.f64 u0 u0))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 alphax))) (+.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 cos2phi (*.f64 u0 u0))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 alphax (*.f64 cos2phi cos2phi)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 alphax (*.f64 cos2phi cos2phi))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 alphax (*.f64 cos2phi cos2phi))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 alphax (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 alphax (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 alphay))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 u0 u0))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 alphay))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 u0 u0))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 alphay)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 u0 u0)))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 alphay (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 cos2phi cos2phi))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 alphay (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 cos2phi cos2phi))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 (/.f64 alphay alphax) alphax) (/.f64 sin2phi (*.f64 cos2phi cos2phi))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 alphay (*.f64 sin2phi sin2phi))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 alphay (*.f64 sin2phi sin2phi))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 cos2phi))) (+.f64 (/.f64 u0 (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 cos2phi))) (+.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 u0 (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 cos2phi))) (+.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (/.f64 u0 alphax) alphax)))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 cos2phi))) (+.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 u0 (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 sin2phi))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 u0 (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 sin2phi))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 u0 (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 sin2phi (*.f64 alphax alphax)) (/.f64 cos2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphay alphay)) (/.f64 sin2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphay alphay)) (/.f64 sin2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphay alphay)) (/.f64 (/.f64 sin2phi alphax) alphax)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":74.43896484375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[16,1033,25,0.015575584],[15,1028,25,0.013634126],[14,987,25,0.011676959],[13,916,25,0.009460209],[12,578,25,0.007431209000000001],[11,413,25,0.0050269170000000005],[10,320,25,0.003766417],[9,267,25,0.0028657500000000002],[8,222,25,0.002223708],[7,166,25,0.001687041],[6,117,25,0.001246333],[5,92,25,0.000889583],[4,70,25,0.000618917],[3,57,25,0.000415333],[2,42,25,0.000266333],[1,30,25,0.000140083],[0,16,26,6.4375e-5]],"inputs":[["(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))"]],"stop":[["saturated",1]],"time":26.630859375,"type":"simplify"},{"compiler":[[38,19]],"time":0.405029296875,"type":"eval"},{"alts":[["(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","fresh",11.771495550979543],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","next",0.5762677241034082]],"compiler":[[22,15],[21,14],[22,15],[21,14]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.5684552241034082],"time":1.488037109375,"type":"prune"},{"compiler":[[62,14]],"locations":[["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))",0.015625,true],["(/.f64 sin2phi (*.f64 alphay alphay))",0.2578125,true],["(/.f64 cos2phi (*.f64 alphax alphax))",0.265625,true],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))",0.5632214350296401,true]],"time":11.761962890625,"type":"localize"},{"count":[[4,156]],"series":[["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","alphay","-inf",0.1669921875],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","alphay","inf",0.18896484375],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","alphay","0",0.22705078125],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","sin2phi","-inf",0.162841796875],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","sin2phi","inf",0.175048828125],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","sin2phi","0",0.27783203125],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","alphax","-inf",0.1689453125],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","alphax","inf",0.18896484375],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","alphax","0",0.22900390625],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","cos2phi","-inf",0.163818359375],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","cos2phi","inf",0.162109375],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","cos2phi","0",0.31884765625],["(/.f64 sin2phi (*.f64 alphay alphay))","alphay","-inf",0.159912109375],["(/.f64 sin2phi (*.f64 alphay alphay))","alphay","inf",0.244873046875],["(/.f64 sin2phi (*.f64 alphay alphay))","alphay","0",0.35205078125],["(/.f64 sin2phi (*.f64 alphay alphay))","sin2phi","-inf",0.364013671875],["(/.f64 sin2phi (*.f64 alphay alphay))","sin2phi","inf",0.455078125],["(/.f64 sin2phi (*.f64 alphay alphay))","sin2phi","0",0.442138671875],["(/.f64 cos2phi (*.f64 alphax alphax))","alphax","-inf",0.14501953125],["(/.f64 cos2phi (*.f64 alphax alphax))","alphax","inf",0.239990234375],["(/.f64 cos2phi (*.f64 alphax alphax))","alphax","0",0.402099609375],["(/.f64 cos2phi (*.f64 alphax alphax))","cos2phi","-inf",0.3681640625],["(/.f64 cos2phi (*.f64 alphax alphax))","cos2phi","inf",0.474853515625],["(/.f64 cos2phi (*.f64 alphax alphax))","cos2phi","0",0.452880859375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","-inf",0.3330078125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","inf",0.593017578125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","0",1.074951171875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","-inf",0.625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","inf",0.56005859375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","0",0.531005859375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","-inf",0.33203125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","inf",0.592041015625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","0",0.818115234375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","-inf",0.473876953125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","inf",0.971923828125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","0",0.811767578125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","-inf",0.541015625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","inf",0.712890625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","0",1.143798828125]],"time":17.338134765625,"type":"series"},{"count":[[4,214]],"egraph":[[2,5345,47,0.033846291],[1,336,47,0.006816374],[0,15,55,0.000329083]],"inputs":[["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 sin2phi (*.f64 alphay alphay))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (neg.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))) (cbrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2)) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (*.f64 (cbrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 u0)) (*.f64 (sqrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) (log1p.f64 u0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) 1) (/.f64 (sqrt.f64 (log1p.f64 u0)) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2)) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (pow.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2)) (/.f64 (sqrt.f64 (log1p.f64 u0)) (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) 1) (/.f64 (cbrt.f64 (log1p.f64 u0)) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (pow.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2)) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2)) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (cbrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay))) (pow.f64 (*.f64 alphax alphay) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (+.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3))) (fma.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2))) (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)))) (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))) (log1p.f64 u0)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log1p.f64 u0) 3) (pow.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 cos2phi (pow.f64 alphax -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 cos2phi (pow.f64 alphax -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) (*.f64 (cbrt.f64 cos2phi) (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 cos2phi) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 cos2phi) (*.f64 (sqrt.f64 cos2phi) (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 cos2phi) (/.f64 1 (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alphax -2) cos2phi)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 cos2phi alphax) (/.f64 1 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 alphax) (/.f64 cos2phi alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) alphax) (/.f64 (cbrt.f64 cos2phi) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) 1) (/.f64 (cbrt.f64 cos2phi) (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 cos2phi) 1) (/.f64 (sqrt.f64 cos2phi) (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) (cbrt.f64 (pow.f64 alphax 4))) (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 cos2phi) (cbrt.f64 (pow.f64 alphax 4))) (/.f64 (sqrt.f64 cos2phi) (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 alphax (/.f64 cos2phi alphax)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 cos2phi (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 cos2phi) (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 cos2phi (pow.f64 alphax -2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 sin2phi (pow.f64 alphay -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 sin2phi (pow.f64 alphay -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 sin2phi (pow.f64 alphay -2))) (cbrt.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4))) (cbrt.f64 (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 sin2phi) 2) (*.f64 (cbrt.f64 sin2phi) (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 sin2phi) alphay))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 sin2phi) (*.f64 (sqrt.f64 sin2phi) (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 sin2phi) (/.f64 1 (neg.f64 (*.f64 alphay alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alphay -2) sin2phi)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 sin2phi alphay) (/.f64 1 alphay))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 sin2phi) 2) 1) (/.f64 (cbrt.f64 sin2phi) (*.f64 alphay alphay)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 sin2phi) 1) (/.f64 (sqrt.f64 sin2phi) (*.f64 alphay alphay)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 alphay) (/.f64 sin2phi alphay))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 sin2phi) 2) alphay) (/.f64 (cbrt.f64 sin2phi) alphay))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphay 4))) (/.f64 sin2phi (pow.f64 (cbrt.f64 alphay) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 sin2phi) 2) (cbrt.f64 (pow.f64 alphay 4))) (cbrt.f64 (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 sin2phi) (cbrt.f64 (pow.f64 alphay 4))) (/.f64 (sqrt.f64 sin2phi) (pow.f64 (cbrt.f64 alphay) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 sin2phi (pow.f64 alphay -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 sin2phi) alphay) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 alphay alphay) sin2phi) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 sin2phi (neg.f64 (*.f64 alphay alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 sin2phi) (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 sin2phi (pow.f64 alphay -2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2)))) (/.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)) (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) (pow.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 2) (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (/.f64 1 (pow.f64 (*.f64 alphax alphay) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3)) (/.f64 1 (fma.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2))) (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4))) (/.f64 1 (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (*.f64 alphax alphay) 2) (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2))) (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) (+.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2))) (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (pow.f64 (*.f64 alphax alphay) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3)) (fma.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2))) (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3)) (+.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)) (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 cos2phi sin2phi) (pow.f64 (*.f64 alphax alphay) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4))) (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay))) (neg.f64 (pow.f64 (*.f64 alphax alphay) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3))) (neg.f64 (fma.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2))) (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)))) (neg.f64 (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 alphay alphay (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) sin2phi)) (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) (*.f64 alphay alphay)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 cos2phi) (*.f64 alphay alphay) (*.f64 (*.f64 alphax (neg.f64 alphax)) sin2phi)) (*.f64 (*.f64 alphax (neg.f64 alphax)) (*.f64 alphay alphay)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 cos2phi alphax) (*.f64 alphay alphay) (*.f64 alphax sin2phi)) (*.f64 alphax (*.f64 alphay alphay)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 cos2phi (/.f64 (*.f64 alphay alphay) sin2phi) (*.f64 alphax alphax)) (*.f64 (*.f64 alphax alphax) (/.f64 (*.f64 alphay alphay) sin2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) 1)) (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) (/.f64 (*.f64 alphay alphay) sin2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 cos2phi) (/.f64 (*.f64 alphay alphay) sin2phi) (*.f64 (*.f64 alphax (neg.f64 alphax)) 1)) (*.f64 (*.f64 alphax (neg.f64 alphax)) (/.f64 (*.f64 alphay alphay) sin2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 cos2phi alphax) (/.f64 (*.f64 alphay alphay) sin2phi) alphax) (*.f64 alphax (/.f64 (*.f64 alphay alphay) sin2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 cos2phi (neg.f64 (*.f64 alphay alphay)) (*.f64 (*.f64 alphax alphax) (neg.f64 sin2phi))) (*.f64 (*.f64 alphax alphax) (neg.f64 (*.f64 alphay alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 alphay (neg.f64 alphay) (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) (neg.f64 sin2phi))) (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) (neg.f64 (*.f64 alphay alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 cos2phi) (neg.f64 (*.f64 alphay alphay)) (*.f64 (*.f64 alphax (neg.f64 alphax)) (neg.f64 sin2phi))) (*.f64 (*.f64 alphax (neg.f64 alphax)) (neg.f64 (*.f64 alphay alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 cos2phi alphax) (neg.f64 (*.f64 alphay alphay)) (*.f64 alphax (neg.f64 sin2phi))) (*.f64 alphax (neg.f64 (*.f64 alphay alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 cos2phi alphay (*.f64 (*.f64 alphax alphax) (/.f64 sin2phi alphay))) (*.f64 (*.f64 alphax alphax) alphay))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 alphay (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) (/.f64 sin2phi alphay))) (*.f64 (/.f64 alphax (/.f64 cos2phi alphax)) alphay))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 cos2phi) alphay (*.f64 (*.f64 alphax (neg.f64 alphax)) (/.f64 sin2phi alphay))) (*.f64 (*.f64 alphax (neg.f64 alphax)) alphay))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 cos2phi alphax) alphay (*.f64 alphax (/.f64 sin2phi alphay))) (*.f64 alphax alphay))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 alphax alphax (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) cos2phi)) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 sin2phi) (*.f64 alphax alphax) (*.f64 (neg.f64 (*.f64 alphay alphay)) cos2phi)) (*.f64 (neg.f64 (*.f64 alphay alphay)) (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 sin2phi alphay) (*.f64 alphax alphax) (*.f64 alphay cos2phi)) (*.f64 alphay (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 sin2phi (/.f64 alphax (/.f64 cos2phi alphax)) (*.f64 alphay alphay)) (*.f64 (*.f64 alphay alphay) (/.f64 alphax (/.f64 cos2phi alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 alphax (/.f64 cos2phi alphax)) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) 1)) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (/.f64 alphax (/.f64 cos2phi alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 sin2phi) (/.f64 alphax (/.f64 cos2phi alphax)) (*.f64 (neg.f64 (*.f64 alphay alphay)) 1)) (*.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 alphax (/.f64 cos2phi alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 sin2phi alphay) (/.f64 alphax (/.f64 cos2phi alphax)) alphay) (*.f64 alphay (/.f64 alphax (/.f64 cos2phi alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 sin2phi (*.f64 alphax (neg.f64 alphax)) (*.f64 (*.f64 alphay alphay) (neg.f64 cos2phi))) (*.f64 (*.f64 alphay alphay) (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 alphax (neg.f64 alphax) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 cos2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 sin2phi) (*.f64 alphax (neg.f64 alphax)) (*.f64 (neg.f64 (*.f64 alphay alphay)) (neg.f64 cos2phi))) (*.f64 (neg.f64 (*.f64 alphay alphay)) (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 sin2phi alphay) (*.f64 alphax (neg.f64 alphax)) (*.f64 alphay (neg.f64 cos2phi))) (*.f64 alphay (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 sin2phi alphax (*.f64 (*.f64 alphay alphay) (/.f64 cos2phi alphax))) (*.f64 (*.f64 alphay alphay) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 alphax (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (/.f64 cos2phi alphax))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 sin2phi) alphax (*.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 cos2phi alphax))) (*.f64 (neg.f64 (*.f64 alphay alphay)) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 sin2phi alphay) alphax (*.f64 alphay (/.f64 cos2phi alphax))) (*.f64 alphay alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)) (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (*.f64 alphax alphax)) (*.f64 alphay alphay))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2)))) (pow.f64 (exp.f64 sin2phi) (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 cos2phi) (pow.f64 alphax -2)) (+.f64 1 (expm1.f64 (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2)))) (+.f64 1 (expm1.f64 (*.f64 sin2phi (pow.f64 alphay -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 sin2phi (pow.f64 alphay -2)))) (pow.f64 (exp.f64 cos2phi) (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 sin2phi) (pow.f64 alphay -2)) (+.f64 1 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 sin2phi (pow.f64 alphay -2)))) (+.f64 1 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 cos2phi (pow.f64 alphax -2) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 1 (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 1 (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) (*.f64 (cbrt.f64 cos2phi) (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 sin2phi (pow.f64 alphay -2))) (cbrt.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4))) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4))) (cbrt.f64 (*.f64 sin2phi (pow.f64 alphay -2))) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 sin2phi) 2) (*.f64 (cbrt.f64 sin2phi) (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 cos2phi) alphax) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 cos2phi) (*.f64 (sqrt.f64 cos2phi) (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 sin2phi) alphay) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 sin2phi) (*.f64 (sqrt.f64 sin2phi) (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 cos2phi) (/.f64 1 (*.f64 alphax (neg.f64 alphax))) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 sin2phi) (/.f64 1 (neg.f64 (*.f64 alphay alphay))) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 alphax -2) cos2phi (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 alphay -2) sin2phi (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 cos2phi alphax) (/.f64 1 alphax) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 sin2phi alphay) (/.f64 1 alphay) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 sin2phi) 2) 1) (/.f64 (cbrt.f64 sin2phi) (*.f64 alphay alphay)) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 sin2phi) 1) (/.f64 (sqrt.f64 sin2phi) (*.f64 alphay alphay)) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 alphax) (/.f64 cos2phi alphax) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) alphax) (/.f64 (cbrt.f64 cos2phi) alphax) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) 1) (/.f64 (cbrt.f64 cos2phi) (*.f64 alphax alphax)) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 cos2phi) 1) (/.f64 (sqrt.f64 cos2phi) (*.f64 alphax alphax)) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) (cbrt.f64 (pow.f64 alphax 4))) (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 cos2phi) (cbrt.f64 (pow.f64 alphax 4))) (/.f64 (sqrt.f64 cos2phi) (pow.f64 (cbrt.f64 alphax) 2)) (*.f64 sin2phi (pow.f64 alphay -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 alphay) (/.f64 sin2phi alphay) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 sin2phi) 2) alphay) (/.f64 (cbrt.f64 sin2phi) alphay) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphay 4))) (/.f64 sin2phi (pow.f64 (cbrt.f64 alphay) 2)) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 sin2phi) 2) (cbrt.f64 (pow.f64 alphay 4))) (cbrt.f64 (*.f64 sin2phi (pow.f64 alphay -2))) (*.f64 cos2phi (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 sin2phi) (cbrt.f64 (pow.f64 alphay 4))) (/.f64 (sqrt.f64 sin2phi) (pow.f64 (cbrt.f64 alphay) 2)) (*.f64 cos2phi (pow.f64 alphax -2)))))))"]],"rules":[["egg-rr",106],["egg-rr",33],["egg-rr",33],["egg-rr",42]],"stop":[["node limit",1]],"time":66.6298828125,"type":"rewrite"},{"count":[[370,260]],"egraph":[[3,7170,4502,0.026858959],[2,1558,4502,0.012387793000000001],[1,388,4514,0.0031459590000000003],[0,122,4778,0.000740334]],"inputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (pow.f64 alphay 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 cos2phi (pow.f64 alphax 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 cos2phi (pow.f64 alphax 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 cos2phi (pow.f64 alphax 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 sin2phi (pow.f64 alphay 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 sin2phi (pow.f64 alphay 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 cos2phi (pow.f64 alphax 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 sin2phi (pow.f64 alphay 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 sin2phi (pow.f64 alphay 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 sin2phi (pow.f64 alphay 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 cos2phi (pow.f64 alphax 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(/.f64 cos2phi (pow.f64 alphax 2))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(/.f64 (neg.f64 (+.f64 (log.f64 -1) (log.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(+.f64 (-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (-.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (-.f64 (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0)))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))) (-.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 sin2phi (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)) (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (*.f64 alphax (*.f64 alphax (log1p.f64 (neg.f64 u0))))) cos2phi)","(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) sin2phi)) (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (*.f64 alphax (*.f64 alphax (log1p.f64 (neg.f64 u0))))) cos2phi)","(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) sin2phi)) (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (*.f64 alphax (*.f64 alphax (log1p.f64 (neg.f64 u0))))) cos2phi)","(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) sin2phi)) (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 sin2phi (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)) (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 sin2phi (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)) (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (*.f64 alphax (*.f64 alphax (log1p.f64 (neg.f64 u0))))) cos2phi)","(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) sin2phi)) (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 sin2phi (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)) (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 sin2phi (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)) (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 alphay alphay)) (/.f64 sin2phi (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)))) (/.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 8)) (pow.f64 sin2phi 4)) (/.f64 (pow.f64 cos2phi 3) (pow.f64 alphax 6)) (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (/.f64 (*.f64 (/.f64 cos2phi (pow.f64 sin2phi 3)) cos2phi) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (*.f64 alphax (*.f64 alphax (log1p.f64 (neg.f64 u0))))) cos2phi)","(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) sin2phi)) (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (*.f64 alphax (*.f64 alphax (log1p.f64 (neg.f64 u0))))) cos2phi)","(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) sin2phi)) (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (*.f64 alphay alphay) (*.f64 cos2phi cos2phi))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) (pow.f64 alphax 4))) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 sin2phi (pow.f64 alphay 2))","(/.f64 sin2phi (*.f64 alphay alphay))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))","(+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))","(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))"]],"stop":[["node limit",1]],"time":79.966064453125,"type":"simplify"},{"compiler":[[6479,2862]],"time":54.410888671875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","fresh",46.0335821127663],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (/.f64 1 (pow.f64 (*.f64 alphax alphay) 2))))","fresh",0.834603026925111],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (sqrt.f64 sin2phi) (*.f64 (sqrt.f64 sin2phi) (pow.f64 alphay -2)))))","fresh",0.7264028315562704],["(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","fresh",16.725351539641448],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphay 4))) (/.f64 sin2phi (pow.f64 (cbrt.f64 alphay) 2)))))","fresh",0.7850029413244605],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","fresh",0.6446652827140603],["(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","fresh",11.319026280206218],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) alphax) (/.f64 (cbrt.f64 cos2phi) alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","fresh",3.592456859672449],["(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","fresh",50.20550420704805],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) (*.f64 alphay alphay) (*.f64 alphax sin2phi)) (*.f64 alphax (*.f64 alphay alphay))))","fresh",0.6554265620193864],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","next",0.6205640131771764],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) alphay (*.f64 alphax (/.f64 sin2phi alphay))) (*.f64 alphax alphay)))","fresh",0.6563840327140603]],"compiler":[[15,11],[28,19],[25,17],[15,11],[29,22],[29,22],[72,52],[27,18],[32,19],[26,15],[22,16],[24,15],[15,11],[28,19],[25,17],[15,11],[29,22],[29,22],[72,52],[27,18],[32,19],[26,15],[22,16],[24,15]],"count":[[262,12]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[260,12],"picked":[1,0]}],"min-error":[0.046875],"time":68.8740234375,"type":"prune"},{"compiler":[[69,22]],"locations":[["(/.f64 (sqrt.f64 cos2phi) alphax)",0.24609375,true],["(/.f64 sin2phi (*.f64 alphay alphay))",0.2578125,false],["(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)",0.5583000488422102,true],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))",0.5632214350296401,true]],"time":13.81494140625,"type":"localize"},{"count":[[3,73]],"series":[["(/.f64 (sqrt.f64 cos2phi) alphax)","alphax","-inf",0.151123046875],["(/.f64 (sqrt.f64 cos2phi) alphax)","alphax","inf",0.138916015625],["(/.f64 (sqrt.f64 cos2phi) alphax)","alphax","0",0.142822265625],["(/.f64 (sqrt.f64 cos2phi) alphax)","cos2phi","-inf",0.320068359375],["(/.f64 (sqrt.f64 cos2phi) alphax)","cos2phi","inf",0.26220703125],["(/.f64 (sqrt.f64 cos2phi) alphax)","cos2phi","0",0.30810546875],["(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)","alphax","-inf",0.39111328125],["(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)","alphax","inf",0.330078125],["(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)","alphax","0",0.533935546875],["(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)","cos2phi","-inf",0.447021484375],["(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)","cos2phi","inf",0.3720703125],["(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)","cos2phi","0",0.386962890625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","-inf",0.248046875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","inf",0.338134765625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","0",0.322998046875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","-inf",0.27490234375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","inf",0.29296875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","0",0.304931640625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","-inf",0.35302734375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","inf",0.356201171875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","0",1.787841796875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","-inf",3.224853515625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","inf",1.777099609375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","0",1.008056640625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","-inf",0.2900390625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","inf",0.31298828125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","0",0.468017578125]],"time":15.606201171875,"type":"series"},{"count":[[3,122]],"egraph":[[2,5247,32,0.034037042],[1,373,32,0.006951499999999999],[0,17,42,0.000398625]],"inputs":[["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","(pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)","(/.f64 (sqrt.f64 cos2phi) alphax)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))) (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (neg.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 2) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (*.f64 (cbrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 u0)) (*.f64 (sqrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) (log1p.f64 u0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) 1) (/.f64 (cbrt.f64 (log1p.f64 u0)) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) 1) (/.f64 (sqrt.f64 (log1p.f64 u0)) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (/.f64 (sqrt.f64 (log1p.f64 u0)) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (cbrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 6) (pow.f64 (/.f64 (/.f64 sin2phi alphay) alphay) 3))) (fma.f64 (/.f64 (/.f64 sin2phi alphay) alphay) (-.f64 (/.f64 (/.f64 sin2phi alphay) alphay) (/.f64 cos2phi (*.f64 alphax alphax))) (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (-.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 4) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)))) (-.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (/.f64 sin2phi alphay) alphay)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))) (log1p.f64 u0)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log1p.f64 u0) 3) (pow.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 cos2phi (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 cos2phi (*.f64 alphax alphax)))) (cbrt.f64 (exp.f64 (/.f64 cos2phi (*.f64 alphax alphax)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 cos2phi (*.f64 alphax alphax))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 cos2phi (*.f64 alphax alphax)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 cos2phi (*.f64 (pow.f64 alphax -1) (pow.f64 alphax -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 cos2phi (pow.f64 (pow.f64 alphax -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 cos2phi) (*.f64 (pow.f64 alphax -1) (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 cos2phi) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 cos2phi (*.f64 alphax alphax)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 cos2phi (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 4)) (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (*.f64 (sqrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (sqrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) (sqrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (sqrt.f64 cos2phi)) (pow.f64 alphax -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax)))) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 cos2phi (*.f64 alphax alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 cos2phi) (*.f64 (/.f64 alphax (sqrt.f64 cos2phi)) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 cos2phi) (*.f64 alphax (/.f64 alphax (sqrt.f64 cos2phi))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 alphax (sqrt.f64 cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 alphax (sqrt.f64 cos2phi)) (/.f64 alphax (sqrt.f64 cos2phi))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 cos2phi)) (*.f64 (/.f64 alphax (sqrt.f64 cos2phi)) (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) (neg.f64 (sqrt.f64 cos2phi))) (*.f64 (neg.f64 alphax) (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) (sqrt.f64 cos2phi)) (*.f64 (neg.f64 alphax) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) 1) (*.f64 (neg.f64 alphax) (/.f64 alphax (sqrt.f64 cos2phi))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 cos2phi) (neg.f64 (sqrt.f64 cos2phi))) (*.f64 alphax (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 cos2phi) (/.f64 (sqrt.f64 cos2phi) alphax)) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) (/.f64 (sqrt.f64 cos2phi) alphax)) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (sqrt.f64 cos2phi)) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (neg.f64 (sqrt.f64 cos2phi))) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 cos2phi (*.f64 alphax alphax))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sqrt.f64 cos2phi) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) (cbrt.f64 (exp.f64 (/.f64 (sqrt.f64 cos2phi) alphax))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 cos2phi) (pow.f64 alphax -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sqrt.f64 cos2phi) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 cos2phi) (*.f64 (cbrt.f64 (sqrt.f64 cos2phi)) (pow.f64 alphax -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (sqrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 cos2phi 1/4) (*.f64 (pow.f64 cos2phi 1/4) (pow.f64 alphax -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 cos2phi)) (/.f64 1 (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alphax -1) (sqrt.f64 cos2phi))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 4))) (sqrt.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 cos2phi) 1) (/.f64 (cbrt.f64 (sqrt.f64 cos2phi)) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 cos2phi 1/4) 1) (/.f64 (pow.f64 cos2phi 1/4) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 alphax) 2)) (/.f64 (sqrt.f64 cos2phi) (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 cos2phi) (pow.f64 (cbrt.f64 alphax) 2)) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 cos2phi 1/4) (pow.f64 (cbrt.f64 alphax) 2)) (/.f64 (pow.f64 cos2phi 1/4) (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 alphax)) (/.f64 (sqrt.f64 cos2phi) (sqrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 cos2phi) (sqrt.f64 alphax)) (/.f64 (cbrt.f64 (sqrt.f64 cos2phi)) (sqrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 cos2phi (*.f64 alphax alphax)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 alphax (sqrt.f64 cos2phi)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sqrt.f64 cos2phi) (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 cos2phi (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (sqrt.f64 cos2phi) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sqrt.f64 cos2phi) alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 cos2phi 3/2) (pow.f64 alphax 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) 1))))))"]],"rules":[["egg-rr",39],["egg-rr",39],["egg-rr",44]],"stop":[["node limit",1]],"time":60.3330078125,"type":"rewrite"},{"count":[[195,165]],"egraph":[[3,7194,2987,0.026091209],[2,1569,2987,0.012046417],[1,394,2995,0.0029298749999999998],[0,125,3233,0.000655083]],"inputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))"]],"method":["egg-herbie"],"outputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(/.f64 (neg.f64 (+.f64 (log.f64 -1) (log.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(+.f64 (-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(-.f64 (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (-.f64 (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0)))))","(+.f64 (-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3)))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(/.f64 (neg.f64 (*.f64 alphay (*.f64 alphay (log1p.f64 (neg.f64 u0))))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (*.f64 (neg.f64 alphax) alphax))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)) (pow.f64 sin2phi 3))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (*.f64 (/.f64 (pow.f64 alphax 8) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(/.f64 (neg.f64 (*.f64 alphay (*.f64 alphay (log1p.f64 (neg.f64 u0))))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi))))","(-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (+.f64 (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(/.f64 (neg.f64 (*.f64 alphay (*.f64 alphay (log1p.f64 (neg.f64 u0))))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi))))","(-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (+.f64 (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (*.f64 (neg.f64 alphax) alphax))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)) (pow.f64 sin2phi 3))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (*.f64 (/.f64 (pow.f64 alphax 8) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(/.f64 (neg.f64 (*.f64 alphay (*.f64 alphay (log1p.f64 (neg.f64 u0))))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi))))","(-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (+.f64 (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(/.f64 (neg.f64 (*.f64 alphay (*.f64 alphay (log1p.f64 (neg.f64 u0))))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi))))","(-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (+.f64 (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(/.f64 (neg.f64 (*.f64 alphay (*.f64 alphay (log1p.f64 (neg.f64 u0))))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi))))","(-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (/.f64 (*.f64 (*.f64 cos2phi (log1p.f64 (neg.f64 u0))) (pow.f64 alphay 4)) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))))","(-.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 sin2phi sin2phi))) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (/.f64 (*.f64 cos2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4))) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))) (+.f64 (neg.f64 (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 sin2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6))) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 alphax alphax)) (pow.f64 alphay 4)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (/.f64 (pow.f64 sin2phi 4) (pow.f64 alphay 8)) (pow.f64 alphax 6)) (log1p.f64 (neg.f64 u0))))) (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0))) (pow.f64 alphax 4)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (*.f64 (neg.f64 alphax) alphax))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)) (pow.f64 sin2phi 3))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (*.f64 (/.f64 (pow.f64 alphax 8) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (*.f64 (neg.f64 alphax) alphax))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 sin2phi sin2phi) (/.f64 (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(+.f64 (fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))))) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)) (pow.f64 sin2phi 3))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (*.f64 (/.f64 (pow.f64 alphax 8) (pow.f64 alphay 6)) (log1p.f64 (neg.f64 u0)))) (fma.f64 (*.f64 (/.f64 sin2phi (pow.f64 cos2phi 3)) sin2phi) (*.f64 (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 4)) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)","(*.f64 (sqrt.f64 cos2phi) (/.f64 1 alphax))","(/.f64 (sqrt.f64 cos2phi) alphax)"]],"stop":[["node limit",1]],"time":64.410888671875,"type":"simplify"},{"compiler":[[5102,2055]],"time":40.512939453125,"type":"eval"},{"alts":[["(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","fresh",11.319026280206218],["(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (*.f64 (neg.f64 alphax) alphax))","fresh",46.03196087257944],["(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","fresh",46.0335821127663],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (/.f64 1 (pow.f64 (*.f64 alphax alphay) 2))))","fresh",0.834603026925111],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (sqrt.f64 sin2phi) (*.f64 (sqrt.f64 sin2phi) (pow.f64 alphay -2)))))","fresh",0.7264028315562704],["(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","fresh",16.725351539641448],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphay 4))) (/.f64 sin2phi (pow.f64 (cbrt.f64 alphay) 2)))))","fresh",0.7850029413244605],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","fresh",0.6446652827140603],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) (*.f64 alphay alphay) (*.f64 alphax sin2phi)) (*.f64 alphax (*.f64 alphay alphay))))","fresh",0.6554265620193864],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","next",0.6010327631771762],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","done",0.6205640131771764],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) alphay (*.f64 alphax (/.f64 sin2phi alphay))) (*.f64 alphax alphay)))","fresh",0.6563840327140603]],"compiler":[[72,52],[15,11],[15,11],[28,19],[25,17],[15,11],[29,22],[29,22],[26,15],[33,20],[22,16],[24,15],[72,52],[15,11],[15,11],[28,19],[25,17],[15,11],[29,22],[29,22],[26,15],[33,20],[24,15]],"count":[[212,12]],"kept":[{"done":[0,0],"fresh":[11,9],"new":[200,2],"picked":[1,1]}],"min-error":[0.0390625],"time":45.10107421875,"type":"prune"},{"compiler":[[130,20]],"locations":[["(/.f64 cos2phi (*.f64 alphax alphax))",0.265625,false],["(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))",0.296875,true],["(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))",0.32259750976844204,true],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))",0.5632214350296401,true]],"time":19.01611328125,"type":"localize"},{"count":[[3,76]],"series":[["(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))","alphax","-inf",0.408935546875],["(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))","alphax","inf",0.322021484375],["(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))","alphax","0",0.30810546875],["(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))","cos2phi","-inf",0.333984375],["(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))","cos2phi","inf",0.31005859375],["(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))","cos2phi","0",0.43115234375],["(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))","alphax","-inf",1.801025390625],["(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))","alphax","inf",0.2080078125],["(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))","alphax","0",0.924072265625],["(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))","cos2phi","-inf",2.296142578125],["(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))","cos2phi","inf",0.225830078125],["(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))","cos2phi","0",1.155029296875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","-inf",0.27197265625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","inf",0.3330078125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","0",0.3330078125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","-inf",0.302001953125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","inf",0.285888671875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","0",0.307861328125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","-inf",0.80908203125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","inf",0.3330078125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","0",0.409912109375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","-inf",1.43603515625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","inf",0.342041015625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","0",0.299072265625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","-inf",0.299072265625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","inf",0.319091796875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","0",0.43408203125]],"time":15.80078125,"type":"series"},{"count":[[3,122]],"egraph":[[2,6769,38,0.037643335],[1,459,38,0.008778751],[0,21,86,0.000437834]],"inputs":[["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","(*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax)))","(*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))) (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (neg.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))) (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))) 2) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (*.f64 (cbrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 u0)) (*.f64 (sqrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))) (log1p.f64 u0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) 1) (/.f64 (cbrt.f64 (log1p.f64 u0)) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))) 2))) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (cbrt.f64 (pow.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))) 2))) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))) 2))) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (cbrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) 1) (/.f64 (sqrt.f64 (log1p.f64 u0)) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (cbrt.f64 (pow.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))) 2))) (/.f64 (sqrt.f64 (log1p.f64 u0)) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (+.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (*.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)))) (-.f64 (*.f64 cos2phi (pow.f64 alphax -2)) (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 (sqrt.f64 sin2phi) alphay))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))) (log1p.f64 u0)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log1p.f64 u0) 3) (pow.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (*.f64 cos2phi (pow.f64 alphax -2))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 cos2phi (pow.f64 alphax -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 cos2phi (*.f64 alphax alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 cos2phi) (*.f64 (/.f64 alphax (sqrt.f64 cos2phi)) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 cos2phi) (*.f64 alphax (/.f64 alphax (sqrt.f64 cos2phi))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 cos2phi) (/.f64 (*.f64 alphax alphax) (sqrt.f64 cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (/.f64 alphax (sqrt.f64 cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 alphax (/.f64 cos2phi alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 alphax (/.f64 cos2phi alphax)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 cos2phi) 2) (/.f64 (*.f64 alphax alphax) (cbrt.f64 cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 cos2phi) (*.f64 alphax (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 cos2phi)) (*.f64 (/.f64 alphax (sqrt.f64 cos2phi)) (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 alphax (/.f64 cos2phi alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 cos2phi alphax) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) (neg.f64 (sqrt.f64 cos2phi))) (*.f64 (neg.f64 alphax) (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 cos2phi)) (neg.f64 (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 cos2phi alphax)) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) 1) (*.f64 (neg.f64 alphax) (/.f64 alphax (sqrt.f64 cos2phi))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 cos2phi) (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))) (*.f64 (pow.f64 (cbrt.f64 alphax) 2) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) (cbrt.f64 cos2phi)) (*.f64 alphax (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 cos2phi 1) (*.f64 alphax alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 cos2phi (cbrt.f64 (pow.f64 alphax 4))) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 cos2phi alphax) 1) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 cos2phi alphax) (pow.f64 (cbrt.f64 alphax) 2)) (cbrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 cos2phi alphax) (sqrt.f64 alphax)) (sqrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 cos2phi) (/.f64 (sqrt.f64 cos2phi) alphax)) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) (/.f64 (sqrt.f64 cos2phi) alphax)) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 cos2phi) (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2)))) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (sqrt.f64 cos2phi)) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (neg.f64 (sqrt.f64 cos2phi))) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) (cbrt.f64 cos2phi)) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 alphax (/.f64 cos2phi alphax)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 cos2phi (*.f64 alphax (neg.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 cos2phi) (pow.f64 alphax -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 (*.f64 alphax alphax) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 cos2phi (pow.f64 alphax -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 cos2phi (pow.f64 alphax -2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 alphax (sqrt.f64 cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 alphax (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 cos2phi) 2) (cbrt.f64 (pow.f64 alphax 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sqrt.f64 cos2phi)) (*.f64 (/.f64 alphax (sqrt.f64 cos2phi)) (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)))) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (sqrt.f64 cos2phi))) (*.f64 alphax (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) (cbrt.f64 (sqrt.f64 cos2phi))) (*.f64 (neg.f64 alphax) (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 cos2phi)) (sqrt.f64 cos2phi)) (*.f64 (cbrt.f64 alphax) alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 cos2phi)) 1) (*.f64 (cbrt.f64 alphax) (/.f64 alphax (sqrt.f64 cos2phi))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 cos2phi)) (neg.f64 (sqrt.f64 cos2phi))) (*.f64 (cbrt.f64 alphax) (neg.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) 1) alphax)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) (pow.f64 (cbrt.f64 alphax) 2)) (cbrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 cos2phi) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) (sqrt.f64 alphax)) (sqrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 cos2phi)) (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax))) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 cos2phi)) (/.f64 (sqrt.f64 cos2phi) alphax)) (cbrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 cos2phi) (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2)))) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 cos2phi) alphax) (cbrt.f64 (sqrt.f64 cos2phi))) (cbrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (neg.f64 (sqrt.f64 cos2phi))) (neg.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) (cbrt.f64 cos2phi)) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 cos2phi (pow.f64 alphax -2)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 cos2phi (pow.f64 alphax -2)))) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))) 1))))))"]],"rules":[["egg-rr",35],["egg-rr",47],["egg-rr",40]],"stop":[["node limit",1]],"time":63.01513671875,"type":"rewrite"},{"count":[[198,171]],"egraph":[[3,6960,3472,0.028136458],[2,1984,3473,0.013430667],[1,467,3489,0.0035204579999999997],[0,141,3731,0.0007675]],"inputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (*.f64 -1 (/.f64 (*.f64 cos2phi (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (*.f64 -1 (/.f64 (*.f64 cos2phi (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (*.f64 -1 (/.f64 (*.f64 cos2phi (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(/.f64 (neg.f64 (+.f64 (log.f64 -1) (log.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (-.f64 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(+.f64 (-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (-.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (-.f64 (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0)))))","(+.f64 (-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3)))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 (*.f64 alphay alphay) (log1p.f64 (neg.f64 u0)))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0)))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 (*.f64 alphay alphay) (log1p.f64 (neg.f64 u0)))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0)))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 (*.f64 alphay alphay) (log1p.f64 (neg.f64 u0)))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (*.f64 -1 (/.f64 (*.f64 cos2phi (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))))","(*.f64 -1 (+.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (cbrt.f64 -1)) (*.f64 alphax alphax)))))","(-.f64 (/.f64 (neg.f64 (*.f64 (*.f64 alphay alphay) (log1p.f64 (neg.f64 u0)))) sin2phi) (*.f64 (*.f64 (/.f64 (cbrt.f64 -1) alphax) (/.f64 cos2phi alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))))","(neg.f64 (fma.f64 (*.f64 (/.f64 (cbrt.f64 -1) alphax) (/.f64 cos2phi alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (*.f64 -1 (/.f64 (*.f64 cos2phi (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (fma.f64 -1 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (cbrt.f64 -1)) (*.f64 alphax alphax))) (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)) (*.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 (cbrt.f64 -1) 2)))))))","(-.f64 (neg.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (/.f64 alphax (/.f64 (cbrt.f64 -1) alphax))) (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(neg.f64 (fma.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)) (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphay 4) (cbrt.f64 -1))) (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (pow.f64 (cbrt.f64 -1) 2)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (*.f64 -1 (/.f64 (*.f64 cos2phi (*.f64 (cbrt.f64 -1) (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0))))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (fma.f64 -1 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (cbrt.f64 -1)) (*.f64 alphax alphax))) (fma.f64 -1 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)) (*.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)) (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6))))))","(-.f64 (fma.f64 -1 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (/.f64 alphax (/.f64 (cbrt.f64 -1) alphax))) (*.f64 (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))) (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6)) (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 -1 (fma.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)) (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphay 4) (cbrt.f64 -1))) (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (pow.f64 (cbrt.f64 -1) 2)))) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8))))","(-.f64 (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8))) (fma.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)) (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphay 4) (cbrt.f64 -1))) (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (pow.f64 (cbrt.f64 -1) 2)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 (*.f64 alphay alphay) (log1p.f64 (neg.f64 u0)))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0)))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 (*.f64 alphay alphay) (log1p.f64 (neg.f64 u0)))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0)))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))))","(/.f64 (neg.f64 (*.f64 (*.f64 alphay alphay) (log1p.f64 (neg.f64 u0)))) sin2phi)","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4)))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 alphay alphay) (/.f64 sin2phi (log.f64 (-.f64 1 u0)))) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphax) (/.f64 (pow.f64 alphay 4) alphax)) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (/.f64 (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 6))) (pow.f64 alphax 4))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (+.f64 (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 cos2phi 3) (/.f64 (*.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 sin2phi 4) (log1p.f64 (neg.f64 u0)))) (pow.f64 alphay 8)))) (/.f64 (*.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphay 6)) (*.f64 (pow.f64 alphax 4) (/.f64 (pow.f64 sin2phi 3) (log1p.f64 (neg.f64 u0)))))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 cos2phi (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0)))))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (pow.f64 sin2phi 3) (pow.f64 cos2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8)) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (/.f64 (pow.f64 sin2phi 3) (/.f64 (/.f64 (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)) (pow.f64 alphax 8)) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 alphax alphax) (/.f64 cos2phi (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 alphay 6) (pow.f64 cos2phi 4)))) (fma.f64 (/.f64 sin2phi (/.f64 (pow.f64 cos2phi 3) sin2phi)) (/.f64 (pow.f64 alphax 6) (/.f64 (pow.f64 alphay 4) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))","(neg.f64 (/.f64 cos2phi (/.f64 (*.f64 alphax alphax) (cbrt.f64 -1))))","(/.f64 (neg.f64 (*.f64 cos2phi (cbrt.f64 -1))) (*.f64 alphax alphax))","(*.f64 (/.f64 (neg.f64 cos2phi) alphax) (/.f64 (cbrt.f64 -1) alphax))","(/.f64 (*.f64 cos2phi (neg.f64 (cbrt.f64 -1))) (*.f64 alphax alphax))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))","(neg.f64 (/.f64 cos2phi (/.f64 (*.f64 alphax alphax) (cbrt.f64 -1))))","(/.f64 (neg.f64 (*.f64 cos2phi (cbrt.f64 -1))) (*.f64 alphax alphax))","(*.f64 (/.f64 (neg.f64 cos2phi) alphax) (/.f64 (cbrt.f64 -1) alphax))","(/.f64 (*.f64 cos2phi (neg.f64 (cbrt.f64 -1))) (*.f64 alphax alphax))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))","(neg.f64 (/.f64 cos2phi (/.f64 (*.f64 alphax alphax) (cbrt.f64 -1))))","(/.f64 (neg.f64 (*.f64 cos2phi (cbrt.f64 -1))) (*.f64 alphax alphax))","(*.f64 (/.f64 (neg.f64 cos2phi) alphax) (/.f64 (cbrt.f64 -1) alphax))","(/.f64 (*.f64 cos2phi (neg.f64 (cbrt.f64 -1))) (*.f64 alphax alphax))","(*.f64 -1 (/.f64 (*.f64 cos2phi (cbrt.f64 -1)) (pow.f64 alphax 2)))","(neg.f64 (/.f64 cos2phi (/.f64 (*.f64 alphax alphax) (cbrt.f64 -1))))","(/.f64 (neg.f64 (*.f64 cos2phi (cbrt.f64 -1))) (*.f64 alphax alphax))","(*.f64 (/.f64 (neg.f64 cos2phi) alphax) (/.f64 (cbrt.f64 -1) alphax))","(/.f64 (*.f64 cos2phi (neg.f64 (cbrt.f64 -1))) (*.f64 alphax alphax))"]],"stop":[["node limit",1]],"time":75.0009765625,"type":"simplify"},{"compiler":[[6007,2433]],"time":45.2919921875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","fresh",46.0335821127663],["(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","fresh",16.725351539641448],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (/.f64 1 (pow.f64 (*.f64 alphax alphay) 2))))","fresh",0.834603026925111],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (sqrt.f64 sin2phi) (*.f64 (sqrt.f64 sin2phi) (pow.f64 alphay -2)))))","fresh",0.7264028315562704],["(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","fresh",11.319026280206218],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","done",0.6010327631771762],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","next",0.6446652827140603],["(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (*.f64 (neg.f64 alphax) alphax))","fresh",46.03196087257944],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) (*.f64 alphay alphay) (*.f64 alphax sin2phi)) (*.f64 alphax (*.f64 alphay alphay))))","fresh",0.6554265620193864],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","done",0.6205640131771764],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) alphay (*.f64 alphax (/.f64 sin2phi alphay))) (*.f64 alphax alphay)))","fresh",0.6563840327140603],["(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","fresh",49.70675286055939],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphay 4))) (/.f64 sin2phi (pow.f64 (cbrt.f64 alphay) 2)))))","fresh",0.7850029413244605]],"compiler":[[15,11],[15,11],[28,19],[25,17],[72,52],[33,20],[29,22],[15,11],[26,15],[22,16],[24,15],[32,19],[29,22],[15,11],[15,11],[28,19],[25,17],[72,52],[29,22],[15,11],[26,15],[24,15],[32,19],[29,22]],"count":[[218,13]],"kept":[{"done":[1,1],"fresh":[10,8],"new":[206,3],"picked":[1,1]}],"min-error":[0.03515625],"time":49.657958984375,"type":"prune"},{"compiler":[[111,59]],"locations":[["(/.f64 1 (cbrt.f64 (pow.f64 alphax 4)))",0.26953125,true],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))",0.33431625976844204,true],["(pow.f64 (cbrt.f64 alphax) 2)",0.5319137695368841,true],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))",0.5632214350296401,true]],"time":25.3759765625,"type":"localize"},{"count":[[4,84]],"series":[["(/.f64 1 (cbrt.f64 (pow.f64 alphax 4)))","alphax","-inf",0.235107421875],["(/.f64 1 (cbrt.f64 (pow.f64 alphax 4)))","alphax","inf",0.218017578125],["(/.f64 1 (cbrt.f64 (pow.f64 alphax 4)))","alphax","0",0.18994140625],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))","cos2phi","-inf",0.259033203125],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))","cos2phi","inf",0.14404296875],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))","cos2phi","0",0.1650390625],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))","alphax","-inf",0.605224609375],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))","alphax","inf",0.14208984375],["(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))","alphax","0",0.161865234375],["(pow.f64 (cbrt.f64 alphax) 2)","alphax","-inf",0.468994140625],["(pow.f64 (cbrt.f64 alphax) 2)","alphax","inf",0.300048828125],["(pow.f64 (cbrt.f64 alphax) 2)","alphax","0",0.35595703125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","-inf",0.267822265625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","inf",0.255126953125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphay","0",0.263916015625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","-inf",0.27001953125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","inf",0.275146484375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","sin2phi","0",0.27197265625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","-inf",0.321044921875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","inf",0.284912109375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","cos2phi","0",0.254150390625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","-inf",0.9638671875],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","inf",0.323974609375],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","alphax","0",0.260986328125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","-inf",0.27392578125],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","inf",0.295166015625],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","u0","0",0.365966796875]],"time":8.699951171875,"type":"series"},{"count":[[4,131]],"egraph":[[2,6966,41,0.039719833],[1,494,41,0.009172458],[0,23,67,0.000576041]],"inputs":[["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","(pow.f64 (cbrt.f64 alphax) 2)","(*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2)))","(/.f64 1 (cbrt.f64 (pow.f64 alphax 4)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 u0) (/.f64 1 (neg.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 2) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (*.f64 (cbrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 u0)) (*.f64 (sqrt.f64 (log1p.f64 u0)) (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) (log1p.f64 u0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) 1) (/.f64 (cbrt.f64 (log1p.f64 u0)) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) 1) (/.f64 (sqrt.f64 (log1p.f64 u0)) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (/.f64 (sqrt.f64 (log1p.f64 u0)) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2)) (/.f64 (log1p.f64 u0) (cbrt.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 u0)) 2) (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 (cbrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 (log1p.f64 u0) (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (+.f64 (pow.f64 (/.f64 cos2phi (*.f64 alphax alphax)) 3) (pow.f64 (*.f64 sin2phi (pow.f64 alphay -2)) 3))) (+.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (*.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (-.f64 (*.f64 sin2phi (pow.f64 alphay -2)) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 u0) (-.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)) (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 alphay 4)))) (-.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 sin2phi (pow.f64 alphay -2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (log1p.f64 u0)) (hypot.f64 (/.f64 (sqrt.f64 sin2phi) alphay) (/.f64 (sqrt.f64 cos2phi) alphax))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))) (log1p.f64 u0)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log1p.f64 u0) 3) (pow.f64 (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 u0) (fma.f64 sin2phi (pow.f64 alphay -2) (/.f64 cos2phi (*.f64 alphax alphax))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 alphax) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 alphax) (cbrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 alphax) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 alphax) 2)) (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 alphax) 2)) (*.f64 (cbrt.f64 (cbrt.f64 alphax)) (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax))) (cbrt.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 alphax 1/6) (*.f64 (pow.f64 alphax 1/6) (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 alphax) (pow.f64 alphax 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 alphax 8)))) (sqrt.f64 (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 alphax) (cbrt.f64 (pow.f64 (cbrt.f64 alphax) 2))) (cbrt.f64 (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 alphax (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 alphax) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 alphax alphax))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cbrt.f64 alphax))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 cos2phi (*.f64 alphax alphax)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (*.f64 alphax (cbrt.f64 alphax)) (/.f64 (pow.f64 (cbrt.f64 alphax) 2) cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (pow.f64 (cbrt.f64 alphax) 2) cos2phi) (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 alphax alphax) cos2phi))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 alphax (cbrt.f64 alphax)) (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (cbrt.f64 alphax) 2) (/.f64 cos2phi (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))) (/.f64 (pow.f64 (cbrt.f64 alphax) 2) cos2phi))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 cos2phi (*.f64 alphax alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 cos2phi (/.f64 (*.f64 alphax (cbrt.f64 alphax)) (pow.f64 (cbrt.f64 alphax) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2)) (*.f64 alphax (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 cos2phi) 2) (/.f64 (*.f64 alphax alphax) (cbrt.f64 cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 cos2phi (/.f64 cos2phi (*.f64 alphax (cbrt.f64 alphax))))) (/.f64 (*.f64 alphax (cbrt.f64 alphax)) (cbrt.f64 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 cos2phi) (/.f64 (*.f64 alphax alphax) (sqrt.f64 cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 cos2phi) (cbrt.f64 alphax)) (/.f64 (*.f64 alphax (cbrt.f64 alphax)) (/.f64 (sqrt.f64 cos2phi) (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 (*.f64 alphax (cbrt.f64 alphax))) (/.f64 (pow.f64 (cbrt.f64 alphax) 2) cos2phi)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 (pow.f64 (cbrt.f64 alphax) 2) cos2phi) (neg.f64 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 cos2phi) (neg.f64 (*.f64 alphax alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 cos2phi) (*.f64 (neg.f64 (*.f64 alphax (cbrt.f64 alphax))) (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 cos2phi) (*.f64 (*.f64 alphax (cbrt.f64 alphax)) (neg.f64 (pow.f64 (cbrt.f64 alphax) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 cos2phi (*.f64 alphax (cbrt.f64 alphax))) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2))) (neg.f64 (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 cos2phi (*.f64 alphax (cbrt.f64 alphax)))) (neg.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 cos2phi) 1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 alphax) 2)) (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 cos2phi)) (*.f64 (neg.f64 (*.f64 alphax (cbrt.f64 alphax))) (neg.f64 (pow.f64 (cbrt.f64 alphax) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 cos2phi -1) (*.f64 (pow.f64 (cbrt.f64 alphax) 2) (neg.f64 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 cos2phi) -1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 alphax) 2)) (neg.f64 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2)) (pow.f64 (cbrt.f64 alphax) 2)) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2)) 1) (*.f64 alphax (cbrt.f64 alphax)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2)) (cbrt.f64 (cbrt.f64 (pow.f64 alphax 8)))) (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 cos2phi (*.f64 alphax (cbrt.f64 alphax))) 1) (pow.f64 (cbrt.f64 alphax) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 cos2phi (*.f64 alphax (cbrt.f64 alphax))) (cbrt.f64 alphax)) (cbrt.f64 alphax))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 cos2phi (*.f64 alphax (cbrt.f64 alphax))) (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax)))) (cbrt.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2))) (neg.f64 (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 cos2phi) (/.f64 1 (*.f64 alphax (cbrt.f64 alphax)))) (neg.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))) (neg.f64 cos2phi)) (neg.f64 (pow.f64 (cbrt.f64 alphax) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 cos2phi (pow.f64 (cbrt.f64 alphax) -2)) -1) (neg.f64 (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 cos2phi (*.f64 alphax alphax)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 cos2phi (*.f64 alphax alphax)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 cos2phi cos2phi) (pow.f64 alphax 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 cos2phi (*.f64 alphax alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 cos2phi (*.f64 alphax alphax)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 cos2phi (*.f64 alphax alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 cos2phi (*.f64 alphax alphax))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax)))) (cbrt.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 8)))) (/.f64 1 (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 alphax) -2) (pow.f64 (cbrt.f64 alphax) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 alphax 8))) -1) (pow.f64 (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 alphax 4) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alphax (cbrt.f64 alphax)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (*.f64 alphax (cbrt.f64 alphax)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 alphax) -2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 8))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (*.f64 alphax (cbrt.f64 alphax)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 alphax (cbrt.f64 alphax))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (*.f64 alphax (cbrt.f64 alphax)))) 1))))))"]],"rules":[["egg-rr",23],["egg-rr",48],["egg-rr",20],["egg-rr",40]],"stop":[["node limit",1]],"time":67.35107421875,"type":"rewrite"},{"count":[[215,180]],"egraph":[[3,7104,3740,0.027854458],[2,2049,3740,0.013479833],[1,460,3761,0.0035885],[0,140,4028,0.000767208]],"inputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 4) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 4) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))) (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (pow.f64 alphax 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(fma.f64 1/2 (/.f64 (*.f64 u0 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(fma.f64 1/2 (/.f64 u0 (/.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) u0)) (fma.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (fma.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 u0 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))","(neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(/.f64 (neg.f64 (+.f64 (log.f64 -1) (log.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (-.f64 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(+.f64 (-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))))","(-.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (-.f64 (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (-.f64 (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0)))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (-.f64 (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))) (-.f64 (/.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))","(/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))))","(+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))) (+.f64 (/.f64 1 (*.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (*.f64 1/3 (/.f64 1 (*.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))))))","(+.f64 (/.f64 1/2 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (*.f64 u0 u0))) (+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(+.f64 (/.f64 (/.f64 1 u0) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))) (+.f64 (/.f64 1/3 (*.f64 (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))) (pow.f64 u0 3))) (/.f64 (log.f64 (/.f64 -1 u0)) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 sin2phi 3)) (pow.f64 alphay 6)) (/.f64 (pow.f64 alphax 8) (pow.f64 cos2phi 4))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6)))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (-.f64 (-.f64 (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi)))))","(-.f64 (*.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi))) (pow.f64 alphay 4)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (*.f64 (/.f64 (pow.f64 alphay 4) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 4) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))))","(fma.f64 -1 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 sin2phi 3)) (pow.f64 alphax 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)))) (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi))))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi))) (pow.f64 alphay 4)))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (log1p.f64 (neg.f64 u0))) (/.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 alphay 6)))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 (*.f64 sin2phi sin2phi) (pow.f64 (cbrt.f64 -1) 2)))) (fma.f64 (*.f64 (/.f64 cos2phi (neg.f64 (cbrt.f64 -1))) cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 4) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 2) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2)))) (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 (cbrt.f64 -1) 6) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6)))))))","(fma.f64 -1 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 -1) 4) (pow.f64 sin2phi 3)) (pow.f64 alphax 4)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6)))) (+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 (*.f64 alphax alphax) (*.f64 sin2phi sin2phi))))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 (cbrt.f64 -1) 6)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (*.f64 (pow.f64 alphax 6) (pow.f64 sin2phi 4))))))","(-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 cos2phi 3) 1) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (/.f64 (pow.f64 alphay 8) (pow.f64 sin2phi 4))) (*.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi))) (pow.f64 alphay 4))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (/.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (log1p.f64 (neg.f64 u0))) (/.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 alphay 6)))))","(-.f64 (fma.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (*.f64 (/.f64 (pow.f64 alphay 4) (*.f64 alphax (*.f64 alphax (*.f64 sin2phi sin2phi)))) (log1p.f64 (neg.f64 u0))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8)))) (fma.f64 (*.f64 (/.f64 cos2phi (neg.f64 (cbrt.f64 -1))) cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6)))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (-.f64 (-.f64 (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 sin2phi 3)) (pow.f64 alphay 6)) (/.f64 (pow.f64 alphax 8) (pow.f64 cos2phi 4))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 sin2phi 3)) (pow.f64 alphay 6)) (/.f64 (pow.f64 alphax 8) (pow.f64 cos2phi 4))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 sin2phi 3)) (pow.f64 alphay 6)) (/.f64 (pow.f64 alphax 8) (pow.f64 cos2phi 4))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6)))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (-.f64 (-.f64 (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6)))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (-.f64 (-.f64 (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi))","(neg.f64 (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))))","(fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax))))","(-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))))","(-.f64 (-.f64 (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6)))))","(-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 alphay 2) (log.f64 (-.f64 1 u0))) sin2phi)) (+.f64 (/.f64 (*.f64 cos2phi (*.f64 (pow.f64 alphay 4) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 2) (pow.f64 alphax 2))) (+.f64 (/.f64 (*.f64 (pow.f64 cos2phi 3) (*.f64 (pow.f64 alphay 8) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 4) (pow.f64 alphax 6))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 cos2phi 2) (*.f64 (pow.f64 alphay 6) (log.f64 (-.f64 1 u0)))) (*.f64 (pow.f64 sin2phi 3) (pow.f64 alphax 4)))))))","(+.f64 (fma.f64 -1 (/.f64 (*.f64 (*.f64 alphay alphay) (log.f64 (-.f64 1 u0))) sin2phi) (*.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 4)) (*.f64 alphax alphax)))) (+.f64 (neg.f64 (/.f64 (*.f64 cos2phi cos2phi) (/.f64 (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3)) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 6))))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphay 8)) (pow.f64 alphax 6)))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (pow.f64 alphay 4) (/.f64 (*.f64 alphax alphax) (log1p.f64 (neg.f64 u0)))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 6) (pow.f64 alphay 8))))) (*.f64 (/.f64 cos2phi (/.f64 (pow.f64 sin2phi 3) cos2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphax 4) (pow.f64 alphay 6))))) (*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (log1p.f64 (neg.f64 u0))))","(fma.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (*.f64 sin2phi sin2phi)) (-.f64 (-.f64 (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi))))","(-.f64 (-.f64 (fma.f64 (/.f64 cos2phi (*.f64 sin2phi sin2phi)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphax alphax) (pow.f64 alphay 4))) (*.f64 (/.f64 (pow.f64 cos2phi 3) (pow.f64 sin2phi 4)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 6)) (pow.f64 alphay 8)))) (*.f64 (*.f64 cos2phi cos2phi) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (*.f64 (pow.f64 alphax 4) (pow.f64 sin2phi 3))) (pow.f64 alphay 6)))) (*.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (*.f64 alphay alphay) sin2phi)))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 sin2phi 3)) (pow.f64 alphay 6)) (/.f64 (pow.f64 alphax 8) (pow.f64 cos2phi 4))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))","(neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))","(+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (*.f64 -1 (+.f64 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (neg.f64 (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax))))))","(-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (/.f64 sin2phi (*.f64 cos2phi (*.f64 cos2phi (*.f64 alphay alphay))))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0)))))","(+.f64 (/.f64 (*.f64 sin2phi (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4))) (*.f64 (pow.f64 cos2phi 2) (pow.f64 alphay 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 sin2phi 2) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4)))) (+.f64 (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 2)) cos2phi)))))","(+.f64 (*.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (/.f64 (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 4)) (*.f64 alphay alphay))) (fma.f64 -1 (/.f64 (*.f64 (*.f64 sin2phi sin2phi) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 6))) (*.f64 (pow.f64 cos2phi 3) (pow.f64 alphay 4))) (+.f64 (neg.f64 (/.f64 (log.f64 (-.f64 1 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (/.f64 (*.f64 (pow.f64 sin2phi 3) (*.f64 (log.f64 (-.f64 1 u0)) (pow.f64 alphax 8))) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 cos2phi cos2phi)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (/.f64 (pow.f64 alphax 4) alphay)) (-.f64 (-.f64 (*.f64 (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 sin2phi 3)) (pow.f64 alphay 6)) (/.f64 (pow.f64 alphax 8) (pow.f64 cos2phi 4))) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 cos2phi (*.f64 alphax alphax)))) (*.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (/.f64 (log1p.f64 (neg.f64 u0)) (/.f64 (pow.f64 alphay 4) (pow.f64 alphax 6))))))","(fma.f64 (/.f64 sin2phi (*.f64 alphay alphay)) (/.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 4)) (*.f64 cos2phi cos2phi)) (-.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphax 8)) (/.f64 (pow.f64 sin2phi 3) (*.f64 (pow.f64 cos2phi 4) (pow.f64 alphay 6)))) (fma.f64 (/.f64 (*.f64 sin2phi sin2phi) (pow.f64 cos2phi 3)) (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) (pow.f64 alphay 4)) (pow.f64 alphax 6)) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (*.f64 (*.f64 alphax alphax) (pow.f64 (cbrt.f64 -1) 2)))","(/.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (*.f64 alphax alphax))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (*.f64 (*.f64 alphax alphax) (pow.f64 (cbrt.f64 -1) 2)))","(/.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (*.f64 alphax alphax))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (*.f64 (*.f64 alphax alphax) (pow.f64 (cbrt.f64 -1) 2)))","(/.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (*.f64 alphax alphax))","(/.f64 cos2phi (*.f64 (pow.f64 (cbrt.f64 -1) 2) (pow.f64 alphax 2)))","(/.f64 cos2phi (*.f64 (*.f64 alphax alphax) (pow.f64 (cbrt.f64 -1) 2)))","(/.f64 (/.f64 cos2phi (pow.f64 (cbrt.f64 -1) 2)) (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))","(/.f64 cos2phi (pow.f64 alphax 2))","(/.f64 cos2phi (*.f64 alphax alphax))"]],"stop":[["node limit",1]],"time":73.4541015625,"type":"simplify"},{"compiler":[[5183,2289]],"time":42.380859375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","fresh",46.0335821127663],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (/.f64 1 (pow.f64 (*.f64 alphax alphay) 2))))","fresh",0.834603026925111],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (sqrt.f64 sin2phi) (*.f64 (sqrt.f64 sin2phi) (pow.f64 alphay -2)))))","fresh",0.7264028315562704],["(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","fresh",46.03196087257944],["(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","fresh",11.319026280206218],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","done",0.6010327631771762],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphay 4))) (/.f64 sin2phi (pow.f64 (cbrt.f64 alphay) 2)))))","fresh",0.7850029413244605],["(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","fresh",16.725351539641448],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","done",0.6446652827140603],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) (*.f64 alphay alphay) (*.f64 alphax sin2phi)) (*.f64 alphax (*.f64 alphay alphay))))","fresh",0.6554265620193864],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","done",0.6205640131771764],["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) alphay (*.f64 alphax (/.f64 sin2phi alphay))) (*.f64 alphax alphay)))","fresh",0.6563840327140603],["(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","fresh",49.70675286055939]],"compiler":[[15,11],[28,19],[25,17],[15,11],[72,52],[33,20],[29,22],[15,11],[29,22],[26,15],[22,16],[24,15],[32,19]],"count":[[193,13]],"kept":[{"done":[2,2],"fresh":[10,8],"new":[180,2],"picked":[1,1]}],"min-error":[0.03515625],"time":36.51318359375,"type":"prune"},{"accuracy":[0.5762677241034081],"baseline":[0.5762677241034082],"branch":[["alphax",0.5762677241034081,1],["alphay",0.5762677241034082,1],["u0",0.5762677241034082,1],["cos2phi",0.5762677241034082,1],["sin2phi",0.5762677241034082,1],["(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))",0.5762677241034081,1],["(neg.f64 (log.f64 (-.f64 1 u0)))",0.5762677241034082,1],["(log.f64 (-.f64 1 u0))",0.5762677241034082,1],["(-.f64 1 u0)",0.5762677241034082,1],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))",0.5762677241034081,1],["(/.f64 cos2phi (*.f64 alphax alphax))",0.5762677241034082,1],["(*.f64 alphax alphax)",0.5762677241034081,1],["(/.f64 sin2phi (*.f64 alphay alphay))",0.5762677241034081,1],["(*.f64 alphay alphay)",0.5762677241034082,1]],"compiler":[[6,5],[6,5],[6,5],[6,5],[6,5],[22,15],[10,9],[9,8],[8,7],[16,10],[10,7],[8,6],[10,7],[8,6],[484,216]],"count":[[21,1]],"inputs":[["(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (neg.f64 (*.f64 alphax alphax)))","(*.f64 (/.f64 (neg.f64 (*.f64 alphay alphay)) sin2phi) (log1p.f64 (neg.f64 u0)))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(-.f64 (*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) alphay) (*.f64 (/.f64 (pow.f64 alphax 4) alphay) (/.f64 sin2phi (*.f64 cos2phi cos2phi)))) (*.f64 (*.f64 alphax alphax) (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 u0)) cos2phi) (*.f64 (neg.f64 alphax) alphax))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (cbrt.f64 (/.f64 cos2phi (*.f64 alphax alphax))) (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 cos2phi) alphax)) (/.f64 (sqrt.f64 cos2phi) alphax))) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (*.f64 (*.f64 alphax alphax) (neg.f64 (log1p.f64 (neg.f64 u0)))) cos2phi)","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (*.f64 (fma.f64 alphax (*.f64 alphax sin2phi) (*.f64 (*.f64 cos2phi alphay) alphay)) (/.f64 1 (pow.f64 (*.f64 alphax alphay) 2))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (sqrt.f64 sin2phi) (*.f64 (sqrt.f64 sin2phi) (pow.f64 alphay -2)))))","(*.f64 (/.f64 (*.f64 alphay alphay) sin2phi) (neg.f64 (log1p.f64 (neg.f64 u0))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphay 4))) (/.f64 sin2phi (pow.f64 (cbrt.f64 alphay) 2)))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 alphax 4))) (/.f64 cos2phi (pow.f64 (cbrt.f64 alphax) 2))) (/.f64 sin2phi (*.f64 alphay alphay))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 u0 2) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 u0 4) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 u0 3) (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2))))) (/.f64 u0 (+.f64 (/.f64 cos2phi (pow.f64 alphax 2)) (/.f64 sin2phi (pow.f64 alphay 2)))))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 cos2phi cos2phi)) alphax) (/.f64 (cbrt.f64 cos2phi) alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(-.f64 (*.f64 (/.f64 (*.f64 sin2phi (log1p.f64 (neg.f64 u0))) (*.f64 alphay alphay)) (/.f64 (pow.f64 alphax 4) (*.f64 cos2phi cos2phi))) (*.f64 (/.f64 (*.f64 alphax alphax) cos2phi) (log1p.f64 (neg.f64 u0))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) (*.f64 alphay alphay) (*.f64 alphax sin2phi)) (*.f64 alphax (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 cos2phi) alphax) 2) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (/.f64 (fma.f64 (/.f64 cos2phi alphax) alphay (*.f64 alphax (/.f64 sin2phi alphay))) (*.f64 alphax alphay)))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))","(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))"]],"link":["."],"name":["Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5"],"oracle":[63.04908194310745],"outputs":[["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))"]],"time":116.183837890625,"times":[["alphax",7.97900390625],["alphay",7.595947265625],["u0",7.51611328125],["cos2phi",7.51513671875],["sin2phi",7.614990234375],["(/.f64 (neg.f64 (log.f64 (-.f64 1 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))",7.670166015625],["(neg.f64 (log.f64 (-.f64 1 u0)))",7.657958984375],["(log.f64 (-.f64 1 u0))",7.607177734375],["(-.f64 1 u0)",7.64892578125],["(+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay)))",7.56787109375],["(/.f64 cos2phi (*.f64 alphax alphax))",7.35595703125],["(*.f64 alphax alphax)",7.52880859375],["(/.f64 sin2phi (*.f64 alphay alphay))",7.498046875],["(*.f64 alphay alphay)",7.7080078125]],"type":"regimes"},{"compiler":[[21,14]],"egraph":[[4,35,25,0.00021458300000000002],[3,34,25,0.000176166],[2,30,25,0.000106791],[1,24,25,6.8458e-5],[0,15,25,3.4e-5]],"inputs":[["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (neg.f64 (log1p.f64 (neg.f64 u0))) (+.f64 (/.f64 cos2phi (*.f64 alphax alphax)) (/.f64 sin2phi (*.f64 alphay alphay))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.72998046875,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[21,14]],"remove-preprocessing":[[]],"time":9.571044921875,"type":"end"}]
[{"compiler":[[24,18]],"method":["search"],"sampling":[[12,0.0,0.9970738864512326,0.002926113548767373],[11,0.0,0.9970738864512326,0.002926113548767373],[10,0.0,0.9970738864512326,0.002926113548767373],[9,0.0,0.9970738864512326,0.002926113548767373],[8,0.0,0.9970738864512326,0.002926113548767373],[7,0.0,0.9970738864512326,0.002926113548767373],[6,0.0,0.9970738864512326,0.002926113548767373],[5,0.0,0.9970738864512326,0.002926113548767373],[4,0.0,0.9970738864512326,0.002926113548767373],[3,0.0,0.9970738864512326,0.002926113548767373],[2,0.0,0.9970738864512326,0.002926113548767373],[1,0.0,0.9970738864512326,0.002926113548767373],[0,0.0,0.9970738864512326,0.002926113548767373]],"time":229.4169921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",196.757568359375,3125],["body",256,"valid",511.892578125,8256]],"time":719.5009765625,"type":"sample"},{"compiler":[[23,17]],"egraph":[[1,6,6,1.4667e-5],[0,6,6,1.3125e-5],[6,7588,336,0.049791333],[5,5778,336,0.040147624],[4,3996,336,0.024626708],[3,2792,336,0.012824208],[2,1142,336,0.006425917000000001],[1,325,368,0.001892208],[0,92,400,0.000395416]],"inputs":[["0","1","2","3","4","5"],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 y 2) (*.f64 (*.f64 (*.f64 x 9) z) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 z 2) (*.f64 (*.f64 (*.f64 y 9) x) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 t 2) (*.f64 (*.f64 (*.f64 y 9) z) x)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 a 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 x 27) b))","(+.f64 (-.f64 (*.f64 b 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) x))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 z 9) y) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 t 9) z) y)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 a 9) z) t)) (*.f64 (*.f64 y 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 b 9) z) t)) (*.f64 (*.f64 a 27) y))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) t) z)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) a) t)) (*.f64 (*.f64 z 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) b) t)) (*.f64 (*.f64 a 27) z))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) a)) (*.f64 (*.f64 t 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) b)) (*.f64 (*.f64 a 27) t))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 b 27) a))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","1","3","1","4","5","4"],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 z t))) (*.f64 (*.f64 a 27) b))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 t (*.f64 y z)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 z (*.f64 t -9)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 t (*.f64 y (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 y 2) (*.f64 (*.f64 (*.f64 x 9) z) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (*.f64 (*.f64 a 27) b) (-.f64 (*.f64 2 y) (*.f64 (*.f64 x 9) (*.f64 z t))))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 2 y) (*.f64 x (*.f64 9 (*.f64 z t)))))","(fma.f64 a (*.f64 27 b) (fma.f64 2 y (*.f64 x (*.f64 z (*.f64 t -9)))))","(fma.f64 a (*.f64 27 b) (fma.f64 2 y (*.f64 t (*.f64 x (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 z 2) (*.f64 (*.f64 (*.f64 y 9) x) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (*.f64 (*.f64 a 27) b) (-.f64 (*.f64 2 z) (*.f64 (*.f64 y 9) (*.f64 x t))))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 2 z) (*.f64 x (*.f64 y (*.f64 9 t)))))","(fma.f64 a (*.f64 27 b) (fma.f64 2 z (*.f64 (*.f64 y t) (*.f64 x -9))))","(fma.f64 a (*.f64 27 b) (fma.f64 2 z (*.f64 t (*.f64 y (*.f64 x -9)))))","(+.f64 (-.f64 (*.f64 t 2) (*.f64 (*.f64 (*.f64 y 9) z) x)) (*.f64 (*.f64 a 27) b))","(+.f64 (*.f64 (*.f64 a 27) b) (-.f64 (*.f64 2 t) (*.f64 x (*.f64 (*.f64 y 9) z))))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 2 t) (*.f64 x (*.f64 y (*.f64 9 z)))))","(fma.f64 a (*.f64 27 b) (fma.f64 2 t (*.f64 x (*.f64 y (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 a 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 x 27) b))","(+.f64 (-.f64 (*.f64 2 a) (*.f64 (*.f64 y 9) (*.f64 z t))) (*.f64 x (*.f64 27 b)))","(fma.f64 x (*.f64 27 b) (-.f64 (*.f64 2 a) (*.f64 9 (*.f64 t (*.f64 y z)))))","(fma.f64 x (*.f64 27 b) (fma.f64 2 a (*.f64 y (*.f64 z (*.f64 t -9)))))","(fma.f64 x (*.f64 27 b) (fma.f64 2 a (*.f64 t (*.f64 y (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 b 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) x))","(+.f64 (-.f64 (*.f64 2 b) (*.f64 (*.f64 y 9) (*.f64 z t))) (*.f64 x (*.f64 a 27)))","(fma.f64 x (*.f64 a 27) (-.f64 (*.f64 2 b) (*.f64 9 (*.f64 t (*.f64 y z)))))","(fma.f64 x (*.f64 a 27) (fma.f64 2 b (*.f64 y (*.f64 z (*.f64 t -9)))))","(fma.f64 x (*.f64 a 27) (fma.f64 2 b (*.f64 t (*.f64 y (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 z 9) y) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 z t))) (*.f64 (*.f64 a 27) b))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 t (*.f64 y z)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 z (*.f64 t -9)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 t (*.f64 y (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 t 9) z) y)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 z t))) (*.f64 (*.f64 a 27) b))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 t (*.f64 y z)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 z (*.f64 t -9)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 t (*.f64 y (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 a 9) z) t)) (*.f64 (*.f64 y 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 9 a) (*.f64 z t))) (*.f64 b (*.f64 y 27)))","(fma.f64 y (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 a (*.f64 z t)))))","(fma.f64 y (*.f64 27 b) (fma.f64 x 2 (*.f64 z (*.f64 (*.f64 a -9) t))))","(fma.f64 y (*.f64 27 b) (fma.f64 x 2 (*.f64 z (*.f64 t (*.f64 a -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 b 9) z) t)) (*.f64 (*.f64 a 27) y))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 9 b) (*.f64 z t))) (*.f64 y (*.f64 a 27)))","(fma.f64 y (*.f64 a 27) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 b (*.f64 z t)))))","(fma.f64 y (*.f64 a 27) (fma.f64 x 2 (*.f64 t (*.f64 z (*.f64 b -9)))))","(fma.f64 y (*.f64 a 27) (fma.f64 x 2 (*.f64 z (*.f64 t (*.f64 b -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) t) z)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 z t))) (*.f64 (*.f64 a 27) b))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 t (*.f64 y z)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 z (*.f64 t -9)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 t (*.f64 y (*.f64 z -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) a) t)) (*.f64 (*.f64 z 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 a t))) (*.f64 b (*.f64 z 27)))","(fma.f64 z (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 y (*.f64 9 (*.f64 t a)))))","(fma.f64 z (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 (*.f64 a -9) t))))","(fma.f64 z (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 t (*.f64 a -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) b) t)) (*.f64 (*.f64 a 27) z))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 b t))) (*.f64 z (*.f64 a 27)))","(fma.f64 z (*.f64 a 27) (-.f64 (*.f64 x 2) (*.f64 t (*.f64 9 (*.f64 y b)))))","(fma.f64 z (*.f64 a 27) (fma.f64 x 2 (*.f64 y (*.f64 (*.f64 b -9) t))))","(fma.f64 z (*.f64 a 27) (fma.f64 x 2 (*.f64 y (*.f64 t (*.f64 b -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) a)) (*.f64 (*.f64 t 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 z a))) (*.f64 b (*.f64 t 27)))","(fma.f64 t (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 y (*.f64 z a)))))","(fma.f64 t (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 z (*.f64 a -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) b)) (*.f64 (*.f64 a 27) t))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 z b))) (*.f64 t (*.f64 a 27)))","(fma.f64 t (*.f64 a 27) (-.f64 (*.f64 x 2) (*.f64 y (*.f64 9 (*.f64 z b)))))","(fma.f64 t (*.f64 a 27) (fma.f64 x 2 (*.f64 y (*.f64 z (*.f64 b -9)))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 b 27) a))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y 9) (*.f64 z t))) (*.f64 (*.f64 a 27) b))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 9 (*.f64 t (*.f64 y z)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 y (*.f64 z (*.f64 t -9)))))","(fma.f64 a (*.f64 27 b) (fma.f64 x 2 (*.f64 t (*.f64 y (*.f64 z -9)))))"]],"stop":[["unsound",1],["node limit",1]],"symmetry":[["(sort y z t)","(sort a b)"]],"time":79.64404296875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,3126,21,0.065979251],[12,3122,21,0.057694167000000005],[11,3122,21,0.04893495900000001],[10,3122,21,0.042188167000000006],[9,3118,21,0.036169292000000006],[8,3003,21,0.030072375000000002],[7,2529,21,0.023592292],[6,2137,21,0.016433417],[5,1461,21,0.010714583],[4,908,21,0.005253374999999999],[3,423,21,0.002384875],[2,123,21,0.000833792],[1,39,23,0.000240917],[0,18,25,6.4292e-5]],"inputs":[["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))","(-.f64 (*.f64 x 2) (-.f64 (*.f64 (*.f64 y 9) (*.f64 z t)) (*.f64 a (*.f64 27 b))))","(fma.f64 a (*.f64 27 b) (-.f64 (*.f64 x 2) (*.f64 y (*.f64 9 (*.f64 z t)))))","(fma.f64 x 2 (fma.f64 t (*.f64 y (*.f64 z -9)) (*.f64 a (*.f64 27 b))))","(fma.f64 x 2 (fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 a (*.f64 27 b))))"]],"stop":[["saturated",1]],"time":77.483154296875,"type":"simplify"},{"compiler":[[38,26]],"time":0.553955078125,"type":"eval"},{"alts":[["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))","next",1.9155972810416333],["(fma.f64 x 2 (fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 a (*.f64 27 b))))","fresh",3.445371032810865]],"compiler":[[23,17],[21,15],[23,17],[21,15]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.08984375],"time":1.639892578125,"type":"prune"},{"compiler":[[69,43]],"locations":[["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))",0.01953125,true],["(*.f64 (*.f64 a 27) b)",0.21875,true],["(*.f64 (*.f64 y 9) z)",0.23046875,true],["(*.f64 (*.f64 (*.f64 y 9) z) t)",6.056171439598914,true]],"time":15.736083984375,"type":"localize"},{"count":[[4,132]],"series":[["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","t","-inf",0.177978515625],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","t","inf",0.168212890625],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","t","0",0.22509765625],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","z","-inf",0.177001953125],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","z","inf",0.197998046875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","z","0",0.200927734375],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","y","-inf",0.208984375],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","y","inf",0.173095703125],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","y","0",0.27978515625],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","x","-inf",0.81201171875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","x","inf",0.337158203125],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))","x","0",0.408935546875],["(*.f64 (*.f64 a 27) b)","b","-inf",0.2451171875],["(*.f64 (*.f64 a 27) b)","b","inf",0.4150390625],["(*.f64 (*.f64 a 27) b)","b","0",0.385009765625],["(*.f64 (*.f64 a 27) b)","a","-inf",0.260009765625],["(*.f64 (*.f64 a 27) b)","a","inf",0.39697265625],["(*.f64 (*.f64 a 27) b)","a","0",1.1240234375],["(*.f64 (*.f64 y 9) z)","z","-inf",0.25],["(*.f64 (*.f64 y 9) z)","z","inf",0.430908203125],["(*.f64 (*.f64 y 9) z)","z","0",0.39697265625],["(*.f64 (*.f64 y 9) z)","y","-inf",0.23583984375],["(*.f64 (*.f64 y 9) z)","y","inf",0.39404296875],["(*.f64 (*.f64 y 9) z)","y","0",0.32080078125],["(*.f64 (*.f64 (*.f64 y 9) z) t)","t","-inf",0.279052734375],["(*.f64 (*.f64 (*.f64 y 9) z) t)","t","inf",0.5361328125],["(*.f64 (*.f64 (*.f64 y 9) z) t)","t","0",0.89501953125],["(*.f64 (*.f64 (*.f64 y 9) z) t)","z","-inf",0.26904296875],["(*.f64 (*.f64 (*.f64 y 9) z) t)","z","inf",0.60302734375],["(*.f64 (*.f64 (*.f64 y 9) z) t)","z","0",0.740966796875],["(*.f64 (*.f64 (*.f64 y 9) z) t)","y","-inf",0.286865234375],["(*.f64 (*.f64 (*.f64 y 9) z) t)","y","inf",0.435791015625],["(*.f64 (*.f64 (*.f64 y 9) z) t)","y","0",0.765869140625]],"time":13.449951171875,"type":"series"},{"count":[[4,221]],"egraph":[[2,4538,40,0.032634334],[1,365,40,0.006242251000000001],[0,17,40,0.000424917]],"inputs":[["(*.f64 (*.f64 (*.f64 y 9) z) t)","(*.f64 (*.f64 y 9) z)","(*.f64 (*.f64 a 27) b)","(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 (*.f64 9 z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t)) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t)))) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 9 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (*.f64 y 9))) (cbrt.f64 (pow.f64 (exp.f64 z) (*.f64 y 9))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 9 (*.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9 (*.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 9 (*.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 9 (*.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 9 (*.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 9 (*.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 9 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 9 (*.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 y 9) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (*.f64 y 9) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 9 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 9 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 9 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 9 (*.f64 y z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 a (*.f64 27 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 a) (*.f64 27 b))) (cbrt.f64 (pow.f64 (exp.f64 a) (*.f64 27 b))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 a) (*.f64 27 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 a) (*.f64 27 b)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 a) (*.f64 27 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 a (*.f64 27 b)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a (*.f64 27 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a (*.f64 27 b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a (*.f64 27 b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 a (*.f64 27 b))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 a (*.f64 27 b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 a) (*.f64 27 b)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 a (*.f64 27 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a (*.f64 27 b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 a 27) 3) (pow.f64 b 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 b 3) (pow.f64 (*.f64 a 27) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 a (*.f64 27 b))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 a (*.f64 27 b))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 a (*.f64 27 b))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 a (*.f64 27 b))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))) (cbrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (/.f64 1 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x))) (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3))) (neg.f64 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2))) (neg.f64 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 8 (pow.f64 x 3) (pow.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 3)) (fma.f64 4 (*.f64 x x) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) (neg.f64 (*.f64 (+.f64 x x) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 3) (pow.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 3)) (+.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 2) (-.f64 (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))) (*.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 4 (*.f64 x x)) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))) (-.f64 (+.f64 x x) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 2) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))) (-.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 2) x) (+.f64 1 (expm1.f64 (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (+.f64 1 (expm1.f64 (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (exp.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 2) x) (/.f64 1 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (/.f64 1 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))) (exp.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))) (exp.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))) (+.f64 1 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (pow.f64 (exp.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t)) (pow.f64 (exp.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 1 (expm1.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (pow.f64 (exp.f64 z) (*.f64 y 9)) t)) (+.f64 1 (expm1.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (*.f64 y z)) (neg.f64 t) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1 (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1 (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1 (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) 1 (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x))) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) (neg.f64 (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) (*.f64 9 (*.f64 y z)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 8 (pow.f64 x 3)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 3)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x)) (*.f64 4 (*.f64 x x)))) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (/.f64 1 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (/.f64 1 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (/.f64 1 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (/.f64 1 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (/.f64 1 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 4 (*.f64 x x)) (pow.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) 2)) (/.f64 1 (fma.f64 (*.f64 t (*.f64 y 9)) z (+.f64 x x))) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y 9) (neg.f64 z)) t (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))) (cbrt.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))) (cbrt.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))) (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))) (sqrt.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))) (fma.f64 t (*.f64 (*.f64 y 9) (neg.f64 z)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (sqrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 y (*.f64 (*.f64 9 z) t)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (fma.f64 (neg.f64 (*.f64 z t)) (*.f64 y 9) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (fma.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1 (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2) (*.f64 y (*.f64 (*.f64 9 z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (*.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t)))) (+.f64 (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) 2)) (cbrt.f64 (*.f64 y (*.f64 (*.f64 9 z) t))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 z)) 1) t (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 z)) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 z)) (sqrt.f64 t)) (sqrt.f64 t) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (-.f64 (*.f64 y (*.f64 (*.f64 9 z) t)) (fma.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)) (*.f64 y (*.f64 (*.f64 9 z) t))))))))))"]],"rules":[["egg-rr",169],["egg-rr",18],["egg-rr",18],["egg-rr",16]],"stop":[["node limit",1]],"time":71.988037109375,"type":"rewrite"},{"count":[[353,231]],"egraph":[[4,183,1290,0.001651291],[3,158,1290,0.001240625],[2,91,1290,0.0007905830000000001],[1,41,1290,0.00042583300000000003],[0,21,1290,0.0001845]],"inputs":[["(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 y) z)","(*.f64 y (*.f64 z 9))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 y (*.f64 (*.f64 t z) -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 y (*.f64 (*.f64 t z) -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 y (*.f64 (*.f64 t z) -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 y (*.f64 (*.f64 t z) -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 y (*.f64 (*.f64 t z) -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 y (*.f64 (*.f64 t z) -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 y (*.f64 (*.f64 t z) -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 (*.f64 y (*.f64 t z)) -9 (*.f64 2 x))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))"]],"stop":[["saturated",1]],"time":29.18505859375,"type":"simplify"},{"compiler":[[7390,4097]],"time":65.10498046875,"type":"eval"},{"alts":[["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (pow.f64 (sqrt.f64 (*.f64 a (*.f64 27 b))) 2))","fresh",28.866143570115405],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (*.f64 (*.f64 a 27) b))","next",1.9061635408100752],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (pow.f64 (*.f64 a (*.f64 27 b)) 1))","fresh",1.9429410310416333],["(+.f64 (fma.f64 (neg.f64 t) (*.f64 9 (*.f64 y z)) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",1.9077847810416333],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 27 (*.f64 a b)))","fresh",1.9390347810416333],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (pow.f64 (cbrt.f64 (*.f64 a (*.f64 27 b))) 3))","fresh",2.103543716642031],["(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.546646191421265],["(+.f64 (fma.f64 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 z)) (sqrt.f64 t)) (sqrt.f64 t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",10.451123599420727],["(+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.4040235230424227],["(+.f64 (fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x)) (*.f64 (*.f64 a 27) b))","fresh",3.4157422730424227]],"compiler":[[26,20],[23,17],[25,19],[23,16],[23,17],[26,20],[44,27],[27,18],[23,16],[22,16],[26,20],[23,17],[25,19],[23,16],[23,17],[26,20],[44,27],[27,18],[23,16],[22,16]],"count":[[233,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[231,10],"picked":[1,0]}],"min-error":[0.0078125],"time":79.81591796875,"type":"prune"},{"compiler":[[69,43]],"locations":[["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))",0.01953125,true],["(*.f64 y (*.f64 z 9))",0.1640625,true],["(*.f64 (*.f64 a 27) b)",0.21875,false],["(*.f64 (*.f64 y (*.f64 z 9)) t)",6.056171439598914,true]],"time":15.760986328125,"type":"localize"},{"count":[[3,108]],"series":[["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","t","-inf",0.181884765625],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","t","inf",0.155029296875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","t","0",0.149169921875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","z","-inf",0.18017578125],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","z","inf",0.153076171875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","z","0",0.177978515625],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","y","-inf",0.15380859375],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","y","inf",0.155029296875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","y","0",0.177978515625],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","x","-inf",0.154052734375],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","x","inf",0.160888671875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))","x","0",0.156982421875],["(*.f64 y (*.f64 z 9))","z","-inf",0.137939453125],["(*.f64 y (*.f64 z 9))","z","inf",0.1640625],["(*.f64 y (*.f64 z 9))","z","0",0.136962890625],["(*.f64 y (*.f64 z 9))","y","-inf",0.137939453125],["(*.f64 y (*.f64 z 9))","y","inf",0.163818359375],["(*.f64 y (*.f64 z 9))","y","0",0.138916015625],["(*.f64 (*.f64 y (*.f64 z 9)) t)","t","-inf",0.147216796875],["(*.f64 (*.f64 y (*.f64 z 9)) t)","t","inf",0.175048828125],["(*.f64 (*.f64 y (*.f64 z 9)) t)","t","0",0.14599609375],["(*.f64 (*.f64 y (*.f64 z 9)) t)","z","-inf",0.18701171875],["(*.f64 (*.f64 y (*.f64 z 9)) t)","z","inf",0.156982421875],["(*.f64 (*.f64 y (*.f64 z 9)) t)","z","0",0.148193359375],["(*.f64 (*.f64 y (*.f64 z 9)) t)","y","-inf",0.189208984375],["(*.f64 (*.f64 y (*.f64 z 9)) t)","y","inf",0.1611328125],["(*.f64 (*.f64 y (*.f64 z 9)) t)","y","0",0.197998046875]],"time":4.64013671875,"type":"series"},{"count":[[3,204]],"egraph":[[2,3415,31,0.028127084],[1,265,31,0.0045930419999999994],[0,12,33,0.000339167]],"inputs":[["(*.f64 (*.f64 y (*.f64 z 9)) t)","(*.f64 y (*.f64 z 9))","(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 y z) (*.f64 9 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) (*.f64 y t))) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) (*.f64 y t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) (*.f64 y t)))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) (*.f64 y t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) (*.f64 y t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 z 9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) y)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) y))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (*.f64 z 9)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 z 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 y z) 2) 81) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 z 9)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 z 9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 y z)) 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (*.f64 y z) 2) 81))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 z) 9) y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 z 9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 z 9))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 z 9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (*.f64 z 9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (*.f64 z 9))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (/.f64 1 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (/.f64 1 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4)) (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3))) (neg.f64 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2))) (neg.f64 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 3) 8 (pow.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 3)) (fma.f64 (*.f64 x x) 4 (-.f64 (pow.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 2) (*.f64 (+.f64 x x) (*.f64 t (*.f64 (*.f64 y z) -9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 3) (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 3)) (+.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 2) (-.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 2)) (-.f64 (+.f64 x x) (*.f64 t (*.f64 (*.f64 y z) -9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 2) (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 2)) (-.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4)) (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (pow.f64 (pow.f64 (exp.f64 z) 9) (*.f64 y t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 x) 2) (+.f64 1 (expm1.f64 (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (+.f64 1 (expm1.f64 (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (exp.f64 (*.f64 t (*.f64 (*.f64 y z) -9)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (pow.f64 (exp.f64 t) (*.f64 (*.f64 y z) -9))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))) (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))) (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))) (+.f64 1 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 t (*.f64 (*.f64 y z) -9))) (pow.f64 (exp.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 t (*.f64 (*.f64 y z) -9))) (+.f64 1 (expm1.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 t) (*.f64 (*.f64 y z) -9)) (+.f64 1 (expm1.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 (*.f64 z (*.f64 9 t))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 z 9)) (neg.f64 t) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 1 (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1 (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1 (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1 (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) 1 (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x x) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 t (*.f64 (*.f64 y z) -9)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x x)) (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x x)) 2) (cbrt.f64 (+.f64 x x)) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (+.f64 x x)) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) (neg.f64 (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x))) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) (*.f64 y (*.f64 z 9)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (/.f64 1 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (/.f64 1 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (/.f64 1 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (/.f64 1 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (/.f64 1 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (pow.f64 x 3) 8) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 3)) (/.f64 1 (fma.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x)) (*.f64 (*.f64 x x) 4))) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (/.f64 1 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (/.f64 1 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (/.f64 1 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (/.f64 1 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (/.f64 1 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 (*.f64 x x) 4) (pow.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) 2)) (/.f64 1 (fma.f64 (*.f64 z 9) (*.f64 y t) (+.f64 x x))) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))) 2) (cbrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))) (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 t (*.f64 (*.f64 y z) -9))) 2) (cbrt.f64 (*.f64 t (*.f64 (*.f64 y z) -9))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))) (sqrt.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))) (fma.f64 t (*.f64 (*.f64 y z) -9) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 t (*.f64 (*.f64 y z) -9))) (sqrt.f64 (*.f64 t (*.f64 (*.f64 y z) -9))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 y z) (*.f64 9 t)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (fma.f64 (neg.f64 (*.f64 z (*.f64 9 t))) y (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (fma.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1 (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2) (*.f64 (*.f64 y z) (*.f64 9 t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (*.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (-.f64 (sqrt.f64 (+.f64 x x)) (sqrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t)))) (+.f64 (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (*.f64 z (*.f64 9 t)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) 2)) (cbrt.f64 (*.f64 (*.f64 y z) (*.f64 9 t))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 t (*.f64 (*.f64 y z) -9)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 t (*.f64 (*.f64 y z) -9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 t (*.f64 (*.f64 y z) -9) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (-.f64 (*.f64 (*.f64 y z) (*.f64 9 t)) (fma.f64 t (*.f64 (*.f64 y z) -9) (*.f64 (*.f64 y z) (*.f64 9 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 y z) -9) 1) t (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 y z) -9) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 y z) -9) (sqrt.f64 t)) (sqrt.f64 t) (+.f64 x x))))))"]],"rules":[["egg-rr",170],["egg-rr",17],["egg-rr",17]],"stop":[["node limit",1]],"time":64.516845703125,"type":"rewrite"},{"count":[[312,213]],"egraph":[[4,164,1122,0.001463167],[3,139,1122,0.001092792],[2,75,1122,0.000687667],[1,32,1122,0.000361125],[0,16,1122,0.000154]],"inputs":[["(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 9 (*.f64 y z))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 9 y) (*.f64 t z))","(*.f64 (*.f64 (*.f64 9 z) y) t)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 9 (*.f64 y z))","(*.f64 (*.f64 9 z) y)","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 (*.f64 y t) (*.f64 z -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 (*.f64 y t) (*.f64 z -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 (*.f64 y t) (*.f64 z -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 (*.f64 y t) (*.f64 z -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 (*.f64 y t) (*.f64 z -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 (*.f64 y t) (*.f64 z -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 y (*.f64 t z)) -9)","(*.f64 (*.f64 y t) (*.f64 z -9))","(*.f64 y (*.f64 t (*.f64 z -9)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 y (*.f64 t z)) -9))","(fma.f64 2 x (*.f64 (*.f64 y t) (*.f64 z -9)))","(fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x))"]],"stop":[["saturated",1]],"time":26.360107421875,"type":"simplify"},{"compiler":[[7122,3787]],"time":61.824951171875,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.546646191421265],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (pow.f64 (sqrt.f64 (*.f64 a (*.f64 27 b))) 2))","fresh",28.864522329883847],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (pow.f64 (cbrt.f64 (*.f64 a (*.f64 27 b))) 3))","fresh",2.0941099764104734],["(+.f64 (fma.f64 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 z)) (sqrt.f64 t)) (sqrt.f64 t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",10.451123599420727],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","next",1.9077847810416333],["(+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.4040235230424227],["(+.f64 (fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x)) (*.f64 (*.f64 a 27) b))","fresh",3.4157422730424227],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (*.f64 27 (*.f64 a b)))","fresh",1.9296010408100752],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (+.f64 0 (*.f64 a (*.f64 27 b))))","fresh",1.9335072908100752]],"compiler":[[44,27],[26,20],[26,20],[27,18],[22,15],[23,16],[22,16],[23,17],[25,19],[44,27],[26,20],[26,20],[27,18],[22,15],[23,16],[22,16],[23,17],[25,19]],"count":[[242,9]],"kept":[{"done":[0,0],"fresh":[9,4],"new":[232,5],"picked":[1,0]}],"min-error":[0.0078125],"time":87.867919921875,"type":"prune"},{"compiler":[[59,27]],"locations":[["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))",0.00390625,true],["(*.f64 (*.f64 a 27) b)",0.21875,false],["(*.f64 (*.f64 y z) -9)",0.26171875,true],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))",1.7157062117174624,true]],"time":11.9921875,"type":"localize"},{"count":[[3,144]],"series":[["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","b","-inf",0.177001953125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","b","inf",0.196044921875],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","b","0",0.32080078125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","a","-inf",0.18017578125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","a","inf",0.2431640625],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","a","0",0.323974609375],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","x","-inf",0.191162109375],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","x","inf",0.179931640625],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","x","0",0.27001953125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","t","-inf",0.177001953125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","t","inf",0.199951171875],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","t","0",0.23095703125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","z","-inf",0.201171875],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","z","inf",0.18017578125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","z","0",0.251220703125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","y","-inf",0.181884765625],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","y","inf",0.216064453125],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","y","0",0.592041015625],["(*.f64 (*.f64 y z) -9)","z","-inf",0.16796875],["(*.f64 (*.f64 y z) -9)","z","inf",0.139892578125],["(*.f64 (*.f64 y z) -9)","z","0",0.23193359375],["(*.f64 (*.f64 y z) -9)","y","-inf",0.141845703125],["(*.f64 (*.f64 y z) -9)","y","inf",0.139892578125],["(*.f64 (*.f64 y z) -9)","y","0",0.23193359375],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","x","-inf",0.171875],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","x","inf",0.197021484375],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","x","0",0.283935546875],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","t","-inf",0.36083984375],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","t","inf",0.301025390625],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","t","0",0.27001953125],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","z","-inf",0.260009765625],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","z","inf",0.211181640625],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","z","0",0.336181640625],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","y","-inf",0.26708984375],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","y","inf",0.22802734375],["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","y","0",0.4228515625]],"time":9.1259765625,"type":"series"},{"count":[[3,120]],"egraph":[[2,4468,42,0.031394417],[1,340,42,0.00614025],[0,16,44,0.000387875]],"inputs":[["(fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x))","(*.f64 (*.f64 y z) -9)","(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (*.f64 y (*.f64 (*.f64 z -9) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 (*.f64 z -9) t)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (*.f64 (*.f64 z -9) t)) 1) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))) (cbrt.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (*.f64 (*.f64 z -9) t)) 3) (+.f64 x x)) (fma.f64 (*.f64 y (*.f64 (*.f64 z -9) t)) (*.f64 y (*.f64 (*.f64 z -9) t)) (-.f64 (+.f64 x x) (*.f64 (*.f64 y (*.f64 (*.f64 z -9) t)) (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (*.f64 (*.f64 z -9) t)) (*.f64 y (*.f64 (*.f64 z -9) t))) (+.f64 x x)) (-.f64 (*.f64 y (*.f64 (*.f64 z -9) t)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 2) x) (exp.f64 (*.f64 y (*.f64 (*.f64 z -9) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x x))) (exp.f64 (*.f64 y (*.f64 (*.f64 z -9) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (*.f64 (*.f64 z -9) t))) (+.f64 1 (expm1.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 z -9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 -9) (*.f64 y z))) (cbrt.f64 (pow.f64 (exp.f64 -9) (*.f64 y z))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 -9) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -9) (*.f64 y z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -9) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (*.f64 z -9)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 z -9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 z -9)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 z -9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (*.f64 z -9))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 81 (pow.f64 (*.f64 y z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -9) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z -9)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 z -9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 z -9))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 z -9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (*.f64 z -9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (*.f64 z -9))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2) (fma.f64 y (*.f64 (*.f64 z -9) t) (-.f64 (+.f64 x x) (*.f64 27 (*.f64 a b))))) (/.f64 (pow.f64 (*.f64 27 (*.f64 a b)) 2) (fma.f64 y (*.f64 (*.f64 z -9) t) (-.f64 (+.f64 x x) (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))) (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))) 2) (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))) (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 3) (pow.f64 (*.f64 27 (*.f64 a b)) 3)) (/.f64 1 (fma.f64 (*.f64 27 (*.f64 a b)) (-.f64 (*.f64 27 (*.f64 a b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2) (pow.f64 (*.f64 27 (*.f64 a b)) 2)) (/.f64 1 (fma.f64 y (*.f64 (*.f64 z -9) t) (-.f64 (+.f64 x x) (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 27 (*.f64 a b)) (-.f64 (*.f64 27 (*.f64 a b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2)) (+.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 3) (pow.f64 (*.f64 27 (*.f64 a b)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (-.f64 (+.f64 x x) (*.f64 27 (*.f64 a b)))) (-.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2) (pow.f64 (*.f64 27 (*.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 3) (pow.f64 (*.f64 27 (*.f64 a b)) 3)) (fma.f64 (*.f64 27 (*.f64 a b)) (-.f64 (*.f64 27 (*.f64 a b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 3) (pow.f64 (*.f64 27 (*.f64 a b)) 3)) (+.f64 (pow.f64 (*.f64 27 (*.f64 a b)) 2) (-.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2) (*.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2) (pow.f64 (*.f64 27 (*.f64 a b)) 2)) (fma.f64 y (*.f64 (*.f64 z -9) t) (-.f64 (+.f64 x x) (*.f64 27 (*.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 3) (pow.f64 (*.f64 27 (*.f64 a b)) 3))) (neg.f64 (fma.f64 (*.f64 27 (*.f64 a b)) (-.f64 (*.f64 27 (*.f64 a b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2) (pow.f64 (*.f64 27 (*.f64 a b)) 2))) (neg.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (-.f64 (+.f64 x x) (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 27 (*.f64 a b)) 2) (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 2)) (-.f64 (*.f64 27 (*.f64 a b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))) (pow.f64 (exp.f64 b) (*.f64 a 27))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (+.f64 1 (expm1.f64 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))) (+.f64 1 (expm1.f64 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 27 (*.f64 a b)))) (exp.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 b) (*.f64 a 27)) (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 27 (*.f64 a b)))) (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 (*.f64 z -9) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) (*.f64 -9 t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -9 (*.f64 (*.f64 y z) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 z -9)) t (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (*.f64 y (*.f64 z -9)) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) 1 (*.f64 27 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (*.f64 27 b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 27 (*.f64 a b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a 27) b (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b (*.f64 a 27) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 27 (*.f64 a b)) 1 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)) (*.f64 27 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 27 (*.f64 a b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (*.f64 (*.f64 z -9) t)) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 27 (*.f64 a b))) (cbrt.f64 (pow.f64 (*.f64 27 (*.f64 a b)) 2)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 27 (*.f64 a b)) 2)) (cbrt.f64 (*.f64 27 (*.f64 a b))) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 81 (pow.f64 (*.f64 y z) 2))) (*.f64 (cbrt.f64 (*.f64 y (*.f64 z -9))) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 b) 2) (*.f64 (cbrt.f64 b) (*.f64 a 27)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) (*.f64 27 b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 a 27)) 2) (*.f64 (cbrt.f64 (*.f64 a 27)) b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) 2) (*.f64 27 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) 2) (cbrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (*.f64 27 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 27 (*.f64 a b))) (sqrt.f64 (*.f64 27 (*.f64 a b))) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (*.f64 z -9))) (*.f64 (sqrt.f64 (*.f64 y (*.f64 z -9))) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b) (*.f64 (sqrt.f64 b) (*.f64 a 27)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) (*.f64 27 b)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 a 27)) (*.f64 (sqrt.f64 (*.f64 a 27)) b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (sqrt.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x))) (*.f64 27 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 27 b) a (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 y (*.f64 (*.f64 z -9) t))) (cbrt.f64 (*.f64 y (*.f64 (*.f64 z -9) t)))) (cbrt.f64 (*.f64 y (*.f64 (*.f64 z -9) t))) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (*.f64 (*.f64 z -9) t))) (sqrt.f64 (*.f64 y (*.f64 (*.f64 z -9) t))) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 y (*.f64 z -9))) (sqrt.f64 t)) (*.f64 (sqrt.f64 (*.f64 y (*.f64 z -9))) (sqrt.f64 t)) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y (*.f64 z -9)) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y (*.f64 z -9)) (sqrt.f64 t)) (sqrt.f64 t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 a 27) (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 a 27) (sqrt.f64 b)) (sqrt.f64 b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b a) 27 (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b (pow.f64 (cbrt.f64 (*.f64 a 27)) 2)) (cbrt.f64 (*.f64 a 27)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b (sqrt.f64 (*.f64 a 27))) (sqrt.f64 (*.f64 a 27)) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))))))"]],"rules":[["egg-rr",74],["egg-rr",16],["egg-rr",30]],"stop":[["node limit",1]],"time":58.765869140625,"type":"rewrite"},{"count":[[264,133]],"egraph":[[4,190,2070,0.002026001],[3,164,2070,0.001543876],[2,94,2070,0.001047751],[1,46,2070,0.000590917],[0,22,2070,0.000253334]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(+.f64 (*.f64 2 x) (*.f64 27 (*.f64 a b)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 27 (*.f64 a b)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 27 (*.f64 a b)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(*.f64 -9 (*.f64 y z))","(+.f64 (*.f64 2 x) (*.f64 27 (*.f64 a b)))","(fma.f64 2 x (*.f64 27 (*.f64 a b)))","(fma.f64 a (*.f64 27 b) (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 27 (*.f64 a b)))","(fma.f64 2 x (*.f64 27 (*.f64 a b)))","(fma.f64 a (*.f64 27 b) (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 27 (*.f64 a b)))","(fma.f64 2 x (*.f64 27 (*.f64 a b)))","(fma.f64 a (*.f64 27 b) (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 -9 (*.f64 y (*.f64 t z)))","(*.f64 (*.f64 -9 (*.f64 y z)) t)","(*.f64 y (*.f64 t (*.f64 -9 z)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b)))","(fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b)))","(fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z))))","(fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 -9 (*.f64 y (*.f64 t z))))","(fma.f64 2 x (*.f64 (*.f64 -9 (*.f64 y z)) t))","(fma.f64 2 x (*.f64 y (*.f64 t (*.f64 -9 z))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(*.f64 27 (*.f64 a b))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 -9 (*.f64 y (*.f64 t z))) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 -9 (*.f64 y (*.f64 t z)) (*.f64 27 (*.f64 a b))))","(fma.f64 2 x (fma.f64 (*.f64 27 a) b (*.f64 (*.f64 -9 (*.f64 y z)) t)))","(fma.f64 2 x (fma.f64 a (*.f64 27 b) (*.f64 y (*.f64 t (*.f64 -9 z)))))","(fma.f64 2 x (fma.f64 t (*.f64 -9 (*.f64 y z)) (*.f64 27 (*.f64 a b))))"]],"stop":[["saturated",1]],"time":37.302001953125,"type":"simplify"},{"compiler":[[3395,1866]],"time":33.6240234375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 a 27)) 2) (*.f64 (cbrt.f64 (*.f64 a 27)) b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))","fresh",3.5945486695690536],["(+.f64 (+.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) x) x) (*.f64 (*.f64 a 27) b))","fresh",3.418027282810865],["(fma.f64 -9 (*.f64 (*.f64 y z) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))","fresh",1.9546597810416333],["(fma.f64 (*.f64 (*.f64 a 27) (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))","fresh",3.6069311891059375],["(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.546646191421265],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","done",1.9077847810416333],["(+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.4040235230424227],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (+.f64 0 (*.f64 a (*.f64 27 b))))","next",1.9335072908100752]],"compiler":[[29,21],[22,15],[21,15],[27,18],[44,27],[22,15],[23,16],[25,19],[29,21],[22,15],[21,15],[27,18],[44,27],[23,16],[25,19]],"count":[[161,8]],"kept":[{"done":[0,0],"fresh":[8,3],"new":[152,4],"picked":[1,1]}],"min-error":[0],"time":45.9140625,"type":"prune"},{"compiler":[[79,51]],"locations":[["(-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t))",0.01953125,false],["(*.f64 y (*.f64 z 9))",0.1640625,false],["(*.f64 a (*.f64 27 b))",0.2578125,true],["(*.f64 (*.f64 y (*.f64 z 9)) t)",6.056171439598914,false]],"time":17.73095703125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 a (*.f64 27 b))","b","-inf",0.14794921875],["(*.f64 a (*.f64 27 b))","b","inf",0.158935546875],["(*.f64 a (*.f64 27 b))","b","0",0.139892578125],["(*.f64 a (*.f64 27 b))","a","-inf",0.15185546875],["(*.f64 a (*.f64 27 b))","a","inf",0.18212890625],["(*.f64 a (*.f64 27 b))","a","0",0.18310546875]],"time":1.050048828125,"type":"series"},{"count":[[1,11]],"egraph":[[2,1394,7,0.014474668],[1,121,7,0.001957876],[0,6,7,0.000176084]],"inputs":[["(*.f64 a (*.f64 27 b))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 a (*.f64 27 b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a (*.f64 27 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a (*.f64 27 b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a (*.f64 27 b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 a (*.f64 27 b))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 a (*.f64 27 b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 a) (*.f64 27 b)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a (*.f64 27 b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 a (*.f64 27 b))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 a (*.f64 27 b))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 a (*.f64 27 b))))))))"]],"rules":[["egg-rr",11]],"stop":[["node limit",1]],"time":31.68896484375,"type":"rewrite"},{"count":[[35,12]],"egraph":[[3,19,168,0.000219833],[2,17,168,0.000162792],[1,10,168,0.00010300000000000001],[0,6,168,4.9625e-5]],"inputs":[["(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))"]],"method":["egg-herbie"],"outputs":[["(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))","(*.f64 27 (*.f64 a b))"]],"stop":[["saturated",1]],"time":12.6650390625,"type":"simplify"},{"compiler":[[7401,4119]],"time":64.169921875,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 a 27)) 2) (*.f64 (cbrt.f64 (*.f64 a 27)) b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))","fresh",3.5945486695690536],["(+.f64 (+.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) x) x) (*.f64 (*.f64 a 27) b))","fresh",3.418027282810865],["(fma.f64 -9 (*.f64 (*.f64 y z) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))","fresh",1.9546597810416333],["(fma.f64 (*.f64 (*.f64 a 27) (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))","fresh",3.6069311891059375],["(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.546646191421265],["(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","done",1.9077847810416333],["(+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","fresh",3.4040235230424227],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (+.f64 0 (*.f64 a (*.f64 27 b))))","done",1.9335072908100752]],"compiler":[[29,21],[22,15],[21,15],[27,18],[44,27],[22,15],[23,16],[25,19]],"count":[[233,8]],"kept":[{"done":[1,1],"fresh":[6,6],"new":[225,0],"picked":[1,1]}],"min-error":[0],"time":75.050048828125,"type":"prune"},{"accuracy":[0.3983510408100754],"baseline":[1.9061635408100752],"branch":[["x",1.9061635408100752,1],["y",0.4157422730424227,2],["z",0.3983510408100754,2],["t",0.4061635408100754,2],["a",1.9061635408100752,1],["b",1.9061635408100752,1],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))",1.9061635408100752,1],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))",1.9061635408100752,1],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))",1.9061635408100752,1],["(*.f64 x 2)",1.9061635408100752,1],["(*.f64 (*.f64 (*.f64 y 9) z) t)",1.9061635408100754,1],["(*.f64 (*.f64 (*.f64 y 9) z) t)",1.9061635408100754,1],["(*.f64 (*.f64 y 9) z)",0.4022572908100754,2],["(*.f64 (*.f64 y 9) z)",0.4022572908100754,2],["(*.f64 y 9)",0.4157422730424227,2],["(*.f64 (*.f64 a 27) b)",1.9061635408100754,1],["(*.f64 a 27)",1.9061635408100752,1]],"compiler":[[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[23,17],[17,13],[17,13],[9,8],[13,10],[13,10],[11,9],[11,9],[9,8],[11,9],[9,8],[407,247]],"count":[[21,2]],"inputs":[["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 a 27)) 2) (*.f64 (cbrt.f64 (*.f64 a 27)) b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))","(+.f64 (+.f64 (fma.f64 y (*.f64 (*.f64 z -9) t) x) x) (*.f64 (*.f64 a 27) b))","(fma.f64 -9 (*.f64 (*.f64 y z) t) (fma.f64 x 2 (*.f64 27 (*.f64 a b))))","(fma.f64 (*.f64 (*.f64 a 27) (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 b) (fma.f64 y (*.f64 (*.f64 z -9) t) (+.f64 x x)))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (pow.f64 (sqrt.f64 (*.f64 a (*.f64 27 b))) 2))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (pow.f64 (cbrt.f64 (*.f64 a (*.f64 27 b))) 3))","(+.f64 (fma.f64 (*.f64 (*.f64 y z) -9) t (+.f64 x x)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (*.f64 27 (*.f64 a b)))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (+.f64 0 (*.f64 a (*.f64 27 b))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (pow.f64 (sqrt.f64 (*.f64 a (*.f64 27 b))) 2))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (pow.f64 (*.f64 a (*.f64 27 b)) 1))","(+.f64 (fma.f64 (neg.f64 t) (*.f64 9 (*.f64 y z)) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 27 (*.f64 a b)))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (pow.f64 (cbrt.f64 (*.f64 a (*.f64 27 b))) 3))","(+.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t))))) (cbrt.f64 (*.f64 (*.f64 y 9) (neg.f64 (*.f64 z t)))) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","(+.f64 (fma.f64 (*.f64 (*.f64 (*.f64 y 9) (neg.f64 z)) (sqrt.f64 t)) (sqrt.f64 t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","(+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","(+.f64 (fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 2 x)) (*.f64 (*.f64 a 27) b))","(fma.f64 x 2 (fma.f64 y (*.f64 t (*.f64 z -9)) (*.f64 a (*.f64 27 b))))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, A"],"oracle":[36.06712482014733],"outputs":[["(+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b))","(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (*.f64 (*.f64 a 27) b))"]],"time":166.446044921875,"times":[["x",7.18212890625],["y",13.79296875],["z",13.864990234375],["t",13.612060546875],["a",7.255126953125],["b",7.294189453125],["(+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t)) (*.f64 (*.f64 a 27) b))",7.3349609375],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))",7.22607421875],["(-.f64 (*.f64 x 2) (*.f64 (*.f64 (*.f64 y 9) z) t))",7.255126953125],["(*.f64 x 2)",7.553955078125],["(*.f64 (*.f64 (*.f64 y 9) z) t)",6.238037109375],["(*.f64 (*.f64 (*.f64 y 9) z) t)",6.217041015625],["(*.f64 (*.f64 y 9) z)",11.866943359375],["(*.f64 (*.f64 y 9) z)",12.076171875],["(*.f64 y 9)",13.9140625],["(*.f64 (*.f64 a 27) b)",6.783935546875],["(*.f64 a 27)",7.5869140625]],"type":"regimes"},{"bstep":[[-5.554970015551966e-176,-5.348996162459934e-176,12.973876953125]],"compiler":[[25,19],[7,6]],"method":["binary-search"],"time":13.180908203125,"type":"bsearch"},{"compiler":[[43,29]],"egraph":[[6,104,54,0.000746709],[5,103,54,0.000628084],[4,99,54,0.000507126],[3,90,54,0.000384667],[2,74,54,0.000262917],[1,52,54,0.000160083],[0,28,54,7.325e-5]],"inputs":[["(if (<=.f64 z -990008626118269/17822033662586700072817076584766762987864173856439687228824970773044043621908896041038721919208482030385321521771853153557377752817872804680674458280164899172859354196719784961261227313463296) (+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b)) (+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (*.f64 (*.f64 a 27) b)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 z -990008626118269/17822033662586700072817076584766762987864173856439687228824970773044043621908896041038721919208482030385321521771853153557377752817872804680674458280164899172859354196719784961261227313463296) (+.f64 (fma.f64 (neg.f64 (*.f64 y 9)) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b)) (+.f64 (-.f64 (*.f64 x 2) (*.f64 (*.f64 y (*.f64 z 9)) t)) (*.f64 (*.f64 a 27) b)))","(if (<=.f64 z -990008626118269/17822033662586700072817076584766762987864173856439687228824970773044043621908896041038721919208482030385321521771853153557377752817872804680674458280164899172859354196719784961261227313463296) (+.f64 (fma.f64 (*.f64 y -9) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b)) (+.f64 (*.f64 (*.f64 a 27) b) (-.f64 (*.f64 x 2) (*.f64 t (*.f64 y (*.f64 z 9))))))","(if (<=.f64 z -990008626118269/17822033662586700072817076584766762987864173856439687228824970773044043621908896041038721919208482030385321521771853153557377752817872804680674458280164899172859354196719784961261227313463296) (+.f64 (fma.f64 (*.f64 y -9) (*.f64 z t) (+.f64 x x)) (*.f64 (*.f64 a 27) b)) (+.f64 (*.f64 (*.f64 a 27) b) (+.f64 (*.f64 x 2) (*.f64 t (*.f64 y (*.f64 z -9))))))"]],"stop":[["fuel",1],["saturated",1]],"time":10.25,"type":"simplify"},{"time":0.01708984375,"type":"soundness"},{"compiler":[[43,29],[43,29],[43,29],[43,29],[43,29]],"remove-preprocessing":[[]],"time":40.89892578125,"type":"end"}]
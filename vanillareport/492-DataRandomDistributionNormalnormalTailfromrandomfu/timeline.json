[{"compiler":[[10,6]],"method":["search"],"sampling":[[12,0.6731702503748238,0.08390237903222442,0.24292737059295177],[11,0.6439019786193967,0.11317065078765154,0.24292737059295177],[10,0.6009751800447702,0.16390232183039188,0.23512249812483788],[9,0.546341072767973,0.21853642910718918,0.23512249812483788],[8,0.46829234808683395,0.31219489872455597,0.21951275318861008],[7,0.37463387846946716,0.40585336834192276,0.21951275318861008],[6,0.24975591897964478,0.5619508177042007,0.18829326331615448],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":20.81689453125,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.797607421875,89],["body",256,"valid",266.407470703125,8256]],"time":276.85400390625,"type":"sample"},{"compiler":[[9,5]],"egraph":[[0,2,2,1.542e-6],[4,32,16,0.00038754],[3,30,16,0.00030020700000000003],[2,26,16,0.000211415],[1,19,16,0.000123249],[0,9,16,5.0416e-5]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x x) y) y)","(+.f64 (+.f64 (*.f64 y y) x) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x x) y) y)","(+.f64 y (fma.f64 x x y))","(+.f64 (+.f64 (*.f64 y y) x) x)","(+.f64 x (fma.f64 y y x))","(fma.f64 y y (+.f64 x x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.5419921875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[4,18,8,0.000245084],[3,17,8,0.000192834],[2,15,8,0.000139334],[1,11,8,8.5875e-5],[0,6,8,3.7292e-5]],"inputs":[["(+.f64 (+.f64 (*.f64 x x) y) y)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 x x) y) y)","(+.f64 y (fma.f64 x x y))"]],"stop":[["saturated",1]],"time":11.31005859375,"type":"simplify"},{"compiler":[[15,7]],"time":0.2958984375,"type":"eval"},{"alts":[["(+.f64 y (fma.f64 x x y))","next",0.015625]],"compiler":[[8,4],[8,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.748046875,"type":"prune"},{"compiler":[[14,4]],"locations":[["(+.f64 y (fma.f64 x x y))",0.015625,true]],"time":3.089111328125,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 y (fma.f64 x x y))","x","-inf",0.35302734375],["(+.f64 y (fma.f64 x x y))","x","inf",0.31201171875],["(+.f64 y (fma.f64 x x y))","x","0",0.3271484375],["(+.f64 y (fma.f64 x x y))","y","-inf",0.2978515625],["(+.f64 y (fma.f64 x x y))","y","inf",0.281005859375],["(+.f64 y (fma.f64 x x y))","y","0",0.346923828125]],"time":1.995849609375,"type":"series"},{"count":[[1,33]],"egraph":[[2,1535,8,0.016625875000000002],[1,109,8,0.002085584],[0,5,8,0.000139792]],"inputs":[["(+.f64 y (fma.f64 x x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 y (fma.f64 x x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y y) (-.f64 y (fma.f64 x x y))) (/.f64 (pow.f64 (fma.f64 x x y) 2) (-.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 y (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y (fma.f64 x x y))) (pow.f64 (cbrt.f64 (+.f64 y (fma.f64 x x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y (fma.f64 x x y))) 2) (cbrt.f64 (+.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 y (fma.f64 x x y))) (sqrt.f64 (+.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 x x y) 3)) (/.f64 1 (fma.f64 y y (*.f64 (fma.f64 x x y) (-.f64 (fma.f64 x x y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 y y) (pow.f64 (fma.f64 x x y) 2)) (/.f64 1 (-.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y y (*.f64 (fma.f64 x x y) (-.f64 (fma.f64 x x y) y))) (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 x x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 y (fma.f64 x x y)) (-.f64 (*.f64 y y) (pow.f64 (fma.f64 x x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 x x y) 3)) (fma.f64 y y (*.f64 (fma.f64 x x y) (-.f64 (fma.f64 x x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 x x y) 3)) (+.f64 (pow.f64 (fma.f64 x x y) 2) (-.f64 (*.f64 y y) (*.f64 y (fma.f64 x x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y y) (pow.f64 (fma.f64 x x y) 2)) (-.f64 y (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 y 3) (pow.f64 (fma.f64 x x y) 3))) (neg.f64 (fma.f64 y y (*.f64 (fma.f64 x x y) (-.f64 (fma.f64 x x y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 y y) (pow.f64 (fma.f64 x x y) 2))) (neg.f64 (-.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x x y) 2) (*.f64 y y)) (-.f64 (fma.f64 x x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y (fma.f64 x x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y (fma.f64 x x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 y (fma.f64 x x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 y (fma.f64 x x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y (fma.f64 x x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 y (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (fma.f64 x x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 y) (fma.f64 x x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2) (cbrt.f64 (fma.f64 x x y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (fma.f64 x x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x (sqrt.f64 y)) (hypot.f64 x (sqrt.f64 y)) y)))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":35.299072265625,"type":"rewrite"},{"count":[[57,38]],"egraph":[[22,7308,168,0.11063270700000001],[21,6367,168,0.09608541500000001],[20,6331,168,0.08242054000000001],[19,6257,168,0.07274133200000002],[18,5977,168,0.06438383200000002],[17,5687,168,0.05677916600000001],[16,5291,168,0.04981791600000001],[15,4454,168,0.04280195800000001],[14,3766,168,0.03519125000000001],[13,3200,168,0.028399667000000003],[12,2717,168,0.022771875000000004],[11,2324,168,0.017945000000000003],[10,2029,168,0.013851708],[9,1821,168,0.010568958],[8,1637,168,0.007865792],[7,1453,168,0.005629334],[6,587,168,0.0033439999999999998],[5,167,168,0.00157025],[4,65,168,0.000718792],[3,36,168,0.000402917],[2,25,168,0.000250708],[1,15,168,0.000151125],[0,7,168,6.2083e-5]],"inputs":[["(pow.f64 x 2)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(*.f64 2 y)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(*.f64 2 y)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(*.f64 2 y)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(+.f64 (*.f64 2 y) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(*.f64 2 y)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(*.f64 2 y)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(*.f64 2 y)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))","(+.f64 (*.f64 2 y) (pow.f64 x 2))","(fma.f64 2 y (*.f64 x x))","(fma.f64 x x (*.f64 2 y))"]],"stop":[["node limit",1]],"time":128.89111328125,"type":"simplify"},{"compiler":[[492,151]],"time":5.23095703125,"type":"eval"},{"alts":[["(fma.f64 x x (*.f64 2 y))","next",0]],"compiler":[[8,5],[8,5]],"count":[[39,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[38,1],"picked":[1,0]}],"min-error":[0],"time":4.911865234375,"type":"prune"},{"compiler":[[14,8]],"time":3.481201171875,"type":"localize"},{"compiler":[[2,2]],"time":0.087890625,"type":"eval"},{"alts":[["(fma.f64 x x (*.f64 2 y))","done",0]],"compiler":[[8,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.450927734375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(+.f64 (+.f64 (*.f64 x x) y) y)",0,1],["(*.f64 x x)",0,1]],"compiler":[[3,2],[3,2],[9,5],[5,3],[21,10]],"count":[[3,1]],"inputs":[["(fma.f64 x x (*.f64 2 y))","(+.f64 y (fma.f64 x x y))","(+.f64 (+.f64 (*.f64 x x) y) y)"]],"link":["."],"name":["Data.Random.Distribution.Normal:normalTail from random-fu-0.2.6.2"],"oracle":[0.015625],"outputs":[["(fma.f64 x x (*.f64 2 y))"]],"time":10.91796875,"times":[["x",2.64892578125],["y",2.682861328125],["(+.f64 (+.f64 (*.f64 x x) y) y)",2.845947265625],["(*.f64 x x)",2.110107421875]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[1,7,8,2.4584e-5],[0,6,8,1.4792e-5]],"inputs":[["(fma.f64 x x (*.f64 2 y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x x (*.f64 2 y))"]],"stop":[["done",1],["saturated",1]],"time":8.152099609375,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":7.69580078125,"type":"end"}]
[{"compiler":[[10,6]],"method":["search"],"sampling":[[12,0.4936581836082041,0.09073164244182408,0.4156101739499718],[11,0.4721947843208909,0.11902430513873696,0.40878091054037213],[10,0.42926798574626446,0.18341450300067663,0.3873175112530589],[9,0.39024362340569496,0.24195104651153088,0.36780533008277416],[8,0.31219489872455597,0.37463387846946716,0.31317122280597687],[7,0.24975591897964478,0.49951183795928955,0.2507322430610657],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":22.60107421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.505859375,361],["body",256,"valid",268.504150390625,8256]],"time":288.126953125,"type":"sample"},{"compiler":[[9,5]],"egraph":[[0,2,2,1.917e-6],[14,7838,20,0.087788999],[13,6457,20,0.074941749],[12,6457,20,0.057893874],[11,6377,20,0.051597541],[10,6263,20,0.045896582],[9,6150,20,0.040213999],[8,5589,20,0.034062041],[7,3851,20,0.025759541],[6,2113,20,0.015937791],[5,821,20,0.006935],[4,273,20,0.002176],[3,103,20,0.0007713749999999999],[2,47,20,0.000340625],[1,25,20,0.000165416],[0,7,20,5.725e-5]],"inputs":[["0","1"],["(-.f64 (*.f64 x x) (*.f64 y y))","(-.f64 (*.f64 y y) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(-.f64 (*.f64 y y) (*.f64 x x))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":111.14697265625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[14,7086,10,0.08881224900000001],[13,7086,10,0.07251149900000001],[12,6971,10,0.062212833],[11,6725,10,0.052764999],[10,6304,10,0.044143583],[9,5425,10,0.035638208],[8,3916,10,0.025232248999999998],[7,1662,10,0.015275332999999999],[6,832,10,0.006149249],[5,382,10,0.0028507489999999996],[4,133,10,0.001081791],[3,56,10,0.000450083],[2,27,10,0.000222458],[1,15,10,0.000117083],[0,6,10,4.4e-5]],"inputs":[["(-.f64 (*.f64 x x) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x x) (*.f64 y y))"]],"stop":[["node limit",1]],"time":100.254150390625,"type":"simplify"},{"compiler":[[9,5]],"time":0.824951171875,"type":"eval"},{"alts":[["(-.f64 (*.f64 x x) (*.f64 y y))","next",0.01171875]],"compiler":[[9,5],[9,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.652099609375,"type":"prune"},{"compiler":[[17,5]],"locations":[["(-.f64 (*.f64 x x) (*.f64 y y))",0.01171875,true]],"time":3.5869140625,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (*.f64 x x) (*.f64 y y))","y","-inf",0.19384765625],["(-.f64 (*.f64 x x) (*.f64 y y))","y","inf",0.260986328125],["(-.f64 (*.f64 x x) (*.f64 y y))","y","0",0.343994140625],["(-.f64 (*.f64 x x) (*.f64 y y))","x","-inf",0.179931640625],["(-.f64 (*.f64 x x) (*.f64 y y))","x","inf",0.337890625],["(-.f64 (*.f64 x x) (*.f64 y y))","x","0",0.468994140625]],"time":1.864990234375,"type":"series"},{"count":[[1,46]],"egraph":[[2,1985,10,0.017916291],[1,139,10,0.0026410410000000002],[0,6,10,0.000162625]],"inputs":[["(-.f64 (*.f64 x x) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (*.f64 y (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 (*.f64 y (neg.f64 y)) (fma.f64 (neg.f64 y) y (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (fma.f64 (neg.f64 y) y (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (fma.f64 (*.f64 y (neg.f64 y)) 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (pow.f64 y 4)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (*.f64 (fma.f64 (neg.f64 y) y (*.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (+.f64 (fma.f64 (neg.f64 y) y (*.f64 y y)) (fma.f64 (neg.f64 y) y (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (neg.f64 y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 y) y (*.f64 y y)) (-.f64 (*.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) 2) (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 6) (pow.f64 y 6)) (/.f64 1 (+.f64 (pow.f64 x 4) (+.f64 (pow.f64 y 4) (pow.f64 (*.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 4) (pow.f64 y 4)) (/.f64 1 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 x 4) (+.f64 (pow.f64 y 4) (pow.f64 (*.f64 x y) 2))) (-.f64 (pow.f64 x 6) (pow.f64 y 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 y y)) (-.f64 (pow.f64 x 4) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 6) (pow.f64 y 6)) (+.f64 (pow.f64 x 4) (+.f64 (pow.f64 y 4) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (pow.f64 y 4)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 6) (pow.f64 y 6))) (neg.f64 (+.f64 (pow.f64 x 4) (+.f64 (pow.f64 y 4) (pow.f64 (*.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 4) (pow.f64 y 4))) (neg.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 y (neg.f64 y)) 3)) (+.f64 (pow.f64 x 4) (-.f64 (*.f64 (*.f64 y (neg.f64 y)) (*.f64 y (neg.f64 y))) (*.f64 (*.f64 x x) (*.f64 y (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 3) (pow.f64 (fma.f64 (neg.f64 y) y (*.f64 y y)) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 2) (-.f64 (*.f64 (fma.f64 (neg.f64 y) y (*.f64 y y)) (fma.f64 (neg.f64 y) y (*.f64 y y))) (*.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (fma.f64 (neg.f64 y) y (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (*.f64 (*.f64 y (neg.f64 y)) (*.f64 y (neg.f64 y)))) (-.f64 (*.f64 x x) (*.f64 y (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 2) (*.f64 (fma.f64 (neg.f64 y) y (*.f64 y y)) (fma.f64 (neg.f64 y) y (*.f64 y y)))) (-.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (fma.f64 (neg.f64 y) y (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 x x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x x) (*.f64 y y)) (fma.f64 (neg.f64 y) y (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) 2) (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) (fma.f64 (neg.f64 y) y (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (cbrt.f64 x) 2) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) (sqrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) (fma.f64 (neg.f64 y) y (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) (-.f64 x y) (fma.f64 (neg.f64 y) y (*.f64 y y)))))))"]],"rules":[["egg-rr",46]],"stop":[["node limit",1]],"time":36.5830078125,"type":"rewrite"},{"count":[[70,51]],"egraph":[[7,5169,210,0.024710417],[6,1792,210,0.012166],[5,763,210,0.004685],[4,223,210,0.001915667],[3,87,210,0.0007650000000000001],[2,42,210,0.000370083],[1,21,210,0.000185625],[0,9,228,6.975e-5]],"inputs":[["(*.f64 -1 (pow.f64 y 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 -1 (pow.f64 y 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 -1 (pow.f64 y 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (pow.f64 y 2))","(neg.f64 (*.f64 y y))","(*.f64 y (neg.f64 y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(*.f64 -1 (pow.f64 y 2))","(neg.f64 (*.f64 y y))","(*.f64 y (neg.f64 y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(*.f64 -1 (pow.f64 y 2))","(neg.f64 (*.f64 y y))","(*.f64 y (neg.f64 y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 -1 (*.f64 y y) (*.f64 x x))","(-.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y (neg.f64 y)))"]],"stop":[["node limit",1]],"time":39.5888671875,"type":"simplify"},{"compiler":[[777,233]],"time":6.09423828125,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) (-.f64 x y))","next",0]],"compiler":[[9,5],[9,5]],"count":[[52,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[51,1],"picked":[1,0]}],"min-error":[0],"time":7.998779296875,"type":"prune"},{"compiler":[[17,5]],"time":3.43798828125,"type":"localize"},{"compiler":[[2,2]],"time":0.087158203125,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) (-.f64 x y))","done",0]],"compiler":[[9,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.433837890625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(-.f64 (*.f64 x x) (*.f64 y y))",0,1],["(*.f64 x x)",0,1],["(*.f64 y y)",0,1]],"compiler":[[3,2],[3,2],[9,5],[5,3],[5,3],[16,8]],"count":[[2,1]],"inputs":[["(*.f64 (+.f64 x y) (-.f64 x y))","(-.f64 (*.f64 x x) (*.f64 y y))"]],"link":["."],"name":["Examples.Basics.BasicTests:f2 from sbv-4.4"],"oracle":[0.01171875],"outputs":[["(*.f64 (+.f64 x y) (-.f64 x y))"]],"time":12.550048828125,"times":[["x",2.368896484375],["y",2.2060546875],["(-.f64 (*.f64 x x) (*.f64 y y))",3.515869140625],["(*.f64 x x)",1.95703125],["(*.f64 y y)",1.923828125]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[4,18,10,9.8834e-5],[3,17,10,7.8876e-5],[2,15,10,5.8834e-5],[1,10,10,3.9084e-5],[0,6,10,1.6667e-5]],"inputs":[["(*.f64 (+.f64 x y) (-.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) (-.f64 x y))"]],"stop":[["done",1],["saturated",1]],"time":8.213134765625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.235107421875,"type":"end"}]
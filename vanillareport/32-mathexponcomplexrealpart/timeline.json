[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7492677569389343,0.1326828319579363,0.11804941110312939],[11,0.7492677569389343,0.1404877044260502,0.11024453863501549],[10,0.7492677569389343,0.1404877044260502,0.11024453863501549],[9,0.7492677569389343,0.15609744936227798,0.09463479369878769],[8,0.7492677569389343,0.15609744936227798,0.09463479369878769],[7,0.7492677569389343,0.18731693923473358,0.06341530382633209],[6,0.7492677569389343,0.18731693923473358,0.06341530382633209],[5,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[4,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[3,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[2,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.01513671875,"type":"analyze"},{"outcomes":[["body",512,"invalid",28.49169921875,310],["body",256,"invalid",20.76025390625,415],["body",1024,"invalid",109.620849609375,717],["body",512,"valid",67.5439453125,670],["body",1024,"valid",262.84228515625,1344],["body",2048,"valid",2.31591796875,4],["body",256,"valid",279.35107421875,6238]],"time":780.828857421875,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,2,2,1.458e-6],[1,11,16,0.000101416],[0,9,16,5.55e-5]],"inputs":[["0","1"],["(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 im) (cos.f64 re))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 im) (cos.f64 re))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.38720703125,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,7,8,7.1375e-5],[0,6,8,3.9458e-5]],"inputs":[["(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 re) (cos.f64 im))"]],"stop":[["saturated",1]],"time":10.0908203125,"type":"simplify"},{"compiler":[[7,5]],"time":0.212158203125,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (cos.f64 im))","next",0.0078125]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.640869140625,"type":"prune"},{"compiler":[[13,5]],"locations":[["(*.f64 (exp.f64 re) (cos.f64 im))",0.00390625,true],["(cos.f64 im)",0.0078125,true]],"time":3.947998046875,"type":"localize"},{"count":[[2,12]],"series":[["(*.f64 (exp.f64 re) (cos.f64 im))","im","-inf",0.294921875],["(*.f64 (exp.f64 re) (cos.f64 im))","im","inf",0.303955078125],["(*.f64 (exp.f64 re) (cos.f64 im))","im","0",0.277099609375],["(*.f64 (exp.f64 re) (cos.f64 im))","re","-inf",0.427978515625],["(*.f64 (exp.f64 re) (cos.f64 im))","re","inf",0.869873046875],["(*.f64 (exp.f64 re) (cos.f64 im))","re","0",0.337890625],["(cos.f64 im)","im","-inf",0.177978515625],["(cos.f64 im)","im","inf",0.1650390625],["(cos.f64 im)","im","0",0.333984375]],"time":3.2939453125,"type":"series"},{"count":[[2,27]],"egraph":[[2,1324,11,0.014961457000000001],[1,113,11,0.001830707],[0,6,11,0.000142791]],"inputs":[["(cos.f64 im)","(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 im)) (pow.f64 (cbrt.f64 (cos.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 im)) 2) (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 im)) (sqrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 im)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 im)) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 re (log.f64 (cos.f64 im))))))))"]],"rules":[["egg-rr",11],["egg-rr",16]],"stop":[["node limit",1]],"time":33.587158203125,"type":"rewrite"},{"count":[[39,48]],"egraph":[[7,7519,160,0.055037499000000004],[6,7086,160,0.041877666],[5,6575,160,0.029472083000000003],[4,3921,160,0.017034458000000002],[3,1047,165,0.007757333],[2,331,182,0.0023916249999999997],[1,131,200,0.0008446249999999999],[0,49,204,0.000238958]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 im 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/720 (pow.f64 im 6)))))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 im 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 im im)))","(fma.f64 -1/2 (*.f64 im im) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 im im) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 (fma.f64 -1/2 (*.f64 im im) 1) (*.f64 1/24 (pow.f64 im 4)))","(fma.f64 -1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/720 (pow.f64 im 6)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) (*.f64 -1/720 (pow.f64 im 6)))))","(+.f64 (fma.f64 -1/2 (*.f64 im im) 1) (fma.f64 -1/720 (pow.f64 im 6) (*.f64 1/24 (pow.f64 im 4))))","(fma.f64 -1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) (fma.f64 -1/720 (pow.f64 im 6) 1)))","(fma.f64 -1/2 (*.f64 im im) (fma.f64 -1/720 (pow.f64 im 6) (fma.f64 1/24 (pow.f64 im 4) 1)))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(fma.f64 (cos.f64 im) re (cos.f64 im))","(*.f64 (+.f64 re 1) (cos.f64 im))","(*.f64 (cos.f64 im) (+.f64 1 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im)))","(fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (*.f64 (+.f64 re 1) (cos.f64 im)))","(*.f64 (cos.f64 im) (+.f64 (+.f64 1 re) (*.f64 re (*.f64 re 1/2))))","(*.f64 (cos.f64 im) (+.f64 1 (fma.f64 1/2 (*.f64 re re) re)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (*.f64 (+.f64 re 1) (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (*.f64 (cos.f64 im) (+.f64 (+.f64 1 re) (*.f64 re (*.f64 re 1/2)))))","(*.f64 (cos.f64 im) (+.f64 (+.f64 1 re) (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6)))))","(*.f64 (cos.f64 im) (+.f64 (fma.f64 1/6 (pow.f64 re 3) 1) (fma.f64 1/2 (*.f64 re re) re)))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(fma.f64 -1/2 (*.f64 (*.f64 im im) (exp.f64 re)) (exp.f64 re))","(fma.f64 -1/2 (*.f64 im (*.f64 im (exp.f64 re))) (exp.f64 re))","(*.f64 (fma.f64 -1/2 (*.f64 im im) 1) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(fma.f64 -1/2 (*.f64 (*.f64 im im) (exp.f64 re)) (fma.f64 1/24 (*.f64 (pow.f64 im 4) (exp.f64 re)) (exp.f64 re)))","(fma.f64 -1/2 (*.f64 im (*.f64 im (exp.f64 re))) (fma.f64 1/24 (*.f64 (pow.f64 im 4) (exp.f64 re)) (exp.f64 re)))","(+.f64 (exp.f64 re) (*.f64 (exp.f64 re) (fma.f64 -1/2 (*.f64 im im) (*.f64 1/24 (pow.f64 im 4)))))","(*.f64 (exp.f64 re) (fma.f64 -1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) 1)))","(*.f64 (fma.f64 -1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) 1)) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(fma.f64 -1/2 (*.f64 (*.f64 im im) (exp.f64 re)) (fma.f64 1/24 (*.f64 (pow.f64 im 4) (exp.f64 re)) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (pow.f64 im 6) (exp.f64 re))))))","(fma.f64 -1/2 (*.f64 im (*.f64 im (exp.f64 re))) (fma.f64 1/24 (*.f64 (pow.f64 im 4) (exp.f64 re)) (fma.f64 -1/720 (*.f64 (pow.f64 im 6) (exp.f64 re)) (exp.f64 re))))","(+.f64 (*.f64 (fma.f64 1/24 (pow.f64 im 4) 1) (exp.f64 re)) (*.f64 (exp.f64 re) (fma.f64 -1/2 (*.f64 im im) (*.f64 -1/720 (pow.f64 im 6)))))","(+.f64 (exp.f64 re) (*.f64 (exp.f64 re) (fma.f64 -1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) (*.f64 -1/720 (pow.f64 im 6))))))","(*.f64 (exp.f64 re) (fma.f64 -1/2 (*.f64 im im) (fma.f64 -1/720 (pow.f64 im 6) (fma.f64 1/24 (pow.f64 im 4) 1))))"]],"stop":[["node limit",1]],"time":69.27099609375,"type":"simplify"},{"compiler":[[500,253]],"time":6.0869140625,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (cos.f64 im))","done",0.0078125],["(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","fresh",0.2464638183790941],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","next",0.23077517069416967]],"compiler":[[7,5],[10,8],[11,9],[10,8],[11,9]],"count":[[49,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[48,2],"picked":[1,1]}],"min-error":[0],"time":8.953125,"type":"prune"},{"compiler":[[30,12]],"locations":[["(*.f64 (cos.f64 im) (exp.f64 re))",0.00390625,true],["(cos.f64 im)",0.0078125,false],["(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))",0.12708331926681965,true],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)",0.23858767069416975,true]],"time":6.385009765625,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 (cos.f64 im) (exp.f64 re))","re","-inf",0.138916015625],["(*.f64 (cos.f64 im) (exp.f64 re))","re","inf",0.156005859375],["(*.f64 (cos.f64 im) (exp.f64 re))","re","0",0.159912109375],["(*.f64 (cos.f64 im) (exp.f64 re))","im","-inf",0.157958984375],["(*.f64 (cos.f64 im) (exp.f64 re))","im","inf",0.14013671875],["(*.f64 (cos.f64 im) (exp.f64 re))","im","0",0.170166015625],["(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))","re","-inf",0.177001953125],["(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))","re","inf",0.156005859375],["(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))","re","0",0.2099609375],["(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))","im","-inf",0.156982421875],["(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))","im","inf",0.162841796875],["(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))","im","0",0.22900390625],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","re","-inf",0.151123046875],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","re","inf",0.1669921875],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","re","0",0.1630859375],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","im","-inf",0.154052734375],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","im","inf",0.18212890625],["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","im","0",0.2080078125]],"time":3.2568359375,"type":"series"},{"count":[[3,115]],"egraph":[[2,2553,25,0.021049166],[1,189,25,0.003373249],[0,9,39,0.000238916]],"inputs":[["(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","(+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))","(*.f64 (cos.f64 im) (exp.f64 re))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (fma.f64 (cos.f64 im) (exp.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 im) (exp.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 re) (cos.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 re)) 2) (*.f64 (cbrt.f64 (exp.f64 re)) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 2) (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 im)) 2) (*.f64 (cbrt.f64 (cos.f64 im)) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 re)) (*.f64 (sqrt.f64 (exp.f64 re)) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) (sqrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 im)) (*.f64 (sqrt.f64 (cos.f64 im)) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1) (/.f64 1 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1) (/.f64 1 (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 1) (-.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 im) (pow.f64 (cbrt.f64 (exp.f64 re)) 2)) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 im) (sqrt.f64 (exp.f64 re))) (sqrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 2)) (cbrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (sqrt.f64 (cos.f64 im))) (sqrt.f64 (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1) (-.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1)) (neg.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1)) (neg.f64 (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3)) (+.f64 1 (-.f64 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (exp.f64 re)) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 re (log.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))) (/.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 2) (*.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) (*.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3)) (/.f64 1 (+.f64 1 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)) (/.f64 1 (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (+.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) (-.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3)) (+.f64 1 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3)) (+.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)) (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3))) (neg.f64 (+.f64 1 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))) (neg.f64 (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) 1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3)) 1) (+.f64 1 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)) 1) (-.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 im) (exp.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 re) (cos.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 2) (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) (sqrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (fma.f64 (cos.f64 im) (exp.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))) (/.f64 1 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)) (/.f64 1 (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1) (-.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 3) -1)) (neg.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1) 2) -1)) (neg.f64 (+.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3)) (+.f64 1 (-.f64 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 im) (exp.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (exp.f64 re)) (cos.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 re (log.f64 (cos.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) 1)) -1)))))"]],"rules":[["egg-rr",32],["egg-rr",36],["egg-rr",47]],"stop":[["node limit",1]],"time":47.714111328125,"type":"rewrite"},{"count":[[187,117]],"egraph":[[7,7372,809,0.05395875],[6,6947,809,0.041951749999999996],[5,5703,809,0.029686167],[4,3311,809,0.017238375],[3,1281,815,0.008005208],[2,392,848,0.002977458],[1,147,874,0.001010042],[0,52,912,0.00031025]],"inputs":[["(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(+.f64 1 (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 1 (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 1 (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re))))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 1 (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)))))))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (cos.f64 im))","(+.f64 1 (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 1 (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(+.f64 1 (+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (exp.f64 re))","(fma.f64 (*.f64 (exp.f64 re) -1/2) (*.f64 im im) (exp.f64 re))","(fma.f64 (exp.f64 re) (*.f64 -1/2 (*.f64 im im)) (exp.f64 re))","(*.f64 (exp.f64 re) (+.f64 1 (*.f64 -1/2 (*.f64 im im))))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)))","(+.f64 (exp.f64 re) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4)))))","(*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (+.f64 1 (*.f64 1/24 (pow.f64 im 4)))))","(*.f64 (exp.f64 re) (+.f64 1 (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/2 (*.f64 im im)))))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (+.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)))))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (fma.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)) (exp.f64 re))))","(+.f64 (fma.f64 (exp.f64 re) (*.f64 -1/720 (pow.f64 im 6)) (exp.f64 re)) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4)))))","(+.f64 (exp.f64 re) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/720 (pow.f64 im 6)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/2 (*.f64 im im))))))","(*.f64 (exp.f64 re) (+.f64 (+.f64 1 (*.f64 1/24 (pow.f64 im 4))) (*.f64 (*.f64 im im) (+.f64 (*.f64 (pow.f64 im 4) -1/720) -1/2))))","(*.f64 (exp.f64 re) (+.f64 (+.f64 1 (*.f64 -1/2 (*.f64 im im))) (*.f64 (pow.f64 im 4) (+.f64 (*.f64 -1/720 (*.f64 im im)) 1/24))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(fma.f64 (cos.f64 im) re (cos.f64 im))","(*.f64 (+.f64 re 1) (cos.f64 im))","(fma.f64 re (cos.f64 im) (cos.f64 im))","(*.f64 (cos.f64 im) (+.f64 re 1))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im)))","(fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im)))","(*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 1/2 (*.f64 re re))))","(*.f64 (cos.f64 im) (+.f64 1 (+.f64 re (*.f64 re (*.f64 re 1/2)))))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im))))","(fma.f64 (+.f64 re 1) (cos.f64 im) (*.f64 (cos.f64 im) (+.f64 (*.f64 1/6 (pow.f64 re 3)) (*.f64 1/2 (*.f64 re re)))))","(*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 (*.f64 re re) (+.f64 (*.f64 re 1/6) 1/2))))","(*.f64 (cos.f64 im) (+.f64 re (+.f64 1 (*.f64 re (*.f64 re (+.f64 1/2 (*.f64 re 1/6)))))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(+.f64 1 (exp.f64 re))","(+.f64 (exp.f64 re) 1)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 1 (exp.f64 re)))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (+.f64 (exp.f64 re) 1))","(+.f64 (fma.f64 (*.f64 (exp.f64 re) -1/2) (*.f64 im im) (exp.f64 re)) 1)","(+.f64 (exp.f64 re) (fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) 1))","(+.f64 (exp.f64 re) (fma.f64 (exp.f64 re) (*.f64 -1/2 (*.f64 im im)) 1))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 1 (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re))))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (+.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)) 1))","(+.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)) (fma.f64 (*.f64 (exp.f64 re) -1/2) (*.f64 im im) 1))","(+.f64 (exp.f64 re) (+.f64 1 (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4))))))","(+.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (+.f64 1 (*.f64 1/24 (pow.f64 im 4))))) 1)","(+.f64 (*.f64 (exp.f64 re) (+.f64 1 (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/2 (*.f64 im im))))) 1)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 1 (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)))))))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (+.f64 (+.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)))) 1))","(+.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (fma.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)) (exp.f64 re))) (fma.f64 (*.f64 (exp.f64 re) -1/2) (*.f64 im im) 1))","(+.f64 (fma.f64 (exp.f64 re) (*.f64 -1/720 (pow.f64 im 6)) (exp.f64 re)) (+.f64 1 (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4))))))","(+.f64 (+.f64 (exp.f64 re) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/720 (pow.f64 im 6)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/2 (*.f64 im im)))))) 1)","(+.f64 (*.f64 (exp.f64 re) (+.f64 (+.f64 1 (*.f64 1/24 (pow.f64 im 4))) (*.f64 (*.f64 im im) (+.f64 (*.f64 (pow.f64 im 4) -1/720) -1/2)))) 1)","(+.f64 (*.f64 (exp.f64 re) (+.f64 (+.f64 1 (*.f64 -1/2 (*.f64 im im))) (*.f64 (pow.f64 im 4) (+.f64 (*.f64 -1/720 (*.f64 im im)) 1/24)))) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (cos.f64 im))","(+.f64 (cos.f64 im) 1)","(+.f64 1 (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(+.f64 (fma.f64 (cos.f64 im) re (cos.f64 im)) 1)","(+.f64 (*.f64 (+.f64 re 1) (cos.f64 im)) 1)","(fma.f64 (+.f64 re 1) (cos.f64 im) 1)","(+.f64 1 (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(+.f64 (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im))) 1)","(+.f64 (fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im))) 1)","(+.f64 (*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 1/2 (*.f64 re re)))) 1)","(+.f64 (*.f64 (cos.f64 im) (+.f64 1 (+.f64 re (*.f64 re (*.f64 re 1/2))))) 1)","(+.f64 1 (+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))))","(+.f64 (fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im)))) 1)","(+.f64 (fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im)))) 1)","(+.f64 (*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 1/2 (*.f64 re re)))) (fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) 1))","(+.f64 1 (*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 (*.f64 re re) (+.f64 (*.f64 re 1/6) 1/2)))))","(+.f64 1 (*.f64 (cos.f64 im) (+.f64 re (+.f64 1 (*.f64 re (*.f64 re (+.f64 1/2 (*.f64 re 1/6))))))))","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(+.f64 1 (*.f64 (exp.f64 re) (cos.f64 im)))","(+.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) 1)","(exp.f64 re)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (exp.f64 re))","(fma.f64 (*.f64 (exp.f64 re) -1/2) (*.f64 im im) (exp.f64 re))","(fma.f64 (exp.f64 re) (*.f64 -1/2 (*.f64 im im)) (exp.f64 re))","(*.f64 (exp.f64 re) (+.f64 1 (*.f64 -1/2 (*.f64 im im))))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re)))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)))","(+.f64 (exp.f64 re) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4)))))","(*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (+.f64 1 (*.f64 1/24 (pow.f64 im 4)))))","(*.f64 (exp.f64 re) (+.f64 1 (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/2 (*.f64 im im)))))","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (+.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)))))","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (fma.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)) (exp.f64 re))))","(+.f64 (fma.f64 (exp.f64 re) (*.f64 -1/720 (pow.f64 im 6)) (exp.f64 re)) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4)))))","(+.f64 (exp.f64 re) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/720 (pow.f64 im 6)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/2 (*.f64 im im))))))","(*.f64 (exp.f64 re) (+.f64 (+.f64 1 (*.f64 1/24 (pow.f64 im 4))) (*.f64 (*.f64 im im) (+.f64 (*.f64 (pow.f64 im 4) -1/720) -1/2))))","(*.f64 (exp.f64 re) (+.f64 (+.f64 1 (*.f64 -1/2 (*.f64 im im))) (*.f64 (pow.f64 im 4) (+.f64 (*.f64 -1/720 (*.f64 im im)) 1/24))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(cos.f64 im)","(+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))","(fma.f64 (cos.f64 im) re (cos.f64 im))","(*.f64 (+.f64 re 1) (cos.f64 im))","(fma.f64 re (cos.f64 im) (cos.f64 im))","(*.f64 (cos.f64 im) (+.f64 re 1))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))","(fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im)))","(fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im)))","(*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 1/2 (*.f64 re re))))","(*.f64 (cos.f64 im) (+.f64 1 (+.f64 re (*.f64 re (*.f64 re 1/2)))))","(+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im))))","(fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im))))","(fma.f64 (+.f64 re 1) (cos.f64 im) (*.f64 (cos.f64 im) (+.f64 (*.f64 1/6 (pow.f64 re 3)) (*.f64 1/2 (*.f64 re re)))))","(*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 (*.f64 re re) (+.f64 (*.f64 re 1/6) 1/2))))","(*.f64 (cos.f64 im) (+.f64 re (+.f64 1 (*.f64 re (*.f64 re (+.f64 1/2 (*.f64 re 1/6)))))))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))","(*.f64 (exp.f64 re) (cos.f64 im))"]],"stop":[["node limit",1]],"time":79.889892578125,"type":"simplify"},{"compiler":[[2118,1136]],"time":23.2021484375,"type":"eval"},{"alts":[["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","next",0.28080390085845713],["(*.f64 (exp.f64 re) (cos.f64 im))","done",0.0078125]],"compiler":[[26,16],[7,5],[26,16]],"count":[[143,2]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[140,1],"picked":[1,0]}],"min-error":[0],"time":34.50390625,"type":"prune"},{"compiler":[[76,36]],"locations":[["(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))",0.10967506092597981,true],["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))",0.14453125,true],["(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))",0.15853500976844204,true],["(fma.f64 (cos.f64 im) (exp.f64 re) -1)",3.0499454922868012,true]],"time":15.60791015625,"type":"localize"},{"count":[[4,96]],"series":[["(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","re","-inf",0.173095703125],["(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","re","inf",0.159912109375],["(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","re","0",0.89697265625],["(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","im","-inf",0.175048828125],["(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","im","inf",0.163818359375],["(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","im","0",0.400146484375],["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","re","-inf",0.528076171875],["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","re","inf",0.5400390625],["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","re","0",1.93408203125],["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","im","-inf",0.531005859375],["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","im","inf",0.56298828125],["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","im","0",1.673095703125],["(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))","re","-inf",0.35302734375],["(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))","re","inf",0.345947265625],["(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))","re","0",0.465087890625],["(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))","im","-inf",0.35791015625],["(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))","im","inf",0.3701171875],["(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))","im","0",0.613037109375],["(fma.f64 (cos.f64 im) (exp.f64 re) -1)","re","-inf",0.18310546875],["(fma.f64 (cos.f64 im) (exp.f64 re) -1)","re","inf",0.401123046875],["(fma.f64 (cos.f64 im) (exp.f64 re) -1)","re","0",0.216796875],["(fma.f64 (cos.f64 im) (exp.f64 re) -1)","im","-inf",0.172119140625],["(fma.f64 (cos.f64 im) (exp.f64 re) -1)","im","inf",0.30810546875],["(fma.f64 (cos.f64 im) (exp.f64 re) -1)","im","0",0.341064453125]],"time":12.357177734375,"type":"series"},{"count":[[4,221]],"egraph":[[2,3371,48,0.027565207],[1,251,48,0.004546707],[0,12,65,0.000338791]],"inputs":[["(fma.f64 (cos.f64 im) (exp.f64 re) -1)","(*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))","(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","(-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (*.f64 (cos.f64 im) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 im) (exp.f64 re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 3) -1) (+.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) (-.f64 1 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 im) (exp.f64 re)) 2) 1) (fma.f64 (cos.f64 im) (exp.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 (log1p.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 im) (exp.f64 re)) (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (neg.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (*.f64 (cos.f64 im) (exp.f64 re))) (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (*.f64 (cos.f64 im) (exp.f64 re)) (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 im) (exp.f64 re)) (fma.f64 (cos.f64 im) (exp.f64 re) -1) (neg.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (sqrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (*.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 1 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 1 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 1 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 1 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 1 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (fma.f64 (neg.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (fma.f64 (neg.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (fma.f64 (neg.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (fma.f64 (neg.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (fma.f64 (neg.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (*.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3)))))) (fma.f64 (neg.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3)))))) (fma.f64 (neg.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3)))))) (fma.f64 (neg.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3)))))) (fma.f64 (neg.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3)))))) (fma.f64 (neg.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (*.f64 (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) (cbrt.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 2)) (cbrt.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2) (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) (sqrt.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (/.f64 1 (neg.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (/.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 1) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (cbrt.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))) (/.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (cbrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (sqrt.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 3) (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) (neg.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 3) (pow.f64 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (sqrt.f64 (/.f64 1 (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))) (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 3))) (fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (+.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1) 1) (neg.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2) (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 6)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (/.f64 1 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 6)) (+.f64 1 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 6))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))) (neg.f64 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 3)) (+.f64 1 (-.f64 (pow.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 2) (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 2)) (-.f64 1 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 (+.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (hypot.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (neg.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4)) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 2) (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) (sqrt.f64 (neg.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) 4))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1) (fma.f64 (cos.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 2)) (cbrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (sqrt.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1)) 1)))))"]],"rules":[["egg-rr",47],["egg-rr",119],["egg-rr",25],["egg-rr",30]],"stop":[["node limit",1]],"time":82.010986328125,"type":"rewrite"},{"count":[[317,293]],"egraph":[[2,2471,3319,0.018803667],[1,681,3421,0.005271375],[0,207,3766,0.001081375]],"inputs":[["(-.f64 (exp.f64 re) 1)","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re)) 1)","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re))) 1)","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)))))) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (cos.f64 im) 1)","(-.f64 (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)) 1)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))) 1)","(-.f64 (+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(pow.f64 (-.f64 (exp.f64 re) 1) 2)","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)) (+.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)) (+.f64 (*.f64 (+.f64 (*.f64 -1/24 (pow.f64 (exp.f64 re) 2)) (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (*.f64 -1/720 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))))) (pow.f64 im 6)) (+.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4)))))","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (cos.f64 im) 1) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2)) (pow.f64 (-.f64 (cos.f64 im) 1) 2)))","(+.f64 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im))) (pow.f64 (cos.f64 im) 2))) (+.f64 (*.f64 2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2)) (pow.f64 (-.f64 (cos.f64 im) 1) 2))))","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(/.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (-.f64 2 (exp.f64 re)))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (pow.f64 im 2))) (/.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (-.f64 2 (exp.f64 re))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 -1/24 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re)))))) (pow.f64 im 4)) (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (pow.f64 im 2)))) (/.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (-.f64 2 (exp.f64 re))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 -1/24 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re)))))) (pow.f64 im 4)) (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (pow.f64 im 2)) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/24 (pow.f64 (exp.f64 re) 2)) (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (*.f64 -1/720 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 1/720 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 re) (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 -1/24 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re))))))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/24 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re))))))) (pow.f64 im 6))))) (/.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (-.f64 2 (exp.f64 re))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (-.f64 2 (cos.f64 im)))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (*.f64 (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)))) re)) (/.f64 (pow.f64 (-.f64 (cos.f64 im) 1) 2) (-.f64 2 (cos.f64 im))))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im)))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (pow.f64 re 2)) (*.f64 (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)))) re))) (/.f64 (pow.f64 (-.f64 (cos.f64 im) 1) 2) (-.f64 2 (cos.f64 im))))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im)))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (pow.f64 re 2)) (+.f64 (*.f64 (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)))) re) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/3 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im))) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im)))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))) (*.f64 -1/2 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im))))))) (pow.f64 re 3))))) (/.f64 (pow.f64 (-.f64 (cos.f64 im) 1) 2) (-.f64 2 (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(-.f64 (+.f64 1 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)))) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2))))) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (pow.f64 im 6) (+.f64 (*.f64 -1/24 (pow.f64 (exp.f64 re) 2)) (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (*.f64 -1/720 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))))))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)))))) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 (+.f64 (*.f64 -2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) 1) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 (+.f64 (*.f64 -2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 1 (*.f64 -1 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2))))) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 (+.f64 (*.f64 -2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2))) (*.f64 -1 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im))) (pow.f64 (cos.f64 im) 2))))))) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 re) 1)","(expm1.f64 re)","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (exp.f64 re)) 1)","(+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im))) (expm1.f64 re))","(fma.f64 (*.f64 (exp.f64 re) -1/2) (*.f64 im im) (expm1.f64 re))","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (exp.f64 re))) 1)","(+.f64 (fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re))) -1)","(+.f64 (fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (*.f64 (exp.f64 re) (*.f64 (pow.f64 im 4) 1/24))) (expm1.f64 re))","(+.f64 (expm1.f64 re) (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4)))))","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4))) (+.f64 (exp.f64 re) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)))))) 1)","(+.f64 (fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (+.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (exp.f64 re)) (*.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6))))) -1)","(+.f64 (fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (fma.f64 1/24 (*.f64 (exp.f64 re) (pow.f64 im 4)) (fma.f64 -1/720 (*.f64 (exp.f64 re) (pow.f64 im 6)) (exp.f64 re)))) -1)","(fma.f64 -1/2 (*.f64 (exp.f64 re) (*.f64 im im)) (+.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 -1/720 (pow.f64 im 6)))) (expm1.f64 re)))","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (cos.f64 im) 1)","(+.f64 (cos.f64 im) -1)","(-.f64 (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)) 1)","(+.f64 (fma.f64 (cos.f64 im) re (cos.f64 im)) -1)","(+.f64 (*.f64 (+.f64 re 1) (cos.f64 im)) -1)","(fma.f64 (+.f64 re 1) (cos.f64 im) -1)","(-.f64 (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im))) 1)","(+.f64 (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im))) -1)","(+.f64 (fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im))) -1)","(+.f64 (*.f64 (cos.f64 im) (+.f64 (+.f64 re 1) (*.f64 1/2 (*.f64 re re)))) -1)","(-.f64 (+.f64 (*.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 im) (pow.f64 re 2))) (+.f64 (*.f64 (cos.f64 im) re) (cos.f64 im)))) 1)","(+.f64 (fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 (cos.f64 im) (*.f64 re re)) (fma.f64 (cos.f64 im) re (cos.f64 im)))) -1)","(+.f64 (fma.f64 1/6 (*.f64 (cos.f64 im) (pow.f64 re 3)) (fma.f64 1/2 (*.f64 re (*.f64 re (cos.f64 im))) (*.f64 (+.f64 re 1) (cos.f64 im)))) -1)","(+.f64 (fma.f64 (+.f64 re 1) (cos.f64 im) -1) (*.f64 (cos.f64 im) (+.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 1/6 (pow.f64 re 3)))))","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1)","(fma.f64 (exp.f64 re) (cos.f64 im) -1)","(pow.f64 (-.f64 (exp.f64 re) 1) 2)","(pow.f64 (expm1.f64 re) 2)","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(fma.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (*.f64 im im) (pow.f64 (expm1.f64 re) 2))","(fma.f64 (*.f64 im im) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (pow.f64 (expm1.f64 re) 2))","(fma.f64 (*.f64 im im) (*.f64 (exp.f64 re) (*.f64 (expm1.f64 re) -1)) (pow.f64 (expm1.f64 re) 2))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)) (+.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4))))","(+.f64 (fma.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (*.f64 im im) (pow.f64 (expm1.f64 re) 2)) (*.f64 (pow.f64 im 4) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 1/4 (pow.f64 (exp.f64 re) 2))))))","(fma.f64 (*.f64 im im) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (fma.f64 (pow.f64 im 4) (+.f64 (*.f64 1/4 (pow.f64 (exp.f64 re) 2)) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1/12)) (pow.f64 (expm1.f64 re) 2)))","(fma.f64 (*.f64 im im) (*.f64 (exp.f64 re) (*.f64 (expm1.f64 re) -1)) (fma.f64 (pow.f64 im 4) (*.f64 (exp.f64 re) (+.f64 (*.f64 (exp.f64 re) 1/4) (*.f64 (expm1.f64 re) 1/12))) (pow.f64 (expm1.f64 re) 2)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)) (+.f64 (*.f64 (+.f64 (*.f64 -1/24 (pow.f64 (exp.f64 re) 2)) (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (*.f64 -1/720 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))))) (pow.f64 im 6)) (+.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4)))))","(fma.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (*.f64 im im) (fma.f64 (fma.f64 -1/24 (pow.f64 (exp.f64 re) 2) (*.f64 -1/720 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re))))) (pow.f64 im 6) (+.f64 (pow.f64 (expm1.f64 re) 2) (*.f64 (pow.f64 im 4) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 1/4 (pow.f64 (exp.f64 re) 2))))))))","(fma.f64 (*.f64 im im) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (fma.f64 (pow.f64 im 6) (fma.f64 (pow.f64 (exp.f64 re) 2) -1/24 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1/360)) (fma.f64 (pow.f64 im 4) (+.f64 (*.f64 1/4 (pow.f64 (exp.f64 re) 2)) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1/12)) (pow.f64 (expm1.f64 re) 2))))","(fma.f64 (*.f64 im im) (*.f64 (exp.f64 re) (*.f64 (expm1.f64 re) -1)) (fma.f64 (pow.f64 im 6) (*.f64 (exp.f64 re) (+.f64 (*.f64 (expm1.f64 re) -1/360) (*.f64 (exp.f64 re) -1/24))) (fma.f64 (pow.f64 im 4) (*.f64 (exp.f64 re) (+.f64 (*.f64 (exp.f64 re) 1/4) (*.f64 (expm1.f64 re) 1/12))) (pow.f64 (expm1.f64 re) 2))))","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (cos.f64 im) 1) 2)","(pow.f64 (+.f64 (cos.f64 im) -1) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(fma.f64 2 (*.f64 (+.f64 (cos.f64 im) -1) (*.f64 re (cos.f64 im))) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(fma.f64 2 (*.f64 re (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(*.f64 (+.f64 (cos.f64 im) -1) (+.f64 (+.f64 (cos.f64 im) -1) (*.f64 2 (*.f64 re (cos.f64 im)))))","(+.f64 (*.f64 2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2)) (pow.f64 (-.f64 (cos.f64 im) 1) 2)))","(fma.f64 2 (*.f64 (+.f64 (cos.f64 im) -1) (*.f64 re (cos.f64 im))) (fma.f64 (fma.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im) (pow.f64 (cos.f64 im) 2)) (*.f64 re re) (pow.f64 (+.f64 (cos.f64 im) -1) 2)))","(fma.f64 2 (*.f64 re (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) (fma.f64 (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im))) (pow.f64 (+.f64 (cos.f64 im) -1) 2)))","(fma.f64 2 (*.f64 re (-.f64 (pow.f64 (cos.f64 im) 2) (cos.f64 im))) (fma.f64 (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) (pow.f64 (+.f64 (cos.f64 im) -1) 2)))","(+.f64 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im))) (pow.f64 (cos.f64 im) 2))) (+.f64 (*.f64 2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2)) (pow.f64 (-.f64 (cos.f64 im) 1) 2))))","(fma.f64 (pow.f64 re 3) (fma.f64 1/3 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1)) (pow.f64 (cos.f64 im) 2)) (fma.f64 2 (*.f64 (+.f64 (cos.f64 im) -1) (*.f64 re (cos.f64 im))) (fma.f64 (fma.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im) (pow.f64 (cos.f64 im) 2)) (*.f64 re re) (pow.f64 (+.f64 (cos.f64 im) -1) 2))))","(fma.f64 (pow.f64 re 3) (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 (*.f64 1/3 (cos.f64 im)) -1/3))) (fma.f64 2 (*.f64 re (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) (fma.f64 (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im))) (pow.f64 (+.f64 (cos.f64 im) -1) 2))))","(+.f64 (*.f64 (*.f64 re re) (+.f64 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) (*.f64 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 -1/3 (*.f64 1/3 (cos.f64 im))))) re))) (*.f64 (+.f64 (cos.f64 im) -1) (+.f64 (+.f64 (cos.f64 im) -1) (*.f64 2 (*.f64 re (cos.f64 im))))))","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)","(pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)","(/.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (-.f64 2 (exp.f64 re)))","(/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (-.f64 2 (exp.f64 re)))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (pow.f64 im 2))) (/.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (-.f64 2 (exp.f64 re))))","(+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (-.f64 (*.f64 (*.f64 im im) (+.f64 (neg.f64 (/.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re)))))) (/.f64 (pow.f64 (expm1.f64 re) 2) (-.f64 2 (exp.f64 re)))))","(+.f64 (*.f64 (*.f64 im im) (fma.f64 -1 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re))))) (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (-.f64 2 (exp.f64 re))))","(+.f64 (*.f64 im (*.f64 im (+.f64 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))))) (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (-.f64 2 (exp.f64 re))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 -1/24 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re)))))) (pow.f64 im 4)) (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (pow.f64 im 2)))) (/.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (-.f64 2 (exp.f64 re))))","(-.f64 (fma.f64 (-.f64 (neg.f64 (/.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (fma.f64 -1/24 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))) (*.f64 1/2 (/.f64 (+.f64 (neg.f64 (/.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))))) (/.f64 (-.f64 2 (exp.f64 re)) (exp.f64 re)))))) (pow.f64 im 4) (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (*.f64 (*.f64 im im) (+.f64 (neg.f64 (/.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re)))))))) (/.f64 (pow.f64 (expm1.f64 re) 2) (-.f64 2 (exp.f64 re))))","(fma.f64 (pow.f64 im 4) (-.f64 (/.f64 (neg.f64 (+.f64 (*.f64 1/4 (pow.f64 (exp.f64 re) 2)) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1/12))) (-.f64 2 (exp.f64 re))) (fma.f64 1/2 (/.f64 (exp.f64 re) (/.f64 (-.f64 2 (exp.f64 re)) (fma.f64 -1 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))))) (/.f64 (*.f64 -1/24 (*.f64 (exp.f64 re) (-.f64 1 (pow.f64 (expm1.f64 re) 2)))) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (+.f64 (*.f64 (*.f64 im im) (fma.f64 -1 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re))))) (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (-.f64 2 (exp.f64 re)))))","(fma.f64 (pow.f64 im 4) (-.f64 (/.f64 (neg.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 (exp.f64 re) 1/4) (*.f64 (expm1.f64 re) 1/12)))) (-.f64 2 (exp.f64 re))) (fma.f64 1/2 (/.f64 (+.f64 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))) (+.f64 (/.f64 2 (exp.f64 re)) -1)) (*.f64 (/.f64 -1/24 (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (*.f64 (exp.f64 re) (-.f64 1 (pow.f64 (expm1.f64 re) 2)))))) (+.f64 (*.f64 im (*.f64 im (+.f64 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))))) (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (-.f64 2 (exp.f64 re)))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 -1/24 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re)))))) (pow.f64 im 4)) (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (pow.f64 im 2)) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/24 (pow.f64 (exp.f64 re) 2)) (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (*.f64 -1/720 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 1/720 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (exp.f64 re) (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (+.f64 (*.f64 -1/24 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re))))))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/24 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2)) (exp.f64 re)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (exp.f64 re)) (-.f64 2 (exp.f64 re))))))) (pow.f64 im 6))))) (/.f64 (pow.f64 (-.f64 (exp.f64 re) 1) 2) (-.f64 2 (exp.f64 re))))","(-.f64 (fma.f64 (-.f64 (neg.f64 (/.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (fma.f64 -1/24 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))) (*.f64 1/2 (/.f64 (+.f64 (neg.f64 (/.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))))) (/.f64 (-.f64 2 (exp.f64 re)) (exp.f64 re)))))) (pow.f64 im 4) (+.f64 (/.f64 1 (-.f64 2 (exp.f64 re))) (fma.f64 (+.f64 (neg.f64 (/.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))))) (*.f64 im im) (*.f64 (pow.f64 im 6) (-.f64 (neg.f64 (/.f64 (fma.f64 -1/24 (pow.f64 (exp.f64 re) 2) (*.f64 -1/720 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re))))) (-.f64 2 (exp.f64 re)))) (fma.f64 1/720 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))) (fma.f64 1/2 (/.f64 (exp.f64 re) (/.f64 (-.f64 2 (exp.f64 re)) (-.f64 (neg.f64 (/.f64 (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (-.f64 2 (exp.f64 re)))) (fma.f64 -1/24 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))) (*.f64 1/2 (/.f64 (+.f64 (neg.f64 (/.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))))) (/.f64 (-.f64 2 (exp.f64 re)) (exp.f64 re)))))))) (*.f64 -1/24 (/.f64 (+.f64 (neg.f64 (/.f64 (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))) (-.f64 2 (exp.f64 re)))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (exp.f64 re))))) (/.f64 (-.f64 2 (exp.f64 re)) (exp.f64 re))))))))))) (/.f64 (pow.f64 (expm1.f64 re) 2) (-.f64 2 (exp.f64 re))))","(fma.f64 (pow.f64 im 4) (-.f64 (/.f64 (neg.f64 (+.f64 (*.f64 1/4 (pow.f64 (exp.f64 re) 2)) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1/12))) (-.f64 2 (exp.f64 re))) (fma.f64 1/2 (/.f64 (exp.f64 re) (/.f64 (-.f64 2 (exp.f64 re)) (fma.f64 -1 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))))) (/.f64 (*.f64 -1/24 (*.f64 (exp.f64 re) (-.f64 1 (pow.f64 (expm1.f64 re) 2)))) (pow.f64 (-.f64 2 (exp.f64 re)) 2)))) (+.f64 (fma.f64 (*.f64 im im) (fma.f64 -1 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))) (*.f64 (pow.f64 im 6) (-.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 (exp.f64 re) 2) -1/24 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1/360))) (-.f64 2 (exp.f64 re))) (fma.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)) 1/720 (fma.f64 -1/24 (/.f64 (exp.f64 re) (/.f64 (-.f64 2 (exp.f64 re)) (fma.f64 -1 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))))) (/.f64 (*.f64 (*.f64 1/2 (exp.f64 re)) (-.f64 (/.f64 (neg.f64 (+.f64 (*.f64 1/4 (pow.f64 (exp.f64 re) 2)) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1/12))) (-.f64 2 (exp.f64 re))) (fma.f64 1/2 (/.f64 (exp.f64 re) (/.f64 (-.f64 2 (exp.f64 re)) (fma.f64 -1 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))))) (/.f64 (*.f64 -1/24 (*.f64 (exp.f64 re) (-.f64 1 (pow.f64 (expm1.f64 re) 2)))) (pow.f64 (-.f64 2 (exp.f64 re)) 2))))) (-.f64 2 (exp.f64 re)))))))) (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (-.f64 2 (exp.f64 re)))))","(fma.f64 (pow.f64 im 4) (-.f64 (/.f64 (neg.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 (exp.f64 re) 1/4) (*.f64 (expm1.f64 re) 1/12)))) (-.f64 2 (exp.f64 re))) (fma.f64 1/2 (/.f64 (+.f64 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))) (+.f64 (/.f64 2 (exp.f64 re)) -1)) (*.f64 (/.f64 -1/24 (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (*.f64 (exp.f64 re) (-.f64 1 (pow.f64 (expm1.f64 re) 2)))))) (+.f64 (fma.f64 (pow.f64 im 6) (-.f64 (-.f64 (/.f64 (*.f64 (exp.f64 re) -1/720) (/.f64 (pow.f64 (-.f64 2 (exp.f64 re)) 2) (-.f64 1 (pow.f64 (expm1.f64 re) 2)))) (fma.f64 -1/24 (/.f64 (+.f64 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))) (+.f64 (/.f64 2 (exp.f64 re)) -1)) (/.f64 (*.f64 1/2 (-.f64 (/.f64 (neg.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 (exp.f64 re) 1/4) (*.f64 (expm1.f64 re) 1/12)))) (-.f64 2 (exp.f64 re))) (fma.f64 1/2 (/.f64 (+.f64 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re)))) (+.f64 (/.f64 2 (exp.f64 re)) -1)) (*.f64 (/.f64 -1/24 (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (*.f64 (exp.f64 re) (-.f64 1 (pow.f64 (expm1.f64 re) 2))))))) (+.f64 (/.f64 2 (exp.f64 re)) -1)))) (/.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 (expm1.f64 re) -1/360) (*.f64 (exp.f64 re) -1/24))) (-.f64 2 (exp.f64 re)))) (*.f64 im (*.f64 im (+.f64 (/.f64 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1) (-.f64 2 (exp.f64 re))) (*.f64 -1/2 (*.f64 (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (pow.f64 (-.f64 2 (exp.f64 re)) 2)) (exp.f64 re))))))) (/.f64 (-.f64 1 (pow.f64 (expm1.f64 re) 2)) (-.f64 2 (exp.f64 re)))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (-.f64 2 (cos.f64 im)))","(/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (-.f64 2 (cos.f64 im)))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (*.f64 (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)))) re)) (/.f64 (pow.f64 (-.f64 (cos.f64 im) 1) 2) (-.f64 2 (cos.f64 im))))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (*.f64 re (-.f64 (*.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im))))))) (/.f64 (pow.f64 (+.f64 (cos.f64 im) -1) 2) (-.f64 2 (cos.f64 im))))","(+.f64 (*.f64 re (fma.f64 -2 (*.f64 (/.f64 (+.f64 (cos.f64 im) -1) (-.f64 2 (cos.f64 im))) (cos.f64 im)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)))) (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (-.f64 2 (cos.f64 im))))","(+.f64 (*.f64 re (fma.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)))) (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (-.f64 2 (cos.f64 im))))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im)))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (pow.f64 re 2)) (*.f64 (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)))) re))) (/.f64 (pow.f64 (-.f64 (cos.f64 im) 1) 2) (-.f64 2 (cos.f64 im))))","(+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (-.f64 (fma.f64 (-.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (fma.f64 -1 (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (-.f64 (*.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im))))))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im)))))) (*.f64 re re) (*.f64 re (-.f64 (*.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im))))))) (/.f64 (pow.f64 (+.f64 (cos.f64 im) -1) 2) (-.f64 2 (cos.f64 im)))))","(+.f64 (fma.f64 re (fma.f64 -2 (*.f64 (/.f64 (+.f64 (cos.f64 im) -1) (-.f64 2 (cos.f64 im))) (cos.f64 im)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im))) (*.f64 (*.f64 re re) (-.f64 (/.f64 (neg.f64 (*.f64 (cos.f64 im) (+.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im)))) (-.f64 2 (cos.f64 im))) (-.f64 (/.f64 -1/2 (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (*.f64 (cos.f64 im) (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))))) (*.f64 (/.f64 (cos.f64 im) (-.f64 2 (cos.f64 im))) (fma.f64 -2 (*.f64 (/.f64 (+.f64 (cos.f64 im) -1) (-.f64 2 (cos.f64 im))) (cos.f64 im)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)))))))) (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (-.f64 2 (cos.f64 im))))","(+.f64 (*.f64 re (+.f64 (fma.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im))) (*.f64 (-.f64 (+.f64 (/.f64 (fma.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im))) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (/.f64 (*.f64 1/2 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im)))) (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (+.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))))) re))) (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (-.f64 2 (cos.f64 im))))","(-.f64 (+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (+.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im)))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (pow.f64 re 2)) (+.f64 (*.f64 (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)))) re) (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/3 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im))) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im)))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))) (*.f64 -1/2 (/.f64 (*.f64 (cos.f64 im) (-.f64 (*.f64 -2 (/.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (-.f64 2 (cos.f64 im)))) (*.f64 -1 (/.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2)) (cos.f64 im)) (pow.f64 (-.f64 2 (cos.f64 im)) 2))))) (-.f64 2 (cos.f64 im))))))) (pow.f64 re 3))))) (/.f64 (pow.f64 (-.f64 (cos.f64 im) 1) 2) (-.f64 2 (cos.f64 im))))","(+.f64 (/.f64 1 (-.f64 2 (cos.f64 im))) (-.f64 (fma.f64 (-.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (fma.f64 -1 (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (-.f64 (*.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im))))))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im)))))) (*.f64 re re) (fma.f64 (-.f64 (*.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im))))) re (*.f64 (pow.f64 re 3) (-.f64 (neg.f64 (/.f64 (fma.f64 1/3 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1)) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (fma.f64 -1 (/.f64 (-.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im) (pow.f64 (cos.f64 im) 2)) (-.f64 2 (cos.f64 im)))) (fma.f64 -1 (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (-.f64 (*.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im))))))) (*.f64 -1/2 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im)))))) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im))) (fma.f64 -1/6 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im))) (*.f64 -1/2 (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (-.f64 (*.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im)))))))))))))) (/.f64 (pow.f64 (+.f64 (cos.f64 im) -1) 2) (-.f64 2 (cos.f64 im)))))","(+.f64 (fma.f64 (*.f64 re re) (-.f64 (/.f64 (neg.f64 (*.f64 (cos.f64 im) (+.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im)))) (-.f64 2 (cos.f64 im))) (-.f64 (/.f64 -1/2 (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (*.f64 (cos.f64 im) (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))))) (*.f64 (/.f64 (cos.f64 im) (-.f64 2 (cos.f64 im))) (fma.f64 -2 (*.f64 (/.f64 (+.f64 (cos.f64 im) -1) (-.f64 2 (cos.f64 im))) (cos.f64 im)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)))))) (fma.f64 re (fma.f64 -2 (*.f64 (/.f64 (+.f64 (cos.f64 im) -1) (-.f64 2 (cos.f64 im))) (cos.f64 im)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im))) (*.f64 (pow.f64 re 3) (-.f64 (/.f64 (neg.f64 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 (*.f64 1/3 (cos.f64 im)) -1/3)))) (-.f64 2 (cos.f64 im))) (-.f64 (fma.f64 -1/2 (*.f64 (/.f64 (cos.f64 im) (-.f64 2 (cos.f64 im))) (fma.f64 -2 (*.f64 (/.f64 (+.f64 (cos.f64 im) -1) (-.f64 2 (cos.f64 im))) (cos.f64 im)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)))) (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)) -1/6)) (/.f64 (-.f64 (/.f64 (neg.f64 (*.f64 (cos.f64 im) (+.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im)))) (-.f64 2 (cos.f64 im))) (-.f64 (/.f64 -1/2 (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (*.f64 (cos.f64 im) (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))))) (*.f64 (/.f64 (cos.f64 im) (-.f64 2 (cos.f64 im))) (fma.f64 -2 (*.f64 (/.f64 (+.f64 (cos.f64 im) -1) (-.f64 2 (cos.f64 im))) (cos.f64 im)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)))))) (/.f64 (-.f64 2 (cos.f64 im)) (cos.f64 im)))))))) (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (-.f64 2 (cos.f64 im))))","(+.f64 (fma.f64 (*.f64 re re) (-.f64 (+.f64 (/.f64 (fma.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im))) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (/.f64 (*.f64 1/2 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im)))) (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (+.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))))) (fma.f64 (pow.f64 re 3) (-.f64 (-.f64 (/.f64 (-.f64 (+.f64 (/.f64 (fma.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im))) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (/.f64 (*.f64 1/2 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))) (/.f64 (pow.f64 (-.f64 2 (cos.f64 im)) 2) (cos.f64 im)))) (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (+.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))))) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (fma.f64 -1/2 (/.f64 (fma.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im))) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (/.f64 (*.f64 (*.f64 -1/6 (cos.f64 im)) (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))) (pow.f64 (-.f64 2 (cos.f64 im)) 2)))) (/.f64 (cos.f64 im) (/.f64 (-.f64 2 (cos.f64 im)) (+.f64 (cos.f64 im) (+.f64 -1/3 (*.f64 1/3 (cos.f64 im))))))) (*.f64 re (fma.f64 -2 (/.f64 (+.f64 (cos.f64 im) -1) (+.f64 (/.f64 2 (cos.f64 im)) -1)) (*.f64 (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (pow.f64 (-.f64 2 (cos.f64 im)) 2)) (cos.f64 im)))))) (/.f64 (-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2)) (-.f64 2 (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(/.f64 (-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2)) (-.f64 2 (*.f64 (exp.f64 re) (cos.f64 im))))","(-.f64 1 (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(-.f64 1 (pow.f64 (expm1.f64 re) 2))","(-.f64 (+.f64 1 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)))) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(-.f64 (+.f64 1 (neg.f64 (*.f64 (*.f64 im im) (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re))))))) (pow.f64 (expm1.f64 re) 2))","(-.f64 (-.f64 1 (*.f64 im (*.f64 im (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1)))) (pow.f64 (expm1.f64 re) 2))","(-.f64 1 (fma.f64 (*.f64 im im) (*.f64 (exp.f64 re) (*.f64 (expm1.f64 re) -1)) (pow.f64 (expm1.f64 re) 2)))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2))))) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(+.f64 1 (-.f64 (fma.f64 -1 (*.f64 (pow.f64 im 4) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 1/4 (pow.f64 (exp.f64 re) 2))))) (neg.f64 (*.f64 (*.f64 im im) (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re))))))) (pow.f64 (expm1.f64 re) 2)))","(-.f64 (fma.f64 -1 (fma.f64 (pow.f64 im 4) (+.f64 (*.f64 1/4 (pow.f64 (exp.f64 re) 2)) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1/12)) (*.f64 im (*.f64 im (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1)))) 1) (pow.f64 (expm1.f64 re) 2))","(+.f64 1 (-.f64 (*.f64 (*.f64 im im) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1)) (fma.f64 (pow.f64 im 4) (*.f64 (exp.f64 re) (+.f64 (*.f64 (exp.f64 re) 1/4) (*.f64 (expm1.f64 re) 1/12))) (pow.f64 (expm1.f64 re) 2))))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (pow.f64 im 6) (+.f64 (*.f64 -1/24 (pow.f64 (exp.f64 re) 2)) (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (*.f64 -1/720 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))))))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/24 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re))) (+.f64 (*.f64 1/24 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 1/4 (pow.f64 (exp.f64 re) 2)))) (pow.f64 im 4))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/2 (*.f64 (exp.f64 re) (-.f64 (exp.f64 re) 1))) (*.f64 -1/2 (*.f64 (-.f64 (exp.f64 re) 1) (exp.f64 re)))) (pow.f64 im 2)))))) (pow.f64 (-.f64 (exp.f64 re) 1) 2))","(-.f64 (+.f64 1 (fma.f64 -1 (*.f64 (pow.f64 im 6) (fma.f64 -1/24 (pow.f64 (exp.f64 re) 2) (*.f64 -1/720 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re)))))) (fma.f64 -1 (*.f64 (pow.f64 im 4) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (fma.f64 1/24 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 1/4 (pow.f64 (exp.f64 re) 2))))) (neg.f64 (*.f64 (*.f64 im im) (*.f64 -1/2 (+.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) (*.f64 (exp.f64 re) (expm1.f64 re))))))))) (pow.f64 (expm1.f64 re) 2))","(+.f64 1 (-.f64 (-.f64 (neg.f64 (fma.f64 (pow.f64 im 4) (+.f64 (*.f64 1/4 (pow.f64 (exp.f64 re) 2)) (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) 1/12)) (*.f64 im (*.f64 im (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1))))) (*.f64 (pow.f64 im 6) (fma.f64 (pow.f64 (exp.f64 re) 2) -1/24 (*.f64 (*.f64 (exp.f64 re) (expm1.f64 re)) -1/360)))) (pow.f64 (expm1.f64 re) 2)))","(+.f64 1 (*.f64 -1 (fma.f64 (*.f64 im im) (*.f64 (exp.f64 re) (*.f64 (expm1.f64 re) -1)) (fma.f64 (pow.f64 im 6) (*.f64 (exp.f64 re) (+.f64 (*.f64 (expm1.f64 re) -1/360) (*.f64 (exp.f64 re) -1/24))) (fma.f64 (pow.f64 im 4) (*.f64 (exp.f64 re) (+.f64 (*.f64 (exp.f64 re) 1/4) (*.f64 (expm1.f64 re) 1/12))) (pow.f64 (expm1.f64 re) 2))))))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 1 (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(-.f64 (+.f64 (*.f64 -2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) 1) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 (fma.f64 -2 (*.f64 (+.f64 (cos.f64 im) -1) (*.f64 re (cos.f64 im))) 1) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(-.f64 (fma.f64 (+.f64 (*.f64 (cos.f64 im) -2) 2) (*.f64 re (cos.f64 im)) 1) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(+.f64 1 (*.f64 (+.f64 (cos.f64 im) -1) (-.f64 (*.f64 -2 (*.f64 re (cos.f64 im))) (+.f64 (cos.f64 im) -1))))","(-.f64 (+.f64 (*.f64 -2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 1 (*.f64 -1 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2))))) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 (+.f64 (fma.f64 -2 (*.f64 (+.f64 (cos.f64 im) -1) (*.f64 re (cos.f64 im))) 1) (neg.f64 (*.f64 (*.f64 re re) (fma.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im) (pow.f64 (cos.f64 im) 2))))) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(-.f64 (-.f64 (fma.f64 (+.f64 (*.f64 (cos.f64 im) -2) 2) (*.f64 re (cos.f64 im)) 1) (*.f64 (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im))))) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(-.f64 (fma.f64 (*.f64 re (-.f64 (pow.f64 (cos.f64 im) 2) (cos.f64 im))) -2 1) (fma.f64 (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) (pow.f64 (+.f64 (cos.f64 im) -1) 2)))","(-.f64 (+.f64 (*.f64 -2 (*.f64 (-.f64 (cos.f64 im) 1) (*.f64 (cos.f64 im) re))) (+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im)) (pow.f64 (cos.f64 im) 2)) (pow.f64 re 2))) (*.f64 -1 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (cos.f64 im) 1) (cos.f64 im))) (pow.f64 (cos.f64 im) 2))))))) (pow.f64 (-.f64 (cos.f64 im) 1) 2))","(-.f64 (+.f64 (fma.f64 -2 (*.f64 (+.f64 (cos.f64 im) -1) (*.f64 re (cos.f64 im))) 1) (fma.f64 -1 (*.f64 (*.f64 re re) (fma.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im) (pow.f64 (cos.f64 im) 2))) (neg.f64 (*.f64 (pow.f64 re 3) (fma.f64 1/3 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1)) (pow.f64 (cos.f64 im) 2)))))) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(-.f64 (fma.f64 (*.f64 re (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) -2 (fma.f64 -1 (fma.f64 (*.f64 re re) (*.f64 (cos.f64 im) (+.f64 (+.f64 (cos.f64 im) -1) (cos.f64 im))) (*.f64 (pow.f64 re 3) (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 (*.f64 1/3 (cos.f64 im)) -1/3))))) 1)) (pow.f64 (+.f64 (cos.f64 im) -1) 2))","(+.f64 (-.f64 1 (*.f64 (*.f64 re re) (+.f64 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 (cos.f64 im) -1))) (*.f64 (*.f64 (cos.f64 im) (+.f64 (cos.f64 im) (+.f64 -1/3 (*.f64 1/3 (cos.f64 im))))) re)))) (*.f64 (+.f64 (cos.f64 im) -1) (-.f64 (*.f64 -2 (*.f64 re (cos.f64 im))) (+.f64 (cos.f64 im) -1))))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))","(-.f64 1 (pow.f64 (-.f64 (*.f64 (exp.f64 re) (cos.f64 im)) 1) 2))","(-.f64 1 (pow.f64 (fma.f64 (exp.f64 re) (cos.f64 im) -1) 2))"]],"stop":[["node limit",1]],"time":59.870849609375,"type":"simplify"},{"compiler":[[18420,10964]],"time":175.634033203125,"type":"eval"},{"alts":[["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","done",0.28080390085845713],["(*.f64 (exp.f64 re) (cos.f64 im))","done",0.0078125]],"compiler":[[26,16],[7,5]],"count":[[391,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[389,0],"picked":[1,1]}],"min-error":[0],"time":195.282958984375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["re",0.0078125,1],["im",0.0078125,1],["(*.f64 (exp.f64 re) (cos.f64 im))",0.0078125,1],["(exp.f64 re)",0.0078125,1],["(cos.f64 im)",0.0078125,1]],"compiler":[[3,2],[3,2],[7,5],[4,3],[4,3],[48,26]],"count":[[4,1]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (fma.f64 (cos.f64 im) (exp.f64 re) -1) (fma.f64 (cos.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (cos.f64 im) (exp.f64 re) -1)))","(*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (cos.f64 im)) 3))","(-.f64 (+.f64 1 (*.f64 (cos.f64 im) (exp.f64 re))) 1)","(*.f64 (exp.f64 re) (cos.f64 im))"]],"link":["."],"name":["math.exp on complex, real part"],"oracle":[0.40256778016353134],"outputs":[["(*.f64 (exp.f64 re) (cos.f64 im))"]],"time":14.739990234375,"times":[["re",3.1650390625],["im",3.288818359375],["(*.f64 (exp.f64 re) (cos.f64 im))",2.621826171875],["(exp.f64 re)",1.636962890625],["(cos.f64 im)",2.956787109375]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,7,8,2.7791e-5],[0,6,8,1.675e-5]],"inputs":[["(*.f64 (exp.f64 re) (cos.f64 im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 re) (cos.f64 im))"]],"stop":[["done",1],["saturated",1]],"time":8.274169921875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":9.279052734375,"type":"end"}]
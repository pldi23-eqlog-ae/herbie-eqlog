[{"compiler":[[19,10]],"method":["search"],"sampling":[[12,0.397854136256683,0.600681735132639,0.0014641286106780171],[11,0.3276445827996213,0.6708912885897007,0.0014641286106780171],[10,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[9,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":115.888916015625,"type":"analyze"},{"outcomes":[["body",512,"invalid",22.602783203125,299],["body",256,"invalid",74.947509765625,1692],["body",1024,"invalid",26.512451171875,240],["body",512,"valid",41.67529296875,535],["body",1024,"valid",102.87158203125,910],["body",2048,"valid",71.908447265625,498],["body",256,"valid",284.84375,6313]],"time":636.398193359375,"type":"sample"},{"compiler":[[18,9]],"egraph":[[0,3,3,5.625e-6],[5,6593,28,0.029127542000000003],[4,3232,28,0.017489584000000002],[3,869,28,0.007056042],[2,303,28,0.0018905],[1,88,40,0.0005585],[0,24,88,0.000121667]],"inputs":[["0","1","2"],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))","(+.f64 (-.f64 (-.f64 (*.f64 y x) (*.f64 x z)) (*.f64 x x)) (*.f64 x x))","(+.f64 (-.f64 (-.f64 (*.f64 z y) (*.f64 y x)) (*.f64 y y)) (*.f64 y y))","(+.f64 (-.f64 (-.f64 (*.f64 x z) (*.f64 z y)) (*.f64 z z)) (*.f64 z z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))","(+.f64 (*.f64 y y) (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)))","(+.f64 (*.f64 y (-.f64 x z)) 0)","(*.f64 y (-.f64 x z))","(+.f64 (-.f64 (-.f64 (*.f64 y x) (*.f64 x z)) (*.f64 x x)) (*.f64 x x))","(+.f64 (*.f64 x x) (-.f64 (*.f64 x y) (+.f64 (*.f64 x z) (*.f64 x x))))","(+.f64 (*.f64 x (-.f64 y z)) 0)","(*.f64 x (-.f64 y z))","(+.f64 (-.f64 (-.f64 (*.f64 z y) (*.f64 y x)) (*.f64 y y)) (*.f64 y y))","(+.f64 (*.f64 y y) (-.f64 (*.f64 y z) (+.f64 (*.f64 x y) (*.f64 y y))))","(+.f64 (*.f64 y (-.f64 z x)) 0)","(*.f64 y (-.f64 z x))","(+.f64 (-.f64 (-.f64 (*.f64 x z) (*.f64 z y)) (*.f64 z z)) (*.f64 z z))","(+.f64 (*.f64 z z) (-.f64 (*.f64 x z) (+.f64 (*.f64 y z) (*.f64 z z))))","(+.f64 (*.f64 z (-.f64 x y)) 0)","(*.f64 z (-.f64 x y))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":52.19287109375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[14,7821,7,0.095465373],[13,7821,7,0.08622212300000001],[12,7617,7,0.07830454],[11,7407,7,0.07044054000000001],[10,6152,7,0.057295332000000004],[9,6102,7,0.044595957000000006],[8,5979,7,0.037729041000000005],[7,5694,7,0.031179083000000003],[6,5039,7,0.024915333],[5,3530,7,0.017329666],[4,799,7,0.008665125],[3,252,7,0.001921416],[2,89,7,0.000620166],[1,27,10,0.000211041],[0,10,22,5.7e-5]],"inputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))","(+.f64 (*.f64 y y) (-.f64 (*.f64 x y) (+.f64 (*.f64 y z) (*.f64 y y))))","(+.f64 (*.f64 y (-.f64 x z)) 0)","(*.f64 y (-.f64 x z))"]],"stop":[["node limit",1]],"time":107.6279296875,"type":"simplify"},{"compiler":[[23,11]],"time":0.32421875,"type":"eval"},{"alts":[["(*.f64 y (-.f64 x z))","next",0.00390625]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.744873046875,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 y (-.f64 x z))",0.00390625,true]],"time":2.993896484375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 y (-.f64 x z))","z","-inf",0.258056640625],["(*.f64 y (-.f64 x z))","z","inf",0.281982421875],["(*.f64 y (-.f64 x z))","z","0",0.248779296875],["(*.f64 y (-.f64 x z))","x","-inf",0.469970703125],["(*.f64 y (-.f64 x z))","x","inf",0.333984375],["(*.f64 y (-.f64 x z))","x","0",0.248046875],["(*.f64 y (-.f64 x z))","y","-inf",0.352783203125],["(*.f64 y (-.f64 x z))","y","inf",0.342041015625],["(*.f64 y (-.f64 x z))","y","0",0.43310546875]],"time":3.071044921875,"type":"series"},{"count":[[1,19]],"egraph":[[2,1784,7,0.017387792],[1,129,7,0.002326958],[0,6,7,0.000143458]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) (pow.f64 z 3)) y) (fma.f64 x x (*.f64 z (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 z z)) y) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (pow.f64 x 3) (pow.f64 z 3))) (fma.f64 x x (*.f64 z (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (*.f64 x x) (*.f64 z z))) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (-.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (-.f64 x z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 x z) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (-.f64 x z))))))))"]],"rules":[["egg-rr",19]],"stop":[["node limit",1]],"time":34.205078125,"type":"rewrite"},{"count":[[43,25]],"egraph":[[10,744,156,0.00918196],[9,730,156,0.007620334999999999],[8,576,156,0.006044750999999999],[7,410,156,0.003990084],[6,254,156,0.002425793],[5,138,156,0.0013186259999999998],[4,86,156,0.0007541259999999999],[3,58,156,0.000464792],[2,35,156,0.000285584],[1,18,210,0.000151167],[0,10,210,6.2917e-5]],"inputs":[["(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))"]],"stop":[["saturated",1]],"time":23.7099609375,"type":"simplify"},{"compiler":[[221,88]],"time":2.5830078125,"type":"eval"},{"alts":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","next",0.0078125],["(*.f64 y (-.f64 x z))","done",0.00390625]],"compiler":[[11,7],[8,5],[11,7]],"count":[[26,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[25,1],"picked":[1,1]}],"min-error":[0],"time":4.130126953125,"type":"prune"},{"compiler":[[23,7]],"locations":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))",0.0078125,true]],"time":4.66796875,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","z","-inf",0.18701171875],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","z","inf",0.247802734375],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","z","0",0.31689453125],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","y","-inf",0.296142578125],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","y","inf",0.5478515625],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","y","0",0.593017578125],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","x","-inf",0.23388671875],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","x","inf",0.5400390625],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","x","0",0.40380859375]],"time":3.475830078125,"type":"series"},{"count":[[1,44]],"egraph":[[2,2563,7,0.019758500000000002],[1,176,7,0.003203375],[0,8,9,0.000185125]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (+.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x y) 2) (*.f64 y (+.f64 x z))) (/.f64 (pow.f64 (*.f64 y z) 2) (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (/.f64 1 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) (pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 2) (cbrt.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y (+.f64 x z))) (sqrt.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (/.f64 1 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 y z))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z))) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y (+.f64 x z)) (pow.f64 (*.f64 y (+.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (+.f64 (pow.f64 (*.f64 y z) 2) (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 (*.f64 x y) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3))) (neg.f64 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2)) (neg.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (*.f64 x y) 2)) (-.f64 (*.f64 y z) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (+.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (cbrt.f64 (*.f64 y z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 y z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 y z))))))"]],"rules":[["egg-rr",44]],"stop":[["node limit",1]],"time":37.9111328125,"type":"rewrite"},{"count":[[80,52]],"egraph":[[7,650,240,0.007956625],[6,609,240,0.006424667],[5,494,240,0.004749209000000001],[4,310,240,0.0027367090000000004],[3,174,240,0.001466501],[2,100,240,0.000709959],[1,48,240,0.000323376],[0,17,330,0.000103209]],"inputs":[["(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))"]],"stop":[["saturated",1]],"time":23.18603515625,"type":"simplify"},{"compiler":[[616,201]],"time":5.705810546875,"type":"eval"},{"alts":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","done",0.0078125],["(*.f64 y (-.f64 x z))","done",0.00390625]],"compiler":[[11,7],[8,5]],"count":[[54,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[52,0],"picked":[1,1]}],"min-error":[0],"time":7.774169921875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[18,9],[31,14]],"count":[[3,1]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","(*.f64 y (-.f64 x z))","(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, B"],"oracle":[18.75111491369989],"outputs":[["(*.f64 y (-.f64 x z))"]],"time":13.140869140625,"times":[["x",3.121826171875],["y",3.2060546875],["z",3.138916015625],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))",2.903076171875]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[4,17,7,9.233400000000001e-5],[3,16,7,7.333400000000001e-5],[2,14,7,5.420900000000001e-5],[1,9,7,3.5875000000000005e-5],[0,6,7,1.5625e-5]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 x z))"]],"stop":[["done",1],["saturated",1]],"time":8.336181640625,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":7.52783203125,"type":"end"}]
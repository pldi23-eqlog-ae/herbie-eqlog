[{"compiler":[[14,10]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09853651490993798,0.10341527522541583],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.19121937546879053,0.08292748499661684],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.35902413353323936,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":29.343017578125,"type":"analyze"},{"outcomes":[["body",256,"invalid",8.881591796875,237],["body",512,"valid",3.208984375,47],["body",1024,"valid",8.969482421875,90],["body",256,"valid",308.203857421875,8119]],"time":338.11083984375,"type":"sample"},{"compiler":[[13,9]],"egraph":[[0,2,2,2.667e-6],[5,151,14,0.001340792],[4,149,14,0.0010698749999999999],[3,139,14,0.0007943749999999999],[2,88,14,0.0005055],[1,36,20,0.000223167],[0,15,26,7.5292e-5]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))","(+.f64 (+.f64 (*.f64 d2 10) (*.f64 d2 d1)) (*.f64 d2 20))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))","(+.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))","(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (+.f64 (*.f64 d2 10) (*.f64 d2 d1)) (*.f64 d2 20))","(+.f64 (*.f64 d2 (+.f64 10 d1)) (*.f64 d2 20))","(*.f64 d2 (+.f64 (+.f64 d1 10) 20))","(*.f64 d2 (+.f64 d1 30))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":25.35107421875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,79,7,0.0007718749999999999],[4,78,7,0.0006152499999999999],[3,73,7,0.00046445799999999995],[2,46,7,0.000306208],[1,20,10,0.00014425],[0,10,13,5.3041e-5]],"inputs":[["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))","(+.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))","(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","(*.f64 d1 (+.f64 d2 30))"]],"stop":[["saturated",1]],"time":12.60791015625,"type":"simplify"},{"compiler":[[18,12]],"time":0.35400390625,"type":"eval"},{"alts":[["(*.f64 d1 (+.f64 d2 30))","next",0.0234375]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0234375],"time":1.47314453125,"type":"prune"},{"compiler":[[13,8]],"locations":[["(*.f64 d1 (+.f64 d2 30))",0.00390625,true]],"time":3.431884765625,"type":"localize"},{"count":[[1,20]],"series":[["(*.f64 d1 (+.f64 d2 30))","d2","-inf",0.344970703125],["(*.f64 d1 (+.f64 d2 30))","d2","inf",0.5439453125],["(*.f64 d1 (+.f64 d2 30))","d2","0",0.2578125],["(*.f64 d1 (+.f64 d2 30))","d1","-inf",0.43310546875],["(*.f64 d1 (+.f64 d2 30))","d1","inf",0.38720703125],["(*.f64 d1 (+.f64 d2 30))","d1","0",0.52099609375]],"time":2.625,"type":"series"},{"count":[[1,24]],"egraph":[[2,1827,7,0.022209958000000002],[1,136,7,0.0030205410000000003],[0,6,7,0.000236875]],"inputs":[["(*.f64 d1 (+.f64 d2 30))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 30))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 30) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 d2) 1) (*.f64 (*.f64 d1 30) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 d1 (+.f64 d2 30))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 30) 3)) (+.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d2)) (-.f64 (*.f64 (*.f64 d1 30) (*.f64 d1 30)) (*.f64 (*.f64 d1 d2) (*.f64 d1 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d2)) (*.f64 (*.f64 d1 30) (*.f64 d1 30))) (-.f64 (*.f64 d1 d2) (*.f64 d1 30)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 27000 (pow.f64 d2 3)) d1) (fma.f64 d2 d2 (-.f64 900 (*.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 27000 (pow.f64 d2 3))) (fma.f64 d2 d2 (-.f64 900 (*.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (fma.f64 d2 d2 -900)) (+.f64 d2 -30))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 d2 30)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 d1) (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 d1 3) (pow.f64 (+.f64 d2 30) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 d2 30) 3) (pow.f64 d1 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d2 (*.f64 d1 30))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d2 d1 (*.f64 d1 30))))))"]],"rules":[["egg-rr",24]],"stop":[["node limit",1]],"time":40.984130859375,"type":"rewrite"},{"count":[[44,30]],"egraph":[[2,20,131,0.000194625],[1,17,131,0.000132292],[0,9,131,6.5125e-5]],"inputs":[["(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 30 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 30 d1)","(*.f64 d1 30)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 30 d2))"]],"stop":[["saturated",1]],"time":13.240966796875,"type":"simplify"},{"compiler":[[278,175]],"time":3.995849609375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","next",0.7417528321270289],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","fresh",13.9375],["(*.f64 d1 (+.f64 d2 30))","done",0.0234375]],"compiler":[[10,8],[12,8],[7,5],[10,8],[12,8]],"count":[[31,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[30,2],"picked":[1,1]}],"min-error":[0.0078125],"time":5.9111328125,"type":"prune"},{"compiler":[[28,19]],"locations":[["(*.f64 d1 (+.f64 d2 30))",0.00390625,false],["(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))",0.12109375,true],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)",0.7410890625901451,true]],"time":7.93896484375,"type":"localize"},{"count":[[2,8]],"series":[["(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))","d2","-inf",0.291015625],["(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))","d2","inf",0.263916015625],["(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))","d2","0",0.5400390625],["(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))","d1","-inf",0.3388671875],["(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))","d1","inf",0.634033203125],["(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))","d1","0",0.238037109375],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","d2","-inf",0.489013671875],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","d2","inf",0.578857421875],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","d2","0",2.7900390625],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","d1","-inf",1.321044921875],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","d1","inf",0.590087890625],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","d1","0",0.801025390625]],"time":9.14404296875,"type":"series"},{"count":[[2,65]],"egraph":[[2,2323,16,0.025165833],[1,204,16,0.003833792],[0,9,16,0.00032675]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","(cbrt.f64 (*.f64 d1 (+.f64 d2 30)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 30))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 30) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 d2) 1) (*.f64 (*.f64 d1 30) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 d1 (+.f64 d2 30))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 d2 30))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 d2 30) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 d2 30)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2) (cbrt.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 d2 30)) 2) (*.f64 (cbrt.f64 (+.f64 d2 30)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (+.f64 d2 30)) (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 d1) 2) (*.f64 (cbrt.f64 d1) (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))) (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 d2 30)) (*.f64 (sqrt.f64 (+.f64 d2 30)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 d1) (*.f64 (sqrt.f64 d1) (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 30))) (sqrt.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6) (*.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6) (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)) 3) (cbrt.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6) 3) (pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (pow.f64 (cbrt.f64 (+.f64 d2 30)) 2)) (cbrt.f64 (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (sqrt.f64 (+.f64 d2 30))) (sqrt.f64 (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 d2 30) (pow.f64 (cbrt.f64 d1) 2)) (cbrt.f64 d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 d2 30) (sqrt.f64 d1)) (sqrt.f64 d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2) 1) (cbrt.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2) (cbrt.f64 d1)) (cbrt.f64 (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2))) (cbrt.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2) (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6)) (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 30) 3)) (+.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d2)) (-.f64 (*.f64 (*.f64 d1 30) (*.f64 d1 30)) (*.f64 (*.f64 d1 d2) (*.f64 d1 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d2)) (*.f64 (*.f64 d1 30) (*.f64 d1 30))) (-.f64 (*.f64 d1 d2) (*.f64 d1 30)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 27000 (pow.f64 d2 3)) d1) (fma.f64 d2 d2 (-.f64 900 (*.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 27000 (pow.f64 d2 3))) (fma.f64 d2 d2 (-.f64 900 (*.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (fma.f64 d2 d2 -900)) (+.f64 d2 -30))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 d1) (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 d1 3) (pow.f64 (+.f64 d2 30) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 d2 30) 3) (pow.f64 d1 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d2 (*.f64 d1 30))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d2 d1 (*.f64 d1 30))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 d2 30)) (cbrt.f64 d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (cbrt.f64 (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))) (pow.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6) (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 d1 (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 30))) 1/3) (pow.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 30))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 30)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30)))))))))"]],"rules":[["egg-rr",21],["egg-rr",44]],"stop":[["node limit",1]],"time":48.7548828125,"type":"rewrite"},{"count":[[73,81]],"egraph":[[3,5593,645,0.02809975],[2,1629,663,0.012385417],[1,452,678,0.0038695],[0,132,815,0.0007425]],"inputs":[["(*.f64 30 (*.f64 (pow.f64 1 1/3) d1))","(+.f64 (*.f64 30 (*.f64 (pow.f64 1 1/3) d1)) (*.f64 d2 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))))))","(+.f64 (*.f64 30 (*.f64 (pow.f64 1 1/3) d1)) (+.f64 (*.f64 (pow.f64 d2 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (*.f64 (cbrt.f64 30) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))))))))) (*.f64 d2 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3)))))))","(+.f64 (*.f64 30 (*.f64 (pow.f64 1 1/3) d1)) (+.f64 (*.f64 (pow.f64 d2 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (*.f64 (cbrt.f64 30) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))))))))) (+.f64 (*.f64 d2 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))))) (*.f64 (pow.f64 d2 3) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (*.f64 (cbrt.f64 30) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 d1) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 d1 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (cbrt.f64 30)))) (*.f64 -1/405 (*.f64 (pow.f64 1 1/9) (pow.f64 d1 2)))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 d1 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))))))))))))))","(*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30))","(+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30)) (*.f64 1/3 (*.f64 d2 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 d2 2) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 11)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7)) 1/3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30)) (*.f64 1/3 (*.f64 d2 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3))))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 d2 2) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 11)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7)) 1/3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30)) (+.f64 (*.f64 1/3 (*.f64 d2 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3)))) (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (pow.f64 d2 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 d1 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))))) (pow.f64 (cbrt.f64 30) 2)) (pow.f64 (/.f64 1 (pow.f64 d1 2)) 1/3))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 30 (*.f64 (pow.f64 1 1/3) d1))","(*.f64 30 d1)","(+.f64 (*.f64 30 (*.f64 (pow.f64 1 1/3) d1)) (*.f64 d2 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))))))","(fma.f64 30 d1 (*.f64 d2 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 30) 4))) 1)))","(fma.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 30) 4))) (*.f64 30 d1))","(fma.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (*.f64 30 (cbrt.f64 30)))) (*.f64 30 d1))","(fma.f64 30 d1 (*.f64 (cbrt.f64 (*.f64 30 (cbrt.f64 30))) (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)))))","(+.f64 (*.f64 30 (*.f64 (pow.f64 1 1/3) d1)) (+.f64 (*.f64 (pow.f64 d2 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (*.f64 (cbrt.f64 30) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))))))))) (*.f64 d2 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3)))))))","(fma.f64 30 d1 (fma.f64 (*.f64 d2 d2) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30)))) (fma.f64 2/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30)))) (*.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 30) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)))) -1/9))))) (*.f64 d2 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 30) 4))) 1))))","(fma.f64 30 d1 (fma.f64 (*.f64 d2 d2) (+.f64 (*.f64 (cbrt.f64 30) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4))) -1/9)) (cbrt.f64 d1))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30)))) 1/9)) (*.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 30) 4))))))","(fma.f64 30 d1 (*.f64 d2 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (*.f64 30 (cbrt.f64 30)))) (*.f64 d2 (fma.f64 (cbrt.f64 30) (*.f64 (cbrt.f64 d1) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (cbrt.f64 (/.f64 1/30 (cbrt.f64 30)))))) (*.f64 1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30))))))))))","(fma.f64 30 d1 (*.f64 d2 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (*.f64 30 (cbrt.f64 30)))) (*.f64 d2 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 30))) (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) 1/9) (*.f64 (*.f64 (cbrt.f64 (/.f64 1/30 (cbrt.f64 30))) (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) -1/9))) (*.f64 (cbrt.f64 30) (cbrt.f64 d1))))))))","(+.f64 (*.f64 30 (*.f64 (pow.f64 1 1/3) d1)) (+.f64 (*.f64 (pow.f64 d2 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 30)) 1/3))) (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (*.f64 (cbrt.f64 30) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))))))))) (+.f64 (*.f64 d2 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 13)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 30) 4) 1/3))))) (*.f64 (pow.f64 d2 3) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (*.f64 (cbrt.f64 30) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 d1) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 d1 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (cbrt.f64 30)))) (*.f64 -1/405 (*.f64 (pow.f64 1 1/9) (pow.f64 d1 2)))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 14)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)) 1/3))))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 d1 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))))))))))))))","(fma.f64 30 d1 (fma.f64 (*.f64 d2 d2) (fma.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30)))) (fma.f64 2/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30)))) (*.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 30) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)))) -1/9))))) (fma.f64 d2 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 30) 4))) 1) (*.f64 (pow.f64 d2 3) (+.f64 (*.f64 -2/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (pow.f64 d1 7)))) (fma.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 30) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 d1)) (/.f64 (fma.f64 1/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (pow.f64 d1 7))) (*.f64 -2/9 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (pow.f64 d1 7))))) (cbrt.f64 30))) (*.f64 -1/405 (*.f64 d1 d1)))) (fma.f64 1/3 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4)))) -1/9)) (*.f64 -1/3 (fma.f64 1/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (pow.f64 d1 7))) (*.f64 -2/9 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (pow.f64 d1 7)))))))))))))","(fma.f64 30 d1 (fma.f64 (*.f64 d2 d2) (+.f64 (*.f64 (cbrt.f64 30) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4))) -1/9)) (cbrt.f64 d1))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30)))) 1/9)) (fma.f64 (pow.f64 d2 3) (fma.f64 -2/27 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) (fma.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 30) (fma.f64 -2/3 (/.f64 (*.f64 (cbrt.f64 (/.f64 1 d1)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) -5/27)) (cbrt.f64 30)) (*.f64 -1/405 (*.f64 d1 d1)))) (fma.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) -5/27) -1/3 (*.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 4))) -1/9)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18))))))) (*.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 30) 4)))))))","(fma.f64 30 d1 (fma.f64 (pow.f64 d2 3) (fma.f64 (cbrt.f64 30) (*.f64 (cbrt.f64 d1) (fma.f64 -2/3 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 d1)) (cbrt.f64 30)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) -5/27)) (*.f64 d1 (*.f64 d1 -1/405)))) (fma.f64 -2/27 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) (fma.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) -5/27) -1/3 (*.f64 (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (cbrt.f64 (/.f64 1/30 (cbrt.f64 30))))) (*.f64 1/3 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))))))) (*.f64 d2 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (*.f64 30 (cbrt.f64 30)))) (*.f64 d2 (fma.f64 (cbrt.f64 30) (*.f64 (cbrt.f64 d1) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (pow.f64 (pow.f64 d1 14) 1/18)) (cbrt.f64 (/.f64 1/30 (cbrt.f64 30)))))) (*.f64 1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) (cbrt.f64 (/.f64 1 (cbrt.f64 30)))))))))))","(fma.f64 30 d1 (fma.f64 (pow.f64 d2 3) (fma.f64 (cbrt.f64 30) (*.f64 (cbrt.f64 d1) (fma.f64 (cbrt.f64 (/.f64 1 d1)) (*.f64 -2/3 (/.f64 (*.f64 (cbrt.f64 (pow.f64 d1 7)) -5/27) 30)) (*.f64 d1 (*.f64 d1 -1/405)))) (fma.f64 -2/27 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1/30 (cbrt.f64 30))) (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) -1/9))) (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)))) (*.f64 (*.f64 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) -5/27) -1/3)))) (*.f64 d2 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 13) 1/18) (pow.f64 (pow.f64 d1 13) 1/18)) (cbrt.f64 (*.f64 30 (cbrt.f64 30)))) (*.f64 d2 (fma.f64 (cbrt.f64 (/.f64 1 (cbrt.f64 30))) (*.f64 (*.f64 (pow.f64 (pow.f64 d1 17) 1/18) (pow.f64 (pow.f64 d1 17) 1/18)) 1/9) (*.f64 (*.f64 (cbrt.f64 (/.f64 1/30 (cbrt.f64 30))) (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) (*.f64 (pow.f64 (pow.f64 d1 14) 1/18) -1/9))) (*.f64 (cbrt.f64 30) (cbrt.f64 d1)))))))))","(*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30))","(*.f64 (cbrt.f64 30) (cbrt.f64 d1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30)) (*.f64 1/3 (*.f64 d2 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3)))))","(fma.f64 (cbrt.f64 d1) (cbrt.f64 30) (*.f64 1/3 (*.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))))))","(fma.f64 1/3 (*.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (*.f64 (cbrt.f64 30) (cbrt.f64 d1)))","(fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))) (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)))) (*.f64 (cbrt.f64 30) (cbrt.f64 d1)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 d2 2) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 11)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7)) 1/3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30)) (*.f64 1/3 (*.f64 d2 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3))))))","(fma.f64 -1/9 (*.f64 (*.f64 d2 d2) (*.f64 (*.f64 (pow.f64 (pow.f64 d1 11) 1/18) (pow.f64 (pow.f64 d1 11) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7))))) (fma.f64 (cbrt.f64 d1) (cbrt.f64 30) (*.f64 1/3 (*.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))))))","(fma.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7))) (*.f64 d2 (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 11) 1/18) (pow.f64 (pow.f64 d1 11) 1/18))))) (fma.f64 1/3 (*.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (*.f64 (cbrt.f64 30) (cbrt.f64 d1))))","(fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))) (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)))) (fma.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7))) (*.f64 d2 (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 11) 1/18) (pow.f64 (pow.f64 d1 11) 1/18))))) (*.f64 (cbrt.f64 30) (cbrt.f64 d1))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 d2 2) (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 11)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7)) 1/3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 d1) 1/3) (cbrt.f64 30)) (+.f64 (*.f64 1/3 (*.f64 d2 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 d1 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) 1/3)))) (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (pow.f64 d2 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (pow.f64 d1 7) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 d1 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))))) (pow.f64 (cbrt.f64 30) 2)) (pow.f64 (/.f64 1 (pow.f64 d1 2)) 1/3))))))","(fma.f64 -1/9 (*.f64 (*.f64 d2 d2) (*.f64 (*.f64 (pow.f64 (pow.f64 d1 11) 1/18) (pow.f64 (pow.f64 d1 11) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7))))) (fma.f64 (cbrt.f64 d1) (cbrt.f64 30) (fma.f64 1/3 (*.f64 d2 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))))) (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (pow.f64 d2 3) (fma.f64 1/27 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (pow.f64 d1 7))) (*.f64 -2/9 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (pow.f64 d1 7)))))) (pow.f64 (cbrt.f64 30) 2)) (cbrt.f64 (/.f64 1 (*.f64 d1 d1))))))))","(fma.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7))) (*.f64 d2 (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 11) 1/18) (pow.f64 (pow.f64 d1 11) 1/18))))) (fma.f64 (cbrt.f64 30) (cbrt.f64 d1) (fma.f64 -1/3 (/.f64 (*.f64 (pow.f64 d2 3) (*.f64 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) -5/27)) (/.f64 (pow.f64 (cbrt.f64 30) 2) (cbrt.f64 (/.f64 1 (*.f64 d1 d1))))) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2)))) (*.f64 1/3 d2)))))","(fma.f64 (*.f64 d2 d2) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 11) 1/18) (pow.f64 (pow.f64 d1 11) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7))))) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))) (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)))) (fma.f64 -1/3 (*.f64 (/.f64 (*.f64 (pow.f64 d2 3) (cbrt.f64 (/.f64 1 (*.f64 d1 d1)))) (pow.f64 (cbrt.f64 30) 2)) (*.f64 (/.f64 (cbrt.f64 (pow.f64 d1 7)) (pow.f64 (cbrt.f64 30) 2)) -5/27)) (*.f64 (cbrt.f64 30) (cbrt.f64 d1)))))","(fma.f64 (*.f64 d2 d2) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 (pow.f64 d1 11) 1/18) (pow.f64 (pow.f64 d1 11) 1/18)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 7))))) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 30) 2))) (*.f64 d2 (*.f64 (pow.f64 (pow.f64 d1 7) 1/18) (pow.f64 (pow.f64 d1 7) 1/18)))) (fma.f64 -1/3 (*.f64 (*.f64 1/30 (/.f64 (*.f64 (cbrt.f64 (pow.f64 d1 7)) -5/27) (cbrt.f64 30))) (*.f64 (pow.f64 d2 3) (cbrt.f64 (/.f64 1 (*.f64 d1 d1))))) (*.f64 (cbrt.f64 30) (cbrt.f64 d1)))))"]],"stop":[["node limit",1]],"time":48.8740234375,"type":"simplify"},{"compiler":[[2376,1912]],"time":36.2080078125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","done",0.7417528321270289],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","next",13.9375],["(*.f64 d1 (+.f64 d2 30))","done",0.0234375]],"compiler":[[10,8],[12,8],[7,5],[12,8]],"count":[[114,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[111,0],"picked":[1,1]}],"min-error":[0.0078125],"time":19.498046875,"type":"prune"},{"compiler":[[29,17]],"locations":[["(*.f64 (fma.f64 d2 d2 -900) d1)",4.523116396264707,true],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))",8.575814955529804,true]],"time":7.928955078125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (fma.f64 d2 d2 -900) d1)","d1","-inf",0.31103515625],["(*.f64 (fma.f64 d2 d2 -900) d1)","d1","inf",0.31103515625],["(*.f64 (fma.f64 d2 d2 -900) d1)","d1","0",0.1748046875],["(*.f64 (fma.f64 d2 d2 -900) d1)","d2","-inf",0.216064453125],["(*.f64 (fma.f64 d2 d2 -900) d1)","d2","inf",0.27099609375],["(*.f64 (fma.f64 d2 d2 -900) d1)","d2","0",0.202880859375],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","d1","-inf",0.35498046875],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","d1","inf",0.471923828125],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","d1","0",0.73193359375],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","d2","-inf",0.584228515625],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","d2","inf",0.541015625],["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","d2","0",1.23291015625]],"time":5.6201171875,"type":"series"},{"count":[[2,100]],"egraph":[[2,2673,15,0.024945584],[1,199,15,0.0036455840000000003],[0,9,22,0.0002985]],"inputs":[["(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","(*.f64 (fma.f64 d2 d2 -900) d1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 d2 30) d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 d2 30)) d1)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 d2 30)) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 d2 30)) d1))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 d2 30)) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 d2 30) d1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 d2 d2 -900) (/.f64 1 (/.f64 (+.f64 d2 -30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 d2 d2 -900) (*.f64 d1 (/.f64 1 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (*.f64 (fma.f64 d2 d2 -900) (/.f64 1 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 d2 30) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 d2 30) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 d2 30) d1)) (pow.f64 (cbrt.f64 (*.f64 (+.f64 d2 30) d1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 d2 30) d1)) 2) (cbrt.f64 (*.f64 (+.f64 d2 30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 2) (*.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (/.f64 1 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 d2 30) d1)) (sqrt.f64 (*.f64 (+.f64 d2 30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (*.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (/.f64 1 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 d2 d2 -900) (neg.f64 d1)) (/.f64 1 (+.f64 30 (neg.f64 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 d2 -30)) (*.f64 (fma.f64 d2 d2 -900) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 d2 30) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 d2 d2 -900) 1) (/.f64 d1 (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 d1 1) (+.f64 d2 30))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 2) 1) (/.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 1) (/.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 d2 d2 -900) (pow.f64 (cbrt.f64 (+.f64 d2 -30)) 2)) (/.f64 d1 (cbrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 d1 (pow.f64 (cbrt.f64 (+.f64 d2 -30)) 2)) (/.f64 (fma.f64 d2 d2 -900) (cbrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 d2 -30)) -2) (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (cbrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 2) (pow.f64 (cbrt.f64 (+.f64 d2 -30)) 2)) (cbrt.f64 (*.f64 (+.f64 d2 30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (pow.f64 (cbrt.f64 (+.f64 d2 -30)) 2)) (/.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (cbrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 d2 d2 -900) (sqrt.f64 (+.f64 d2 -30))) (/.f64 d1 (sqrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 d1 (sqrt.f64 (+.f64 d2 -30))) (/.f64 (fma.f64 d2 d2 -900) (sqrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 d2 -30) -1/2) (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (sqrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 2) (sqrt.f64 (+.f64 d2 -30))) (/.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (sqrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 -27000 (pow.f64 d2 3))) (-.f64 (fma.f64 d2 d2 900) (*.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (fma.f64 d2 d2 -900)) (+.f64 d2 30))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 d2 30) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 d2 30) d1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 d2 30) d1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 d2 30) d1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 d2 30) d1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (*.f64 (+.f64 d2 30) d1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (+.f64 d2 30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 3) (pow.f64 (+.f64 d2 -30) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1 (*.f64 (+.f64 d2 30) d1)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (+.f64 d2 30) d1))) 2)) (cbrt.f64 (log.f64 (*.f64 (+.f64 d2 30) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (+.f64 d2 30) d1)))) (sqrt.f64 (log.f64 (*.f64 (+.f64 d2 30) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 30 (neg.f64 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 d2 30) d1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 d2 30)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (+.f64 d2 30) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 d2 30) d1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 3) (pow.f64 (+.f64 d2 -30) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 d2 30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 d2 30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 d2 30) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 d2 30) d1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (+.f64 d2 30) d1))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (+.f64 d2 30) d1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (+.f64 d2 30) d1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (*.f64 (+.f64 d2 30) d1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (+.f64 d2 30) d1)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (fma.f64 d2 d2 -900)) 1) (log.f64 (/.f64 (+.f64 d2 -30) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 1) (log.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (*.f64 (log.f64 (+.f64 d2 -30)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 1) (*.f64 (log.f64 (+.f64 d2 -30)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 1) (neg.f64 (log.f64 (+.f64 d2 -30)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 (+.f64 d2 -30))) (*.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (+.f64 d2 30)) (*.f64 (log.f64 d1) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 d2 d2 -900) d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d2 d2) d1) (*.f64 -900 d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (*.f64 d2 d2)) (*.f64 d1 -900))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 d1) (fma.f64 d2 d2 -900))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 d1) (fma.f64 d2 d2 -900)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 d1) (fma.f64 d2 d2 -900)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 d1) (fma.f64 d2 d2 -900)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 d2 d2 -900) d1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1))) 2)) (cbrt.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)))) (sqrt.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 d1) (fma.f64 d2 d2 -900)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 d2 d2 -900) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 d2 d2 -900) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 d2 d2 -900) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 d2 d2 -900)) 1) (log.f64 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (fma.f64 d2 d2 -900)) (*.f64 (log.f64 d1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (fma.f64 d2 d2 -900)) 1) (*.f64 (log.f64 d1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 d1) 1) (log.f64 (fma.f64 d2 d2 -900))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 d1) (*.f64 (log.f64 (fma.f64 d2 d2 -900)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 d1) 1) (*.f64 (log.f64 (fma.f64 d2 d2 -900)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 (*.f64 d2 d2) (*.f64 d1 -900))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d2 d2) d1 (*.f64 -900 d1))))))"]],"rules":[["egg-rr",34],["egg-rr",66]],"stop":[["node limit",1]],"time":49.052978515625,"type":"rewrite"},{"count":[[148,114]],"egraph":[[6,4181,429,0.021409667],[5,765,429,0.009225833999999999],[4,247,429,0.002386167],[3,117,429,0.001079125],[2,75,429,0.00061275],[1,43,429,0.000351209],[0,18,495,0.000149375]],"inputs":[["(*.f64 30 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(*.f64 -900 d1)","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 (pow.f64 d2 2) d1)","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 (pow.f64 d2 2) d1)","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)"]],"method":["egg-herbie"],"outputs":[["(*.f64 30 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(*.f64 -900 d1)","(*.f64 d1 -900)","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (pow.f64 d2 2) d1)","(*.f64 d1 (*.f64 d2 d2))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (pow.f64 d2 2) d1)","(*.f64 d1 (*.f64 d2 d2))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(+.f64 (*.f64 -900 d1) (*.f64 (pow.f64 d2 2) d1))","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))","(*.f64 (-.f64 (pow.f64 d2 2) 900) d1)","(*.f64 d1 (+.f64 -900 (*.f64 d2 d2)))","(*.f64 d1 (fma.f64 d2 d2 -900))"]],"stop":[["node limit",1]],"time":41.2080078125,"type":"simplify"},{"compiler":[[1494,1045]],"time":20.7138671875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","next",13.935878759768443],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","done",0.7417528321270289],["(*.f64 d1 (+.f64 d2 30))","done",0.0234375],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 d2 -30)) -2) (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (cbrt.f64 (+.f64 d2 -30))))","fresh",14.375152734442608]],"compiler":[[14,10],[10,8],[7,5],[20,15],[14,10],[20,15]],"count":[[117,4]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[114,2],"picked":[1,0]}],"min-error":[0],"time":18.026123046875,"type":"prune"},{"compiler":[[37,24]],"locations":[["(/.f64 1 (+.f64 d2 -30))",0.00390625,true],["(*.f64 (fma.f64 d2 d2 -900) d1)",4.523116396264707,false],["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))",8.583627455529804,true]],"time":9.142822265625,"type":"localize"},{"count":[[2,36]],"series":[["(/.f64 1 (+.f64 d2 -30))","d2","-inf",0.193115234375],["(/.f64 1 (+.f64 d2 -30))","d2","inf",0.2548828125],["(/.f64 1 (+.f64 d2 -30))","d2","0",0.205810546875],["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","d1","-inf",0.180908203125],["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","d1","inf",0.1650390625],["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","d1","0",0.156982421875],["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","d2","-inf",0.18310546875],["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","d2","inf",0.169921875],["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","d2","0",0.23193359375]],"time":1.862060546875,"type":"series"},{"count":[[2,82]],"egraph":[[2,2916,17,0.0258235],[1,235,17,0.004285041],[0,11,21,0.000458416]],"inputs":[["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","(/.f64 1 (+.f64 d2 -30))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 d2 d2 -900) (/.f64 (+.f64 d2 -30) d1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 d1 (/.f64 (+.f64 d2 -30) (fma.f64 d2 d2 -900)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 d2 -30) (*.f64 (fma.f64 d2 d2 -900) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) 2) (/.f64 (+.f64 d2 -30) (cbrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (/.f64 (+.f64 d2 -30) (sqrt.f64 (*.f64 (fma.f64 d2 d2 -900) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 d2 d2 -900) d1)) (+.f64 30 (neg.f64 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (sqrt.f64 (+.f64 d2 -30))) (sqrt.f64 (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 1) (+.f64 d2 -30))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (cbrt.f64 (pow.f64 (+.f64 d2 -30) 2))) (cbrt.f64 (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (fma.f64 d2 d2 -900) d1)) (+.f64 30 (neg.f64 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) -1) (+.f64 30 (neg.f64 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 3) (pow.f64 (+.f64 d2 -30) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 d2 -30) (*.f64 (fma.f64 d2 d2 -900) d1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))) 2)) (cbrt.f64 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))) (sqrt.f64 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 d2 d2 -900) d1) 3) (pow.f64 (+.f64 d2 -30) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (/.f64 d1 1) (+.f64 d2 30))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 d2 -30)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 d2 -30))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 d2 -30))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 d2 -30))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (+.f64 d2 -30)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 d2 -30)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 d2 -30))) (cbrt.f64 (pow.f64 (+.f64 d2 -30) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 d2 -30) -2)) (/.f64 1 (cbrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 d2 -30) -1/2) (pow.f64 (+.f64 d2 -30) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (+.f64 30 (neg.f64 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 d2 -30)) -2) (/.f64 1 (cbrt.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 -27000 (pow.f64 d2 3))) (-.f64 (fma.f64 d2 d2 900) (*.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 d2 d2 -900)) (+.f64 d2 30))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 d2 -30) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 d2 -30)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (neg.f64 (log.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 d2 -30) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 d2 -30) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 d2 -30) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 d2 -30) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 d2 -30)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (+.f64 d2 -30))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 d2 -30)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 d2 -30) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (log.f64 (+.f64 d2 -30)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (+.f64 30 (neg.f64 d2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (+.f64 d2 -30)))) 2)) (cbrt.f64 (neg.f64 (log.f64 (+.f64 d2 -30)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (neg.f64 (log.f64 (+.f64 d2 -30))))) (sqrt.f64 (neg.f64 (log.f64 (+.f64 d2 -30)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 d2 -30) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 d2 -30)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 d2 -30) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (+.f64 d2 -30))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 d2 -30)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (+.f64 d2 -30))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 d2 -30) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (cbrt.f64 (+.f64 d2 -30)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -1/2 (log.f64 (+.f64 d2 -30))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 d2 -30)) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 d2 -30)) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (+.f64 d2 -30))) 1) 1))))))"]],"rules":[["egg-rr",43],["egg-rr",39]],"stop":[["node limit",1]],"time":46.841064453125,"type":"rewrite"},{"count":[[118,103]],"egraph":[[6,7815,411,0.03153246],[5,5159,411,0.020714585],[4,1624,411,0.010753501],[3,615,414,0.004124584000000001],[2,259,420,0.001765834],[1,117,422,0.000758209],[0,46,448,0.000265375]],"inputs":[["(*.f64 30 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","-1/30","(-.f64 (*.f64 -1/900 d2) 1/30)","(-.f64 (+.f64 (*.f64 -1/27000 (pow.f64 d2 2)) (*.f64 -1/900 d2)) 1/30)","(-.f64 (+.f64 (*.f64 -1/27000 (pow.f64 d2 2)) (+.f64 (*.f64 -1/810000 (pow.f64 d2 3)) (*.f64 -1/900 d2))) 1/30)","(/.f64 1 d2)","(+.f64 (/.f64 1 d2) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2)))))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 27000 (/.f64 1 (pow.f64 d2 4))) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))))","(/.f64 1 d2)","(+.f64 (/.f64 1 d2) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2)))))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 27000 (/.f64 1 (pow.f64 d2 4))) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 30 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","(/.f64 (*.f64 (-.f64 (pow.f64 d2 2) 900) d1) (-.f64 d2 30))","(/.f64 (+.f64 (*.f64 d2 d2) -900) (/.f64 (+.f64 d2 -30) d1))","(*.f64 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)) d1)","(*.f64 d1 (/.f64 (fma.f64 d2 d2 -900) (+.f64 d2 -30)))","(*.f64 (fma.f64 d2 d2 -900) (/.f64 d1 (+.f64 d2 -30)))","-1/30","(-.f64 (*.f64 -1/900 d2) 1/30)","(fma.f64 -1/900 d2 -1/30)","(fma.f64 d2 -1/900 -1/30)","(-.f64 (+.f64 (*.f64 -1/27000 (pow.f64 d2 2)) (*.f64 -1/900 d2)) 1/30)","(+.f64 (*.f64 (*.f64 d2 d2) -1/27000) (fma.f64 -1/900 d2 -1/30))","(fma.f64 (*.f64 d2 d2) -1/27000 (fma.f64 d2 -1/900 -1/30))","(fma.f64 d2 -1/900 (fma.f64 d2 (*.f64 d2 -1/27000) -1/30))","(fma.f64 d2 (fma.f64 d2 -1/27000 -1/900) -1/30)","(-.f64 (+.f64 (*.f64 -1/27000 (pow.f64 d2 2)) (+.f64 (*.f64 -1/810000 (pow.f64 d2 3)) (*.f64 -1/900 d2))) 1/30)","(+.f64 (fma.f64 -1/27000 (*.f64 d2 d2) (fma.f64 -1/810000 (pow.f64 d2 3) (*.f64 d2 -1/900))) -1/30)","(+.f64 (fma.f64 (*.f64 d2 d2) -1/27000 (fma.f64 d2 -1/900 (*.f64 -1/810000 (pow.f64 d2 3)))) -1/30)","(fma.f64 d2 (*.f64 d2 -1/27000) (fma.f64 d2 -1/900 (fma.f64 -1/810000 (pow.f64 d2 3) -1/30)))","(fma.f64 d2 (*.f64 d2 (fma.f64 d2 -1/810000 -1/27000)) (fma.f64 d2 -1/900 -1/30))","(fma.f64 d2 (fma.f64 d2 (fma.f64 d2 -1/810000 -1/27000) -1/900) -1/30)","(/.f64 1 d2)","(+.f64 (/.f64 1 d2) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))","(+.f64 (/.f64 1 d2) (/.f64 30 (*.f64 d2 d2)))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2)))))","(+.f64 (/.f64 1 d2) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 900 (pow.f64 d2 3))))","(+.f64 (+.f64 (/.f64 1 d2) (/.f64 30 (*.f64 d2 d2))) (/.f64 900 (pow.f64 d2 3)))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 27000 (/.f64 1 (pow.f64 d2 4))) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))))","(+.f64 (/.f64 1 d2) (+.f64 (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 900 (pow.f64 d2 3))) (/.f64 27000 (pow.f64 d2 4))))","(+.f64 (/.f64 1 d2) (+.f64 (/.f64 900 (pow.f64 d2 3)) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 27000 (pow.f64 d2 4)))))","(+.f64 (/.f64 900 (pow.f64 d2 3)) (+.f64 (/.f64 1 d2) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 27000 (pow.f64 d2 4)))))","(+.f64 (/.f64 1 d2) (+.f64 (/.f64 30 (*.f64 d2 d2)) (*.f64 (/.f64 1 (pow.f64 d2 3)) (+.f64 (/.f64 27000 d2) 900))))","(+.f64 (+.f64 (/.f64 1 d2) (/.f64 900 (pow.f64 d2 3))) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 27000 (pow.f64 d2 4))))","(/.f64 1 d2)","(+.f64 (/.f64 1 d2) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))","(+.f64 (/.f64 1 d2) (/.f64 30 (*.f64 d2 d2)))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2)))))","(+.f64 (/.f64 1 d2) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 900 (pow.f64 d2 3))))","(+.f64 (+.f64 (/.f64 1 d2) (/.f64 30 (*.f64 d2 d2))) (/.f64 900 (pow.f64 d2 3)))","(+.f64 (/.f64 1 d2) (+.f64 (*.f64 27000 (/.f64 1 (pow.f64 d2 4))) (+.f64 (*.f64 900 (/.f64 1 (pow.f64 d2 3))) (*.f64 30 (/.f64 1 (pow.f64 d2 2))))))","(+.f64 (/.f64 1 d2) (+.f64 (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 900 (pow.f64 d2 3))) (/.f64 27000 (pow.f64 d2 4))))","(+.f64 (/.f64 1 d2) (+.f64 (/.f64 900 (pow.f64 d2 3)) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 27000 (pow.f64 d2 4)))))","(+.f64 (/.f64 900 (pow.f64 d2 3)) (+.f64 (/.f64 1 d2) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 27000 (pow.f64 d2 4)))))","(+.f64 (/.f64 1 d2) (+.f64 (/.f64 30 (*.f64 d2 d2)) (*.f64 (/.f64 1 (pow.f64 d2 3)) (+.f64 (/.f64 27000 d2) 900))))","(+.f64 (+.f64 (/.f64 1 d2) (/.f64 900 (pow.f64 d2 3))) (+.f64 (/.f64 30 (*.f64 d2 d2)) (/.f64 27000 (pow.f64 d2 4))))"]],"stop":[["node limit",1]],"time":49.93798828125,"type":"simplify"},{"compiler":[[2149,1550]],"time":28.833984375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","done",13.935878759768443],["(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","done",0.7417528321270289],["(*.f64 d1 (+.f64 d2 30))","done",0.0234375],["(*.f64 (pow.f64 (cbrt.f64 (+.f64 d2 -30)) -2) (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (cbrt.f64 (+.f64 d2 -30))))","fresh",14.375152734442608]],"compiler":[[14,10],[10,8],[7,5],[20,15]],"count":[[148,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[144,0],"picked":[1,1]}],"min-error":[0],"time":21.235107421875,"type":"prune"},{"accuracy":[0.0234375],"baseline":[0.0234375],"branch":[["d1",0.0234375,1],["d2",0.0234375,1],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))",0.0234375,1]],"compiler":[[3,2],[3,2],[13,9],[66,45]],"count":[[6,1]],"inputs":[["(*.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (/.f64 1 (+.f64 d2 -30)))","(*.f64 (pow.f64 (cbrt.f64 (+.f64 d2 -30)) -2) (/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (cbrt.f64 (+.f64 d2 -30))))","(pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 30))) 3)","(/.f64 (*.f64 (fma.f64 d2 d2 -900) d1) (+.f64 d2 -30))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))"]],"link":["."],"name":["FastMath test2"],"oracle":[14.600540429811453],"outputs":[["(*.f64 d1 (+.f64 d2 30))"]],"time":13.31201171875,"times":[["d1",3.844970703125],["d2",3.911865234375],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))",4.06005859375]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,8,7,2.6291000000000003e-5],[0,6,7,1.6166e-5]],"inputs":[["(*.f64 d1 (+.f64 d2 30))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 d2 30))"]],"stop":[["fuel",1],["saturated",1]],"time":8.31689453125,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.446044921875,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.8263408725615591,0.08975603338330984,0.08390309405513108],[11,0.809755518566817,0.11902430513873696,0.07122017629444599],[10,0.776584810577333,0.17170719429850578,0.05170799512416124],[9,0.7414628844708204,0.22634130157530308,0.032195813953876495],[8,0.6712190322577953,0.31219489872455597,0.016586069017648697],[7,0.5931703075766563,0.40585336834192276,0.0009763240814208984],[6,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":20.97998046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.89111328125,381],["body",256,"valid",260.06982421875,8256]],"time":279.588134765625,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,2,2,1.333e-6],[2,18,14,0.000126626],[1,14,14,8.6626e-5],[0,8,14,4.4959e-5]],"inputs":[["0","1"],["(/.f64 x (*.f64 y 3))","(/.f64 y (*.f64 x 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 x (*.f64 y 3))","(/.f64 y (*.f64 x 3))","(/.f64 (/.f64 y x) 3)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.66796875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[2,11,7,9.2e-5],[1,9,7,6.3042e-5],[0,6,7,3.3292e-5]],"inputs":[["(/.f64 x (*.f64 y 3))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (*.f64 y 3))"]],"stop":[["saturated",1]],"time":10.137939453125,"type":"simplify"},{"compiler":[[7,5]],"time":0.19287109375,"type":"eval"},{"alts":[["(/.f64 x (*.f64 y 3))","next",0.20703125]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.20703125],"time":0.6611328125,"type":"prune"},{"compiler":[[13,8]],"locations":[["(/.f64 x (*.f64 y 3))",0.20703125,true]],"time":3.073974609375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 x (*.f64 y 3))","y","-inf",0.276123046875],["(/.f64 x (*.f64 y 3))","y","inf",0.42822265625],["(/.f64 x (*.f64 y 3))","y","0",0.59912109375],["(/.f64 x (*.f64 y 3))","x","-inf",0.364013671875],["(/.f64 x (*.f64 y 3))","x","inf",0.530029296875],["(/.f64 x (*.f64 y 3))","x","0",0.5400390625]],"time":2.81201171875,"type":"series"},{"count":[[1,38]],"egraph":[[2,1675,7,0.016903208],[1,127,7,0.002221792],[0,6,7,0.000179125]],"inputs":[["(/.f64 x (*.f64 y 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 x y) 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 x y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) 2) (cbrt.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 x y) 1/3)) (sqrt.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) y) (/.f64 (sqrt.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 3) (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 3) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 y 3)) 2)) (/.f64 x (cbrt.f64 (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (*.f64 y 3)) 2)) (cbrt.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 y 3)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (*.f64 y 3))) (/.f64 x (sqrt.f64 (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (*.f64 y 3))) (/.f64 (cbrt.f64 x) (sqrt.f64 (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x y) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 x y) 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (/.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (cbrt.f64 (exp.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (*.f64 y 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x y) 1/3)))))))"]],"rules":[["egg-rr",38]],"stop":[["node limit",1]],"time":34.827880859375,"type":"rewrite"},{"count":[[62,38]],"egraph":[[4,18,168,0.000266125],[3,17,168,0.000209084],[2,13,168,0.000152834],[1,9,168,9.8959e-5],[0,6,168,4.9417e-5]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"stop":[["saturated",1]],"time":12.55517578125,"type":"simplify"},{"compiler":[[365,226]],"time":5.616943359375,"type":"eval"},{"alts":[["(*.f64 x (/.f64 1/3 y))","fresh",0.3287887695368841],["(*.f64 (/.f64 1 y) (/.f64 x 3))","next",0.26171875],["(pow.f64 (*.f64 3 (/.f64 y x)) -1)","fresh",0.5466744235090784],["(pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) 3)","fresh",0.6183740723585869],["(/.f64 x (*.f64 y 3))","done",0.20703125]],"compiler":[[7,5],[9,7],[9,7],[10,8],[7,5],[7,5],[9,7],[9,7],[10,8]],"count":[[39,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[38,4],"picked":[1,1]}],"min-error":[0],"time":6.64892578125,"type":"prune"},{"compiler":[[19,13]],"locations":[["(*.f64 (/.f64 1 y) (/.f64 x 3))",0.26171875,true]],"time":4.56103515625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 1 y) (/.f64 x 3))","x","-inf",0.18017578125],["(*.f64 (/.f64 1 y) (/.f64 x 3))","x","inf",0.151123046875],["(*.f64 (/.f64 1 y) (/.f64 x 3))","x","0",0.14013671875],["(*.f64 (/.f64 1 y) (/.f64 x 3))","y","-inf",0.181884765625],["(*.f64 (/.f64 1 y) (/.f64 x 3))","y","inf",0.156982421875],["(*.f64 (/.f64 1 y) (/.f64 x 3))","y","0",0.18896484375]],"time":1.067138671875,"type":"series"},{"count":[[1,46]],"egraph":[[2,2134,7,0.019501042],[1,171,7,0.00304325],[0,8,7,0.000257875]],"inputs":[["(*.f64 (/.f64 1 y) (/.f64 x 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 x y) 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 y (/.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 3 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 3 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 y) (/.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 (*.f64 y 3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 x 1/3)) 2) (/.f64 y (cbrt.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 (*.f64 y 3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 x 1/3)) (/.f64 y (sqrt.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 y) (/.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 3 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (neg.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x 1/3)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (neg.f64 y) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1) (*.f64 3 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) -1) (*.f64 -3 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 x 1/3)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 1 y)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x y) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 x y) 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (cbrt.f64 (exp.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 x 1/3) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 (pow.f64 y -2) y) (pow.f64 (*.f64 x 1/3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x 1/3) 3) (/.f64 (pow.f64 y -2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x y) 1/3)))))))"]],"rules":[["egg-rr",46]],"stop":[["node limit",1]],"time":37.575927734375,"type":"rewrite"},{"count":[[70,47]],"egraph":[[4,18,168,0.000265166],[3,17,168,0.000208791],[2,13,168,0.000152416],[1,9,168,9.8457e-5],[0,6,168,4.8666e-5]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"stop":[["saturated",1]],"time":12.577880859375,"type":"simplify"},{"compiler":[[373,238]],"time":5.80908203125,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 y) (/.f64 x 3))","done",0.26171875],["(/.f64 x (/.f64 y 1/3))","fresh",0.281913769536884],["(/.f64 (/.f64 1 y) (/.f64 3 x))","fresh",0.26953125],["(/.f64 (/.f64 x y) 3)","next",0.26953125],["(/.f64 x (*.f64 y 3))","done",0.20703125]],"compiler":[[9,7],[7,5],[9,7],[7,5],[7,5],[7,5],[9,7],[7,5]],"count":[[52,5]],"kept":[{"done":[1,1],"fresh":[3,0],"new":[47,3],"picked":[1,1]}],"min-error":[0],"time":8.511962890625,"type":"prune"},{"compiler":[[13,6]],"locations":[["(/.f64 (/.f64 x y) 3)",0.26953125,true]],"time":3.029052734375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 x y) 3)","y","-inf",0.14794921875],["(/.f64 (/.f64 x y) 3)","y","inf",0.176025390625],["(/.f64 (/.f64 x y) 3)","y","0",0.14111328125],["(/.f64 (/.f64 x y) 3)","x","-inf",0.158935546875],["(/.f64 (/.f64 x y) 3)","x","inf",0.155029296875],["(/.f64 (/.f64 x y) 3)","x","0",0.176025390625]],"time":1.041015625,"type":"series"},{"count":[[1,27]],"egraph":[[2,1786,7,0.017796375],[1,135,7,0.0024124999999999997],[0,6,7,0.000195]],"inputs":[["(/.f64 (/.f64 x y) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 x y) 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (/.f64 1 y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 x y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 2) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 2) 1/9)) (cbrt.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (cbrt.f64 (/.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 x y) 1/3)) (sqrt.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x y)) (*.f64 (sqrt.f64 (/.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) y) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 3) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 3) (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x y) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 x y) 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (/.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x y) -3))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (/.f64 x y) 2) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (cbrt.f64 (exp.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x y) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x y) 1/3)))))))"]],"rules":[["egg-rr",27]],"stop":[["node limit",1]],"time":34.93603515625,"type":"rewrite"},{"count":[[51,27]],"egraph":[[4,18,168,0.000264167],[3,17,168,0.000207417],[2,13,168,0.000150875],[1,9,168,9.7459e-5],[0,6,168,4.85e-5]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"stop":[["saturated",1]],"time":12.833984375,"type":"simplify"},{"compiler":[[230,135]],"time":3.182861328125,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 y) (/.f64 x 3))","done",0.26171875],["(/.f64 x (/.f64 y 1/3))","fresh",0.281913769536884],["(/.f64 (/.f64 1 y) (/.f64 3 x))","next",0.26953125],["(/.f64 (/.f64 x y) 3)","done",0.26953125],["(/.f64 x (*.f64 y 3))","done",0.20703125]],"compiler":[[9,7],[7,5],[9,7],[7,5],[7,5],[7,5],[9,7]],"count":[[32,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[27,0],"picked":[1,1]}],"min-error":[0],"time":4.793212890625,"type":"prune"},{"compiler":[[19,13]],"locations":[["(/.f64 (/.f64 1 y) (/.f64 3 x))",0.26953125,true]],"time":4.548828125,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 1 y) (/.f64 3 x))","x","-inf",0.149169921875],["(/.f64 (/.f64 1 y) (/.f64 3 x))","x","inf",0.1689453125],["(/.f64 (/.f64 1 y) (/.f64 3 x))","x","0",0.139892578125],["(/.f64 (/.f64 1 y) (/.f64 3 x))","y","-inf",0.156005859375],["(/.f64 (/.f64 1 y) (/.f64 3 x))","y","inf",0.1689453125],["(/.f64 (/.f64 1 y) (/.f64 3 x))","y","0",0.177978515625]],"time":1.028076171875,"type":"series"},{"count":[[1,41]],"egraph":[[2,2288,7,0.020135042],[1,175,7,0.003143959],[0,8,10,0.000249167]],"inputs":[["(/.f64 (/.f64 1 y) (/.f64 3 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (*.f64 x 1/3) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (/.f64 1 y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) (pow.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) 2) (cbrt.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (*.f64 x 1/3) y)) (sqrt.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (/.f64 1 (/.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) 1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 (/.f64 1 y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) 1) (/.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y -1/2) 1) (/.f64 (pow.f64 y -1/2) (/.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) 3) (/.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y -1/2) 3) (/.f64 (pow.f64 y -1/2) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 3 x)) 2)) (/.f64 (/.f64 1 y) (cbrt.f64 (/.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) (pow.f64 (cbrt.f64 (/.f64 3 x)) 2)) (cbrt.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y -1/2) (pow.f64 (cbrt.f64 (/.f64 3 x)) 2)) (/.f64 (pow.f64 y -1/2) (cbrt.f64 (/.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 3 x))) (/.f64 (/.f64 1 y) (sqrt.f64 (/.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) (sqrt.f64 (/.f64 3 x))) (/.f64 (/.f64 1 (cbrt.f64 y)) (sqrt.f64 (/.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) 1) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) -3) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 1 y) 1/3) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 1 y) 1/3) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 1 y) 1/3) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x 1/3) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 x 1/3) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 3 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 1 y) (/.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x 1/3) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 (pow.f64 y -2) y) (pow.f64 (/.f64 3 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (*.f64 x 1/3) y)))))))"]],"rules":[["egg-rr",41]],"stop":[["node limit",1]],"time":38.052001953125,"type":"rewrite"},{"count":[[65,42]],"egraph":[[4,18,168,0.000275501],[3,17,168,0.00020891699999999998],[2,13,168,0.000152751],[1,9,168,9.870899999999999e-5],[0,6,168,4.9584e-5]],"inputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))"]],"stop":[["saturated",1]],"time":12.425048828125,"type":"simplify"},{"compiler":[[440,328]],"time":6.513916015625,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 y) (/.f64 x 3))","done",0.26171875],["(/.f64 x (/.f64 y 1/3))","fresh",0.281913769536884],["(/.f64 (/.f64 1 y) (/.f64 3 x))","done",0.26953125],["(/.f64 (/.f64 x y) 3)","done",0.26953125],["(/.f64 x (*.f64 y 3))","done",0.20703125]],"compiler":[[9,7],[7,5],[9,7],[7,5],[7,5]],"count":[[47,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[42,0],"picked":[1,1]}],"min-error":[0],"time":6.593994140625,"type":"prune"},{"accuracy":[0.20703125],"baseline":[0.20703125],"branch":[["x",0.20703125,1],["y",0.20703125,1],["(/.f64 x (*.f64 y 3))",0.20703125,1],["(*.f64 y 3)",0.20703125,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[51,34]],"count":[[8,1]],"inputs":[["(/.f64 x (/.f64 y 1/3))","(/.f64 (/.f64 1 y) (/.f64 3 x))","(/.f64 (/.f64 x y) 3)","(*.f64 x (/.f64 1/3 y))","(*.f64 (/.f64 1 y) (/.f64 x 3))","(pow.f64 (*.f64 3 (/.f64 y x)) -1)","(pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) 1/3)) 3)","(/.f64 x (*.f64 y 3))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, C"],"oracle":[1.140653525172991],"outputs":[["(/.f64 x (*.f64 y 3))"]],"time":18.669921875,"times":[["x",4.323974609375],["y",4.5390625],["(/.f64 x (*.f64 y 3))",3.997802734375],["(*.f64 y 3)",4.427001953125]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,7,7,2.0583999999999998e-5],[0,6,7,1.2e-5]],"inputs":[["(/.f64 x (*.f64 y 3))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (*.f64 y 3))"]],"stop":[["fuel",1],["saturated",1]],"time":8.24609375,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.47412109375,"type":"end"}]
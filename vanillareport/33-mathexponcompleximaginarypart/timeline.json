[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7492677569389343,0.13999989989679307,0.1107323431642726],[11,0.7492677569389343,0.14731696783564985,0.10341527522541583],[10,0.7492677569389343,0.1541462312452495,0.09658601181581616],[9,0.7492677569389343,0.16780475806444883,0.08292748499661684],[8,0.7492677569389343,0.17951206676661968,0.07122017629444599],[7,0.7492677569389343,0.20292668417096138,0.047805558890104294],[6,0.7492677569389343,0.21853642910718918,0.032195813953876495],[5,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[4,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[3,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[2,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":27.719970703125,"type":"analyze"},{"outcomes":[["body",512,"invalid",32.61181640625,327],["body",256,"invalid",27.79443359375,515],["body",512,"valid",74.240234375,672],["body",1024,"valid",278.537109375,1334],["body",1024,"invalid",118.221923828125,706],["body",2048,"valid",1.027099609375,2],["body",256,"valid",311.977294921875,6248]],"time":855.27587890625,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,2,2,1.417e-6],[1,11,16,0.000101958],[0,9,16,5.5875e-5]],"inputs":[["0","1"],["(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (exp.f64 im) (sin.f64 re))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (exp.f64 im) (sin.f64 re))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.01123046875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,7,8,7.15e-5],[0,6,8,3.9417e-5]],"inputs":[["(*.f64 (exp.f64 re) (sin.f64 im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 re) (sin.f64 im))"]],"stop":[["saturated",1]],"time":10.287841796875,"type":"simplify"},{"compiler":[[7,5]],"time":0.196044921875,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (sin.f64 im))","next",0.01953125]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01953125],"time":1.1630859375,"type":"prune"},{"compiler":[[13,5]],"locations":[["(*.f64 (exp.f64 re) (sin.f64 im))",0.01171875,true],["(sin.f64 im)",0.01171875,true]],"time":3.8740234375,"type":"localize"},{"count":[[2,28]],"series":[["(*.f64 (exp.f64 re) (sin.f64 im))","im","-inf",0.27490234375],["(*.f64 (exp.f64 re) (sin.f64 im))","im","inf",0.287841796875],["(*.f64 (exp.f64 re) (sin.f64 im))","im","0",0.3310546875],["(*.f64 (exp.f64 re) (sin.f64 im))","re","-inf",0.427978515625],["(*.f64 (exp.f64 re) (sin.f64 im))","re","inf",0.600830078125],["(*.f64 (exp.f64 re) (sin.f64 im))","re","0",0.363037109375],["(sin.f64 im)","im","-inf",0.157958984375],["(sin.f64 im)","im","inf",0.19091796875],["(sin.f64 im)","im","0",0.326171875]],"time":3.072998046875,"type":"series"},{"count":[[2,27]],"egraph":[[2,1324,11,0.015019208],[1,113,11,0.0018254999999999999],[0,6,11,0.000145375]],"inputs":[["(sin.f64 im)","(*.f64 (exp.f64 re) (sin.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 im)) (pow.f64 (cbrt.f64 (sin.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 im)) 2) (cbrt.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 im)) (sqrt.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 im) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 im)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 im) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 im)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sin.f64 im)) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 re (log.f64 (sin.f64 im))))))))"]],"rules":[["egg-rr",11],["egg-rr",16]],"stop":[["node limit",1]],"time":33.889892578125,"type":"rewrite"},{"count":[[55,50]],"egraph":[[8,7938,291,0.057603876],[7,7157,291,0.046198876],[6,6049,291,0.033686251],[5,3866,291,0.022403584],[4,3075,291,0.013340292],[3,1091,292,0.007387917],[2,388,312,0.002719292],[1,149,340,0.0009765010000000001],[0,52,342,0.000264417]],"inputs":[["im","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) im)","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im))","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im)))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))"]],"method":["egg-herbie"],"outputs":[["im","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) im)","(fma.f64 -1/6 (pow.f64 im 3) im)","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im))","(fma.f64 -1/6 (pow.f64 im 3) (fma.f64 1/120 (pow.f64 im 5) im))","(+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 1/120 (pow.f64 im 5)) im)))","(fma.f64 -1/6 (pow.f64 im 3) (fma.f64 -1/5040 (pow.f64 im 7) (fma.f64 1/120 (pow.f64 im 5) im)))","(fma.f64 -1/6 (pow.f64 im 3) (fma.f64 1/120 (pow.f64 im 5) (fma.f64 -1/5040 (pow.f64 im 7) im)))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(*.f64 (+.f64 re 1) (sin.f64 im))","(*.f64 (sin.f64 im) (+.f64 re 1))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)))))","(+.f64 (*.f64 (+.f64 re 1) (sin.f64 im)) (*.f64 (*.f64 re re) (*.f64 (sin.f64 im) 1/2)))","(*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 re (*.f64 re 1/2))))","(fma.f64 (sin.f64 im) (fma.f64 re (*.f64 re 1/2) re) (sin.f64 im))","(*.f64 (sin.f64 im) (fma.f64 re (*.f64 re 1/2) (+.f64 re 1)))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re))))))","(+.f64 (*.f64 (+.f64 re 1) (sin.f64 im)) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (*.f64 re re) (*.f64 (sin.f64 im) 1/2))))","(fma.f64 (+.f64 re 1) (sin.f64 im) (*.f64 (sin.f64 im) (+.f64 (*.f64 re (*.f64 re 1/2)) (*.f64 1/6 (pow.f64 re 3)))))","(*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6)))))","(*.f64 (sin.f64 im) (+.f64 (fma.f64 re (*.f64 re 1/2) 1) (fma.f64 1/6 (pow.f64 re 3) re)))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) im)","(*.f64 im (exp.f64 re))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (exp.f64 re)) (*.f64 im (exp.f64 re)))","(*.f64 (exp.f64 re) (fma.f64 -1/6 (pow.f64 im 3) im))","(*.f64 (fma.f64 -1/6 (pow.f64 im 3) im) (exp.f64 re))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (exp.f64 re)) (fma.f64 1/120 (*.f64 (pow.f64 im 5) (exp.f64 re)) (*.f64 im (exp.f64 re))))","(fma.f64 (*.f64 -1/6 (pow.f64 im 3)) (exp.f64 re) (*.f64 (exp.f64 re) (fma.f64 1/120 (pow.f64 im 5) im)))","(*.f64 (exp.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 1/120 (pow.f64 im 5) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (exp.f64 re)) (fma.f64 1/120 (*.f64 (pow.f64 im 5) (exp.f64 re)) (fma.f64 -1/5040 (*.f64 (pow.f64 im 7) (exp.f64 re)) (*.f64 im (exp.f64 re)))))","(fma.f64 -1/6 (*.f64 (pow.f64 im 3) (exp.f64 re)) (fma.f64 1/120 (*.f64 (pow.f64 im 5) (exp.f64 re)) (fma.f64 im (exp.f64 re) (*.f64 (*.f64 -1/5040 (pow.f64 im 7)) (exp.f64 re)))))","(+.f64 (*.f64 (exp.f64 re) (fma.f64 -1/6 (pow.f64 im 3) im)) (*.f64 (exp.f64 re) (fma.f64 -1/5040 (pow.f64 im 7) (*.f64 1/120 (pow.f64 im 5)))))","(*.f64 (exp.f64 re) (fma.f64 -1/6 (pow.f64 im 3) (fma.f64 1/120 (pow.f64 im 5) (fma.f64 -1/5040 (pow.f64 im 7) im))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))"]],"stop":[["node limit",1]],"time":74.98095703125,"type":"simplify"},{"compiler":[[517,258]],"time":6.510986328125,"type":"eval"},{"alts":[["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","fresh",25.16328603757426],["(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","fresh",26.38812256671511],["(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","next",16.577861192130715]],"compiler":[[11,9],[15,10],[27,17],[11,9],[15,10],[27,17]],"count":[[51,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[50,3],"picked":[1,0]}],"min-error":[0.00390625],"time":9.304931640625,"type":"prune"},{"compiler":[[112,64]],"locations":[["(*.f64 (sin.f64 im) re)",0.12890625,true],["(*.f64 (sin.f64 im) (pow.f64 re 3))",1.4678691038211835,true],["(*.f64 (sin.f64 im) (pow.f64 re 2))",2.412937379387387,true],["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))",5.21481897996247,true]],"time":24.676025390625,"type":"localize"},{"count":[[4,19]],"series":[["(*.f64 (sin.f64 im) re)","re","-inf",0.2158203125],["(*.f64 (sin.f64 im) re)","re","inf",0.260986328125],["(*.f64 (sin.f64 im) re)","re","0",0.322021484375],["(*.f64 (sin.f64 im) re)","im","-inf",0.22802734375],["(*.f64 (sin.f64 im) re)","im","inf",0.261962890625],["(*.f64 (sin.f64 im) re)","im","0",0.31591796875],["(*.f64 (sin.f64 im) (pow.f64 re 3))","re","-inf",0.277099609375],["(*.f64 (sin.f64 im) (pow.f64 re 3))","re","inf",0.2001953125],["(*.f64 (sin.f64 im) (pow.f64 re 3))","re","0",0.267822265625],["(*.f64 (sin.f64 im) (pow.f64 re 3))","im","-inf",0.14404296875],["(*.f64 (sin.f64 im) (pow.f64 re 3))","im","inf",0.174072265625],["(*.f64 (sin.f64 im) (pow.f64 re 3))","im","0",0.794921875],["(*.f64 (sin.f64 im) (pow.f64 re 2))","re","-inf",0.1669921875],["(*.f64 (sin.f64 im) (pow.f64 re 2))","re","inf",0.22509765625],["(*.f64 (sin.f64 im) (pow.f64 re 2))","re","0",0.2490234375],["(*.f64 (sin.f64 im) (pow.f64 re 2))","im","-inf",0.14404296875],["(*.f64 (sin.f64 im) (pow.f64 re 2))","im","inf",0.177978515625],["(*.f64 (sin.f64 im) (pow.f64 re 2))","im","0",0.242919921875],["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))","re","-inf",0.333984375],["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))","re","inf",0.541015625],["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))","re","0",0.48388671875],["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))","im","-inf",0.703125],["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))","im","inf",0.98486328125],["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))","im","0",0.934814453125]],"time":8.9150390625,"type":"series"},{"count":[[4,134]],"egraph":[[2,4110,48,0.030912540999999998],[1,346,48,0.006000915999999999],[0,16,48,0.000497541]],"inputs":[["(+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))","(*.f64 (sin.f64 im) (pow.f64 re 2))","(*.f64 (sin.f64 im) (pow.f64 re 3))","(*.f64 (sin.f64 im) re)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 -1/2 (*.f64 (sin.f64 im) (*.f64 re re))))) (/.f64 (*.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 -1/2 (*.f64 (sin.f64 im) (*.f64 re re))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) (cbrt.f64 (pow.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 2)) (cbrt.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) (sqrt.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3) 1/216 (*.f64 (pow.f64 (*.f64 (sin.f64 im) 1/2) 3) (pow.f64 re 6))) (/.f64 1 (fma.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (-.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))) (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36) (*.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4)) (/.f64 1 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 -1/2 (*.f64 (sin.f64 im) (*.f64 re re))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (-.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))) (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36)) (fma.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3) 1/216 (*.f64 (pow.f64 (*.f64 (sin.f64 im) 1/2) 3) (pow.f64 re 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 -1/2 (*.f64 (sin.f64 im) (*.f64 re re)))) (-.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36) (*.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3) 1/216 (*.f64 (pow.f64 (*.f64 (sin.f64 im) 1/2) 3) (pow.f64 re 6))) (fma.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (-.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))) (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3) 1/216 (*.f64 (pow.f64 (*.f64 (sin.f64 im) 1/2) 3) (pow.f64 re 6))) (fma.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4 (-.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36) (*.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36) (*.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4)) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 -1/2 (*.f64 (sin.f64 im) (*.f64 re re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3) 1/216 (*.f64 (pow.f64 (*.f64 (sin.f64 im) 1/2) 3) (pow.f64 re 6)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (-.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))) (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36) (*.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4))) (neg.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 -1/2 (*.f64 (sin.f64 im) (*.f64 re re))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4 (neg.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36))) (-.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (-.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))) (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36)) (fma.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3) 1/216 (*.f64 (pow.f64 (*.f64 (sin.f64 im) 1/2) 3) (pow.f64 re 6)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 -1/2 (*.f64 (sin.f64 im) (*.f64 re re)))) (-.f64 (*.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)) 1/36) (*.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)) 1/4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))) (pow.f64 (pow.f64 (pow.f64 (exp.f64 re) re) (sin.f64 im)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 (pow.f64 re 3)) (sin.f64 im)) 1/6) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) (pow.f64 (pow.f64 (exp.f64 (pow.f64 re 3)) (sin.f64 im)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 re) re) (sin.f64 im)) 1/2) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 re 3) (*.f64 1/6 (sin.f64 im)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 1/6 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)) 1 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 re re) (*.f64 (sin.f64 im) 1/2) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 im) (*.f64 re re)) 1/2 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) 1 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 1/6 (sin.f64 im))) re) (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/6 (sin.f64 im))) re) 2) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 1/6 (sin.f64 im))) re) 2) (*.f64 (cbrt.f64 (*.f64 1/6 (sin.f64 im))) re) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 2) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) 2) (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 re (cbrt.f64 (sin.f64 im))) 2) (*.f64 (*.f64 re (cbrt.f64 (sin.f64 im))) 1/6) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 re re))) 2) (*.f64 (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 re re))) 1/2) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))) (sqrt.f64 (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6))) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 (sin.f64 im) 1/2)) re) (*.f64 (sqrt.f64 (*.f64 (sin.f64 im) 1/2)) re) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (sin.f64 im)) (pow.f64 re 3/2)) (*.f64 (*.f64 (sqrt.f64 (sin.f64 im)) (pow.f64 re 3/2)) 1/6) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 re (sqrt.f64 (sin.f64 im))) (*.f64 (*.f64 re (sqrt.f64 (sin.f64 im))) 1/2) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (sin.f64 im)) (pow.f64 re 3) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 im) 1/2) (*.f64 re re) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (*.f64 re re)) (sin.f64 im) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 re re))) 2)) (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 re re))) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (*.f64 re (sqrt.f64 (sin.f64 im)))) (*.f64 re (sqrt.f64 (sin.f64 im))) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (sin.f64 im) 1/2) re) re (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (sin.f64 im) 1/2) 1) (*.f64 re re) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (sin.f64 im) 1/2) (cbrt.f64 (pow.f64 re 4))) (pow.f64 (cbrt.f64 re) 2) (*.f64 (sin.f64 im) (*.f64 (pow.f64 re 3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (pow.f64 re 3)) (sin.f64 im) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (pow.f64 (*.f64 re (cbrt.f64 (sin.f64 im))) 2)) (*.f64 re (cbrt.f64 (sin.f64 im))) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (*.f64 (sqrt.f64 (sin.f64 im)) (pow.f64 re 3/2))) (*.f64 (sqrt.f64 (sin.f64 im)) (pow.f64 re 3/2)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/6 (sin.f64 im)) re) (*.f64 re re) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/6 (sin.f64 im)) (*.f64 re re)) re (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/6 (sin.f64 im)) 1) (pow.f64 re 3) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/6 (sin.f64 im)) (pow.f64 re 3/2)) (pow.f64 re 3/2) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 im) (*.f64 re re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 re) re) (sin.f64 im))) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 re) re) (sin.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 re) re) (sin.f64 im)))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 re) re) (sin.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 im) (*.f64 re re)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 im) (*.f64 re re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 im) (*.f64 re re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (*.f64 re re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 re (sqrt.f64 (sin.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 im) 3) (pow.f64 re 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 re 4) (pow.f64 (sin.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 re) re) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 re re)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 im) (*.f64 re re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 im) 3) (pow.f64 re 6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 im) (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 im) (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 im) (*.f64 re re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 im) (*.f64 re re))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 im) (pow.f64 re 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 re 3)) (sin.f64 im))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 re 3)) (sin.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 re 3)) (sin.f64 im)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 re 3)) (sin.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 re (cbrt.f64 (sin.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (sin.f64 im)) (pow.f64 re 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 im) 3) (pow.f64 (pow.f64 re 3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 re 3) 3) (pow.f64 (sin.f64 im) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 re 6) (pow.f64 (sin.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 re 3)) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 im) (pow.f64 re 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 im) 3) (pow.f64 (pow.f64 re 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 re 3) 3) (pow.f64 (sin.f64 im) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 im) (pow.f64 re 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 im) (pow.f64 re 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 im) (pow.f64 re 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 im) (pow.f64 re 3))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 im) re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 re) (sin.f64 im))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 re) (sin.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 re) (sin.f64 im)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 re) (sin.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 im) re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 im) re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 im) re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 im) re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 im) 3) (pow.f64 re 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 re 3) (pow.f64 (sin.f64 im) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 im) re) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 re) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 im) re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 im) 3) (pow.f64 re 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 re 3) (pow.f64 (sin.f64 im) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 im) re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 im) re)) 1))))))"]],"rules":[["egg-rr",20],["egg-rr",20],["egg-rr",20],["egg-rr",74]],"stop":[["node limit",1]],"time":60.64794921875,"type":"rewrite"},{"count":[[153,168]],"egraph":[[5,7247,448,0.040506042],[4,6354,448,0.027379167],[3,3442,448,0.015327084],[2,760,471,0.006070209],[1,223,512,0.001571792],[0,82,512,0.000364]],"inputs":[["(*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im)","(+.f64 (*.f64 (+.f64 (*.f64 -1/12 (pow.f64 re 2)) (*.f64 -1/36 (pow.f64 re 3))) (pow.f64 im 3)) (*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im))","(+.f64 (*.f64 (+.f64 (*.f64 1/240 (pow.f64 re 2)) (*.f64 1/720 (pow.f64 re 3))) (pow.f64 im 5)) (+.f64 (*.f64 (+.f64 (*.f64 -1/12 (pow.f64 re 2)) (*.f64 -1/36 (pow.f64 re 3))) (pow.f64 im 3)) (*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im)))","(+.f64 (*.f64 (+.f64 (*.f64 1/240 (pow.f64 re 2)) (*.f64 1/720 (pow.f64 re 3))) (pow.f64 im 5)) (+.f64 (*.f64 (+.f64 (*.f64 -1/12 (pow.f64 re 2)) (*.f64 -1/36 (pow.f64 re 3))) (pow.f64 im 3)) (+.f64 (*.f64 (+.f64 (*.f64 -1/10080 (pow.f64 re 2)) (*.f64 -1/30240 (pow.f64 re 3))) (pow.f64 im 7)) (*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im))))","(*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))","(*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)))","(*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)))","(*.f64 (pow.f64 re 2) im)","(+.f64 (*.f64 (pow.f64 re 2) im) (*.f64 -1/6 (*.f64 (pow.f64 re 2) (pow.f64 im 3))))","(+.f64 (*.f64 (pow.f64 re 2) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 2) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 2) (pow.f64 im 5)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 2) (pow.f64 im 7))) (+.f64 (*.f64 (pow.f64 re 2) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 2) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 2) (pow.f64 im 5))))))","(*.f64 (pow.f64 re 3) im)","(+.f64 (*.f64 (pow.f64 re 3) im) (*.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3))))","(+.f64 (*.f64 (pow.f64 re 3) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 3) (pow.f64 im 5)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 3) (pow.f64 im 7))) (+.f64 (*.f64 (pow.f64 re 3) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 3) (pow.f64 im 5))))))","(*.f64 re im)","(+.f64 (*.f64 -1/6 (*.f64 re (pow.f64 im 3))) (*.f64 re im))","(+.f64 (*.f64 -1/6 (*.f64 re (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 re (pow.f64 im 5))) (*.f64 re im)))","(+.f64 (*.f64 -1/5040 (*.f64 re (pow.f64 im 7))) (+.f64 (*.f64 -1/6 (*.f64 re (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 re (pow.f64 im 5))) (*.f64 re im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im)","(*.f64 (fma.f64 1/2 (*.f64 re re) (*.f64 1/6 (pow.f64 re 3))) im)","(*.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im)","(*.f64 re (*.f64 im (*.f64 re (+.f64 1/2 (*.f64 re 1/6)))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/12 (pow.f64 re 2)) (*.f64 -1/36 (pow.f64 re 3))) (pow.f64 im 3)) (*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im))","(fma.f64 (fma.f64 -1/12 (*.f64 re re) (*.f64 (pow.f64 re 3) -1/36)) (pow.f64 im 3) (*.f64 (fma.f64 1/2 (*.f64 re re) (*.f64 1/6 (pow.f64 re 3))) im))","(fma.f64 (fma.f64 1/2 (*.f64 re re) (*.f64 1/6 (pow.f64 re 3))) im (*.f64 (fma.f64 (*.f64 re re) -1/12 (*.f64 (pow.f64 re 3) -1/36)) (pow.f64 im 3)))","(fma.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im (*.f64 (*.f64 (*.f64 re re) (+.f64 -1/12 (*.f64 re -1/36))) (pow.f64 im 3)))","(fma.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im (*.f64 (*.f64 re re) (*.f64 (pow.f64 im 3) (+.f64 -1/12 (*.f64 re -1/36)))))","(+.f64 (*.f64 (+.f64 (*.f64 1/240 (pow.f64 re 2)) (*.f64 1/720 (pow.f64 re 3))) (pow.f64 im 5)) (+.f64 (*.f64 (+.f64 (*.f64 -1/12 (pow.f64 re 2)) (*.f64 -1/36 (pow.f64 re 3))) (pow.f64 im 3)) (*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im)))","(fma.f64 (fma.f64 1/240 (*.f64 re re) (*.f64 (pow.f64 re 3) 1/720)) (pow.f64 im 5) (fma.f64 (fma.f64 -1/12 (*.f64 re re) (*.f64 (pow.f64 re 3) -1/36)) (pow.f64 im 3) (*.f64 (fma.f64 1/2 (*.f64 re re) (*.f64 1/6 (pow.f64 re 3))) im)))","(fma.f64 (fma.f64 (*.f64 re re) 1/240 (*.f64 (pow.f64 re 3) 1/720)) (pow.f64 im 5) (fma.f64 (fma.f64 1/2 (*.f64 re re) (*.f64 1/6 (pow.f64 re 3))) im (*.f64 (fma.f64 (*.f64 re re) -1/12 (*.f64 (pow.f64 re 3) -1/36)) (pow.f64 im 3))))","(fma.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im (fma.f64 (*.f64 (*.f64 re re) (+.f64 1/240 (*.f64 re 1/720))) (pow.f64 im 5) (*.f64 (*.f64 (*.f64 re re) (+.f64 -1/12 (*.f64 re -1/36))) (pow.f64 im 3))))","(fma.f64 (*.f64 (*.f64 re re) (+.f64 -1/12 (*.f64 re -1/36))) (pow.f64 im 3) (fma.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im (*.f64 (*.f64 (*.f64 re re) (pow.f64 im 5)) (+.f64 1/240 (*.f64 re 1/720)))))","(+.f64 (*.f64 (+.f64 (*.f64 1/240 (pow.f64 re 2)) (*.f64 1/720 (pow.f64 re 3))) (pow.f64 im 5)) (+.f64 (*.f64 (+.f64 (*.f64 -1/12 (pow.f64 re 2)) (*.f64 -1/36 (pow.f64 re 3))) (pow.f64 im 3)) (+.f64 (*.f64 (+.f64 (*.f64 -1/10080 (pow.f64 re 2)) (*.f64 -1/30240 (pow.f64 re 3))) (pow.f64 im 7)) (*.f64 (+.f64 (*.f64 1/2 (pow.f64 re 2)) (*.f64 1/6 (pow.f64 re 3))) im))))","(fma.f64 (fma.f64 1/240 (*.f64 re re) (*.f64 (pow.f64 re 3) 1/720)) (pow.f64 im 5) (fma.f64 (fma.f64 -1/12 (*.f64 re re) (*.f64 (pow.f64 re 3) -1/36)) (pow.f64 im 3) (fma.f64 (fma.f64 -1/10080 (*.f64 re re) (*.f64 (pow.f64 re 3) -1/30240)) (pow.f64 im 7) (*.f64 (fma.f64 1/2 (*.f64 re re) (*.f64 1/6 (pow.f64 re 3))) im))))","(fma.f64 (fma.f64 (*.f64 re re) 1/240 (*.f64 (pow.f64 re 3) 1/720)) (pow.f64 im 5) (fma.f64 (fma.f64 (*.f64 re re) -1/12 (*.f64 (pow.f64 re 3) -1/36)) (pow.f64 im 3) (fma.f64 (fma.f64 1/2 (*.f64 re re) (*.f64 1/6 (pow.f64 re 3))) im (*.f64 (fma.f64 (*.f64 re re) -1/10080 (*.f64 (pow.f64 re 3) -1/30240)) (pow.f64 im 7)))))","(fma.f64 (*.f64 (*.f64 re re) (+.f64 1/240 (*.f64 re 1/720))) (pow.f64 im 5) (fma.f64 (*.f64 (*.f64 re re) (+.f64 -1/10080 (*.f64 re -1/30240))) (pow.f64 im 7) (fma.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im (*.f64 (*.f64 (*.f64 re re) (+.f64 -1/12 (*.f64 re -1/36))) (pow.f64 im 3)))))","(fma.f64 (*.f64 re (*.f64 re (+.f64 1/240 (*.f64 re 1/720)))) (pow.f64 im 5) (fma.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im (fma.f64 (*.f64 (*.f64 re re) (+.f64 -1/12 (*.f64 re -1/36))) (pow.f64 im 3) (*.f64 (*.f64 (*.f64 re re) (+.f64 -1/10080 (*.f64 re -1/30240))) (pow.f64 im 7)))))","(fma.f64 (*.f64 re (*.f64 re (+.f64 1/240 (*.f64 re 1/720)))) (pow.f64 im 5) (fma.f64 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))) im (fma.f64 (*.f64 (*.f64 re re) (+.f64 -1/12 (*.f64 re -1/36))) (pow.f64 im 3) (*.f64 (*.f64 re re) (*.f64 (pow.f64 im 7) (+.f64 -1/10080 (*.f64 re -1/30240)))))))","(*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))","(*.f64 1/2 (*.f64 (*.f64 re re) (sin.f64 im)))","(*.f64 1/2 (*.f64 re (*.f64 re (sin.f64 im))))","(*.f64 (*.f64 1/2 (*.f64 re re)) (sin.f64 im))","(*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)))","(*.f64 1/6 (*.f64 (pow.f64 re 3) (sin.f64 im)))","(*.f64 (pow.f64 re 3) (*.f64 1/6 (sin.f64 im)))","(*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)))","(*.f64 1/6 (*.f64 (pow.f64 re 3) (sin.f64 im)))","(*.f64 (pow.f64 re 3) (*.f64 1/6 (sin.f64 im)))","(*.f64 (pow.f64 re 2) im)","(*.f64 (*.f64 re re) im)","(*.f64 re (*.f64 re im))","(+.f64 (*.f64 (pow.f64 re 2) im) (*.f64 -1/6 (*.f64 (pow.f64 re 2) (pow.f64 im 3))))","(fma.f64 (*.f64 re re) im (*.f64 -1/6 (*.f64 (*.f64 re re) (pow.f64 im 3))))","(fma.f64 (*.f64 re re) im (*.f64 (*.f64 re re) (*.f64 (pow.f64 im 3) -1/6)))","(*.f64 (*.f64 re re) (+.f64 (*.f64 (pow.f64 im 3) -1/6) im))","(*.f64 re (*.f64 re (+.f64 im (*.f64 (pow.f64 im 3) -1/6))))","(+.f64 (*.f64 (pow.f64 re 2) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 2) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 2) (pow.f64 im 5)))))","(fma.f64 (*.f64 re re) im (fma.f64 -1/6 (*.f64 (*.f64 re re) (pow.f64 im 3)) (*.f64 1/120 (*.f64 (*.f64 re re) (pow.f64 im 5)))))","(fma.f64 (*.f64 re re) im (fma.f64 -1/6 (*.f64 re (*.f64 re (pow.f64 im 3))) (*.f64 (*.f64 1/120 (pow.f64 im 5)) (*.f64 re re))))","(fma.f64 (*.f64 re re) (*.f64 (pow.f64 im 3) -1/6) (*.f64 (*.f64 re re) (+.f64 im (*.f64 (pow.f64 im 5) 1/120))))","(*.f64 (*.f64 re re) (+.f64 im (+.f64 (*.f64 (pow.f64 im 5) 1/120) (*.f64 (pow.f64 im 3) -1/6))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 2) (pow.f64 im 7))) (+.f64 (*.f64 (pow.f64 re 2) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 2) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 2) (pow.f64 im 5))))))","(fma.f64 -1/5040 (*.f64 (*.f64 re re) (pow.f64 im 7)) (fma.f64 (*.f64 re re) im (fma.f64 -1/6 (*.f64 (*.f64 re re) (pow.f64 im 3)) (*.f64 1/120 (*.f64 (*.f64 re re) (pow.f64 im 5))))))","(fma.f64 -1/5040 (*.f64 re (*.f64 re (pow.f64 im 7))) (fma.f64 (*.f64 re re) im (fma.f64 -1/6 (*.f64 re (*.f64 re (pow.f64 im 3))) (*.f64 (*.f64 1/120 (pow.f64 im 5)) (*.f64 re re)))))","(+.f64 (*.f64 (*.f64 re re) (+.f64 (*.f64 (pow.f64 im 3) -1/6) im)) (*.f64 (*.f64 re re) (+.f64 (*.f64 (pow.f64 im 5) 1/120) (*.f64 (pow.f64 im 7) -1/5040))))","(*.f64 (*.f64 re re) (+.f64 (+.f64 (*.f64 (pow.f64 im 7) -1/5040) (*.f64 (pow.f64 im 5) 1/120)) (+.f64 im (*.f64 (pow.f64 im 3) -1/6))))","(*.f64 (pow.f64 re 3) im)","(+.f64 (*.f64 (pow.f64 re 3) im) (*.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3))))","(fma.f64 (pow.f64 re 3) im (*.f64 (*.f64 -1/6 (pow.f64 re 3)) (pow.f64 im 3)))","(fma.f64 (pow.f64 re 3) im (*.f64 (pow.f64 re 3) (*.f64 (pow.f64 im 3) -1/6)))","(*.f64 (pow.f64 re 3) (+.f64 im (*.f64 (pow.f64 im 3) -1/6)))","(+.f64 (*.f64 (pow.f64 re 3) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 3) (pow.f64 im 5)))))","(fma.f64 (pow.f64 re 3) im (fma.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3)) (*.f64 1/120 (*.f64 (pow.f64 re 3) (pow.f64 im 5)))))","(fma.f64 (pow.f64 re 3) im (fma.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3)) (*.f64 (pow.f64 re 3) (*.f64 (pow.f64 im 5) 1/120))))","(fma.f64 (pow.f64 re 3) im (*.f64 (pow.f64 re 3) (+.f64 (*.f64 (pow.f64 im 3) -1/6) (*.f64 (pow.f64 im 5) 1/120))))","(*.f64 (pow.f64 re 3) (+.f64 im (+.f64 (*.f64 (pow.f64 im 5) 1/120) (*.f64 (pow.f64 im 3) -1/6))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 3) (pow.f64 im 7))) (+.f64 (*.f64 (pow.f64 re 3) im) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3))) (*.f64 1/120 (*.f64 (pow.f64 re 3) (pow.f64 im 5))))))","(fma.f64 -1/5040 (*.f64 (pow.f64 re 3) (pow.f64 im 7)) (fma.f64 (pow.f64 re 3) im (fma.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3)) (*.f64 1/120 (*.f64 (pow.f64 re 3) (pow.f64 im 5))))))","(fma.f64 -1/5040 (*.f64 (pow.f64 re 3) (pow.f64 im 7)) (fma.f64 (pow.f64 re 3) im (fma.f64 -1/6 (*.f64 (pow.f64 re 3) (pow.f64 im 3)) (*.f64 (pow.f64 re 3) (*.f64 (pow.f64 im 5) 1/120)))))","(+.f64 (*.f64 (pow.f64 re 3) (+.f64 im (*.f64 (pow.f64 im 3) -1/6))) (*.f64 (pow.f64 re 3) (+.f64 (*.f64 (pow.f64 im 5) 1/120) (*.f64 (pow.f64 im 7) -1/5040))))","(*.f64 (pow.f64 re 3) (+.f64 (+.f64 (*.f64 (pow.f64 im 5) 1/120) (*.f64 (pow.f64 im 3) -1/6)) (+.f64 im (*.f64 (pow.f64 im 7) -1/5040))))","(*.f64 re im)","(+.f64 (*.f64 -1/6 (*.f64 re (pow.f64 im 3))) (*.f64 re im))","(fma.f64 -1/6 (*.f64 re (pow.f64 im 3)) (*.f64 re im))","(fma.f64 re im (*.f64 re (*.f64 (pow.f64 im 3) -1/6)))","(*.f64 re (+.f64 im (*.f64 (pow.f64 im 3) -1/6)))","(+.f64 (*.f64 -1/6 (*.f64 re (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 re (pow.f64 im 5))) (*.f64 re im)))","(fma.f64 -1/6 (*.f64 re (pow.f64 im 3)) (fma.f64 1/120 (*.f64 re (pow.f64 im 5)) (*.f64 re im)))","(fma.f64 -1/6 (*.f64 re (pow.f64 im 3)) (fma.f64 (*.f64 re 1/120) (pow.f64 im 5) (*.f64 re im)))","(fma.f64 re im (*.f64 re (+.f64 (*.f64 (pow.f64 im 3) -1/6) (*.f64 (pow.f64 im 5) 1/120))))","(*.f64 re (+.f64 im (+.f64 (*.f64 (pow.f64 im 5) 1/120) (*.f64 (pow.f64 im 3) -1/6))))","(+.f64 (*.f64 -1/5040 (*.f64 re (pow.f64 im 7))) (+.f64 (*.f64 -1/6 (*.f64 re (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 re (pow.f64 im 5))) (*.f64 re im))))","(fma.f64 -1/5040 (*.f64 re (pow.f64 im 7)) (fma.f64 -1/6 (*.f64 re (pow.f64 im 3)) (fma.f64 1/120 (*.f64 re (pow.f64 im 5)) (*.f64 re im))))","(fma.f64 -1/5040 (*.f64 re (pow.f64 im 7)) (fma.f64 -1/6 (*.f64 re (pow.f64 im 3)) (fma.f64 (*.f64 re 1/120) (pow.f64 im 5) (*.f64 re im))))","(fma.f64 re (*.f64 (pow.f64 im 7) -1/5040) (fma.f64 re im (*.f64 re (+.f64 (*.f64 (pow.f64 im 3) -1/6) (*.f64 (pow.f64 im 5) 1/120)))))","(*.f64 re (+.f64 (+.f64 im (*.f64 (pow.f64 im 5) 1/120)) (+.f64 (*.f64 (pow.f64 im 7) -1/5040) (*.f64 (pow.f64 im 3) -1/6))))"]],"stop":[["node limit",1]],"time":59.05712890625,"type":"simplify"},{"compiler":[[5465,2921]],"time":49.921875,"type":"eval"},{"alts":[["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","next",25.16328603757426],["(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","fresh",26.38812256671511],["(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","done",16.577861192130715]],"compiler":[[11,9],[15,10],[27,17],[11,9],[15,10]],"count":[[171,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[168,0],"picked":[1,1]}],"min-error":[0.00390625],"time":45.13818359375,"type":"prune"},{"compiler":[[30,12]],"locations":[["(*.f64 (sin.f64 im) (exp.f64 re))",0.01171875,true],["(sin.f64 im)",0.01171875,false],["(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))",0.21339736217055258,true],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)",3.2523055913994336,true]],"time":6.429931640625,"type":"localize"},{"count":[[3,40]],"series":[["(*.f64 (sin.f64 im) (exp.f64 re))","re","-inf",0.138916015625],["(*.f64 (sin.f64 im) (exp.f64 re))","re","inf",0.140869140625],["(*.f64 (sin.f64 im) (exp.f64 re))","re","0",0.18701171875],["(*.f64 (sin.f64 im) (exp.f64 re))","im","-inf",0.14013671875],["(*.f64 (sin.f64 im) (exp.f64 re))","im","inf",0.166015625],["(*.f64 (sin.f64 im) (exp.f64 re))","im","0",0.1708984375],["(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))","re","-inf",0.156005859375],["(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))","re","inf",0.18212890625],["(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))","re","0",0.197998046875],["(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))","im","-inf",0.18994140625],["(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))","im","inf",0.1640625],["(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))","im","0",0.18505859375],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","re","-inf",0.171875],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","re","inf",0.15185546875],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","re","0",0.196044921875],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","im","-inf",0.156005859375],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","im","inf",0.158203125],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","im","0",0.25390625]],"time":3.302978515625,"type":"series"},{"count":[[3,115]],"egraph":[[2,2553,25,0.021724708],[1,189,25,0.003320417],[0,9,39,0.000244417]],"inputs":[["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","(+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))","(*.f64 (sin.f64 im) (exp.f64 re))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (sin.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (fma.f64 (sin.f64 im) (exp.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 im) (exp.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 re) (sin.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 re)) 2) (*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 2) (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 im)) 2) (*.f64 (cbrt.f64 (sin.f64 im)) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 re)) (*.f64 (sqrt.f64 (exp.f64 re)) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) (sqrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 im)) (*.f64 (sqrt.f64 (sin.f64 im)) (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1) (/.f64 1 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1) (/.f64 1 (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 1) (-.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 im) (pow.f64 (cbrt.f64 (exp.f64 re)) 2)) (cbrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 im) (sqrt.f64 (exp.f64 re))) (sqrt.f64 (exp.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (pow.f64 (cbrt.f64 (sin.f64 im)) 2)) (cbrt.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 re) (sqrt.f64 (sin.f64 im))) (sqrt.f64 (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (-.f64 1 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1) (-.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1)) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1)) (neg.f64 (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) 3)) (+.f64 1 (-.f64 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) (fma.f64 (sin.f64 im) (exp.f64 re) -1)) (fma.f64 (sin.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) (fma.f64 (sin.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (sin.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (exp.f64 re)) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 re (log.f64 (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))) (/.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2) (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sin.f64 im) (exp.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2) (*.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) (*.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3)) (/.f64 1 (+.f64 1 (*.f64 (*.f64 (sin.f64 im) (exp.f64 re)) (fma.f64 (sin.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)) (/.f64 1 (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (*.f64 (*.f64 (sin.f64 im) (exp.f64 re)) (fma.f64 (sin.f64 im) (exp.f64 re) -1))) (+.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) (-.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3)) (+.f64 1 (*.f64 (*.f64 (sin.f64 im) (exp.f64 re)) (fma.f64 (sin.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3)) (+.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2) (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)) (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3))) (neg.f64 (+.f64 1 (*.f64 (*.f64 (sin.f64 im) (exp.f64 re)) (fma.f64 (sin.f64 im) (exp.f64 re) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))) (neg.f64 (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2) 1) (fma.f64 (sin.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3)) 1) (+.f64 1 (*.f64 (*.f64 (sin.f64 im) (exp.f64 re)) (fma.f64 (sin.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)) 1) (-.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 im) (exp.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 re) (sin.f64 im) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 2) (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) (sqrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 (sin.f64 im) (exp.f64 re) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (fma.f64 (sin.f64 im) (exp.f64 re) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))) (/.f64 1 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)) (/.f64 1 (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1) (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (-.f64 1 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1) (-.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 3) -1)) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1) 2) -1)) (neg.f64 (+.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) 3)) (+.f64 1 (-.f64 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) (fma.f64 (sin.f64 im) (exp.f64 re) -1)) (fma.f64 (sin.f64 im) (exp.f64 re) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (fma.f64 (sin.f64 im) (exp.f64 re) -1) (fma.f64 (sin.f64 im) (exp.f64 re) -1))) (-.f64 1 (fma.f64 (sin.f64 im) (exp.f64 re) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 im) (exp.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (exp.f64 re)) (sin.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 im) (exp.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 im) (exp.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 re (log.f64 (sin.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (sin.f64 im) (exp.f64 re) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) (sqrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) -1)))))"]],"rules":[["egg-rr",32],["egg-rr",36],["egg-rr",47]],"stop":[["node limit",1]],"time":49.1689453125,"type":"rewrite"},{"count":[[155,115]],"egraph":[[8,7514,509,0.056875251],[7,6730,509,0.044518709000000004],[6,5628,509,0.032425334],[5,3411,509,0.021821792],[4,2546,509,0.012868876000000001],[3,1201,509,0.007054292],[2,413,546,0.002920417],[1,155,600,0.001022542],[0,55,612,0.000293667]],"inputs":[["(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (sin.f64 im) (exp.f64 re))","1","(+.f64 1 (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 1 (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 1 (*.f64 (exp.f64 re) im))))","(+.f64 1 (sin.f64 im))","(+.f64 (sin.f64 im) (+.f64 1 (*.f64 (sin.f64 im) re)))","(+.f64 (sin.f64 im) (+.f64 1 (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (+.f64 1 (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))))","(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (*.f64 (exp.f64 re) im))","(*.f64 (exp.f64 re) (+.f64 im (*.f64 -1/6 (pow.f64 im 3))))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 (exp.f64 re) im (*.f64 (exp.f64 re) (*.f64 (pow.f64 im 5) 1/120))))","(fma.f64 (exp.f64 re) im (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 1/120 (pow.f64 im 5)))))","(*.f64 (exp.f64 re) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 im (*.f64 1/120 (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (fma.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7)) (*.f64 (exp.f64 re) im))))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (fma.f64 (exp.f64 re) im (*.f64 (pow.f64 im 7) (*.f64 (exp.f64 re) -1/5040)))))","(+.f64 (*.f64 (exp.f64 re) (+.f64 im (*.f64 -1/6 (pow.f64 im 3)))) (*.f64 (exp.f64 re) (+.f64 (*.f64 1/120 (pow.f64 im 5)) (*.f64 -1/5040 (pow.f64 im 7)))))","(*.f64 (exp.f64 re) (+.f64 (+.f64 im (*.f64 -1/6 (pow.f64 im 3))) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 1/120 (pow.f64 im 5)))))","(*.f64 (exp.f64 re) (+.f64 im (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 1/120 (pow.f64 im 5))))))","(*.f64 (exp.f64 re) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 im (*.f64 1/120 (pow.f64 im 5))))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(+.f64 (sin.f64 im) (*.f64 re (sin.f64 im)))","(*.f64 (+.f64 re 1) (sin.f64 im))","(*.f64 (sin.f64 im) (+.f64 re 1))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)))))","(+.f64 (sin.f64 im) (fma.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)) (*.f64 re (sin.f64 im))))","(*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 re (*.f64 re 1/2))))","(*.f64 (sin.f64 im) (+.f64 re (+.f64 1 (*.f64 re (*.f64 re 1/2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re))))))","(+.f64 (*.f64 (+.f64 re 1) (sin.f64 im)) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))","(fma.f64 (+.f64 re 1) (sin.f64 im) (*.f64 (sin.f64 im) (+.f64 (*.f64 re (*.f64 re 1/2)) (*.f64 1/6 (pow.f64 re 3)))))","(*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6)))))","(*.f64 (sin.f64 im) (+.f64 re (+.f64 1 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))))))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (sin.f64 im) (exp.f64 re))","(*.f64 (exp.f64 re) (sin.f64 im))","1","(+.f64 1 (*.f64 (exp.f64 re) im))","(+.f64 (*.f64 (exp.f64 re) im) 1)","(fma.f64 (exp.f64 re) im 1)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 1 (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (+.f64 (*.f64 (exp.f64 re) im) 1))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 (exp.f64 re) im 1))","(+.f64 (*.f64 (exp.f64 re) (+.f64 im (*.f64 -1/6 (pow.f64 im 3)))) 1)","(+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 1 (*.f64 (exp.f64 re) im))))","(fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (+.f64 (*.f64 (exp.f64 re) im) 1)))","(fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 (exp.f64 re) im 1)))","(+.f64 (*.f64 (exp.f64 re) (+.f64 im (*.f64 1/120 (pow.f64 im 5)))) (fma.f64 (exp.f64 re) (*.f64 -1/6 (pow.f64 im 3)) 1))","(+.f64 (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 im (*.f64 1/120 (pow.f64 im 5))))) 1)","(+.f64 1 (sin.f64 im))","(+.f64 (sin.f64 im) 1)","(+.f64 (sin.f64 im) (+.f64 1 (*.f64 (sin.f64 im) re)))","(+.f64 (sin.f64 im) (+.f64 (*.f64 re (sin.f64 im)) 1))","(+.f64 (sin.f64 im) (fma.f64 re (sin.f64 im) 1))","(fma.f64 (+.f64 re 1) (sin.f64 im) 1)","(+.f64 (sin.f64 im) (+.f64 1 (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (+.f64 (fma.f64 (sin.f64 im) re (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)))) 1))","(+.f64 (sin.f64 im) (+.f64 (fma.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)) (*.f64 re (sin.f64 im))) 1))","(+.f64 (*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 re (*.f64 re 1/2)))) 1)","(+.f64 (*.f64 (sin.f64 im) (+.f64 re (+.f64 1 (*.f64 re (*.f64 re 1/2))))) 1)","(+.f64 (sin.f64 im) (+.f64 1 (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))))","(+.f64 (sin.f64 im) (+.f64 (fma.f64 (sin.f64 im) re (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re))))) 1))","(+.f64 (+.f64 (*.f64 (+.f64 re 1) (sin.f64 im)) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2)))) 1)","(+.f64 (*.f64 (sin.f64 im) (+.f64 (*.f64 re (*.f64 re 1/2)) (*.f64 1/6 (pow.f64 re 3)))) (fma.f64 (+.f64 re 1) (sin.f64 im) 1))","(+.f64 (*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))))) 1)","(+.f64 (*.f64 (sin.f64 im) (+.f64 re (+.f64 1 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6)))))) 1)","(*.f64 (exp.f64 re) im)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (*.f64 (exp.f64 re) im))","(*.f64 (exp.f64 re) (+.f64 im (*.f64 -1/6 (pow.f64 im 3))))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (*.f64 (exp.f64 re) im)))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 (exp.f64 re) im (*.f64 (exp.f64 re) (*.f64 (pow.f64 im 5) 1/120))))","(fma.f64 (exp.f64 re) im (*.f64 (exp.f64 re) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (*.f64 1/120 (pow.f64 im 5)))))","(*.f64 (exp.f64 re) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 im (*.f64 1/120 (pow.f64 im 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5))) (+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7))) (*.f64 (exp.f64 re) im))))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (fma.f64 -1/5040 (*.f64 (exp.f64 re) (pow.f64 im 7)) (*.f64 (exp.f64 re) im))))","(fma.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3)) (fma.f64 1/120 (*.f64 (exp.f64 re) (pow.f64 im 5)) (fma.f64 (exp.f64 re) im (*.f64 (pow.f64 im 7) (*.f64 (exp.f64 re) -1/5040)))))","(+.f64 (*.f64 (exp.f64 re) (+.f64 im (*.f64 -1/6 (pow.f64 im 3)))) (*.f64 (exp.f64 re) (+.f64 (*.f64 1/120 (pow.f64 im 5)) (*.f64 -1/5040 (pow.f64 im 7)))))","(*.f64 (exp.f64 re) (+.f64 (+.f64 im (*.f64 -1/6 (pow.f64 im 3))) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 1/120 (pow.f64 im 5)))))","(*.f64 (exp.f64 re) (+.f64 im (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (*.f64 1/120 (pow.f64 im 5))))))","(*.f64 (exp.f64 re) (+.f64 (*.f64 -1/5040 (pow.f64 im 7)) (+.f64 (*.f64 -1/6 (pow.f64 im 3)) (+.f64 im (*.f64 1/120 (pow.f64 im 5))))))","(sin.f64 im)","(+.f64 (sin.f64 im) (*.f64 (sin.f64 im) re))","(+.f64 (sin.f64 im) (*.f64 re (sin.f64 im)))","(*.f64 (+.f64 re 1) (sin.f64 im))","(*.f64 (sin.f64 im) (+.f64 re 1))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2)))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)))))","(+.f64 (sin.f64 im) (fma.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re)) (*.f64 re (sin.f64 im))))","(*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 re (*.f64 re 1/2))))","(*.f64 (sin.f64 im) (+.f64 re (+.f64 1 (*.f64 re (*.f64 re 1/2)))))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(+.f64 (sin.f64 im) (fma.f64 (sin.f64 im) re (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 1/2 (*.f64 (sin.f64 im) (*.f64 re re))))))","(+.f64 (*.f64 (+.f64 re 1) (sin.f64 im)) (fma.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3)) (*.f64 (sin.f64 im) (*.f64 (*.f64 re re) 1/2))))","(fma.f64 (+.f64 re 1) (sin.f64 im) (*.f64 (sin.f64 im) (+.f64 (*.f64 re (*.f64 re 1/2)) (*.f64 1/6 (pow.f64 re 3)))))","(*.f64 (sin.f64 im) (+.f64 (+.f64 re 1) (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6)))))","(*.f64 (sin.f64 im) (+.f64 re (+.f64 1 (*.f64 (*.f64 re re) (+.f64 1/2 (*.f64 re 1/6))))))"]],"stop":[["node limit",1]],"time":79.0849609375,"type":"simplify"},{"compiler":[[2068,1108]],"time":23.718994140625,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (sin.f64 im))","next",0.01953125],["(*.f64 (pow.f64 (cbrt.f64 (exp.f64 re)) 2) (*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im)))","fresh",0.037441259768442016],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","done",25.16328603757426],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) -1)","fresh",25.470095297459267]],"compiler":[[7,5],[14,9],[11,9],[20,14],[7,5],[14,9],[20,14]],"count":[[141,4]],"kept":[{"done":[1,0],"fresh":[1,0],"new":[138,3],"picked":[1,1]}],"min-error":[0],"time":29.510009765625,"type":"prune"},{"compiler":[[13,5]],"locations":[["(*.f64 (exp.f64 re) (sin.f64 im))",0.01171875,false],["(sin.f64 im)",0.01171875,false]],"time":3.97021484375,"type":"localize"},{"compiler":[[517,258]],"time":6.40478515625,"type":"eval"},{"alts":[["(*.f64 (exp.f64 re) (sin.f64 im))","done",0.01953125],["(*.f64 (pow.f64 (cbrt.f64 (exp.f64 re)) 2) (*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im)))","fresh",0.037441259768442016],["(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","done",25.16328603757426],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) -1)","fresh",25.470095297459267]],"compiler":[[7,5],[14,9],[11,9],[20,14]],"count":[[54,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[50,0],"picked":[1,1]}],"min-error":[0],"time":8.779052734375,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["re",0.01953125,1],["im",0.01953125,1],["(*.f64 (exp.f64 re) (sin.f64 im))",0.01953125,1],["(exp.f64 re)",0.01953125,1],["(sin.f64 im)",0.01953125,1]],"compiler":[[3,2],[3,2],[7,5],[4,3],[4,3],[89,46]],"count":[[7,1]],"inputs":[["(*.f64 (exp.f64 re) (sin.f64 im))","(*.f64 (pow.f64 (cbrt.f64 (exp.f64 re)) 2) (*.f64 (cbrt.f64 (exp.f64 re)) (sin.f64 im)))","(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) 2) (cbrt.f64 (fma.f64 (sin.f64 im) (exp.f64 re) 1)) -1)","(-.f64 (+.f64 1 (*.f64 (sin.f64 im) (exp.f64 re))) 1)","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 re) (pow.f64 im 3))) (*.f64 (exp.f64 re) im))","(+.f64 (sin.f64 im) (+.f64 (*.f64 (sin.f64 im) re) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 im) (pow.f64 re 3))) (*.f64 1/2 (*.f64 (sin.f64 im) (pow.f64 re 2))))))","(*.f64 (exp.f64 re) (sin.f64 im))"]],"link":["."],"name":["math.exp on complex, imaginary part"],"oracle":[61.324332819830296],"outputs":[["(*.f64 (exp.f64 re) (sin.f64 im))"]],"time":18.920166015625,"times":[["re",3.953125],["im",3.81298828125],["(*.f64 (exp.f64 re) (sin.f64 im))",3.401123046875],["(exp.f64 re)",2.06201171875],["(sin.f64 im)",3.909912109375]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,7,8,2.7332000000000002e-5],[0,6,8,1.6416e-5]],"inputs":[["(*.f64 (exp.f64 re) (sin.f64 im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 re) (sin.f64 im))"]],"stop":[["fuel",1],["saturated",1]],"time":8.242919921875,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.700927734375,"type":"end"}]
[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.7496337890625,0.0009760856628417969,0.2493901252746582],[11,0.7496337890625,0.0019521713256835938,0.2484140396118164],[10,0.7496337890625,0.0039043426513671875,0.2464618682861328],[9,0.7496337890625,0.007808685302734375,0.24255752563476563],[8,0.7496337890625,0.01561737060546875,0.23474884033203125],[7,0.7496337890625,0.0312347412109375,0.2191314697265625],[6,0.7496337890625,0.062469482421875,0.187896728515625],[5,0.7496337890625,0.12493896484375,0.12542724609375],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.427978515625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.0908203125,3],["body",256,"valid",258.833251953125,8256]],"time":266.200927734375,"type":"sample"},{"compiler":[[10,8]],"egraph":[[0,1,1,1.542e-6],[9,1194,9,0.016225084],[8,1175,9,0.01351975],[7,1058,9,0.010693708],[6,726,9,0.007308792],[5,487,9,0.0041064579999999995],[4,292,9,0.0022237919999999996],[3,150,11,0.001182959],[2,68,11,0.0005518750000000001],[1,25,11,0.00018150000000000002],[0,9,13,6.2667e-5]],"inputs":[["0"],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))","(-.f64 1 (*.f64 x (fma.f64 x 3/25 253/1000)))","(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":40.60302734375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[9,1194,9,0.014880167],[8,1175,9,0.01217825],[7,1058,9,0.009358209],[6,726,9,0.00637425],[5,487,9,0.003597625],[4,292,9,0.002043625],[3,150,11,0.001076166],[2,68,11,0.000463416],[1,25,11,0.000174458],[0,9,13,5.7708e-5]],"inputs":[["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))","(-.f64 1 (*.f64 x (fma.f64 x 3/25 253/1000)))","(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)"]],"stop":[["saturated",1]],"time":25.35498046875,"type":"simplify"},{"compiler":[[17,13]],"time":0.405029296875,"type":"eval"},{"alts":[["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","next",0.1015625],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))","fresh",0.109375]],"compiler":[[8,6],[10,8],[8,6],[10,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.09765625],"time":1.2919921875,"type":"prune"},{"compiler":[[16,12]],"locations":[["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)",0.07421875,true],["(fma.f64 x -3/25 -253/1000)",0.0859375,true]],"time":4.123046875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","x","-inf",0.22900390625],["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","x","inf",0.217041015625],["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","x","0",0.262939453125],["(fma.f64 x -3/25 -253/1000)","x","-inf",0.363037109375],["(fma.f64 x -3/25 -253/1000)","x","inf",0.30810546875],["(fma.f64 x -3/25 -253/1000)","x","0",0.30078125]],"time":1.762939453125,"type":"series"},{"count":[[2,42]],"egraph":[[2,1416,14,0.016472416],[1,136,14,0.002531416],[0,7,14,0.000341291]],"inputs":[["(fma.f64 x -3/25 -253/1000)","(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 -253/1000 (*.f64 x -3/25))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -3/25) -253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -3/25) 1) -253/1000)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x -3/25 -253/1000)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -3/25 -253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -3/25 -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -3/25 -253/1000)) (pow.f64 (cbrt.f64 (fma.f64 x -3/25 -253/1000)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x -3/25 -253/1000)) 2) (cbrt.f64 (fma.f64 x -3/25 -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x -3/25 -253/1000)) (sqrt.f64 (fma.f64 x -3/25 -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x -3/25) 3) -16194277/1000000000) (+.f64 (*.f64 (*.f64 x -3/25) (*.f64 x -3/25)) (-.f64 64009/1000000 (*.f64 (*.f64 x -3/25) -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x -3/25) (*.f64 x -3/25)) 64009/1000000) (-.f64 (*.f64 x -3/25) -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -3/25 -253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -3/25 -253/1000) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -3/25 -253/1000)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x -3/25 -253/1000)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x -3/25 -253/1000) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x -3/25 -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -3/25 -253/1000) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x -3/25 -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x -3/25 -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x -3/25 -253/1000)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x (fma.f64 x -3/25 -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) (sqrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 3) 1) (+.f64 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) (*.f64 x (fma.f64 x -3/25 -253/1000))) (-.f64 1 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) (*.f64 x (fma.f64 x -3/25 -253/1000))) 1) (-.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))))"]],"rules":[["egg-rr",21],["egg-rr",21]],"stop":[["node limit",1]],"time":35.541015625,"type":"rewrite"},{"count":[[66,55]],"egraph":[[18,7774,144,0.100278457],[17,7482,144,0.090910373],[16,7090,144,0.08189104],[15,6255,144,0.072176165],[14,5573,144,0.06135704],[13,5006,144,0.051942457],[12,4495,144,0.043818081999999994],[11,4095,144,0.035788748999999995],[10,3782,144,0.029023248999999997],[9,3562,144,0.023236748999999998],[8,3349,144,0.017790123999999997],[7,3143,144,0.013020374],[6,1796,144,0.008539541],[5,536,144,0.004274666],[4,196,144,0.001712124],[3,88,144,0.000873374],[2,56,156,0.000508291],[1,34,168,0.000276416],[0,15,182,0.000114541]],"inputs":[["-253/1000","(-.f64 (*.f64 -3/25 x) 253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(*.f64 -3/25 x)","(-.f64 (*.f64 -3/25 x) 253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(*.f64 -3/25 x)","(-.f64 (*.f64 -3/25 x) 253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","1","(+.f64 1 (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))"]],"method":["egg-herbie"],"outputs":[["-253/1000","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(*.f64 -3/25 x)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(*.f64 -3/25 x)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","(-.f64 (*.f64 -3/25 x) 253/1000)","(fma.f64 -3/25 x -253/1000)","1","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 -253/1000 x 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(+.f64 1 (*.f64 x (fma.f64 -3/25 x -253/1000)))","(fma.f64 x (fma.f64 -3/25 x -253/1000) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(+.f64 1 (*.f64 x (fma.f64 -3/25 x -253/1000)))","(fma.f64 x (fma.f64 -3/25 x -253/1000) 1)","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(fma.f64 -3/25 (*.f64 x x) (*.f64 -253/1000 x))","(fma.f64 -253/1000 x (*.f64 -3/25 (*.f64 x x)))","(*.f64 x (fma.f64 -3/25 x -253/1000))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(+.f64 1 (*.f64 x (fma.f64 -3/25 x -253/1000)))","(fma.f64 x (fma.f64 -3/25 x -253/1000) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(+.f64 1 (*.f64 x (fma.f64 -3/25 x -253/1000)))","(fma.f64 x (fma.f64 -3/25 x -253/1000) 1)","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(fma.f64 -3/25 (*.f64 x x) (*.f64 -253/1000 x))","(fma.f64 -253/1000 x (*.f64 -3/25 (*.f64 x x)))","(*.f64 x (fma.f64 -3/25 x -253/1000))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(+.f64 1 (*.f64 x (fma.f64 -3/25 x -253/1000)))","(fma.f64 x (fma.f64 -3/25 x -253/1000) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(+.f64 1 (*.f64 x (fma.f64 -3/25 x -253/1000)))","(fma.f64 x (fma.f64 -3/25 x -253/1000) 1)"]],"stop":[["node limit",1]],"time":117.119873046875,"type":"simplify"},{"compiler":[[585,457]],"time":10.39599609375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","next",0.23312382814753613],["(fma.f64 x (expm1.f64 (log1p.f64 (fma.f64 x -3/25 -253/1000))) 1)","fresh",10.806987299003648],["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","fresh",0.35384750976844204],["(fma.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -3/25) 3) -16194277/1000000000) (+.f64 (*.f64 (*.f64 x -3/25) (*.f64 x -3/25)) (-.f64 64009/1000000 (*.f64 (*.f64 x -3/25) -253/1000)))) 1)","fresh",7.357753759768442],["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","done",0.1015625],["(fma.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -3/25 -253/1000)) 2) 1)","fresh",52.62242128907377],["(fma.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -3/25 -253/1000)) 3) 1)","fresh",0.2829476074528622]],"compiler":[[11,9],[10,8],[12,10],[27,22],[8,6],[11,9],[11,9],[11,9],[10,8],[12,10],[27,22],[11,9],[11,9]],"count":[[57,7]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[55,6],"picked":[1,1]}],"min-error":[0.01171875],"time":11.97509765625,"type":"prune"},{"compiler":[[35,27]],"locations":[["(cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))",0.05078125,true],["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)",0.07421875,false],["(fma.f64 x -3/25 -253/1000)",0.0859375,false],["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)",0.22236254884221004,true]],"time":9.431884765625,"type":"localize"},{"count":[[2,8]],"series":[["(cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))","x","-inf",0.239013671875],["(cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))","x","inf",0.26806640625],["(cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))","x","0",0.18310546875],["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","x","-inf",0.49609375],["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","x","inf",0.8359375],["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","x","0",1.0751953125]],"time":3.18212890625,"type":"series"},{"count":[[2,44]],"egraph":[[2,1921,20,0.020678916999999998],[1,204,20,0.0036158329999999997],[0,10,20,0.000438166]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","(cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x (fma.f64 x -3/25 -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6) (*.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) (sqrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2) 3) (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6) 3) (pow.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) 1) (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6)) (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 3) 1) (+.f64 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) (*.f64 x (fma.f64 x -3/25 -253/1000))) (-.f64 1 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) (*.f64 x (fma.f64 x -3/25 -253/1000))) 1) (-.f64 (*.f64 x (fma.f64 x -3/25 -253/1000)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6) (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 1/3) (pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))))))"]],"rules":[["egg-rr",19],["egg-rr",25]],"stop":[["node limit",1]],"time":41.83203125,"type":"rewrite"},{"count":[[52,54]],"egraph":[[11,7540,52,0.078124626],[10,6937,52,0.065739459],[9,6554,52,0.052453834000000005],[8,6167,52,0.040927792000000005],[7,4925,52,0.030065001],[6,4264,52,0.020396959],[5,2822,52,0.012152084],[4,948,52,0.006090333999999999],[3,380,55,0.002397167],[2,135,68,0.001047833],[1,60,71,0.000445417],[0,25,79,0.000174]],"inputs":[["1","(+.f64 1 (*.f64 -253/1000 x))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","1","(+.f64 1 (*.f64 -253/3000 x))","(+.f64 1 (+.f64 (*.f64 -253/3000 x) (*.f64 -424009/9000000 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -253/3000 x) (+.f64 (*.f64 -424009/9000000 (pow.f64 x 2)) (*.f64 -125490277/16200000000 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 -253/1000 x 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(fma.f64 x (*.f64 x -3/25) (fma.f64 -253/1000 x 1))","(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 -3/25 (*.f64 x x) (fma.f64 -253/1000 x 1))","(fma.f64 x (*.f64 x -3/25) (fma.f64 -253/1000 x 1))","(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","1","(+.f64 1 (*.f64 -253/3000 x))","(+.f64 1 (*.f64 x -253/3000))","(fma.f64 x -253/3000 1)","(+.f64 1 (+.f64 (*.f64 -253/3000 x) (*.f64 -424009/9000000 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -253/3000 x (*.f64 (*.f64 x x) -424009/9000000)))","(+.f64 1 (fma.f64 x -253/3000 (*.f64 x (*.f64 x -424009/9000000))))","(fma.f64 x -253/3000 (fma.f64 x (*.f64 x -424009/9000000) 1))","(fma.f64 x (fma.f64 x -424009/9000000 -253/3000) 1)","(+.f64 1 (+.f64 (*.f64 -253/3000 x) (+.f64 (*.f64 -424009/9000000 (pow.f64 x 2)) (*.f64 -125490277/16200000000 (pow.f64 x 3)))))","(+.f64 1 (fma.f64 -253/3000 x (fma.f64 -424009/9000000 (*.f64 x x) (*.f64 -125490277/16200000000 (pow.f64 x 3)))))","(+.f64 1 (fma.f64 x -253/3000 (fma.f64 (*.f64 x x) -424009/9000000 (*.f64 -125490277/16200000000 (pow.f64 x 3)))))","(+.f64 1 (fma.f64 -125490277/16200000000 (pow.f64 x 3) (*.f64 x (+.f64 -253/3000 (*.f64 x -424009/9000000)))))","(fma.f64 (*.f64 x x) (fma.f64 x -125490277/16200000000 -424009/9000000) (fma.f64 x -253/3000 1))","(fma.f64 x (fma.f64 x (fma.f64 x -125490277/16200000000 -424009/9000000) -253/3000) 1)"]],"stop":[["node limit",1]],"time":90.954833984375,"type":"simplify"},{"compiler":[[1559,1277]],"time":26.087158203125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","done",0.23312382814753613],["(fma.f64 x (expm1.f64 (log1p.f64 (fma.f64 x -3/25 -253/1000))) 1)","fresh",10.806987299003648],["(fma.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -3/25 -253/1000)) 2) 1)","fresh",52.62242128907377],["(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2) 3) (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))","fresh",0.5304092952125312],["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","next",0.35384750976844204],["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","done",0.1015625],["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))","fresh",0.35400024421105053]],"compiler":[[11,9],[10,8],[11,9],[23,19],[12,10],[8,6],[33,27],[10,8],[11,9],[23,19],[12,10],[33,27]],"count":[[116,7]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[109,2],"picked":[1,1]}],"min-error":[0.00390625],"time":26.291015625,"type":"prune"},{"compiler":[[33,26]],"locations":[["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))",0.0078125,true],["(*.f64 -253/1000 x)",0.046875,true],["(*.f64 -3/25 (pow.f64 x 2))",0.44167786712705126,true]],"time":8.489990234375,"type":"localize"},{"count":[[3,6]],"series":[["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","x","-inf",0.174072265625],["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","x","inf",0.256103515625],["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","x","0",0.1591796875],["(*.f64 -253/1000 x)","x","-inf",0.2978515625],["(*.f64 -253/1000 x)","x","inf",0.29296875],["(*.f64 -253/1000 x)","x","0",0.2548828125],["(*.f64 -3/25 (pow.f64 x 2))","x","-inf",0.1640625],["(*.f64 -3/25 (pow.f64 x 2))","x","inf",0.304931640625],["(*.f64 -3/25 (pow.f64 x 2))","x","0",0.4169921875]],"time":2.416015625,"type":"series"},{"count":[[3,143]],"egraph":[[2,3005,23,0.026661041],[1,241,23,0.004872875],[0,11,25,0.000470958]],"inputs":[["(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -253/1000 x)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 -3/25) (*.f64 x x))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 -3/25) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -3/25) (*.f64 x x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -3/25) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 -3/25 (*.f64 x x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -3/25 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 -3/25 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 4) 9/625) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -3/25 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 -3/25)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) -27/15625) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 -3/25 (*.f64 x x)))) 2)) (cbrt.f64 (log.f64 (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 -3/25 (*.f64 x x))))) (sqrt.f64 (log.f64 (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) 9/625))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -3/25) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) -27/15625))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -3/25 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -3/25 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -3/25 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 -3/25 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 -3/25 (*.f64 x x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (sqrt.f64 -3/25))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x 6) -27/15625)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 -3/25 (*.f64 x x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 -3/25 (*.f64 x x))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -3/25 (*.f64 x x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 -3/25 (*.f64 x x) 1)) 2) (cbrt.f64 (fma.f64 -3/25 (*.f64 x x) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 1 (*.f64 x (sqrt.f64 -3/25))) (hypot.f64 1 (*.f64 x (sqrt.f64 -3/25))) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) -253/1000)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) -253/1000))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x -253/1000 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x -253/1000) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 64009/1000000) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x -253/1000)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x -253/1000)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) -16194277/1000000000) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x -253/1000))) 2)) (cbrt.f64 (log.f64 (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x -253/1000)))) (sqrt.f64 (log.f64 (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) 64009/1000000))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) -16194277/1000000000))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 (log1p.f64 (*.f64 x -253/1000)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x -253/1000)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x -253/1000))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x -253/1000))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x -253/1000))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x -253/1000)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x -253/1000)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x -253/1000 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x -253/1000 1) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x -253/1000 1)) (pow.f64 (cbrt.f64 (fma.f64 x -253/1000 1)) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x -253/1000 1)) 2) (cbrt.f64 (fma.f64 x -253/1000 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x -253/1000 1)) (sqrt.f64 (fma.f64 x -253/1000 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 x 3) -16194277/1000000000 1) (/.f64 1 (fma.f64 (*.f64 x -253/1000) (fma.f64 x -253/1000 -1) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 (*.f64 x x) 64009/1000000)) (/.f64 1 (+.f64 1 (*.f64 253/1000 x))) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (pow.f64 x 4) 9/625) (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000))) (/.f64 (pow.f64 (fma.f64 x -253/1000 1) 2) (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))) (pow.f64 (cbrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))) 2) (cbrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))) (sqrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 6) -27/15625 (pow.f64 (fma.f64 x -253/1000 1) 3)) (/.f64 1 (fma.f64 (fma.f64 x -253/1000 1) (-.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) (*.f64 (pow.f64 x 4) 9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2)) (/.f64 1 (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 x -253/1000 1) (-.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) (*.f64 (pow.f64 x 4) 9/625)) (fma.f64 (pow.f64 x 6) -27/15625 (pow.f64 (fma.f64 x -253/1000 1) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000)) (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) -27/15625 (pow.f64 (fma.f64 x -253/1000 1) 3)) (fma.f64 (fma.f64 x -253/1000 1) (-.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) (*.f64 (pow.f64 x 4) 9/625)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) -27/15625 (pow.f64 (fma.f64 x -253/1000 1) 3)) (+.f64 (pow.f64 (fma.f64 x -253/1000 1) 2) (-.f64 (*.f64 (pow.f64 x 4) 9/625) (*.f64 (*.f64 -3/25 (*.f64 x x)) (fma.f64 x -253/1000 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2)) (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 6) -27/15625 (pow.f64 (fma.f64 x -253/1000 1) 3))) (neg.f64 (fma.f64 (fma.f64 x -253/1000 1) (-.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) (*.f64 (pow.f64 x 4) 9/625))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2))) (neg.f64 (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 -3/25 (*.f64 x x) 1) 3) (*.f64 (pow.f64 x 3) -16194277/1000000000)) (+.f64 (pow.f64 (fma.f64 -3/25 (*.f64 x x) 1) 2) (-.f64 (*.f64 (*.f64 x x) 64009/1000000) (*.f64 (fma.f64 -3/25 (*.f64 x x) 1) (*.f64 x -253/1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x -253/1000 1) 2) (*.f64 (pow.f64 x 4) 9/625)) (-.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 -3/25 (*.f64 x x) 1) 2) (*.f64 (*.f64 x x) 64009/1000000)) (-.f64 (fma.f64 -3/25 (*.f64 x x) 1) (*.f64 x -253/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 x -253/1000 1) (-.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) (*.f64 (pow.f64 x 4) 9/625)) (fma.f64 (pow.f64 x 6) -27/15625 (pow.f64 (fma.f64 x -253/1000 1) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000)) (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x))))) 2)) (cbrt.f64 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x)))))) (sqrt.f64 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -3/25 (*.f64 x x)))) (exp.f64 (fma.f64 x -253/1000 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -3/25) (*.f64 x x)) (+.f64 1 (expm1.f64 (fma.f64 x -253/1000 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -3/25 (*.f64 x x)))) (+.f64 1 (expm1.f64 (fma.f64 x -253/1000 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x -253/1000))) (exp.f64 (fma.f64 -3/25 (*.f64 x x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x -253/1000 1))) (pow.f64 (exp.f64 -3/25) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 x -253/1000 1)) (+.f64 1 (expm1.f64 (*.f64 -3/25 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x -253/1000 1))) (+.f64 1 (expm1.f64 (*.f64 -3/25 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 -3/25 (*.f64 x x) 1)) (+.f64 1 (expm1.f64 (*.f64 x -253/1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (fma.f64 x -253/1000 (*.f64 -3/25 (*.f64 x x)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3/25 (*.f64 x x) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -253/1000 (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x -3/25) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) -3/25 (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3/25 (*.f64 x x)) 1 (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -253/1000 x (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x -253/1000) 1 (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -3/25 (*.f64 x x)) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x -253/1000) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -3/25 (*.f64 x x) 1) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x -253/1000 1) 1 (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -253/1000)) (cbrt.f64 (*.f64 (*.f64 x x) 64009/1000000)) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 64009/1000000)) (cbrt.f64 (*.f64 x -253/1000)) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (cbrt.f64 (*.f64 x x)) -3/25) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -3/25 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 9/625)) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 9/625)) (cbrt.f64 (*.f64 -3/25 (*.f64 x x))) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) -253/1000) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x -253/1000 1)) (pow.f64 (cbrt.f64 (fma.f64 x -253/1000 1)) 2) (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x -253/1000 1)) 2) (cbrt.f64 (fma.f64 x -253/1000 1)) (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x -253/1000)) (sqrt.f64 (*.f64 x -253/1000)) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 -3/25)) (*.f64 x (sqrt.f64 -3/25)) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) -253/1000) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x -253/1000 1)) (sqrt.f64 (fma.f64 x -253/1000 1)) (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 x 3) -16194277/1000000000 1) (/.f64 1 (fma.f64 (*.f64 x -253/1000) (fma.f64 x -253/1000 -1) 1)) (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 (*.f64 x x) 64009/1000000)) (/.f64 1 (+.f64 1 (*.f64 253/1000 x))) (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -3/25 (*.f64 x x) 1) 1 (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 -3/25 (*.f64 x x) 1)) 2) (cbrt.f64 (fma.f64 -3/25 (*.f64 x x) 1)) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 1 (*.f64 x (sqrt.f64 -3/25))) (hypot.f64 1 (*.f64 x (sqrt.f64 -3/25))) (*.f64 x -253/1000))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -253/1000 (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -253/1000 (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 -3/25 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3/25 x) x (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))))))"]],"rules":[["egg-rr",82],["egg-rr",33],["egg-rr",28]],"stop":[["node limit",1]],"time":52.718017578125,"type":"rewrite"},{"count":[[149,150]],"egraph":[[19,7931,36,0.10650024900000002],[18,7655,36,0.09732812400000002],[17,7363,36,0.08788641600000001],[16,6971,36,0.07879683200000001],[15,6132,36,0.069371415],[14,5446,36,0.058827874],[13,4878,36,0.049615957],[12,4363,36,0.041567416],[11,3961,36,0.033812499],[10,3649,36,0.027350624],[9,3429,36,0.021614416],[8,3216,36,0.016580541],[7,3012,36,0.01210325],[6,1757,36,0.007830375],[5,500,36,0.0037537919999999997],[4,175,36,0.001331709],[3,72,36,0.000607],[2,36,40,0.000315959],[1,22,42,0.00016575],[0,11,44,6.8e-5]],"inputs":[["1","(+.f64 1 (*.f64 -253/1000 x))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(*.f64 -3/25 (pow.f64 x 2))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 -253/1000 x 1)","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 x (*.f64 x -3/25))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(fma.f64 -3/25 (*.f64 x x) (*.f64 -253/1000 x))","(fma.f64 -253/1000 x (*.f64 x (*.f64 x -3/25)))","(*.f64 x (+.f64 -253/1000 (*.f64 x -3/25)))","(*.f64 x (fma.f64 x -3/25 -253/1000))","(*.f64 -3/25 (pow.f64 x 2))","(*.f64 -3/25 (*.f64 x x))","(*.f64 x (*.f64 x -3/25))","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (*.f64 -253/1000 x))","(fma.f64 -3/25 (*.f64 x x) (*.f64 -253/1000 x))","(fma.f64 -253/1000 x (*.f64 x (*.f64 x -3/25)))","(*.f64 x (+.f64 -253/1000 (*.f64 x -3/25)))","(*.f64 x (fma.f64 x -3/25 -253/1000))"]],"stop":[["node limit",1]],"time":120.072021484375,"type":"simplify"},{"compiler":[[2426,1774]],"time":34.161865234375,"type":"eval"},{"alts":[["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","done",0.35384750976844204],["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","done",0.1015625],["(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))","next",0.4186325195368841],["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","done",0.23312382814753613],["(/.f64 (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2)) (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000)))","fresh",10.584316259768443]],"compiler":[[12,10],[8,6],[16,11],[11,9],[24,19],[16,11],[24,19]],"count":[[157,5]],"kept":[{"done":[2,2],"fresh":[4,0],"new":[150,2],"picked":[1,1]}],"min-error":[0],"time":40.85400390625,"type":"prune"},{"compiler":[[43,19]],"locations":[["(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))",0.13509750976844204,true],["(*.f64 (cbrt.f64 x) x)",0.1953125,true],["(*.f64 -3/25 (*.f64 (cbrt.f64 x) x))",0.23828125,true],["(cbrt.f64 (*.f64 x x))",20.21814621982307,true]],"time":10.847900390625,"type":"localize"},{"count":[[4,6]],"series":[["(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))","x","-inf",0.55810546875],["(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))","x","inf",0.275146484375],["(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))","x","0",1.143798828125],["(*.f64 (cbrt.f64 x) x)","x","-inf",0.301025390625],["(*.f64 (cbrt.f64 x) x)","x","inf",0.3720703125],["(*.f64 (cbrt.f64 x) x)","x","0",0.216064453125],["(*.f64 -3/25 (*.f64 (cbrt.f64 x) x))","x","-inf",1.06982421875],["(*.f64 -3/25 (*.f64 (cbrt.f64 x) x))","x","inf",0.31103515625],["(*.f64 -3/25 (*.f64 (cbrt.f64 x) x))","x","0",0.35888671875],["(cbrt.f64 (*.f64 x x))","x","-inf",0.204833984375],["(cbrt.f64 (*.f64 x x))","x","inf",0.2109375],["(cbrt.f64 (*.f64 x x))","x","0",0.348876953125]],"time":5.569091796875,"type":"series"},{"count":[[4,74]],"egraph":[[2,2553,35,0.023907666999999997],[1,234,35,0.004572041999999999],[0,12,43,0.000484917]],"inputs":[["(cbrt.f64 (*.f64 x x))","(*.f64 -3/25 (*.f64 (cbrt.f64 x) x))","(*.f64 (cbrt.f64 x) x)","(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 (*.f64 x (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 x))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 x (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (cbrt.f64 x) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 -3/25)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 9/625 (pow.f64 (*.f64 x (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -3/25) (*.f64 x (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -3/25 (*.f64 x (cbrt.f64 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (cbrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 4) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (cbrt.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3/25 (*.f64 x x)) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -3/25 (*.f64 x x)) 1) (fma.f64 x -253/1000 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -3/25 (*.f64 x x)) (*.f64 x -253/1000)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))) 2) (cbrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))) (sqrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -3/25 (*.f64 x x)) 3) (pow.f64 (fma.f64 x -253/1000 1) 3)) (+.f64 (*.f64 (*.f64 -3/25 (*.f64 x x)) (*.f64 -3/25 (*.f64 x x))) (-.f64 (pow.f64 (fma.f64 x -253/1000 1) 2) (*.f64 (*.f64 -3/25 (*.f64 x x)) (fma.f64 x -253/1000 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -3/25 (*.f64 x x)) (*.f64 -3/25 (*.f64 x x))) (pow.f64 (fma.f64 x -253/1000 1) 2)) (-.f64 (*.f64 -3/25 (*.f64 x x)) (fma.f64 x -253/1000 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (fma.f64 x -253/1000 1) (*.f64 -3/25 (*.f64 x x)))))))))"]],"rules":[["egg-rr",23],["egg-rr",14],["egg-rr",12],["egg-rr",25]],"stop":[["node limit",1]],"time":49.526123046875,"type":"rewrite"},{"count":[[80,78]],"egraph":[[2,12,24,0.000124458],[1,10,24,8.3708e-5],[0,6,30,4.7083e-5]],"inputs":[["1","(+.f64 1 (*.f64 -253/1000 x))","(*.f64 -253/1000 x)","(+.f64 1 (*.f64 -253/1000 x))","(*.f64 -253/1000 x)","(+.f64 1 (*.f64 -253/1000 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 -253/1000 x 1)","(*.f64 -253/1000 x)","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 -253/1000 x 1)","(*.f64 -253/1000 x)","(+.f64 1 (*.f64 -253/1000 x))","(fma.f64 -253/1000 x 1)"]],"stop":[["saturated",1]],"time":11.076904296875,"type":"simplify"},{"compiler":[[1284,733]],"time":15.740966796875,"type":"eval"},{"alts":[["(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","done",0.35384750976844204],["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","done",0.1015625],["(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))","done",0.4186325195368841],["(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","done",0.23312382814753613],["(/.f64 (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2)) (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000)))","fresh",10.584316259768443]],"compiler":[[12,10],[8,6],[16,11],[11,9],[24,19]],"count":[[83,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[78,0],"picked":[1,1]}],"min-error":[0],"time":14.9169921875,"type":"prune"},{"accuracy":[0.1015625],"baseline":[0.1015625],"branch":[["x",0.1015625,1],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))",0.1015625,1],["(*.f64 x (+.f64 253/1000 (*.f64 x 3/25)))",0.1015625,1]],"compiler":[[2,1],[10,8],[8,6],[185,145]],"count":[[12,1]],"inputs":[["(fma.f64 (*.f64 -3/25 (*.f64 (cbrt.f64 x) x)) (cbrt.f64 (*.f64 x x)) (fma.f64 x -253/1000 1))","(/.f64 (-.f64 (*.f64 (pow.f64 x 4) 9/625) (pow.f64 (fma.f64 x -253/1000 1) 2)) (-.f64 (fma.f64 -3/25 (*.f64 x x) -1) (*.f64 x -253/1000)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2) 3) (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)))","(*.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1))))","(pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x -3/25 -253/1000) 1)) 3)","(fma.f64 x (expm1.f64 (log1p.f64 (fma.f64 x -3/25 -253/1000))) 1)","(+.f64 (*.f64 -3/25 (pow.f64 x 2)) (+.f64 1 (*.f64 -253/1000 x)))","(fma.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 x -3/25) 3) -16194277/1000000000) (+.f64 (*.f64 (*.f64 x -3/25) (*.f64 x -3/25)) (-.f64 64009/1000000 (*.f64 (*.f64 x -3/25) -253/1000)))) 1)","(fma.f64 x (pow.f64 (sqrt.f64 (fma.f64 x -3/25 -253/1000)) 2) 1)","(fma.f64 x (pow.f64 (cbrt.f64 (fma.f64 x -3/25 -253/1000)) 3) 1)","(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)","(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, A"],"oracle":[58.562449002355436],"outputs":[["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)"]],"time":18.054931640625,"times":[["x",5.048828125],["(-.f64 1 (*.f64 x (+.f64 253/1000 (*.f64 x 3/25))))",4.3828125],["(*.f64 x (+.f64 253/1000 (*.f64 x 3/25)))",4.89306640625]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[1,9,9,3.8001000000000004e-5],[0,7,9,2.4459e-5]],"inputs":[["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (fma.f64 x -3/25 -253/1000) 1)"]],"stop":[["fuel",1],["saturated",1]],"time":8.339111328125,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":9.172119140625,"type":"end"}]
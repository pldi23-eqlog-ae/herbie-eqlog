[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":83.781005859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",51.719482421875,1292],["body",256,"valid",324.87841796875,8256]],"time":385.096923828125,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,1.917e-6],[12,2861,32,0.05759650100000001],[11,2861,32,0.049136751000000006],[10,2860,32,0.041766792000000004],[9,2785,32,0.034310417],[8,2487,32,0.026318126000000004],[7,1866,32,0.018077251000000003],[6,1139,32,0.010049417000000001],[5,681,32,0.005491584000000001],[4,338,36,0.002774251],[3,152,44,0.001166876],[2,88,44,0.000531292],[1,44,44,0.00023904200000000002],[0,20,44,8.9667e-5]],"inputs":[["0","1","2"],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))","(+.f64 (*.f64 (-.f64 1 y) x) (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) y) (*.f64 z x))","(+.f64 (*.f64 (-.f64 1 x) z) (*.f64 x y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))","(fma.f64 (-.f64 1 x) y (*.f64 x z))","(fma.f64 x z (*.f64 (-.f64 1 x) y))","(fma.f64 x (fma.f64 y -1 z) y)","(fma.f64 x (-.f64 z y) y)","(+.f64 (*.f64 (-.f64 1 y) x) (*.f64 y z))","(fma.f64 (-.f64 1 y) x (*.f64 y z))","(fma.f64 x (-.f64 1 y) (*.f64 y z))","(-.f64 (fma.f64 y z x) (*.f64 x y))","(fma.f64 y (fma.f64 x -1 z) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 (-.f64 1 z) y) (*.f64 z x))","(fma.f64 (-.f64 1 z) y (*.f64 x z))","(fma.f64 x z (*.f64 y (-.f64 1 z)))","(fma.f64 z (fma.f64 y -1 x) y)","(fma.f64 z (-.f64 x y) y)","(+.f64 (*.f64 (-.f64 1 x) z) (*.f64 x y))","(fma.f64 (-.f64 1 x) z (*.f64 x y))","(fma.f64 x (fma.f64 z -1 y) z)","(fma.f64 x (-.f64 y z) z)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":82.326171875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,1211,8,0.017895583],[10,1201,8,0.014952125],[9,1141,8,0.011984291],[8,961,8,0.008741582999999999],[7,557,8,0.0056445409999999994],[6,346,8,0.002918833],[5,218,8,0.0017170409999999999],[4,126,9,0.000989416],[3,57,11,0.00045366600000000003],[2,30,11,0.000225708],[1,17,11,0.000111833],[0,9,11,4.75e-5]],"inputs":[["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))","(fma.f64 (-.f64 1 x) y (*.f64 x z))","(fma.f64 x z (*.f64 (-.f64 1 x) y))","(-.f64 (fma.f64 x z y) (*.f64 x y))","(fma.f64 x (fma.f64 y -1 z) y)","(fma.f64 x (-.f64 z y) y)"]],"stop":[["saturated",1]],"time":28.64794921875,"type":"simplify"},{"compiler":[[18,10]],"time":0.333984375,"type":"eval"},{"alts":[["(fma.f64 x (-.f64 z y) y)","next",0.0078125]],"compiler":[[9,5],[9,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.77294921875,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 x (-.f64 z y) y)",0.0078125,true]],"time":3.491943359375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (-.f64 z y) y)","y","-inf",0.31103515625],["(fma.f64 x (-.f64 z y) y)","y","inf",0.324951171875],["(fma.f64 x (-.f64 z y) y)","y","0",0.386962890625],["(fma.f64 x (-.f64 z y) y)","z","-inf",0.298828125],["(fma.f64 x (-.f64 z y) y)","z","inf",0.304931640625],["(fma.f64 x (-.f64 z y) y)","z","0",0.302001953125],["(fma.f64 x (-.f64 z y) y)","x","-inf",0.39404296875],["(fma.f64 x (-.f64 z y) y)","x","inf",0.347900390625],["(fma.f64 x (-.f64 z y) y)","x","0",0.320068359375]],"time":3.10107421875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1797,8,0.017739999],[1,130,8,0.0023546659999999996],[0,6,8,0.000149833]],"inputs":[["(fma.f64 x (-.f64 z y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 x (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 z y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 z y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (-.f64 z y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (-.f64 z y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (-.f64 z y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (-.f64 z y) y)) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 z y) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 z y) y)) 2) (cbrt.f64 (fma.f64 x (-.f64 z y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (-.f64 z y) y)) (sqrt.f64 (fma.f64 x (-.f64 z y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 z y)) 3) (pow.f64 y 3)) (+.f64 (*.f64 (*.f64 x (-.f64 z y)) (*.f64 x (-.f64 z y))) (-.f64 (*.f64 y y) (*.f64 (*.f64 x (-.f64 z y)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (-.f64 z y)) (*.f64 x (-.f64 z y))) (*.f64 y y)) (-.f64 (*.f64 x (-.f64 z y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (-.f64 z y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (-.f64 z y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (-.f64 z y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (-.f64 z y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (-.f64 z y) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (-.f64 z y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (-.f64 z y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (-.f64 z y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (-.f64 z y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (-.f64 z y) y)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":35.31591796875,"type":"rewrite"},{"count":[[57,33]],"egraph":[[8,1380,264,0.017206707999999998],[7,1370,264,0.014196166999999999],[6,1141,264,0.011149875],[5,771,264,0.007334083],[4,403,264,0.0037977080000000003],[3,230,264,0.001872416],[2,116,264,0.000878124],[1,60,264,0.000383083],[0,22,270,0.000131833]],"inputs":[["y","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(*.f64 -1 (*.f64 y (-.f64 x 1)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (neg.f64 (*.f64 y x)))","(-.f64 y (*.f64 y x))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(+.f64 y (neg.f64 (*.f64 y x)))","(-.f64 y (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 -1 (*.f64 y (-.f64 x 1)))","(+.f64 y (neg.f64 (*.f64 y x)))","(-.f64 y (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(fma.f64 (-.f64 z y) x y)"]],"stop":[["saturated",1]],"time":32.7021484375,"type":"simplify"},{"compiler":[[326,101]],"time":3.7568359375,"type":"eval"},{"alts":[["(fma.f64 x (-.f64 z y) y)","done",0.0078125]],"compiler":[[9,5]],"count":[[34,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[33,0],"picked":[1,1]}],"min-error":[0.0078125],"time":4.68017578125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[18,10]],"count":[[2,1]],"inputs":[["(fma.f64 x (-.f64 z y) y)","(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))"]],"link":["."],"name":["Diagrams.Color.HSV:lerp  from diagrams-contrib-1.3.0.5"],"oracle":[0.02734375],"outputs":[["(fma.f64 x (-.f64 z y) y)"]],"time":11.83984375,"times":[["x",2.72216796875],["y",2.8740234375],["z",2.76611328125],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))",2.879150390625]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[4,16,8,9.3291e-5],[3,15,8,7.3333e-5],[2,13,8,5.3875e-5],[1,8,8,3.4875e-5],[0,6,8,1.4667e-5]],"inputs":[["(fma.f64 x (-.f64 z y) y)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (-.f64 z y) y)"]],"stop":[["done",1],["saturated",1]],"time":8.213134765625,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.487060546875,"type":"end"}]
[{"compiler":[[15,12]],"method":["search"],"sampling":[[12,0.34341438859701157,0.5668288629967719,0.0897567484062165],[11,0.32780464366078377,0.6009751800447702,0.07122017629444599],[10,0.31219489872455597,0.6282922336831689,0.05951286759227514],[9,0.2809754088521004,0.6868287771940231,0.032195813953876495],[8,0.24975591897964478,0.7336580120027065,0.016586069017648697],[7,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[6,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":147.583984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",25.210205078125,363],["body",1024,"valid",609.7138671875,2386],["body",512,"valid",177.23681640625,1179],["body",2048,"valid",6.1533203125,12],["body",256,"valid",348.1396484375,4679]],"time":1175.572998046875,"type":"sample"},{"compiler":[[14,11]],"egraph":[[0,2,2,1.958e-6],[16,3472,28,0.04525512600000001],[15,3436,28,0.040574876],[14,3376,28,0.035784084],[13,3158,28,0.030782834000000002],[12,1591,28,0.025255459],[11,1081,28,0.017904209],[10,916,28,0.014291251],[9,876,28,0.012035542],[8,827,28,0.009944167],[7,664,28,0.007870959],[6,519,28,0.005434167],[5,417,28,0.003814459],[4,275,28,0.002436875],[3,173,28,0.0013792919999999998],[2,98,28,0.000645084],[1,41,28,0.00027249999999999996],[0,18,38,9.675e-5]],"inputs":[["0","1"],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(+.f64 (neg.f64 (*.f64 B (/.f64 1 (tan.f64 x)))) (/.f64 1 (sin.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(+.f64 (*.f64 x (neg.f64 (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","(+.f64 (neg.f64 (*.f64 B (/.f64 1 (tan.f64 x)))) (/.f64 1 (sin.f64 x)))","(+.f64 (*.f64 B (neg.f64 (/.f64 1 (tan.f64 x)))) (/.f64 1 (sin.f64 x)))","(-.f64 (/.f64 1 (sin.f64 x)) (/.f64 B (tan.f64 x)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":68.5087890625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,451,14,0.007959794],[9,446,14,0.006879044],[8,425,14,0.005752752],[7,343,14,0.00456946],[6,269,14,0.0031958760000000003],[5,218,14,0.002254167],[4,145,14,0.001471333],[3,92,14,0.000857083],[2,53,14,0.00042354100000000004],[1,24,14,0.000195166],[0,11,19,7.7958e-5]],"inputs":[["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(+.f64 (*.f64 x (neg.f64 (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))"]],"stop":[["saturated",1]],"time":21.258056640625,"type":"simplify"},{"compiler":[[23,15]],"time":0.469970703125,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","next",0.236660009768442],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))","fresh",0.24285126953688405]],"compiler":[[11,8],[14,11],[11,8],[14,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.18978500976844204],"time":1.55810546875,"type":"prune"},{"compiler":[[26,11]],"locations":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))",0.03125,true],["(/.f64 1 (sin.f64 B))",0.140625,true],["(/.f64 x (tan.f64 B))",0.1640625,true],["(tan.f64 B)",0.26400375976844204,true]],"time":13.716064453125,"type":"localize"},{"count":[[4,64]],"series":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","x","-inf",0.2080078125],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","x","inf",0.19482421875],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","x","0",0.31494140625],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","B","-inf",0.217041015625],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","B","inf",0.244873046875],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","B","0",0.3349609375],["(/.f64 1 (sin.f64 B))","B","-inf",0.36181640625],["(/.f64 1 (sin.f64 B))","B","inf",0.37109375],["(/.f64 1 (sin.f64 B))","B","0",0.27490234375],["(/.f64 x (tan.f64 B))","B","-inf",0.448974609375],["(/.f64 x (tan.f64 B))","B","inf",0.508056640625],["(/.f64 x (tan.f64 B))","B","0",0.430908203125],["(/.f64 x (tan.f64 B))","x","-inf",0.9951171875],["(/.f64 x (tan.f64 B))","x","inf",0.612060546875],["(/.f64 x (tan.f64 B))","x","0",1.35400390625],["(tan.f64 B)","B","-inf",0.448974609375],["(tan.f64 B)","B","inf",0.4599609375],["(tan.f64 B)","B","0",0.472900390625]],"time":8.532958984375,"type":"series"},{"count":[[4,297]],"egraph":[[2,2915,29,0.025571416],[1,199,29,0.004026499],[0,9,29,0.000259833]],"inputs":[["(tan.f64 B)","(/.f64 x (tan.f64 B))","(/.f64 1 (sin.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (tan.f64 B))) 2)) (log.f64 (cbrt.f64 (exp.f64 (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (tan.f64 B)))) (log.f64 (sqrt.f64 (exp.f64 (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 B)) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) 2) (cbrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 B)) (sqrt.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 B) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) 2) (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sin.f64 B)) (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 B)) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 B) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 B) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 B)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 B)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 B) (sin.f64 B)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 B) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (tan.f64 B)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 x (tan.f64 B)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (tan.f64 B))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (tan.f64 B)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (cbrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) (sqrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 B)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (/.f64 x (cbrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (tan.f64 B) -1/2) (/.f64 x (sqrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (tan.f64 B) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (tan.f64 B) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (tan.f64 B))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (sin.f64 B)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (sin.f64 B))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (sin.f64 B)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 B) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 B)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 B)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (sin.f64 B))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 B) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 B) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 B)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (sin.f64 B))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 -1 (/.f64 x (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 x) (/.f64 1 (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B)))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B)))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B)))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B)))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B)))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B)))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B)))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B)))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B)))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B)))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B)))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B)))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B)))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B)))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (tan.f64 B)))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (tan.f64 B)))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (tan.f64 B)))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (tan.f64 B)))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (tan.f64 B)))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (tan.f64 B)))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (tan.f64 B)))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 (tan.f64 B))) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (tan.f64 B)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (tan.f64 B))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (tan.f64 B))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (tan.f64 B))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (tan.f64 B))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (tan.f64 B))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (tan.f64 B))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (tan.f64 B))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (tan.f64 B)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (tan.f64 B)))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2) (*.f64 (/.f64 x (cbrt.f64 (tan.f64 B))) (pow.f64 (cbrt.f64 (tan.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (tan.f64 B)))) (pow.f64 (tan.f64 B) -1/2) (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (tan.f64 B)))) (pow.f64 (tan.f64 B) -1/2) (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (tan.f64 B)))) (pow.f64 (tan.f64 B) -1/2) (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (tan.f64 B)))) (pow.f64 (tan.f64 B) -1/2) (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (tan.f64 B)))) (pow.f64 (tan.f64 B) -1/2) (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (tan.f64 B)))) (pow.f64 (tan.f64 B) -1/2) (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (tan.f64 B)))) (pow.f64 (tan.f64 B) -1/2) (*.f64 (/.f64 x (sqrt.f64 (tan.f64 B))) (pow.f64 (tan.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (tan.f64 B) (sin.f64 B)) (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2)) (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (*.f64 (tan.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B)))) (neg.f64 (*.f64 (tan.f64 B) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3))) (neg.f64 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2))) (neg.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (tan.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) x)) (*.f64 (neg.f64 (sin.f64 B)) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (/.f64 (tan.f64 B) x) (neg.f64 (*.f64 (neg.f64 (sin.f64 B)) 1))) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 (tan.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (tan.f64 B)) (*.f64 (sin.f64 B) (neg.f64 x))) (*.f64 (sin.f64 B) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1 (neg.f64 (tan.f64 B))) (*.f64 (neg.f64 (sin.f64 B)) (neg.f64 x))) (*.f64 (neg.f64 (sin.f64 B)) (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 3)) (+.f64 (pow.f64 (sin.f64 B) -2) (-.f64 (pow.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 2) (*.f64 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 2)) (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (sin.f64 B)) (tan.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (tan.f64 B) x) (sin.f64 B)) (*.f64 (sin.f64 B) (/.f64 (tan.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (tan.f64 B) (sin.f64 B)) (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2)) (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (exp.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 1 (sin.f64 B))) (+.f64 1 (expm1.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (+.f64 1 (expm1.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (exp.f64 (/.f64 (neg.f64 x) (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (/.f64 1 (exp.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (neg.f64 x) (tan.f64 B))) (exp.f64 (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (neg.f64 x) (tan.f64 B))) (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (/.f64 x (tan.f64 B)))) (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (/.f64 1 (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) 1 (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) 1 (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1 (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1 (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1 (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B))) (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) (neg.f64 (sqrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (neg.f64 x) (tan.f64 B))) 2) (cbrt.f64 (/.f64 (neg.f64 x) (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (neg.f64 x) (tan.f64 B))) (sqrt.f64 (/.f64 (neg.f64 x) (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 x (tan.f64 B)))) (sqrt.f64 (/.f64 x (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (/.f64 (neg.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (*.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (tan.f64 B))) x (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (fma.f64 (/.f64 (neg.f64 x) (tan.f64 B)) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (+.f64 (/.f64 (neg.f64 x) (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 1 (sin.f64 B)))))))"]],"rules":[["egg-rr",200],["egg-rr",30],["egg-rr",38],["egg-rr",29]],"stop":[["node limit",1]],"time":73.927978515625,"type":"rewrite"},{"count":[[361,333]],"egraph":[[4,7574,888,0.028143709000000003],[3,3139,888,0.016578042],[2,710,890,0.006002626],[1,230,910,0.001609459],[0,82,943,0.000429542]],"inputs":[["B","(+.f64 (*.f64 1/3 (pow.f64 B 3)) B)","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) B))","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) (+.f64 (*.f64 17/315 (pow.f64 B 7)) B)))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x))))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))))) (pow.f64 B 5))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 1 B)","(+.f64 (*.f64 1/6 B) (/.f64 1 B))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (/.f64 1 B)))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (+.f64 (*.f64 31/15120 (pow.f64 B 5)) (/.f64 1 B))))","(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B))) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 31/15120 (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)))))) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B)))) (/.f64 x B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))"]],"method":["egg-herbie"],"outputs":[["B","(+.f64 (*.f64 1/3 (pow.f64 B 3)) B)","(fma.f64 1/3 (pow.f64 B 3) B)","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) B))","(fma.f64 1/3 (pow.f64 B 3) (fma.f64 2/15 (pow.f64 B 5) B))","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) (+.f64 (*.f64 17/315 (pow.f64 B 7)) B)))","(fma.f64 1/3 (pow.f64 B 3) (fma.f64 2/15 (pow.f64 B 5) (fma.f64 17/315 (pow.f64 B 7) B)))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))","(fma.f64 -1/3 (*.f64 B x) (/.f64 x B))","(fma.f64 B (*.f64 x -1/3) (/.f64 x B))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x))))","(fma.f64 -1 (*.f64 (pow.f64 B 3) (*.f64 x 1/45)) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x))))","(-.f64 (fma.f64 -1/3 (*.f64 B x) (/.f64 x B)) (*.f64 (pow.f64 B 3) (*.f64 x 1/45)))","(fma.f64 B (*.f64 x -1/3) (fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (/.f64 x B)))","(fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (fma.f64 B (*.f64 x -1/3) (/.f64 x B)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))))) (pow.f64 B 5))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)) (pow.f64 B 3))) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))))","(fma.f64 -1 (*.f64 (pow.f64 B 5) (fma.f64 17/315 x (fma.f64 -2/45 x (*.f64 -1/3 (*.f64 x 1/45))))) (fma.f64 -1 (*.f64 (pow.f64 B 3) (*.f64 x 1/45)) (+.f64 (/.f64 x B) (*.f64 -1/3 (*.f64 B x)))))","(-.f64 (-.f64 (fma.f64 -1/3 (*.f64 B x) (/.f64 x B)) (*.f64 (pow.f64 B 3) (*.f64 x 1/45))) (*.f64 (pow.f64 B 5) (+.f64 (*.f64 x -1/135) (*.f64 x 1/105))))","(fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (-.f64 (fma.f64 B (*.f64 x -1/3) (/.f64 x B)) (*.f64 (pow.f64 B 5) (*.f64 x 2/945))))","(fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (fma.f64 (pow.f64 B 5) (*.f64 x -2/945) (fma.f64 B (*.f64 x -1/3) (/.f64 x B))))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 1 B)","(+.f64 (*.f64 1/6 B) (/.f64 1 B))","(fma.f64 1/6 B (/.f64 1 B))","(fma.f64 B 1/6 (/.f64 1 B))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (/.f64 1 B)))","(fma.f64 7/360 (pow.f64 B 3) (fma.f64 1/6 B (/.f64 1 B)))","(fma.f64 (pow.f64 B 3) 7/360 (fma.f64 B 1/6 (/.f64 1 B)))","(fma.f64 B 1/6 (fma.f64 (pow.f64 B 3) 7/360 (/.f64 1 B)))","(+.f64 (*.f64 7/360 (pow.f64 B 3)) (+.f64 (*.f64 1/6 B) (+.f64 (*.f64 31/15120 (pow.f64 B 5)) (/.f64 1 B))))","(fma.f64 7/360 (pow.f64 B 3) (fma.f64 1/6 B (fma.f64 31/15120 (pow.f64 B 5) (/.f64 1 B))))","(fma.f64 (pow.f64 B 3) 7/360 (fma.f64 B 1/6 (fma.f64 (pow.f64 B 5) 31/15120 (/.f64 1 B))))","(fma.f64 B 1/6 (fma.f64 (pow.f64 B 3) 7/360 (fma.f64 (pow.f64 B 5) 31/15120 (/.f64 1 B))))","(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (/.f64 1 B)) (/.f64 x B))","(+.f64 (*.f64 B (+.f64 1/6 (*.f64 1/3 x))) (/.f64 (-.f64 1 x) B))","(fma.f64 B (fma.f64 1/3 x 1/6) (/.f64 (-.f64 1 x) B))","(-.f64 (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B))) (/.f64 x B))","(-.f64 (fma.f64 (+.f64 1/6 (*.f64 1/3 x)) B (fma.f64 (+.f64 (*.f64 x 1/45) 7/360) (pow.f64 B 3) (/.f64 1 B))) (/.f64 x B))","(fma.f64 B (fma.f64 1/3 x 1/6) (+.f64 (*.f64 (pow.f64 B 3) (fma.f64 x 1/45 7/360)) (/.f64 (-.f64 1 x) B)))","(fma.f64 B (fma.f64 1/3 x 1/6) (fma.f64 (pow.f64 B 3) (fma.f64 x 1/45 7/360) (/.f64 (-.f64 1 x) B)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 17/315 x) (+.f64 31/15120 (+.f64 (*.f64 -2/45 x) (*.f64 -1/3 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x)))))) (pow.f64 B 5)) (+.f64 (*.f64 (+.f64 1/6 (*.f64 1/3 x)) B) (+.f64 (*.f64 (+.f64 7/360 (+.f64 (*.f64 -1/9 x) (*.f64 2/15 x))) (pow.f64 B 3)) (/.f64 1 B)))) (/.f64 x B))","(-.f64 (fma.f64 (fma.f64 17/315 x (+.f64 (fma.f64 -2/45 x (*.f64 -1/3 (*.f64 x 1/45))) 31/15120)) (pow.f64 B 5) (fma.f64 (+.f64 1/6 (*.f64 1/3 x)) B (fma.f64 (+.f64 (*.f64 x 1/45) 7/360) (pow.f64 B 3) (/.f64 1 B)))) (/.f64 x B))","(fma.f64 (pow.f64 B 5) (+.f64 (+.f64 (*.f64 x -1/135) (*.f64 x 1/105)) 31/15120) (fma.f64 B (fma.f64 1/3 x 1/6) (+.f64 (*.f64 (pow.f64 B 3) (fma.f64 x 1/45 7/360)) (/.f64 (-.f64 1 x) B))))","(fma.f64 (pow.f64 B 5) (+.f64 (*.f64 x 2/945) 31/15120) (fma.f64 B (fma.f64 1/3 x 1/6) (fma.f64 (pow.f64 B 3) (fma.f64 x 1/45 7/360) (/.f64 (-.f64 1 x) B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (neg.f64 x))","(*.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (neg.f64 x))","(*.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 x (sin.f64 B)) (cos.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))"]],"stop":[["node limit",1]],"time":54.43505859375,"type":"simplify"},{"compiler":[[8142,3420]],"time":66.220947265625,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","next",0.19921875],["(+.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))","fresh",11.317070019536883],["(*.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))))","fresh",11.322303808610654],["(-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -3)) (/.f64 x (tan.f64 B)))","fresh",16.252285009768443],["(+.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))","fresh",0.4870300781475361],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))))","fresh",0.20769501953688405],["(/.f64 (/.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (sin.f64 B)) (tan.f64 B))","fresh",0.26466752930532605]],"compiler":[[14,9],[37,17],[17,10],[12,9],[37,17],[16,11],[15,8],[14,9],[37,17],[17,10],[12,9],[37,17],[16,11],[15,8]],"count":[[335,7]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[333,7],"picked":[1,0]}],"min-error":[0.0078125],"time":131.194091796875,"type":"prune"},{"compiler":[[36,12]],"locations":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))",0.03125,true],["(*.f64 (cos.f64 B) x)",0.12890625,true],["(/.f64 1 (sin.f64 B))",0.140625,false],["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))",0.19921875,true]],"time":8.137939453125,"type":"localize"},{"count":[[3,24]],"series":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","x","-inf",0.196044921875],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","x","inf",0.2001953125],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","x","0",0.172119140625],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","B","-inf",0.39599609375],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","B","inf",0.197021484375],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","B","0",0.401123046875],["(*.f64 (cos.f64 B) x)","x","-inf",0.27490234375],["(*.f64 (cos.f64 B) x)","x","inf",0.291015625],["(*.f64 (cos.f64 B) x)","x","0",0.137939453125],["(*.f64 (cos.f64 B) x)","B","-inf",0.26806640625],["(*.f64 (cos.f64 B) x)","B","inf",0.14599609375],["(*.f64 (cos.f64 B) x)","B","0",0.35791015625],["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","x","-inf",0.2861328125],["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","x","inf",0.3837890625],["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","x","0",0.43994140625],["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","B","-inf",1.407958984375],["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","B","inf",0.5],["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","B","0",0.55908203125]],"time":6.822021484375,"type":"series"},{"count":[[3,352]],"egraph":[[2,3265,26,0.027198292],[1,218,31,0.004260375],[0,10,31,0.00027675]],"inputs":[["(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(*.f64 (cos.f64 B) x)","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 x (tan.f64 B)))) (cbrt.f64 (exp.f64 (/.f64 x (tan.f64 B)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (tan.f64 B))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (tan.f64 B)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 B) (/.f64 1 (/.f64 (sin.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 B) (*.f64 x (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 B) x) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (cbrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 B) -1/2) (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) (sqrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 B) (neg.f64 x)) (/.f64 1 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 B) 1) (/.f64 x (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 (cos.f64 B) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 x (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B))) (/.f64 x (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (/.f64 1 (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (pow.f64 (sin.f64 B) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (tan.f64 B) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (tan.f64 B) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (tan.f64 B))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 B) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 B)) x)) (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 B)) x)))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 B)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 B)) x))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 B)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cos.f64 B) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 B) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 B) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 B) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 B)) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cos.f64 B) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 B) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 B) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (cos.f64 B) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 B) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 -1 (/.f64 x (tan.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (*.f64 (cos.f64 B) (neg.f64 x)) (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B)))) (/.f64 x (sqrt.f64 (sin.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (sin.f64 B) x))) (cos.f64 B) (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (sin.f64 B) x))) (cos.f64 B) (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (sin.f64 B) x))) (cos.f64 B) (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (sin.f64 B) x))) (cos.f64 B) (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (sin.f64 B) x))) (cos.f64 B) (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (sin.f64 B) x))) (cos.f64 B) (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (/.f64 (sin.f64 B) x))) (cos.f64 B) (*.f64 (/.f64 1 (/.f64 (sin.f64 B) x)) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B)))) (fma.f64 (neg.f64 (*.f64 x (/.f64 1 (sin.f64 B)))) (cos.f64 B) (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B)))) (fma.f64 (neg.f64 (*.f64 x (/.f64 1 (sin.f64 B)))) (cos.f64 B) (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B)))) (fma.f64 (neg.f64 (*.f64 x (/.f64 1 (sin.f64 B)))) (cos.f64 B) (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B)))) (fma.f64 (neg.f64 (*.f64 x (/.f64 1 (sin.f64 B)))) (cos.f64 B) (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B)))) (fma.f64 (neg.f64 (*.f64 x (/.f64 1 (sin.f64 B)))) (cos.f64 B) (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B)))) (fma.f64 (neg.f64 (*.f64 x (/.f64 1 (sin.f64 B)))) (cos.f64 B) (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B)))) (fma.f64 (neg.f64 (*.f64 x (/.f64 1 (sin.f64 B)))) (cos.f64 B) (*.f64 (*.f64 x (/.f64 1 (sin.f64 B))) (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x))) (fma.f64 (neg.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))) x (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x))) (fma.f64 (neg.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))) x (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x))) (fma.f64 (neg.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))) x (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x))) (fma.f64 (neg.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))) x (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x))) (fma.f64 (neg.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))) x (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x))) (fma.f64 (neg.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))) x (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x))) (fma.f64 (neg.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))) x (*.f64 (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (*.f64 (*.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x))))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))) (sqrt.f64 (*.f64 (cos.f64 B) x)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B))) (sqrt.f64 (*.f64 (cos.f64 B) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x))))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (sin.f64 B)))) (*.f64 (cos.f64 B) (neg.f64 x)) (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x))))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (sin.f64 B)))) (*.f64 (cos.f64 B) (neg.f64 x)) (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x))))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (sin.f64 B)))) (*.f64 (cos.f64 B) (neg.f64 x)) (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x))))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (sin.f64 B)))) (*.f64 (cos.f64 B) (neg.f64 x)) (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x))))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (sin.f64 B)))) (*.f64 (cos.f64 B) (neg.f64 x)) (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x))))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (sin.f64 B)))) (*.f64 (cos.f64 B) (neg.f64 x)) (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x))))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 (sin.f64 B)))) (*.f64 (cos.f64 B) (neg.f64 x)) (*.f64 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (cos.f64 B) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))) (fma.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))) (fma.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))) (fma.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))) (fma.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))) (fma.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))) (fma.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))) (fma.f64 (neg.f64 x) (/.f64 (cos.f64 B) (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (sin.f64 B)))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (sin.f64 B)))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (sin.f64 B)))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (sin.f64 B)))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (sin.f64 B)))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (sin.f64 B)))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2)))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 (sin.f64 B)))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))) (*.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (pow.f64 (sin.f64 B) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2))))) (fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/2)) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2))))) (fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/2)) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2))))) (fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/2)) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2))))) (fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/2)) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2))))) (fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/2)) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2))))) (fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/2)) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2))))) (fma.f64 (neg.f64 (pow.f64 (sin.f64 B) -1/2)) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)) (*.f64 (pow.f64 (sin.f64 B) -1/2) (*.f64 (*.f64 (cos.f64 B) x) (pow.f64 (sin.f64 B) -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)))) (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) (-.f64 1 (*.f64 (cos.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (sin.f64 B) 2) (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 B) (-.f64 1 (*.f64 (cos.f64 B) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2)) (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))) (neg.f64 (pow.f64 (sin.f64 B) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3))) (neg.f64 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2))) (neg.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (sin.f64 B) x) (*.f64 (sin.f64 B) (cos.f64 B))) (*.f64 (sin.f64 B) (/.f64 (sin.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1 (/.f64 (sin.f64 B) x)) (*.f64 (neg.f64 (sin.f64 B)) (cos.f64 B))) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 (sin.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (cos.f64 B) x))) (*.f64 (neg.f64 (sin.f64 B)) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1 (/.f64 (tan.f64 B) x)) (*.f64 (neg.f64 (sin.f64 B)) 1)) (*.f64 (neg.f64 (sin.f64 B)) (/.f64 (tan.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sin.f64 B)) (*.f64 (sin.f64 B) (*.f64 (cos.f64 B) (neg.f64 x)))) (*.f64 (sin.f64 B) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1 (neg.f64 (sin.f64 B))) (*.f64 (neg.f64 (sin.f64 B)) (*.f64 (cos.f64 B) (neg.f64 x)))) (*.f64 (neg.f64 (sin.f64 B)) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -1 (*.f64 (cos.f64 B) (neg.f64 x))) (neg.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (neg.f64 (/.f64 x (tan.f64 B))) 3)) (+.f64 (pow.f64 (sin.f64 B) -2) (-.f64 (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) (neg.f64 (/.f64 x (tan.f64 B)))) (*.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 x (tan.f64 B)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) (neg.f64 (/.f64 x (tan.f64 B))))) (-.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (sin.f64 B)) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) 1) (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (sqrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (tan.f64 B) x) (sin.f64 B)) (*.f64 (sin.f64 B) (/.f64 (tan.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 B) 2) (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 B) (-.f64 1 (*.f64 (cos.f64 B) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2)) (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (exp.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 1 (sin.f64 B))) (+.f64 1 (expm1.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (+.f64 1 (expm1.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (exp.f64 (neg.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1 (sin.f64 B))) (/.f64 1 (exp.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B)))) (/.f64 1 (exp.f64 (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (/.f64 x (tan.f64 B)))) (exp.f64 (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (/.f64 x (tan.f64 B)))) (exp.f64 (/.f64 1 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (/.f64 x (tan.f64 B)))) (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (/.f64 x (tan.f64 B)))) (+.f64 1 (expm1.f64 (/.f64 1 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 B) x) (neg.f64 (/.f64 1 (sin.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) 1 (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) 1 (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) (-.f64 1 (*.f64 (cos.f64 B) x)) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) (-.f64 1 (*.f64 (cos.f64 B) x)) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) (-.f64 1 (*.f64 (cos.f64 B) x)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 B)) (-.f64 1 (*.f64 (cos.f64 B) x)) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 1 (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 1 (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B)) 1 (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) 2) (cbrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sin.f64 B) -1/2) (pow.f64 (sin.f64 B) -1/2) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (sqrt.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) (neg.f64 (sqrt.f64 (/.f64 x (tan.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 (sin.f64 B))) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 B) (neg.f64 x)) (/.f64 1 (sin.f64 B)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) -2) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) -2) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) -2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) -2) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -3) (pow.f64 (/.f64 x (tan.f64 B)) 3)) (/.f64 1 (fma.f64 (/.f64 x (tan.f64 B)) (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B))) (pow.f64 (sin.f64 B) -2))) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (sin.f64 B) -2) (pow.f64 (/.f64 x (tan.f64 B)) 2)) (/.f64 1 (+.f64 (/.f64 x (tan.f64 B)) (/.f64 1 (sin.f64 B)))) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x (tan.f64 B)))) (cbrt.f64 (neg.f64 (/.f64 x (tan.f64 B))))) (cbrt.f64 (neg.f64 (/.f64 x (tan.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (/.f64 x (tan.f64 B)))) (sqrt.f64 (neg.f64 (/.f64 x (tan.f64 B)))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 x (tan.f64 B)))) (sqrt.f64 (/.f64 x (tan.f64 B))) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 1 (cbrt.f64 (sin.f64 B))) (*.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (-.f64 (pow.f64 (sin.f64 B) -1/2) (sqrt.f64 (/.f64 x (tan.f64 B)))) (+.f64 (neg.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))) (/.f64 1 (sin.f64 B)))))))"]],"rules":[["egg-rr",286],["egg-rr",18],["egg-rr",48]],"stop":[["node limit",1]],"time":88.538818359375,"type":"rewrite"},{"count":[[376,378]],"egraph":[[4,6585,436,0.030705333],[3,3593,436,0.017493750000000002],[2,753,453,0.006681958],[1,244,517,0.001685041],[0,84,599,0.000443125]],"inputs":[["(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3))))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (+.f64 (*.f64 (-.f64 (*.f64 -1/720 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (+.f64 (*.f64 -1/5040 x) (*.f64 1/120 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (pow.f64 B 5)) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3)))))","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 B 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)))","(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 1/6 (*.f64 -1/6 x)) (*.f64 -1/2 x)) B) (/.f64 1 B)) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 1/6 (*.f64 -1/6 x)) (*.f64 -1/2 x)) B) (+.f64 (*.f64 (-.f64 (+.f64 7/360 (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (*.f64 1/24 x)) (pow.f64 B 3)) (/.f64 1 B))) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 31/15120 (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (+.f64 (*.f64 -1/5040 x) (*.f64 1/120 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (*.f64 -1/720 x)) (pow.f64 B 5)) (+.f64 (*.f64 (-.f64 (+.f64 1/6 (*.f64 -1/6 x)) (*.f64 -1/2 x)) B) (+.f64 (*.f64 (-.f64 (+.f64 7/360 (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (*.f64 1/24 x)) (pow.f64 B 3)) (/.f64 1 B)))) (/.f64 x B))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B))","(+.f64 (/.f64 x B) (*.f64 B (*.f64 x -1/3)))","(fma.f64 B (*.f64 x -1/3) (/.f64 x B))","(fma.f64 (*.f64 x B) -1/3 (/.f64 x B))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3))))","(+.f64 (/.f64 x B) (fma.f64 (*.f64 x -1/3) B (*.f64 (-.f64 (*.f64 x 1/24) (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3)))) (pow.f64 B 3))))","(+.f64 (/.f64 x B) (fma.f64 (-.f64 (*.f64 x 1/30) (*.f64 x 1/18)) (pow.f64 B 3) (*.f64 x (*.f64 -1/3 B))))","(fma.f64 x (*.f64 B -1/3) (fma.f64 (*.f64 x -1/45) (pow.f64 B 3) (/.f64 x B)))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (+.f64 (*.f64 (-.f64 (*.f64 -1/720 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (+.f64 (*.f64 -1/5040 x) (*.f64 1/120 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (pow.f64 B 5)) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3)))))","(+.f64 (/.f64 x B) (fma.f64 (*.f64 x -1/3) B (fma.f64 (-.f64 (*.f64 x -1/720) (fma.f64 -1/6 (-.f64 (*.f64 x 1/24) (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3)))) (fma.f64 -1/5040 x (*.f64 (*.f64 x -1/3) 1/120)))) (pow.f64 B 5) (*.f64 (-.f64 (*.f64 x 1/24) (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3)))) (pow.f64 B 3)))))","(+.f64 (/.f64 x B) (fma.f64 B (*.f64 x -1/3) (fma.f64 (-.f64 (*.f64 x -1/720) (fma.f64 -1/6 (-.f64 (*.f64 x 1/30) (*.f64 x 1/18)) (fma.f64 x -1/5040 (*.f64 x -1/360)))) (pow.f64 B 5) (*.f64 (-.f64 (*.f64 x 1/30) (*.f64 x 1/18)) (pow.f64 B 3)))))","(+.f64 (/.f64 x B) (fma.f64 (*.f64 x -1/45) (pow.f64 B 3) (fma.f64 (-.f64 (fma.f64 x -1/720 (*.f64 (*.f64 x -1/45) 1/6)) (*.f64 x -1/336)) (pow.f64 B 5) (*.f64 -1/3 (*.f64 x B)))))","(+.f64 (/.f64 x B) (fma.f64 (*.f64 x -1/45) (pow.f64 B 3) (fma.f64 (+.f64 (*.f64 (*.f64 x -1/45) 1/6) (*.f64 x 1/630)) (pow.f64 B 5) (*.f64 -1/3 (*.f64 x B)))))","(+.f64 (/.f64 x B) (fma.f64 (*.f64 x -1/45) (pow.f64 B 3) (fma.f64 x (*.f64 B -1/3) (*.f64 (+.f64 (*.f64 (*.f64 x -1/45) 1/6) (*.f64 x 1/630)) (pow.f64 B 5)))))","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)","(fma.f64 -1/2 (*.f64 x (*.f64 B B)) x)","(*.f64 x (fma.f64 (*.f64 B -1/2) B 1))","(*.f64 x (fma.f64 -1/2 (*.f64 B B) 1))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x))","(fma.f64 1/24 (*.f64 x (pow.f64 B 4)) (fma.f64 -1/2 (*.f64 x (*.f64 B B)) x))","(fma.f64 x (fma.f64 1/24 (pow.f64 B 4) (*.f64 B (*.f64 B -1/2))) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 B 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 B 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 B 2) x)) x)))","(fma.f64 -1/720 (*.f64 x (pow.f64 B 6)) (fma.f64 1/24 (*.f64 x (pow.f64 B 4)) (fma.f64 -1/2 (*.f64 x (*.f64 B B)) x)))","(fma.f64 x (*.f64 -1/720 (pow.f64 B 6)) (fma.f64 x (fma.f64 1/24 (pow.f64 B 4) (*.f64 B (*.f64 B -1/2))) x))","(*.f64 x (+.f64 (fma.f64 (*.f64 B -1/2) B 1) (fma.f64 -1/720 (pow.f64 B 6) (*.f64 1/24 (pow.f64 B 4)))))","(*.f64 x (+.f64 (fma.f64 -1/2 (*.f64 B B) 1) (fma.f64 -1/720 (pow.f64 B 6) (*.f64 1/24 (pow.f64 B 4)))))","(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 1/6 (*.f64 -1/6 x)) (*.f64 -1/2 x)) B) (/.f64 1 B)) (/.f64 x B))","(+.f64 (*.f64 B (+.f64 (+.f64 (*.f64 x -1/6) 1/6) (*.f64 1/2 x))) (/.f64 (-.f64 1 x) B))","(fma.f64 B (+.f64 1/6 (*.f64 x 1/3)) (/.f64 (-.f64 1 x) B))","(fma.f64 B (fma.f64 x 1/3 1/6) (/.f64 (-.f64 1 x) B))","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 1/6 (*.f64 -1/6 x)) (*.f64 -1/2 x)) B) (+.f64 (*.f64 (-.f64 (+.f64 7/360 (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (*.f64 1/24 x)) (pow.f64 B 3)) (/.f64 1 B))) (/.f64 x B))","(-.f64 (fma.f64 (+.f64 (+.f64 (*.f64 x -1/6) 1/6) (*.f64 1/2 x)) B (fma.f64 (+.f64 7/360 (-.f64 (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3))) (*.f64 x 1/24))) (pow.f64 B 3) (/.f64 1 B))) (/.f64 x B))","(+.f64 (fma.f64 B (+.f64 1/6 (*.f64 x 1/3)) (*.f64 (pow.f64 B 3) (+.f64 (fma.f64 x 1/120 (*.f64 x 1/18)) (-.f64 7/360 (*.f64 x 1/24))))) (/.f64 (-.f64 1 x) B))","(fma.f64 B (fma.f64 x 1/3 1/6) (fma.f64 (pow.f64 B 3) (+.f64 7/360 (fma.f64 x 1/120 (*.f64 x 1/72))) (/.f64 (-.f64 1 x) B)))","(fma.f64 B (fma.f64 x 1/3 1/6) (fma.f64 (pow.f64 B 3) (-.f64 7/360 (*.f64 x -1/45)) (/.f64 (-.f64 1 x) B)))","(fma.f64 B (fma.f64 x 1/3 1/6) (fma.f64 (pow.f64 B 3) (+.f64 7/360 (*.f64 x 1/45)) (/.f64 (-.f64 1 x) B)))","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 31/15120 (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (+.f64 (*.f64 -1/5040 x) (*.f64 1/120 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (*.f64 -1/720 x)) (pow.f64 B 5)) (+.f64 (*.f64 (-.f64 (+.f64 1/6 (*.f64 -1/6 x)) (*.f64 -1/2 x)) B) (+.f64 (*.f64 (-.f64 (+.f64 7/360 (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (*.f64 1/24 x)) (pow.f64 B 3)) (/.f64 1 B)))) (/.f64 x B))","(-.f64 (fma.f64 (+.f64 31/15120 (-.f64 (fma.f64 -1/6 (-.f64 (*.f64 x 1/24) (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3)))) (fma.f64 -1/5040 x (*.f64 (*.f64 x -1/3) 1/120))) (*.f64 x -1/720))) (pow.f64 B 5) (fma.f64 (+.f64 (+.f64 (*.f64 x -1/6) 1/6) (*.f64 1/2 x)) B (fma.f64 (+.f64 7/360 (-.f64 (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3))) (*.f64 x 1/24))) (pow.f64 B 3) (/.f64 1 B)))) (/.f64 x B))","(fma.f64 (pow.f64 B 5) (+.f64 (fma.f64 -1/6 (-.f64 (*.f64 x 1/30) (*.f64 x 1/18)) (fma.f64 x -1/5040 (*.f64 x -1/360))) (-.f64 31/15120 (*.f64 x -1/720))) (+.f64 (fma.f64 B (+.f64 1/6 (*.f64 x 1/3)) (*.f64 (pow.f64 B 3) (+.f64 (fma.f64 x 1/120 (*.f64 x 1/18)) (-.f64 7/360 (*.f64 x 1/24))))) (/.f64 (-.f64 1 x) B)))","(fma.f64 (pow.f64 B 5) (fma.f64 x 1/720 (+.f64 (*.f64 x -1/336) (fma.f64 -1/6 (*.f64 x -1/45) 31/15120))) (fma.f64 B (fma.f64 x 1/3 1/6) (fma.f64 (pow.f64 B 3) (+.f64 7/360 (fma.f64 x 1/120 (*.f64 x 1/72))) (/.f64 (-.f64 1 x) B))))","(fma.f64 (pow.f64 B 5) (+.f64 31/15120 (fma.f64 -1/6 (*.f64 x -1/45) (*.f64 x -1/630))) (fma.f64 B (fma.f64 x 1/3 1/6) (fma.f64 (pow.f64 B 3) (-.f64 7/360 (*.f64 x -1/45)) (/.f64 (-.f64 1 x) B))))","(fma.f64 (pow.f64 B 5) (+.f64 31/15120 (fma.f64 -1/6 (*.f64 x -1/45) (*.f64 x -1/630))) (fma.f64 B (fma.f64 x 1/3 1/6) (fma.f64 (pow.f64 B 3) (+.f64 7/360 (*.f64 x 1/45)) (/.f64 (-.f64 1 x) B))))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (neg.f64 x))","(*.f64 x (/.f64 (neg.f64 (cos.f64 B)) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (neg.f64 x))","(*.f64 x (/.f64 (neg.f64 (cos.f64 B)) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 (sin.f64 B) (cos.f64 B))))"]],"stop":[["node limit",1]],"time":53.1611328125,"type":"simplify"},{"compiler":[[12990,4976]],"time":93.77001953125,"type":"eval"},{"alts":[["(-.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B)))) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","fresh",11.317070019536883],["(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))))","fresh",0.22494125976844204],["(*.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))))","fresh",11.322303808610654],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","next",0.18359375],["(/.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) 2))","fresh",10.89048471933162],["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))))","fresh",0.20769501953688405],["(-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -3)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","fresh",16.21484375],["(/.f64 (-.f64 (/.f64 (sin.f64 B) x) (*.f64 (sin.f64 B) (cos.f64 B))) (*.f64 (sin.f64 B) (/.f64 (sin.f64 B) x)))","fresh",8.364323228993356]],"compiler":[[21,14],[16,11],[17,10],[11,8],[17,10],[16,11],[15,10],[20,9],[21,14],[16,11],[17,10],[11,8],[17,10],[16,11],[15,10],[20,9]],"count":[[422,8]],"kept":[{"done":[0,0],"fresh":[6,2],"new":[415,6],"picked":[1,0]}],"min-error":[0],"time":196.35205078125,"type":"prune"},{"compiler":[[28,11]],"locations":[["(cos.f64 B)",0.01171875,true],["(sin.f64 B)",0.015625,true],["(*.f64 (cos.f64 B) x)",0.12890625,false],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))",0.17578125,true]],"time":6.975830078125,"type":"localize"},{"count":[[3,24]],"series":[["(cos.f64 B)","B","-inf",0.1318359375],["(cos.f64 B)","B","inf",0.14990234375],["(cos.f64 B)","B","0",0.178955078125],["(sin.f64 B)","B","-inf",0.133056640625],["(sin.f64 B)","B","inf",0.151123046875],["(sin.f64 B)","B","0",0.18701171875],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","x","-inf",0.313232421875],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","x","inf",0.31396484375],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","x","0",0.300048828125],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","B","-inf",0.429931640625],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","B","inf",0.430908203125],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","B","0",0.594970703125]],"time":3.455078125,"type":"series"},{"count":[[3,158]],"egraph":[[2,2591,20,0.024826875],[1,191,20,0.003381958],[0,9,20,0.000241542]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(sin.f64 B)","(cos.f64 B)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x (tan.f64 B)))) (sqrt.f64 (/.f64 x (tan.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B)))) (/.f64 x (sqrt.f64 (sin.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 x (tan.f64 B)) 1))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (*.f64 (/.f64 x (tan.f64 B)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (tan.f64 B)) 1))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (*.f64 (/.f64 x (tan.f64 B)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (tan.f64 B)) 1))) (fma.f64 (neg.f64 (/.f64 x (tan.f64 B))) 1 (*.f64 (/.f64 x (tan.f64 B)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) x)))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) x)))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) x)))) (fma.f64 (neg.f64 (/.f64 1 (sin.f64 B))) (*.f64 (cos.f64 B) x) (*.f64 (/.f64 1 (sin.f64 B)) (*.f64 (cos.f64 B) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (*.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B)))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (cbrt.f64 (sin.f64 B))) (pow.f64 (cbrt.f64 (sin.f64 B)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B)))) (pow.f64 (sin.f64 B) -1/2) (*.f64 (/.f64 (*.f64 (cos.f64 B) x) (sqrt.f64 (sin.f64 B))) (pow.f64 (sin.f64 B) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1)))) (fma.f64 (neg.f64 (/.f64 x (sin.f64 B))) (/.f64 (cos.f64 B) 1) (*.f64 (/.f64 x (sin.f64 B)) (/.f64 (cos.f64 B) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))) (/.f64 x 1) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (sin.f64 B)) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (sin.f64 B)))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 x (cbrt.f64 (sin.f64 B))) (/.f64 (cos.f64 B) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B)))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))) (/.f64 x (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (*.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 B) x)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))) (*.f64 (/.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 B) x)) 2) (sqrt.f64 (sin.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (/.f64 1 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) 2) (*.f64 (cbrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (*.f64 (sqrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (/.f64 1 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (/.f64 1 (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) (-.f64 1 (*.f64 (cos.f64 B) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) 1) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) 2) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (pow.f64 (cbrt.f64 (sin.f64 B)) 2)) (/.f64 (sqrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 B) -1/2) (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) 2) (sqrt.f64 (sin.f64 B))) (/.f64 (cbrt.f64 (-.f64 1 (*.f64 (cos.f64 B) x))) (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 B) (-.f64 1 (*.f64 (cos.f64 B) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) 3) (pow.f64 (sin.f64 B) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sin.f64 B) (-.f64 1 (*.f64 (cos.f64 B) x))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))) 2)) (cbrt.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))) (sqrt.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (neg.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) 3) (pow.f64 (sin.f64 B) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 B) (-.f64 1 (*.f64 (cos.f64 B) x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) 2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1 (sin.f64 B))) (sqrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (/.f64 x (tan.f64 B))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 B))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 B)))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 B))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 B))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 B)) (pow.f64 (cbrt.f64 (sin.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) 2) (cbrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 B)) (sqrt.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 B) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 B)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 B)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (sin.f64 B))) 2)) (cbrt.f64 (log.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (sin.f64 B)))) (sqrt.f64 (log.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 B) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (sin.f64 B))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (sin.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sin.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 B)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 B))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 B))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 B))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 B)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cos.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 B)) (pow.f64 (cbrt.f64 (cos.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 B)) 2) (cbrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 B)) (sqrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 B) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 B) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 B)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 B)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cos.f64 B))) 2)) (cbrt.f64 (log.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cos.f64 B)))) (sqrt.f64 (log.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 B) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cos.f64 B)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (cos.f64 B))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 B))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (cos.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 B)) 1) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",30],["egg-rr",98]],"stop":[["node limit",1]],"time":59.23193359375,"type":"rewrite"},{"count":[[182,184]],"egraph":[[4,6976,432,0.028261],[3,2315,432,0.014751625],[2,576,494,0.004900334],[1,202,500,0.001420792],[0,78,540,0.000380792]],"inputs":[["(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B)) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B))) (/.f64 x B))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (+.f64 (*.f64 (-.f64 (*.f64 1/720 x) (+.f64 (*.f64 1/120 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x))))) (*.f64 -1/5040 (-.f64 1 x))))) (pow.f64 B 5)) (/.f64 1 B)))) (/.f64 x B))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","B","(+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)","(+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B))","(+.f64 (*.f64 -1/5040 (pow.f64 B 7)) (+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 B 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (*.f64 1/24 (pow.f64 B 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (+.f64 (*.f64 1/24 (pow.f64 B 4)) (*.f64 -1/720 (pow.f64 B 6)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 x) B)","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B)) (/.f64 x B))","(+.f64 (*.f64 B (+.f64 (*.f64 x 1/2) (*.f64 1/6 (-.f64 1 x)))) (/.f64 (-.f64 1 x) B))","(fma.f64 B (fma.f64 x 1/2 (*.f64 (-.f64 1 x) 1/6)) (/.f64 (-.f64 1 x) B))","(fma.f64 B (fma.f64 x 1/2 (-.f64 1/6 (*.f64 1/6 x))) (/.f64 (-.f64 1 x) B))","(fma.f64 B (+.f64 1/6 (*.f64 x 1/3)) (/.f64 (-.f64 1 x) B))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (/.f64 1 B))) (/.f64 x B))","(-.f64 (fma.f64 (-.f64 (*.f64 x -1/24) (fma.f64 -1/6 (+.f64 (*.f64 x 1/2) (*.f64 1/6 (-.f64 1 x))) (*.f64 (-.f64 1 x) 1/120))) (pow.f64 B 3) (fma.f64 (+.f64 (*.f64 x 1/2) (*.f64 1/6 (-.f64 1 x))) B (/.f64 1 B))) (/.f64 x B))","(fma.f64 (-.f64 (*.f64 x -1/24) (fma.f64 -1/6 (fma.f64 x 1/2 (*.f64 (-.f64 1 x) 1/6)) (*.f64 (-.f64 1 x) 1/120))) (pow.f64 B 3) (fma.f64 B (fma.f64 x 1/2 (*.f64 (-.f64 1 x) 1/6)) (/.f64 (-.f64 1 x) B)))","(fma.f64 (-.f64 (-.f64 (fma.f64 x -1/24 (*.f64 (-.f64 1 x) -1/120)) (*.f64 x -1/12)) (*.f64 (-.f64 1 x) -1/36)) (pow.f64 B 3) (fma.f64 B (fma.f64 x 1/2 (-.f64 1/6 (*.f64 1/6 x))) (/.f64 (-.f64 1 x) B)))","(fma.f64 (-.f64 (*.f64 x 1/24) (*.f64 (-.f64 1 x) -7/360)) (pow.f64 B 3) (fma.f64 B (+.f64 1/6 (*.f64 x 1/3)) (/.f64 (-.f64 1 x) B)))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x)))) (pow.f64 B 3)) (+.f64 (*.f64 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x))) B) (+.f64 (*.f64 (-.f64 (*.f64 1/720 x) (+.f64 (*.f64 1/120 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/24 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/2 x) (*.f64 -1/6 (-.f64 1 x)))) (*.f64 1/120 (-.f64 1 x))))) (*.f64 -1/5040 (-.f64 1 x))))) (pow.f64 B 5)) (/.f64 1 B)))) (/.f64 x B))","(-.f64 (fma.f64 (-.f64 (*.f64 x -1/24) (fma.f64 -1/6 (+.f64 (*.f64 x 1/2) (*.f64 1/6 (-.f64 1 x))) (*.f64 (-.f64 1 x) 1/120))) (pow.f64 B 3) (fma.f64 (+.f64 (*.f64 x 1/2) (*.f64 1/6 (-.f64 1 x))) B (fma.f64 (-.f64 (*.f64 x 1/720) (fma.f64 1/120 (+.f64 (*.f64 x 1/2) (*.f64 1/6 (-.f64 1 x))) (fma.f64 -1/6 (-.f64 (*.f64 x -1/24) (fma.f64 -1/6 (+.f64 (*.f64 x 1/2) (*.f64 1/6 (-.f64 1 x))) (*.f64 (-.f64 1 x) 1/120))) (*.f64 (-.f64 1 x) -1/5040)))) (pow.f64 B 5) (/.f64 1 B)))) (/.f64 x B))","(fma.f64 (-.f64 (*.f64 x -1/24) (fma.f64 -1/6 (fma.f64 x 1/2 (*.f64 (-.f64 1 x) 1/6)) (*.f64 (-.f64 1 x) 1/120))) (pow.f64 B 3) (+.f64 (fma.f64 B (fma.f64 x 1/2 (*.f64 (-.f64 1 x) 1/6)) (*.f64 (-.f64 (*.f64 x 1/720) (fma.f64 (fma.f64 x 1/2 (*.f64 (-.f64 1 x) 1/6)) 1/120 (fma.f64 -1/6 (-.f64 (*.f64 x -1/24) (fma.f64 -1/6 (fma.f64 x 1/2 (*.f64 (-.f64 1 x) 1/6)) (*.f64 (-.f64 1 x) 1/120))) (*.f64 (-.f64 1 x) -1/5040)))) (pow.f64 B 5))) (/.f64 (-.f64 1 x) B)))","(fma.f64 (-.f64 (-.f64 (fma.f64 x -1/24 (*.f64 (-.f64 1 x) -1/120)) (*.f64 x -1/12)) (*.f64 (-.f64 1 x) -1/36)) (pow.f64 B 3) (+.f64 (/.f64 (-.f64 1 x) B) (fma.f64 (-.f64 (*.f64 x 1/720) (fma.f64 (-.f64 1 x) -1/5040 (fma.f64 -1/6 (-.f64 (-.f64 (fma.f64 x -1/24 (*.f64 (-.f64 1 x) -1/120)) (*.f64 x -1/12)) (*.f64 (-.f64 1 x) -1/36)) (+.f64 (*.f64 x 1/240) (*.f64 (-.f64 1 x) 1/720))))) (pow.f64 B 5) (*.f64 B (fma.f64 x 1/2 (-.f64 1/6 (*.f64 1/6 x)))))))","(+.f64 (/.f64 (-.f64 1 x) B) (fma.f64 (-.f64 (*.f64 x 1/24) (*.f64 (-.f64 1 x) -7/360)) (pow.f64 B 3) (fma.f64 (+.f64 (-.f64 (*.f64 x -1/360) (*.f64 (-.f64 1 x) 1/840)) (*.f64 (-.f64 (*.f64 x 1/24) (*.f64 (-.f64 1 x) -7/360)) 1/6)) (pow.f64 B 5) (*.f64 B (+.f64 1/6 (*.f64 x 1/3))))))","(/.f64 1 (sin.f64 B))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (neg.f64 x))","(*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x)))","(/.f64 (*.f64 (neg.f64 x) (cos.f64 B)) (sin.f64 B))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) (neg.f64 x))","(*.f64 x (neg.f64 (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (*.f64 -1 (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))))","(+.f64 (/.f64 1 (sin.f64 B)) (neg.f64 (/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (/.f64 (cos.f64 B) (sin.f64 B))))","B","(+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)","(fma.f64 -1/6 (pow.f64 B 3) B)","(+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B))","(fma.f64 1/120 (pow.f64 B 5) (fma.f64 -1/6 (pow.f64 B 3) B))","(+.f64 (*.f64 -1/5040 (pow.f64 B 7)) (+.f64 (*.f64 1/120 (pow.f64 B 5)) (+.f64 (*.f64 -1/6 (pow.f64 B 3)) B)))","(fma.f64 -1/5040 (pow.f64 B 7) (fma.f64 1/120 (pow.f64 B 5) (fma.f64 -1/6 (pow.f64 B 3) B)))","(fma.f64 1/120 (pow.f64 B 5) (fma.f64 -1/5040 (pow.f64 B 7) (fma.f64 -1/6 (pow.f64 B 3) B)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 B 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 B B)))","(fma.f64 -1/2 (*.f64 B B) 1)","(fma.f64 B (*.f64 B -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (*.f64 1/24 (pow.f64 B 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 B B) (*.f64 1/24 (pow.f64 B 4))))","(fma.f64 B (*.f64 B -1/2) (fma.f64 1/24 (pow.f64 B 4) 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 B 2)) (+.f64 (*.f64 1/24 (pow.f64 B 4)) (*.f64 -1/720 (pow.f64 B 6)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 B B) (fma.f64 1/24 (pow.f64 B 4) (*.f64 -1/720 (pow.f64 B 6)))))","(+.f64 (fma.f64 -1/2 (*.f64 B B) 1) (fma.f64 1/24 (pow.f64 B 4) (*.f64 -1/720 (pow.f64 B 6))))","(+.f64 1 (fma.f64 1/24 (pow.f64 B 4) (fma.f64 B (*.f64 B -1/2) (*.f64 -1/720 (pow.f64 B 6)))))"]],"stop":[["node limit",1]],"time":46.001953125,"type":"simplify"},{"compiler":[[5007,2238]],"time":42.623046875,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))))","next",0.20769501953688405],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (expm1.f64 (log1p.f64 (sin.f64 B))))","fresh",0.22722626953688402],["(-.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B)))) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","fresh",11.317070019536883],["(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))))","fresh",0.22494125976844204],["(*.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))))","fresh",11.322303808610654],["(/.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) 2))","fresh",10.89048471933162],["(/.f64 (-.f64 (/.f64 (sin.f64 B) x) (*.f64 (sin.f64 B) (cos.f64 B))) (*.f64 (sin.f64 B) (/.f64 (sin.f64 B) x)))","fresh",8.364323228993356]],"compiler":[[16,11],[13,10],[21,14],[16,11],[17,10],[17,10],[20,9],[16,11],[13,10],[21,14],[16,11],[17,10],[17,10],[20,9]],"count":[[217,7]],"kept":[{"done":[0,0],"fresh":[7,6],"new":[209,1],"picked":[1,0]}],"min-error":[0],"time":61.156982421875,"type":"prune"},{"compiler":[[47,23]],"locations":[["(/.f64 1 (cos.f64 B))",0.08984375,true],["(/.f64 1 (sin.f64 B))",0.140625,false],["(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))",0.1640625,true],["(*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))",0.205410009768442,true]],"time":11.277099609375,"type":"localize"},{"count":[[3,40]],"series":[["(/.f64 1 (cos.f64 B))","B","-inf",0.35302734375],["(/.f64 1 (cos.f64 B))","B","inf",0.34716796875],["(/.f64 1 (cos.f64 B))","B","0",0.232177734375],["(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))","B","-inf",0.1669921875],["(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))","B","inf",0.152099609375],["(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))","B","0",0.23681640625],["(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))","x","-inf",0.1611328125],["(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))","x","inf",0.177001953125],["(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))","x","0",0.157958984375],["(*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))","B","-inf",0.1591796875],["(*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))","B","inf",0.18212890625],["(*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))","B","0",0.2080078125]],"time":2.68408203125,"type":"series"},{"count":[[3,88]],"egraph":[[2,2462,15,0.021530333],[1,186,15,0.003228375],[0,9,25,0.000243375]],"inputs":[["(*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))","(/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B))))","(/.f64 1 (cos.f64 B))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (tan.f64 B))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 B) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) 2) (/.f64 (cos.f64 B) (cbrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sin.f64 B)) (/.f64 (cos.f64 B) (sqrt.f64 (sin.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 B)) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 B) (sqrt.f64 (cos.f64 B))) (sqrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 B) 1) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 B) (pow.f64 (cbrt.f64 (cos.f64 B)) 2)) (cbrt.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (sin.f64 B)) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 B) -1) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 B) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 B) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 B)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 B)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 B) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 B) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 B) 3) (pow.f64 (cos.f64 B) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 B) 3) (pow.f64 (/.f64 1 (cos.f64 B)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (cos.f64 B)) 3) (pow.f64 (sin.f64 B) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 B)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (tan.f64 B)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 2) (cbrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) (sqrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 B)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sin.f64 B)) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sin.f64 B)) (/.f64 (cbrt.f64 x) (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (sin.f64 B)) (/.f64 (sqrt.f64 x) (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (/.f64 1 (cos.f64 B))) (/.f64 (sqrt.f64 x) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (tan.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (cos.f64 B))) (/.f64 (cbrt.f64 x) (sin.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (/.f64 x (cbrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (cbrt.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (tan.f64 B)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (tan.f64 B))) (/.f64 x (sqrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (tan.f64 B))) (/.f64 (cbrt.f64 x) (sqrt.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (sin.f64 B)) 1) (cos.f64 B))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (sin.f64 B)) -1) (neg.f64 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (tan.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (tan.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (tan.f64 B))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (tan.f64 B) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (tan.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (tan.f64 B)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (tan.f64 B) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (tan.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (tan.f64 B))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (cos.f64 B)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (cos.f64 B)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (cos.f64 B))) (cbrt.f64 (pow.f64 (cos.f64 B) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 B) -2)) (/.f64 1 (cbrt.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 B) -1/2) (pow.f64 (cos.f64 B) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 B)) 2) -1) (pow.f64 (cbrt.f64 (cos.f64 B)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 B)) -1) (pow.f64 (sqrt.f64 (cos.f64 B)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 B) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cos.f64 B)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (cos.f64 B)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (cos.f64 B))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 B) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 B) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (cos.f64 B)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (cos.f64 B)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (cos.f64 B))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (cos.f64 B))))))))"]],"rules":[["egg-rr",21],["egg-rr",41],["egg-rr",26]],"stop":[["node limit",1]],"time":45.010009765625,"type":"rewrite"},{"count":[[128,110]],"egraph":[[4,5767,454,0.025564167],[3,1958,454,0.012737126],[2,511,458,0.004364709],[1,191,484,0.001328917],[0,75,514,0.000359417]],"inputs":[["B","(+.f64 (*.f64 1/3 (pow.f64 B 3)) B)","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) B))","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) (+.f64 (*.f64 17/315 (pow.f64 B 7)) B)))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3))))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (+.f64 (*.f64 (-.f64 (*.f64 -1/720 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (+.f64 (*.f64 -1/5040 x) (*.f64 1/120 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (pow.f64 B 5)) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3)))))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","1","(+.f64 1 (*.f64 1/2 (pow.f64 B 2)))","(+.f64 (*.f64 5/24 (pow.f64 B 4)) (+.f64 1 (*.f64 1/2 (pow.f64 B 2))))","(+.f64 (*.f64 5/24 (pow.f64 B 4)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 B 2)) (*.f64 61/720 (pow.f64 B 6)))))"]],"method":["egg-herbie"],"outputs":[["B","(+.f64 (*.f64 1/3 (pow.f64 B 3)) B)","(fma.f64 1/3 (pow.f64 B 3) B)","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) B))","(fma.f64 1/3 (pow.f64 B 3) (fma.f64 2/15 (pow.f64 B 5) B))","(+.f64 (*.f64 1/3 (pow.f64 B 3)) (+.f64 (*.f64 2/15 (pow.f64 B 5)) (+.f64 (*.f64 17/315 (pow.f64 B 7)) B)))","(fma.f64 1/3 (pow.f64 B 3) (fma.f64 2/15 (pow.f64 B 5) (fma.f64 17/315 (pow.f64 B 7) B)))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (sin.f64 B) (cos.f64 B))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 x B)","(+.f64 (/.f64 x B) (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B))","(+.f64 (/.f64 x B) (*.f64 B (*.f64 x -1/3)))","(fma.f64 B (*.f64 x -1/3) (/.f64 x B))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3))))","(+.f64 (/.f64 x B) (fma.f64 (*.f64 x -1/3) B (*.f64 (pow.f64 B 3) (-.f64 (*.f64 x 1/24) (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3)))))))","(+.f64 (/.f64 x B) (fma.f64 B (*.f64 x -1/3) (*.f64 (pow.f64 B 3) (-.f64 (*.f64 x 1/30) (*.f64 x 1/18)))))","(fma.f64 B (*.f64 x -1/3) (fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (/.f64 x B)))","(fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (fma.f64 B (*.f64 x -1/3) (/.f64 x B)))","(+.f64 (/.f64 x B) (+.f64 (*.f64 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)) B) (+.f64 (*.f64 (-.f64 (*.f64 -1/720 x) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (+.f64 (*.f64 -1/5040 x) (*.f64 1/120 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x)))))) (pow.f64 B 5)) (*.f64 (-.f64 (*.f64 1/24 x) (+.f64 (*.f64 1/120 x) (*.f64 -1/6 (-.f64 (*.f64 -1/2 x) (*.f64 -1/6 x))))) (pow.f64 B 3)))))","(+.f64 (/.f64 x B) (fma.f64 (*.f64 x -1/3) B (fma.f64 (-.f64 (*.f64 x -1/720) (fma.f64 -1/6 (-.f64 (*.f64 x 1/24) (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3)))) (fma.f64 -1/5040 x (*.f64 (*.f64 x -1/3) 1/120)))) (pow.f64 B 5) (*.f64 (pow.f64 B 3) (-.f64 (*.f64 x 1/24) (fma.f64 1/120 x (*.f64 -1/6 (*.f64 x -1/3))))))))","(+.f64 (/.f64 x B) (fma.f64 B (*.f64 x -1/3) (fma.f64 (pow.f64 B 3) (-.f64 (*.f64 x 1/30) (*.f64 x 1/18)) (*.f64 (pow.f64 B 5) (-.f64 (*.f64 x -1/720) (fma.f64 -1/6 (-.f64 (*.f64 x 1/30) (*.f64 x 1/18)) (fma.f64 x -1/5040 (*.f64 x -1/360))))))))","(+.f64 (fma.f64 B (*.f64 x -1/3) (/.f64 x B)) (fma.f64 (pow.f64 B 5) (-.f64 (*.f64 x -1/720) (fma.f64 -1/6 (*.f64 x -1/45) (*.f64 x -1/336))) (*.f64 (pow.f64 B 3) (*.f64 x -1/45))))","(+.f64 (/.f64 x B) (fma.f64 B (*.f64 x -1/3) (fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (*.f64 (pow.f64 B 5) (+.f64 (*.f64 -1/6 (*.f64 x 1/45)) (*.f64 x 1/630))))))","(+.f64 (/.f64 x B) (fma.f64 (pow.f64 B 3) (*.f64 x -1/45) (fma.f64 B (*.f64 x -1/3) (*.f64 (pow.f64 B 5) (+.f64 (*.f64 -1/6 (*.f64 x 1/45)) (*.f64 x 1/630))))))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","(/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))","(/.f64 (cos.f64 B) (/.f64 (sin.f64 B) x))","(*.f64 (/.f64 (cos.f64 B) (sin.f64 B)) x)","(*.f64 x (/.f64 (cos.f64 B) (sin.f64 B)))","(*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))","1","(+.f64 1 (*.f64 1/2 (pow.f64 B 2)))","(+.f64 1 (*.f64 1/2 (*.f64 B B)))","(fma.f64 1/2 (*.f64 B B) 1)","(fma.f64 B (*.f64 B 1/2) 1)","(+.f64 (*.f64 5/24 (pow.f64 B 4)) (+.f64 1 (*.f64 1/2 (pow.f64 B 2))))","(fma.f64 5/24 (pow.f64 B 4) (+.f64 1 (*.f64 1/2 (*.f64 B B))))","(fma.f64 5/24 (pow.f64 B 4) (fma.f64 1/2 (*.f64 B B) 1))","(fma.f64 5/24 (pow.f64 B 4) (fma.f64 B (*.f64 B 1/2) 1))","(+.f64 (*.f64 5/24 (pow.f64 B 4)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 B 2)) (*.f64 61/720 (pow.f64 B 6)))))","(fma.f64 5/24 (pow.f64 B 4) (+.f64 1 (fma.f64 1/2 (*.f64 B B) (*.f64 61/720 (pow.f64 B 6)))))","(+.f64 (fma.f64 5/24 (pow.f64 B 4) (fma.f64 1/2 (*.f64 B B) 1)) (*.f64 61/720 (pow.f64 B 6)))","(fma.f64 5/24 (pow.f64 B 4) (fma.f64 B (*.f64 B 1/2) (fma.f64 61/720 (pow.f64 B 6) 1)))"]],"stop":[["node limit",1]],"time":42.841796875,"type":"simplify"},{"compiler":[[2475,1369]],"time":25.503173828125,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))))","done",0.20769501953688405],["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (expm1.f64 (log1p.f64 (sin.f64 B))))","fresh",0.22722626953688402],["(-.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B)))) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","fresh",11.317070019536883],["(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))))","fresh",0.22494125976844204],["(*.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))))","fresh",11.322303808610654],["(/.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) 2))","fresh",10.89048471933162],["(/.f64 (-.f64 (/.f64 (sin.f64 B) x) (*.f64 (sin.f64 B) (cos.f64 B))) (*.f64 (sin.f64 B) (/.f64 (sin.f64 B) x)))","fresh",8.364323228993356]],"compiler":[[16,11],[13,10],[21,14],[16,11],[17,10],[17,10],[20,9]],"count":[[154,7]],"kept":[{"done":[0,0],"fresh":[6,6],"new":[147,0],"picked":[1,1]}],"min-error":[0],"time":36.242919921875,"type":"prune"},{"accuracy":[0.18359375],"baseline":[0.18359375],"branch":[["B",0.18359375,1],["x",0.18359375,1],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))",0.18359375,1]],"compiler":[[3,2],[3,2],[14,11],[256,98]],"count":[[16,1]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (expm1.f64 (log1p.f64 (sin.f64 B))))","(-.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (cbrt.f64 (/.f64 1 (sin.f64 B)))) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(-.f64 (/.f64 1 (sin.f64 B)) (*.f64 x (*.f64 (cos.f64 B) (/.f64 1 (sin.f64 B)))))","(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))","(/.f64 (-.f64 (sin.f64 B) (*.f64 (*.f64 (cos.f64 B) x) (sin.f64 B))) (pow.f64 (sin.f64 B) 2))","(-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -3)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(/.f64 (-.f64 (/.f64 (sin.f64 B) x) (*.f64 (sin.f64 B) (cos.f64 B))) (*.f64 (sin.f64 B) (/.f64 (sin.f64 B) x)))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 (*.f64 (cos.f64 B) x) (sin.f64 B)))","(+.f64 (fma.f64 (cbrt.f64 (/.f64 1 (sin.f64 B))) (cbrt.f64 (pow.f64 (sin.f64 B) -2)) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))","(*.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (/.f64 1 (*.f64 (tan.f64 B) (sin.f64 B))))","(-.f64 (cbrt.f64 (pow.f64 (sin.f64 B) -3)) (/.f64 x (tan.f64 B)))","(+.f64 (fma.f64 (pow.f64 (cbrt.f64 (sin.f64 B)) -2) (cbrt.f64 (/.f64 1 (sin.f64 B))) (neg.f64 (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B))))) (fma.f64 (neg.f64 (cos.f64 B)) (/.f64 x (sin.f64 B)) (*.f64 (cos.f64 B) (/.f64 x (sin.f64 B)))))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (*.f64 (sin.f64 B) (/.f64 1 (cos.f64 B)))))","(/.f64 (/.f64 (-.f64 (tan.f64 B) (*.f64 x (sin.f64 B))) (sin.f64 B)) (tan.f64 B))","(-.f64 (/.f64 1 (sin.f64 B)) (/.f64 x (tan.f64 B)))","(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))"]],"link":["."],"name":["VandenBroeck and Keller, Equation (24)"],"oracle":[17.44870771490573],"outputs":[["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))"]],"time":21.820068359375,"times":[["B",5.949951171875],["x",6.069091796875],["(+.f64 (neg.f64 (*.f64 x (/.f64 1 (tan.f64 B)))) (/.f64 1 (sin.f64 B)))",6.281982421875]],"type":"regimes"},{"compiler":[[11,8]],"egraph":[[5,39,14,0.000257043],[4,38,14,0.00020920899999999997],[3,34,14,0.00015987599999999999],[2,28,14,0.000111834],[1,17,14,6.7043e-5],[0,9,14,2.9959e-5]],"inputs":[["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (*.f64 (cos.f64 B) x)) (sin.f64 B))"]],"stop":[["fuel",1],["saturated",1]],"time":8.626953125,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[11,8]],"remove-preprocessing":[[]],"time":8.68994140625,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.416015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.089111328125,3],["body",256,"valid",248.409912109375,8256]],"time":256.27392578125,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,1,1,1e-6],[2,11,9,0.000107626],[1,10,9,7.3501e-5],[0,6,9,3.8334e-5]],"inputs":[["0"],["(sqrt.f64 (*.f64 (*.f64 2 x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.7451171875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,11,9,0.000103499],[1,10,9,6.9583e-5],[0,6,9,3.5083e-5]],"inputs":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))","(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"stop":[["saturated",1]],"time":10.216064453125,"type":"simplify"},{"compiler":[[13,9]],"time":0.284912109375,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))","next",29.699794254532684]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[29.699794254532684],"time":1.325927734375,"type":"prune"},{"compiler":[[17,11]],"locations":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))",28.638264051665978,true]],"time":4.109130859375,"type":"localize"},{"count":[[1,12]],"series":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))","x","-inf",0.18603515625],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","x","inf",0.369873046875],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","x","0",0.48291015625]],"time":1.0830078125,"type":"series"},{"count":[[1,24]],"egraph":[[2,1374,6,0.015642624],[1,122,6,0.002051082],[0,6,9,0.000177666]],"inputs":[["(sqrt.f64 (*.f64 (*.f64 2 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) (sqrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (pow.f64 (*.f64 x x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 2) 1/2) (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) x)))))))"]],"rules":[["egg-rr",24]],"stop":[["node limit",1]],"time":33.046875,"type":"rewrite"},{"count":[[36,26]],"egraph":[[9,121,80,0.0015613349999999998],[8,96,80,0.0013447099999999998],[7,84,80,0.000994877],[6,73,80,0.000779252],[5,51,80,0.000588043],[4,33,80,0.000387168],[3,29,80,0.000273168],[2,25,80,0.000184543],[1,12,80,0.000104001],[0,7,80,4.4042e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"stop":[["saturated",1]],"time":14.365966796875,"type":"simplify"},{"compiler":[[208,159]],"time":3.628173828125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(fabs.f64 (*.f64 (sqrt.f64 2) x))","next",0.42578125],["(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)","fresh",33.082771386758196],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)","fresh",32.467446065515986],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","done",29.699794254532684],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","fresh",29.887291596257406]],"compiler":[[8,6],[6,5],[8,7],[8,7],[7,5],[18,13],[8,6],[6,5],[8,7],[8,7],[18,13]],"count":[[27,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[26,5],"picked":[1,1]}],"min-error":[0.125],"time":5.087890625,"type":"prune"},{"compiler":[[14,11]],"locations":[["(*.f64 (sqrt.f64 2) x)",0.42578125,true]],"time":4.02099609375,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 (sqrt.f64 2) x)","x","-inf",0.278076171875],["(*.f64 (sqrt.f64 2) x)","x","inf",0.18798828125],["(*.f64 (sqrt.f64 2) x)","x","0",0.169921875]],"time":0.66796875,"type":"series"},{"count":[[1,15]],"egraph":[[2,1075,6,0.013701374999999998],[1,100,6,0.001687709],[0,5,6,0.000156125]],"inputs":[["(*.f64 (sqrt.f64 2) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) x)))))))"]],"rules":[["egg-rr",15]],"stop":[["node limit",1]],"time":29.899169921875,"type":"rewrite"},{"count":[[15,15]],"egraph":[[0,0,0,1.9708e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.157958984375,"type":"simplify"},{"compiler":[[134,114]],"time":2.375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3))","next",0.8263755125896408],["(fabs.f64 (*.f64 (sqrt.f64 2) x))","done",0.42578125],["(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)","fresh",33.082771386758196],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","done",29.699794254532684],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","fresh",29.887291596257406]],"compiler":[[8,6],[9,8],[6,5],[8,7],[7,5],[18,13],[8,6],[9,8],[8,7],[18,13]],"count":[[21,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[15,1],"picked":[1,1]}],"min-error":[0.09765625],"time":4.33203125,"type":"prune"},{"compiler":[[30,25]],"locations":[["(cbrt.f64 (*.f64 (sqrt.f64 2) x))",0.11328125,true],["(*.f64 (sqrt.f64 2) x)",0.42578125,false],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)",0.6889802735163768,true]],"time":8.825927734375,"type":"localize"},{"count":[[2,0]],"series":[["(cbrt.f64 (*.f64 (sqrt.f64 2) x))","x","-inf",0.30908203125],["(cbrt.f64 (*.f64 (sqrt.f64 2) x))","x","inf",0.313232421875],["(cbrt.f64 (*.f64 (sqrt.f64 2) x))","x","0",0.239990234375],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)","x","-inf",0.93798828125],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)","x","inf",0.579833984375],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)","x","0",0.8740234375]],"time":3.328857421875,"type":"series"},{"count":[[2,52]],"egraph":[[2,1578,14,0.016201376],[1,168,14,0.002572876],[0,8,14,0.000255334]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)","(cbrt.f64 (*.f64 (sqrt.f64 2) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) (sqrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6) (*.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) 3) (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6) 3) (pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 2 1/4)) (pow.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1) (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))))) (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6)) (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 (sqrt.f64 2) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))) (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))) (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6) (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 1/3) (pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x))))))))"]],"rules":[["egg-rr",21],["egg-rr",31]],"stop":[["node limit",1]],"time":36.47314453125,"type":"rewrite"},{"count":[[52,52]],"egraph":[[0,0,0,1.9958e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.3369140625,"type":"simplify"},{"compiler":[[791,647]],"time":12.468017578125,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)))","fresh",0.8896092895796394],["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3))","done",0.8263755125896408],["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","next",0.3515625],["(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","fresh",0.4811325195368841],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","done",29.699794254532684]],"compiler":[[12,9],[9,8],[8,6],[10,9],[11,10],[7,5],[12,9],[8,6],[10,9],[11,10]],"count":[[73,6]],"kept":[{"done":[2,1],"fresh":[3,1],"new":[67,3],"picked":[1,1]}],"min-error":[0.0234375],"time":9.755126953125,"type":"prune"},{"compiler":[[31,27]],"locations":[["(*.f64 x (cbrt.f64 2))",0.1328125,true],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))",0.25,true]],"time":8.993896484375,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 x (cbrt.f64 2))","x","-inf",0.2509765625],["(*.f64 x (cbrt.f64 2))","x","inf",0.136962890625],["(*.f64 x (cbrt.f64 2))","x","0",0.14013671875],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","-inf",0.3330078125],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","inf",0.4580078125],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","0",2.781005859375]],"time":4.18212890625,"type":"series"},{"count":[[2,22]],"egraph":[[2,1746,12,0.017738583999999998],[1,157,12,0.002610667],[0,8,19,0.000208667]],"inputs":[["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","(*.f64 x (cbrt.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (cbrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (cbrt.f64 2))))))))"]],"rules":[["egg-rr",11],["egg-rr",11]],"stop":[["node limit",1]],"time":37.302978515625,"type":"rewrite"},{"count":[[46,25]],"egraph":[[19,7650,228,0.080415209],[18,7088,228,0.071242875],[17,6527,228,0.062637125],[16,5864,228,0.054559417],[15,5001,228,0.046415292],[14,4320,228,0.038865],[13,3758,228,0.032632417],[12,3327,228,0.026829084],[11,3015,228,0.0224765],[10,2806,228,0.018460375],[9,2644,228,0.014616041],[8,2540,228,0.011247583],[7,1255,228,0.007849],[6,929,228,0.004767333],[5,711,228,0.003109667],[4,213,228,0.001704667],[3,83,228,0.0006839999999999999],[2,43,228,0.000356083],[1,24,228,0.000192833],[0,11,228,7.9917e-5]],"inputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)"]],"stop":[["node limit",1]],"time":100.587890625,"type":"simplify"},{"compiler":[[242,213]],"time":4.10009765625,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","done",0.3515625],["(fabs.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3) (cbrt.f64 (sqrt.f64 2))))","fresh",0.8525317384221015],["(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","fresh",0.359375],["(fabs.f64 (*.f64 (pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2) (cbrt.f64 (sqrt.f64 2))))","fresh",33.074001416063524],["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3))","done",0.8263755125896408],["(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","fresh",0.4811325195368841],["(sqrt.f64 (*.f64 (*.f64 2 x) x))","done",29.699794254532684]],"compiler":[[10,9],[13,12],[10,9],[13,12],[9,8],[11,10],[7,5]],"count":[[31,7]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[25,3],"picked":[1,1]}],"min-error":[0.015625],"time":4.429931640625,"type":"prune"},{"accuracy":[0.3515625],"baseline":[0.3515625],"branch":[["x",0.3515625,1],["(sqrt.f64 (*.f64 (*.f64 2 x) x))",0.3515625,1],["(*.f64 (*.f64 2 x) x)",0.3515625,1]],"compiler":[[2,1],[7,5],[6,4],[121,100]],"count":[[13,1]],"inputs":[["(fabs.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","(fabs.f64 (*.f64 (pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)))","(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3))","(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","(fabs.f64 (*.f64 (sqrt.f64 2) x))","(pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)","(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","(sqrt.f64 (*.f64 (*.f64 2 x) x))"]],"link":["."],"name":["sqrt B"],"oracle":[48.21873528160314],"outputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"time":15.964111328125,"times":[["x",5.737060546875],["(sqrt.f64 (*.f64 (*.f64 2 x) x))",3.685791015625],["(*.f64 (*.f64 2 x) x)",3.7041015625]],"type":"regimes"},{"compiler":[[10,9]],"egraph":[[2,19,15,5.9458e-5],[1,14,15,4.0541000000000004e-5],[0,9,15,1.95e-5]],"inputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"method":["egg-herbie"],"outputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.763916015625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[10,9]],"remove-preprocessing":[[]],"time":10.55419921875,"type":"end"}]
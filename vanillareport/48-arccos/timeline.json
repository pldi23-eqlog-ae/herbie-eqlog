[{"compiler":[[13,11]],"method":["search"],"sampling":[[12,0.4987797737121582,0.0014641284942626953,0.4997560977935791],[11,0.4978036880493164,0.0029282569885253906,0.4992680549621582],[10,0.4958515167236328,0.005856513977050781,0.4982919692993164],[9,0.4919471740722656,0.011713027954101563,0.4963397979736328],[8,0.48413848876953125,0.023426055908203125,0.4924354553222656],[7,0.4685211181640625,0.04685211181640625,0.48462677001953125],[6,0.437286376953125,0.0937042236328125,0.4690093994140625],[5,0.37481689453125,0.187408447265625,0.437774658203125],[4,0.2498779296875,0.37481689453125,0.37530517578125],[3,0.0,0.7496337890625,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.5419921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.482666015625,13],["body",256,"valid",428.1884765625,8256]],"time":436.1708984375,"type":"sample"},{"compiler":[[12,10]],"egraph":[[0,1,1,1.584e-6],[14,2199,17,0.028405124],[13,1958,17,0.023636041],[12,1548,17,0.017986708],[11,1157,17,0.011518916],[10,796,17,0.007414],[9,584,17,0.00525375],[8,357,17,0.0034349999999999997],[7,191,17,0.00209875],[6,119,17,0.001183208],[5,82,17,0.0007720000000000001],[4,58,17,0.000507542],[3,35,17,0.00032366700000000003],[2,25,17,0.000196458],[1,19,17,0.00011716600000000001],[0,10,17,5.9041e-5]],"inputs":[["0"],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":50.8310546875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[14,2199,17,0.028274458000000002],[13,1958,17,0.023494791],[12,1548,17,0.017852249],[11,1157,17,0.011448666],[10,796,17,0.007365416],[9,584,17,0.0052279579999999996],[8,357,17,0.003419333],[7,191,17,0.002086999],[6,119,17,0.001172874],[5,82,17,0.000760124],[4,58,17,0.000499874],[3,35,17,0.000316958],[2,25,17,0.000190666],[1,19,17,0.00011245800000000001],[0,10,17,5.4333e-5]],"inputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"stop":[["saturated",1]],"time":39.241943359375,"type":"simplify"},{"compiler":[[12,10]],"time":0.80517578125,"type":"eval"},{"alts":[["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))","next",0.0078125]],"compiler":[[12,10],[12,10]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.781982421875,"type":"prune"},{"compiler":[[45,34]],"locations":[["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))",0.00390625,true],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))",0.01171875,true],["(/.f64 (-.f64 1 x) (+.f64 1 x))",0.0234375,true]],"time":11.093994140625,"type":"localize"},{"count":[[3,20]],"series":[["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","x","-inf",0.212890625],["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","x","inf",0.16796875],["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","x","0",0.163818359375],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))","x","-inf",0.456787109375],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))","x","inf",0.447021484375],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))","x","0",0.218994140625],["(/.f64 (-.f64 1 x) (+.f64 1 x))","x","-inf",0.22021484375],["(/.f64 (-.f64 1 x) (+.f64 1 x))","x","inf",0.316162109375],["(/.f64 (-.f64 1 x) (+.f64 1 x))","x","0",0.31591796875]],"time":2.64697265625,"type":"series"},{"count":[[3,87]],"egraph":[[2,2431,36,0.021636418],[1,175,36,0.003236334],[0,8,36,0.000224917]],"inputs":[["(/.f64 (-.f64 1 x) (+.f64 1 x))","(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (neg.f64 (/.f64 x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 x)) (/.f64 x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 2) (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) 2) (*.f64 (cbrt.f64 (-.f64 1 x)) (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/4) (*.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/4) (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 x)) (*.f64 (sqrt.f64 (-.f64 1 x)) (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 x)) (/.f64 1 (+.f64 (neg.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/4)) (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 x)) 1) (/.f64 (sqrt.f64 (-.f64 1 x)) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 1 x)) 2)) (/.f64 (-.f64 1 x) (cbrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) 2) (pow.f64 (cbrt.f64 (+.f64 1 x)) 2)) (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 x)) (pow.f64 (cbrt.f64 (+.f64 1 x)) 2)) (/.f64 (sqrt.f64 (-.f64 1 x)) (cbrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 1 x))) (/.f64 (-.f64 1 x) (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) 2) (sqrt.f64 (+.f64 1 x))) (/.f64 (cbrt.f64 (-.f64 1 x)) (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (-.f64 1 (*.f64 x x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (+.f64 1 (pow.f64 x 3))) (+.f64 1 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) (cbrt.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 x) (+.f64 (neg.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 x) 3) (pow.f64 (+.f64 1 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) (cbrt.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/4) (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 x)) (sqrt.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 x)) (pow.f64 (/.f64 1 (+.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 x)) (/.f64 1 (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 2)) (sqrt.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 2) 1/2) (pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 1 x)) (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 (-.f64 1 x))) (sqrt.f64 (+.f64 (neg.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (-.f64 1 x))) (neg.f64 (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) (pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 2) (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))))"]],"rules":[["egg-rr",17],["egg-rr",29],["egg-rr",41]],"stop":[["node limit",1]],"time":45.708984375,"type":"rewrite"},{"count":[[107,109]],"egraph":[[4,5238,213,0.025384749999999998],[3,1129,214,0.010601625],[2,301,224,0.002583167],[1,118,228,0.000748417],[0,42,252,0.000218292]],"inputs":[["1","(+.f64 1 (*.f64 -2 x))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (*.f64 -2 x)))","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -2 x) (*.f64 -2 (pow.f64 x 3)))))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2 x))","(fma.f64 -2 x 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (*.f64 -2 x)))","(fma.f64 2 (*.f64 x x) (+.f64 1 (*.f64 -2 x)))","(fma.f64 2 (*.f64 x x) (fma.f64 -2 x 1))","(fma.f64 -2 x (fma.f64 x (*.f64 x 2) 1))","(fma.f64 x (fma.f64 x 2 -2) 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -2 x) (*.f64 -2 (pow.f64 x 3)))))","(fma.f64 2 (*.f64 x x) (+.f64 1 (*.f64 -2 (+.f64 x (pow.f64 x 3)))))","(fma.f64 2 (*.f64 x x) (fma.f64 -2 (+.f64 x (pow.f64 x 3)) 1))","(fma.f64 -2 (+.f64 x (pow.f64 x 3)) (fma.f64 x (*.f64 x 2) 1))","(fma.f64 x (fma.f64 x 2 -2) (fma.f64 -2 (pow.f64 x 3) 1))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(+.f64 (/.f64 2 x) -1)","(+.f64 -1 (/.f64 2 x))","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (/.f64 2 x) (+.f64 1 (/.f64 2 (*.f64 x x))))","(+.f64 (/.f64 2 x) (-.f64 -1 (/.f64 2 (*.f64 x x))))","(+.f64 (+.f64 -1 (/.f64 2 x)) (/.f64 -2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 2 x) (-.f64 (/.f64 2 (pow.f64 x 3)) (+.f64 1 (/.f64 2 (*.f64 x x)))))","(+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (pow.f64 x 3)) (-.f64 -1 (/.f64 2 (*.f64 x x)))))","(+.f64 -1 (+.f64 (/.f64 2 (pow.f64 x 3)) (+.f64 (/.f64 2 x) (/.f64 -2 (*.f64 x x)))))","(+.f64 -1 (+.f64 (/.f64 2 x) (*.f64 (/.f64 2 (*.f64 x x)) (+.f64 (/.f64 1 x) -1))))","-1","(-.f64 (*.f64 2 (/.f64 1 x)) 1)","(+.f64 (/.f64 2 x) -1)","(+.f64 -1 (/.f64 2 x))","(-.f64 (*.f64 2 (/.f64 1 x)) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (/.f64 2 x) (+.f64 1 (/.f64 2 (*.f64 x x))))","(+.f64 (/.f64 2 x) (-.f64 -1 (/.f64 2 (*.f64 x x))))","(+.f64 (+.f64 -1 (/.f64 2 x)) (/.f64 -2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 3)))) (+.f64 1 (*.f64 2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 2 x) (-.f64 (/.f64 2 (pow.f64 x 3)) (+.f64 1 (/.f64 2 (*.f64 x x)))))","(+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (pow.f64 x 3)) (-.f64 -1 (/.f64 2 (*.f64 x x)))))","(+.f64 -1 (+.f64 (/.f64 2 (pow.f64 x 3)) (+.f64 (/.f64 2 x) (/.f64 -2 (*.f64 x x)))))","(+.f64 -1 (+.f64 (/.f64 2 x) (*.f64 (/.f64 2 (*.f64 x x)) (+.f64 (/.f64 1 x) -1))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (neg.f64 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (neg.f64 x)))","(+.f64 1 (fma.f64 (*.f64 x x) 1/2 (neg.f64 x)))","(fma.f64 (*.f64 x x) 1/2 (-.f64 1 x))","(fma.f64 x (fma.f64 x 1/2 -1) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(+.f64 1 (fma.f64 -1/2 (pow.f64 x 3) (fma.f64 1/2 (*.f64 x x) (neg.f64 x))))","(+.f64 1 (fma.f64 (pow.f64 x 3) -1/2 (fma.f64 (*.f64 x x) 1/2 (neg.f64 x))))","(fma.f64 (pow.f64 x 3) -1/2 (fma.f64 (*.f64 x x) 1/2 (-.f64 1 x)))","(-.f64 (fma.f64 (*.f64 x x) (fma.f64 x -1/2 1/2) 1) x)","(*.f64 (-.f64 1 x) (fma.f64 x (*.f64 x 1/2) 1))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (neg.f64 x)) (-.f64 1 (neg.f64 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (neg.f64 x)) (-.f64 1 (neg.f64 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (neg.f64 x)) (-.f64 1 (neg.f64 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (neg.f64 x)) (-.f64 1 (neg.f64 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))"]],"stop":[["node limit",1]],"time":39.589111328125,"type":"simplify"},{"compiler":[[1739,1456]],"time":24.33984375,"type":"eval"},{"alts":[["(*.f64 2 (atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))","fresh",0.00390625],["(*.f64 2 (atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2))))","next",0.00390625]],"compiler":[[14,12],[13,11],[14,12],[13,11]],"count":[[110,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[109,2],"picked":[1,0]}],"min-error":[0],"time":26.201171875,"type":"prune"},{"compiler":[[56,22]],"locations":[["(atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2)))",0.00390625,true]],"time":10.728759765625,"type":"localize"},{"count":[[1,12]],"series":[["(atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2)))","x","-inf",0.286865234375],["(atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2)))","x","inf",0.22119140625],["(atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2)))","x","0",0.226806640625]],"time":0.7900390625,"type":"series"},{"count":[[1,16]],"egraph":[[2,2704,14,0.019607458],[1,207,14,0.003625208],[0,10,17,0.000291041]],"inputs":[["(atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))) (pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))) 2) (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))) (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (+.f64 x 1) (+.f64 x 1))))))))))"]],"rules":[["egg-rr",16]],"stop":[["node limit",1]],"time":36.571044921875,"type":"rewrite"},{"count":[[28,19]],"egraph":[[7,3848,192,0.021802498],[6,954,192,0.008812582],[5,348,192,0.00314779],[4,179,192,0.001487374],[3,92,192,0.000788291],[2,44,192,0.00040383300000000003],[1,28,204,0.000204666],[0,17,204,0.000101583]],"inputs":[["(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))"]],"method":["egg-herbie"],"outputs":[["(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))","(atan.f64 (exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 (*.f64 -1 x)) (log1p.f64 x)))))","(atan.f64 (pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))","(atan.f64 (sqrt.f64 (exp.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))"]],"stop":[["node limit",1]],"time":36.4111328125,"type":"simplify"},{"compiler":[[287,238]],"time":4.06396484375,"type":"eval"},{"alts":[["(*.f64 2 (atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))","next",0.00390625],["(*.f64 2 (atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2))))","done",0.00390625]],"compiler":[[14,12],[13,11],[14,12]],"count":[[21,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[19,0],"picked":[1,1]}],"min-error":[0],"time":2.919921875,"type":"prune"},{"compiler":[[59,46]],"locations":[["(atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))",0.00390625,true],["(sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))",0.0078125,true],["(/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))",0.0078125,true],["(/.f64 (+.f64 1 x) (-.f64 1 x))",0.015625,true]],"time":14.2080078125,"type":"localize"},{"count":[[4,32]],"series":[["(atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))","x","-inf",0.158935546875],["(atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))","x","inf",0.154052734375],["(atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))","x","0",0.1708984375],["(sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))","x","-inf",0.251953125],["(sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))","x","inf",0.282958984375],["(sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))","x","0",0.18115234375],["(/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","x","-inf",0.212890625],["(/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","x","inf",0.197998046875],["(/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","x","0",0.179931640625],["(/.f64 (+.f64 1 x) (-.f64 1 x))","x","-inf",0.166015625],["(/.f64 (+.f64 1 x) (-.f64 1 x))","x","inf",0.200927734375],["(/.f64 (+.f64 1 x) (-.f64 1 x))","x","0",0.25]],"time":2.5830078125,"type":"series"},{"count":[[4,191]],"egraph":[[2,2714,48,0.025155124999999997],[1,199,48,0.0036527919999999998],[0,9,54,0.000247]],"inputs":[["(/.f64 (+.f64 1 x) (-.f64 1 x))","(/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","(sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))","(atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 1 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 x) (/.f64 1 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 2) (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) 2) (*.f64 (cbrt.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 x)) (*.f64 (sqrt.f64 (+.f64 1 x)) (/.f64 1 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1 x -1) (/.f64 1 (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3/4) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) -1/2) (/.f64 (+.f64 1 x) (sqrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) 2) 1) (/.f64 (cbrt.f64 (+.f64 1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1 x)) 1) (/.f64 (sqrt.f64 (+.f64 1 x)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) -2) (/.f64 (+.f64 1 x) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) 2) (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1 x)) (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (/.f64 (sqrt.f64 (+.f64 1 x)) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) 2) (sqrt.f64 (-.f64 1 x))) (/.f64 (cbrt.f64 (+.f64 1 x)) (sqrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 x) (-.f64 1 (*.f64 x x))) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 x) (-.f64 1 (pow.f64 x 3))) (+.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 5/6) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 1 x) 3) (pow.f64 (-.f64 1 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 2)) (cbrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))) (sqrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 1 x) (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 1 x) 3) (pow.f64 (-.f64 1 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log1p.f64 x) 1) (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 x) (*.f64 (log1p.f64 (neg.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log1p.f64 x) 1) (*.f64 (log1p.f64 (neg.f64 x)) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/6) (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/4) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 x) -1/2) (sqrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2) -1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3/2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/6) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))) 2)) (cbrt.f64 (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))) (sqrt.f64 (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -3/2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (*.f64 1/4 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 -1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/6) (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 x)) (pow.f64 (-.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 (-.f64 1 x)) (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4) (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 -1 x -1)) (sqrt.f64 (neg.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (+.f64 1 x))) (neg.f64 (sqrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -3/2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/6) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) -1/4) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/2) (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 x)) (sqrt.f64 (+.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))) 2)) (cbrt.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))) (sqrt.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (log.f64 (sqrt.f64 (exp.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) (pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 2) (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) 2)) (cbrt.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))) (sqrt.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))) 1) 1))))))"]],"rules":[["egg-rr",29],["egg-rr",52],["egg-rr",48],["egg-rr",62]],"stop":[["node limit",1]],"time":55.462890625,"type":"rewrite"},{"count":[[223,218]],"egraph":[[4,5639,360,0.025891875],[3,1693,360,0.012814125],[2,430,362,0.003589708],[1,155,375,0.0009835830000000001],[0,53,387,0.000264916]],"inputs":[["1","(+.f64 (*.f64 2 x) 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 2 x) 1)","(fma.f64 2 x 1)","(+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1))","(fma.f64 2 (*.f64 x x) (fma.f64 2 x 1))","(fma.f64 2 (fma.f64 x x x) 1)","(+.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 (*.f64 2 (pow.f64 x 2)) (+.f64 (*.f64 2 x) 1)))","(fma.f64 2 (pow.f64 x 3) (fma.f64 2 (*.f64 x x) (fma.f64 2 x 1)))","(fma.f64 2 (pow.f64 x 3) (fma.f64 2 (fma.f64 x x x) 1))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (/.f64 2 x)))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x)))))","(-.f64 -1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3))))))","(-.f64 -1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 (/.f64 -2 x) x) (+.f64 (/.f64 -2 x) (/.f64 -2 (pow.f64 x 3)))))","(+.f64 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)) (+.f64 -1 (/.f64 -2 (pow.f64 x 3))))","-1","(neg.f64 (+.f64 1 (*.f64 2 (/.f64 1 x))))","(neg.f64 (+.f64 1 (/.f64 2 x)))","(+.f64 -1 (/.f64 -2 x))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x)))))","(-.f64 -1 (+.f64 (/.f64 2 x) (/.f64 2 (*.f64 x x))))","(+.f64 -1 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)))","(neg.f64 (+.f64 1 (+.f64 (*.f64 2 (/.f64 1 x)) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 x 2))) (*.f64 2 (/.f64 1 (pow.f64 x 3)))))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3))))))","(-.f64 -1 (+.f64 (/.f64 2 x) (+.f64 (/.f64 2 (*.f64 x x)) (/.f64 2 (pow.f64 x 3)))))","(+.f64 -1 (+.f64 (/.f64 (/.f64 -2 x) x) (+.f64 (/.f64 -2 x) (/.f64 -2 (pow.f64 x 3)))))","(+.f64 (+.f64 (/.f64 -2 x) (/.f64 (/.f64 -2 x) x)) (+.f64 -1 (/.f64 -2 (pow.f64 x 3))))","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (neg.f64 x)))","(+.f64 (-.f64 1 x) (*.f64 x (*.f64 x 1/2)))","(fma.f64 x (*.f64 x 1/2) (-.f64 1 x))","(-.f64 (fma.f64 x (*.f64 x 1/2) 1) x)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(+.f64 1 (fma.f64 -1/2 (pow.f64 x 3) (fma.f64 1/2 (*.f64 x x) (neg.f64 x))))","(+.f64 1 (-.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 x (*.f64 x 1/2))) x))","(fma.f64 (pow.f64 x 3) -1/2 (fma.f64 x (*.f64 x 1/2) (-.f64 1 x)))","(fma.f64 x (*.f64 x (+.f64 1/2 (*.f64 x -1/2))) (-.f64 1 x))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) x))","(+.f64 1 (fma.f64 (*.f64 x x) 1/2 x))","(+.f64 1 (fma.f64 x (*.f64 x 1/2) x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 3)) (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(+.f64 1 (fma.f64 1/2 (pow.f64 x 3) (fma.f64 1/2 (*.f64 x x) x)))","(+.f64 1 (fma.f64 (pow.f64 x 3) 1/2 (fma.f64 (*.f64 x x) 1/2 x)))","(fma.f64 1/2 (*.f64 x (fma.f64 x x x)) (+.f64 1 x))","(*.f64 (+.f64 1 x) (fma.f64 x (*.f64 x 1/2) 1))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))","(atan.f64 (sqrt.f64 (/.f64 (+.f64 1 (*.f64 -1 x)) (-.f64 1 (*.f64 -1 x)))))","(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))"]],"stop":[["node limit",1]],"time":43.16015625,"type":"simplify"},{"compiler":[[3689,2973]],"time":49.89697265625,"type":"eval"},{"alts":[["(*.f64 2 (atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))","done",0.00390625],["(*.f64 2 (atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2))))","done",0.00390625]],"compiler":[[14,12],[13,11]],"count":[[220,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[218,0],"picked":[1,1]}],"min-error":[0],"time":81.169921875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))",0.00390625,1],["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))",0.00390625,1],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))",0.00390625,1],["(/.f64 (-.f64 1 x) (+.f64 1 x))",0.00390625,1]],"compiler":[[2,1],[12,10],[10,8],[9,7],[8,6],[37,31]],"count":[[3,1]],"inputs":[["(*.f64 2 (atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))","(*.f64 2 (atan.f64 (exp.f64 (*.f64 (-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1/2))))","(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))"]],"link":["."],"name":["arccos"],"oracle":[0.0078125],"outputs":[["(*.f64 2 (atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))"]],"time":10.677978515625,"times":[["x",2.6650390625],["(*.f64 2 (atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))))",1.739990234375],["(atan.f64 (sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x))))",1.884033203125],["(sqrt.f64 (/.f64 (-.f64 1 x) (+.f64 1 x)))",1.685791015625],["(/.f64 (-.f64 1 x) (+.f64 1 x))",1.685791015625]],"type":"regimes"},{"compiler":[[14,12]],"egraph":[[4,24,20,0.000133583],[3,23,20,0.000107708],[2,21,20,8.1625e-5],[1,17,20,5.6166000000000004e-5],[0,11,20,3.0333e-5]],"inputs":[["(*.f64 2 (atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (atan.f64 (/.f64 1 (sqrt.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))))"]],"stop":[["done",1],["saturated",1]],"time":8.5009765625,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[14,12]],"remove-preprocessing":[[]],"time":9.571044921875,"type":"end"}]
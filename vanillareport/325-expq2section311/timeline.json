[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.3138115406036377,0.4431428909301758,0.24304556846618652],[11,0.3133234977722168,0.4441189765930176,0.24255752563476563],[10,0.312347412109375,0.4450950622558594,0.24255752563476563],[9,0.3084430694580078,0.44899940490722656,0.24255752563476563],[8,0.3045387268066406,0.45290374755859375,0.24255752563476563],[7,0.29673004150390625,0.4685211181640625,0.23474884033203125],[6,0.2811126708984375,0.499755859375,0.2191314697265625],[5,0.2498779296875,0.562225341796875,0.187896728515625],[4,0.2498779296875,0.62469482421875,0.12542724609375],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":51.24609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.05615234375,2],["body",2048,"invalid",0.14306640625,1],["body",512,"valid",93.521240234375,1328],["body",1024,"valid",350.482421875,2791],["body",2048,"valid",41.75732421875,277],["body",256,"valid",121.436767578125,3860]],"time":616.429931640625,"type":"sample"},{"compiler":[[8,5]],"egraph":[[0,1,1,1.167e-6],[2,13,8,0.000133042],[1,12,8,9.4417e-5],[0,6,8,5.4459e-5]],"inputs":[["0"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.77197265625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,13,8,0.000129793],[1,12,8,9.1168e-5],[0,6,8,5.1209e-5]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["saturated",1]],"time":10.179931640625,"type":"simplify"},{"compiler":[[13,7]],"time":0.287109375,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (expm1.f64 x))","next",0.2578125]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.2578125],"time":1.27001953125,"type":"prune"},{"compiler":[[11,4]],"locations":[["(/.f64 (exp.f64 x) (expm1.f64 x))",0.2500027510508252,true]],"time":2.926025390625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (exp.f64 x) (expm1.f64 x))","x","-inf",0.453857421875],["(/.f64 (exp.f64 x) (expm1.f64 x))","x","inf",0.508056640625],["(/.f64 (exp.f64 x) (expm1.f64 x))","x","0",0.368896484375]],"time":1.3779296875,"type":"series"},{"count":[[1,30]],"egraph":[[2,1287,8,0.014469],[1,99,8,0.001740667],[0,5,8,0.000139]],"inputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (exp.f64 x) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 x) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 x) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 2) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 x)) (*.f64 (sqrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (sqrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 x)) (/.f64 1 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (expm1.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 x)) 1) (/.f64 (sqrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 x)) (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (/.f64 (sqrt.f64 (exp.f64 x)) (cbrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (expm1.f64 x))) (/.f64 (exp.f64 x) (sqrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (sqrt.f64 (expm1.f64 x))) (/.f64 (cbrt.f64 (exp.f64 x)) (sqrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) (exp.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (exp.f64 x) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 x (log.f64 (expm1.f64 x))))))))"]],"rules":[["egg-rr",30]],"stop":[["node limit",1]],"time":31.635009765625,"type":"rewrite"},{"count":[[42,39]],"egraph":[[22,7558,104,0.122032124],[21,6618,104,0.107459249],[20,6538,104,0.094129083],[19,6360,104,0.086168458],[18,6136,104,0.078101541],[17,5848,104,0.069861166],[16,5525,104,0.062034958],[15,4805,104,0.054161583],[14,4204,104,0.045717166],[13,3704,104,0.038631041],[12,3281,104,0.032471333],[11,2959,104,0.026608541],[10,2705,104,0.021597166],[9,2547,104,0.017402],[8,2414,104,0.013795],[7,2328,104,0.0106225],[6,1504,104,0.0073004160000000005],[5,572,104,0.004260833],[4,327,104,0.002127917],[3,213,104,0.001233542],[2,94,104,0.000665875],[1,48,104,0.000302584],[0,19,104,0.000113625]],"inputs":[["(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (fma.f64 1/12 x (/.f64 1 x)))","(+.f64 1/2 (fma.f64 x 1/12 (/.f64 1 x)))","(+.f64 (/.f64 1 x) (fma.f64 x 1/12 1/2))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(+.f64 1/2 (fma.f64 -1/720 (pow.f64 x 3) (fma.f64 1/12 x (/.f64 1 x))))","(+.f64 1/2 (fma.f64 -1/720 (pow.f64 x 3) (fma.f64 x 1/12 (/.f64 1 x))))","(+.f64 1/2 (fma.f64 x 1/12 (fma.f64 -1/720 (pow.f64 x 3) (/.f64 1 x))))","(+.f64 1/2 (fma.f64 x (fma.f64 x (*.f64 x -1/720) 1/12) (/.f64 1 x)))","(+.f64 (/.f64 1 x) (fma.f64 x (fma.f64 x (*.f64 x -1/720) 1/12) 1/2))","(+.f64 (/.f64 1 x) (fma.f64 -1/720 (pow.f64 x 3) (fma.f64 x 1/12 1/2)))","(+.f64 (/.f64 1 x) (fma.f64 x 1/12 (fma.f64 -1/720 (pow.f64 x 3) 1/2)))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["node limit",1]],"time":138.462890625,"type":"simplify"},{"compiler":[[379,160]],"time":4.2900390625,"type":"eval"},{"alts":[["(+.f64 1/2 (/.f64 1 x))","fresh",20.96911249822649],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","next",0.26400375976844204]],"compiler":[[6,5],[6,4],[15,10],[6,5],[15,10]],"count":[[40,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[39,2],"picked":[1,1]}],"min-error":[0.2031249999590629],"time":6.56103515625,"type":"prune"},{"compiler":[[43,18]],"locations":[["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)",0.01171875,true],["(cbrt.f64 (exp.f64 x))",0.2389860624232245,true],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))",0.2539090010508252,true],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))",0.25781112397081396,true]],"time":8.37890625,"type":"localize"},{"count":[[4,48]],"series":[["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)","x","-inf",0.35888671875],["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)","x","inf",0.391845703125],["(pow.f64 (cbrt.f64 (exp.f64 x)) 2)","x","0",0.22314453125],["(cbrt.f64 (exp.f64 x))","x","-inf",0.802978515625],["(cbrt.f64 (exp.f64 x))","x","inf",0.76513671875],["(cbrt.f64 (exp.f64 x))","x","0",0.21484375],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","x","-inf",0.35595703125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","x","inf",1.135986328125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","x","0",0.23193359375],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","x","-inf",1.967041015625],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","x","inf",1.741943359375],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","x","0",0.51806640625]],"time":8.881103515625,"type":"series"},{"count":[[4,124]],"egraph":[[2,2435,31,0.022211959],[1,228,31,0.0036156670000000004],[0,11,31,0.000336292]],"inputs":[["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","(cbrt.f64 (exp.f64 x))","(pow.f64 (cbrt.f64 (exp.f64 x)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (/.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (/.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) 2) (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (sqrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 1/6) (*.f64 (pow.f64 (exp.f64 x) 1/6) (/.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (exp.f64 x))) (/.f64 1 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (expm1.f64 x)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (exp.f64 x) 1/6) 1) (/.f64 (pow.f64 (exp.f64 x) 1/6) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (exp.f64 x) 1/6) (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (/.f64 (pow.f64 (exp.f64 x) 1/6) (cbrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (expm1.f64 x))) (/.f64 (cbrt.f64 (exp.f64 x)) (sqrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (sqrt.f64 (expm1.f64 x))) (/.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (sqrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) (cbrt.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 x 1/3) (log.f64 (expm1.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (exp.f64 x) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 x)) (*.f64 (expm1.f64 x) (pow.f64 (cbrt.f64 (exp.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 x)) (*.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) -2) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) (pow.f64 (cbrt.f64 (exp.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (/.f64 (expm1.f64 x) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 (/.f64 (expm1.f64 x) (cbrt.f64 (exp.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (expm1.f64 x) (cbrt.f64 (exp.f64 x))) (pow.f64 (cbrt.f64 (exp.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) -2) (/.f64 (expm1.f64 x) (cbrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (expm1.f64 x) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 2) (/.f64 1 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (/.f64 1 (sqrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 x)) (/.f64 (expm1.f64 x) (sqrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (exp.f64 x))) (*.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) -2) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (*.f64 (/.f64 (expm1.f64 x) (cbrt.f64 (exp.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (*.f64 -1 (/.f64 (expm1.f64 x) (cbrt.f64 (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 (exp.f64 x))) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 (exp.f64 x))) (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (*.f64 (neg.f64 (expm1.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 (exp.f64 x))) 1) (*.f64 (neg.f64 (expm1.f64 x)) (pow.f64 (cbrt.f64 (exp.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))) (*.f64 (expm1.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (cbrt.f64 (exp.f64 x))) (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))) (*.f64 (neg.f64 (expm1.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (cbrt.f64 (exp.f64 x))) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (neg.f64 (cbrt.f64 (exp.f64 x)))) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (neg.f64 (cbrt.f64 (exp.f64 x)))) (*.f64 -1 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (sqrt.f64 (expm1.f64 x))) (sqrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (exp.f64 x) 3) (pow.f64 (expm1.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 3) (pow.f64 (exp.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (exp.f64 x) 2) (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 x (log.f64 (expm1.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (exp.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (cbrt.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 1/6) (pow.f64 (exp.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 1/3) (pow.f64 (sqrt.f64 (exp.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))) (sqrt.f64 -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 x)) (pow.f64 (exp.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 1/6) (*.f64 (pow.f64 (exp.f64 x) 1/6) (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2)) (cbrt.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (cbrt.f64 (exp.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4)) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (*.f64 x 1/3)))))))"]],"rules":[["egg-rr",25],["egg-rr",23],["egg-rr",45],["egg-rr",31]],"stop":[["node limit",1]],"time":51.193115234375,"type":"rewrite"},{"count":[[172,156]],"egraph":[[6,7301,387,0.034584169],[5,4939,387,0.023518919],[4,2634,387,0.01342396],[3,1011,387,0.00643071],[2,363,402,0.002507126],[1,156,408,0.000941667],[0,61,438,0.000292292]],"inputs":[["(/.f64 1 x)","(-.f64 (/.f64 1 x) 1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (/.f64 1 x)) 1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (+.f64 (/.f64 1 x) (*.f64 1/162 (pow.f64 x 2)))) 1/6)","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","1","(+.f64 1 (*.f64 1/3 x))","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 1 (+.f64 (*.f64 1/162 (pow.f64 x 3)) (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x))))","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","1","(+.f64 (*.f64 2/3 x) 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (*.f64 2/9 (pow.f64 x 2))))","(+.f64 (*.f64 2/3 x) (+.f64 1 (+.f64 (*.f64 2/9 (pow.f64 x 2)) (*.f64 4/81 (pow.f64 x 3)))))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(-.f64 (/.f64 1 x) 1/6)","(+.f64 (/.f64 1 x) -1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (/.f64 1 x)) 1/6)","(+.f64 (fma.f64 -1/36 x (/.f64 1 x)) -1/6)","(fma.f64 x -1/36 (+.f64 (/.f64 1 x) -1/6))","(+.f64 (/.f64 1 x) (fma.f64 x -1/36 -1/6))","(+.f64 (fma.f64 x -1/36 (/.f64 1 x)) -1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (+.f64 (/.f64 1 x) (*.f64 1/162 (pow.f64 x 2)))) 1/6)","(+.f64 (+.f64 (fma.f64 -1/36 x (/.f64 1 x)) (*.f64 1/162 (*.f64 x x))) -1/6)","(+.f64 (fma.f64 x -1/36 (fma.f64 1/162 (*.f64 x x) (/.f64 1 x))) -1/6)","(fma.f64 x -1/36 (fma.f64 1/162 (*.f64 x x) (+.f64 (/.f64 1 x) -1/6)))","(+.f64 (/.f64 1 x) (fma.f64 x (fma.f64 x 1/162 -1/36) -1/6))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (fma.f64 1/12 x (/.f64 1 x)))","(+.f64 1/2 (fma.f64 x 1/12 (/.f64 1 x)))","(+.f64 (/.f64 1 x) (fma.f64 x 1/12 1/2))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(+.f64 1/2 (fma.f64 -1/720 (pow.f64 x 3) (fma.f64 1/12 x (/.f64 1 x))))","(+.f64 1/2 (fma.f64 -1/720 (pow.f64 x 3) (fma.f64 x 1/12 (/.f64 1 x))))","(+.f64 (/.f64 1 x) (fma.f64 x 1/12 (fma.f64 -1/720 (pow.f64 x 3) 1/2)))","(+.f64 (fma.f64 x 1/12 (/.f64 1 x)) (fma.f64 -1/720 (pow.f64 x 3) 1/2))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","1","(+.f64 1 (*.f64 1/3 x))","(+.f64 1 (*.f64 x 1/3))","(fma.f64 x 1/3 1)","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 1 (fma.f64 1/18 (*.f64 x x) (*.f64 x 1/3)))","(+.f64 (fma.f64 x 1/3 1) (*.f64 x (*.f64 x 1/18)))","(fma.f64 x 1/3 (fma.f64 x (*.f64 x 1/18) 1))","(fma.f64 x (fma.f64 x 1/18 1/3) 1)","(+.f64 1 (+.f64 (*.f64 1/162 (pow.f64 x 3)) (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x))))","(+.f64 1 (fma.f64 1/162 (pow.f64 x 3) (fma.f64 1/18 (*.f64 x x) (*.f64 x 1/3))))","(+.f64 (fma.f64 1/162 (pow.f64 x 3) (*.f64 x (*.f64 x 1/18))) (fma.f64 x 1/3 1))","(fma.f64 1/162 (pow.f64 x 3) (fma.f64 x 1/3 (fma.f64 x (*.f64 x 1/18) 1)))","(fma.f64 x 1/3 (fma.f64 (*.f64 x x) (fma.f64 x 1/162 1/18) 1))","(fma.f64 (*.f64 x x) (fma.f64 x 1/162 1/18) (fma.f64 x 1/3 1))","(fma.f64 x (fma.f64 x 1/18 1/3) (fma.f64 1/162 (pow.f64 x 3) 1))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","1","(+.f64 (*.f64 2/3 x) 1)","(fma.f64 2/3 x 1)","(fma.f64 x 2/3 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (*.f64 2/9 (pow.f64 x 2))))","(+.f64 (fma.f64 2/3 x 1) (*.f64 (*.f64 x x) 2/9))","(fma.f64 x 2/3 (fma.f64 (*.f64 x x) 2/9 1))","(fma.f64 x (*.f64 x 2/9) (fma.f64 x 2/3 1))","(fma.f64 x (fma.f64 x 2/9 2/3) 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (+.f64 (*.f64 2/9 (pow.f64 x 2)) (*.f64 4/81 (pow.f64 x 3)))))","(+.f64 (fma.f64 2/3 x 1) (fma.f64 2/9 (*.f64 x x) (*.f64 (pow.f64 x 3) 4/81)))","(+.f64 (fma.f64 x 2/3 1) (fma.f64 (*.f64 x x) 2/9 (*.f64 (pow.f64 x 3) 4/81)))","(fma.f64 x 2/3 (fma.f64 x (*.f64 x 2/9) (fma.f64 (pow.f64 x 3) 4/81 1)))","(fma.f64 (pow.f64 x 3) 4/81 (fma.f64 x (fma.f64 x 2/9 2/3) 1))","(fma.f64 x (fma.f64 x 2/9 2/3) (fma.f64 (pow.f64 x 3) 4/81 1))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))","(pow.f64 (pow.f64 (exp.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (exp.f64 x) 2))","(cbrt.f64 (pow.f64 (exp.f64 2) x))"]],"stop":[["node limit",1]],"time":53.8408203125,"type":"simplify"},{"compiler":[[3040,1448]],"time":29.157958984375,"type":"eval"},{"alts":[["(+.f64 1/2 (/.f64 1 x))","next",20.96911249822649],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","done",0.26400375976844204]],"compiler":[[6,5],[6,4],[15,10],[6,5]],"count":[[190,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[187,0],"picked":[1,1]}],"min-error":[0.2031249999590629],"time":62.1572265625,"type":"prune"},{"compiler":[[12,9]],"locations":[["(+.f64 1/2 (/.f64 1 x))",0.00390625,true]],"time":2.94580078125,"type":"localize"},{"count":[[1,3]],"series":[["(+.f64 1/2 (/.f64 1 x))","x","-inf",0.225830078125],["(+.f64 1/2 (/.f64 1 x))","x","inf",0.150146484375],["(+.f64 1/2 (/.f64 1 x))","x","0",0.283935546875]],"time":0.697021484375,"type":"series"},{"count":[[1,30]],"egraph":[[2,1590,7,0.016746874000000002],[1,130,7,0.0023605830000000003],[0,6,7,0.00023]],"inputs":[["(+.f64 1/2 (/.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 1/2 (/.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/4 (-.f64 1/2 (/.f64 1 x))) (/.f64 (pow.f64 x -2) (-.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 2) (cbrt.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/8 (pow.f64 x -3)) (/.f64 1 (+.f64 1/4 (-.f64 (pow.f64 x -2) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/4 (pow.f64 x -2)) (/.f64 1 (-.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1/4 (-.f64 (pow.f64 x -2) (/.f64 1/2 x))) (+.f64 1/8 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 x -3)) (+.f64 1/4 (-.f64 (pow.f64 x -2) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 x -3)) (+.f64 (pow.f64 x -2) (-.f64 1/4 (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/4 (pow.f64 x -2)) (-.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1/8 (pow.f64 x -3))) (neg.f64 (+.f64 1/4 (-.f64 (pow.f64 x -2) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (-.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -2) 1/4) (-.f64 (/.f64 1 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 1 (cbrt.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) 1/2)))))"]],"rules":[["egg-rr",30]],"stop":[["node limit",1]],"time":34.68017578125,"type":"rewrite"},{"count":[[33,32]],"egraph":[[1,7,6,5.1126e-5],[0,5,6,3.0959e-5]],"inputs":[["(/.f64 1 x)","1/2","1/2"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","1/2","1/2"]],"stop":[["saturated",1]],"time":10.576904296875,"type":"simplify"},{"compiler":[[330,277]],"time":5.2509765625,"type":"eval"},{"alts":[["(/.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))","next",44.303428758409986],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","done",0.26400375976844204]],"compiler":[[14,12],[6,4],[15,10],[14,12]],"count":[[35,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[32,1],"picked":[1,0]}],"min-error":[0.2031249999590629],"time":4.14306640625,"type":"prune"},{"compiler":[[46,37]],"locations":[["(/.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))",0.02734375,true],["(/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))",21.764851676168494,true]],"time":13.160888671875,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))","x","-inf",0.428955078125],["(/.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))","x","inf",0.330078125],["(/.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))","x","0",0.33203125],["(/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))","x","-inf",0.27197265625],["(/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))","x","inf",1.384033203125],["(/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))","x","0",0.322021484375]],"time":3.1650390625,"type":"series"},{"count":[[2,186]],"egraph":[[2,3734,17,0.028129543],[1,283,17,0.0051912090000000004],[0,12,35,0.000450917]],"inputs":[["(/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))","(/.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))) (sqrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (pow.f64 x -1/2) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1))) (fma.f64 (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 1 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1))) (fma.f64 (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 1 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1))) (fma.f64 (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 1 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1))) (fma.f64 (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 1 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1))) (fma.f64 (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 1 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1))) (fma.f64 (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 1 (*.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 x) (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 x) (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 x) (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 x) (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 x) (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x)))) (fma.f64 (neg.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 x) (*.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) (pow.f64 (cbrt.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (/.f64 1 x) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (cbrt.f64 (pow.f64 x -2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) 1) (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) 1) (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) 1) (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) 1) (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) 1) (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1)))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) 1) (*.f64 (/.f64 (pow.f64 x -1/2) (-.f64 1/4 (pow.f64 x -2))) (/.f64 (pow.f64 x -1/2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2))))) (fma.f64 (neg.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (*.f64 (/.f64 (pow.f64 x -1/2) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (pow.f64 x -1/2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (pow.f64 x -2)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16)) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))) (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16)) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))) (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16)) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))) (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16)) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))) (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16)) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))) (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6)))))) (fma.f64 (neg.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16)) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))) (*.f64 (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (/.f64 (/.f64 1 x) (-.f64 1/64 (pow.f64 x -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4)))))) (fma.f64 (neg.f64 (+.f64 1/4 (pow.f64 x -2))) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))) (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4)))))) (fma.f64 (neg.f64 (+.f64 1/4 (pow.f64 x -2))) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))) (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4)))))) (fma.f64 (neg.f64 (+.f64 1/4 (pow.f64 x -2))) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))) (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4)))))) (fma.f64 (neg.f64 (+.f64 1/4 (pow.f64 x -2))) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))) (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4)))))) (fma.f64 (neg.f64 (+.f64 1/4 (pow.f64 x -2))) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))) (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4)))))) (fma.f64 (neg.f64 (+.f64 1/4 (pow.f64 x -2))) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))) (*.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 (/.f64 1 x) (-.f64 1/16 (pow.f64 x -4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) 1) (/.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/2 (/.f64 -1 x)) (/.f64 1 (-.f64 1/4 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1 x)))) (pow.f64 (/.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1 x)))) 2) (/.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) 2) (*.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1 x)))) (/.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1/2 (/.f64 -1 x))) (*.f64 (sqrt.f64 (+.f64 1/2 (/.f64 -1 x))) (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1/2 (neg.f64 (/.f64 -1 x))) (/.f64 1 (neg.f64 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (+.f64 1/2 (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) 2) 1) (/.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) (-.f64 1/4 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1/2 (/.f64 -1 x))) 1) (/.f64 (sqrt.f64 (+.f64 1/2 (/.f64 -1 x))) (-.f64 1/4 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (/.f64 (+.f64 1/2 (/.f64 -1 x)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) 2) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (/.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1/2 (/.f64 -1 x))) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (/.f64 (sqrt.f64 (+.f64 1/2 (/.f64 -1 x))) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (+.f64 1/2 (/.f64 -1 x)) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) 2) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (/.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1/2 (/.f64 -1 x)) (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1/2 (/.f64 -1 x)) (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1/2 (/.f64 1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 1/2 (/.f64 -1 x)) 3) (pow.f64 (-.f64 1/4 (pow.f64 x -2)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1/2 (/.f64 1 x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 1/2 (/.f64 -1 x)) (neg.f64 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 1/2 (/.f64 -1 x)) 3) (pow.f64 (-.f64 1/4 (pow.f64 x -2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (+.f64 1/2 (/.f64 1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2))) (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) 2) (cbrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (/.f64 1/2 (-.f64 1/4 (pow.f64 x -2)))) (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (-.f64 1/64 (pow.f64 x -6))) (fma.f64 (pow.f64 x -2) (+.f64 1/4 (pow.f64 x -2)) 1/16) (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (-.f64 1/16 (pow.f64 x -4))) (+.f64 1/4 (pow.f64 x -2)) (neg.f64 (/.f64 1 (*.f64 (-.f64 1/4 (pow.f64 x -2)) x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/4 (/.f64 1 (+.f64 1/2 (/.f64 -1 x)))) (*.f64 (neg.f64 (pow.f64 x -2)) (/.f64 1 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) 1/4) (*.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) (neg.f64 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 1/2 (/.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/4 (+.f64 1/2 (/.f64 -1 x))) (/.f64 (pow.f64 x -2) (+.f64 1/2 (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/4 (pow.f64 x -2)) (/.f64 1 (+.f64 1/2 (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 2) (cbrt.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1 x))) (sqrt.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (/.f64 -1 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) (-.f64 1/4 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) (/.f64 1 (/.f64 1 (-.f64 1/4 (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2) 1) (/.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) (+.f64 1/2 (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))) 1) (/.f64 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))) (+.f64 1/2 (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) 2)) (/.f64 (-.f64 1/4 (pow.f64 x -2)) (cbrt.f64 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2) (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) 2)) (/.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) (cbrt.f64 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))) (pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 -1 x))) 2)) (/.f64 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))) (cbrt.f64 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 1/2 (/.f64 -1 x)))) (/.f64 (-.f64 1/4 (pow.f64 x -2)) (sqrt.f64 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2) (sqrt.f64 (+.f64 1/2 (/.f64 -1 x)))) (/.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) (sqrt.f64 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))) (sqrt.f64 (+.f64 1/2 (/.f64 -1 x)))) (/.f64 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))) (sqrt.f64 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/4 (pow.f64 x -2)) (-.f64 1/4 (pow.f64 x -2))) (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/4 (pow.f64 x -2)) (-.f64 1/8 (pow.f64 x -3))) (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 -1/2 (neg.f64 (/.f64 -1 x)))) (neg.f64 (-.f64 1/4 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (/.f64 1 (cbrt.f64 (+.f64 1/2 (/.f64 1 x)))) 2)) (cbrt.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) 1) (-.f64 1/4 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) (pow.f64 (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))) 2)) (cbrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2)))) (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 1/2 (/.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1/2 (/.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 1/4 (pow.f64 x -2)) 3) (pow.f64 (+.f64 1/2 (/.f64 -1 x)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 -1 (+.f64 1/2 (/.f64 1 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1/4 (pow.f64 x -2))) (sqrt.f64 (+.f64 1/2 (/.f64 -1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 1/2 (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1/4 (pow.f64 x -2)) 3) (pow.f64 (+.f64 1/2 (/.f64 -1 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (+.f64 1/2 (/.f64 1 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 1/2 (/.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/4 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) (*.f64 (neg.f64 (pow.f64 x -2)) (/.f64 1 (+.f64 1/2 (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (pow.f64 x -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (/.f64 1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) 1/4 (*.f64 (/.f64 1 (+.f64 1/2 (/.f64 -1 x))) (neg.f64 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 x -4))) (sqrt.f64 (cbrt.f64 (pow.f64 x -2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (/.f64 1 x)) 1/2)))))"]],"rules":[["egg-rr",62],["egg-rr",124]],"stop":[["node limit",1]],"time":68.77490234375,"type":"rewrite"},{"count":[[210,202]],"egraph":[[5,6086,207,0.025251501000000003],[4,2159,207,0.013241709],[3,673,207,0.004722126],[2,238,213,0.001685542],[1,98,213,0.0006497079999999999],[0,35,213,0.000195708]],"inputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/4 (pow.f64 x 3)) x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) (+.f64 (*.f64 1/4 (pow.f64 x 3)) x)))","2","(-.f64 2 (*.f64 4 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (*.f64 4 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (+.f64 (*.f64 16 (/.f64 1 (pow.f64 x 3))) (*.f64 4 (/.f64 1 x))))","2","(-.f64 2 (*.f64 4 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (*.f64 4 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (+.f64 (*.f64 16 (/.f64 1 (pow.f64 x 3))) (*.f64 4 (/.f64 1 x))))","(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (/.f64 1 x))","1/2","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (/.f64 1 x))","1/2","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (/.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(*.f64 x (fma.f64 x -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/4 (pow.f64 x 3)) x))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 1/4 (pow.f64 x 3) x))","(fma.f64 x (*.f64 x -1/2) (fma.f64 1/4 (pow.f64 x 3) x))","(fma.f64 x (*.f64 x (fma.f64 x 1/4 -1/2)) x)","(fma.f64 (*.f64 x x) (fma.f64 x 1/4 -1/2) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) (+.f64 (*.f64 1/4 (pow.f64 x 3)) x)))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -1/8 (pow.f64 x 4) (fma.f64 1/4 (pow.f64 x 3) x)))","(fma.f64 x (*.f64 x -1/2) (fma.f64 1/4 (pow.f64 x 3) (fma.f64 -1/8 (pow.f64 x 4) x)))","(fma.f64 x (*.f64 x (fma.f64 x 1/4 -1/2)) (fma.f64 -1/8 (pow.f64 x 4) x))","(fma.f64 (*.f64 x x) (fma.f64 x 1/4 -1/2) (fma.f64 -1/8 (pow.f64 x 4) x))","2","(-.f64 2 (*.f64 4 (/.f64 1 x)))","(-.f64 2 (/.f64 4 x))","(+.f64 2 (/.f64 -4 x))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (*.f64 4 (/.f64 1 x)))","(+.f64 (/.f64 8 (*.f64 x x)) (-.f64 2 (/.f64 4 x)))","(+.f64 (-.f64 2 (/.f64 4 x)) (/.f64 8 (*.f64 x x)))","(+.f64 2 (+.f64 (/.f64 8 (*.f64 x x)) (/.f64 -4 x)))","(+.f64 (+.f64 2 (/.f64 -4 x)) (/.f64 8 (*.f64 x x)))","(+.f64 (+.f64 2 (/.f64 -4 x)) (/.f64 (/.f64 8 x) x))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (+.f64 (*.f64 16 (/.f64 1 (pow.f64 x 3))) (*.f64 4 (/.f64 1 x))))","(+.f64 (/.f64 8 (*.f64 x x)) (-.f64 2 (+.f64 (/.f64 4 x) (/.f64 16 (pow.f64 x 3)))))","(+.f64 (/.f64 8 (*.f64 x x)) (-.f64 (-.f64 2 (/.f64 4 x)) (/.f64 16 (pow.f64 x 3))))","(+.f64 2 (+.f64 (/.f64 8 (*.f64 x x)) (+.f64 (/.f64 -4 x) (/.f64 -16 (pow.f64 x 3)))))","(+.f64 (+.f64 2 (/.f64 -4 x)) (+.f64 (/.f64 8 (*.f64 x x)) (/.f64 -16 (pow.f64 x 3))))","(+.f64 (+.f64 2 (/.f64 -4 x)) (+.f64 (/.f64 (/.f64 8 x) x) (/.f64 -16 (pow.f64 x 3))))","(+.f64 2 (+.f64 (/.f64 -16 (pow.f64 x 3)) (+.f64 (/.f64 (/.f64 8 x) x) (/.f64 -4 x))))","2","(-.f64 2 (*.f64 4 (/.f64 1 x)))","(-.f64 2 (/.f64 4 x))","(+.f64 2 (/.f64 -4 x))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (*.f64 4 (/.f64 1 x)))","(+.f64 (/.f64 8 (*.f64 x x)) (-.f64 2 (/.f64 4 x)))","(+.f64 (-.f64 2 (/.f64 4 x)) (/.f64 8 (*.f64 x x)))","(+.f64 2 (+.f64 (/.f64 8 (*.f64 x x)) (/.f64 -4 x)))","(+.f64 (+.f64 2 (/.f64 -4 x)) (/.f64 8 (*.f64 x x)))","(+.f64 (+.f64 2 (/.f64 -4 x)) (/.f64 (/.f64 8 x) x))","(-.f64 (+.f64 (*.f64 8 (/.f64 1 (pow.f64 x 2))) 2) (+.f64 (*.f64 16 (/.f64 1 (pow.f64 x 3))) (*.f64 4 (/.f64 1 x))))","(+.f64 (/.f64 8 (*.f64 x x)) (-.f64 2 (+.f64 (/.f64 4 x) (/.f64 16 (pow.f64 x 3)))))","(+.f64 (/.f64 8 (*.f64 x x)) (-.f64 (-.f64 2 (/.f64 4 x)) (/.f64 16 (pow.f64 x 3))))","(+.f64 2 (+.f64 (/.f64 8 (*.f64 x x)) (+.f64 (/.f64 -4 x) (/.f64 -16 (pow.f64 x 3)))))","(+.f64 (+.f64 2 (/.f64 -4 x)) (+.f64 (/.f64 8 (*.f64 x x)) (/.f64 -16 (pow.f64 x 3))))","(+.f64 (+.f64 2 (/.f64 -4 x)) (+.f64 (/.f64 (/.f64 8 x) x) (/.f64 -16 (pow.f64 x 3))))","(+.f64 2 (+.f64 (/.f64 -16 (pow.f64 x 3)) (+.f64 (/.f64 (/.f64 8 x) x) (/.f64 -4 x))))","(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","1/2","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","1/2","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 1/2 (/.f64 1 x))","(+.f64 (/.f64 1 x) 1/2)"]],"stop":[["node limit",1]],"time":41.153076171875,"type":"simplify"},{"compiler":[[7441,6327]],"time":97.544921875,"type":"eval"},{"alts":[["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x))))))","fresh",63.12656862811225],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","done",0.26400375976844204]],"compiler":[[20,18],[6,4],[15,10]],"count":[[205,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[202,1],"picked":[1,0]}],"min-error":[0.2031249999590629],"time":27.05908203125,"type":"prune"},{"accuracy":[0.2578125],"baseline":[0.2578125],"branch":[["x",0.2578125,1],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))",0.2578125,1],["(exp.f64 x)",0.2578125,1]],"compiler":[[2,1],[8,5],[3,2],[64,46]],"count":[[6,1]],"inputs":[["(+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 1/2 (/.f64 1 x))))))","(/.f64 1 (/.f64 (-.f64 1/2 (/.f64 1 x)) (-.f64 1/4 (pow.f64 x -2))))","(+.f64 1/2 (/.f64 1 x))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 1) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"link":["."],"name":["expq2 (section 3.11)"],"oracle":[63.17344362815319],"outputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"time":8.945068359375,"times":[["x",4.030029296875],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))",1.807861328125],["(exp.f64 x)",1.705078125]],"type":"regimes"},{"compiler":[[6,4]],"egraph":[[0,5,8,1.3208e-5]],"inputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["fuel",1],["saturated",1]],"time":8.2509765625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.26513671875,"type":"end"}]
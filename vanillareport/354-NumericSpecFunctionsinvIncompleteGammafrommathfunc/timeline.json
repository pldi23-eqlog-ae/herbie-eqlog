[{"compiler":[[17,14]],"method":["search"],"sampling":[[12,0.4331704219803214,0.04585362575016916,0.5209759522695094],[11,0.42146311327815056,0.06048776162788272,0.5180491250939667],[10,0.39804849587380886,0.08975603338330984,0.5121954707428813],[9,0.37463387846946716,0.11707308702170849,0.5082930345088243],[8,0.32780464366078377,0.17170719429850578,0.5004881620407104],[7,0.2809754088521004,0.21853642910718918,0.5004881620407104],[6,0.18731693923473358,0.31219489872455597,0.5004881620407104],[5,0.12487795948982239,0.37463387846946716,0.5004881620407104],[4,0.0,0.49951183795928955,0.5004881620407104],[3,0.0,0.49951183795928955,0.5004881620407104],[2,0.0,0.49951183795928955,0.5004881620407104],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":17.83203125,"type":"analyze"},{"outcomes":[["body",256,"invalid",8.526123046875,180],["body",256,"valid",392.743896484375,8256]],"time":408.94384765625,"type":"sample"},{"compiler":[[16,13]],"egraph":[[0,2,2,1.917e-6],[15,7757,32,0.10848891499999999],[14,7445,32,0.099314873],[13,7233,32,0.084224956],[12,6205,32,0.07453004],[11,5939,32,0.062473165000000004],[10,5273,32,0.054149707000000005],[9,4911,32,0.045064166],[8,4636,32,0.037470666],[7,3267,32,0.028266541],[6,1742,32,0.0171515],[5,843,32,0.007715958],[4,447,32,0.00328075],[3,209,36,0.0013903750000000001],[2,100,36,0.000578416],[1,46,36,0.00023679099999999998],[0,20,42,8.4e-5]],"inputs":[["0","1"],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 y 9))) (/.f64 x (*.f64 3 (sqrt.f64 y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 1 (+.f64 (/.f64 1 (*.f64 x 9)) (/.f64 y (*.f64 3 (sqrt.f64 x)))))","(-.f64 1 (+.f64 (/.f64 1/9 x) (/.f64 y (*.f64 3 (sqrt.f64 x)))))","(-.f64 (-.f64 1 (/.f64 y (*.f64 3 (sqrt.f64 x)))) (/.f64 1/9 x))","(+.f64 1 (+.f64 (*.f64 -1/3 (/.f64 y (sqrt.f64 x))) (/.f64 -1/9 x)))","(-.f64 (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) 1) (/.f64 1/9 x))","(+.f64 (/.f64 -1/9 x) (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 1))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 y 9))) (/.f64 x (*.f64 3 (sqrt.f64 y))))","(-.f64 1 (+.f64 (/.f64 1 (*.f64 9 y)) (/.f64 x (*.f64 3 (sqrt.f64 y)))))","(-.f64 1 (+.f64 (/.f64 1/9 y) (/.f64 x (*.f64 3 (sqrt.f64 y)))))","(+.f64 1 (-.f64 (/.f64 -1/9 y) (/.f64 x (*.f64 3 (sqrt.f64 y)))))","(+.f64 1 (-.f64 (*.f64 -1/3 (/.f64 x (sqrt.f64 y))) (/.f64 1/9 y)))","(+.f64 (/.f64 -1/9 y) (fma.f64 -1/3 (/.f64 x (sqrt.f64 y)) 1))","(-.f64 1 (fma.f64 1/3 (/.f64 x (sqrt.f64 y)) (/.f64 1/9 y)))","(-.f64 1 (fma.f64 (/.f64 x (sqrt.f64 y)) 1/3 (/.f64 1/9 y)))","(-.f64 1 (fma.f64 x (/.f64 1/3 (sqrt.f64 y)) (/.f64 1/9 y)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":134.05810546875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,2403,16,0.026362498999999998],[9,2380,16,0.022323791],[8,2348,16,0.018320416],[7,1571,16,0.014048207],[6,871,16,0.008414666],[5,444,16,0.004069041],[4,236,16,0.001860166],[3,114,18,0.000855208],[2,56,18,0.00037237399999999997],[1,27,18,0.000161499],[0,13,21,5.8583e-5]],"inputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 1 (+.f64 (/.f64 1 (*.f64 x 9)) (/.f64 (/.f64 y 3) (sqrt.f64 x))))","(-.f64 1 (+.f64 (/.f64 1/9 x) (/.f64 y (*.f64 3 (sqrt.f64 x)))))","(+.f64 1 (-.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 3 (sqrt.f64 x)))))","(+.f64 1 (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (/.f64 -1/9 x)))"]],"stop":[["saturated",1]],"time":37.35009765625,"type":"simplify"},{"compiler":[[27,20]],"time":0.47900390625,"type":"eval"},{"alts":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","next",0.18359375],["(+.f64 1 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (/.f64 -1/9 x)))","fresh",0.270195019536884]],"compiler":[[16,13],[13,10],[16,13],[13,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0859375],"time":1.516845703125,"type":"prune"},{"compiler":[[48,33]],"locations":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))",0.015625,true],["(/.f64 y (*.f64 3 (sqrt.f64 x)))",0.2421875,true],["(/.f64 1 (*.f64 x 9))",0.27734375,true],["(*.f64 3 (sqrt.f64 x))",0.29296875,true]],"time":11.344970703125,"type":"localize"},{"count":[[4,39]],"series":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","-inf",0.203125],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","inf",0.2109375],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","0",0.31298828125],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","-inf",0.3359375],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","inf",0.31591796875],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","0",0.318115234375],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","x","-inf",0.635986328125],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","x","inf",0.35595703125],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","x","0",0.3798828125],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","y","-inf",0.29296875],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","y","inf",0.76513671875],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","y","0",0.747802734375],["(/.f64 1 (*.f64 x 9))","x","-inf",0.262939453125],["(/.f64 1 (*.f64 x 9))","x","inf",0.4150390625],["(/.f64 1 (*.f64 x 9))","x","0",0.323974609375],["(*.f64 3 (sqrt.f64 x))","x","-inf",0.458984375],["(*.f64 3 (sqrt.f64 x))","x","inf",0.358154296875],["(*.f64 3 (sqrt.f64 x))","x","0",0.64794921875]],"time":7.572998046875,"type":"series"},{"count":[[4,210]],"egraph":[[2,4132,35,0.030481333000000003],[1,290,37,0.005521791000000001],[0,13,43,0.000395333]],"inputs":[["(*.f64 3 (sqrt.f64 x))","(/.f64 1 (*.f64 x 9))","(/.f64 y (*.f64 3 (sqrt.f64 x)))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (/.f64 x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (exp.f64 (sqrt.f64 x)) (exp.f64 (sqrt.f64 x)))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3) (sqrt.f64 x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (/.f64 x 1/9)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x 1/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x 1/9) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 (/.f64 x 1/9)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 x 1/9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 x 1/9))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 x 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sqrt.f64 (/.f64 x 1/9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 x 1/9))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 x))) (cbrt.f64 (exp.f64 (/.f64 1/9 x))))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1/9 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (pow.f64 (/.f64 x 1/9) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x 1/9) -2)) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 x 1/9)) 2)) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x 1/9) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x 1/9) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 x -9)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x 1/9) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x 1/9) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x 1/9)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/9 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (/.f64 1/9 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 1 (/.f64 1/9 x))) (cbrt.f64 (+.f64 1 (/.f64 1/9 x)))) (cbrt.f64 (+.f64 1 (/.f64 1/9 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x)))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (*.f64 (sqrt.f64 x) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 1/3) (/.f64 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 3) (/.f64 (cbrt.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 3) (/.f64 (sqrt.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 x)) (/.f64 (sqrt.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 x)) (*.f64 y 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 x)) (/.f64 (cbrt.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 (/.f64 x 1/9))) (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 (/.f64 x 1/9))) (/.f64 (sqrt.f64 y) (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (sqrt.f64 (/.f64 x 1/9)))) (/.f64 y (sqrt.f64 (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (sqrt.f64 (/.f64 x 1/9)))) (/.f64 (cbrt.f64 y) (sqrt.f64 (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) (*.f64 y 1/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sqrt.f64 x) (*.f64 y 1/3)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (*.f64 (sqrt.f64 x) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 (neg.f64 (/.f64 1/9 x)) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (/.f64 1/9 x)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (/.f64 1/9 x)) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))) (cbrt.f64 (exp.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3)) (/.f64 1 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2)) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3)) (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3))) (neg.f64 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x)))) (neg.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 (sqrt.f64 x) (*.f64 y 1/3))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) 1)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (/.f64 (sqrt.f64 x) (*.f64 y 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -2)) (/.f64 (sqrt.f64 x) (*.f64 y 1/3))) (*.f64 (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 (+.f64 1 (/.f64 1/9 x)) (/.f64 (sqrt.f64 x) (*.f64 y 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (sqrt.f64 (/.f64 x 1/9))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) y)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -2)) (sqrt.f64 (/.f64 x 1/9))) (*.f64 (+.f64 1 (/.f64 1/9 x)) y)) (*.f64 (+.f64 1 (/.f64 1/9 x)) (sqrt.f64 (/.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (*.f64 (sqrt.f64 x) -3)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 (sqrt.f64 x) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -2)) (*.f64 (sqrt.f64 x) -3)) (*.f64 (+.f64 1 (/.f64 1/9 x)) (neg.f64 y))) (*.f64 (+.f64 1 (/.f64 1/9 x)) (*.f64 (sqrt.f64 x) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (sqrt.f64 x)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 y 1/3))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -2)) (sqrt.f64 x)) (*.f64 (+.f64 1 (/.f64 1/9 x)) (*.f64 y 1/3))) (*.f64 (+.f64 1 (/.f64 1/9 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) 3)) (+.f64 1 (fma.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 3)) (+.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (-.f64 (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))) (*.f64 (-.f64 1 (/.f64 1/9 x)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (+.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))) (-.f64 (-.f64 1 (/.f64 1/9 x)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2)) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (-.f64 1 (/.f64 1/9 x))) (+.f64 1 (expm1.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (+.f64 1 (expm1.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (exp.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 1 (/.f64 1/9 x))) (/.f64 1 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (/.f64 1 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))) (exp.f64 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x)))) (exp.f64 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))) (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x)))) (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (/.f64 1/9 x)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (/.f64 1/9 x)) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (/.f64 1/9 x)) 1 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (/.f64 1/9 x)) 1 (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 1 (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 1 (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) 1 (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) 2) (cbrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) (neg.f64 (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (sqrt.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3)) (/.f64 1 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3)) (/.f64 1 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3)) (/.f64 1 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) 3)) (/.f64 1 (fma.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))) (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -2)) (/.f64 1 (+.f64 1 (/.f64 1/9 x))) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -2)) (/.f64 1 (+.f64 1 (/.f64 1/9 x))) (*.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))) (cbrt.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))) (cbrt.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))) (sqrt.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x))))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (fma.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) 1 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 x))) y (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (+.f64 (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x)))) (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) (-.f64 1 (/.f64 1/9 x)))))))"]],"rules":[["egg-rr",118],["egg-rr",43],["egg-rr",31],["egg-rr",18]],"stop":[["node limit",1]],"time":66.843017578125,"type":"rewrite"},{"count":[[249,220]],"egraph":[[11,1476,400,0.020012208],[10,1464,400,0.01689925],[9,1299,400,0.013734125],[8,1048,400,0.010360875],[7,687,400,0.006603292],[6,409,400,0.004014417],[5,252,400,0.002417875],[4,178,400,0.0015179170000000001],[3,128,400,0.0009807090000000002],[2,78,400,0.0006068340000000001],[1,40,400,0.00031312500000000004],[0,19,418,0.000130375]],"inputs":[["(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(-.f64 1 (/.f64 1/9 x))","(+.f64 1 (/.f64 -1/9 x))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3))","(*.f64 y (*.f64 (sqrt.f64 (/.f64 1 x)) -1/3))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3))","(*.f64 y (*.f64 (sqrt.f64 (/.f64 1 x)) -1/3))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 1 (fma.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3 (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))"]],"stop":[["saturated",1]],"time":42.9931640625,"type":"simplify"},{"compiler":[[5137,3740]],"time":63.885986328125,"type":"eval"},{"alts":[["(+.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))","fresh",16.64453125],["(fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))","fresh",18.481502587915983],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) 3))","fresh",0.2891388672213042],["(-.f64 (-.f64 1 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 x 1/9)) 2)) (cbrt.f64 (/.f64 1/9 x)))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3197250976844202],["(-.f64 (-.f64 1 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3633576172213042],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","next",0.197597509768442],["(-.f64 (-.f64 1 (fma.f64 (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) -1)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3206825683790941],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (/.f64 1 (sqrt.f64 (sqrt.f64 (/.f64 x 1/9)))) (/.f64 y (sqrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","fresh",0.2917175781475361],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","fresh",0.201503759768442]],"compiler":[[37,27],[29,24],[19,16],[24,20],[17,13],[16,13],[25,21],[25,21],[22,18],[37,27],[29,24],[19,16],[24,20],[17,13],[16,13],[25,21],[25,21],[22,18]],"count":[[222,9]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[220,9],"picked":[1,0]}],"min-error":[0],"time":71.850830078125,"type":"prune"},{"compiler":[[48,30]],"locations":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))",0.015625,true],["(/.f64 y (sqrt.f64 x))",0.2421875,true],["(/.f64 1 (*.f64 x 9))",0.27734375,false],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))",0.36328125,true]],"time":10.5361328125,"type":"localize"},{"count":[[3,39]],"series":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","y","-inf",0.1630859375],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","y","inf",0.19189453125],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","y","0",0.160888671875],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","x","-inf",0.195068359375],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","x","inf",0.2080078125],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","x","0",0.18310546875],["(/.f64 y (sqrt.f64 x))","x","-inf",0.343994140625],["(/.f64 y (sqrt.f64 x))","x","inf",0.296142578125],["(/.f64 y (sqrt.f64 x))","x","0",0.237060546875],["(/.f64 y (sqrt.f64 x))","y","-inf",0.2939453125],["(/.f64 y (sqrt.f64 x))","y","inf",0.14306640625],["(/.f64 y (sqrt.f64 x))","y","0",0.14990234375],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","x","-inf",0.26611328125],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","x","inf",0.225830078125],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","x","0",0.22705078125],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","y","-inf",0.164794921875],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","y","inf",0.196044921875],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","y","0",0.201904296875]],"time":4.051025390625,"type":"series"},{"count":[[3,172]],"egraph":[[2,4047,31,0.030844874],[1,297,33,0.005809333],[0,13,36,0.000435291]],"inputs":[["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","(/.f64 y (sqrt.f64 x))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x))))) 2)) (log.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x)))))) (log.f64 (sqrt.f64 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/3 (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 x) (*.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 y) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 1/3 y)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 y) 1) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 y) (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 y) (pow.f64 x 1/4)) (pow.f64 x 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) 1/3) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (neg.f64 y)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) (*.f64 1/3 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x)))) 2)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 y (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (sqrt.f64 x))) (cbrt.f64 (/.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) x)) (cbrt.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (sqrt.f64 x))) (sqrt.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 x)) (/.f64 y (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 x)) (cbrt.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (cbrt.f64 x)) (/.f64 (sqrt.f64 y) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 x 1/4)) (/.f64 y (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 x 1/4)) (/.f64 (cbrt.f64 y) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sqrt.f64 x) y) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 y (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (sqrt.f64 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (fma.f64 -1 (/.f64 1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (/.f64 1/9 x)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (/.f64 1/9 x)) (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2) (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2)) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3)) (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3))) (neg.f64 (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x))) (neg.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 1/9 x) 3)) (sqrt.f64 x)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 1/3 y))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 1/9 x) 2)) (sqrt.f64 x)) (*.f64 (+.f64 1 (/.f64 1/9 x)) (*.f64 1/3 y))) (*.f64 (+.f64 1 (/.f64 1/9 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x)) 3)) (+.f64 1 (+.f64 (pow.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x)) 2) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 3)) (+.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (-.f64 (pow.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 2) (*.f64 (-.f64 1 (/.f64 1/9 x)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x)) 2)) (+.f64 1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (pow.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 2)) (-.f64 (-.f64 1 (/.f64 1/9 x)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2)) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (-.f64 1 (/.f64 1/9 x))) (+.f64 1 (expm1.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (+.f64 1 (expm1.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (exp.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 1 (/.f64 1/9 x))) (/.f64 1 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x)))) (/.f64 1 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (exp.f64 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x))))) (exp.f64 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (cbrt.f64 (exp.f64 (/.f64 y (sqrt.f64 x))))) (+.f64 1 (expm1.f64 (-.f64 1 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (/.f64 1/9 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (neg.f64 (/.f64 y (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (/.f64 1/9 x)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 (/.f64 1/9 x)) (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (/.f64 1/9 x)) 1 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (/.f64 1/9 x)) 1 (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 1 (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 1 (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x))) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) 2) (cbrt.f64 (-.f64 1 (/.f64 1/9 x))) (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2) (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2) (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) 2) (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (sqrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 3) (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3)) (/.f64 1 (fma.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x))) (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 1/9 x) 3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 1/9 x) 3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 1 (/.f64 1/9 x)) 2) (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 1/9 x) 2)) (/.f64 1 (+.f64 1 (/.f64 1/9 x))) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (/.f64 1/9 x) 2)) (/.f64 1 (+.f64 1 (/.f64 1/9 x))) (*.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) 2) (cbrt.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (sqrt.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 y (sqrt.f64 x))) 1/3 (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (fma.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (-.f64 (sqrt.f64 (-.f64 1 (/.f64 1/9 x))) (sqrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/3 y) 2) x))) (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 y) (pow.f64 x -1/2) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 (cbrt.f64 (/.f64 (*.f64 y y) x))) (cbrt.f64 (/.f64 y (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 (sqrt.f64 (/.f64 y (sqrt.f64 x)))) (sqrt.f64 (/.f64 y (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))))))"]],"rules":[["egg-rr",108],["egg-rr",38],["egg-rr",26]],"stop":[["node limit",1]],"time":62.469970703125,"type":"rewrite"},{"count":[[211,183]],"egraph":[[11,1471,460,0.020163501],[10,1459,460,0.017023501],[9,1294,460,0.013824125999999999],[8,1043,460,0.010414834],[7,685,460,0.0066468759999999995],[6,408,460,0.0040398759999999995],[5,251,460,0.002442793],[4,178,460,0.001541751],[3,128,460,0.001003251],[2,78,460,0.000612542],[1,40,460,0.000317292],[0,18,478,0.000131792]],"inputs":[["(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 1/3 y))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(-.f64 1 (/.f64 1/9 x))","(+.f64 1 (/.f64 -1/9 x))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)","(*.f64 y (*.f64 (sqrt.f64 (/.f64 1 x)) -1/3))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)","(*.f64 y (*.f64 (sqrt.f64 (/.f64 1 x)) -1/3))","(*.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1 x))) -1/3)) (/.f64 1/9 x))","(+.f64 (fma.f64 (*.f64 y -1/3) (sqrt.f64 (/.f64 1 x)) 1) (/.f64 -1/9 x))","(+.f64 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) 1) (/.f64 -1/9 x))","(+.f64 1 (fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (/.f64 -1/9 x)))","(fma.f64 (sqrt.f64 (/.f64 1 x)) (*.f64 y -1/3) (+.f64 1 (/.f64 -1/9 x)))"]],"stop":[["saturated",1]],"time":43.325927734375,"type":"simplify"},{"compiler":[[4603,3095]],"time":53.208984375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 -1/3 (cbrt.f64 (/.f64 (*.f64 y y) x))) (cbrt.f64 (/.f64 y (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))","fresh",16.646816259768443],["(fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))","fresh",18.481502587915983],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) 3))","fresh",0.2891388672213042],["(-.f64 (-.f64 1 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 x 1/9)) 2)) (cbrt.f64 (/.f64 1/9 x)))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3197250976844202],["(-.f64 (-.f64 1 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3633576172213042],["(-.f64 (-.f64 1 (fma.f64 (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) -1)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3206825683790941],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 1/3 (/.f64 (sqrt.f64 x) y)))","fresh",0.213222509768442],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","next",0.201503759768442]],"compiler":[[21,15],[29,24],[19,16],[24,20],[17,13],[25,21],[16,13],[22,18],[21,15],[29,24],[19,16],[24,20],[17,13],[25,21],[16,13],[22,18]],"count":[[224,8]],"kept":[{"done":[0,0],"fresh":[8,6],"new":[215,2],"picked":[1,0]}],"min-error":[0],"time":70.76513671875,"type":"prune"},{"compiler":[[80,61]],"locations":[["(/.f64 1 (*.f64 x 9))",0.27734375,false],["(/.f64 x 1/9)",0.33203125,true],["(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))",0.3359375,true],["(/.f64 1/9 x)",0.3828125,true]],"time":20.451904296875,"type":"localize"},{"count":[[3,24]],"series":[["(/.f64 x 1/9)","x","-inf",0.27197265625],["(/.f64 x 1/9)","x","inf",0.300048828125],["(/.f64 x 1/9)","x","0",0.248779296875],["(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","y","-inf",0.3359375],["(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","y","inf",0.6630859375],["(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","y","0",2.286865234375],["(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","x","-inf",26.930908203125],["(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","x","inf",1.156005859375],["(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","x","0",0.85009765625],["(/.f64 1/9 x)","x","-inf",0.14111328125],["(/.f64 1/9 x)","x","inf",0.156005859375],["(/.f64 1/9 x)","x","0",0.18603515625]],"time":33.68701171875,"type":"series"},{"count":[[3,142]],"egraph":[[2,2948,17,0.027818792000000002],[1,234,26,0.004340958000000001],[0,11,27,0.000314792]],"inputs":[["(/.f64 1/9 x)","(*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","(/.f64 x 1/9)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (*.f64 1/81 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 x -2))) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/9 (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 x)) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 x -2))) 1) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x)))) 2) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1/9 x) 5/6) (pow.f64 (/.f64 1/9 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 9) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) 3) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) -2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) -3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/81 (pow.f64 x -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 1/9 x))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 9)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x 9) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 1/9 x))) 2)) (cbrt.f64 (log.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 1/9 x)))) (sqrt.f64 (log.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/81 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/9 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/9 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x 9)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 1/9 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/3 (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 1/9 x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 1/9 x)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 1/9 x))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x 9)) 1) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 (pow.f64 (/.f64 1/9 x) -1/6) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (/.f64 1/9 x) -1/6) (*.f64 (cbrt.f64 (/.f64 1/9 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 1/9) (*.f64 (/.f64 (pow.f64 (/.f64 1/9 x) -1/6) y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) (pow.f64 (/.f64 1/9 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y)) (neg.f64 (pow.f64 (/.f64 1/9 x) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/9) y) (*.f64 (cbrt.f64 x) (pow.f64 (/.f64 1/9 x) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/9) 1) (*.f64 (cbrt.f64 x) (/.f64 (pow.f64 (/.f64 1/9 x) -1/6) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/9) (neg.f64 y)) (*.f64 (cbrt.f64 x) (neg.f64 (pow.f64 (/.f64 1/9 x) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 1/9)) (*.f64 (pow.f64 (/.f64 1/9 x) -1/6) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (cbrt.f64 1/9)) (*.f64 (neg.f64 (pow.f64 (/.f64 1/9 x) -1/6)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) 1) (pow.f64 (/.f64 1/9 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) (cbrt.f64 (cbrt.f64 (*.f64 x 9)))) (pow.f64 (*.f64 x 9) 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) (pow.f64 (*.f64 x 9) 1/12)) (pow.f64 (*.f64 x 9) 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/9) (*.f64 y (pow.f64 (/.f64 1/9 x) 1/6))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (cbrt.f64 (/.f64 1/9 x))) (neg.f64 (pow.f64 (/.f64 1/9 x) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (neg.f64 y)) (neg.f64 (pow.f64 (/.f64 1/9 x) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (pow.f64 (/.f64 1/9 x) 1/6)) (cbrt.f64 1/9)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 1/9 x) -1/6) (*.f64 (cbrt.f64 (/.f64 1/9 x)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))) 2)) (cbrt.f64 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))))) (sqrt.f64 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 y (/.f64 1/3 (sqrt.f64 x)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 9)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) 9))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x 9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 9) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) 3) (*.f64 (sqrt.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 9)) (pow.f64 (cbrt.f64 (*.f64 x 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x 9)) 2) (cbrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1/9 x) -1/4) (pow.f64 (*.f64 x 9) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) -9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 9 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -9 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 9) 3/4) (pow.f64 (/.f64 1/9 x) -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 9) 5/6) (pow.f64 (/.f64 1/9 x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 9) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) -1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 3/2) 1/27) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 9)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) -1/4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 (sqrt.f64 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1/9 x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x 9))) 2)) (cbrt.f64 (log.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x 9)))) (sqrt.f64 (log.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 1/9 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/9 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x 9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/9 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 1/9 x) -2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x 9))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x 9))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 1/9 x)) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x 9)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x 9)) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) 3)) 1) 2))))))"]],"rules":[["egg-rr",52],["egg-rr",42],["egg-rr",48]],"stop":[["node limit",1]],"time":53.887939453125,"type":"rewrite"},{"count":[[166,144]],"egraph":[[6,106,276,0.0010392910000000001],[5,100,276,0.0008471240000000001],[4,94,276,0.0006422070000000001],[3,70,276,0.00045299900000000004],[2,39,276,0.000286041],[1,24,276,0.00015562399999999999],[0,15,276,7.2666e-5]],"inputs":[["(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)","(*.f64 9 x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 y (cbrt.f64 3)) (cbrt.f64 1/9)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) (/.f64 y (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (cbrt.f64 1/9) y) (/.f64 (sqrt.f64 (/.f64 1 x)) (cbrt.f64 3)))","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)","(*.f64 9 x)","(*.f64 x 9)"]],"stop":[["saturated",1]],"time":16.744140625,"type":"simplify"},{"compiler":[[4092,3305]],"time":53.46484375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 -1/3 (cbrt.f64 (/.f64 (*.f64 y y) x))) (cbrt.f64 (/.f64 y (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))","fresh",16.646816259768443],["(fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))","fresh",18.481502587915983],["(-.f64 (-.f64 1 (fma.f64 (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) -1)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3206825683790941],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","next",0.205410009768442],["(-.f64 (-.f64 1 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3633576172213042],["(-.f64 (-.f64 1 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 x 1/9)) 2)) (cbrt.f64 (/.f64 1/9 x)))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3197250976844202],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 1/3 (/.f64 (sqrt.f64 x) y)))","fresh",0.213222509768442]],"compiler":[[21,15],[29,24],[25,21],[24,20],[17,13],[24,20],[16,13],[21,15],[29,24],[25,21],[24,20],[17,13],[24,20],[16,13]],"count":[[184,7]],"kept":[{"done":[0,0],"fresh":[7,6],"new":[176,1],"picked":[1,0]}],"min-error":[0],"time":56.446044921875,"type":"prune"},{"compiler":[[89,70]],"locations":[["(/.f64 1 (*.f64 x 9))",0.27734375,false],["(pow.f64 (*.f64 x 9) -1)",0.27734375,true],["(/.f64 x 1/9)",0.33203125,false],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))",0.3359375,true]],"time":23.72607421875,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (*.f64 x 9) -1)","x","-inf",0.29296875],["(pow.f64 (*.f64 x 9) -1)","x","inf",0.260009765625],["(pow.f64 (*.f64 x 9) -1)","x","0",0.315185546875],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","y","-inf",0.1650390625],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","y","inf",0.18212890625],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","y","0",0.166015625],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","x","-inf",0.31787109375],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","x","inf",0.277099609375],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","x","0",0.35302734375]],"time":2.452880859375,"type":"series"},{"count":[[2,68]],"egraph":[[2,3322,13,0.028764625999999998],[1,300,22,0.005126751],[0,14,29,0.000452917]],"inputs":[["(*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9)))))","(pow.f64 (*.f64 x 9) -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (sqrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (sqrt.f64 (/.f64 1/9 x)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (sqrt.f64 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (sqrt.f64 (/.f64 1/9 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (sqrt.f64 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 (pow.f64 (*.f64 x 9) 1/6) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (*.f64 x 9) 1/6) (*.f64 (cbrt.f64 (/.f64 1/9 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) (pow.f64 (*.f64 x 9) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y)) (neg.f64 (pow.f64 (*.f64 x 9) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) 1) (pow.f64 (*.f64 x 9) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) (cbrt.f64 (cbrt.f64 (*.f64 x 9)))) (pow.f64 (*.f64 x 9) 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) y) (pow.f64 (*.f64 x 9) 1/12)) (pow.f64 (*.f64 x 9) 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (cbrt.f64 (/.f64 1/9 x))) (neg.f64 (pow.f64 (*.f64 x 9) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (neg.f64 y)) (neg.f64 (pow.f64 (*.f64 x 9) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 x 9) 1/6) (*.f64 (cbrt.f64 (/.f64 1/9 x)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (sqrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/9 x))))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (pow.f64 (cbrt.f64 (/.f64 1/9 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/9 x)) 2) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/9 x)) (sqrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 x)) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x 9)) -2) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 1/9 x)) 2) 1) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x)))) 2) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1/9 x) 5/6) (pow.f64 (/.f64 1/9 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/9 x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x 9) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/9 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 1/9 x)) (*.f64 (sqrt.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/9 (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/9 (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 x 9)) -2) (cbrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x -2) 1/81))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/9 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/9 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 1/9 x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 x 9))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 1/9 x))) 2))))))"]],"rules":[["egg-rr",38],["egg-rr",30]],"stop":[["node limit",1]],"time":49.18994140625,"type":"rewrite"},{"count":[[92,70]],"egraph":[[6,104,276,0.001008375],[5,98,276,0.0008164169999999999],[4,92,276,0.000621292],[3,68,276,0.000433292],[2,37,276,0.000270209],[1,22,276,0.000151084],[0,14,276,7.2292e-5]],"inputs":[["(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 3) y)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 (/.f64 (cbrt.f64 1/9) (cbrt.f64 3)) y) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (/.f64 (cbrt.f64 1/9) (cbrt.f64 3))) (sqrt.f64 (/.f64 1 x)))","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)"]],"stop":[["saturated",1]],"time":15.908203125,"type":"simplify"},{"compiler":[[3744,3080]],"time":48.15087890625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 -1/3 (cbrt.f64 (/.f64 (*.f64 y y) x))) (cbrt.f64 (/.f64 y (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))","fresh",16.646816259768443],["(fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))","fresh",18.481502587915983],["(-.f64 (-.f64 1 (fma.f64 (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) -1)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3206825683790941],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","done",0.205410009768442],["(-.f64 (-.f64 1 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3633576172213042],["(-.f64 (-.f64 1 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 x 1/9)) 2)) (cbrt.f64 (/.f64 1/9 x)))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.3197250976844202],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 1/3 (/.f64 (sqrt.f64 x) y)))","fresh",0.213222509768442]],"compiler":[[21,15],[29,24],[25,21],[24,20],[17,13],[24,20],[16,13]],"count":[[161,7]],"kept":[{"done":[0,0],"fresh":[6,6],"new":[154,0],"picked":[1,1]}],"min-error":[0],"time":43.052001953125,"type":"prune"},{"accuracy":[0.18359375],"baseline":[0.18359375],"branch":[["x",0.18359375,1],["y",0.18359375,1],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))",0.18359375,1]],"compiler":[[3,2],[3,2],[16,13],[278,207]],"count":[[14,1]],"inputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","(fma.f64 (*.f64 -1/3 (cbrt.f64 (/.f64 (*.f64 y y) x))) (cbrt.f64 (/.f64 y (sqrt.f64 x))) (-.f64 1 (/.f64 1/9 x)))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 1/3 (/.f64 (sqrt.f64 x) y)))","(+.f64 (-.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9))))) (cbrt.f64 (*.f64 (*.f64 y y) (/.f64 1/9 x))) (/.f64 y (sqrt.f64 (/.f64 x 1/9)))))","(fma.f64 (-.f64 1 (pow.f64 (/.f64 x 1/9) -3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (*.f64 y (neg.f64 (/.f64 1/3 (sqrt.f64 x)))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (/.f64 x 1/9)))) 3))","(-.f64 (-.f64 1 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 x 1/9)) 2)) (cbrt.f64 (/.f64 1/9 x)))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (-.f64 1 (pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","(-.f64 (-.f64 1 (fma.f64 (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) (sqrt.f64 (+.f64 1 (/.f64 1/9 x))) -1)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (/.f64 1 (sqrt.f64 (sqrt.f64 (/.f64 x 1/9)))) (/.f64 y (sqrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (/.f64 x 1/9))))))","(+.f64 1 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (/.f64 -1/9 x)))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, D"],"oracle":[29.52616894536885],"outputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"time":21.445068359375,"times":[["x",5.697998046875],["y",5.4619140625],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))",5.410888671875]],"type":"regimes"},{"compiler":[[16,13]],"egraph":[[5,43,21,0.00024408400000000002],[4,42,21,0.000198917],[3,38,21,0.000153375],[2,32,21,0.000108584],[1,21,21,6.8834e-5],[0,13,21,2.9667e-5]],"inputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (+.f64 1 (/.f64 -1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.828857421875,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[16,13]],"remove-preprocessing":[[]],"time":9.89697265625,"type":"end"}]
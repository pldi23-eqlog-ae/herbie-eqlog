[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.018798828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.4228515625,82],["body",1024,"valid",0.5078125,7],["body",512,"valid",0.67529296875,13],["body",2048,"valid",1.134033203125,12],["body",256,"valid",248.135009765625,8224]],"time":261.7001953125,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,2,2,1.417e-6],[9,424,14,0.0068314579999999995],[8,422,14,0.005556124999999999],[7,374,14,0.004262874999999999],[6,273,14,0.0029032499999999996],[5,185,14,0.0016555419999999999],[4,114,14,0.0009124999999999999],[3,70,14,0.0004887919999999999],[2,34,14,0.00024270799999999998],[1,14,14,0.00010595799999999999],[0,8,14,4.2625e-5]],"inputs":[["0","1"],["(*.f64 500 (-.f64 x y))","(*.f64 500 (-.f64 y x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 500 (-.f64 x y))","(*.f64 500 (-.f64 y x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":29.722900390625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,556,7,0.007739209],[10,540,7,0.006469667],[9,456,7,0.005148459],[8,383,7,0.003754084],[7,270,7,0.002561209],[6,167,7,0.001597959],[5,96,7,0.000882042],[4,67,7,0.00051475],[3,40,7,0.00031629200000000003],[2,20,7,0.00016125],[1,9,7,7.5209e-5],[0,6,7,3.2125e-5]],"inputs":[["(*.f64 500 (-.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 500 (-.f64 x y))"]],"stop":[["saturated",1]],"time":18.031982421875,"type":"simplify"},{"compiler":[[7,5]],"time":0.195068359375,"type":"eval"},{"alts":[["(*.f64 500 (-.f64 x y))","next",0.015625]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.674072265625,"type":"prune"},{"compiler":[[13,6]],"locations":[["(*.f64 500 (-.f64 x y))",0.01171875,true]],"time":2.769775390625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 500 (-.f64 x y))","y","-inf",0.255859375],["(*.f64 500 (-.f64 x y))","y","inf",0.27001953125],["(*.f64 500 (-.f64 x y))","y","0",0.2470703125],["(*.f64 500 (-.f64 x y))","x","-inf",0.2919921875],["(*.f64 500 (-.f64 x y))","x","inf",0.368896484375],["(*.f64 500 (-.f64 x y))","x","0",0.314208984375]],"time":1.822998046875,"type":"series"},{"count":[[1,17]],"egraph":[[2,1735,7,0.017256958],[1,131,7,0.002426541],[0,6,7,0.000187416]],"inputs":[["(*.f64 500 (-.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 500) (*.f64 (neg.f64 y) 500))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 500 x) (*.f64 500 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 500 (-.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) (pow.f64 y 3)) 500) (fma.f64 x x (*.f64 y (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 500) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 500 (-.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 x x (*.f64 y (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 500 (-.f64 (*.f64 x x) (*.f64 y y))) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 500 (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 500 (-.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 500 (-.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 500 (-.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (-.f64 x y) 2) 250000))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 500) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 500 (-.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 500 (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 500 (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 500 (-.f64 x y))))))))"]],"rules":[["egg-rr",17]],"stop":[["node limit",1]],"time":34.276123046875,"type":"rewrite"},{"count":[[41,21]],"egraph":[[2,15,168,0.000168501],[1,12,168,0.000112917],[0,8,168,5.3709e-5]],"inputs":[["(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(fma.f64 -500 y (*.f64 500 x))"]],"stop":[["saturated",1]],"time":11.68701171875,"type":"simplify"},{"compiler":[[184,107]],"time":2.536865234375,"type":"eval"},{"alts":[["(fma.f64 -500 y (*.f64 500 x))","next",0.01171875],["(*.f64 500 (-.f64 x y))","done",0.015625]],"compiler":[[8,6],[7,5],[8,6]],"count":[[22,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[21,1],"picked":[1,1]}],"min-error":[0],"time":2.965087890625,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 -500 y (*.f64 500 x))",0.015625,true]],"time":4.032958984375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 -500 y (*.f64 500 x))","x","-inf",0.248046875],["(fma.f64 -500 y (*.f64 500 x))","x","inf",0.2548828125],["(fma.f64 -500 y (*.f64 500 x))","x","0",0.2529296875],["(fma.f64 -500 y (*.f64 500 x))","y","-inf",0.31298828125],["(fma.f64 -500 y (*.f64 500 x))","y","inf",0.218994140625],["(fma.f64 -500 y (*.f64 500 x))","y","0",0.43408203125]],"time":1.797119140625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1513,8,0.015893209],[1,140,8,0.002156042],[0,7,8,0.0002315]],"inputs":[["(fma.f64 -500 y (*.f64 500 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 500 x) (*.f64 -500 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -500 y) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -500 y) 1) (*.f64 500 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 -500 y (*.f64 500 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -500 y (*.f64 500 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -500 y (*.f64 500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -500 y (*.f64 500 x))) (pow.f64 (cbrt.f64 (fma.f64 -500 y (*.f64 500 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -500 y (*.f64 500 x))) 2) (cbrt.f64 (fma.f64 -500 y (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -500 y (*.f64 500 x))) (sqrt.f64 (fma.f64 -500 y (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -500 y) 3) (pow.f64 (*.f64 500 x) 3)) (+.f64 (*.f64 (*.f64 -500 y) (*.f64 -500 y)) (-.f64 (*.f64 (*.f64 x x) 250000) (*.f64 (*.f64 -500 y) (*.f64 500 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -500 y) (*.f64 -500 y)) (*.f64 (*.f64 x x) 250000)) (-.f64 (*.f64 -500 y) (*.f64 500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -500 y (*.f64 500 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -500 y (*.f64 500 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -500 y (*.f64 500 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -500 y (*.f64 500 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -500 y (*.f64 500 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -500 y (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -500 y (*.f64 500 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -500 y (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -500 y (*.f64 500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -500 y (*.f64 500 x))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":32.880859375,"type":"rewrite"},{"count":[[45,24]],"egraph":[[2,15,168,0.00016779200000000002],[1,12,168,0.00011262500000000001],[0,8,168,5.3542e-5]],"inputs":[["(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(*.f64 -500 y)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(*.f64 500 x)","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))","(+.f64 (*.f64 500 x) (*.f64 -500 y))","(fma.f64 500 x (*.f64 -500 y))"]],"stop":[["saturated",1]],"time":11.564208984375,"type":"simplify"},{"compiler":[[252,189]],"time":4.095947265625,"type":"eval"},{"alts":[["(fma.f64 -500 y (*.f64 500 x))","done",0.01171875],["(*.f64 500 (-.f64 x y))","done",0.015625]],"compiler":[[8,6],[7,5]],"count":[[26,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[24,0],"picked":[1,1]}],"min-error":[0],"time":3.201904296875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["(*.f64 500 (-.f64 x y))",0.01171875,1],["(-.f64 x y)",0.01171875,1]],"compiler":[[3,2],[3,2],[7,5],[5,3],[13,9]],"count":[[2,1]],"inputs":[["(fma.f64 -500 y (*.f64 500 x))","(*.f64 500 (-.f64 x y))"]],"link":["."],"name":["Data.Colour.CIE:cieLABView from colour-2.3.3, B"],"oracle":[0.02734375],"outputs":[["(fma.f64 -500 y (*.f64 500 x))"]],"time":11.512939453125,"times":[["x",2.68115234375],["y",2.809814453125],["(*.f64 500 (-.f64 x y))",2.753173828125],["(-.f64 x y)",2.720947265625]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[1,8,8,2.4582999999999998e-5],[0,7,8,1.4375e-5]],"inputs":[["(fma.f64 -500 y (*.f64 500 x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 -500 y (*.f64 500 x))"]],"stop":[["done",1],["saturated",1]],"time":7.93115234375,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.882080078125,"type":"end"}]
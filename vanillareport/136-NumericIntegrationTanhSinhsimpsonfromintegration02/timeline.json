[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09170725150033832,0.11024453863501549],[11,0.7687799381092191,0.12097552325576544,0.11024453863501549],[10,0.7258531395345926,0.17951206676661968,0.09463479369878769],[9,0.6712190322577953,0.23414617404341698,0.09463479369878769],[8,0.5931703075766563,0.34341438859701157,0.06341530382633209],[7,0.49951183795928955,0.43707285821437836,0.06341530382633209],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":20.3349609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",4.697021484375,154],["body",256,"valid",241.9189453125,8256]],"time":254.22509765625,"type":"sample"},{"compiler":[[7,4]],"egraph":[[1,2,2,5.084e-6],[0,2,2,4.5e-6],[3,26,14,0.00024974999999999997],[2,25,14,0.000184583],[1,16,14,0.000116208],[0,7,14,5.325e-5]],"inputs":[["0","1"],["(*.f64 x (+.f64 y y))","(*.f64 y (+.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0"],["(*.f64 x (+.f64 y y))","(*.f64 y (+.f64 x x))","(*.f64 x (+.f64 y y))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":22.02490234375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[3,26,7,0.000226625],[2,22,7,0.00016195899999999999],[1,12,7,9.3459e-5],[0,5,7,4.0167e-5]],"inputs":[["(*.f64 x (+.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (+.f64 y y))"]],"stop":[["saturated",1]],"time":10.81298828125,"type":"simplify"},{"compiler":[[7,4]],"time":0.2001953125,"type":"eval"},{"alts":[["(*.f64 x (+.f64 y y))","next",0.25]],"compiler":[[7,4],[7,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.25],"time":0.60986328125,"type":"prune"},{"compiler":[[12,4]],"locations":[["(*.f64 x (+.f64 y y))",0.23966948402758456,true]],"time":2.64697265625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 x (+.f64 y y))","y","-inf",0.251220703125],["(*.f64 x (+.f64 y y))","y","inf",0.401123046875],["(*.f64 x (+.f64 y y))","y","0",0.61279296875],["(*.f64 x (+.f64 y y))","x","-inf",0.254150390625],["(*.f64 x (+.f64 y y))","x","inf",0.51416015625],["(*.f64 x (+.f64 y y))","x","0",0.510986328125]],"time":2.6181640625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1633,7,0.014959875000000001],[1,111,7,0.0022092089999999997],[0,5,7,0.000131292]],"inputs":[["(*.f64 x (+.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) 1) (*.f64 (*.f64 x y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (+.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 x y) 3)) (+.f64 (*.f64 (*.f64 x y) (*.f64 x y)) (-.f64 (*.f64 (*.f64 x y) (*.f64 x y)) (*.f64 (*.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x y) (*.f64 x y)) (*.f64 (*.f64 x y) (*.f64 x y))) (-.f64 (*.f64 x y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 y 3)) x) (fma.f64 y y 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 2 (pow.f64 y 3))) (fma.f64 y y 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 0) 0)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y y) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y y) (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y y) (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (*.f64 x (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (+.f64 y y) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 x y))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":31.40283203125,"type":"rewrite"},{"count":[[45,22]],"egraph":[[3,19,168,0.000218167],[2,17,168,0.00016125],[1,10,168,0.000101084],[0,6,168,4.8459e-5]],"inputs":[["(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))","(*.f64 2 (*.f64 y x))"]],"stop":[["saturated",1]],"time":12.23095703125,"type":"simplify"},{"compiler":[[214,85]],"time":2.2841796875,"type":"eval"},{"alts":[["(*.f64 2 (*.f64 y x))","next",0]],"compiler":[[7,5],[7,5]],"count":[[23,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[22,1],"picked":[1,0]}],"min-error":[0],"time":2.7529296875,"type":"prune"},{"compiler":[[13,6]],"time":2.716064453125,"type":"localize"},{"compiler":[[2,2]],"time":0.0849609375,"type":"eval"},{"alts":[["(*.f64 2 (*.f64 y x))","done",0]],"compiler":[[7,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.446044921875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(*.f64 x (+.f64 y y))",0,1],["(+.f64 y y)",0,1]],"compiler":[[3,2],[3,2],[7,4],[5,3],[12,7]],"count":[[2,1]],"inputs":[["(*.f64 2 (*.f64 y x))","(*.f64 x (+.f64 y y))"]],"link":["."],"name":["Numeric.Integration.TanhSinh:simpson  from integration-0.2.1"],"oracle":[0.25],"outputs":[["(*.f64 2 (*.f64 y x))"]],"time":9.3798828125,"times":[["x",2.160888671875],["y",2.06884765625],["(*.f64 x (+.f64 y y))",2.083984375],["(+.f64 y y)",2.56591796875]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,8,7,2.4083e-5],[0,6,7,1.3833e-5]],"inputs":[["(*.f64 2 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 y x))"]],"stop":[["done",1],["saturated",1]],"time":7.927001953125,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[7,5],[7,5],[7,5]],"remove-preprocessing":[["(sort x y)"]],"time":7.91796875,"type":"end"}]
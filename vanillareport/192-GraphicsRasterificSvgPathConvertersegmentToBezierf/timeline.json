[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":109.31103515625,"type":"analyze"},{"outcomes":[["body",1024,"valid",338.810302734375,1296],["body",512,"valid",107.4755859375,699],["body",2048,"valid",1.23583984375,2],["body",256,"valid",444.891357421875,6259]],"time":900.517822265625,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,2.25e-6],[3,102,48,0.0006612090000000001],[2,78,48,0.000436168],[1,42,48,0.000236084],[0,22,56,9.975e-5]],"inputs":[["0","1","2"],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(+.f64 (+.f64 y (sin.f64 x)) (*.f64 z (cos.f64 x)))","(+.f64 (+.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(+.f64 (+.f64 x (sin.f64 z)) (*.f64 y (cos.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(+.f64 x (+.f64 (sin.f64 y) (*.f64 z (cos.f64 y))))","(fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))","(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","(+.f64 (+.f64 y (sin.f64 x)) (*.f64 z (cos.f64 x)))","(+.f64 y (+.f64 (sin.f64 x) (*.f64 z (cos.f64 x))))","(fma.f64 z (cos.f64 x) (+.f64 y (sin.f64 x)))","(+.f64 (sin.f64 x) (fma.f64 z (cos.f64 x) y))","(+.f64 (+.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(+.f64 z (+.f64 (sin.f64 y) (*.f64 x (cos.f64 y))))","(fma.f64 x (cos.f64 y) (+.f64 (sin.f64 y) z))","(+.f64 (sin.f64 y) (fma.f64 x (cos.f64 y) z))","(+.f64 (+.f64 x (sin.f64 z)) (*.f64 y (cos.f64 z)))","(+.f64 x (+.f64 (sin.f64 z) (*.f64 y (cos.f64 z))))","(fma.f64 y (cos.f64 z) (+.f64 x (sin.f64 z)))","(+.f64 x (fma.f64 y (cos.f64 z) (sin.f64 z)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.947998046875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,29,12,0.000265333],[2,23,12,0.000189125],[1,14,12,0.00011833300000000001],[0,9,14,4.75e-5]],"inputs":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(fma.f64 z (cos.f64 y) (+.f64 x (sin.f64 y)))","(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))"]],"stop":[["saturated",1]],"time":10.356201171875,"type":"simplify"},{"compiler":[[20,10]],"time":0.342041015625,"type":"eval"},{"alts":[["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","next",0.05078125]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.05078125],"time":0.845947265625,"type":"prune"},{"compiler":[[24,7]],"locations":[["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))",0.00390625,true],["(cos.f64 y)",0.015625,true],["(sin.f64 y)",0.015625,true],["(fma.f64 z (cos.f64 y) (sin.f64 y))",0.07421875,true]],"time":6.31591796875,"type":"localize"},{"count":[[4,68]],"series":[["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","y","-inf",0.256103515625],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","y","inf",0.555908203125],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","y","0",0.200927734375],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","z","-inf",0.1650390625],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","z","inf",0.19091796875],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","z","0",0.174072265625],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","x","-inf",0.18505859375],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","x","inf",0.2470703125],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","x","0",0.432861328125],["(cos.f64 y)","y","-inf",0.135986328125],["(cos.f64 y)","y","inf",0.156982421875],["(cos.f64 y)","y","0",0.220947265625],["(sin.f64 y)","y","-inf",0.136962890625],["(sin.f64 y)","y","inf",0.156982421875],["(sin.f64 y)","y","0",0.22607421875],["(fma.f64 z (cos.f64 y) (sin.f64 y))","y","-inf",0.35302734375],["(fma.f64 z (cos.f64 y) (sin.f64 y))","y","inf",0.343994140625],["(fma.f64 z (cos.f64 y) (sin.f64 y))","y","0",0.414794921875],["(fma.f64 z (cos.f64 y) (sin.f64 y))","z","-inf",0.338134765625],["(fma.f64 z (cos.f64 y) (sin.f64 y))","z","inf",0.31982421875],["(fma.f64 z (cos.f64 y) (sin.f64 y))","z","0",0.68310546875]],"time":6.135009765625,"type":"series"},{"count":[[4,86]],"egraph":[[2,2230,27,0.020502208],[1,167,27,0.0029293749999999997],[0,8,27,0.000192375]],"inputs":[["(fma.f64 z (cos.f64 y) (sin.f64 y))","(sin.f64 y)","(cos.f64 y)","(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cos.f64 y)) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (cos.f64 y)) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (cos.f64 y)) 3) (pow.f64 (sin.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (cos.f64 y)) (*.f64 z (cos.f64 y))) (-.f64 (pow.f64 (sin.f64 y) 2) (*.f64 (*.f64 z (cos.f64 y)) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 z (cos.f64 y)) (*.f64 z (cos.f64 y))) (pow.f64 (sin.f64 y) 2)) (-.f64 (*.f64 z (cos.f64 y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))) (/.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2) (-.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)) 2) (cbrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)) (sqrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3)) (/.f64 1 (fma.f64 x x (*.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) (-.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2)) (/.f64 1 (-.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) (-.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x))) (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y))) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3)) (fma.f64 x x (*.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) (-.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3)) (+.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2) (-.f64 (*.f64 x x) (*.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2)) (-.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3))) (neg.f64 (fma.f64 x x (*.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) (-.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2))) (neg.f64 (-.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2) (*.f64 x x)) (-.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (fma.f64 z (cos.f64 y) (sin.f64 y)))))))"]],"rules":[["egg-rr",33],["egg-rr",16],["egg-rr",16],["egg-rr",21]],"stop":[["node limit",1]],"time":46.77392578125,"type":"rewrite"},{"count":[[154,121]],"egraph":[[8,7754,683,0.055797915999999996],[7,6899,683,0.044782416],[6,6416,683,0.033199333],[5,5627,683,0.023608999999999998],[4,3440,683,0.014584166999999999],[3,1077,683,0.007152125],[2,350,693,0.002538917],[1,142,697,0.000948417],[0,57,701,0.00029275]],"inputs":[["(sin.f64 y)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (*.f64 z (cos.f64 y)) (sin.f64 y))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","x","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 z x)","(+.f64 y (+.f64 z x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x)))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x))))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["(sin.f64 y)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(fma.f64 -1/2 (*.f64 z (*.f64 y y)) (+.f64 y z))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (+.f64 y z))","(+.f64 y (*.f64 (fma.f64 y (*.f64 y -1/2) 1) z))","(fma.f64 (fma.f64 y (*.f64 y -1/2) 1) z y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 z (*.f64 y y)) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 y (*.f64 y z)) (+.f64 y z)))","(+.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 z (*.f64 y (*.f64 y -1/2)) y)))","(+.f64 y (fma.f64 (*.f64 y y) (fma.f64 y -1/6 (*.f64 z -1/2)) z))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(fma.f64 y (*.f64 y -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 y 4) (*.f64 y (*.f64 y -1/2))))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 1/24 (pow.f64 y 4) (*.f64 y (*.f64 y -1/2))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) (fma.f64 -1/720 (pow.f64 y 6) 1)))","(fma.f64 (*.f64 y y) (fma.f64 (*.f64 y y) 1/24 -1/2) (fma.f64 -1/720 (pow.f64 y 6) 1))","(+.f64 (*.f64 z (cos.f64 y)) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","x","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","x","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 z (cos.f64 y)) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 z x)","(+.f64 y (+.f64 z x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x)))","(fma.f64 -1/2 (*.f64 z (*.f64 y y)) (+.f64 y (+.f64 z x)))","(+.f64 (fma.f64 -1/2 (*.f64 y (*.f64 y z)) (+.f64 y z)) x)","(+.f64 y (fma.f64 z (*.f64 y (*.f64 y -1/2)) (+.f64 z x)))","(+.f64 y (fma.f64 (fma.f64 y (*.f64 y -1/2) 1) z x))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y (+.f64 z x))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 z (*.f64 y y)) (+.f64 y (+.f64 z x))))","(+.f64 (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 y (*.f64 y z)) (+.f64 y z))) x)","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 y (fma.f64 z (*.f64 y (*.f64 y -1/2)) (+.f64 z x))))","(+.f64 z (fma.f64 (*.f64 y y) (fma.f64 y -1/6 (*.f64 z -1/2)) (+.f64 y x)))","(+.f64 y (fma.f64 (*.f64 y y) (fma.f64 y -1/6 (*.f64 z -1/2)) (+.f64 z x)))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))","(+.f64 (*.f64 (cos.f64 y) z) (+.f64 (sin.f64 y) x))","(+.f64 (fma.f64 (cos.f64 y) z (sin.f64 y)) x)","(+.f64 (sin.f64 y) (fma.f64 (cos.f64 y) z x))"]],"stop":[["node limit",1]],"time":80.455078125,"type":"simplify"},{"compiler":[[1645,585]],"time":16.2548828125,"type":"eval"},{"alts":[["(+.f64 x (fma.f64 z (-.f64 (+.f64 1 (cos.f64 y)) 1) (sin.f64 y)))","fresh",0.15625635976818988],["(+.f64 x (fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y)))","fresh",0.15576600476004981],["(+.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y)))","fresh",0.15499882814753613],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","done",0.05078125],["(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y)))","next",0.14718632814753613],["(+.f64 x (*.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2)))","fresh",0.46204770513728255]],"compiler":[[15,11],[13,9],[14,10],[11,7],[18,11],[22,11],[15,11],[13,9],[14,10],[18,11],[22,11]],"count":[[122,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[121,5],"picked":[1,1]}],"min-error":[0.01953125],"time":29.567138671875,"type":"prune"},{"compiler":[[56,21]],"locations":[["(cbrt.f64 (cos.f64 y))",0.0546875,true],["(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))",0.07421875,true],["(*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))",0.12890625,true],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)",0.28353500976844204,true]],"time":12.055908203125,"type":"localize"},{"count":[[4,60]],"series":[["(cbrt.f64 (cos.f64 y))","y","-inf",0.1611328125],["(cbrt.f64 (cos.f64 y))","y","inf",0.161865234375],["(cbrt.f64 (cos.f64 y))","y","0",0.2060546875],["(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))","y","-inf",0.236083984375],["(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))","y","inf",0.248046875],["(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))","y","0",0.164794921875],["(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))","z","-inf",0.217041015625],["(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))","z","inf",0.199951171875],["(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))","z","0",0.2490234375],["(*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))","y","-inf",0.239013671875],["(*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))","y","inf",0.281005859375],["(*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))","y","0",0.18701171875],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","y","-inf",1.14697265625],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","y","inf",1.326904296875],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","y","0",0.824951171875]],"time":6.0400390625,"type":"series"},{"count":[[4,69]],"egraph":[[2,2001,25,0.018815125000000002],[1,201,25,0.002942459],[0,10,25,0.000272042]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","(*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))","(fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y))","(cbrt.f64 (cos.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2)) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (cos.f64 y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 y) z) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 y) z) 3) (pow.f64 (sin.f64 y) 3)) (+.f64 (*.f64 (*.f64 (cos.f64 y) z) (*.f64 (cos.f64 y) z)) (-.f64 (pow.f64 (sin.f64 y) 2) (*.f64 (*.f64 (cos.f64 y) z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (cos.f64 y) z) (*.f64 (cos.f64 y) z)) (pow.f64 (sin.f64 y) 2)) (-.f64 (*.f64 (cos.f64 y) z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 y)) 1/3) (pow.f64 (sqrt.f64 (cos.f64 y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (cos.f64 y))))))))"]],"rules":[["egg-rr",20],["egg-rr",21],["egg-rr",12],["egg-rr",16]],"stop":[["node limit",1]],"time":45.466064453125,"type":"rewrite"},{"count":[[129,99]],"egraph":[[12,7514,467,0.07990841700000001],[11,6809,467,0.06857100000000001],[10,6178,467,0.057004250000000006],[9,5693,467,0.04624191700000001],[8,3752,467,0.036450458000000005],[7,3503,474,0.027581791],[6,3285,474,0.021421833],[5,3121,474,0.015952666],[4,1947,474,0.010611041],[3,1183,474,0.006005999],[2,357,474,0.0026471660000000003],[1,143,482,0.000958583],[0,58,492,0.000282333]],"inputs":[["1","(+.f64 1 (*.f64 -1/3 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 1 (+.f64 (*.f64 -1/1701 (pow.f64 y 8)) (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6)))))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(sin.f64 y)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/3 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/3 (*.f64 y y)))","(fma.f64 -1/3 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 1 (fma.f64 -1/3 (*.f64 y y) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 (fma.f64 -1/3 (*.f64 y y) 1) (*.f64 -1/405 (pow.f64 y 6)))","(fma.f64 -1/3 (*.f64 y y) (fma.f64 -1/405 (pow.f64 y 6) 1))","(+.f64 1 (+.f64 (*.f64 -1/1701 (pow.f64 y 8)) (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6)))))","(+.f64 1 (fma.f64 -1/1701 (pow.f64 y 8) (fma.f64 -1/3 (*.f64 y y) (*.f64 -1/405 (pow.f64 y 6)))))","(fma.f64 -1/1701 (pow.f64 y 8) (fma.f64 -1/3 (*.f64 y y) (fma.f64 -1/405 (pow.f64 y 6) 1)))","(fma.f64 -1/3 (*.f64 y y) (fma.f64 -1/405 (pow.f64 y 6) (fma.f64 -1/1701 (pow.f64 y 8) 1)))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/2))","(fma.f64 (*.f64 y y) -1/2 1)","(fma.f64 y (*.f64 y -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 (*.f64 y y) -1/2 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 (*.f64 y y) -1/2 (*.f64 1/24 (pow.f64 y 4))) (fma.f64 (pow.f64 y 6) -1/720 1))","(fma.f64 (pow.f64 y 6) -1/720 (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 (pow.f64 y 6) -1/720 (fma.f64 1/24 (pow.f64 y 4) 1)))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(sin.f64 y)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y z))","(+.f64 z (fma.f64 (*.f64 (*.f64 y y) -1/2) z y))","(+.f64 y (*.f64 (fma.f64 y (*.f64 y -1/2) 1) z))","(fma.f64 y (fma.f64 y (*.f64 -1/2 z) 1) z)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 z (fma.f64 (*.f64 (*.f64 y y) -1/2) z y)))","(fma.f64 (*.f64 y y) (*.f64 -1/2 z) (fma.f64 -1/6 (pow.f64 y 3) (+.f64 y z)))","(+.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 (*.f64 y y) (*.f64 -1/2 z) y)))","(fma.f64 y (fma.f64 y (fma.f64 y -1/6 (*.f64 -1/2 z)) 1) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/6))","(fma.f64 (*.f64 y y) -1/6 1)","(fma.f64 y (*.f64 y -1/6) 1)","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(fma.f64 -1/72 (pow.f64 y 4) (+.f64 1 (*.f64 (*.f64 y y) -1/6)))","(fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (*.f64 y y) -1/6 1))","(fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) -1/72 1))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(fma.f64 -23/6480 (pow.f64 y 6) (fma.f64 -1/72 (pow.f64 y 4) (+.f64 1 (*.f64 (*.f64 y y) -1/6))))","(fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (*.f64 y y) -1/6 1)))","(fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 y (*.f64 y -1/6) 1)))","(fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 (*.f64 y y) -1/6 1)))","(fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) -1/72 1)))","(fma.f64 y (fma.f64 -23/6480 (pow.f64 y 5) (*.f64 y -1/6)) (fma.f64 (pow.f64 y 4) -1/72 1))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))"]],"stop":[["node limit",1]],"time":104.530029296875,"type":"simplify"},{"compiler":[[2138,947]],"time":21.56884765625,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)))))","fresh",0.46204770513728255],["(+.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y)))","next",0.15499882814753613],["(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))) (sin.f64 y)))","fresh",0.17092388907351594],["(+.f64 x (fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y)))","fresh",0.15576600476004981],["(+.f64 x (fma.f64 z (-.f64 (+.f64 1 (cos.f64 y)) 1) (sin.f64 y)))","fresh",0.15625635976818988],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","done",0.05078125],["(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y)))","done",0.14718632814753613]],"compiler":[[22,11],[14,10],[26,16],[13,9],[15,11],[11,7],[18,11],[22,11],[14,10],[26,16],[13,9],[15,11]],"count":[[132,7]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[126,4],"picked":[1,1]}],"min-error":[0.01171875],"time":36.7490234375,"type":"prune"},{"compiler":[[39,16]],"locations":[["(cos.f64 y)",0.015625,false],["(cbrt.f64 (cos.f64 y))",0.0546875,false],["(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))",0.07421875,true],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)",0.34183505861065216,true]],"time":9.64306640625,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))","y","-inf",0.3798828125],["(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))","y","inf",0.369140625],["(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))","y","0",0.193115234375],["(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))","z","-inf",0.243896484375],["(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))","z","inf",0.251953125],["(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))","z","0",1.66796875],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","-inf",0.470947265625],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","inf",0.674072265625],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","0",0.2939453125]],"time":4.695068359375,"type":"series"},{"count":[[2,41]],"egraph":[[2,1891,12,0.018349958],[1,187,12,0.002864875],[0,9,12,0.000257542]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","(fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (*.f64 (pow.f64 (cos.f64 y) 1/6) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) 3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 y) 1/6) 3) (pow.f64 (pow.f64 (cos.f64 y) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 y) z) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 y) z) 3) (pow.f64 (sin.f64 y) 3)) (+.f64 (*.f64 (*.f64 (cos.f64 y) z) (*.f64 (cos.f64 y) z)) (-.f64 (pow.f64 (sin.f64 y) 2) (*.f64 (*.f64 (cos.f64 y) z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (cos.f64 y) z) (*.f64 (cos.f64 y) z)) (pow.f64 (sin.f64 y) 2)) (-.f64 (*.f64 (cos.f64 y) z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))))"]],"rules":[["egg-rr",21],["egg-rr",20]],"stop":[["node limit",1]],"time":38.02197265625,"type":"rewrite"},{"count":[[77,62]],"egraph":[[9,7277,273,0.060732916],[8,6563,273,0.047084457999999996],[7,5877,273,0.035878542],[6,5425,273,0.026298583],[5,4650,273,0.018329667],[4,2611,273,0.011096542000000001],[3,682,273,0.005149875],[2,236,278,0.001666167],[1,102,282,0.000655958],[0,41,365,0.000227083]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(sin.f64 y)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 (*.f64 -1/2 (*.f64 y y)) 1)","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) 1)","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) 1))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) (fma.f64 -1/720 (pow.f64 y 6) 1)))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(sin.f64 y)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(*.f64 1 (*.f64 (cos.f64 y) z))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y)))","(*.f64 1 (*.f64 (cos.f64 y) z))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 z (cos.f64 y))) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y z))","(+.f64 z (fma.f64 -1/2 (*.f64 y (*.f64 y z)) y))","(fma.f64 z (fma.f64 -1/2 (*.f64 y y) 1) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 z (fma.f64 -1/2 (*.f64 y (*.f64 y z)) y)))","(+.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 y (*.f64 y z)) y)))","(+.f64 y (fma.f64 (*.f64 y y) (fma.f64 y -1/6 (*.f64 -1/2 z)) z))","(fma.f64 (*.f64 y y) (fma.f64 -1/2 z (*.f64 y -1/6)) (+.f64 y z))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (sin.f64 y) (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 y) z)) (sin.f64 y))","(fma.f64 1 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))"]],"stop":[["node limit",1]],"time":78.841064453125,"type":"simplify"},{"compiler":[[1627,776]],"time":18.409912109375,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)))))","fresh",0.46204770513728255],["(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))) (sin.f64 y)))","fresh",0.17092388907351594],["(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (sin.f64 y)))","fresh",0.16509633791597814],["(+.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y)))","done",0.15499882814753613],["(+.f64 x (fma.f64 z (-.f64 (+.f64 1 (cos.f64 y)) 1) (sin.f64 y)))","fresh",0.15625635976818988],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","done",0.05078125],["(+.f64 x (fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y)))","next",0.15576600476004981]],"compiler":[[22,11],[26,16],[26,16],[14,10],[15,11],[11,7],[13,9],[22,11],[26,16],[26,16],[15,11],[13,9]],"count":[[119,7]],"kept":[{"done":[2,1],"fresh":[4,1],"new":[112,4],"picked":[1,1]}],"min-error":[0.0078125],"time":32.242919921875,"type":"prune"},{"compiler":[[35,9]],"locations":[["(cos.f64 y)",0.015625,false],["(exp.f64 (cos.f64 y))",0.0625,true],["(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))",0.07421875,true],["(log.f64 (exp.f64 (cos.f64 y)))",0.3162176886697881,true]],"time":9.22412109375,"type":"localize"},{"count":[[3,40]],"series":[["(exp.f64 (cos.f64 y))","y","-inf",0.1669921875],["(exp.f64 (cos.f64 y))","y","inf",0.2021484375],["(exp.f64 (cos.f64 y))","y","0",0.30517578125],["(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))","y","-inf",0.181884765625],["(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))","y","inf",0.157958984375],["(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))","y","0",0.179931640625],["(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))","z","-inf",0.15380859375],["(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))","z","inf",0.155029296875],["(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))","z","0",0.182861328125],["(log.f64 (exp.f64 (cos.f64 y)))","y","-inf",0.158203125],["(log.f64 (exp.f64 (cos.f64 y)))","y","inf",0.1640625],["(log.f64 (exp.f64 (cos.f64 y)))","y","0",0.2548828125]],"time":2.39892578125,"type":"series"},{"count":[[3,59]],"egraph":[[2,1565,17,0.016175083],[1,140,17,0.002103124],[0,8,17,0.000178166]],"inputs":[["(log.f64 (exp.f64 (cos.f64 y)))","(fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y))","(exp.f64 (cos.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 y) z) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (cos.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 y) z) 3) (pow.f64 (sin.f64 y) 3)) (+.f64 (*.f64 (*.f64 (cos.f64 y) z) (*.f64 (cos.f64 y) z)) (-.f64 (pow.f64 (sin.f64 y) 2) (*.f64 (*.f64 (cos.f64 y) z) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (cos.f64 y) z) (*.f64 (cos.f64 y) z)) (pow.f64 (sin.f64 y) 2)) (-.f64 (*.f64 (cos.f64 y) z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2) (cbrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (cos.f64 y))) (sqrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (cos.f64 y))))))))"]],"rules":[["egg-rr",19],["egg-rr",21],["egg-rr",19]],"stop":[["node limit",1]],"time":38.56689453125,"type":"rewrite"},{"count":[[99,83]],"egraph":[[18,7837,330,0.126077626],[17,7279,340,0.11406150100000001],[16,6795,340,0.10246112600000001],[15,6353,340,0.09170420900000001],[14,5948,340,0.08155616700000001],[13,5202,340,0.07138095900000001],[12,4649,340,0.06172762600000001],[11,4191,340,0.053525917000000006],[10,3822,340,0.046110834],[9,3512,340,0.039158543000000004],[8,3288,340,0.032484168],[7,3122,340,0.026067793],[6,2973,340,0.020462835],[5,2770,340,0.015354585],[4,1835,340,0.009968251000000001],[3,1114,340,0.005582126],[2,326,342,0.00243746],[1,122,354,0.000832126],[0,48,358,0.000242417]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(sin.f64 y)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(exp.f64 1)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(fma.f64 y (*.f64 -1/2 y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 (pow.f64 y 4) (fma.f64 (*.f64 y y) -1/720 1/24) (fma.f64 -1/2 (*.f64 y y) 1))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(sin.f64 y)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","z","(+.f64 y z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y z))","(fma.f64 (*.f64 y y) (*.f64 -1/2 z) (+.f64 y z))","(+.f64 y (fma.f64 (*.f64 y y) (*.f64 -1/2 z) z))","(+.f64 y (*.f64 (fma.f64 y (*.f64 -1/2 y) 1) z))","(fma.f64 y (fma.f64 z (*.f64 -1/2 y) 1) z)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 y z)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 (*.f64 y y) (*.f64 -1/2 z) (+.f64 y z)))","(+.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 (*.f64 y y) (*.f64 -1/2 z) y)))","(fma.f64 y (fma.f64 y (fma.f64 -1/2 z (*.f64 y -1/6)) 1) z)","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(+.f64 (*.f64 (cos.f64 y) z) (sin.f64 y))","(fma.f64 (cos.f64 y) z (sin.f64 y))","(exp.f64 1)","(E.f64)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (E.f64))","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64))","(*.f64 (fma.f64 y (*.f64 -1/2 y) 1) (E.f64))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (E.f64)))","(+.f64 (E.f64) (*.f64 (E.f64) (+.f64 (*.f64 -1/2 (*.f64 y y)) (*.f64 (pow.f64 y 4) 1/6))))","(fma.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6)) (E.f64))","(*.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (fma.f64 (pow.f64 y 4) 1/6 1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (fma.f64 -31/720 (*.f64 (pow.f64 y 6) (E.f64)) (E.f64))))","(+.f64 (*.f64 (E.f64) (+.f64 (*.f64 (pow.f64 y 4) 1/6) (*.f64 (pow.f64 y 6) -31/720))) (*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64)))","(fma.f64 (E.f64) (fma.f64 (pow.f64 y 4) 1/6 (*.f64 (pow.f64 y 6) -31/720)) (*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64)))","(*.f64 (E.f64) (+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (fma.f64 (pow.f64 y 4) 1/6 (*.f64 (pow.f64 y 6) -31/720))))","(*.f64 (E.f64) (+.f64 (fma.f64 y (*.f64 -1/2 y) 1) (fma.f64 (pow.f64 y 4) 1/6 (*.f64 (pow.f64 y 6) -31/720))))","(*.f64 (E.f64) (fma.f64 y (fma.f64 -31/720 (pow.f64 y 5) (*.f64 -1/2 y)) (fma.f64 (pow.f64 y 4) 1/6 1)))"]],"stop":[["node limit",1]],"time":150.8232421875,"type":"simplify"},{"compiler":[[1468,678]],"time":16.679931640625,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)))))","fresh",0.46204770513728255],["(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))) (sin.f64 y)))","fresh",0.17092388907351594],["(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (sin.f64 y)))","fresh",0.16509633791597814],["(+.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y)))","done",0.15499882814753613],["(+.f64 x (fma.f64 z (-.f64 (+.f64 1 (cos.f64 y)) 1) (sin.f64 y)))","fresh",0.15625635976818988],["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","done",0.05078125],["(+.f64 x (fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y)))","done",0.15576600476004981]],"compiler":[[22,11],[26,16],[26,16],[14,10],[15,11],[11,7],[13,9]],"count":[[113,7]],"kept":[{"done":[2,2],"fresh":[4,4],"new":[106,0],"picked":[1,1]}],"min-error":[0.0078125],"time":27.31884765625,"type":"prune"},{"accuracy":[0.05078125],"baseline":[0.05078125],"branch":[["x",0.05078125,1],["y",0.05078125,1],["z",0.05078125,1],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))",0.05078125,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[216,78]],"count":[[15,1]],"inputs":[["(+.f64 x (*.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)))))","(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) (sin.f64 y)))","(+.f64 x (fma.f64 z (-.f64 (+.f64 1 (cos.f64 y)) 1) (sin.f64 y)))","(+.f64 x (fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y)))","(+.f64 x (*.f64 (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2) (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y)))))","(+.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y)))","(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))) (sin.f64 y)))","(+.f64 x (fma.f64 z (-.f64 (+.f64 1 (cos.f64 y)) 1) (sin.f64 y)))","(+.f64 x (fma.f64 z (-.f64 (+.f64 1 (cos.f64 y)) 1) (sin.f64 y)))","(+.f64 x (fma.f64 z (log.f64 (exp.f64 (cos.f64 y))) (sin.f64 y)))","(+.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3) (sin.f64 y)))","(+.f64 x (fma.f64 z (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (sin.f64 y)))","(+.f64 x (*.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (cos.f64 y) (sin.f64 y))) 2)))","(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))","(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"link":["."],"name":["Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, C"],"oracle":[0.6021950696655225],"outputs":[["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))"]],"time":30.132080078125,"times":[["x",6.633056640625],["y",7.268798828125],["z",6.3310546875],["(+.f64 (+.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))",6.619140625]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[1,9,12,3.0792e-5],[0,8,12,1.85e-5]],"inputs":[["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (fma.f64 z (cos.f64 y) (sin.f64 y)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.18798828125,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.668212890625,"type":"end"}]
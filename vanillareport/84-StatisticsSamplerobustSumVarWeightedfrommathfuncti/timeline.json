[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.46416315896613014,0.4173567899947557,0.11848005103911419],[11,0.3822520132662248,0.499267935694661,0.11848005103911419],[10,0.3276445827996213,0.5616764276564936,0.11067898954388511],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":81.21484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",56.671142578125,1437],["body",256,"valid",328.4130859375,8256]],"time":394.89697265625,"type":"sample"},{"compiler":[[10,6]],"egraph":[[0,3,3,4.458e-6],[3,54,32,0.000418334],[2,50,32,0.00029662600000000003],[1,34,32,0.000173126],[0,16,40,7.1417e-5]],"inputs":[["0","1","2"],["(+.f64 x (*.f64 (*.f64 y z) z))","(+.f64 y (*.f64 (*.f64 x z) z))","(+.f64 z (*.f64 (*.f64 y x) x))","(+.f64 x (*.f64 (*.f64 z y) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (*.f64 (*.f64 y z) z))","(+.f64 x (*.f64 y (*.f64 z z)))","(fma.f64 y (*.f64 z z) x)","(+.f64 y (*.f64 (*.f64 x z) z))","(+.f64 y (*.f64 x (*.f64 z z)))","(fma.f64 x (*.f64 z z) y)","(+.f64 z (*.f64 (*.f64 y x) x))","(+.f64 z (*.f64 y (*.f64 x x)))","(fma.f64 x (*.f64 x y) z)","(+.f64 x (*.f64 (*.f64 z y) y))","(+.f64 x (*.f64 z (*.f64 y y)))","(fma.f64 y (*.f64 y z) x)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":24.81201171875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,17,8,0.000200792],[2,16,8,0.000152833],[1,12,8,0.00010125],[0,7,10,5.55e-5]],"inputs":[["(+.f64 x (*.f64 (*.f64 y z) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 (*.f64 y z) z))","(+.f64 x (*.f64 y (*.f64 z z)))","(fma.f64 y (*.f64 z z) x)"]],"stop":[["saturated",1]],"time":11.248046875,"type":"simplify"},{"compiler":[[16,8]],"time":0.30810546875,"type":"eval"},{"alts":[["(fma.f64 y (*.f64 z z) x)","fresh",6.779825768864454],["(+.f64 x (*.f64 (*.f64 y z) z))","next",0.08203125]],"compiler":[[9,5],[10,6],[9,5],[10,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0390625],"time":1.85498046875,"type":"prune"},{"compiler":[[21,6]],"locations":[["(+.f64 x (*.f64 (*.f64 y z) z))",0.00390625,true],["(*.f64 (*.f64 y z) z)",0.171875,true]],"time":4.291015625,"type":"localize"},{"count":[[2,60]],"series":[["(+.f64 x (*.f64 (*.f64 y z) z))","z","-inf",0.160888671875],["(+.f64 x (*.f64 (*.f64 y z) z))","z","inf",0.156005859375],["(+.f64 x (*.f64 (*.f64 y z) z))","z","0",0.176025390625],["(+.f64 x (*.f64 (*.f64 y z) z))","y","-inf",0.155029296875],["(+.f64 x (*.f64 (*.f64 y z) z))","y","inf",0.157958984375],["(+.f64 x (*.f64 (*.f64 y z) z))","y","0",0.182861328125],["(+.f64 x (*.f64 (*.f64 y z) z))","x","-inf",0.169921875],["(+.f64 x (*.f64 (*.f64 y z) z))","x","inf",0.265869140625],["(+.f64 x (*.f64 (*.f64 y z) z))","x","0",0.257080078125],["(*.f64 (*.f64 y z) z)","z","-inf",0.205078125],["(*.f64 (*.f64 y z) z)","z","inf",0.5009765625],["(*.f64 (*.f64 y z) z)","z","0",0.390869140625],["(*.f64 (*.f64 y z) z)","y","-inf",0.287841796875],["(*.f64 (*.f64 y z) z)","y","inf",0.419189453125],["(*.f64 (*.f64 y z) z)","y","0",0.619873046875]],"time":4.283935546875,"type":"series"},{"count":[[2,47]],"egraph":[[2,2069,15,0.020529916999999998],[1,149,15,0.002811709],[0,7,17,0.000161834]],"inputs":[["(*.f64 (*.f64 y z) z)","(+.f64 x (*.f64 (*.f64 y z) z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 z (*.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (*.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 y) z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (*.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 y) z) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (*.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (*.f64 y z))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (*.f64 z z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 z (*.f64 y z)))) (/.f64 (pow.f64 (*.f64 z (*.f64 y z)) 2) (-.f64 x (*.f64 z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 z z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 z z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) 2) (cbrt.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (*.f64 z z) x)) (sqrt.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 y z)) 3)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 z (*.f64 y z)) (-.f64 (*.f64 z (*.f64 y z)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 y z)) 2)) (/.f64 1 (-.f64 x (*.f64 z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 z (*.f64 y z)) (-.f64 (*.f64 z (*.f64 y z)) x))) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 y z)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (*.f64 z (*.f64 y z))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 y z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 y z)) 3)) (fma.f64 x x (*.f64 (*.f64 z (*.f64 y z)) (-.f64 (*.f64 z (*.f64 y z)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 y z)) 3)) (+.f64 (pow.f64 (*.f64 z (*.f64 y z)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 z (*.f64 y z)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 y z)) 2)) (-.f64 x (*.f64 z (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (*.f64 y z)) 3))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 z (*.f64 y z)) (-.f64 (*.f64 z (*.f64 y z)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 y z)) 2))) (neg.f64 (-.f64 x (*.f64 z (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z (*.f64 y z)) 2) (*.f64 x x)) (-.f64 (*.f64 z (*.f64 y z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 z z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 z z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (*.f64 z z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (*.f64 z z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 z z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (*.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 2) (cbrt.f64 (*.f64 z (*.f64 y z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 z (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 y) z) (*.f64 (sqrt.f64 y) z) x)))))"]],"rules":[["egg-rr",36],["egg-rr",11]],"stop":[["node limit",1]],"time":42.833984375,"type":"rewrite"},{"count":[[107,51]],"egraph":[[21,7087,423,0.126270499],[20,7053,423,0.110222916],[19,6981,423,0.09816833300000001],[18,6703,423,0.088971083],[17,6411,423,0.079141667],[16,6015,423,0.070167375],[15,5180,423,0.06053408300000001],[14,4488,423,0.04995012500000001],[13,3922,423,0.04216370800000001],[12,3441,423,0.034278499000000004],[11,3048,423,0.028076124],[10,2749,423,0.023142624],[9,2541,423,0.018170165000000002],[8,2357,423,0.01405429],[7,2193,423,0.010908207],[6,1294,423,0.007535457000000001],[5,351,423,0.0034393740000000003],[4,119,423,0.001239958],[3,53,423,0.000628333],[2,28,423,0.000373708],[1,16,423,0.00022175],[0,8,423,0.000100209]],"inputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(*.f64 y (pow.f64 z 2))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 y (pow.f64 z 2)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)"]],"stop":[["node limit",1]],"time":156.512939453125,"type":"simplify"},{"compiler":[[650,195]],"time":6.1259765625,"type":"eval"},{"alts":[["(+.f64 x (pow.f64 (*.f64 (sqrt.f64 y) z) 2))","fresh",33.08888627930533],["(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 y z)) 2)) (/.f64 1 (-.f64 x (*.f64 z (*.f64 y z)))))","fresh",32.55649062280017],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","next",0.2194901367581882],["(fma.f64 y (*.f64 z z) x)","fresh",6.779825768864454],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125]],"compiler":[[11,8],[24,13],[13,9],[9,5],[10,6],[11,8],[24,13],[13,9],[9,5]],"count":[[53,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[51,3],"picked":[1,1]}],"min-error":[0.01171875],"time":10.64013671875,"type":"prune"},{"compiler":[[39,12]],"locations":[["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))",0.00390625,true],["(*.f64 z (*.f64 y z))",0.171875,true],["(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)",0.4431802246741665,true],["(cbrt.f64 (*.f64 z (*.f64 y z)))",21.08672987035355,true]],"time":7.682861328125,"type":"localize"},{"count":[[4,42]],"series":[["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","y","-inf",0.27490234375],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","y","inf",0.257080078125],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","y","0",0.259765625],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","z","-inf",0.274169921875],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","z","inf",0.261962890625],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","z","0",0.28515625],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","x","-inf",0.18505859375],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","x","inf",0.175048828125],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","x","0",0.97705078125],["(*.f64 z (*.f64 y z))","y","-inf",0.14306640625],["(*.f64 z (*.f64 y z))","y","inf",0.138916015625],["(*.f64 z (*.f64 y z))","y","0",0.162109375],["(*.f64 z (*.f64 y z))","z","-inf",0.137939453125],["(*.f64 z (*.f64 y z))","z","inf",0.139892578125],["(*.f64 z (*.f64 y z))","z","0",0.196044921875],["(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)","y","-inf",0.820068359375],["(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)","y","inf",0.48388671875],["(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)","y","0",1.049072265625],["(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)","z","-inf",0.407958984375],["(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)","z","inf",0.498046875],["(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)","z","0",0.68994140625],["(cbrt.f64 (*.f64 z (*.f64 y z)))","y","-inf",0.84814453125],["(cbrt.f64 (*.f64 z (*.f64 y z)))","y","inf",0.3349609375],["(cbrt.f64 (*.f64 z (*.f64 y z)))","y","0",0.295166015625],["(cbrt.f64 (*.f64 z (*.f64 y z)))","z","-inf",0.326904296875],["(cbrt.f64 (*.f64 z (*.f64 y z)))","z","inf",0.35400390625],["(cbrt.f64 (*.f64 z (*.f64 y z)))","z","0",0.580810546875]],"time":10.885986328125,"type":"series"},{"count":[[4,220]],"egraph":[[2,2557,31,0.028327084],[1,218,31,0.0036662089999999997],[0,10,33,0.00028125]],"inputs":[["(cbrt.f64 (*.f64 z (*.f64 y z)))","(pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3)","(*.f64 z (*.f64 y z))","(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2) (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (*.f64 z y)) 1/6) (pow.f64 (*.f64 z (*.f64 z y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (*.f64 z y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 z y)) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (*.f64 z y))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 z y)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))) (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (*.f64 z (*.f64 z y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (*.f64 z y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (*.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) (cbrt.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z y)) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z (*.f64 z y))) (sqrt.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (*.f64 z y)) 1/6) (pow.f64 (*.f64 z (*.f64 z y)) 5/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z y)) (*.f64 (sqrt.f64 (*.f64 z y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (*.f64 z y)) 5/6) (pow.f64 (*.f64 z (*.f64 z y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (sqrt.f64 (*.f64 z y))) (sqrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z y) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) 1) (cbrt.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) (cbrt.f64 z)) (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))) 2) (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (*.f64 z y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 z (*.f64 z y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 z (*.f64 z y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (log.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 z) (*.f64 (log.f64 (*.f64 z y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (*.f64 (log.f64 (*.f64 z y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 y) 1) (*.f64 2 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 z y)) 1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 z y)) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 z y)) 1) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3) (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1) (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2 (log.f64 z)) (*.f64 (log.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y)))) (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2) (log.f64 (sqrt.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sqrt.f64 (*.f64 z (*.f64 z y)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2) (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (*.f64 z y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (*.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 3) (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 z y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (*.f64 z y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (*.f64 z y)) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 y) z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sqrt.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 z (*.f64 z y)))) 2)) (cbrt.f64 (log.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 z (*.f64 z y))))) (sqrt.f64 (log.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (*.f64 z y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 z (*.f64 z y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 z (*.f64 z y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (log.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 z) (*.f64 (log.f64 (*.f64 z y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (*.f64 (log.f64 (*.f64 z y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 y) 1) (*.f64 2 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 z y)) 1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 z y)) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 z y)) 1) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3) (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1) (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2 (log.f64 z)) (*.f64 (log.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y)))) (*.f64 (log.f64 (*.f64 z (*.f64 z y))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 z (*.f64 z y)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2) (log.f64 (sqrt.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sqrt.f64 (*.f64 z (*.f64 z y)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2) (*.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (*.f64 z z) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 z (*.f64 z y)))) (/.f64 (pow.f64 (*.f64 z (*.f64 z y)) 2) (-.f64 x (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (*.f64 z z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (*.f64 z z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) 2) (cbrt.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (*.f64 z z) x)) (sqrt.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 (*.f64 z (*.f64 z y)) (fma.f64 z (*.f64 z y) (neg.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 z y)) 2)) (/.f64 1 (-.f64 x (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 z (*.f64 z y)) (fma.f64 z (*.f64 z y) (neg.f64 x)) (*.f64 x x)) (+.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (*.f64 z (*.f64 z y))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 z y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) (pow.f64 x 3)) (fma.f64 (*.f64 z (*.f64 z y)) (fma.f64 z (*.f64 z y) (neg.f64 x)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 z (*.f64 z y)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 z (*.f64 z y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 z y)) 2)) (-.f64 x (*.f64 z (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) (pow.f64 x 3))) (neg.f64 (fma.f64 (*.f64 z (*.f64 z y)) (fma.f64 z (*.f64 z y) (neg.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 z y)) 2))) (neg.f64 (-.f64 x (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z (*.f64 z y)) 2) (*.f64 x x)) (fma.f64 z (*.f64 z y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (*.f64 z z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 z z) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (*.f64 z z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (*.f64 z z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 z (*.f64 z y)) (fma.f64 z (*.f64 z y) (neg.f64 x)) (*.f64 x x)) (+.f64 (pow.f64 (*.f64 z (*.f64 z y)) 3) (pow.f64 x 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (*.f64 z (*.f64 z y))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 z y)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 y (*.f64 z z) x))) 2)) (cbrt.f64 (log.f64 (fma.f64 y (*.f64 z z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 y (*.f64 z z) x)))) (sqrt.f64 (log.f64 (fma.f64 y (*.f64 z z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (*.f64 z z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (*.f64 z z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 z y)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 z) (*.f64 z y)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (*.f64 z y)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 z) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (*.f64 z (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (*.f64 z z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (*.f64 z z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (*.f64 z z) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 y (*.f64 z z) x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 y (*.f64 z z) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y (*.f64 z z) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y (*.f64 z z) x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 z y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z y) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (*.f64 z y)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) (cbrt.f64 (*.f64 z (*.f64 z y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z y)) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (*.f64 z y))) (sqrt.f64 (*.f64 z (*.f64 z y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 z (*.f64 z y)) 1/6) (pow.f64 (*.f64 z (*.f64 z y)) 5/6) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z y)) (*.f64 (sqrt.f64 (*.f64 z y)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 z (*.f64 z y)) 5/6) (pow.f64 (*.f64 z (*.f64 z y)) 1/6) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) (cbrt.f64 (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 (*.f64 z y))) (sqrt.f64 (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z y) (sqrt.f64 z)) (sqrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) 1) (cbrt.f64 (*.f64 z (*.f64 z y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2) (cbrt.f64 z)) (cbrt.f64 (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y))))) 2) (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) x)))))"]],"rules":[["egg-rr",74],["egg-rr",49],["egg-rr",59],["egg-rr",38]],"stop":[["node limit",1]],"time":63.632080078125,"type":"rewrite"},{"count":[[262,190]],"egraph":[[22,6274,255,0.114591914],[21,6240,255,0.095736706],[20,6160,255,0.086390373],[19,5850,255,0.07609804],[18,5536,255,0.068239749],[17,5110,255,0.059676124000000004],[16,4248,255,0.052060582],[15,3534,255,0.041216165],[14,2949,255,0.03384054],[13,2489,255,0.026540999000000006],[12,2115,255,0.022064874000000005],[11,1794,255,0.018221166000000004],[10,1547,255,0.014413458000000002],[9,1374,255,0.010646917000000002],[8,1235,255,0.008401417000000001],[7,1131,255,0.0065754590000000005],[6,713,255,0.0047445840000000005],[5,509,255,0.0032496260000000003],[4,201,255,0.002062876],[3,100,255,0.000950668],[2,56,255,0.000573751],[1,31,255,0.000337209],[0,12,282,0.000160125]],"inputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 y (pow.f64 z 2))","(*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","x","x","x","x","x"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 y (pow.f64 z 2))","(*.f64 y (*.f64 z z))","(*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2)))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","x","x","x","x","x"]],"stop":[["node limit",1]],"time":141.41796875,"type":"simplify"},{"compiler":[[2698,932]],"time":25.88916015625,"type":"eval"},{"alts":[["(+.f64 x (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2))))","fresh",0.3024152097679378],["(fma.f64 (*.f64 z z) y x)","fresh",6.779825768864454],["(+.f64 x (pow.f64 (*.f64 (sqrt.f64 y) z) 2))","fresh",33.08888627930533],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","done",0.2194901367581882],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","next",0.2468338867581882],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125],["(fma.f64 (*.f64 z (sqrt.f64 (*.f64 z y))) (sqrt.f64 (*.f64 z y)) x)","fresh",24.624042529305328]],"compiler":[[31,14],[9,5],[11,8],[13,9],[17,9],[10,6],[15,7],[31,14],[9,5],[11,8],[17,9],[15,7]],"count":[[195,7]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[190,4],"picked":[1,1]}],"min-error":[0],"time":58.366943359375,"type":"prune"},{"compiler":[[40,12]],"locations":[["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)",0.10546875,true],["(*.f64 (cbrt.f64 (*.f64 z y)) z)",0.23046875,true],["(pow.f64 (cbrt.f64 (*.f64 z y)) 2)",0.521816259768442,true],["(cbrt.f64 (*.f64 z y))",9.234454089657582,true]],"time":8.044921875,"type":"localize"},{"count":[[4,19]],"series":[["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","x","-inf",0.294921875],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","x","inf",0.196044921875],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","x","0",1.748046875],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","y","-inf",0.3349609375],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","y","inf",0.259033203125],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","y","0",0.224853515625],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","z","-inf",0.48486328125],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","z","inf",0.3740234375],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","z","0",0.26806640625],["(*.f64 (cbrt.f64 (*.f64 z y)) z)","y","-inf",0.22021484375],["(*.f64 (cbrt.f64 (*.f64 z y)) z)","y","inf",0.2900390625],["(*.f64 (cbrt.f64 (*.f64 z y)) z)","y","0",0.316162109375],["(*.f64 (cbrt.f64 (*.f64 z y)) z)","z","-inf",0.39501953125],["(*.f64 (cbrt.f64 (*.f64 z y)) z)","z","inf",0.241943359375],["(*.f64 (cbrt.f64 (*.f64 z y)) z)","z","0",0.288818359375],["(pow.f64 (cbrt.f64 (*.f64 z y)) 2)","y","-inf",0.405029296875],["(pow.f64 (cbrt.f64 (*.f64 z y)) 2)","y","inf",0.943115234375],["(pow.f64 (cbrt.f64 (*.f64 z y)) 2)","y","0",0.260986328125],["(pow.f64 (cbrt.f64 (*.f64 z y)) 2)","z","-inf",0.39013671875],["(pow.f64 (cbrt.f64 (*.f64 z y)) 2)","z","inf",0.31689453125],["(pow.f64 (cbrt.f64 (*.f64 z y)) 2)","z","0",0.299072265625],["(cbrt.f64 (*.f64 z y))","y","-inf",0.224853515625],["(cbrt.f64 (*.f64 z y))","y","inf",0.2109375],["(cbrt.f64 (*.f64 z y))","y","0",0.22900390625],["(cbrt.f64 (*.f64 z y))","z","-inf",0.52294921875],["(cbrt.f64 (*.f64 z y))","z","inf",0.217041015625],["(cbrt.f64 (*.f64 z y))","z","0",0.304931640625]],"time":10.672119140625,"type":"series"},{"count":[[4,75]],"egraph":[[2,2271,34,0.023281167],[1,201,34,0.0037459589999999997],[0,10,45,0.00029125]],"inputs":[["(cbrt.f64 (*.f64 z y))","(pow.f64 (cbrt.f64 (*.f64 z y)) 2)","(*.f64 (cbrt.f64 (*.f64 z y)) z)","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z y))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) (cbrt.f64 (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z y) 1/6) (pow.f64 (*.f64 z y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 4))) (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 z y)) 1/3) (pow.f64 (sqrt.f64 (*.f64 z y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 z y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 z y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 z y))) (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 4)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z y) 1/6) (*.f64 (pow.f64 (*.f64 z y) 1/6) (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z y)) (pow.f64 (*.f64 z y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2))) (cbrt.f64 (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (*.f64 z y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 z (cbrt.f64 (*.f64 z y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cbrt.f64 (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (cbrt.f64 (*.f64 z y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (*.f64 z y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (cbrt.f64 (*.f64 z y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (cbrt.f64 (*.f64 z y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cbrt.f64 (*.f64 z y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (cbrt.f64 (*.f64 z y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 z y) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (cbrt.f64 (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (cbrt.f64 (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (cbrt.f64 (*.f64 z y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 z y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 z y) z) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x (*.f64 (*.f64 z y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (*.f64 (*.f64 z y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (*.f64 (*.f64 z y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))) (pow.f64 (cbrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))) 2) (cbrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))) (sqrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (*.f64 z y) z) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 (*.f64 z y) z) (*.f64 (*.f64 z y) z)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 z y) z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 z y) z) (*.f64 (*.f64 z y) z)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 z y) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (*.f64 (*.f64 z y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (*.f64 (*.f64 z y) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (*.f64 (*.f64 z y) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (*.f64 (*.f64 z y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (*.f64 (*.f64 z y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (*.f64 (*.f64 z y) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (*.f64 (*.f64 z y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (*.f64 (*.f64 z y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (*.f64 (*.f64 z y) z))))))))"]],"rules":[["egg-rr",21],["egg-rr",13],["egg-rr",19],["egg-rr",22]],"stop":[["node limit",1]],"time":53.162841796875,"type":"rewrite"},{"count":[[94,80]],"egraph":[[22,6296,88,0.11084170700000001],[21,6260,88,0.09187945700000001],[20,6184,88,0.08251483200000001],[19,5876,88,0.07309441500000001],[18,5564,88,0.06397720700000001],[17,5138,88,0.056785749],[16,4270,88,0.047581582000000004],[15,3552,88,0.039334665000000005],[14,2961,88,0.031845582000000004],[13,2499,88,0.026207707000000004],[12,2123,88,0.021912999000000002],[11,1804,88,0.017770749000000002],[10,1557,88,0.014150957],[9,1381,88,0.011226832],[8,1242,88,0.009089624000000001],[7,1138,88,0.007303583000000001],[6,720,88,0.00544675],[5,512,88,0.0038674169999999997],[4,197,88,0.0023257499999999997],[3,100,88,0.00089175],[2,56,88,0.000510417],[1,31,88,0.0003005],[0,12,118,0.000125375]],"inputs":[["x","x","x","x","x","x","x","(*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)"]],"method":["egg-herbie"],"outputs":[["x","x","x","x","x","x","x","(*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2)))","(*.f64 (*.f64 1 y) (*.f64 z z))","(*.f64 y (*.f64 z z))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 y (pow.f64 z 2))) x)","(fma.f64 1 (*.f64 y (*.f64 z z)) x)","(fma.f64 y (*.f64 z z) x)","(fma.f64 z (*.f64 y z) x)"]],"stop":[["node limit",1]],"time":128.927978515625,"type":"simplify"},{"compiler":[[1653,541]],"time":16.02197265625,"type":"eval"},{"alts":[["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","done",0.2194901367581882],["(fma.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","next",0.2201539062950722],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","done",0.2468338867581882],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125],["(fma.f64 (*.f64 z z) y x)","fresh",6.779825768864454],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z y))) 3) z) x)","fresh",0.32976531953612787]],"compiler":[[13,9],[21,11],[17,9],[10,6],[9,5],[20,12],[21,11],[9,5],[20,12]],"count":[[109,6]],"kept":[{"done":[2,2],"fresh":[4,1],"new":[102,2],"picked":[1,1]}],"min-error":[0],"time":27.51318359375,"type":"prune"},{"compiler":[[58,11]],"locations":[["(*.f64 (cbrt.f64 (*.f64 z y)) z)",0.23046875,false],["(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))",0.33203125,true],["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))",0.390625,true],["(cbrt.f64 (*.f64 z y))",9.234454089657582,false]],"time":10.389892578125,"type":"localize"},{"count":[[2,0]],"series":[["(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))","y","-inf",0.343994140625],["(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))","y","inf",0.22998046875],["(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))","y","0",0.201904296875],["(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))","z","-inf",0.236083984375],["(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))","z","inf",0.23779296875],["(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))","z","0",0.26513671875],["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))","y","-inf",0.2099609375],["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))","y","inf",0.22802734375],["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))","y","0",0.22509765625],["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))","z","-inf",0.411865234375],["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))","z","inf",0.237060546875],["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))","z","0",0.318115234375]],"time":3.280029296875,"type":"series"},{"count":[[2,23]],"egraph":[[2,1998,18,0.021033],[1,174,18,0.0028855],[0,9,23,0.000197208]],"inputs":[["(*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z))","(*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 z (*.f64 z y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (*.f64 z y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 z y) (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2)))))))"]],"rules":[["egg-rr",12],["egg-rr",11]],"stop":[["node limit",1]],"time":43.1220703125,"type":"rewrite"},{"count":[[23,23]],"egraph":[[0,0,0,2.1375e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":11.911865234375,"type":"simplify"},{"compiler":[[1634,402]],"time":12.41796875,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z y))) 3) z) x)","fresh",0.29549653277768734],["(fma.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","done",0.2201539062950722],["(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","done",0.2194901367581882],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","done",0.2468338867581882],["(+.f64 x (*.f64 (*.f64 y z) z))","done",0.08203125],["(fma.f64 (*.f64 z z) y x)","fresh",6.779825768864454]],"compiler":[[24,14],[21,11],[13,9],[17,9],[10,6],[9,5]],"count":[[86,6]],"kept":[{"done":[3,3],"fresh":[2,1],"new":[80,1],"picked":[1,1]}],"min-error":[0],"time":20.9169921875,"type":"prune"},{"accuracy":[0.08203125],"baseline":[0.08203125],"branch":[["x",0.08203125,1],["y",0.08203125,1],["z",0.08203125,1],["(+.f64 x (*.f64 (*.f64 y z) z))",0.08203125,1],["(*.f64 (*.f64 y z) z)",0.08203125,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[8,5],[171,62]],"count":[[12,1]],"inputs":[["(fma.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z y))) 3) z) x)","(fma.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z y)) (cbrt.f64 z)) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z y))) 3) z) x)","(+.f64 x (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 z y)))) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 z y))) 2))))","(fma.f64 (*.f64 z z) y x)","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 z y)) 2) (*.f64 (cbrt.f64 (*.f64 z y)) z) x)","(fma.f64 (*.f64 z (sqrt.f64 (*.f64 z y))) (sqrt.f64 (*.f64 z y)) x)","(+.f64 x (pow.f64 (*.f64 (sqrt.f64 y) z) 2))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (*.f64 y z)) 2)) (/.f64 1 (-.f64 x (*.f64 z (*.f64 y z)))))","(+.f64 x (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y z))) 3))","(fma.f64 y (*.f64 z z) x)","(+.f64 x (*.f64 (*.f64 y z) z))"]],"link":["."],"name":["Statistics.Sample:robustSumVarWeighted from math-functions-0.1.5.2"],"oracle":[55.27357000755484],"outputs":[["(+.f64 x (*.f64 (*.f64 y z) z))"]],"time":31.257080078125,"times":[["x",5.3828125],["y",6.080078125],["z",5.971923828125],["(+.f64 x (*.f64 (*.f64 y z) z))",5.843994140625],["(*.f64 (*.f64 y z) z)",4.798828125]],"type":"regimes"},{"compiler":[[10,6]],"egraph":[[1,10,10,3.925e-5],[0,7,10,2.4542e-5]],"inputs":[["(+.f64 x (*.f64 (*.f64 y z) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 (*.f64 y z) z))","(+.f64 x (*.f64 z (*.f64 y z)))"]],"stop":[["fuel",1],["saturated",1]],"time":9.47509765625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[10,6]],"remove-preprocessing":[[]],"time":7.583984375,"type":"end"}]
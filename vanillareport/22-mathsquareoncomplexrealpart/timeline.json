[{"compiler":[[10,6]],"method":["search"],"sampling":[[12,0.4936581836082041,0.09073164244182408,0.4156101739499718],[11,0.4721947843208909,0.11902430513873696,0.40878091054037213],[10,0.42926798574626446,0.18341450300067663,0.3873175112530589],[9,0.39024362340569496,0.24195104651153088,0.36780533008277416],[8,0.31219489872455597,0.37463387846946716,0.31317122280597687],[7,0.24975591897964478,0.49951183795928955,0.2507322430610657],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":22.572021484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.30322265625,361],["body",256,"valid",265.772705078125,8256]],"time":284.56591796875,"type":"sample"},{"compiler":[[9,5]],"egraph":[[0,2,2,1.791e-6],[14,7838,20,0.08824958200000001],[13,6457,20,0.07553812400000001],[12,6457,20,0.05843049900000001],[11,6377,20,0.05217387400000001],[10,6263,20,0.04646312400000001],[9,6150,20,0.04074283200000001],[8,5589,20,0.034611791],[7,3851,20,0.026299124],[6,2113,20,0.016232958],[5,821,20,0.006968874999999999],[4,273,20,0.002176833],[3,103,20,0.000770083],[2,47,20,0.00033708299999999996],[1,25,20,0.000163416],[0,7,20,5.9208e-5]],"inputs":[["0","1"],["(-.f64 (*.f64 re re) (*.f64 im im))","(-.f64 (*.f64 im im) (*.f64 re re))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(-.f64 (*.f64 im im) (*.f64 re re))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":112.25,"type":"preprocess"},{"count":[[1,1]],"egraph":[[14,7086,10,0.08851075],[13,7086,10,0.072288042],[12,6971,10,0.06204095899999999],[11,6725,10,0.052676666999999996],[10,6304,10,0.044208],[9,5425,10,0.035731167],[8,3916,10,0.025323209],[7,1662,10,0.015391042],[6,832,10,0.006155626000000001],[5,382,10,0.0028642090000000004],[4,133,10,0.001080376],[3,56,10,0.000447501],[2,27,10,0.000218792],[1,15,10,0.000113334],[0,6,10,4.3334e-5]],"inputs":[["(-.f64 (*.f64 re re) (*.f64 im im))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 re re) (*.f64 im im))"]],"stop":[["node limit",1]],"time":99.916015625,"type":"simplify"},{"compiler":[[9,5]],"time":0.23291015625,"type":"eval"},{"alts":[["(-.f64 (*.f64 re re) (*.f64 im im))","next",0.01171875]],"compiler":[[9,5],[9,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.64599609375,"type":"prune"},{"compiler":[[17,5]],"locations":[["(-.f64 (*.f64 re re) (*.f64 im im))",0.01171875,true]],"time":3.904052734375,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (*.f64 re re) (*.f64 im im))","im","-inf",0.193115234375],["(-.f64 (*.f64 re re) (*.f64 im im))","im","inf",0.260009765625],["(-.f64 (*.f64 re re) (*.f64 im im))","im","0",0.34814453125],["(-.f64 (*.f64 re re) (*.f64 im im))","re","-inf",0.19677734375],["(-.f64 (*.f64 re re) (*.f64 im im))","re","inf",0.321044921875],["(-.f64 (*.f64 re re) (*.f64 im im))","re","0",0.466064453125]],"time":1.865966796875,"type":"series"},{"count":[[1,46]],"egraph":[[2,1985,10,0.018056125],[1,139,10,0.0026498340000000002],[0,6,10,0.000161417]],"inputs":[["(-.f64 (*.f64 re re) (*.f64 im im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 re re) (*.f64 im (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 re re) (*.f64 (*.f64 im (neg.f64 im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 re re) (+.f64 (*.f64 im (neg.f64 im)) (fma.f64 (neg.f64 im) im (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 re re) (*.f64 im im)) (fma.f64 (neg.f64 im) im (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 re re) (*.f64 im im)) (fma.f64 (*.f64 im (neg.f64 im)) 1 (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 re re) (*.f64 im im)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 im) 2)) (cbrt.f64 (pow.f64 im 4)) (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 re re) (*.f64 im im)) (*.f64 (fma.f64 (neg.f64 im) im (*.f64 im im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 re re) (*.f64 im im)) (+.f64 (fma.f64 (neg.f64 im) im (*.f64 im im)) (fma.f64 (neg.f64 im) im (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 im (neg.f64 im)) (*.f64 re re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 im) im (*.f64 im im)) (-.f64 (*.f64 re re) (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 re re) (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) 2) (cbrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) (sqrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 re 6) (pow.f64 im 6)) (/.f64 1 (+.f64 (pow.f64 re 4) (+.f64 (pow.f64 im 4) (pow.f64 (*.f64 re im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 re 4) (pow.f64 im 4)) (/.f64 1 (fma.f64 re re (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 re im) (-.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 re im) (+.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 re 4) (+.f64 (pow.f64 im 4) (pow.f64 (*.f64 re im) 2))) (-.f64 (pow.f64 re 6) (pow.f64 im 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 re re (*.f64 im im)) (-.f64 (pow.f64 re 4) (pow.f64 im 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 re 6) (pow.f64 im 6)) (+.f64 (pow.f64 re 4) (+.f64 (pow.f64 im 4) (pow.f64 (*.f64 re im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 re 4) (pow.f64 im 4)) (fma.f64 re re (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 re 6) (pow.f64 im 6))) (neg.f64 (+.f64 (pow.f64 re 4) (+.f64 (pow.f64 im 4) (pow.f64 (*.f64 re im) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 re 4) (pow.f64 im 4))) (neg.f64 (fma.f64 re re (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 re 6) (pow.f64 (*.f64 im (neg.f64 im)) 3)) (+.f64 (pow.f64 re 4) (-.f64 (*.f64 (*.f64 im (neg.f64 im)) (*.f64 im (neg.f64 im))) (*.f64 (*.f64 re re) (*.f64 im (neg.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 3) (pow.f64 (fma.f64 (neg.f64 im) im (*.f64 im im)) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 2) (-.f64 (*.f64 (fma.f64 (neg.f64 im) im (*.f64 im im)) (fma.f64 (neg.f64 im) im (*.f64 im im))) (*.f64 (-.f64 (*.f64 re re) (*.f64 im im)) (fma.f64 (neg.f64 im) im (*.f64 im im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 re 4) (*.f64 (*.f64 im (neg.f64 im)) (*.f64 im (neg.f64 im)))) (-.f64 (*.f64 re re) (*.f64 im (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 2) (*.f64 (fma.f64 (neg.f64 im) im (*.f64 im im)) (fma.f64 (neg.f64 im) im (*.f64 im im)))) (-.f64 (-.f64 (*.f64 re re) (*.f64 im im)) (fma.f64 (neg.f64 im) im (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 re re) (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 re re) (*.f64 im im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 re re) (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 re re) (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 re re) (*.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 re re (*.f64 im (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 re re) (*.f64 im (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 re re) (*.f64 im im)) (fma.f64 (neg.f64 im) im (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) 2) (cbrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) (fma.f64 (neg.f64 im) im (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 re 4)) (pow.f64 (cbrt.f64 re) 2) (*.f64 im (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) (sqrt.f64 (-.f64 (*.f64 re re) (*.f64 im im))) (fma.f64 (neg.f64 im) im (*.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 re im) (-.f64 re im) (fma.f64 (neg.f64 im) im (*.f64 im im)))))))"]],"rules":[["egg-rr",46]],"stop":[["node limit",1]],"time":36.737060546875,"type":"rewrite"},{"count":[[70,51]],"egraph":[[7,5169,210,0.02485375],[6,1792,210,0.012158917],[5,763,210,0.004661625],[4,223,210,0.001905042],[3,87,210,0.0007539580000000001],[2,42,210,0.000366125],[1,20,210,0.000180875],[0,9,246,7.075e-5]],"inputs":[["(*.f64 -1 (pow.f64 im 2))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(pow.f64 re 2)","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(pow.f64 re 2)","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(pow.f64 re 2)","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(*.f64 -1 (pow.f64 im 2))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(*.f64 -1 (pow.f64 im 2))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (pow.f64 im 2))","(neg.f64 (*.f64 im im))","(*.f64 im (neg.f64 im))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(pow.f64 re 2)","(*.f64 re re)","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(pow.f64 re 2)","(*.f64 re re)","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(pow.f64 re 2)","(*.f64 re re)","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(*.f64 -1 (pow.f64 im 2))","(neg.f64 (*.f64 im im))","(*.f64 im (neg.f64 im))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(*.f64 -1 (pow.f64 im 2))","(neg.f64 (*.f64 im im))","(*.f64 im (neg.f64 im))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))","(+.f64 (pow.f64 re 2) (*.f64 -1 (pow.f64 im 2)))","(+.f64 (neg.f64 (*.f64 im im)) (*.f64 re re))","(-.f64 (*.f64 re re) (*.f64 im im))","(fma.f64 re re (*.f64 im (neg.f64 im)))"]],"stop":[["node limit",1]],"time":39.947021484375,"type":"simplify"},{"compiler":[[777,233]],"time":6.10595703125,"type":"eval"},{"alts":[["(*.f64 (+.f64 re im) (-.f64 re im))","next",0]],"compiler":[[9,5],[9,5]],"count":[[52,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[51,1],"picked":[1,0]}],"min-error":[0],"time":7.93994140625,"type":"prune"},{"compiler":[[17,5]],"time":3.52099609375,"type":"localize"},{"compiler":[[2,2]],"time":0.087158203125,"type":"eval"},{"alts":[["(*.f64 (+.f64 re im) (-.f64 re im))","done",0]],"compiler":[[9,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.468994140625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["re",0,1],["im",0,1],["(-.f64 (*.f64 re re) (*.f64 im im))",0,1],["(*.f64 re re)",0,1],["(*.f64 im im)",0,1]],"compiler":[[3,2],[3,2],[9,5],[5,3],[5,3],[16,8]],"count":[[2,1]],"inputs":[["(*.f64 (+.f64 re im) (-.f64 re im))","(-.f64 (*.f64 re re) (*.f64 im im))"]],"link":["."],"name":["math.square on complex, real part"],"oracle":[0.01171875],"outputs":[["(*.f64 (+.f64 re im) (-.f64 re im))"]],"time":11.7548828125,"times":[["re",2.36083984375],["im",2.611083984375],["(-.f64 (*.f64 re re) (*.f64 im im))",2.366943359375],["(*.f64 re re)",1.955078125],["(*.f64 im im)",1.929931640625]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[4,18,10,9.8625e-5],[3,17,10,7.8708e-5],[2,15,10,5.8750000000000005e-5],[1,10,10,3.9291e-5],[0,6,10,1.6708e-5]],"inputs":[["(*.f64 (+.f64 re im) (-.f64 re im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 re im) (-.f64 re im))"]],"stop":[["done",1],["saturated",1]],"time":8.1669921875,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.281005859375,"type":"end"}]
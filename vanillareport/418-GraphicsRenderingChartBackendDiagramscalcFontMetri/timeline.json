[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.0389862619158543,0.9590620431300159,0.0019516949541298345],[11,0.023391757149512582,0.9746565478963576,0.0019516949541298345],[10,0.015594504766341721,0.9824538002795284,0.0019516949541298345],[9,0.0,0.9980483050458702,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":150.3310546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",80.756591796875,1712],["body",256,"valid",390.4033203125,8256]],"time":480.041015625,"type":"sample"},{"compiler":[[13,8]],"egraph":[[1,4,4,7.125e-6],[0,4,4,6e-6],[7,6688,49,0.04021571],[6,4954,49,0.02815521],[5,4316,49,0.018911751],[4,4242,49,0.012972834],[3,585,49,0.006775417000000001],[2,243,49,0.001207709],[1,84,70,0.000434584],[0,32,91,0.000122417]],"inputs":[["0","1","2","3"],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(*.f64 y (/.f64 (*.f64 (/.f64 x z) t) t))","(*.f64 z (/.f64 (*.f64 (/.f64 y x) t) t))","(*.f64 t (/.f64 (*.f64 (/.f64 y z) x) x))","(*.f64 x (/.f64 (*.f64 (/.f64 z y) t) t))","(*.f64 x (/.f64 (*.f64 (/.f64 t z) y) y))","(*.f64 x (/.f64 (*.f64 (/.f64 y t) z) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2","3"],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(*.f64 x (/.f64 y (*.f64 1 z)))","(*.f64 x (/.f64 y z))","(/.f64 x (/.f64 z y))","(*.f64 y (/.f64 (*.f64 (/.f64 x z) t) t))","(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(*.f64 x (/.f64 y (*.f64 1 z)))","(*.f64 x (/.f64 y z))","(/.f64 x (/.f64 z y))","(*.f64 z (/.f64 (*.f64 (/.f64 y x) t) t))","(*.f64 z (/.f64 (*.f64 t (/.f64 y x)) t))","(*.f64 z (/.f64 y (*.f64 1 x)))","(/.f64 (*.f64 y z) x)","(*.f64 z (/.f64 y x))","(*.f64 t (/.f64 (*.f64 (/.f64 y z) x) x))","(*.f64 t (/.f64 (/.f64 y z) (/.f64 x x)))","(*.f64 t (/.f64 y (*.f64 1 z)))","(*.f64 y (/.f64 t z))","(/.f64 (*.f64 y t) z)","(/.f64 t (/.f64 z y))","(*.f64 x (/.f64 (*.f64 (/.f64 z y) t) t))","(*.f64 x (/.f64 (/.f64 z y) (/.f64 t t)))","(*.f64 x (/.f64 z (*.f64 1 y)))","(*.f64 (/.f64 x y) z)","(/.f64 x (/.f64 y z))","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 (*.f64 (/.f64 t z) y) y))","(*.f64 x (/.f64 (/.f64 t z) (/.f64 y y)))","(/.f64 (*.f64 x (/.f64 t z)) 1)","(*.f64 x (/.f64 t z))","(/.f64 x (/.f64 z t))","(*.f64 x (/.f64 (*.f64 (/.f64 y t) z) z))","(*.f64 x (/.f64 (/.f64 y t) (/.f64 z z)))","(*.f64 x (/.f64 y (*.f64 1 t)))","(*.f64 x (/.f64 y t))","(/.f64 y (/.f64 t x))"]],"stop":[["unsound",1],["node limit",1]],"symmetry":[["(sort x y)"]],"time":64.870849609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[20,2632,7,0.057252415],[19,2625,7,0.040316582000000004],[18,2618,7,0.037892957000000005],[17,2611,7,0.035490207],[16,2604,7,0.033098207000000004],[15,2597,7,0.030716457000000003],[14,2590,7,0.028368874000000002],[13,2583,7,0.026027749000000003],[12,2576,7,0.023688082000000003],[11,2569,7,0.021381998000000003],[10,2562,7,0.019076457],[9,2555,7,0.015981832],[8,2548,7,0.013719457000000001],[7,2535,7,0.011467374],[6,2522,7,0.00924604],[5,2329,7,0.007026457],[4,454,7,0.004416207],[3,104,7,0.000808416],[2,43,7,0.00025954099999999996],[1,17,10,0.00011112399999999999],[0,9,13,4.0666e-5]],"inputs":[["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","(*.f64 x (/.f64 (/.f64 y z) (/.f64 t t)))","(/.f64 (*.f64 (/.f64 y z) x) 1)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 x (/.f64 z y))"]],"stop":[["node limit",1]],"time":68.43408203125,"type":"simplify"},{"compiler":[[18,10]],"time":0.35107421875,"type":"eval"},{"alts":[["(/.f64 x (/.f64 z y))","next",6.256013825036774],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))","fresh",13.669811911147795]],"compiler":[[9,6],[13,8],[9,6],[13,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[6.080287258193321],"time":1.1650390625,"type":"prune"},{"compiler":[[15,6]],"locations":[["(/.f64 x (/.f64 z y))",6.154337662867236,true]],"time":3.5888671875,"type":"localize"},{"count":[[1,36]],"series":[["(/.f64 x (/.f64 z y))","y","-inf",0.2880859375],["(/.f64 x (/.f64 z y))","y","inf",0.432861328125],["(/.f64 x (/.f64 z y))","y","0",0.3798828125],["(/.f64 x (/.f64 z y))","z","-inf",0.31396484375],["(/.f64 x (/.f64 z y))","z","inf",0.576904296875],["(/.f64 x (/.f64 z y))","z","0",0.43603515625],["(/.f64 x (/.f64 z y))","x","-inf",0.389892578125],["(/.f64 x (/.f64 z y))","x","inf",0.385009765625],["(/.f64 x (/.f64 z y))","x","0",0.550048828125]],"time":3.87109375,"type":"series"},{"count":[[1,41]],"egraph":[[2,1915,7,0.019107791],[1,131,7,0.002373791],[0,6,7,0.000136583]],"inputs":[["(/.f64 x (/.f64 z y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 2) (cbrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) (sqrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) z) (/.f64 (cbrt.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) z) (/.f64 (sqrt.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (/.f64 x (cbrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (cbrt.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 z y))) (/.f64 x (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (/.f64 z y))) (/.f64 (cbrt.f64 x) (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 z y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 y z))))))))"]],"rules":[["egg-rr",41]],"stop":[["node limit",1]],"time":37.06591796875,"type":"rewrite"},{"count":[[77,42]],"egraph":[[4,17,252,0.000276082],[3,16,252,0.00021741599999999998],[2,13,252,0.00015916599999999997],[1,9,252,0.00010245799999999999],[0,6,252,5.2167e-5]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))"]],"stop":[["saturated",1]],"time":14.1259765625,"type":"simplify"},{"compiler":[[402,154]],"time":4.20703125,"type":"eval"},{"alts":[["(*.f64 y (/.f64 x z))","fresh",5.976413351403622],["(/.f64 x (/.f64 z y))","done",6.256013825036774],["(/.f64 (*.f64 y x) z)","next",5.3286757156839775],["(*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))","fresh",5.467385773971866]],"compiler":[[9,6],[9,6],[9,6],[13,10],[9,6],[9,6],[13,10]],"count":[[44,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[42,3],"picked":[1,1]}],"min-error":[0],"time":7.700927734375,"type":"prune"},{"compiler":[[15,6]],"locations":[["(/.f64 (*.f64 y x) z)",5.186275336421551,true]],"time":3.216064453125,"type":"localize"},{"count":[[1,0]],"series":[["(/.f64 (*.f64 y x) z)","z","-inf",0.52392578125],["(/.f64 (*.f64 y x) z)","z","inf",0.161865234375],["(/.f64 (*.f64 y x) z)","z","0",0.138916015625],["(/.f64 (*.f64 y x) z)","x","-inf",0.14990234375],["(/.f64 (*.f64 y x) z)","x","inf",0.174072265625],["(/.f64 (*.f64 y x) z)","x","0",0.14013671875],["(/.f64 (*.f64 y x) z)","y","-inf",0.155029296875],["(/.f64 (*.f64 y x) z)","y","inf",0.180908203125],["(/.f64 (*.f64 y x) z)","y","0",0.1669921875]],"time":1.864990234375,"type":"series"},{"count":[[1,41]],"egraph":[[2,1731,7,0.017470832999999998],[1,125,7,0.002131542],[0,6,7,0.000133792]],"inputs":[["(/.f64 (*.f64 y x) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 y z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) 2) (cbrt.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 y z) x)) (sqrt.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (sqrt.f64 (*.f64 y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 y)) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y 1) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y x)) 1) (/.f64 (sqrt.f64 (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 (cbrt.f64 z) 2)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 z) 2)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 (*.f64 y x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (*.f64 y x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 z)) (/.f64 x (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 z)) (/.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 (*.f64 y x) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (*.f64 y x)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 y z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 y z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 y z) x)))))))"]],"rules":[["egg-rr",41]],"stop":[["node limit",1]],"time":35.251953125,"type":"rewrite"},{"count":[[41,41]],"egraph":[[0,0,0,2.0125e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.485107421875,"type":"simplify"},{"compiler":[[405,154]],"time":4.125,"type":"eval"},{"alts":[["(*.f64 y (/.f64 x z))","fresh",5.976413351403622],["(/.f64 x (/.f64 z y))","done",6.256013825036774],["(/.f64 (*.f64 y x) z)","done",5.3286757156839775],["(*.f64 (/.f64 1 z) (*.f64 y x))","next",5.402894465361215]],"compiler":[[9,6],[9,6],[9,6],[11,8],[9,6],[11,8]],"count":[[45,4]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[41,1],"picked":[1,1]}],"min-error":[0],"time":7.29296875,"type":"prune"},{"compiler":[[21,11]],"locations":[["(*.f64 (/.f64 1 z) (*.f64 y x))",5.260494086098789,true]],"time":4.7939453125,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 1 z) (*.f64 y x))","x","-inf",0.1640625],["(*.f64 (/.f64 1 z) (*.f64 y x))","x","inf",0.14599609375],["(*.f64 (/.f64 1 z) (*.f64 y x))","x","0",0.156005859375],["(*.f64 (/.f64 1 z) (*.f64 y x))","y","-inf",0.14892578125],["(*.f64 (/.f64 1 z) (*.f64 y x))","y","inf",0.14794921875],["(*.f64 (/.f64 1 z) (*.f64 y x))","y","0",0.157958984375],["(*.f64 (/.f64 1 z) (*.f64 y x))","z","-inf",0.154052734375],["(*.f64 (/.f64 1 z) (*.f64 y x))","z","inf",0.154052734375],["(*.f64 (/.f64 1 z) (*.f64 y x))","z","0",0.196044921875]],"time":1.51904296875,"type":"series"},{"count":[[1,26]],"egraph":[[2,1940,7,0.018900792],[1,159,7,0.0027090839999999996],[0,8,7,0.000197542]],"inputs":[["(*.f64 (/.f64 1 z) (*.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (/.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (/.f64 z (cbrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 y x)) (/.f64 z (sqrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 (pow.f64 z -2) z) (pow.f64 (*.f64 y x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 y x) 3) (/.f64 (pow.f64 z -2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 y z))))))))"]],"rules":[["egg-rr",26]],"stop":[["node limit",1]],"time":35.862060546875,"type":"rewrite"},{"count":[[62,27]],"egraph":[[4,17,252,0.000277374],[3,16,252,0.000218208],[2,13,252,0.000159708],[1,9,252,0.00010283300000000001],[0,6,252,5.1958e-5]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))"]],"stop":[["saturated",1]],"time":13.85205078125,"type":"simplify"},{"compiler":[[224,95]],"time":2.697998046875,"type":"eval"},{"alts":[["(*.f64 y (/.f64 x z))","next",5.976413351403622],["(/.f64 x (/.f64 z y))","done",6.256013825036774],["(/.f64 (*.f64 y x) z)","done",5.3286757156839775],["(*.f64 (/.f64 1 z) (*.f64 y x))","done",5.402894465361215]],"compiler":[[9,6],[9,6],[9,6],[11,8],[9,6]],"count":[[31,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[27,0],"picked":[1,1]}],"min-error":[0],"time":4.743896484375,"type":"prune"},{"compiler":[[15,6]],"locations":[["(*.f64 y (/.f64 x z))",5.77955225723993,true]],"time":3.27294921875,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 y (/.f64 x z))","z","-inf",0.158935546875],["(*.f64 y (/.f64 x z))","z","inf",0.35888671875],["(*.f64 y (/.f64 x z))","z","0",0.139892578125],["(*.f64 y (/.f64 x z))","x","-inf",0.152099609375],["(*.f64 y (/.f64 x z))","x","inf",0.1669921875],["(*.f64 y (/.f64 x z))","x","0",0.140869140625],["(*.f64 y (/.f64 x z))","y","-inf",0.14990234375],["(*.f64 y (/.f64 x z))","y","inf",0.169921875],["(*.f64 y (/.f64 x z))","y","0",0.174072265625]],"time":1.7060546875,"type":"series"},{"count":[[1,22]],"egraph":[[2,1672,7,0.016790707000000002],[1,125,7,0.002123291],[0,6,7,0.000135958]],"inputs":[["(*.f64 y (/.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (/.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (/.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (/.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (/.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (/.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (/.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (/.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (/.f64 x z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x z) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (/.f64 x z))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":33.839111328125,"type":"rewrite"},{"count":[[58,23]],"egraph":[[4,17,252,0.000275375],[3,16,252,0.000217083],[2,13,252,0.000158541],[1,9,252,0.000102333],[0,6,252,5.2e-5]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))"]],"stop":[["saturated",1]],"time":13.5419921875,"type":"simplify"},{"compiler":[[179,75]],"time":2.48388671875,"type":"eval"},{"alts":[["(*.f64 y (/.f64 x z))","done",5.976413351403622],["(/.f64 x (/.f64 z y))","done",6.256013825036774],["(/.f64 (*.f64 y x) z)","done",5.3286757156839775],["(*.f64 (/.f64 1 z) (*.f64 y x))","done",5.402894465361215]],"compiler":[[9,6],[9,6],[9,6],[11,8]],"count":[[27,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[23,0],"picked":[1,1]}],"min-error":[0],"time":4.001953125,"type":"prune"},{"accuracy":[0.64453125],"baseline":[5.3286757156839775],"branch":[["x",2.6328125,2],["y",3.0904334120550225,4],["z",4.165851911079389,2],["t",3.719690198343172,2],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))",2.1438618392388737,3],["(/.f64 (*.f64 (/.f64 y z) t) t)",0.88671875,4],["(/.f64 y z)",0.64453125,4]],"compiler":[[5,4],[5,4],[5,4],[5,4],[13,8],[11,7],[7,5],[44,23]],"count":[[6,4]],"inputs":[["(*.f64 (/.f64 1 z) (*.f64 y x))","(*.f64 y (/.f64 x z))","(/.f64 (*.f64 y x) z)","(*.f64 (/.f64 1 z) (/.f64 x (/.f64 1 y)))","(/.f64 x (/.f64 z y))","(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))"]],"link":["."],"name":["Graphics.Rendering.Chart.Backend.Diagrams:calcFontMetrics from Chart-diagrams-1.5.1, B"],"oracle":[23.750386436980477],"outputs":[["(/.f64 x (/.f64 z y))","(/.f64 (*.f64 y x) z)","(/.f64 x (/.f64 z y))","(*.f64 y (/.f64 x z))"]],"time":77.488037109375,"times":[["x",7.090087890625],["y",14.26611328125],["z",10.974853515625],["t",7.3759765625],["(*.f64 x (/.f64 (*.f64 (/.f64 y z) t) t))",10.7529296875],["(/.f64 (*.f64 (/.f64 y z) t) t)",12.824951171875],["(/.f64 y z)",12.948974609375]],"type":"regimes"},{"bstep":[[3.034765323153755e+144,3.9252354298342665e+144,0.031005859375],[3.7252335e-316,2.80248348e-315,0.031005859375],[-1.4004393448317896e-212,-5.1940454052381755e-213,0.094970703125]],"compiler":[[13,9],[7,5]],"method":["left-value","left-value","left-value"],"time":0.25,"type":"bsearch"},{"compiler":[[42,20]],"egraph":[[1,23,55,6.408299999999999e-5],[0,21,55,3.5e-5]],"inputs":[["(if (<=.f64 (/.f64 y z) -7580654747562055/758065474756205534740712640850831325809026375545262017157740252942407691741394964028749223060862538061761587254458531838950966818415436714572405896016201728127175281260180617944465471499803928137335448825056869507271897877839872) (/.f64 x (/.f64 z y)) (if (<=.f64 (/.f64 y z) 101201127/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784) (/.f64 (*.f64 y x) z) (if (<=.f64 (/.f64 y z) 3499999999999999823171229431452475665453972983986290458991151643863027081164611321367874091978889369455110319705354959634850918463030426540703744) (/.f64 x (/.f64 z y)) (*.f64 y (/.f64 x z)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 y z) -7580654747562055/758065474756205534740712640850831325809026375545262017157740252942407691741394964028749223060862538061761587254458531838950966818415436714572405896016201728127175281260180617944465471499803928137335448825056869507271897877839872) (/.f64 x (/.f64 z y)) (if (<=.f64 (/.f64 y z) 101201127/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784) (/.f64 (*.f64 y x) z) (if (<=.f64 (/.f64 y z) 3499999999999999823171229431452475665453972983986290458991151643863027081164611321367874091978889369455110319705354959634850918463030426540703744) (/.f64 x (/.f64 z y)) (*.f64 y (/.f64 x z)))))"]],"stop":[["done",1],["saturated",1]],"time":9.01708984375,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[42,20],[42,20],[42,20]],"remove-preprocessing":[[]],"time":20.633056640625,"type":"end"}]
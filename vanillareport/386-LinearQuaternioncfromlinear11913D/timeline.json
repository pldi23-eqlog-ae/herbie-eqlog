[{"compiler":[[19,10]],"method":["search"],"sampling":[[12,0.397854136256683,0.600681735132639,0.0014641286106780171],[11,0.3276445827996213,0.6708912885897007,0.0014641286106780171],[10,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[9,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":114.43603515625,"type":"analyze"},{"outcomes":[["body",512,"invalid",15.3818359375,196],["body",256,"invalid",81.800048828125,1858],["body",1024,"invalid",20.73876953125,177],["body",512,"valid",43.206298828125,535],["body",1024,"valid",106.486328125,908],["body",2048,"valid",75.987548828125,499],["body",256,"valid",282.84619140625,6314]],"time":637.591064453125,"type":"sample"},{"compiler":[[18,9]],"egraph":[[0,3,3,2.083e-6],[5,7004,28,0.033585416],[4,4570,28,0.020634791],[3,1036,28,0.009276499],[2,332,40,0.0021167490000000002],[1,96,44,0.000607958],[0,24,76,0.000128416]],"inputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))","(-.f64 (+.f64 (-.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x x)) (*.f64 x z))","(-.f64 (+.f64 (-.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y y)) (*.f64 y x))","(-.f64 (+.f64 (-.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z z)) (*.f64 z y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))","(+.f64 (*.f64 y (-.f64 x y)) (-.f64 (*.f64 y y) (*.f64 y z)))","(-.f64 (fma.f64 x y 0) (*.f64 y z))","(-.f64 (*.f64 x y) (*.f64 y z))","(*.f64 y (-.f64 x z))","(-.f64 (+.f64 (-.f64 (*.f64 y x) (*.f64 x x)) (*.f64 x x)) (*.f64 x z))","(+.f64 (*.f64 x (-.f64 y x)) (-.f64 (*.f64 x x) (*.f64 x z)))","(-.f64 (fma.f64 x y 0) (*.f64 x z))","(fma.f64 x (neg.f64 z) (*.f64 x y))","(*.f64 x (-.f64 y z))","(-.f64 (+.f64 (-.f64 (*.f64 z y) (*.f64 y y)) (*.f64 y y)) (*.f64 y x))","(+.f64 (*.f64 y (-.f64 z y)) (-.f64 (*.f64 y y) (*.f64 x y)))","(-.f64 (fma.f64 y z 0) (*.f64 x y))","(-.f64 (*.f64 y z) (*.f64 x y))","(*.f64 y (-.f64 z x))","(-.f64 (+.f64 (-.f64 (*.f64 x z) (*.f64 z z)) (*.f64 z z)) (*.f64 z y))","(+.f64 (*.f64 z (-.f64 x z)) (-.f64 (*.f64 z z) (*.f64 y z)))","(-.f64 (fma.f64 x z 0) (*.f64 y z))","(-.f64 (*.f64 x z) (*.f64 y z))","(*.f64 z (-.f64 x y))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":57.9248046875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,6977,7,0.11086554300000001],[12,6977,7,0.090731877],[11,6977,7,0.081056168],[10,6952,7,0.070132293],[9,6777,7,0.058177377],[8,6447,7,0.048519752],[7,5778,7,0.039612252],[6,4782,7,0.031141794],[5,3040,7,0.021938544],[4,902,7,0.009942752000000001],[3,278,7,0.002356168],[2,97,10,0.000737501],[1,29,11,0.000266126],[0,10,19,6.9042e-5]],"inputs":[["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))","(+.f64 (*.f64 y (-.f64 x y)) (-.f64 (*.f64 y y) (*.f64 y z)))","(-.f64 (fma.f64 x y 0) (*.f64 y z))","(fma.f64 x y (*.f64 y (neg.f64 z)))","(*.f64 y (-.f64 x z))"]],"stop":[["node limit",1]],"time":125.09619140625,"type":"simplify"},{"compiler":[[23,11]],"time":0.40087890625,"type":"eval"},{"alts":[["(*.f64 y (-.f64 x z))","next",0.00390625]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.798095703125,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 y (-.f64 x z))",0.00390625,true]],"time":3.0419921875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 y (-.f64 x z))","z","-inf",0.27099609375],["(*.f64 y (-.f64 x z))","z","inf",0.281005859375],["(*.f64 y (-.f64 x z))","z","0",0.259765625],["(*.f64 y (-.f64 x z))","x","-inf",0.485107421875],["(*.f64 y (-.f64 x z))","x","inf",0.344970703125],["(*.f64 y (-.f64 x z))","x","0",0.248046875],["(*.f64 y (-.f64 x z))","y","-inf",0.364013671875],["(*.f64 y (-.f64 x z))","y","inf",0.35302734375],["(*.f64 y (-.f64 x z))","y","0",0.453857421875]],"time":3.1650390625,"type":"series"},{"count":[[1,19]],"egraph":[[2,1784,7,0.017836750000000002],[1,129,7,0.0023497500000000003],[0,6,7,0.0001445]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) (pow.f64 z 3)) y) (fma.f64 x x (*.f64 z (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 z z)) y) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (pow.f64 x 3) (pow.f64 z 3))) (fma.f64 x x (*.f64 z (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (*.f64 x x) (*.f64 z z))) (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (-.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (-.f64 x z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 x z) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (-.f64 x z))))))))"]],"rules":[["egg-rr",19]],"stop":[["node limit",1]],"time":35.296875,"type":"rewrite"},{"count":[[43,25]],"egraph":[[10,744,156,0.009197041],[9,730,156,0.007656791],[8,576,156,0.006063666],[7,410,156,0.003977],[6,254,156,0.00243375],[5,138,156,0.0013283750000000001],[4,86,156,0.000757792],[3,58,156,0.000468208],[2,35,156,0.000286833],[1,18,210,0.000152333],[0,10,210,6.3292e-5]],"inputs":[["(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(-.f64 (*.f64 y x) (*.f64 y z))","(*.f64 y (-.f64 x z))"]],"stop":[["saturated",1]],"time":23.464111328125,"type":"simplify"},{"compiler":[[221,88]],"time":2.587890625,"type":"eval"},{"alts":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","next",0.0078125],["(*.f64 y (-.f64 x z))","done",0.00390625]],"compiler":[[11,7],[8,5],[11,7]],"count":[[26,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[25,1],"picked":[1,1]}],"min-error":[0],"time":4.291015625,"type":"prune"},{"compiler":[[23,7]],"locations":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))",0.0078125,true]],"time":4.75,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","z","-inf",0.197021484375],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","z","inf",0.246826171875],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","z","0",0.3251953125],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","y","-inf",0.31201171875],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","y","inf",0.55908203125],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","y","0",0.60302734375],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","x","-inf",0.242919921875],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","x","inf",0.552001953125],["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","x","0",0.4150390625]],"time":3.56396484375,"type":"series"},{"count":[[1,44]],"egraph":[[2,2563,7,0.019973334],[1,176,7,0.003227376],[0,8,9,0.000179917]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (+.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x y) 2) (*.f64 y (+.f64 x z))) (/.f64 (pow.f64 (*.f64 y z) 2) (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (/.f64 1 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) (pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 2) (cbrt.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y (+.f64 x z))) (sqrt.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (/.f64 1 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (+.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 y z))) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z))) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y (+.f64 x z)) (pow.f64 (*.f64 y (+.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (+.f64 (pow.f64 (*.f64 y z) 2) (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 (*.f64 x y) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3))) (neg.f64 (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2)) (neg.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 y z) 3)) (-.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2) (*.f64 (*.f64 x y) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (*.f64 x y) 2)) (-.f64 (*.f64 y z) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (+.f64 x z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (+.f64 x z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (+.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (cbrt.f64 (*.f64 y z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 y z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 y z))))))"]],"rules":[["egg-rr",44]],"stop":[["node limit",1]],"time":38.7451171875,"type":"rewrite"},{"count":[[80,52]],"egraph":[[7,650,240,0.007968542],[6,609,240,0.006422375000000001],[5,494,240,0.0047406670000000005],[4,310,240,0.00273075],[3,174,240,0.001454584],[2,100,240,0.000701917],[1,48,240,0.000317792],[0,17,330,0.000104833]],"inputs":[["(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(fma.f64 y x (neg.f64 (*.f64 y z)))","(*.f64 y (-.f64 x z))"]],"stop":[["saturated",1]],"time":22.65087890625,"type":"simplify"},{"compiler":[[616,201]],"time":6.0791015625,"type":"eval"},{"alts":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","done",0.0078125],["(*.f64 y (-.f64 x z))","done",0.00390625]],"compiler":[[11,7],[8,5]],"count":[[54,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[52,0],"picked":[1,1]}],"min-error":[0],"time":7.4560546875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[18,9],[31,14]],"count":[[3,1]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (neg.f64 z) y))","(*.f64 y (-.f64 x z))","(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, D"],"oracle":[13.01656383987639],"outputs":[["(*.f64 y (-.f64 x z))"]],"time":13.31884765625,"times":[["x",3.12109375],["y",3.0791015625],["z",3.223876953125],["(-.f64 (+.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y)) (*.f64 y z))",3.162109375]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[4,17,7,9.1208e-5],[3,16,7,7.2541e-5],[2,14,7,5.3373999999999994e-5],[1,9,7,3.4833e-5],[0,6,7,1.5041e-5]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 x z))"]],"stop":[["done",1],["saturated",1]],"time":8.233154296875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":7.511962890625,"type":"end"}]
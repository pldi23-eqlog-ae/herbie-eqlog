[{"compiler":[[6,4]],"method":["search"],"sampling":[[12,0.4973156452178955,0.0009760856628417969,0.5017082691192627],[11,0.4968276023864746,0.0019521713256835938,0.5012202262878418],[10,0.4958515167236328,0.0039043426513671875,0.500244140625],[9,0.4958515167236328,0.007808685302734375,0.4963397979736328],[8,0.4919471740722656,0.01561737060546875,0.4924354553222656],[7,0.48413848876953125,0.0312347412109375,0.48462677001953125],[6,0.4685211181640625,0.062469482421875,0.4690093994140625],[5,0.437286376953125,0.12493896484375,0.437774658203125],[4,0.37481689453125,0.2498779296875,0.37530517578125],[3,0.2498779296875,0.499755859375,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.4990234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.267822265625,9],["body",256,"valid",306.307373046875,8256]],"time":314.552978515625,"type":"sample"},{"compiler":[[5,3]],"egraph":[[0,1,1,2.75e-6],[1,5,6,7.2084e-5],[0,4,6,4.7459e-5]],"inputs":[["0"],["(*.f64 x (log.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 x (log.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":24.356201171875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,5,6,7.791699999999999e-5],[0,4,6,5.3417e-5]],"inputs":[["(*.f64 x (log.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (log.f64 x))"]],"stop":[["saturated",1]],"time":12.94482421875,"type":"simplify"},{"compiler":[[5,3]],"time":0.254150390625,"type":"eval"},{"alts":[["(*.f64 x (log.f64 x))","next",0.28125]],"compiler":[[5,3],[5,3]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.28125],"time":0.786865234375,"type":"prune"},{"compiler":[[8,3]],"locations":[["(*.f64 x (log.f64 x))",0.28125,true]],"time":3.0009765625,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (log.f64 x))","x","-inf",10.927978515625],["(*.f64 x (log.f64 x))","x","inf",5.85107421875],["(*.f64 x (log.f64 x))","x","0",21.004150390625]],"time":37.91015625,"type":"series"},{"count":[[1,23]],"egraph":[[2,887,6,0.016013916],[1,76,6,0.001248875],[0,4,6,0.000109792]],"inputs":[["(*.f64 x (log.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 x (+.f64 x x)))) (log.f64 (cbrt.f64 (pow.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 x x))) (log.f64 (sqrt.f64 (pow.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 (*.f64 x (log.f64 x))) 3) 1) (+.f64 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) (+.f64 1 (*.f64 x (log.f64 x)))) (+.f64 1 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (log.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x (log.f64 x))))) (sqrt.f64 (log.f64 (*.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x (log.f64 x)))) 2)) (cbrt.f64 (log.f64 (*.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x (log.f64 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (log.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (log.f64 x)))) 2))))))"]],"rules":[["egg-rr",23]],"stop":[["node limit",1]],"time":35.18896484375,"type":"rewrite"},{"count":[[35,27]],"egraph":[[19,5710,72,0.121030788],[18,5686,72,0.104259997],[17,5686,72,0.09316524699999999],[16,5682,72,0.085409247],[15,5668,72,0.080096372],[14,5632,72,0.072828747],[13,5496,72,0.066972331],[12,4836,72,0.057663664],[11,3576,72,0.048162914],[10,3574,72,0.035781622],[9,3564,72,0.031503830999999996],[8,3398,72,0.026222747999999997],[7,3030,72,0.01972429],[6,1981,72,0.015339165],[5,704,72,0.008171582],[4,275,72,0.0026233740000000004],[3,134,72,0.001112499],[2,60,72,0.000476041],[1,33,72,0.00020487400000000002],[0,16,72,8.4916e-5]],"inputs":[["(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 (log.f64 x) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (log.f64 x) x)","(*.f64 x (log.f64 x))","(*.f64 (log.f64 x) x)","(*.f64 x (log.f64 x))","(*.f64 (log.f64 x) x)","(*.f64 x (log.f64 x))","(*.f64 (log.f64 x) x)","(*.f64 x (log.f64 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 x (log.f64 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 x (log.f64 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 x (log.f64 x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 x (log.f64 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 x (log.f64 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 x (log.f64 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 x (log.f64 x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(*.f64 x (log.f64 x))"]],"stop":[["node limit",1]],"time":139.921875,"type":"simplify"},{"compiler":[[243,109]],"time":3.3681640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (pow.f64 (+.f64 1 (*.f64 x (log.f64 x))) 3) 1) (+.f64 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) (+.f64 1 (*.f64 x (log.f64 x)))) (+.f64 1 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1))))","fresh",49.82303742201135],["(-.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1)","fresh",29.15763948283002],["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","next",0.27734375],["(pow.f64 (sqrt.f64 (*.f64 x (log.f64 x))) 2)","fresh",32.31906132814754],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912]],"compiler":[[36,22],[9,7],[9,7],[8,6],[8,6],[36,22],[9,7],[9,7],[8,6],[8,6]],"count":[[28,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[27,5],"picked":[1,0]}],"min-error":[0.171875],"time":5.3408203125,"type":"prune"},{"compiler":[[25,18]],"locations":[["(log.f64 (/.f64 1 x))",0.01171875,true],["(*.f64 (log.f64 (/.f64 1 x)) x)",0.28125,true]],"time":8.97998046875,"type":"localize"},{"count":[[2,16]],"series":[["(log.f64 (/.f64 1 x))","x","-inf",0.1689453125],["(log.f64 (/.f64 1 x))","x","inf",0.14599609375],["(log.f64 (/.f64 1 x))","x","0",0.170166015625],["(*.f64 (log.f64 (/.f64 1 x)) x)","x","-inf",5.087158203125],["(*.f64 (log.f64 (/.f64 1 x)) x)","x","inf",0.327880859375],["(*.f64 (log.f64 (/.f64 1 x)) x)","x","0",1.97119140625]],"time":7.97802734375,"type":"series"},{"count":[[2,38]],"egraph":[[2,1324,13,0.014861],[1,117,13,0.002009625],[0,6,13,0.000177333]],"inputs":[["(*.f64 (log.f64 (/.f64 1 x)) x)","(log.f64 (/.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (neg.f64 (log.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (neg.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (neg.f64 (log.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (neg.f64 (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (neg.f64 (log.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (neg.f64 (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (/.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (neg.f64 (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (neg.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 (/.f64 1 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (neg.f64 (log.f64 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 x -1/2)) (log.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 x -2))) (log.f64 (/.f64 1 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (neg.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 -1) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 2) (cbrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (log.f64 x))) (sqrt.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (log.f64 x) 3)) (+.f64 0 (+.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 0 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (log.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (neg.f64 (log.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (neg.f64 (log.f64 x))))))))"]],"rules":[["egg-rr",25],["egg-rr",13]],"stop":[["node limit",1]],"time":34.458984375,"type":"rewrite"},{"count":[[54,42]],"egraph":[[20,7930,104,0.117757625],[19,7644,104,0.111095292],[18,7132,104,0.103347667],[17,3568,104,0.092022875],[16,3564,104,0.068167542],[15,3552,104,0.062676208],[14,3518,104,0.056101791],[13,3377,104,0.050398041],[12,3073,104,0.043173832999999995],[11,2327,104,0.035457708],[10,1914,104,0.026213541],[9,1817,104,0.020035123999999998],[8,1476,104,0.016055833],[7,874,104,0.009597624999999999],[6,453,104,0.004229083],[5,227,104,0.002121],[4,110,104,0.0010508330000000001],[3,66,104,0.000534917],[2,44,104,0.00031174999999999996],[1,22,104,0.000159458],[0,12,104,6.6792e-5]],"inputs":[["(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(neg.f64 (log.f64 x))"]],"stop":[["node limit",1]],"time":139.427001953125,"type":"simplify"},{"compiler":[[434,253]],"time":5.648193359375,"type":"eval"},{"alts":[["(*.f64 -1 (*.f64 (+.f64 (log.f64 (cbrt.f64 (pow.f64 x -2))) (log.f64 (/.f64 1 (cbrt.f64 x)))) x))","fresh",31.58345626692727],["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","done",0.27734375],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x)) x))","next",0.305351269536884],["(pow.f64 (sqrt.f64 (*.f64 x (log.f64 x))) 2)","fresh",32.31906132814754],["(/.f64 (-.f64 (pow.f64 (+.f64 1 (*.f64 x (log.f64 x))) 3) 1) (+.f64 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) (+.f64 1 (*.f64 x (log.f64 x)))) (+.f64 1 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1))))","fresh",49.82303742201135],["(*.f64 -1 (pow.f64 (sqrt.f64 (*.f64 x (neg.f64 (log.f64 x)))) 2))","fresh",32.30638510745287],["(*.f64 -1 (*.f64 (expm1.f64 (log1p.f64 (neg.f64 (log.f64 x)))) x))","fresh",32.51925662814679],["(*.f64 -1 (*.f64 (pow.f64 (sqrt.f64 (neg.f64 (log.f64 x))) 2) x))","fresh",32.310585058610656],["(*.f64 -1 (*.f64 (pow.f64 (pow.f64 (neg.f64 (log.f64 x)) 3) 1/3) x))","fresh",32.77951323212604],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912],["(*.f64 -1 (*.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 2)) x))","fresh",0.7283491942105467]],"compiler":[[16,13],[9,7],[15,9],[8,6],[36,22],[11,9],[10,8],[11,9],[12,10],[8,6],[16,10],[16,13],[15,9],[8,6],[36,22],[11,9],[10,8],[11,9],[12,10],[8,6],[16,10]],"count":[[47,11]],"kept":[{"done":[0,0],"fresh":[4,3],"new":[42,7],"picked":[1,1]}],"min-error":[0.08203125],"time":10.805908203125,"type":"prune"},{"compiler":[[54,20]],"locations":[["(*.f64 (/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x)) x)",0.28125,true],["(/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x))",0.4850387695368841,true],["(*.f64 (log.f64 x) (log.f64 x))",0.5201950195368841,true]],"time":9.448974609375,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 (/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x)) x)","x","-inf",0.18603515625],["(*.f64 (/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x)) x)","x","inf",0.2587890625],["(*.f64 (/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x)) x)","x","0",0.47705078125],["(/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x))","x","-inf",0.286865234375],["(/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x))","x","inf",0.364990234375],["(/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x))","x","0",0.28515625],["(*.f64 (log.f64 x) (log.f64 x))","x","-inf",0.4208984375],["(*.f64 (log.f64 x) (log.f64 x))","x","inf",0.406005859375],["(*.f64 (log.f64 x) (log.f64 x))","x","0",0.573974609375]],"time":3.4189453125,"type":"series"},{"count":[[3,88]],"egraph":[[2,2746,15,0.018636125],[1,177,15,0.004152042],[0,8,35,0.000227959]],"inputs":[["(*.f64 (log.f64 x) (log.f64 x))","(/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x))","(*.f64 (/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 x) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (log.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (pow.f64 (log.f64 x) 4)) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (pow.f64 (log.f64 x) 2)) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 x) (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 2) (*.f64 (log.f64 x) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 2) (*.f64 (/.f64 1 (log.f64 x)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 1 (log.f64 x)) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 3) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 6) (+.f64 0 (-.f64 (pow.f64 (log.f64 x) 4) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 x)) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 x) 2)) (log.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 x)) (log.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) (*.f64 (log.f64 x) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2) (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (pow.f64 (cbrt.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (neg.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 x)) (sqrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 x)) (neg.f64 (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 x)) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (/.f64 (pow.f64 (log.f64 x) 2) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) 2) (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 x) 1) (/.f64 (log.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) 1) (/.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 x) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (/.f64 (log.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (sqrt.f64 (log.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (log.f64 x))) (sqrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 2) (/.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (log.f64 x) (*.f64 x (pow.f64 (log.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (log.f64 x) 2)) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) 2)) 1) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) 2)) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (pow.f64 (log.f64 x) 2)) (sqrt.f64 (log.f64 x))) (sqrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (log.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 x) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (log.f64 x))))))))"]],"rules":[["egg-rr",20],["egg-rr",41],["egg-rr",27]],"stop":[["node limit",1]],"time":43.404052734375,"type":"rewrite"},{"count":[[124,96]],"egraph":[[6,7193,228,0.034438125],[5,3939,228,0.023643083000000002],[4,1484,228,0.010681874000000001],[3,396,228,0.003608333],[2,127,228,0.001235333],[1,62,228,0.000425458],[0,23,228,0.000145208]],"inputs":[["(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(log.f64 (/.f64 1 x))","(log.f64 (/.f64 1 x))","(log.f64 (/.f64 1 x))","(log.f64 (/.f64 1 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 -1 (*.f64 x (log.f64 x)))","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 (log.f64 (/.f64 1 x)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 x (log.f64 x)))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 (log.f64 (/.f64 1 x)) x)","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))","(neg.f64 (*.f64 x (log.f64 x)))","(*.f64 x (neg.f64 (log.f64 x)))","(*.f64 (log.f64 x) (neg.f64 x))"]],"stop":[["node limit",1]],"time":51.7041015625,"type":"simplify"},{"compiler":[[1243,758]],"time":15.927001953125,"type":"eval"},{"alts":[["(*.f64 -1 (*.f64 (expm1.f64 (log1p.f64 (neg.f64 (log.f64 x)))) x))","fresh",32.51925662814679],["(*.f64 -1 (*.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (cbrt.f64 (log.f64 x))) x))","fresh",0.7283491942105467],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 1 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 4)))) (log.f64 x)) x))","fresh",0.6398202637479348],["(pow.f64 (sqrt.f64 (*.f64 x (log.f64 x))) 2)","fresh",32.31906132814754],["(/.f64 (-.f64 (pow.f64 (+.f64 1 (*.f64 x (log.f64 x))) 3) 1) (+.f64 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) (+.f64 1 (*.f64 x (log.f64 x)))) (+.f64 1 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1))))","fresh",49.82303742201135],["(*.f64 -1 (pow.f64 (sqrt.f64 (*.f64 x (neg.f64 (log.f64 x)))) 2))","fresh",32.30638510745287],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) 3)) (log.f64 x)) x))","fresh",1.2354062929481882],["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","done",0.27734375],["(*.f64 -1 (*.f64 (pow.f64 (sqrt.f64 (neg.f64 (log.f64 x))) 2) x))","fresh",32.310585058610656],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))) (log.f64 x)) x))","next",0.5117951172213042],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (expm1.f64 (log1p.f64 (pow.f64 (log.f64 x) 2)))) (log.f64 x)) x))","fresh",1.6805269796553126]],"compiler":[[10,8],[15,10],[21,15],[8,6],[36,22],[11,9],[17,13],[9,7],[11,9],[19,13],[8,6],[16,12],[10,8],[15,10],[21,15],[8,6],[36,22],[11,9],[17,13],[11,9],[19,13],[8,6],[16,12]],"count":[[107,12]],"kept":[{"done":[1,1],"fresh":[9,6],"new":[96,5],"picked":[1,0]}],"min-error":[0.0546875],"time":15.947021484375,"type":"prune"},{"compiler":[[84,50]],"locations":[["(/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))",0.33203125,true],["(/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))) (log.f64 x))",0.4850387695368841,true],["(pow.f64 (log.f64 x) 4)",0.8942493165696377,true],["(pow.f64 (log.f64 x) 6)",1.1791773667116523,true]],"time":22.14697265625,"type":"localize"},{"count":[[4,40]],"series":[["(/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))","x","-inf",0.15087890625],["(/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))","x","inf",0.14111328125],["(/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))","x","0",0.168212890625],["(/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))) (log.f64 x))","x","-inf",0.1669921875],["(/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))) (log.f64 x))","x","inf",0.15478515625],["(/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))) (log.f64 x))","x","0",0.173828125],["(pow.f64 (log.f64 x) 4)","x","-inf",0.433837890625],["(pow.f64 (log.f64 x) 4)","x","inf",0.35107421875],["(pow.f64 (log.f64 x) 4)","x","0",0.35498046875],["(pow.f64 (log.f64 x) 6)","x","-inf",0.675048828125],["(pow.f64 (log.f64 x) 6)","x","inf",0.558837890625],["(pow.f64 (log.f64 x) 6)","x","0",0.6669921875]],"time":4.15380859375,"type":"series"},{"count":[[4,172]],"egraph":[[2,3546,21,0.019909083],[1,253,21,0.004699708],[0,11,31,0.000363666]],"inputs":[["(pow.f64 (log.f64 x) 6)","(pow.f64 (log.f64 x) 4)","(/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))) (log.f64 x))","(/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 x) 4)) (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 x) 4) 0) (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (log.f64 x) 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 x) 6) 3) (pow.f64 (pow.f64 (log.f64 x) -4) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 3) (neg.f64 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 8)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) 6) (pow.f64 (cbrt.f64 (log.f64 x)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (log.f64 x)) 6) (pow.f64 (sqrt.f64 (log.f64 x)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 x) 2) 3/2) (pow.f64 (pow.f64 (log.f64 x) 2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) (pow.f64 (log.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) 6)) (pow.f64 (log.f64 x) -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 x) 4) (cbrt.f64 (pow.f64 (log.f64 x) 4))) (pow.f64 (cbrt.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 x) 4) (log.f64 x)) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (pow.f64 (log.f64 x) -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (pow.f64 (log.f64 x) 6) 3) (pow.f64 (log.f64 x) 12))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 8) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (pow.f64 (log.f64 x) 6) 3)) (+.f64 0 (+.f64 (pow.f64 (log.f64 x) 12) (*.f64 0 (pow.f64 (log.f64 x) 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (log.f64 x) 12)) (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) 6)) (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 x) 12))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (log.f64 x) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 x) 6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 x) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 x) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 6 (log.f64 (log.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 x) 4) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (log.f64 x) 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) (pow.f64 (log.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 3) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 8) (pow.f64 (log.f64 x) -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 12) (*.f64 (pow.f64 (log.f64 x) -4) (pow.f64 (log.f64 x) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (cbrt.f64 (pow.f64 (log.f64 x) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 8)) (cbrt.f64 (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 8)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) 4) (pow.f64 (cbrt.f64 (log.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (log.f64 x)) 4) (pow.f64 (sqrt.f64 (log.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 x) 8))) (cbrt.f64 (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 x) 2) (cbrt.f64 (pow.f64 (log.f64 x) 4))) (pow.f64 (cbrt.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (pow.f64 (log.f64 x) -2) (pow.f64 (log.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 8) (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 12) (pow.f64 (log.f64 x) 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4)) (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (log.f64 x) 12)) (+.f64 0 (+.f64 (pow.f64 (log.f64 x) 8) (*.f64 0 (pow.f64 (log.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 0 (pow.f64 (log.f64 x) 12)) (+.f64 0 (-.f64 (pow.f64 (log.f64 x) 8) (*.f64 0 (pow.f64 (log.f64 x) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 x) 12) 0) (+.f64 (pow.f64 (log.f64 x) 8) (-.f64 0 (*.f64 (pow.f64 (log.f64 x) 4) 0))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (log.f64 x) 8)) (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 x) 8) 0) (-.f64 (pow.f64 (log.f64 x) 4) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) 6)) (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 x) 8))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 x) 12))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 4 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (log.f64 x) 4) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 x) 8)) (cbrt.f64 (pow.f64 (log.f64 x) 4)) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 x)) (log.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 x) 2)) (log.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) (*.f64 (log.f64 x) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2) (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 3) (sqrt.f64 (pow.f64 (log.f64 x) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (neg.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 x)) (pow.f64 (cbrt.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 x)) (sqrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 x)) (neg.f64 (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 x)) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (/.f64 (pow.f64 (log.f64 x) 2) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) 2) (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 x) 6) 1) (/.f64 (pow.f64 (log.f64 x) -4) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) 1) (/.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 x) 1) (/.f64 (log.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (/.f64 (pow.f64 (log.f64 x) -4) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 x) 6) (sqrt.f64 (log.f64 x))) (/.f64 (pow.f64 (log.f64 x) -4) (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (sqrt.f64 (log.f64 x))) (/.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (log.f64 x))) (sqrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 x) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (/.f64 (log.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 x) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (log.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (pow.f64 (log.f64 x) 4)) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (pow.f64 (log.f64 x) 2)) (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 4) (pow.f64 (log.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 4) (*.f64 (/.f64 1 (log.f64 x)) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 4) (*.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2) (*.f64 (/.f64 1 (log.f64 x)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 2) (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 3) (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 3) (*.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 x) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (cbrt.f64 (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (*.f64 (cbrt.f64 (log.f64 x)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (pow.f64 (cbrt.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (neg.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 x)) (*.f64 (sqrt.f64 (log.f64 x)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) 6) (neg.f64 (pow.f64 (log.f64 x) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -2) (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 x) -4) (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 x) (sqrt.f64 (log.f64 x))) (sqrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 8))) (sqrt.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 x) 3) 1) (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 x) 8))) (/.f64 (pow.f64 (log.f64 x) 6) (cbrt.f64 (pow.f64 (log.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 x) 4) (cbrt.f64 (pow.f64 (log.f64 x) 8))) (pow.f64 (cbrt.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 x) 3) (cbrt.f64 (pow.f64 (log.f64 x) 8))) (/.f64 (pow.f64 (log.f64 x) 3) (cbrt.f64 (pow.f64 (log.f64 x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 x) 4) 1) (pow.f64 (log.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4))) (pow.f64 (cbrt.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 x) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (cbrt.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 x) -2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (log.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 x) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 x)) 2))))))"]],"rules":[["egg-rr",49],["egg-rr",45],["egg-rr",43],["egg-rr",35]],"stop":[["node limit",1]],"time":47.3740234375,"type":"rewrite"},{"count":[[212,182]],"egraph":[[5,5014,228,0.023271124],[4,2220,228,0.012024124],[3,521,228,0.004481957],[2,129,244,0.001256541],[1,62,260,0.00045691600000000003],[0,24,260,0.000153416]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(*.f64 -1 (log.f64 x))","(log.f64 (/.f64 1 x))","(log.f64 (/.f64 1 x))","(log.f64 (/.f64 1 x))","(log.f64 (/.f64 1 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 6)","(pow.f64 (neg.f64 (log.f64 x)) 6)","(pow.f64 (log.f64 x) 6)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(pow.f64 (log.f64 (/.f64 1 x)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 4)","(pow.f64 (neg.f64 (log.f64 x)) 4)","(pow.f64 (log.f64 x) 4)","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(log.f64 (/.f64 1 x))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (log.f64 x))","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (log.f64 (/.f64 1 x)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)","(pow.f64 (log.f64 x) 2)"]],"stop":[["node limit",1]],"time":40.590087890625,"type":"simplify"},{"compiler":[[3503,2180]],"time":39.302978515625,"type":"eval"},{"alts":[["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (*.f64 (pow.f64 (log.f64 x) 2) (*.f64 (/.f64 1 (log.f64 x)) (log.f64 x)))) (log.f64 x)) x))","fresh",0.37537006837909415],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (*.f64 (*.f64 (pow.f64 (log.f64 x) 4) (log.f64 x)) (log.f64 x)) (pow.f64 (log.f64 x) 4))) (log.f64 x)) x))","fresh",0.5134163574528623],["(pow.f64 (sqrt.f64 (*.f64 x (log.f64 x))) 2)","fresh",32.31906132814754],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (*.f64 (*.f64 (pow.f64 (log.f64 x) 4) (cbrt.f64 (pow.f64 (log.f64 x) 4))) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (pow.f64 (log.f64 x) 4))) (log.f64 x)) x))","fresh",0.711166601663913],["(/.f64 (-.f64 (pow.f64 (+.f64 1 (*.f64 x (log.f64 x))) 3) 1) (+.f64 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) (+.f64 1 (*.f64 x (log.f64 x)))) (+.f64 1 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1))))","fresh",49.82303742201135],["(*.f64 -1 (pow.f64 (sqrt.f64 (*.f64 x (neg.f64 (log.f64 x)))) 2))","fresh",32.30638510745287],["(*.f64 -1 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (neg.f64 (cbrt.f64 (log.f64 x)))) x))","fresh",0.7283491942105467],["(*.f64 -1 (*.f64 (pow.f64 (sqrt.f64 (neg.f64 (log.f64 x))) 2) x))","fresh",32.310585058610656],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 x) 8))) (/.f64 (pow.f64 (log.f64 x) 6) (cbrt.f64 (pow.f64 (log.f64 x) 4))))) (log.f64 x)) x))","fresh",0.666576611432355],["(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","fresh",0.8020441895798912],["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (pow.f64 (log.f64 x) 2))))) (log.f64 x)) x))","fresh",0.7713879516636611]],"compiler":[[22,14],[25,15],[8,6],[31,21],[36,22],[11,9],[15,10],[11,9],[28,20],[8,6],[31,21]],"count":[[194,11]],"kept":[{"done":[1,0],"fresh":[10,5],"new":[182,6],"picked":[1,0]}],"min-error":[0.046875],"time":32.158935546875,"type":"prune"},{"accuracy":[0.27734375],"baseline":[0.27734375],"branch":[["x",0.27734375,1],["(*.f64 x (log.f64 x))",0.27734375,1],["(*.f64 x (log.f64 x))",0.27734375,1]],"compiler":[[2,1],[5,3],[5,3],[383,227]],"count":[[24,1]],"inputs":[["(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (*.f64 (pow.f64 (log.f64 x) 2) (*.f64 (/.f64 1 (log.f64 x)) (log.f64 x)))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (*.f64 (*.f64 (pow.f64 (log.f64 x) 4) (log.f64 x)) (log.f64 x)) (pow.f64 (log.f64 x) 4))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (*.f64 (*.f64 (pow.f64 (log.f64 x) 4) (cbrt.f64 (pow.f64 (log.f64 x) 4))) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (pow.f64 (log.f64 x) 4))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (neg.f64 (cbrt.f64 (log.f64 x)))) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (log.f64 x) 8))) (/.f64 (pow.f64 (log.f64 x) 6) (cbrt.f64 (pow.f64 (log.f64 x) 4))))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (*.f64 (cbrt.f64 (pow.f64 (log.f64 x) 4)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (pow.f64 (log.f64 x) 2))))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (cbrt.f64 (log.f64 x))) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 1 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 4)))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) 3)) (log.f64 x)) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (log.f64 x) 4))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (expm1.f64 (log1p.f64 (pow.f64 (log.f64 x) 2)))) (log.f64 x)) x))","(*.f64 -1 (*.f64 (+.f64 (log.f64 (cbrt.f64 (pow.f64 x -2))) (log.f64 (/.f64 1 (cbrt.f64 x)))) x))","(*.f64 -1 (*.f64 (/.f64 (-.f64 0 (*.f64 (log.f64 x) (log.f64 x))) (log.f64 x)) x))","(*.f64 -1 (pow.f64 (sqrt.f64 (*.f64 x (neg.f64 (log.f64 x)))) 2))","(*.f64 -1 (*.f64 (expm1.f64 (log1p.f64 (neg.f64 (log.f64 x)))) x))","(*.f64 -1 (*.f64 (pow.f64 (sqrt.f64 (neg.f64 (log.f64 x))) 2) x))","(*.f64 -1 (*.f64 (pow.f64 (pow.f64 (neg.f64 (log.f64 x)) 3) 1/3) x))","(*.f64 -1 (*.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (neg.f64 (log.f64 x))) 2)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 1 (*.f64 x (log.f64 x))) 3) 1) (+.f64 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) (+.f64 1 (*.f64 x (log.f64 x)))) (+.f64 1 (*.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1))))","(-.f64 (+.f64 1 (*.f64 x (log.f64 x))) 1)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(pow.f64 (sqrt.f64 (*.f64 x (log.f64 x))) 2)","(pow.f64 (cbrt.f64 (*.f64 x (log.f64 x))) 3)","(*.f64 x (log.f64 x))"]],"link":["."],"name":["Statistics.Distribution.Binomial:directEntropy from math-functions-0.1.5.2"],"oracle":[64.0],"outputs":[["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))"]],"time":38.114990234375,"times":[["x",15.260009765625],["(*.f64 x (log.f64 x))",8.330810546875],["(*.f64 x (log.f64 x))",8.4599609375]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[5,32,11,0.00020058400000000002],[4,30,11,0.00016020900000000002],[3,25,11,0.00011883400000000001],[2,20,11,7.8792e-5],[1,13,11,4.6124999999999996e-5],[0,8,11,2.3667e-5]],"inputs":[["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (log.f64 (/.f64 1 x)) x))","(neg.f64 (*.f64 x (log.f64 (/.f64 1 x))))","(*.f64 x (neg.f64 (log.f64 (/.f64 1 x))))","(*.f64 (log.f64 (/.f64 1 x)) (neg.f64 x))"]],"stop":[["fuel",1],["saturated",1]],"time":8.588134765625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.110107421875,"type":"end"}]
[{"compiler":[[7,5]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.2080078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.05078125,2],["body",256,"valid",215.831298828125,8256]],"time":223.0,"type":"sample"},{"compiler":[[6,4]],"egraph":[[0,1,1,1.084e-6],[12,390,7,0.005457127],[11,388,7,0.004575335],[10,366,7,0.0036755010000000003],[9,256,7,0.00267271],[8,135,7,0.001539418],[7,64,7,0.0008057510000000001],[6,42,7,0.0005085010000000001],[5,31,7,0.00035991800000000003],[4,26,7,0.000266751],[3,22,7,0.000197543],[2,17,7,0.00013679300000000002],[1,11,7,8.550100000000001e-5],[0,5,7,4.9209e-5]],"inputs":[["0"],["(*.f64 x (-.f64 x 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 x (-.f64 x 1))","(*.f64 x (+.f64 x -1))","(-.f64 (*.f64 x x) x)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":28.0830078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,390,7,0.0054177489999999995],[11,388,7,0.004536457],[10,366,7,0.0036375409999999998],[9,256,7,0.0026462079999999997],[8,135,7,0.001517874],[7,64,7,0.000795041],[6,42,7,0.000499583],[5,31,7,0.00034849899999999994],[4,26,7,0.000256333],[3,22,7,0.00018866599999999999],[2,17,7,0.00012904099999999999],[1,11,7,7.8499e-5],[0,5,7,4.3583e-5]],"inputs":[["(*.f64 x (-.f64 x 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 x 1))","(*.f64 x (+.f64 x -1))","(-.f64 (*.f64 x x) x)"]],"stop":[["saturated",1]],"time":15.739990234375,"type":"simplify"},{"compiler":[[11,6]],"time":0.26708984375,"type":"eval"},{"alts":[["(*.f64 x (-.f64 x 1))","next",0.01171875],["(-.f64 (*.f64 x x) x)","fresh",0.015625]],"compiler":[[6,4],[6,3],[6,4],[6,3]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":1.048828125,"type":"prune"},{"compiler":[[11,7]],"locations":[["(*.f64 x (-.f64 x 1))",0.01171875,true]],"time":2.712158203125,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (-.f64 x 1))","x","-inf",0.339111328125],["(*.f64 x (-.f64 x 1))","x","inf",0.39892578125],["(*.f64 x (-.f64 x 1))","x","0",0.35595703125]],"time":1.138916015625,"type":"series"},{"count":[[1,17]],"egraph":[[2,1325,7,0.014220708],[1,105,7,0.0018317499999999998],[0,5,7,0.00016125]],"inputs":[["(*.f64 x (-.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (+.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) x) (fma.f64 x x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 x 3) -1)) (fma.f64 x x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 x x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 x -1))))))))"]],"rules":[["egg-rr",17]],"stop":[["node limit",1]],"time":30.8369140625,"type":"rewrite"},{"count":[[29,23]],"egraph":[[7,7681,74,0.036825750000000004],[6,3567,74,0.019509584],[5,716,74,0.0063463339999999995],[4,193,74,0.0016460000000000001],[3,70,74,0.000626667],[2,32,74,0.000289333],[1,16,74,0.000143917],[0,7,83,5.475e-5]],"inputs":[["(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)"]],"stop":[["node limit",1]],"time":49.119140625,"type":"simplify"},{"compiler":[[171,112]],"time":2.8359375,"type":"eval"},{"alts":[["(*.f64 x (-.f64 x 1))","done",0.01171875],["(-.f64 (*.f64 x x) x)","next",0.015625]],"compiler":[[6,4],[6,3],[6,3]],"count":[[25,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[23,1],"picked":[1,1]}],"min-error":[0],"time":3.172119140625,"type":"prune"},{"compiler":[[10,3]],"locations":[["(-.f64 (*.f64 x x) x)",0.015625,true]],"time":2.447998046875,"type":"localize"},{"count":[[1,12]],"series":[["(-.f64 (*.f64 x x) x)","x","-inf",0.180908203125],["(-.f64 (*.f64 x x) x)","x","inf",0.238037109375],["(-.f64 (*.f64 x x) x)","x","0",0.298828125]],"time":0.764892578125,"type":"series"},{"count":[[1,36]],"egraph":[[2,1323,7,0.014098834000000001],[1,91,7,0.001814292],[0,4,7,0.000119875]],"inputs":[["(-.f64 (*.f64 x x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) x) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) x) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) x) (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x x) x)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) x)) 2) (cbrt.f64 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x x) x)) (sqrt.f64 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 6) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 x 4) (*.f64 x (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 4) (*.f64 x x)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (sqrt.f64 x)) (-.f64 x (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 x 4) (*.f64 x (fma.f64 x x x))) (-.f64 (pow.f64 x 6) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x x) (-.f64 (pow.f64 x 4) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 6) (pow.f64 x 3)) (+.f64 (pow.f64 x 4) (*.f64 x (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (*.f64 x x)) (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 6) (pow.f64 x 3))) (neg.f64 (+.f64 (pow.f64 x 4) (*.f64 x (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 4) (*.f64 x x))) (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) (pow.f64 (neg.f64 x) 3)) (+.f64 (pow.f64 x 4) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x x) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 x x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (cbrt.f64 x) 2) (neg.f64 x))))))"]],"rules":[["egg-rr",36]],"stop":[["node limit",1]],"time":31.742919921875,"type":"rewrite"},{"count":[[48,42]],"egraph":[[7,7681,74,0.036912124],[6,3567,74,0.019499541],[5,716,74,0.006301666],[4,193,74,0.001637208],[3,70,74,0.000618083],[2,32,74,0.000287958],[1,16,74,0.000144375],[0,7,83,5.5125e-5]],"inputs":[["(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(+.f64 (*.f64 -1 x) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)","(+.f64 (*.f64 -1 x) (pow.f64 x 2))","(fma.f64 -1 x (*.f64 x x))","(-.f64 (*.f64 x x) x)"]],"stop":[["node limit",1]],"time":49.489990234375,"type":"simplify"},{"compiler":[[426,166]],"time":5.146240234375,"type":"eval"},{"alts":[["(*.f64 x (-.f64 x 1))","done",0.01171875],["(-.f64 (*.f64 x x) x)","done",0.015625]],"compiler":[[6,4],[6,3]],"count":[[44,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[42,0],"picked":[1,1]}],"min-error":[0],"time":5.744873046875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["(*.f64 x (-.f64 x 1))",0.01171875,1]],"compiler":[[2,1],[6,4],[16,6]],"count":[[3,1]],"inputs":[["(-.f64 (*.f64 x x) x)","(-.f64 (*.f64 x x) x)","(*.f64 x (-.f64 x 1))"]],"link":["."],"name":["Statistics.Correlation.Kendall:numOfTiesBy from math-functions-0.1.5.2"],"oracle":[0.02734375],"outputs":[["(*.f64 x (-.f64 x 1))"]],"time":6.468017578125,"times":[["x",2.93505859375],["(*.f64 x (-.f64 x 1))",3.02880859375]],"type":"regimes"},{"compiler":[[6,4]],"egraph":[[2,12,7,5.0791e-5],[1,11,7,3.9125e-5],[0,5,7,2.6125e-5]],"inputs":[["(*.f64 x (-.f64 x 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 x 1))","(*.f64 x (+.f64 x -1))"]],"stop":[["done",1],["saturated",1]],"time":8.18701171875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.18017578125,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.423095703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.087890625,3],["body",256,"valid",250.942138671875,8256]],"time":258.373046875,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,1,1,1.042e-6],[2,12,9,0.0001075],[1,9,9,7.3042e-5],[0,6,9,3.975e-5]],"inputs":[["0"],["(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.64892578125,"type":"preprocess"},{"count":[[1,1]],"egraph":[[2,12,9,0.0001035],[1,9,9,6.8959e-5],[0,6,9,3.5917e-5]],"inputs":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"stop":[["saturated",1]],"time":10.366943359375,"type":"simplify"},{"compiler":[[7,5]],"time":0.197998046875,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))","next",29.701412836488963]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[29.701412836488963],"time":0.68994140625,"type":"prune"},{"compiler":[[17,8]],"locations":[["(*.f64 2 (*.f64 x x))",0.00390625,true],["(sqrt.f64 (*.f64 2 (*.f64 x x)))",28.638264051665978,true]],"time":3.5341796875,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 2 (*.f64 x x))","x","-inf",0.331787109375],["(*.f64 2 (*.f64 x x))","x","inf",0.34912109375],["(*.f64 2 (*.f64 x x))","x","0",0.382080078125],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","x","-inf",0.199951171875],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","x","inf",0.400146484375],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","x","0",0.496826171875]],"time":2.238037109375,"type":"series"},{"count":[[2,36]],"egraph":[[2,1367,13,0.014526666],[1,122,13,0.002072416],[0,6,16,0.000185833]],"inputs":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))","(*.f64 2 (*.f64 x x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) (sqrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4))) 1/2) (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 2 x) 1/2) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 2 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 4 (pow.f64 x 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 2) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2 (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (*.f64 x x))))))))"]],"rules":[["egg-rr",12],["egg-rr",24]],"stop":[["node limit",1]],"time":33.664794921875,"type":"rewrite"},{"count":[[60,40]],"egraph":[[12,5738,164,0.049429834000000006],[11,4611,164,0.037817043],[10,3744,164,0.028511709],[9,2907,164,0.020500667],[8,2038,164,0.013978999999999998],[7,1635,164,0.009215833],[6,988,164,0.005771458],[5,632,164,0.0033446659999999996],[4,205,164,0.0016693329999999998],[3,83,164,0.000713708],[2,43,164,0.00035504199999999997],[1,20,164,0.00017758299999999998],[0,9,164,6.8292e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 x (neg.f64 (sqrt.f64 2)))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))","(*.f64 2 (pow.f64 x 2))","(*.f64 2 (*.f64 x x))"]],"stop":[["node limit",1]],"time":65.135009765625,"type":"simplify"},{"compiler":[[313,236]],"time":5.675048828125,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963],["(pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)","fresh",33.082771386758196],["(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","fresh",29.852135346257406],["(*.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","fresh",44.73822995784455],["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(fabs.f64 (*.f64 x (sqrt.f64 2)))","next",0.42578125],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","fresh",32.467446065515986]],"compiler":[[7,5],[8,7],[10,8],[16,13],[8,6],[6,5],[8,7],[8,7],[10,8],[16,13],[8,6],[6,5],[8,7]],"count":[[41,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[40,6],"picked":[1,1]}],"min-error":[0.125],"time":7.114013671875,"type":"prune"},{"compiler":[[14,11]],"locations":[["(*.f64 x (sqrt.f64 2))",0.42578125,true]],"time":3.85498046875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (sqrt.f64 2))","x","-inf",0.303955078125],["(*.f64 x (sqrt.f64 2))","x","inf",0.14990234375],["(*.f64 x (sqrt.f64 2))","x","0",0.177978515625]],"time":0.673095703125,"type":"series"},{"count":[[1,15]],"egraph":[[2,1075,6,0.013564958],[1,100,6,0.001616708],[0,5,6,0.000159958]],"inputs":[["(*.f64 x (sqrt.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))"]],"rules":[["egg-rr",15]],"stop":[["node limit",1]],"time":29.992919921875,"type":"rewrite"},{"count":[[27,16]],"egraph":[[1,6,72,6.3125e-5],[0,5,72,3.4625e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"stop":[["saturated",1]],"time":10.781982421875,"type":"simplify"},{"compiler":[[139,114]],"time":2.465087890625,"type":"eval"},{"alts":[["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","next",0.8263755125896408],["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963],["(pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)","fresh",33.082771386758196],["(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","fresh",29.852135346257406],["(*.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","fresh",44.73822995784455],["(fabs.f64 (*.f64 x (sqrt.f64 2)))","done",0.42578125]],"compiler":[[9,8],[8,6],[7,5],[8,7],[10,8],[16,13],[6,5],[9,8],[8,6],[8,7],[10,8],[16,13]],"count":[[23,7]],"kept":[{"done":[1,1],"fresh":[5,4],"new":[16,1],"picked":[1,1]}],"min-error":[0.09765625],"time":4.742919921875,"type":"prune"},{"compiler":[[30,25]],"locations":[["(cbrt.f64 (*.f64 x (sqrt.f64 2)))",0.11328125,true],["(*.f64 x (sqrt.f64 2))",0.42578125,false],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)",0.6889802735163768,true]],"time":8.8701171875,"type":"localize"},{"count":[[2,0]],"series":[["(cbrt.f64 (*.f64 x (sqrt.f64 2)))","x","-inf",0.2900390625],["(cbrt.f64 (*.f64 x (sqrt.f64 2)))","x","inf",0.343017578125],["(cbrt.f64 (*.f64 x (sqrt.f64 2)))","x","0",0.239013671875],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","x","-inf",1.25],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","x","inf",0.584228515625],["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","x","0",0.7587890625]],"time":3.537841796875,"type":"series"},{"count":[[2,52]],"egraph":[[2,1578,14,0.01619046],[1,168,14,0.002626501],[0,8,14,0.000257667]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","(cbrt.f64 (*.f64 x (sqrt.f64 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 2)) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) (sqrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) (*.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) 3) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) 3) (pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 2 1/4)) (pow.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))))) (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6)) (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))) (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 1/3) (pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2)))))))))"]],"rules":[["egg-rr",21],["egg-rr",31]],"stop":[["node limit",1]],"time":36.34619140625,"type":"rewrite"},{"count":[[52,52]],"egraph":[[0,0,0,2.025e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.430908203125,"type":"simplify"},{"compiler":[[799,649]],"time":12.89892578125,"type":"eval"},{"alts":[["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","done",0.8263755125896408],["(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","fresh",32.95150375976844],["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","next",0.3515625],["(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","fresh",29.852135346257406],["(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","fresh",0.4811325195368841],["(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","fresh",0.359375],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963]],"compiler":[[9,8],[8,6],[10,9],[10,8],[11,10],[10,9],[7,5],[8,6],[10,9],[10,8],[11,10],[10,9]],"count":[[75,7]],"kept":[{"done":[2,1],"fresh":[4,2],"new":[68,3],"picked":[1,1]}],"min-error":[0.0234375],"time":10.613037109375,"type":"prune"},{"compiler":[[31,27]],"locations":[["(*.f64 x (cbrt.f64 2))",0.1328125,true],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))",0.25,true]],"time":9.22509765625,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 x (cbrt.f64 2))","x","-inf",0.261962890625],["(*.f64 x (cbrt.f64 2))","x","inf",0.14111328125],["(*.f64 x (cbrt.f64 2))","x","0",0.14013671875],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","-inf",0.343994140625],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","inf",0.5009765625],["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","x","0",2.685791015625]],"time":4.159912109375,"type":"series"},{"count":[[2,22]],"egraph":[[2,1746,12,0.017486709],[1,157,12,0.002579375],[0,8,19,0.0002065]],"inputs":[["(*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2)))","(*.f64 x (cbrt.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (cbrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (cbrt.f64 2))))))))"]],"rules":[["egg-rr",11],["egg-rr",11]],"stop":[["node limit",1]],"time":37.076904296875,"type":"rewrite"},{"count":[[46,25]],"egraph":[[19,7650,228,0.080226915],[18,7088,228,0.071098582],[17,6527,228,0.062528291],[16,5864,228,0.054378416],[15,5001,228,0.0461575],[14,4320,228,0.038669625],[13,3758,228,0.03252675],[12,3327,228,0.026767792000000002],[11,3015,228,0.022389833],[10,2806,228,0.018360542],[9,2644,228,0.014524],[8,2540,228,0.011160375],[7,1255,228,0.007796250000000001],[6,929,228,0.0047389170000000005],[5,711,228,0.0030740000000000003],[4,213,228,0.001693917],[3,83,228,0.000681208],[2,43,228,0.000356],[1,24,228,0.00019333300000000001],[0,11,228,8.025e-5]],"inputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 2) 1) 1/3) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) x))","(*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x))","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)","(*.f64 (cbrt.f64 2) x)"]],"stop":[["node limit",1]],"time":101.22314453125,"type":"simplify"},{"compiler":[[242,213]],"time":4.219970703125,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","done",0.3515625],["(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","fresh",0.4811325195368841],["(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","done",0.8263755125896408],["(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","fresh",0.359375],["(fabs.f64 (*.f64 (pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2) (cbrt.f64 (sqrt.f64 2))))","fresh",33.074001416063524],["(fabs.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3) (cbrt.f64 (sqrt.f64 2))))","fresh",0.8525317384221015],["(sqrt.f64 (*.f64 2 (*.f64 x x)))","done",29.701412836488963]],"compiler":[[10,9],[11,10],[9,8],[10,9],[13,12],[13,12],[7,5]],"count":[[32,7]],"kept":[{"done":[2,2],"fresh":[4,2],"new":[25,2],"picked":[1,1]}],"min-error":[0.015625],"time":4.737060546875,"type":"prune"},{"accuracy":[0.3515625],"baseline":[0.3515625],"branch":[["x",0.3515625,1],["(sqrt.f64 (*.f64 2 (*.f64 x x)))",0.3515625,1],["(*.f64 2 (*.f64 x x))",0.3515625,1],["(*.f64 2 (*.f64 x x))",0.3515625,1],["(*.f64 x x)",0.3515625,1],["(*.f64 x x)",0.3515625,1]],"compiler":[[2,1],[7,5],[6,4],[6,4],[4,2],[4,2],[117,97]],"count":[[13,1]],"inputs":[["(fabs.f64 (*.f64 (pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 2))) 2) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 2))) 3) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))","(fabs.f64 (*.f64 (pow.f64 2 1/4) (*.f64 (pow.f64 2 1/4) x)))","(fabs.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 (sqrt.f64 2)) x)))","(fabs.f64 (pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3))","(pow.f64 (sqrt.f64 (*.f64 x (sqrt.f64 2))) 2)","(sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x x))) 3))","(*.f64 (sqrt.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 4)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (*.f64 x x)))))","(*.f64 (sqrt.f64 (*.f64 2 x)) (sqrt.f64 x))","(fabs.f64 (*.f64 x (sqrt.f64 2)))","(pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 2))) 3)","(sqrt.f64 (*.f64 2 (*.f64 x x)))"]],"link":["."],"name":["sqrt C"],"oracle":[53.766212179713236],"outputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"time":27.801025390625,"times":[["x",5.43115234375],["(sqrt.f64 (*.f64 2 (*.f64 x x)))",3.891845703125],["(*.f64 2 (*.f64 x x))",3.861083984375],["(*.f64 2 (*.f64 x x))",3.77294921875],["(*.f64 x x)",3.989990234375],["(*.f64 x x)",3.8779296875]],"type":"regimes"},{"compiler":[[10,9]],"egraph":[[2,19,15,5.8749e-5],[1,14,15,3.9624e-5],[0,9,15,1.9083e-5]],"inputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"method":["egg-herbie"],"outputs":[["(fabs.f64 (*.f64 (*.f64 x (cbrt.f64 2)) (cbrt.f64 (sqrt.f64 2))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.306884765625,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[10,9]],"remove-preprocessing":[[]],"time":9.3330078125,"type":"end"}]
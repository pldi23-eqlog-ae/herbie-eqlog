[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.2866890099496686,0.3373959096686576,0.37591508038167376],[11,0.24573343709971596,0.3783514825186103,0.37591508038167376],[10,0.2106286603711851,0.41345625924714113,0.37591508038167376],[9,0.1404191069141234,0.6084827966278681,0.2510980964580085],[8,0.09361273794274894,0.6552891655992426,0.2510980964580085],[7,0.062408491961832624,0.6864934115801589,0.2510980964580085],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":75.328125,"type":"analyze"},{"outcomes":[["body",256,"invalid",115.341552734375,2736],["body",256,"valid",376.3583984375,8256]],"time":501.329833984375,"type":"sample"},{"compiler":[[13,10]],"egraph":[[0,3,3,1.583e-6],[3,149,40,0.0008489580000000001],[2,113,40,0.0005744160000000001],[1,59,40,0.00028224900000000004],[0,23,48,9.5458e-5]],"inputs":[["0","1","2"],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 (/.f64 1 2) (+.f64 y (*.f64 x (sqrt.f64 z))))","(*.f64 (/.f64 1 2) (+.f64 z (*.f64 y (sqrt.f64 x))))","(*.f64 (/.f64 1 2) (+.f64 x (*.f64 z (sqrt.f64 y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 1/2 (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 1/2 (fma.f64 y (sqrt.f64 z) x))","(*.f64 (/.f64 1 2) (+.f64 y (*.f64 x (sqrt.f64 z))))","(*.f64 1/2 (+.f64 y (*.f64 x (sqrt.f64 z))))","(*.f64 1/2 (fma.f64 x (sqrt.f64 z) y))","(*.f64 (/.f64 1 2) (+.f64 z (*.f64 y (sqrt.f64 x))))","(*.f64 1/2 (+.f64 z (*.f64 y (sqrt.f64 x))))","(*.f64 1/2 (fma.f64 y (sqrt.f64 x) z))","(*.f64 (/.f64 1 2) (+.f64 x (*.f64 z (sqrt.f64 y))))","(*.f64 1/2 (+.f64 x (*.f64 z (sqrt.f64 y))))","(*.f64 1/2 (fma.f64 z (sqrt.f64 y) x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.614013671875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,48,10,0.00031758299999999997],[2,38,10,0.000221583],[1,23,10,0.00011995799999999999],[0,12,12,4.9958e-5]],"inputs":[["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 1/2 (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 1/2 (fma.f64 y (sqrt.f64 z) x))"]],"stop":[["saturated",1]],"time":10.47119140625,"type":"simplify"},{"compiler":[[20,13]],"time":0.36181640625,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","fresh",0.11328125],["(*.f64 1/2 (fma.f64 y (sqrt.f64 z) x))","next",0.11328125]],"compiler":[[13,10],[10,7],[13,10],[10,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.109375],"time":1.705078125,"type":"prune"},{"compiler":[[21,8]],"locations":[["(fma.f64 y (sqrt.f64 z) x)",0.11328125,true]],"time":4.39501953125,"type":"localize"},{"count":[[1,25]],"series":[["(fma.f64 y (sqrt.f64 z) x)","x","-inf",0.216064453125],["(fma.f64 y (sqrt.f64 z) x)","x","inf",0.223876953125],["(fma.f64 y (sqrt.f64 z) x)","x","0",0.23486328125],["(fma.f64 y (sqrt.f64 z) x)","z","-inf",0.546142578125],["(fma.f64 y (sqrt.f64 z) x)","z","inf",0.4931640625],["(fma.f64 y (sqrt.f64 z) x)","z","0",0.406005859375],["(fma.f64 y (sqrt.f64 z) x)","y","-inf",0.37890625],["(fma.f64 y (sqrt.f64 z) x)","y","inf",0.31494140625],["(fma.f64 y (sqrt.f64 z) x)","y","0",0.404052734375]],"time":3.341064453125,"type":"series"},{"count":[[1,21]],"egraph":[[2,1372,7,0.01499771],[1,118,7,0.001886793],[0,6,7,0.000139334]],"inputs":[["(fma.f64 y (sqrt.f64 z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 z)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (sqrt.f64 z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (sqrt.f64 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (sqrt.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 y (sqrt.f64 z)) (*.f64 y (sqrt.f64 z))) (-.f64 (*.f64 x x) (*.f64 (*.f64 y (sqrt.f64 z)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (sqrt.f64 z)) (*.f64 y (sqrt.f64 z))) (*.f64 x x)) (-.f64 (*.f64 y (sqrt.f64 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (sqrt.f64 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (sqrt.f64 z) x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":31.744873046875,"type":"rewrite"},{"count":[[46,24]],"egraph":[[2,11,148,0.000140291],[1,10,148,9.5082e-5],[0,7,148,4.7166e-5]],"inputs":[["x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)"]],"stop":[["saturated",1]],"time":11.876953125,"type":"simplify"},{"compiler":[[274,114]],"time":2.80517578125,"type":"eval"},{"alts":[["(*.f64 1/2 (pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2))","fresh",31.792675048842213],["(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))","next",0.11328125],["(*.f64 1/2 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 3))","fresh",0.6837464844426087],["(*.f64 1/2 (*.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2)))","fresh",0.7368127442110507]],"compiler":[[13,10],[11,8],[13,10],[20,11],[13,10],[11,8],[13,10],[20,11]],"count":[[26,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[24,4],"picked":[1,0]}],"min-error":[0.0546875],"time":4.989013671875,"type":"prune"},{"compiler":[[27,9]],"locations":[["(+.f64 (*.f64 y (sqrt.f64 z)) x)",0.01171875,true],["(*.f64 y (sqrt.f64 z))",0.25,true]],"time":5.122802734375,"type":"localize"},{"count":[[2,7]],"series":[["(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","-inf",0.156982421875],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","inf",0.162109375],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","0",0.14208984375],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","z","-inf",0.23291015625],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","z","inf",0.2080078125],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","z","0",0.18115234375],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","y","-inf",0.155029296875],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","y","inf",0.14697265625],["(+.f64 (*.f64 y (sqrt.f64 z)) x)","y","0",0.1611328125],["(*.f64 y (sqrt.f64 z))","z","-inf",0.297119140625],["(*.f64 y (sqrt.f64 z))","z","inf",0.27490234375],["(*.f64 y (sqrt.f64 z))","z","0",0.322021484375],["(*.f64 y (sqrt.f64 z))","y","-inf",0.24609375],["(*.f64 y (sqrt.f64 z))","y","inf",0.263916015625],["(*.f64 y (sqrt.f64 z))","y","0",0.300048828125]],"time":3.38916015625,"type":"series"},{"count":[[2,46]],"egraph":[[2,1992,13,0.019056749999999997],[1,149,13,0.0026982910000000002],[0,7,13,0.000160083]],"inputs":[["(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (sqrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 z (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (sqrt.f64 z))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (sqrt.f64 z) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 z (*.f64 y y)) (-.f64 (*.f64 y (sqrt.f64 z)) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 y (sqrt.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (sqrt.f64 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (sqrt.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x)) (/.f64 1 (-.f64 (*.f64 y (sqrt.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z))))) (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 y (sqrt.f64 z)) x) (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 x x) (-.f64 (*.f64 z (*.f64 y y)) (*.f64 (sqrt.f64 z) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x)) (-.f64 (*.f64 y (sqrt.f64 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x))) (neg.f64 (-.f64 (*.f64 y (sqrt.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 z (*.f64 y y))) (-.f64 x (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (sqrt.f64 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 y (sqrt.f64 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) (sqrt.f64 (*.f64 y (sqrt.f64 z))) x)))))"]],"rules":[["egg-rr",35],["egg-rr",11]],"stop":[["node limit",1]],"time":38.932861328125,"type":"rewrite"},{"count":[[53,48]],"egraph":[[1,7,22,5.3458e-5],[0,6,22,2.9917e-5]],"inputs":[["x","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","x","(*.f64 y (sqrt.f64 z))","x","x"]],"method":["egg-herbie"],"outputs":[["x","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","x","(*.f64 y (sqrt.f64 z))","x","x"]],"stop":[["saturated",1]],"time":10.80517578125,"type":"simplify"},{"compiler":[[652,260]],"time":5.928955078125,"type":"eval"},{"alts":[["(*.f64 1/2 (*.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2)))","fresh",0.7368127442110507],["(*.f64 1/2 (/.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x)) (-.f64 (*.f64 y (sqrt.f64 z)) x)))","fresh",34.478006857253725],["(*.f64 1/2 (+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x))","next",0.3139039062950723],["(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))","done",0.11328125],["(*.f64 1/2 (fma.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) (sqrt.f64 (*.f64 y (sqrt.f64 z))) x))","fresh",28.64585878907377],["(*.f64 1/2 (fma.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 y (sqrt.f64 z))) x))","fresh",19.389442361441855]],"compiler":[[20,11],[21,13],[14,11],[11,8],[17,9],[18,12],[20,11],[21,13],[14,11],[17,9],[18,12]],"count":[[52,6]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[48,4],"picked":[1,1]}],"min-error":[0.02734375],"time":10.219970703125,"type":"prune"},{"compiler":[[46,18]],"locations":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)",0.01171875,true],["(*.f64 y (sqrt.f64 z))",0.25,false],["(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)",0.6665002442110507,true],["(cbrt.f64 (*.f64 y (sqrt.f64 z)))",4.295537856051854,true]],"time":9.177978515625,"type":"localize"},{"count":[[3,39]],"series":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","x","-inf",0.1669921875],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","x","inf",0.200927734375],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","x","0",6.006103515625],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","z","-inf",0.2490234375],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","z","inf",0.176025390625],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","z","0",0.199951171875],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","y","-inf",0.30712890625],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","y","inf",0.363037109375],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)","y","0",0.359130859375],["(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)","z","-inf",1.68017578125],["(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)","z","inf",0.535888671875],["(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)","z","0",0.541015625],["(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)","y","-inf",1.27001953125],["(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)","y","inf",0.6318359375],["(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)","y","0",0.869140625],["(cbrt.f64 (*.f64 y (sqrt.f64 z)))","z","-inf",1.323974609375],["(cbrt.f64 (*.f64 y (sqrt.f64 z)))","z","inf",4.416015625],["(cbrt.f64 (*.f64 y (sqrt.f64 z)))","z","0",15.533935546875],["(cbrt.f64 (*.f64 y (sqrt.f64 z)))","y","-inf",0.573974609375],["(cbrt.f64 (*.f64 y (sqrt.f64 z)))","y","inf",0.40283203125],["(cbrt.f64 (*.f64 y (sqrt.f64 z)))","y","0",0.998046875]],"time":37.10107421875,"type":"series"},{"count":[[3,91]],"egraph":[[2,2515,21,0.021809041],[1,217,21,0.003768916],[0,10,23,0.000314125]],"inputs":[["(cbrt.f64 (*.f64 y (sqrt.f64 z)))","(pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)","(+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))) (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))) (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 y y)))) (cbrt.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6) (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) 1/3) (pow.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 z)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (*.f64 z (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (sqrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) (cbrt.f64 (*.f64 z (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (sqrt.f64 z)) (cbrt.f64 (*.f64 z (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 y y)))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))) (cbrt.f64 (*.f64 z (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (sqrt.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) (sqrt.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6) (*.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6) (cbrt.f64 (*.f64 z (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/4) (*.f64 (pow.f64 z 1/4) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 y y)))) 3) (cbrt.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6) 3) (pow.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z 1/4)) (pow.f64 z 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) 1) (cbrt.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 y)) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (cbrt.f64 (*.f64 z (*.f64 y y))))) (cbrt.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6)) (pow.f64 (*.f64 y (sqrt.f64 z)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 z (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (sqrt.f64 z))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (sqrt.f64 z) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 z (*.f64 y y)) (-.f64 (*.f64 y (sqrt.f64 z)) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 y (sqrt.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (sqrt.f64 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (sqrt.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x)) (/.f64 1 (-.f64 (*.f64 y (sqrt.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z))))) (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 y (sqrt.f64 z)) x) (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3)) (+.f64 (*.f64 x x) (-.f64 (*.f64 z (*.f64 y y)) (*.f64 y (*.f64 (sqrt.f64 z) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x)) (-.f64 (*.f64 y (sqrt.f64 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (*.f64 z (*.f64 y y)) (*.f64 x (-.f64 x (*.f64 y (sqrt.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x))) (neg.f64 (-.f64 (*.f64 y (sqrt.f64 z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 z (*.f64 y y))) (-.f64 x (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (sqrt.f64 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (sqrt.f64 z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (sqrt.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) (cbrt.f64 (*.f64 z (*.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 y (sqrt.f64 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) (sqrt.f64 (*.f64 y (sqrt.f64 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y (sqrt.f64 z)))))))"]],"rules":[["egg-rr",37],["egg-rr",32],["egg-rr",22]],"stop":[["node limit",1]],"time":46.0478515625,"type":"rewrite"},{"count":[[130,96]],"egraph":[[21,7191,250,0.109980543],[20,6873,250,0.09701996],[19,6497,250,0.088153043],[18,6165,250,0.078518335],[17,5797,250,0.070696793],[16,5489,250,0.063460251],[15,4804,250,0.055738043],[14,4276,250,0.04809421],[13,3857,250,0.041367001],[12,3508,250,0.035261793],[11,3213,250,0.029696376],[10,2981,250,0.024049543],[9,2811,250,0.019518168],[8,2653,250,0.015302668],[7,2512,250,0.011791918],[6,2424,250,0.008673876],[5,1087,250,0.005598168000000001],[4,611,250,0.003004418],[3,185,250,0.0015025009999999998],[2,84,250,0.000633792],[1,42,250,0.000306876],[0,17,328,0.000121167]],"inputs":[["(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","x","x","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (sqrt.f64 1) (*.f64 (pow.f64 y 1/3) (pow.f64 z 1/6)))","(*.f64 (cbrt.f64 y) (pow.f64 z 1/6))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","x","x","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 (*.f64 1 y) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 1 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)"]],"stop":[["node limit",1]],"time":133.47900390625,"type":"simplify"},{"compiler":[[1552,675]],"time":17.4501953125,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) (sqrt.f64 (*.f64 y (sqrt.f64 z))) x))","fresh",28.64585878907377],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (pow.f64 z 1/4)) (pow.f64 z 1/4)) x))","fresh",0.2653312988422101],["(*.f64 1/2 (+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x))","done",0.3139039062950723],["(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))","done",0.11328125],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 y)) (cbrt.f64 (sqrt.f64 z))) x))","fresh",19.409637337522728],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 (sqrt.f64 z) (sqrt.f64 y)) (sqrt.f64 y)) x))","fresh",31.137382519536885],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 (sqrt.f64 z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y)) x))","fresh",16.675425169199166],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))) x))","next",0.17644501953688405]],"compiler":[[17,9],[16,12],[14,11],[11,8],[20,14],[15,10],[17,12],[15,11],[17,9],[16,12],[20,14],[15,10],[17,12],[15,11]],"count":[[113,8]],"kept":[{"done":[1,1],"fresh":[4,0],"new":[107,6],"picked":[1,1]}],"min-error":[0.0078125],"time":24.199951171875,"type":"prune"},{"compiler":[[48,12]],"locations":[["(cbrt.f64 z)",0.0703125,true],["(cbrt.f64 (sqrt.f64 z))",0.12109375,true],["(*.f64 y (cbrt.f64 z))",0.24609375,true],["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))",0.33431625976844204,true]],"time":7.948974609375,"type":"localize"},{"count":[[4,32]],"series":[["(cbrt.f64 z)","z","-inf",0.301025390625],["(cbrt.f64 z)","z","inf",0.252197265625],["(cbrt.f64 z)","z","0",0.239990234375],["(cbrt.f64 (sqrt.f64 z))","z","-inf",1.037109375],["(cbrt.f64 (sqrt.f64 z))","z","inf",0.158203125],["(cbrt.f64 (sqrt.f64 z))","z","0",0.155029296875],["(*.f64 y (cbrt.f64 z))","z","-inf",0.3671875],["(*.f64 y (cbrt.f64 z))","z","inf",0.34716796875],["(*.f64 y (cbrt.f64 z))","z","0",1.43798828125],["(*.f64 y (cbrt.f64 z))","y","-inf",0.278076171875],["(*.f64 y (cbrt.f64 z))","y","inf",0.27197265625],["(*.f64 y (cbrt.f64 z))","y","0",1.203857421875],["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))","z","-inf",14.389892578125],["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))","z","inf",0.241943359375],["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))","z","0",0.326904296875],["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))","y","-inf",0.236083984375],["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))","y","inf",0.327880859375],["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))","y","0",0.7490234375]],"time":22.577880859375,"type":"series"},{"count":[[4,68]],"egraph":[[2,1815,19,0.017419751],[1,155,19,0.002656626],[0,8,27,0.000173667]],"inputs":[["(*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))","(*.f64 y (cbrt.f64 z))","(cbrt.f64 (sqrt.f64 z))","(cbrt.f64 z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (sqrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 y y) z))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sqrt.f64 z) (pow.f64 (*.f64 y (cbrt.f64 z)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (sqrt.f64 z))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (cbrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (cbrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (cbrt.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (cbrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (cbrt.f64 z))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 z 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 1/6)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 z) 1/6) (pow.f64 (sqrt.f64 z) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (sqrt.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 z 1/4) 1/3) (pow.f64 (pow.f64 z 1/4) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 z) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 z 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 z) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 z 1/6)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/6) (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 (pow.f64 z 1/6)) (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/4) (pow.f64 (sqrt.f64 z) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 z) 1/6) (*.f64 (pow.f64 (sqrt.f64 z) 1/6) (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 z) 2) 1/3) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 1/6) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 z)))))))"]],"rules":[["egg-rr",22],["egg-rr",21],["egg-rr",13],["egg-rr",12]],"stop":[["node limit",1]],"time":40.802978515625,"type":"rewrite"},{"count":[[100,71]],"egraph":[[21,7032,176,0.10736445700000001],[20,6089,176,0.09322962400000001],[19,6007,176,0.08058583200000001],[18,5827,176,0.07271733200000001],[17,5605,176,0.064915332],[16,5321,176,0.057406541000000005],[15,5000,176,0.05098562500000001],[14,4275,176,0.043994083],[13,3670,176,0.036313833000000004],[12,3165,176,0.029865916000000003],[11,2738,176,0.024302041000000003],[10,2413,176,0.019410583000000002],[9,2173,176,0.015313625],[8,2012,176,0.011967458],[7,1876,176,0.009132958],[6,1786,176,0.006759],[5,1031,176,0.00424475],[4,251,176,0.00210125],[3,80,176,0.000746333],[2,42,176,0.00036487499999999996],[1,27,176,0.000203666],[0,12,176,8.9375e-5]],"inputs":[["(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 z))","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)"]],"stop":[["node limit",1]],"time":127.340087890625,"type":"simplify"},{"compiler":[[1036,544]],"time":11.35302734375,"type":"eval"},{"alts":[["(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (cbrt.f64 z)) (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (sqrt.f64 (cbrt.f64 (cbrt.f64 z))))) x))","fresh",0.2666588379159781],["(*.f64 1/2 (+.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 z))) 3) (cbrt.f64 (sqrt.f64 z))) x))","fresh",0.37353149421105053],["(*.f64 1/2 (+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x))","done",0.3139039062950723],["(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))","done",0.11328125],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 y)) (cbrt.f64 (sqrt.f64 z))) x))","fresh",19.409637337522728],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 (sqrt.f64 z) (sqrt.f64 y)) (sqrt.f64 y)) x))","fresh",31.137382519536885],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (pow.f64 z 1/4)) (pow.f64 z 1/4)) x))","fresh",0.2653312988422101],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))) x))","done",0.17644501953688405],["(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (cbrt.f64 z)) (sqrt.f64 (cbrt.f64 z))) x))","fresh",0.21388627930532605]],"compiler":[[23,15],[18,14],[14,11],[11,8],[20,14],[15,10],[16,12],[15,11],[15,10]],"count":[[79,9]],"kept":[{"done":[2,2],"fresh":[5,3],"new":[71,3],"picked":[1,1]}],"min-error":[0],"time":15.490966796875,"type":"prune"},{"accuracy":[0.11328125],"baseline":[0.11328125],"branch":[["x",0.11328125,1],["y",0.11328125,1],["z",0.11328125,1],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))",0.11328125,1],["(+.f64 x (*.f64 y (sqrt.f64 z)))",0.11328125,1],["(*.f64 y (sqrt.f64 z))",0.11328125,1],["(sqrt.f64 z)",0.11328125,1]],"compiler":[[4,3],[4,3],[4,3],[13,10],[9,6],[7,5],[5,4],[252,111]],"count":[[19,1]],"inputs":[["(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (cbrt.f64 z)) (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (sqrt.f64 (cbrt.f64 (cbrt.f64 z))))) x))","(*.f64 1/2 (+.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 z))) 3) (cbrt.f64 (sqrt.f64 z))) x))","(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (cbrt.f64 z)) (sqrt.f64 (cbrt.f64 z))) x))","(*.f64 1/2 (fma.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) (sqrt.f64 (*.f64 y (sqrt.f64 z))) x))","(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (pow.f64 z 1/4)) (pow.f64 z 1/4)) x))","(*.f64 1/2 (+.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 y)) (cbrt.f64 (sqrt.f64 z))) x))","(*.f64 1/2 (+.f64 (*.f64 (*.f64 (sqrt.f64 z) (sqrt.f64 y)) (sqrt.f64 y)) x))","(*.f64 1/2 (+.f64 (*.f64 (*.f64 (sqrt.f64 z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y)) x))","(*.f64 1/2 (+.f64 (*.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (sqrt.f64 z))) x))","(*.f64 1/2 (/.f64 (-.f64 (*.f64 z (*.f64 y y)) (*.f64 x x)) (-.f64 (*.f64 y (sqrt.f64 z)) x)))","(*.f64 1/2 (+.f64 (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3) x))","(*.f64 1/2 (fma.f64 (sqrt.f64 (*.f64 y (sqrt.f64 z))) (sqrt.f64 (*.f64 y (sqrt.f64 z))) x))","(*.f64 1/2 (fma.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 y (sqrt.f64 z))) x))","(*.f64 1/2 (pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2))","(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))","(*.f64 1/2 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 3))","(*.f64 1/2 (*.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 z) x)) 2)))","(*.f64 1/2 (fma.f64 y (sqrt.f64 z) x))","(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:quadForm from diagrams-solve-0.1, B"],"oracle":[53.52680454487387],"outputs":[["(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))"]],"time":54.416015625,"times":[["x",7.264892578125],["y",6.805908203125],["z",7.055908203125],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))",7.06103515625],["(+.f64 x (*.f64 y (sqrt.f64 z)))",6.91796875],["(*.f64 y (sqrt.f64 z))",6.7080078125],["(sqrt.f64 z)",8.225830078125]],"type":"regimes"},{"compiler":[[11,8]],"egraph":[[1,12,12,3.1626e-5],[0,9,12,1.8459e-5]],"inputs":[["(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (+.f64 (*.f64 y (sqrt.f64 z)) x))"]],"stop":[["fuel",1],["saturated",1]],"time":8.323974609375,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[11,8]],"remove-preprocessing":[[]],"time":8.258056640625,"type":"end"}]
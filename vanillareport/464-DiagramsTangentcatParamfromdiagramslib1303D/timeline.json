[{"compiler":[[15,12]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0014641284942626953,0.2498781681060791],[11,0.7476816177368164,0.0029282569885253906,0.2493901252746582],[10,0.7457294464111328,0.005856513977050781,0.2484140396118164],[9,0.7418251037597656,0.011713027954101563,0.2464618682861328],[8,0.7340164184570313,0.023426055908203125,0.24255752563476563],[7,0.7183990478515625,0.04685211181640625,0.23474884033203125],[6,0.687164306640625,0.0937042236328125,0.2191314697265625],[5,0.62469482421875,0.187408447265625,0.187896728515625],[4,0.499755859375,0.37481689453125,0.12542724609375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.221923828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.595458984375,17],["body",256,"valid",298.201416015625,8256]],"time":306.260986328125,"type":"sample"},{"compiler":[[14,11]],"egraph":[[0,1,1,1.75e-6],[13,3047,9,0.050829292000000005],[12,3047,9,0.043843708],[11,3041,9,0.038192583],[10,2915,9,0.032486875000000005],[9,2804,9,0.026492833000000004],[8,2422,9,0.020365708000000003],[7,1534,9,0.014242500000000002],[6,872,9,0.007818167],[5,545,9,0.004162959],[4,380,9,0.002398917],[3,186,12,0.001311667],[2,76,12,0.000600625],[1,33,14,0.000234875],[0,11,19,8.3208e-5]],"inputs":[["0"],["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))","(+.f64 (*.f64 (fma.f64 (*.f64 3 x) x (neg.f64 (*.f64 x 4))) 3) 3)","(fma.f64 3 (*.f64 x (-.f64 (*.f64 3 x) 4)) 3)","(fma.f64 3 (*.f64 x (fma.f64 3 x -4)) 3)","(fma.f64 x (fma.f64 x 9 -12) 3)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":74.75,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,3047,9,0.050649084],[12,3047,9,0.043699917],[11,3041,9,0.038037792],[10,2915,9,0.032347917000000004],[9,2804,9,0.026363959000000003],[8,2422,9,0.020231792000000002],[7,1534,9,0.014135292],[6,872,9,0.007780042],[5,545,9,0.004132042],[4,380,9,0.0023875],[3,186,12,0.001302333],[2,76,12,0.0005950829999999999],[1,33,14,0.000229583],[0,11,19,7.7958e-5]],"inputs":[["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))","(+.f64 (*.f64 (fma.f64 (*.f64 3 x) x (neg.f64 (*.f64 x 4))) 3) 3)","(fma.f64 3 (*.f64 x (-.f64 (*.f64 3 x) 4)) 3)","(fma.f64 3 (*.f64 x (fma.f64 3 x -4)) 3)","(fma.f64 x (fma.f64 x 9 -12) 3)"]],"stop":[["saturated",1]],"time":61.988037109375,"type":"simplify"},{"compiler":[[21,16]],"time":0.420166015625,"type":"eval"},{"alts":[["(fma.f64 x (fma.f64 x 9 -12) 3)","next",0.08984375],["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))","fresh",0.17025375976844204]],"compiler":[[8,6],[14,11],[8,6],[14,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0390625],"time":1.73095703125,"type":"prune"},{"compiler":[[16,12]],"locations":[["(fma.f64 x 9 -12)",0.0234375,true],["(fma.f64 x (fma.f64 x 9 -12) 3)",0.07421875,true]],"time":4.098876953125,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x 9 -12)","x","-inf",0.215087890625],["(fma.f64 x 9 -12)","x","inf",0.22607421875],["(fma.f64 x 9 -12)","x","0",0.18505859375],["(fma.f64 x (fma.f64 x 9 -12) 3)","x","-inf",0.345947265625],["(fma.f64 x (fma.f64 x 9 -12) 3)","x","inf",0.322998046875],["(fma.f64 x (fma.f64 x 9 -12) 3)","x","0",0.337158203125]],"time":1.714111328125,"type":"series"},{"count":[[2,42]],"egraph":[[2,1495,14,0.015539541],[1,142,14,0.0022354569999999997],[0,7,14,0.000266416]],"inputs":[["(fma.f64 x (fma.f64 x 9 -12) 3)","(fma.f64 x 9 -12)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (*.f64 x (fma.f64 x 9 -12)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 x 9 -12)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (fma.f64 x 9 -12)) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (fma.f64 x 9 -12) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 x 9 -12) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (fma.f64 x 9 -12) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 2) (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) (sqrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 x 9 -12)) 3) 27) (+.f64 (*.f64 (*.f64 x (fma.f64 x 9 -12)) (*.f64 x (fma.f64 x 9 -12))) (-.f64 9 (*.f64 (*.f64 x (fma.f64 x 9 -12)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (fma.f64 x 9 -12)) (*.f64 x (fma.f64 x 9 -12))) 9) (-.f64 (*.f64 x (fma.f64 x 9 -12)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (fma.f64 x 9 -12) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 x 9 -12) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (fma.f64 x 9 -12) 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (fma.f64 x 9 -12) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (fma.f64 x 9 -12) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (fma.f64 x 9 -12) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (fma.f64 x 9 -12) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (fma.f64 x 9 -12) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -12 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 9) -12)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 9) 1) -12)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x 9 -12)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 9 -12) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 9 -12))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 9 -12)) (pow.f64 (cbrt.f64 (fma.f64 x 9 -12)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 9 -12)) 2) (cbrt.f64 (fma.f64 x 9 -12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 9 -12)) (sqrt.f64 (fma.f64 x 9 -12)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 9) 3) -1728) (+.f64 (*.f64 (*.f64 x 9) (*.f64 x 9)) (-.f64 144 (*.f64 (*.f64 x 9) -12))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 9) (*.f64 x 9)) 144) (-.f64 (*.f64 x 9) -12))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 9 -12) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 9 -12) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 9 -12)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 9 -12)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 9 -12) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 9 -12)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 9 -12) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 9 -12)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 9 -12)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 9 -12)))))))"]],"rules":[["egg-rr",21],["egg-rr",21]],"stop":[["node limit",1]],"time":34.921875,"type":"rewrite"},{"count":[[66,56]],"egraph":[[18,7768,144,0.100063084],[17,7476,144,0.090690251],[16,7084,144,0.081596459],[15,6245,144,0.071933084],[14,5561,144,0.061096625999999994],[13,4992,144,0.051496916999999996],[12,4479,144,0.043380458999999996],[11,4079,144,0.035447834],[10,3766,144,0.028746334],[9,3546,144,0.022958417],[8,3333,144,0.01756],[7,3128,144,0.012844291],[6,1793,144,0.008432083],[5,521,144,0.0042140829999999995],[4,194,144,0.001638416],[3,88,144,0.000815124],[2,56,156,0.00046758300000000004],[1,35,168,0.000256583],[0,16,180,9.9083e-5]],"inputs":[["3","(+.f64 (*.f64 -12 x) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(*.f64 9 (pow.f64 x 2))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(*.f64 9 (pow.f64 x 2))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","-12","(-.f64 (*.f64 9 x) 12)","(-.f64 (*.f64 9 x) 12)","(-.f64 (*.f64 9 x) 12)","(*.f64 9 x)","(-.f64 (*.f64 9 x) 12)","(-.f64 (*.f64 9 x) 12)","(-.f64 (*.f64 9 x) 12)","(*.f64 9 x)","(-.f64 (*.f64 9 x) 12)","(-.f64 (*.f64 9 x) 12)","(-.f64 (*.f64 9 x) 12)"]],"method":["egg-herbie"],"outputs":[["3","(+.f64 (*.f64 -12 x) 3)","(fma.f64 -12 x 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(+.f64 3 (*.f64 x (fma.f64 x 9 -12)))","(fma.f64 x (fma.f64 x 9 -12) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(+.f64 3 (*.f64 x (fma.f64 x 9 -12)))","(fma.f64 x (fma.f64 x 9 -12) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(fma.f64 -12 x (*.f64 9 (*.f64 x x)))","(fma.f64 9 (*.f64 x x) (*.f64 -12 x))","(*.f64 x (fma.f64 x 9 -12))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(+.f64 3 (*.f64 x (fma.f64 x 9 -12)))","(fma.f64 x (fma.f64 x 9 -12) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(+.f64 3 (*.f64 x (fma.f64 x 9 -12)))","(fma.f64 x (fma.f64 x 9 -12) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(fma.f64 -12 x (*.f64 9 (*.f64 x x)))","(fma.f64 9 (*.f64 x x) (*.f64 -12 x))","(*.f64 x (fma.f64 x 9 -12))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(+.f64 3 (*.f64 x (fma.f64 x 9 -12)))","(fma.f64 x (fma.f64 x 9 -12) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(+.f64 3 (*.f64 x (fma.f64 x 9 -12)))","(fma.f64 x (fma.f64 x 9 -12) 3)","-12","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(*.f64 9 x)","(*.f64 x 9)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(*.f64 9 x)","(*.f64 x 9)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)","(-.f64 (*.f64 9 x) 12)","(fma.f64 9 x -12)","(fma.f64 x 9 -12)"]],"stop":[["node limit",1]],"time":117.086181640625,"type":"simplify"},{"compiler":[[591,461]],"time":10.0439453125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 2))","fresh",0.25368891606351424],["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","next",0.1171875],["(fma.f64 x (fma.f64 x 9 -12) 3)","done",0.08984375],["(pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 2)","fresh",0.799823779305326],["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))","fresh",0.17025375976844204]],"compiler":[[20,16],[12,10],[8,6],[11,9],[14,11],[20,16],[12,10],[11,9],[14,11]],"count":[[58,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[56,3],"picked":[1,1]}],"min-error":[0.0078125],"time":10.962890625,"type":"prune"},{"compiler":[[35,28]],"locations":[["(+.f64 3 (*.f64 9 (pow.f64 x 2)))",0.00390625,true],["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))",0.029628759768442016,true],["(*.f64 9 (pow.f64 x 2))",0.27307379138909577,true]],"time":9.2470703125,"type":"localize"},{"count":[[3,9]],"series":[["(+.f64 3 (*.f64 9 (pow.f64 x 2)))","x","-inf",0.156982421875],["(+.f64 3 (*.f64 9 (pow.f64 x 2)))","x","inf",0.2119140625],["(+.f64 3 (*.f64 9 (pow.f64 x 2)))","x","0",0.162109375],["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","x","-inf",0.169921875],["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","x","inf",0.2509765625],["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","x","0",0.18994140625],["(*.f64 9 (pow.f64 x 2))","x","-inf",0.1640625],["(*.f64 9 (pow.f64 x 2))","x","inf",0.343994140625],["(*.f64 9 (pow.f64 x 2))","x","0",0.5009765625]],"time":2.2490234375,"type":"series"},{"count":[[3,158]],"egraph":[[2,3071,27,0.026083333],[1,247,27,0.004279958],[0,11,31,0.000394541]],"inputs":[["(*.f64 9 (pow.f64 x 2))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 9))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 9)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 9 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 4) 81) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 9 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) 729) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 2 (log.f64 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 2 (log.f64 (*.f64 x 3)))) 2)) (cbrt.f64 (*.f64 2 (log.f64 (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 2 (log.f64 (*.f64 x 3))))) (sqrt.f64 (*.f64 2 (log.f64 (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) 81))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) 729))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 x 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 9 (*.f64 x x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x 6) 729)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 x 3))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 x 3))) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 x x) 144) (-.f64 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3))) (/.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2) (-.f64 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (*.f64 x 3) (sqrt.f64 (fma.f64 x -12 3))) (hypot.f64 (*.f64 x 3) (sqrt.f64 (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 3) -1728 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3)) (/.f64 1 (fma.f64 (fma.f64 9 (*.f64 x x) 3) (-.f64 (fma.f64 9 (*.f64 x x) 3) (*.f64 x -12)) (*.f64 (*.f64 x x) 144))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 x x) 144) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2)) (/.f64 1 (-.f64 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 9 (*.f64 x x) 3) (-.f64 (fma.f64 9 (*.f64 x x) 3) (*.f64 x -12)) (*.f64 (*.f64 x x) 144)) (fma.f64 (pow.f64 x 3) -1728 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3)) (-.f64 (*.f64 (*.f64 x x) 144) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 3) -1728 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3)) (fma.f64 (fma.f64 9 (*.f64 x x) 3) (-.f64 (fma.f64 9 (*.f64 x x) 3) (*.f64 x -12)) (*.f64 (*.f64 x x) 144)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 3) -1728 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3)) (+.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2) (-.f64 (*.f64 (*.f64 x x) 144) (*.f64 x (*.f64 -12 (fma.f64 9 (*.f64 x x) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) 144) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2)) (-.f64 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 3) -1728 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3))) (neg.f64 (fma.f64 (fma.f64 9 (*.f64 x x) 3) (-.f64 (fma.f64 9 (*.f64 x x) 3) (*.f64 x -12)) (*.f64 (*.f64 x x) 144))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (*.f64 x x) 144) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2))) (neg.f64 (-.f64 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x -12 3) 3) (*.f64 (pow.f64 x 6) 729)) (+.f64 (pow.f64 (fma.f64 x -12 3) 2) (-.f64 (*.f64 (pow.f64 x 4) 81) (*.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2) (*.f64 (*.f64 x x) 144)) (-.f64 (fma.f64 9 (*.f64 x x) 3) (*.f64 x -12)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x -12 3) 2) (*.f64 (pow.f64 x 4) 81)) (-.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (*.f64 x 3) (sqrt.f64 (fma.f64 x -12 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 9 (*.f64 x x) 3) (-.f64 (fma.f64 9 (*.f64 x x) 3) (*.f64 x -12)) (*.f64 (*.f64 x x) 144)) (fma.f64 (pow.f64 x 3) -1728 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3)) (-.f64 (*.f64 (*.f64 x x) 144) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))) 2)) (cbrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))) (sqrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 9 (*.f64 x x)))) (exp.f64 (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x -12))) (exp.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) -12) (+.f64 1 (expm1.f64 (fma.f64 9 (*.f64 x x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x -12))) (+.f64 1 (expm1.f64 (fma.f64 9 (*.f64 x x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 9 (*.f64 x x) 3))) (pow.f64 (exp.f64 x) -12)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 9 (*.f64 x x) 3)) (+.f64 1 (expm1.f64 (*.f64 x -12)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 9 (*.f64 x x) 3))) (+.f64 1 (expm1.f64 (*.f64 x -12)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 x -12 3)) (+.f64 1 (expm1.f64 (*.f64 9 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 (*.f64 x 3) (sqrt.f64 (fma.f64 x -12 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 9 (*.f64 x x) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -12 (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 9) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 9 (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (*.f64 x x)) 1 (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x -12) 1 (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 9 (*.f64 x x) 3) 1 (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 9 (*.f64 x x)) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x -12) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 9 (*.f64 x x) 3) (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -12)) (cbrt.f64 (*.f64 (*.f64 x x) 144)) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 144)) (cbrt.f64 (*.f64 x -12)) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 9) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 9 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 81)) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 81)) (cbrt.f64 (*.f64 9 (*.f64 x x))) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) -12) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x -12)) (sqrt.f64 (*.f64 x -12)) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) -12) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 x 6) 729 27) (/.f64 1 (fma.f64 (*.f64 9 (*.f64 x x)) (fma.f64 9 (*.f64 x x) -3) 9)) (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 9 (*.f64 (pow.f64 x 4) 81)) (/.f64 1 (+.f64 3 (*.f64 -9 (*.f64 x x)))) (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x -12 3) 1 (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x -12 3)) 2) (cbrt.f64 (fma.f64 x -12 3)) (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x -12 3)) (sqrt.f64 (fma.f64 x -12 3)) (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -12 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -12 (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 x) x (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (*.f64 (cbrt.f64 x) x)) (pow.f64 (cbrt.f64 x) 2) (fma.f64 x -12 3))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 9 (*.f64 x x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 9 (+.f64 3 (*.f64 -9 (*.f64 x x)))) (/.f64 (*.f64 (pow.f64 x 4) 81) (+.f64 3 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 9 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 6) 729 27) (/.f64 1 (fma.f64 (*.f64 9 (*.f64 x x)) (fma.f64 9 (*.f64 x x) -3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 9 (*.f64 (pow.f64 x 4) 81)) (/.f64 1 (+.f64 3 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 9 (*.f64 x x)) (fma.f64 9 (*.f64 x x) -3) 9) (fma.f64 (pow.f64 x 6) 729 27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 3 (*.f64 -9 (*.f64 x x))) (-.f64 9 (*.f64 (pow.f64 x 4) 81))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) 729 27) (fma.f64 (*.f64 9 (*.f64 x x)) (fma.f64 9 (*.f64 x x) -3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) 729 27) (fma.f64 (pow.f64 x 4) 81 (-.f64 9 (*.f64 27 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 9 (*.f64 (pow.f64 x 4) 81)) (+.f64 3 (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 6) 729 27)) (neg.f64 (fma.f64 (*.f64 9 (*.f64 x x)) (fma.f64 9 (*.f64 x x) -3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 9 (*.f64 (pow.f64 x 4) 81))) (neg.f64 (+.f64 3 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 4) 81 -9) (fma.f64 9 (*.f64 x x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 9 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 9 (*.f64 x x)) (fma.f64 9 (*.f64 x x) -3) 9) (fma.f64 (pow.f64 x 6) 729 27)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 3 (*.f64 -9 (*.f64 x x))) (-.f64 9 (*.f64 (pow.f64 x 4) 81))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3))) 2)) (cbrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3)))) (sqrt.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 9 (*.f64 x x) 3))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 9 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 9) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 9 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (*.f64 x x)) 1 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 9 (*.f64 x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 9) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 9 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 81)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 81)) (cbrt.f64 (*.f64 9 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) (*.f64 x 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 x) x 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (*.f64 (cbrt.f64 x) x)) (pow.f64 (cbrt.f64 x) 2) 3)))))"]],"rules":[["egg-rr",51],["egg-rr",82],["egg-rr",25]],"stop":[["node limit",1]],"time":52.8759765625,"type":"rewrite"},{"count":[[167,165]],"egraph":[[20,7986,51,0.11700412599999999],[19,7916,51,0.10720291699999998],[18,7636,51,0.09774629199999998],[17,7344,51,0.08821804199999998],[16,6954,51,0.07902225099999999],[15,6117,51,0.06958191799999999],[14,5431,51,0.058964583999999994],[13,4865,51,0.04961391799999999],[12,4352,51,0.041555668],[11,3950,51,0.033837251],[10,3640,51,0.027333335],[9,3420,51,0.021590043],[8,3208,51,0.016467376],[7,3004,51,0.011973959999999999],[6,1747,51,0.007741085],[5,502,51,0.003697793],[4,175,51,0.001316752],[3,73,51,0.000605918],[2,37,55,0.00031246000000000003],[1,22,57,0.00016541800000000002],[0,11,57,6.2459e-5]],"inputs":[["3","(+.f64 (*.f64 -12 x) 3)","(*.f64 9 (pow.f64 x 2))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(*.f64 9 (pow.f64 x 2))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","3","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["3","(+.f64 (*.f64 -12 x) 3)","(fma.f64 -12 x 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(fma.f64 -12 x (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (*.f64 x (*.f64 x 9)))","(*.f64 x (+.f64 -12 (*.f64 x 9)))","(*.f64 x (fma.f64 x 9 -12))","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(fma.f64 -12 x (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (*.f64 x (*.f64 x 9)))","(*.f64 x (+.f64 -12 (*.f64 x 9)))","(*.f64 x (fma.f64 x 9 -12))","3","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))"]],"stop":[["node limit",1]],"time":131.375,"type":"simplify"},{"compiler":[[2705,1871]],"time":36.81494140625,"type":"eval"},{"alts":[["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","done",0.1171875],["(fma.f64 x (fma.f64 x 9 -12) 3)","done",0.08984375],["(+.f64 (*.f64 -12 x) (fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 9) 3))","fresh",0.25722509768442015],["(+.f64 (*.f64 -12 x) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))","fresh",0.25435268560039825],["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","next",0.16472626953688402]],"compiler":[[12,10],[8,6],[17,12],[22,16],[12,9],[17,12],[22,16],[12,9]],"count":[[170,5]],"kept":[{"done":[1,1],"fresh":[3,0],"new":[165,3],"picked":[1,1]}],"min-error":[0],"time":42.93212890625,"type":"prune"},{"compiler":[[22,16]],"locations":[["(fma.f64 x -12 3)",0.04296875,true],["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))",0.16472626953688402,true]],"time":5.572998046875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x -12 3)","x","-inf",0.19482421875],["(fma.f64 x -12 3)","x","inf",0.1650390625],["(fma.f64 x -12 3)","x","0",0.43603515625],["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","x","-inf",0.260009765625],["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","x","inf",0.276123046875],["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","x","0",0.326904296875]],"time":1.73681640625,"type":"series"},{"count":[[2,43]],"egraph":[[2,1560,19,0.016571083],[1,142,19,0.0022786250000000003],[0,7,20,0.000238583]],"inputs":[["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","(fma.f64 x -12 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 (*.f64 x x)) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 9 (*.f64 x x)) 1) (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 9 (*.f64 x x)) (*.f64 x -12)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))) 2) (cbrt.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (*.f64 x 3) (sqrt.f64 (fma.f64 x -12 3))) (hypot.f64 (*.f64 x 3) (sqrt.f64 (fma.f64 x -12 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 9 (*.f64 x x)) 3) (pow.f64 (fma.f64 x -12 3) 3)) (+.f64 (*.f64 (*.f64 9 (*.f64 x x)) (*.f64 9 (*.f64 x x))) (-.f64 (pow.f64 (fma.f64 x -12 3) 2) (*.f64 (*.f64 9 (*.f64 x x)) (fma.f64 x -12 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 9 (*.f64 x x)) (*.f64 9 (*.f64 x x))) (pow.f64 (fma.f64 x -12 3) 2)) (-.f64 (*.f64 9 (*.f64 x x)) (fma.f64 x -12 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (*.f64 x 3) (sqrt.f64 (fma.f64 x -12 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (fma.f64 x -12 3) (*.f64 9 (*.f64 x x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (*.f64 x -12))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -12) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -12) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x -12 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -12 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -12 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -12 3)) (pow.f64 (cbrt.f64 (fma.f64 x -12 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x -12 3)) 2) (cbrt.f64 (fma.f64 x -12 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x -12 3)) (sqrt.f64 (fma.f64 x -12 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x -12) 3) 27) (+.f64 (*.f64 (*.f64 x -12) (*.f64 x -12)) (-.f64 9 (*.f64 (*.f64 x -12) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x -12) (*.f64 x -12)) 9) (-.f64 (*.f64 x -12) 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -12 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -12 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -12 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x -12 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x -12 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x -12 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -12 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x -12 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x -12 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x -12 3)))))))"]],"rules":[["egg-rr",21],["egg-rr",22]],"stop":[["node limit",1]],"time":37.071044921875,"type":"rewrite"},{"count":[[67,54]],"egraph":[[18,7818,144,0.100381457],[17,7528,144,0.091021915],[16,7134,144,0.081998957],[15,6297,144,0.072242499],[14,5605,144,0.061182082],[13,5038,144,0.051671707],[12,4527,144,0.043519624],[11,4123,144,0.035626249],[10,3806,144,0.028754999],[9,3586,144,0.022909082],[8,3374,144,0.017615499],[7,3168,144,0.012862624],[6,1833,144,0.008414332],[5,549,144,0.004181291],[4,203,144,0.001601707],[3,93,144,0.000793207],[2,49,166,0.00043991600000000005],[1,28,168,0.00022712400000000002],[0,14,180,8.5666e-5]],"inputs":[["3","(+.f64 (*.f64 -12 x) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(*.f64 9 (pow.f64 x 2))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(*.f64 9 (pow.f64 x 2))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","3","(+.f64 (*.f64 -12 x) 3)","(+.f64 (*.f64 -12 x) 3)","(+.f64 (*.f64 -12 x) 3)","(*.f64 -12 x)","(+.f64 3 (*.f64 -12 x))","(+.f64 3 (*.f64 -12 x))","(+.f64 3 (*.f64 -12 x))","(*.f64 -12 x)","(+.f64 3 (*.f64 -12 x))","(+.f64 3 (*.f64 -12 x))","(+.f64 3 (*.f64 -12 x))"]],"method":["egg-herbie"],"outputs":[["3","(+.f64 (*.f64 -12 x) 3)","(fma.f64 -12 x 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(fma.f64 -12 x (fma.f64 x (*.f64 x 9) 3))","(fma.f64 x (fma.f64 x 9 -12) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(fma.f64 -12 x (fma.f64 x (*.f64 x 9) 3))","(fma.f64 x (fma.f64 x 9 -12) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(fma.f64 -12 x (*.f64 9 (*.f64 x x)))","(fma.f64 9 (*.f64 x x) (*.f64 -12 x))","(*.f64 x (+.f64 -12 (*.f64 x 9)))","(*.f64 x (fma.f64 x 9 -12))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(fma.f64 -12 x (fma.f64 x (*.f64 x 9) 3))","(fma.f64 x (fma.f64 x 9 -12) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(fma.f64 -12 x (fma.f64 x (*.f64 x 9) 3))","(fma.f64 x (fma.f64 x 9 -12) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 9 (*.f64 x x))","(*.f64 x (*.f64 x 9))","(+.f64 (*.f64 -12 x) (*.f64 9 (pow.f64 x 2)))","(fma.f64 -12 x (*.f64 9 (*.f64 x x)))","(fma.f64 9 (*.f64 x x) (*.f64 -12 x))","(*.f64 x (+.f64 -12 (*.f64 x 9)))","(*.f64 x (fma.f64 x 9 -12))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(fma.f64 -12 x (fma.f64 x (*.f64 x 9) 3))","(fma.f64 x (fma.f64 x 9 -12) 3)","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(+.f64 (fma.f64 -12 x 3) (*.f64 9 (*.f64 x x)))","(fma.f64 -12 x (fma.f64 9 (*.f64 x x) 3))","(fma.f64 -12 x (fma.f64 x (*.f64 x 9) 3))","(fma.f64 x (fma.f64 x 9 -12) 3)","3","(+.f64 (*.f64 -12 x) 3)","(fma.f64 -12 x 3)","(+.f64 (*.f64 -12 x) 3)","(fma.f64 -12 x 3)","(+.f64 (*.f64 -12 x) 3)","(fma.f64 -12 x 3)","(*.f64 -12 x)","(+.f64 3 (*.f64 -12 x))","(fma.f64 -12 x 3)","(+.f64 3 (*.f64 -12 x))","(fma.f64 -12 x 3)","(+.f64 3 (*.f64 -12 x))","(fma.f64 -12 x 3)","(*.f64 -12 x)","(+.f64 3 (*.f64 -12 x))","(fma.f64 -12 x 3)","(+.f64 3 (*.f64 -12 x))","(fma.f64 -12 x 3)","(+.f64 3 (*.f64 -12 x))","(fma.f64 -12 x 3)"]],"stop":[["node limit",1]],"time":117.235107421875,"type":"simplify"},{"compiler":[[748,547]],"time":10.9609375,"type":"eval"},{"alts":[["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","done",0.1171875],["(fma.f64 x (fma.f64 x 9 -12) 3)","done",0.08984375],["(+.f64 (*.f64 -12 x) (fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 9) 3))","fresh",0.25722509768442015],["(+.f64 (*.f64 -12 x) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))","next",0.25435268560039825],["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","done",0.16472626953688402]],"compiler":[[12,10],[8,6],[17,12],[22,16],[12,9],[17,12],[22,16]],"count":[[59,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[54,0],"picked":[1,1]}],"min-error":[0],"time":10.162109375,"type":"prune"},{"compiler":[[72,46]],"locations":[["(cbrt.f64 (fma.f64 9 (*.f64 x x) 3))",0.05078125,true],["(fma.f64 9 (*.f64 x x) 3)",0.1015625,true],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))",0.12890625,true],["(pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)",0.140625,true]],"time":18.011962890625,"type":"localize"},{"count":[[4,32]],"series":[["(cbrt.f64 (fma.f64 9 (*.f64 x x) 3))","x","-inf",0.22412109375],["(cbrt.f64 (fma.f64 9 (*.f64 x x) 3))","x","inf",0.26513671875],["(cbrt.f64 (fma.f64 9 (*.f64 x x) 3))","x","0",0.303955078125],["(fma.f64 9 (*.f64 x x) 3)","x","-inf",0.1650390625],["(fma.f64 9 (*.f64 x x) 3)","x","inf",0.13818359375],["(fma.f64 9 (*.f64 x x) 3)","x","0",0.136962890625],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))","x","-inf",0.177001953125],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))","x","inf",0.22607421875],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))","x","0",0.259033203125],["(pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)","x","-inf",0.303955078125],["(pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)","x","inf",0.5380859375],["(pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)","x","0",1.156982421875]],"time":4.06689453125,"type":"series"},{"count":[[4,81]],"egraph":[[2,1876,39,0.016913917],[1,204,39,0.00296375],[0,10,39,0.000328583]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)","(*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))","(fma.f64 9 (*.f64 x x) 3)","(cbrt.f64 (fma.f64 9 (*.f64 x x) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6) (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 (*.f64 x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 9 (*.f64 x x)) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 9 (*.f64 x x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 9 (*.f64 x x)) 3) 27) (+.f64 (*.f64 (*.f64 9 (*.f64 x x)) (*.f64 9 (*.f64 x x))) (-.f64 9 (*.f64 (*.f64 9 (*.f64 x x)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 9 (*.f64 x x)) (*.f64 9 (*.f64 x x))) 9) (-.f64 (*.f64 9 (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 9 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 9 (*.f64 x x) 3)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 (*.f64 x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 9 (*.f64 x x)) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 9 (*.f64 x x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 9 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 9 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6) (*.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6) 3) (pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6)) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 9 (*.f64 x x)) 3) 27) (+.f64 (*.f64 (*.f64 9 (*.f64 x x)) (*.f64 9 (*.f64 x x))) (-.f64 9 (*.f64 (*.f64 9 (*.f64 x x)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 9 (*.f64 x x)) (*.f64 9 (*.f64 x x))) 9) (-.f64 (*.f64 9 (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 9 (*.f64 x x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 9 (*.f64 x x) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6) (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) 1/3) (pow.f64 (sqrt.f64 (fma.f64 9 (*.f64 x x) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (*.f64 x x) 3) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))))))"]],"rules":[["egg-rr",20],["egg-rr",28],["egg-rr",17],["egg-rr",16]],"stop":[["node limit",1]],"time":42.260009765625,"type":"rewrite"},{"count":[[113,84]],"egraph":[[5,7545,375,0.033061585],[4,5702,375,0.019616335],[3,1188,375,0.009219459999999999],[2,321,379,0.0024685009999999997],[1,123,381,0.000811626],[0,47,417,0.000223542]],"inputs":[["(pow.f64 (cbrt.f64 3) 2)","(+.f64 (*.f64 6 (/.f64 (pow.f64 x 2) (cbrt.f64 3))) (pow.f64 (cbrt.f64 3) 2))","(+.f64 (*.f64 6 (/.f64 (pow.f64 x 2) (cbrt.f64 3))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 4))) (pow.f64 (cbrt.f64 3) 2)))","(+.f64 (*.f64 6 (/.f64 (pow.f64 x 2) (cbrt.f64 3))) (+.f64 (*.f64 36 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 7))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 4))) (pow.f64 (cbrt.f64 3) 2))))","3","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(*.f64 9 (pow.f64 x 2))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(*.f64 9 (pow.f64 x 2))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","3","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(*.f64 9 (pow.f64 x 2))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(*.f64 9 (pow.f64 x 2))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(cbrt.f64 3)","(+.f64 (*.f64 3 (/.f64 (pow.f64 x 2) (pow.f64 (cbrt.f64 3) 2))) (cbrt.f64 3))","(+.f64 (*.f64 3 (/.f64 (pow.f64 x 2) (pow.f64 (cbrt.f64 3) 2))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5))) (cbrt.f64 3)))","(+.f64 (*.f64 3 (/.f64 (pow.f64 x 2) (pow.f64 (cbrt.f64 3) 2))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5))) (+.f64 (*.f64 45 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 8))) (cbrt.f64 3))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (cbrt.f64 3) 2)","(+.f64 (*.f64 6 (/.f64 (pow.f64 x 2) (cbrt.f64 3))) (pow.f64 (cbrt.f64 3) 2))","(fma.f64 6 (/.f64 (*.f64 x x) (cbrt.f64 3)) (pow.f64 (cbrt.f64 3) 2))","(fma.f64 6 (*.f64 (/.f64 x (cbrt.f64 3)) x) (pow.f64 (cbrt.f64 3) 2))","(fma.f64 6 (*.f64 x (/.f64 x (cbrt.f64 3))) (pow.f64 (cbrt.f64 3) 2))","(+.f64 (*.f64 6 (/.f64 (pow.f64 x 2) (cbrt.f64 3))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 4))) (pow.f64 (cbrt.f64 3) 2)))","(fma.f64 6 (/.f64 (*.f64 x x) (cbrt.f64 3)) (fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 4)) (pow.f64 (cbrt.f64 3) 2)))","(+.f64 (fma.f64 6 (*.f64 (/.f64 x (cbrt.f64 3)) x) (pow.f64 (cbrt.f64 3) 2)) (*.f64 (/.f64 (pow.f64 x 4) (cbrt.f64 3)) -3))","(fma.f64 6 (*.f64 x (/.f64 x (cbrt.f64 3))) (fma.f64 (/.f64 -3 (cbrt.f64 3)) (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 2)))","(+.f64 (*.f64 6 (/.f64 (pow.f64 x 2) (cbrt.f64 3))) (+.f64 (*.f64 36 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 7))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 4))) (pow.f64 (cbrt.f64 3) 2))))","(fma.f64 6 (/.f64 (*.f64 x x) (cbrt.f64 3)) (fma.f64 36 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 7)) (fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 4)) (pow.f64 (cbrt.f64 3) 2))))","(+.f64 (pow.f64 (cbrt.f64 3) 2) (fma.f64 6 (*.f64 (/.f64 x (cbrt.f64 3)) x) (fma.f64 36 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 7)) (*.f64 (/.f64 (pow.f64 x 4) (cbrt.f64 3)) -3))))","(fma.f64 6 (*.f64 x (/.f64 x (cbrt.f64 3))) (fma.f64 36 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 7)) (fma.f64 (/.f64 -3 (cbrt.f64 3)) (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 2))))","(fma.f64 6 (*.f64 x (/.f64 x (cbrt.f64 3))) (fma.f64 36 (/.f64 (pow.f64 x 6) (*.f64 (cbrt.f64 3) 9)) (fma.f64 (/.f64 -3 (cbrt.f64 3)) (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 2))))","3","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 (*.f64 x x) 9)","(*.f64 x (*.f64 x 9))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 (*.f64 x x) 9)","(*.f64 x (*.f64 x 9))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","3","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 (*.f64 x x) 9)","(*.f64 x (*.f64 x 9))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(*.f64 9 (pow.f64 x 2))","(*.f64 (*.f64 x x) 9)","(*.f64 x (*.f64 x 9))","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(+.f64 3 (*.f64 9 (pow.f64 x 2)))","(+.f64 3 (*.f64 (*.f64 x x) 9))","(fma.f64 (*.f64 x x) 9 3)","(fma.f64 x (*.f64 x 9) 3)","(cbrt.f64 3)","(+.f64 (*.f64 3 (/.f64 (pow.f64 x 2) (pow.f64 (cbrt.f64 3) 2))) (cbrt.f64 3))","(fma.f64 3 (/.f64 (*.f64 x x) (pow.f64 (cbrt.f64 3) 2)) (cbrt.f64 3))","(fma.f64 3 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 3) 2)) x) (cbrt.f64 3))","(fma.f64 3 (*.f64 x (/.f64 x (pow.f64 (cbrt.f64 3) 2))) (cbrt.f64 3))","(+.f64 (*.f64 3 (/.f64 (pow.f64 x 2) (pow.f64 (cbrt.f64 3) 2))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5))) (cbrt.f64 3)))","(fma.f64 3 (/.f64 (*.f64 x x) (pow.f64 (cbrt.f64 3) 2)) (fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5)) (cbrt.f64 3)))","(fma.f64 3 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 3) 2)) x) (fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5)) (cbrt.f64 3)))","(fma.f64 3 (*.f64 x (/.f64 x (pow.f64 (cbrt.f64 3) 2))) (fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5)) (cbrt.f64 3)))","(+.f64 (*.f64 3 (/.f64 (pow.f64 x 2) (pow.f64 (cbrt.f64 3) 2))) (+.f64 (*.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5))) (+.f64 (*.f64 45 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 8))) (cbrt.f64 3))))","(fma.f64 3 (/.f64 (*.f64 x x) (pow.f64 (cbrt.f64 3) 2)) (fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5)) (fma.f64 45 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 8)) (cbrt.f64 3))))","(fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5)) (fma.f64 3 (*.f64 (/.f64 x (pow.f64 (cbrt.f64 3) 2)) x) (fma.f64 45 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 8)) (cbrt.f64 3))))","(fma.f64 -9 (/.f64 (pow.f64 x 4) (pow.f64 (cbrt.f64 3) 5)) (fma.f64 3 (*.f64 x (/.f64 x (pow.f64 (cbrt.f64 3) 2))) (fma.f64 (/.f64 (pow.f64 x 6) (pow.f64 (cbrt.f64 3) 2)) 5 (cbrt.f64 3))))"]],"stop":[["node limit",1]],"time":49.6630859375,"type":"simplify"},{"compiler":[[3331,2396]],"time":40.138916015625,"type":"eval"},{"alts":[["(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","done",0.1171875],["(fma.f64 x (fma.f64 x 9 -12) 3)","done",0.08984375],["(+.f64 (*.f64 -12 x) (fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 9) 3))","fresh",0.25722509768442015],["(+.f64 (*.f64 -12 x) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))","done",0.25435268560039825],["(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","done",0.16472626953688402]],"compiler":[[12,10],[8,6],[17,12],[22,16],[12,9]],"count":[[128,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[123,0],"picked":[1,1]}],"min-error":[0],"time":28.923095703125,"type":"prune"},{"accuracy":[0.08984375],"baseline":[0.08984375],"branch":[["x",0.08984375,1],["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))",0.08984375,1],["(+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1)",0.08984375,1],["(-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4))",0.08984375,1]],"compiler":[[2,1],[14,11],[12,9],[10,7],[109,82]],"count":[[8,1]],"inputs":[["(+.f64 (*.f64 -12 x) (fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 9) 3))","(+.f64 (*.f64 -12 x) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) 3)) 2) (cbrt.f64 (fma.f64 9 (*.f64 x x) 3))))","(fma.f64 (*.f64 x 3) (*.f64 x 3) (fma.f64 x -12 3))","(*.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 2))","(+.f64 (*.f64 -12 x) (+.f64 3 (*.f64 9 (pow.f64 x 2))))","(pow.f64 (sqrt.f64 (fma.f64 x (fma.f64 x 9 -12) 3)) 2)","(fma.f64 x (fma.f64 x 9 -12) 3)","(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))"]],"link":["."],"name":["Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, D"],"oracle":[1.0871240723585869],"outputs":[["(fma.f64 x (fma.f64 x 9 -12) 3)"]],"time":15.205078125,"times":[["x",4.0830078125],["(*.f64 3 (+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1))",2.607177734375],["(+.f64 (-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4)) 1)",2.217041015625],["(-.f64 (*.f64 (*.f64 x 3) x) (*.f64 x 4))",4.1298828125]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[0,7,9,1.425e-5]],"inputs":[["(fma.f64 x (fma.f64 x 9 -12) 3)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (fma.f64 x 9 -12) 3)"]],"stop":[["fuel",1],["saturated",1]],"time":8.27978515625,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.343994140625,"type":"end"}]
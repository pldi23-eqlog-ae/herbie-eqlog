[{"compiler":[[26,15]],"method":["search"],"sampling":[[12,0.027434536605142057,0.006767185695935041,0.9657982776989229],[11,0.025605567498132586,0.009510639356449246,0.9648837931454182],[10,0.02414239221252501,0.013168577570468187,0.9626890302170068],[9,0.02048445399850607,0.019021278712898493,0.9604942672885954],[8,0.017558103427290916,0.026337155140936375,0.9561047414317727],[7,0.011705402284860611,0.03511620685458183,0.9531783908605576],[6,0.011705402284860611,0.046821609139442444,0.941472988575697],[5,0.0,0.07023241370916367,0.9297675862908363],[4,0.0,0.09364321827888489,0.9063567817211151],[3,0.0,0.09364321827888489,0.9063567817211151],[2,0.0,0.18728643655776978,0.8127135634422302],[1,0.0,0.37457287311553955,0.6254271268844604],[0,0.0,0.37457287311553955,0.6254271268844604]],"time":7.69482421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",41.901123046875,836],["body",256,"valid",394.94970703125,8256]],"time":444.97802734375,"type":"sample"},{"compiler":[[15,8]],"egraph":[[0,2,2,1.792e-6],[5,5462,30,0.022987291],[4,1278,30,0.009441041],[3,394,30,0.0024525],[2,137,30,0.000784208],[1,47,34,0.000275833],[0,13,40,7.5166e-5]],"inputs":[["0","1"],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 b b) (*.f64 a a)) (*.f64 b b))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 b b) (*.f64 a a)) (*.f64 b b))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 a b) (/.f64 a b)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 a b) (/.f64 a b) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 a (/.f64 a (*.f64 b b)) -1)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":45.705078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[6,7717,15,0.031437501],[5,1982,15,0.016840501],[4,553,15,0.004048126],[3,201,15,0.001365667],[2,72,15,0.00046029199999999995],[1,26,17,0.000180333],[0,9,20,5.7167e-5]],"inputs":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))"]],"stop":[["node limit",1]],"time":44.047119140625,"type":"simplify"},{"compiler":[[25,14]],"time":0.454833984375,"type":"eval"},{"alts":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","next",0.00390625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","fresh",13.7578125]],"compiler":[[12,8],[15,8],[12,8],[15,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":1.3759765625,"type":"prune"},{"compiler":[[40,14]],"locations":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))",0.00390625,true],["(/.f64 (/.f64 b a) a)",0.265625,true]],"time":11.739990234375,"type":"localize"},{"count":[[2,48]],"series":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","a","-inf",0.31201171875],["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","a","inf",0.35986328125],["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","a","0",0.333984375],["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","b","-inf",0.4619140625],["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","b","inf",0.303955078125],["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","b","0",0.344970703125],["(/.f64 (/.f64 b a) a)","a","-inf",0.20703125],["(/.f64 (/.f64 b a) a)","a","inf",0.47998046875],["(/.f64 (/.f64 b a) a)","a","0",0.942138671875],["(/.f64 (/.f64 b a) a)","b","-inf",2.763916015625],["(/.f64 (/.f64 b a) a)","b","inf",0.885009765625],["(/.f64 (/.f64 b a) a)","b","0",4.259033203125]],"time":12.18505859375,"type":"series"},{"count":[[2,57]],"egraph":[[2,2489,19,0.021645916],[1,186,19,0.003409249],[0,9,22,0.000243666]],"inputs":[["(/.f64 (/.f64 b a) a)","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (/.f64 b a) a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 (/.f64 1 a) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (/.f64 1 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 b a) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 b a) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 b a) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 b a) a)) (pow.f64 (cbrt.f64 (/.f64 (/.f64 b a) a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 b a) a)) 2) (cbrt.f64 (/.f64 (/.f64 b a) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 b a)) 2) (*.f64 (cbrt.f64 (/.f64 b a)) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 b) a) (/.f64 (sqrt.f64 b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 b a)) (*.f64 (sqrt.f64 (/.f64 b a)) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 b) a) (/.f64 1 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (/.f64 b a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 b) 2) a) (/.f64 (cbrt.f64 b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 b 1) (/.f64 (/.f64 1 a) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 b a)) 2) 1) (/.f64 (cbrt.f64 (/.f64 b a)) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 b a)) 1) (/.f64 (sqrt.f64 (/.f64 b a)) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 b (pow.f64 (cbrt.f64 a) 2)) (/.f64 (/.f64 1 a) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (/.f64 b a) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 b a)) 2) (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 (/.f64 (/.f64 b a) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 b a)) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (sqrt.f64 (/.f64 b a)) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 b (sqrt.f64 a)) (/.f64 (/.f64 1 a) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (/.f64 b a) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 b a)) 2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (/.f64 b a)) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 b a) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 b a) a) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 b a) a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 b) a) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a (/.f64 a b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 b a) (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (/.f64 b a) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (/.f64 b a) a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 b a) a) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 b a) 3) (pow.f64 a 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (/.f64 b a) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (/.f64 b a) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (/.f64 b a) a)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))) (cbrt.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))) (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)) 1/4) (pow.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))) 2)) (sqrt.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))) 2) 1/2) (pow.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))))))"]],"rules":[["egg-rr",20],["egg-rr",37]],"stop":[["node limit",1]],"time":48.242919921875,"type":"rewrite"},{"count":[[105,61]],"egraph":[[10,5594,528,0.036003666000000004],[9,4598,528,0.024713458],[8,3986,528,0.017864833],[7,3257,528,0.012639583],[6,1898,528,0.007718958],[5,442,528,0.003921041],[4,135,528,0.001283041],[3,55,528,0.000621916],[2,30,528,0.000360416],[1,17,528,0.000209333],[0,10,528,8.9791e-5]],"inputs":[["(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(/.f64 b (pow.f64 a 2))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(/.f64 b (pow.f64 a 2))","(/.f64 b (*.f64 a a))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (pow.f64 a 2)) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))"]],"stop":[["node limit",1]],"time":58.322998046875,"type":"simplify"},{"compiler":[[856,504]],"time":10.105224609375,"type":"eval"},{"alts":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","done",0.00390625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","next",13.7578125]],"compiler":[[12,8],[15,8],[15,8]],"count":[[63,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[61,0],"picked":[1,1]}],"min-error":[0],"time":8.577880859375,"type":"prune"},{"compiler":[[53,8]],"locations":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))",0.00390625,true],["(-.f64 (*.f64 a a) (*.f64 b b))",0.0078125,true],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))",13.346186928032143,true]],"time":6.679931640625,"type":"localize"},{"count":[[3,72]],"series":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","b","-inf",0.18896484375],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","b","inf",0.30908203125],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","b","0",0.2021484375],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","a","-inf",0.198974609375],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","a","inf",0.303955078125],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","a","0",0.286865234375],["(-.f64 (*.f64 a a) (*.f64 b b))","b","-inf",0.150146484375],["(-.f64 (*.f64 a a) (*.f64 b b))","b","inf",0.164794921875],["(-.f64 (*.f64 a a) (*.f64 b b))","b","0",0.14306640625],["(-.f64 (*.f64 a a) (*.f64 b b))","a","-inf",0.18017578125],["(-.f64 (*.f64 a a) (*.f64 b b))","a","inf",0.1650390625],["(-.f64 (*.f64 a a) (*.f64 b b))","a","0",0.157958984375],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","b","-inf",0.198974609375],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","b","inf",0.406005859375],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","b","0",0.35107421875],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","a","-inf",0.166015625],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","a","inf",0.382080078125],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","a","0",0.8701171875]],"time":5.05712890625,"type":"series"},{"count":[[3,304]],"egraph":[[2,3342,32,0.024841208000000004],[1,214,38,0.0044215],[0,9,46,0.000235583]],"inputs":[["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (pow.f64 a -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fabs.f64 (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (*.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (*.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/4) (*.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/4) (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (*.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) (neg.f64 (-.f64 a b))) (/.f64 1 (*.f64 a (neg.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a -2) (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 a b) (*.f64 (-.f64 a b) (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 a b) (/.f64 a (-.f64 a b))) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/4) 3) (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2))) (fabs.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (/.f64 (+.f64 a b) (/.f64 a (-.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 a 4))) (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (pow.f64 (cbrt.f64 a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) 1) (/.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) 1) (/.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 a b) 1) (/.f64 (-.f64 a b) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) a) (/.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 a b) a) (/.f64 (-.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (pow.f64 a 4))) (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (cbrt.f64 (pow.f64 a 4))) (/.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (pow.f64 (cbrt.f64 a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 a b) (cbrt.f64 (pow.f64 a 4))) (/.f64 (-.f64 a b) (pow.f64 (cbrt.f64 a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 1 (pow.f64 (/.f64 b a) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3) (pow.f64 a 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (/.f64 1 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1 (-.f64 1 (pow.f64 (/.f64 b a) 2))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a (neg.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (neg.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3) (pow.f64 a 6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (pow.f64 (/.f64 b a) 2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b (neg.f64 b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a a (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a a) 1 (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 a a) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (neg.f64 (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 b) b)) (pow.f64 (cbrt.f64 b) 2) (*.f64 (*.f64 (cbrt.f64 b) b) (pow.f64 (cbrt.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a a (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a a) 1 (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 a a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 b) b)) (sqrt.f64 b) (*.f64 (*.f64 (sqrt.f64 b) b) (sqrt.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a a (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a a) 1 (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 a a) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (neg.f64 (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b))))) (fma.f64 (neg.f64 (sqrt.f64 b)) (*.f64 b (sqrt.f64 b)) (*.f64 (sqrt.f64 b) (*.f64 b (sqrt.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a a (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a a) 1 (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 a a) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (neg.f64 (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2))))) (fma.f64 (neg.f64 (cbrt.f64 b)) (*.f64 b (pow.f64 (cbrt.f64 b) 2)) (*.f64 (cbrt.f64 b) (*.f64 b (pow.f64 (cbrt.f64 b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 a b)) (-.f64 a b))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 a b)) (-.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 a b)) (-.f64 a b)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 a b)) (-.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (/.f64 1 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (/.f64 1 (pow.f64 (hypot.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 a b) (-.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 a b) (+.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2)) (fabs.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (+.f64 a b)) (fabs.f64 (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4)) (-.f64 (pow.f64 a 6) (pow.f64 b 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (hypot.f64 a b) 2) (-.f64 (pow.f64 a 4) (pow.f64 b 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (pow.f64 (hypot.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6))) (fabs.f64 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4))) (fabs.f64 (pow.f64 (hypot.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6))) (neg.f64 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4))) (neg.f64 (pow.f64 (hypot.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 a 6) (pow.f64 (*.f64 b (neg.f64 b)) 3)) (+.f64 (pow.f64 a 4) (-.f64 (pow.f64 (*.f64 b (neg.f64 b)) 2) (*.f64 (*.f64 a a) (*.f64 b (neg.f64 b))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3) (pow.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 2) (-.f64 (pow.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 2) (*.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 4) (pow.f64 (*.f64 b (neg.f64 b)) 2)) (-.f64 (*.f64 a a) (*.f64 b (neg.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 2) (pow.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 2)) (-.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4)) (-.f64 (pow.f64 a 6) (pow.f64 b 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (hypot.f64 a b) 2) (-.f64 (pow.f64 a 4) (pow.f64 b 4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 (+.f64 a b) (neg.f64 (-.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (-.f64 (*.f64 b b) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 a b)) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 a a) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 a a))) (pow.f64 (exp.f64 b) b)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 a) a) (+.f64 1 (expm1.f64 (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 a a))) (+.f64 1 (expm1.f64 (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 a a))) (exp.f64 (*.f64 b (neg.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 a) a) (/.f64 1 (pow.f64 (exp.f64 b) b))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 a a))) (/.f64 1 (pow.f64 (exp.f64 b) b))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 a a) (*.f64 b b)))) (exp.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 b (neg.f64 b))) (pow.f64 (exp.f64 a) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 b) b)) (pow.f64 (exp.f64 a) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 b (neg.f64 b))) (+.f64 1 (expm1.f64 (*.f64 a a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 b) b)) (+.f64 1 (expm1.f64 (*.f64 a a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 b (neg.f64 b) (*.f64 b b))) (pow.f64 (exp.f64 (+.f64 a b)) (-.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 b (neg.f64 b) (*.f64 b b))) (+.f64 1 (expm1.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a a (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a a (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a a (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a a (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a a) 1 (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a a) 1 (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a a) 1 (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a a) 1 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b (neg.f64 b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1 (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1 (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1 (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1 (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1 (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a a) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a a) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a a) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 b (neg.f64 b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 b (neg.f64 b) (*.f64 b b)) (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 b 4)) (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (pow.f64 a 4)) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) a) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) a) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 b) b (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (/.f64 1 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (/.f64 1 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (/.f64 1 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (/.f64 1 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (/.f64 1 (fma.f64 (*.f64 b b) (pow.f64 (hypot.f64 a b) 2) (pow.f64 a 4))) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (/.f64 1 (pow.f64 (hypot.f64 a b) 2)) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (/.f64 1 (pow.f64 (hypot.f64 a b) 2)) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (/.f64 1 (pow.f64 (hypot.f64 a b) 2)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (/.f64 1 (pow.f64 (hypot.f64 a b) 2)) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (/.f64 1 (pow.f64 (hypot.f64 a b) 2)) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) (-.f64 a b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) (-.f64 a b) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) (-.f64 a b) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) (-.f64 a b) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) (-.f64 a b) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 a b) (+.f64 a b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 a b) (+.f64 a b) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 a b) (+.f64 a b) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 a b) (+.f64 a b) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 a b) (+.f64 a b) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (sqrt.f64 a)) (sqrt.f64 a) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 b (neg.f64 b) (*.f64 b b))) 2) (cbrt.f64 (fma.f64 b (neg.f64 b) (*.f64 b b))) (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 b (neg.f64 b))) 2) (cbrt.f64 (*.f64 b (neg.f64 b))) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 (sqrt.f64 (*.f64 b (neg.f64 b))) b) (hypot.f64 (sqrt.f64 (*.f64 b (neg.f64 b))) b) (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 b (neg.f64 b))) (sqrt.f64 (*.f64 b (neg.f64 b))) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2)) (fabs.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b)))) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2)) (fabs.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b)))) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2)) (fabs.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b)))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2)) (fabs.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b)))) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2)) (fabs.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b)))) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (+.f64 a b)) (fabs.f64 (-.f64 a b)) (fma.f64 b (neg.f64 b) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (+.f64 a b)) (fabs.f64 (-.f64 a b)) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (+.f64 a b)) (fabs.f64 (-.f64 a b)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (+.f64 a b)) (fabs.f64 (-.f64 a b)) (*.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (+.f64 a b)) (fabs.f64 (-.f64 a b)) (+.f64 (fma.f64 b (neg.f64 b) (*.f64 b b)) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (cbrt.f64 (pow.f64 a 4))) (fabs.f64 (pow.f64 (cbrt.f64 a) 2)) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 b 4))) (pow.f64 (cbrt.f64 b) 2) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 b) 1) b (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 b) (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 b) (sqrt.f64 b)) (sqrt.f64 b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (fma.f64 b (neg.f64 b) (fma.f64 b (neg.f64 b) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (neg.f64 (-.f64 (*.f64 b b) (fma.f64 b (neg.f64 b) (*.f64 b b)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/4) (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) (sqrt.f64 (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2))) (sqrt.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)) 1/2) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 a (sqrt.f64 (*.f64 b (neg.f64 b)))) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (+.f64 a b) (/.f64 a (-.f64 a b)))) (sqrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (+.f64 a b) (neg.f64 (-.f64 a b)))) (sqrt.f64 (*.f64 a (neg.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (pow.f64 (/.f64 b a) 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)))) 1))))))"]],"rules":[["egg-rr",32],["egg-rr",215],["egg-rr",57]],"stop":[["node limit",1]],"time":63.889892578125,"type":"rewrite"},{"count":[[376,317]],"egraph":[[5,7409,843,0.023072957999999998],[4,1359,843,0.011434541],[3,297,843,0.002624083],[2,97,843,0.00086975],[1,40,891,0.000376708],[0,17,999,0.000139333]],"inputs":[["(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a))","(/.f64 (*.f64 b (neg.f64 b)) (*.f64 a a))","(/.f64 b (/.f64 (*.f64 a a) (neg.f64 b)))","(*.f64 b (/.f64 (/.f64 (neg.f64 b) a) a))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a))","(/.f64 (*.f64 b (neg.f64 b)) (*.f64 a a))","(/.f64 b (/.f64 (*.f64 a a) (neg.f64 b)))","(*.f64 b (/.f64 (/.f64 (neg.f64 b) a) a))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a))","(/.f64 (*.f64 b (neg.f64 b)) (*.f64 a a))","(/.f64 b (/.f64 (*.f64 a a) (neg.f64 b)))","(*.f64 b (/.f64 (/.f64 (neg.f64 b) a) a))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 (/.f64 (neg.f64 (*.f64 b b)) (*.f64 a a)) 1)","(-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 (neg.f64 b) a) a) b 1)","(fma.f64 b (/.f64 (/.f64 (neg.f64 b) a) a) 1)","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(*.f64 b (neg.f64 b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(*.f64 b (neg.f64 b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(*.f64 b (neg.f64 b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(-.f64 (*.f64 a a) (*.f64 b b))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (-.f64 1 (*.f64 (/.f64 b a) (/.f64 b a)))))","(sqrt.f64 (fabs.f64 (fma.f64 (/.f64 b a) (/.f64 b a) -1)))","(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 b (*.f64 a a)) -1)))"]],"stop":[["node limit",1]],"time":49.2451171875,"type":"simplify"},{"compiler":[[7315,2847]],"time":58.65087890625,"type":"eval"},{"alts":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","done",0.00390625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","done",13.7578125]],"compiler":[[12,8],[15,8]],"count":[[319,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[317,0],"picked":[1,1]}],"min-error":[0],"time":123.18798828125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["a",0.00390625,1],["b",0.00390625,1],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))",0.00390625,1],["(fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a)))",0.00390625,1],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))",0.00390625,1],["(*.f64 a a)",0.00390625,1],["(*.f64 b b)",0.00390625,1]],"compiler":[[3,2],[3,2],[15,8],[14,7],[13,6],[5,3],[5,3],[25,14]],"count":[[2,1]],"inputs":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))"]],"link":["."],"name":["Eccentricity of an ellipse"],"oracle":[13.76171875],"outputs":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))"]],"time":14.841064453125,"times":[["a",2.613037109375],["b",2.419921875],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))",1.69921875],["(fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a)))",1.675048828125],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))",1.656005859375],["(*.f64 a a)",2.2470703125],["(*.f64 b b)",1.758056640625]],"type":"regimes"},{"compiler":[[12,8]],"egraph":[[0,9,15,1.5667e-5]],"inputs":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (fabs.f64 (fma.f64 b (/.f64 (/.f64 b a) a) -1)))"]],"stop":[["done",1],["saturated",1]],"time":9.7919921875,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":8.676025390625,"type":"end"}]
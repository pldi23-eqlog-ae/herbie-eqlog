[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.4797652819565883,0.41930705536856294,0.10092766267484876],[11,0.40565519775191206,0.499267935694661,0.09507686655342695],[10,0.34324670579007943,0.5694774891517227,0.08727580505819788],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":74.52197265625,"type":"analyze"},{"outcomes":[["body",256,"invalid",44.003173828125,1165],["body",1024,"valid",0.093017578125,1],["body",256,"valid",307.98388671875,8255]],"time":360.60693359375,"type":"sample"},{"compiler":[[10,7]],"egraph":[[1,3,3,6.2499999999999995e-6],[0,3,3,5.333e-6],[7,1162,40,0.009310168],[6,1156,40,0.007522043],[5,1090,40,0.005722751],[4,706,40,0.003771376],[3,336,40,0.001829459],[2,137,40,0.000766126],[1,53,40,0.000260001],[0,16,40,8.6584e-5]],"inputs":[["0","1","2"],["(*.f64 (+.f64 x y) (+.f64 z 1))","(*.f64 (+.f64 y x) (+.f64 z 1))","(*.f64 (+.f64 z y) (+.f64 x 1))","(*.f64 (+.f64 x z) (+.f64 y 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2"],["(*.f64 (+.f64 x y) (+.f64 z 1))","(*.f64 (+.f64 z 1) (+.f64 x y))","(*.f64 (+.f64 y x) (+.f64 z 1))","(*.f64 (+.f64 z 1) (+.f64 x y))","(*.f64 (+.f64 z y) (+.f64 x 1))","(*.f64 (+.f64 y z) (+.f64 x 1))","(*.f64 (+.f64 x z) (+.f64 y 1))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":33.39599609375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[7,410,10,0.0035435420000000002],[6,408,10,0.0028845420000000004],[5,386,10,0.002189709],[4,246,10,0.001442417],[3,120,10,0.000743042],[2,51,10,0.000332417],[1,19,10,0.000121333],[0,8,10,4.4792e-5]],"inputs":[["(*.f64 (+.f64 x y) (+.f64 z 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) (+.f64 z 1))"]],"stop":[["saturated",1]],"time":13.899169921875,"type":"simplify"},{"compiler":[[10,7]],"time":0.2099609375,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) (+.f64 z 1))","next",0.015625]],"compiler":[[10,7],[10,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.720947265625,"type":"prune"},{"compiler":[[20,10]],"locations":[["(*.f64 (+.f64 x y) (+.f64 z 1))",0.015625,true]],"time":4.39501953125,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (+.f64 x y) (+.f64 z 1))","z","-inf",0.300048828125],["(*.f64 (+.f64 x y) (+.f64 z 1))","z","inf",0.251953125],["(*.f64 (+.f64 x y) (+.f64 z 1))","z","0",0.378173828125],["(*.f64 (+.f64 x y) (+.f64 z 1))","y","-inf",0.287109375],["(*.f64 (+.f64 x y) (+.f64 z 1))","y","inf",0.291015625],["(*.f64 (+.f64 x y) (+.f64 z 1))","y","0",0.256103515625],["(*.f64 (+.f64 x y) (+.f64 z 1))","x","-inf",0.322998046875],["(*.f64 (+.f64 x y) (+.f64 z 1))","x","inf",0.36083984375],["(*.f64 (+.f64 x y) (+.f64 z 1))","x","0",0.362060546875]],"time":2.924072265625,"type":"series"},{"count":[[1,76]],"egraph":[[2,2546,10,0.022944749],[1,176,10,0.003184332],[0,8,10,0.000211791]],"inputs":[["(*.f64 (+.f64 x y) (+.f64 z 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x y) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x y) z) 1) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 z 1)) (*.f64 y (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 z 1)) (*.f64 x (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z 1) x) (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 z 1) y) (*.f64 (+.f64 z 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) z y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) (+.f64 z 1))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) (+.f64 z 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) (+.f64 z 1)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) (+.f64 z 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 x y) (+.f64 z 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (+.f64 1 (pow.f64 z 3))) (*.f64 (fma.f64 y (-.f64 y x) (*.f64 x x)) (-.f64 (fma.f64 z z 1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (-.f64 x y)) (+.f64 1 (pow.f64 z 3))) (*.f64 (-.f64 x y) (-.f64 (fma.f64 z z 1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (fma.f64 z z -1)) (*.f64 (fma.f64 y (-.f64 y x) (*.f64 x x)) (-.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (-.f64 x y)) (fma.f64 z z -1)) (*.f64 (-.f64 x y) (-.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 z 3)) (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 z z 1) z) (fma.f64 y (-.f64 y x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z -1) (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (*.f64 (-.f64 z 1) (fma.f64 y (-.f64 y x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 z 3)) (*.f64 (+.f64 x y) (-.f64 x y))) (*.f64 (-.f64 (fma.f64 z z 1) z) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z -1) (*.f64 (+.f64 x y) (-.f64 x y))) (*.f64 (-.f64 z 1) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (+.f64 x y) z) 3) (pow.f64 (+.f64 x y) 3)) (+.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2) (-.f64 (pow.f64 (+.f64 x y) 2) (*.f64 (*.f64 (+.f64 x y) z) (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2) (pow.f64 (+.f64 x y) 2)) (-.f64 (*.f64 (+.f64 x y) z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (+.f64 z 1)) (fma.f64 y (-.f64 y x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (-.f64 x y)) (+.f64 z 1)) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 z 3)) (+.f64 x y)) (-.f64 (fma.f64 z z 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z -1) (+.f64 x y)) (-.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (+.f64 1 (pow.f64 z 3))) (-.f64 (fma.f64 z z 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (fma.f64 z z -1)) (-.f64 z 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 z 1) (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 y (-.f64 y x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 z 1) (*.f64 (+.f64 x y) (-.f64 x y))) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (+.f64 z 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x y) (+.f64 z 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x y)) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (+.f64 x y) (+.f64 z 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 x y)) (exp.f64 (*.f64 (+.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x y))) (exp.f64 (*.f64 (+.f64 x y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (+.f64 x y) z)) (+.f64 1 (expm1.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (+.f64 z 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x y) (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x y) (+.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log1p.f64 z) (log.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log1p.f64 z) (log.f64 (+.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 z 1) (*.f64 y (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 z 1) (*.f64 x (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) z (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) 1 (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (+.f64 x y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x y) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x y) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z 1) x (*.f64 (+.f64 z 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) (+.f64 x y)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (cbrt.f64 (+.f64 x y)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) 1) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (+.f64 x y)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x y)) (sqrt.f64 (+.f64 x y)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x y)) (*.f64 (sqrt.f64 (+.f64 x y)) 1) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x y)) (*.f64 (sqrt.f64 (+.f64 x y)) z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (-.f64 y x) (*.f64 x x))) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) (-.f64 x y)) (/.f64 1 (-.f64 x y)) (*.f64 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) z) 1 (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) 2) (cbrt.f64 (*.f64 (+.f64 x y) z)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 x y) z)) (sqrt.f64 (*.f64 (+.f64 x y) z)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x y))) (*.f64 (sqrt.f64 z) (sqrt.f64 (+.f64 x y))) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (+.f64 x y)) (sqrt.f64 z)) (*.f64 (sqrt.f64 (+.f64 x y)) (sqrt.f64 z)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (cbrt.f64 (+.f64 x y)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 (+.f64 x y))) (sqrt.f64 (+.f64 x y)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) (sqrt.f64 z)) (sqrt.f64 z) (+.f64 x y))))))"]],"rules":[["egg-rr",76]],"stop":[["node limit",1]],"time":42.85986328125,"type":"rewrite"},{"count":[[112,86]],"egraph":[[7,365,318,0.0038552919999999997],[6,359,318,0.00314775],[5,325,318,0.002433667],[4,279,318,0.001679208],[3,164,318,0.001060292],[2,71,318,0.000540167],[1,33,330,0.00024412499999999998],[0,13,438,9.1625e-5]],"inputs":[["(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(*.f64 y (+.f64 1 z))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(*.f64 (+.f64 y x) z)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (+.f64 1 z))","(+.f64 y (*.f64 y z))","(fma.f64 y z y)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 y (+.f64 1 z))","(+.f64 y (*.f64 y z))","(fma.f64 y z y)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 y (+.f64 1 z))","(+.f64 y (*.f64 y z))","(fma.f64 y z y)","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (+.f64 1 z) x) (*.f64 y (+.f64 1 z)))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 y x) z)","(*.f64 z (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 y x) z)","(*.f64 z (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 y x) z) x))","(fma.f64 (+.f64 1 z) x (*.f64 y (+.f64 1 z)))","(*.f64 (+.f64 1 z) (+.f64 y x))"]],"stop":[["saturated",1]],"time":20.16015625,"type":"simplify"},{"compiler":[[1162,452]],"time":11.7080078125,"type":"eval"},{"alts":[["(fma.f64 z (+.f64 x y) (+.f64 x y))","fresh",0.01171875],["(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","next",0.00390625]],"compiler":[[11,5],[13,9],[11,5],[13,9]],"count":[[87,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[86,2],"picked":[1,0]}],"min-error":[0],"time":16.184814453125,"type":"prune"},{"compiler":[[25,15]],"locations":[["(*.f64 (+.f64 z 1) x)",0.0078125,true]],"time":5.842041015625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (+.f64 z 1) x)","x","-inf",0.282958984375],["(*.f64 (+.f64 z 1) x)","x","inf",0.295166015625],["(*.f64 (+.f64 z 1) x)","x","0",0.30517578125],["(*.f64 (+.f64 z 1) x)","z","-inf",0.212158203125],["(*.f64 (+.f64 z 1) x)","z","inf",0.18505859375],["(*.f64 (+.f64 z 1) x)","z","0",0.276123046875]],"time":1.64794921875,"type":"series"},{"count":[[1,19]],"egraph":[[2,1526,7,0.015619917],[1,122,7,0.002057833],[0,6,7,0.00016575]],"inputs":[["(*.f64 (+.f64 z 1) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x (*.f64 z x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 z 3)) x) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z z -1) x) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 1 (pow.f64 z 3))) (fma.f64 z z (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 z z -1)) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (*.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (*.f64 z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (*.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (*.f64 z x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (*.f64 z x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 z 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (*.f64 z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log1p.f64 z) (log.f64 x)))))))"]],"rules":[["egg-rr",19]],"stop":[["node limit",1]],"time":32.135009765625,"type":"rewrite"},{"count":[[43,24]],"egraph":[[6,48,114,0.000673417],[5,46,114,0.000543292],[4,42,114,0.000412292],[3,29,114,0.000276959],[2,23,114,0.000191917],[1,16,114,0.000113917],[0,8,114,5.325e-5]],"inputs":[["x","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) x)","(*.f64 z x)","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) x)","(*.f64 z x)","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) x)","(+.f64 (*.f64 z x) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)","(*.f64 (+.f64 1 z) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(+.f64 (*.f64 z x) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)","(*.f64 (+.f64 1 z) x)","(fma.f64 z x x)","(fma.f64 x z x)"]],"stop":[["saturated",1]],"time":12.99609375,"type":"simplify"},{"compiler":[[291,150]],"time":3.5849609375,"type":"eval"},{"alts":[["(fma.f64 (+.f64 z 1) y (fma.f64 x z x))","next",0]],"compiler":[[12,7],[12,7]],"count":[[26,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[24,1],"picked":[1,0]}],"min-error":[0],"time":3.833984375,"type":"prune"},{"compiler":[[23,10]],"time":5.18115234375,"type":"localize"},{"compiler":[[3,3]],"time":0.08984375,"type":"eval"},{"alts":[["(fma.f64 (+.f64 z 1) y (fma.f64 x z x))","done",0]],"compiler":[[12,7]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.528076171875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(*.f64 (+.f64 x y) (+.f64 z 1))",0,1],["(+.f64 x y)",0,1],["(+.f64 x y)",0,1],["(+.f64 z 1)",0,1],["(+.f64 z 1)",0,1]],"compiler":[[4,3],[4,3],[4,3],[10,7],[6,4],[6,4],[6,5],[6,5],[37,18]],"count":[[4,1]],"inputs":[["(fma.f64 (+.f64 z 1) y (fma.f64 x z x))","(fma.f64 z (+.f64 x y) (+.f64 x y))","(fma.f64 (+.f64 z 1) y (*.f64 (+.f64 z 1) x))","(*.f64 (+.f64 x y) (+.f64 z 1))"]],"link":["."],"name":["Optimisation.CirclePacking:place from circle-packing-0.1.0.4, G"],"oracle":[0.015625],"outputs":[["(fma.f64 (+.f64 z 1) y (fma.f64 x z x))"]],"time":25.1650390625,"times":[["x",3.011962890625],["y",3.02294921875],["z",4.303955078125],["(*.f64 (+.f64 x y) (+.f64 z 1))",3.093017578125],["(+.f64 x y)",3.0458984375],["(+.f64 x y)",3.053955078125],["(+.f64 z 1)",2.238037109375],["(+.f64 z 1)",2.27392578125]],"type":"regimes"},{"compiler":[[12,7]],"egraph":[[1,11,12,3.4667e-5],[0,8,12,2.1042e-5]],"inputs":[["(fma.f64 (+.f64 z 1) y (fma.f64 x z x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (+.f64 z 1) y (fma.f64 x z x))"]],"stop":[["done",1],["saturated",1]],"time":8.255859375,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[12,7],[12,7],[12,7]],"remove-preprocessing":[[]],"time":17.1748046875,"type":"end"}]
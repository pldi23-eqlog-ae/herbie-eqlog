[{"compiler":[[19,9]],"method":["search"],"sampling":[[12,0.33544564429485035,0.3842022786400321,0.28035207706511756],[11,0.29644033681870496,0.45636209747090106,0.24719756571039397],[10,0.2496339678473305,0.5148700586851191,0.23549597346755036],[9,0.2496339678473305,0.702095534570617,0.048270497582052485],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":79.903076171875,"type":"analyze"},{"outcomes":[["body",256,"invalid",32.7109375,799],["body",256,"valid",342.960205078125,8256]],"time":384.947021484375,"type":"sample"},{"compiler":[[18,8]],"egraph":[[1,3,3,5.334e-6],[0,3,3,4.375e-6],[5,230,44,0.0020085829999999995],[4,212,44,0.0015387079999999997],[3,162,44,0.0010556659999999998],[2,99,44,0.0006122079999999999],[1,51,60,0.000268333],[0,23,80,9.5833e-5]],"inputs":[["0","1","2"],["(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))","(+.f64 (+.f64 (+.f64 (*.f64 y x) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))","(+.f64 (+.f64 (+.f64 (*.f64 z y) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))","(+.f64 (+.f64 (+.f64 (*.f64 x z) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2"],["(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))","(+.f64 (*.f64 z z) (+.f64 (*.f64 z z) (fma.f64 x y (*.f64 z z))))","(fma.f64 z z (fma.f64 x y (*.f64 z (+.f64 z z))))","(fma.f64 x y (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 x y))","(fma.f64 (*.f64 z z) 3 (*.f64 x y))","(+.f64 (+.f64 (+.f64 (*.f64 y x) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))","(+.f64 (*.f64 z z) (+.f64 (*.f64 z z) (fma.f64 x y (*.f64 z z))))","(fma.f64 z z (fma.f64 x y (*.f64 z (+.f64 z z))))","(fma.f64 x y (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 x y))","(fma.f64 (*.f64 z z) 3 (*.f64 x y))","(+.f64 (+.f64 (+.f64 (*.f64 z y) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))","(+.f64 (*.f64 x x) (+.f64 (*.f64 x x) (fma.f64 z y (*.f64 x x))))","(fma.f64 x x (fma.f64 y z (*.f64 2 (*.f64 x x))))","(fma.f64 y z (*.f64 3 (*.f64 x x)))","(fma.f64 x (*.f64 3 x) (*.f64 y z))","(fma.f64 x (*.f64 x 3) (*.f64 y z))","(+.f64 (+.f64 (+.f64 (*.f64 x z) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (*.f64 y y) (+.f64 (*.f64 y y) (fma.f64 x z (*.f64 y y))))","(fma.f64 y y (fma.f64 x z (*.f64 y (+.f64 y y))))","(fma.f64 x z (*.f64 3 (*.f64 y y)))","(fma.f64 y (*.f64 3 y) (*.f64 x z))","(fma.f64 y (*.f64 y 3) (*.f64 x z))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":24.823974609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,81,11,0.000784542],[4,75,11,0.000611209],[3,57,11,0.000433334],[2,34,11,0.000260501],[1,17,15,0.000121376],[0,9,20,4.4917e-5]],"inputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))","(+.f64 (*.f64 z z) (+.f64 (*.f64 z z) (fma.f64 x y (*.f64 z z))))","(fma.f64 z z (fma.f64 x y (*.f64 z (+.f64 z z))))","(fma.f64 x y (*.f64 3 (*.f64 z z)))","(fma.f64 z (*.f64 3 z) (*.f64 x y))","(fma.f64 z (*.f64 z 3) (*.f64 x y))"]],"stop":[["saturated",1]],"time":11.80712890625,"type":"simplify"},{"compiler":[[26,11]],"time":0.350830078125,"type":"eval"},{"alts":[["(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))","fresh",0.12109375],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","next",0.10546875]],"compiler":[[18,8],[11,7],[18,8],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.05859375],"time":1.22998046875,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 z (*.f64 z 3) (*.f64 x y))",0.10546875,true]],"time":4.860107421875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 z (*.f64 z 3) (*.f64 x y))","y","-inf",0.251953125],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","y","inf",0.52783203125],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","y","0",0.302978515625],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","x","-inf",0.243896484375],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","x","inf",0.280029296875],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","x","0",0.382080078125],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","z","-inf",0.5810546875],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","z","inf",0.531982421875],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","z","0",0.5380859375]],"time":3.755859375,"type":"series"},{"count":[[1,21]],"egraph":[[2,1834,11,0.018156709],[1,159,11,0.0025335009999999996],[0,8,11,0.000213667]],"inputs":[["(fma.f64 z (*.f64 z 3) (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 z (*.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (*.f64 z 3)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (*.f64 z 3)) 1) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (*.f64 z 3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) (pow.f64 (cbrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 2) (cbrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) (sqrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (*.f64 z 3)) 3) (pow.f64 (*.f64 x y) 3)) (+.f64 (*.f64 (*.f64 z (*.f64 z 3)) (*.f64 z (*.f64 z 3))) (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 (*.f64 z (*.f64 z 3)) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 z (*.f64 z 3)) (*.f64 z (*.f64 z 3))) (pow.f64 (*.f64 x y) 2)) (-.f64 (*.f64 z (*.f64 z 3)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":35.80517578125,"type":"rewrite"},{"count":[[57,26]],"egraph":[[22,7991,345,0.122009167],[21,7050,345,0.110132125],[20,7016,345,0.096485167],[19,6944,345,0.086281501],[18,6664,345,0.07783304199999999],[17,6378,345,0.06954883399999999],[16,5984,345,0.061732041999999994],[15,5149,345,0.05335241699999999],[14,4467,345,0.04415683399999999],[13,3901,345,0.03680412599999999],[12,3422,345,0.030546792999999996],[11,3029,345,0.024705417999999996],[10,2732,345,0.019915958999999997],[9,2524,345,0.015918084],[8,2340,345,0.012282042],[7,2176,345,0.009130875],[6,1275,345,0.005832542],[5,354,345,0.002981625],[4,121,345,0.001133959],[3,58,345,0.0005682090000000001],[2,33,345,0.000334667],[1,19,345,0.00019125000000000001],[0,10,345,8.1e-5]],"inputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))"]],"stop":[["node limit",1]],"time":146.948974609375,"type":"simplify"},{"compiler":[[329,176]],"time":3.968994140625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 3)","fresh",0.7049753418954711],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","fresh",0.12109375],["(pow.f64 (sqrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 2)","fresh",19.852596337915983],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","next",0.1171875],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","done",0.10546875]],"compiler":[[14,10],[11,7],[14,10],[12,9],[11,7],[14,10],[11,7],[14,10],[12,9]],"count":[[28,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[26,4],"picked":[1,1]}],"min-error":[0.02734375],"time":6.137939453125,"type":"prune"},{"compiler":[[28,17]],"locations":[["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))",0.00390625,true],["(*.f64 3 (pow.f64 z 2))",0.19921875,true]],"time":6.864990234375,"type":"localize"},{"count":[[2,9]],"series":[["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","z","-inf",0.156005859375],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","z","inf",0.2529296875],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","z","0",0.18212890625],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","x","-inf",0.158935546875],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","x","inf",0.1640625],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","x","0",0.247802734375],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","y","-inf",0.162109375],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","y","inf",0.198974609375],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","y","0",0.2919921875],["(*.f64 3 (pow.f64 z 2))","z","-inf",0.18896484375],["(*.f64 3 (pow.f64 z 2))","z","inf",0.307861328125],["(*.f64 3 (pow.f64 z 2))","z","0",0.404052734375]],"time":2.85205078125,"type":"series"},{"count":[[2,96]],"egraph":[[2,2604,18,0.023349665999999998],[1,213,18,0.003594166],[0,10,18,0.000277666]],"inputs":[["(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (exp.f64 (*.f64 z z)) 2)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (*.f64 z z)) 3))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (*.f64 z z)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 3 (*.f64 z z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 z z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 z 4) 9) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 z z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 z 6) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 3 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 3 (*.f64 z z)))) 2)) (cbrt.f64 (log.f64 (*.f64 3 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 3 (*.f64 z z))))) (sqrt.f64 (log.f64 (*.f64 3 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 z 4) 9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (*.f64 z z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 6) 27))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 3 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 3 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 3 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 z z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 z z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (sqrt.f64 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 z 6) 27)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 z z))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 z z))) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (fma.f64 y x (*.f64 -3 (*.f64 z z)))) (/.f64 (*.f64 (pow.f64 z 4) 9) (fma.f64 y x (*.f64 -3 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3 (*.f64 z z) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 2) (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) (sqrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 z 6) 27 (pow.f64 (*.f64 y x) 3)) (/.f64 1 (fma.f64 (*.f64 3 (*.f64 z z)) (-.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)) (pow.f64 (*.f64 y x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (pow.f64 z 4) 9)) (/.f64 1 (fma.f64 y x (*.f64 -3 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 3 (*.f64 z z)) (-.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)) (pow.f64 (*.f64 y x) 2)) (fma.f64 (pow.f64 z 6) 27 (pow.f64 (*.f64 y x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y x (*.f64 -3 (*.f64 z z))) (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (pow.f64 z 4) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 z 6) 27 (pow.f64 (*.f64 y x) 3)) (fma.f64 (*.f64 3 (*.f64 z z)) (-.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)) (pow.f64 (*.f64 y x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 z 6) 27 (pow.f64 (*.f64 y x) 3)) (fma.f64 (pow.f64 z 4) 9 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (pow.f64 z 4) 9)) (fma.f64 y x (*.f64 -3 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 z 6) 27 (pow.f64 (*.f64 y x) 3))) (neg.f64 (fma.f64 (*.f64 3 (*.f64 z z)) (-.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)) (pow.f64 (*.f64 y x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (pow.f64 z 4) 9))) (neg.f64 (fma.f64 y x (*.f64 -3 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 z 4) 9) (pow.f64 (*.f64 y x) 2)) (-.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 3 (*.f64 z z)) (-.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)) (pow.f64 (*.f64 y x) 2)) (fma.f64 (pow.f64 z 6) 27 (pow.f64 (*.f64 y x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 y x (*.f64 -3 (*.f64 z z))) (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (pow.f64 z 4) 9))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)))) 2)) (cbrt.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))) (sqrt.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 z z)))) (pow.f64 (exp.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 z z)) 3) (+.f64 1 (expm1.f64 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 z z)))) (+.f64 1 (expm1.f64 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y x))) (pow.f64 (exp.f64 (*.f64 z z)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) y) (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 z z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y x))) (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 z z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 z z) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 z 3) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z z) 3 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 z z)) 1 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 z z)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (cbrt.f64 (*.f64 y x)) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 (*.f64 z z))) (cbrt.f64 (*.f64 (pow.f64 z 4) 9)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 z 4) 9)) (cbrt.f64 (*.f64 3 (*.f64 z z))) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y x)) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 3)) (*.f64 z (sqrt.f64 3)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 z) z (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 (cbrt.f64 z) z)) (pow.f64 (cbrt.f64 z) 2) (*.f64 y x))))))"]],"rules":[["egg-rr",71],["egg-rr",25]],"stop":[["node limit",1]],"time":45.611083984375,"type":"rewrite"},{"count":[[105,99]],"egraph":[[22,7960,48,0.12078658299999999],[21,7019,48,0.10902770799999999],[20,6985,48,0.09540945799999999],[19,6913,48,0.08511574999999999],[18,6639,48,0.076665875],[17,6353,48,0.068411792],[16,5965,48,0.060590916999999994],[15,5132,48,0.052269167],[14,4448,48,0.043173917],[13,3880,48,0.035884792],[12,3401,48,0.029774042],[11,3006,48,0.023968625],[10,2710,48,0.0192325],[9,2502,48,0.015316166999999999],[8,2318,48,0.011795792],[7,2154,48,0.008725834],[6,1273,48,0.005509333999999999],[5,332,48,0.00271275],[4,108,48,0.0009270839999999999],[3,49,48,0.000407167],[2,27,48,0.000222417],[1,16,48,0.00012175],[0,9,48,4.9375e-5]],"inputs":[["(*.f64 3 (pow.f64 z 2))","(*.f64 y x)","(*.f64 y x)","(*.f64 3 (pow.f64 z 2))","(*.f64 y x)","(*.f64 y x)","(*.f64 y x)","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (pow.f64 z 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(*.f64 y x)","(*.f64 y x)","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(*.f64 y x)","(*.f64 y x)","(*.f64 y x)","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))"]],"stop":[["node limit",1]],"time":134.614013671875,"type":"simplify"},{"compiler":[[1442,712]],"time":15.6669921875,"type":"eval"},{"alts":[["(+.f64 (*.f64 y x) (pow.f64 (*.f64 z (sqrt.f64 3)) 2))","fresh",0.26017387698974626],["(+.f64 (*.f64 y x) (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 z z))) 3))","fresh",0.29894267583195633],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","next",0.12109375],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","done",0.1171875],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","fresh",0.2393150879159781],["(+.f64 (*.f64 y x) (cbrt.f64 (*.f64 (pow.f64 z 6) 27)))","fresh",16.40690493446075],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","done",0.10546875]],"compiler":[[13,10],[15,11],[11,7],[12,9],[17,11],[13,10],[11,7],[13,10],[15,11],[11,7],[17,11],[13,10]],"count":[[104,7]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[99,4],"picked":[1,1]}],"min-error":[0.00390625],"time":22.251953125,"type":"prune"},{"compiler":[[21,8]],"locations":[["(fma.f64 3 (*.f64 z z) (*.f64 y x))",0.12109375,true]],"time":4.35498046875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 3 (*.f64 z z) (*.f64 y x))","x","-inf",0.150146484375],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","x","inf",0.173095703125],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","x","0",0.151123046875],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","y","-inf",0.15087890625],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","y","inf",0.16796875],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","y","0",0.15380859375],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","z","-inf",0.156982421875],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","z","inf",0.191162109375],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","z","0",0.196044921875]],"time":1.593994140625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1814,11,0.017068751],[1,159,11,0.0025375009999999997],[0,8,11,0.000210709]],"inputs":[["(fma.f64 3 (*.f64 z z) (*.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 3 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 z z)) 1) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3 (*.f64 z z) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 2) (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) (sqrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 z z)) 3) (pow.f64 (*.f64 y x) 3)) (+.f64 (*.f64 (*.f64 3 (*.f64 z z)) (*.f64 3 (*.f64 z z))) (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 3 (*.f64 z z)) (*.f64 3 (*.f64 z z))) (pow.f64 (*.f64 y x) 2)) (-.f64 (*.f64 3 (*.f64 z z)) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 3 (*.f64 z z) (*.f64 y x))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":34.0888671875,"type":"rewrite"},{"count":[[57,26]],"egraph":[[22,7991,345,0.122326418],[21,7050,345,0.11048108400000001],[20,7016,345,0.096819209],[19,6944,345,0.086582375],[18,6664,345,0.078012042],[17,6378,345,0.069691209],[16,5984,345,0.061884667000000004],[15,5149,345,0.053460459],[14,4467,345,0.044289417],[13,3901,345,0.036940792],[12,3422,345,0.030670584],[11,3029,345,0.024810584],[10,2732,345,0.019974042],[9,2524,345,0.015957459],[8,2340,345,0.012319626],[7,2176,345,0.009181001],[6,1275,345,0.005882709],[5,354,345,0.002981001],[4,121,345,0.001136209],[3,58,345,0.000558376],[2,33,345,0.000328376],[1,19,345,0.000187209],[0,10,345,7.6709e-5]],"inputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 3 (pow.f64 z 2))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 3 (pow.f64 z 2))","(*.f64 3 (*.f64 z z))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))"]],"stop":[["node limit",1]],"time":147.47412109375,"type":"simplify"},{"compiler":[[329,146]],"time":3.574951171875,"type":"eval"},{"alts":[["(+.f64 (*.f64 y x) (pow.f64 (*.f64 z (sqrt.f64 3)) 2))","fresh",0.26017387698974626],["(+.f64 (*.f64 y x) (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 z z))) 3))","fresh",0.29894267583195633],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","done",0.12109375],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","done",0.1171875],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","next",0.2393150879159781],["(+.f64 (*.f64 y x) (cbrt.f64 (*.f64 (pow.f64 z 6) 27)))","fresh",16.40690493446075],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","done",0.10546875]],"compiler":[[13,10],[15,11],[11,7],[12,9],[17,11],[13,10],[11,7],[13,10],[15,11],[17,11],[13,10]],"count":[[33,7]],"kept":[{"done":[2,2],"fresh":[4,4],"new":[26,0],"picked":[1,1]}],"min-error":[0.00390625],"time":6.3779296875,"type":"prune"},{"compiler":[[41,19]],"locations":[["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))",0.109375,true],["(*.f64 (cbrt.f64 z) z)",0.203125,true],["(*.f64 (pow.f64 (cbrt.f64 z) 2) 3)",0.28125,true],["(pow.f64 (cbrt.f64 z) 2)",0.4739837890737681,true]],"time":9.326171875,"type":"localize"},{"count":[[4,27]],"series":[["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","x","-inf",0.18798828125],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","x","inf",0.1708984375],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","x","0",0.951904296875],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","y","-inf",0.18994140625],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","y","inf",0.179931640625],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","y","0",1.5458984375],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","z","-inf",0.404052734375],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","z","inf",0.768798828125],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","z","0",0.339111328125],["(*.f64 (cbrt.f64 z) z)","z","-inf",0.3330078125],["(*.f64 (cbrt.f64 z) z)","z","inf",0.22900390625],["(*.f64 (cbrt.f64 z) z)","z","0",0.259033203125],["(*.f64 (pow.f64 (cbrt.f64 z) 2) 3)","z","-inf",0.421142578125],["(*.f64 (pow.f64 (cbrt.f64 z) 2) 3)","z","inf",0.347900390625],["(*.f64 (pow.f64 (cbrt.f64 z) 2) 3)","z","0",0.31884765625],["(pow.f64 (cbrt.f64 z) 2)","z","-inf",0.6279296875],["(pow.f64 (cbrt.f64 z) 2)","z","inf",0.386962890625],["(pow.f64 (cbrt.f64 z) 2)","z","0",0.58984375]],"time":8.468994140625,"type":"series"},{"count":[[4,129]],"egraph":[[2,2700,32,0.024005415999999998],[1,241,34,0.004021416],[0,12,42,0.000323583]],"inputs":[["(pow.f64 (cbrt.f64 z) 2)","(*.f64 (pow.f64 (cbrt.f64 z) 2) 3)","(*.f64 (cbrt.f64 z) z)","(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/6) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 z) 8))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 5) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 z (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 4/3 (log.f64 z)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 z)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 z) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 z) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 z)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 z)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 4/3 (log.f64 z)) 1) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)) 2)) (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)) 3))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 z (cbrt.f64 z)) 9) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 z) (sqrt.f64 3)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 z) (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z)))) 2)) (cbrt.f64 (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z))))) (sqrt.f64 (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 z (cbrt.f64 z)) 9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 z) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 z) (sqrt.f64 3)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (cbrt.f64 z) (sqrt.f64 3)) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 z) 2) 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 z) (sqrt.f64 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 3) (*.f64 2/3 (log.f64 z))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (cbrt.f64 z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (cbrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (cbrt.f64 z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (cbrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (cbrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 z) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 z) 8) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 4) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 3) 4/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 z)) 12)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 z) 8/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 1/6) 8)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (*.f64 4/3 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 4/3 (log.f64 z))) 2)) (cbrt.f64 (*.f64 4/3 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 4/3 (log.f64 z)))) (sqrt.f64 (*.f64 4/3 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 z) 8))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (cbrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 z 4))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 4/3 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 4/3 (log.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 z) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 z 4)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 4/3 (log.f64 z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 z) 1) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 z) 1/3) 4))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 z)) 1) 4))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 z)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 4/3 (log.f64 z)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (*.f64 z z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z z) 3) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 z z) 3) 1) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) 2) (cbrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) (sqrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (*.f64 z z) 3) 3) (pow.f64 (*.f64 y x) 3)) (+.f64 (pow.f64 (*.f64 (*.f64 z z) 3) 2) (-.f64 (pow.f64 (*.f64 y x) 2) (*.f64 (*.f64 (*.f64 z z) 3) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (*.f64 z z) 3) 2) (pow.f64 (*.f64 y x) 2)) (-.f64 (*.f64 (*.f64 z z) 3) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))) 2)) (cbrt.f64 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))) (sqrt.f64 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y x))) (pow.f64 (pow.f64 (exp.f64 z) z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 z) z) 3) (+.f64 1 (expm1.f64 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (*.f64 z z) 3 (*.f64 y x))) 1) 1))))))"]],"rules":[["egg-rr",36],["egg-rr",38],["egg-rr",24],["egg-rr",31]],"stop":[["node limit",1]],"time":49.72802734375,"type":"rewrite"},{"count":[[156,134]],"egraph":[[21,7166,240,0.12002533300000001],[20,7132,240,0.10657050000000001],[19,7060,240,0.09547504100000001],[18,6782,240,0.08653058300000001],[17,6494,240,0.07762129100000001],[16,6100,240,0.069422541],[15,5263,240,0.060848833],[14,4573,240,0.050951790999999996],[13,4001,240,0.042576458],[12,3492,240,0.035363166],[11,3086,240,0.028109625],[10,2780,240,0.02232425],[9,2555,240,0.017338125],[8,2337,240,0.013180875],[7,2146,240,0.009527166],[6,1110,240,0.006072875],[5,413,240,0.003179625],[4,162,240,0.0014732080000000002],[3,92,240,0.000744291],[2,61,240,0.00043720799999999997],[1,34,240,0.00025304099999999996],[0,14,240,0.000111083]],"inputs":[["(*.f64 y x)","(*.f64 y x)","(*.f64 y x)","(*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y x)","(*.f64 y x)","(*.f64 y x)","(*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2)))","(*.f64 3 (*.f64 z z))","(*.f64 z (*.f64 3 z))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2)))","(*.f64 3 (*.f64 z z))","(*.f64 z (*.f64 3 z))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))","(+.f64 (*.f64 y x) (*.f64 3 (*.f64 (pow.f64 1 1/3) (pow.f64 z 2))))","(fma.f64 y x (*.f64 3 (*.f64 z z)))","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(fma.f64 y x (*.f64 z (*.f64 3 z)))"]],"stop":[["node limit",1]],"time":141.75390625,"type":"simplify"},{"compiler":[[2201,1080]],"time":23.659912109375,"type":"eval"},{"alts":[["(+.f64 (*.f64 y x) (pow.f64 (*.f64 z (sqrt.f64 3)) 2))","fresh",0.26017387698974626],["(+.f64 (*.f64 y x) (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 z z))) 3))","fresh",0.29894267583195633],["(fma.f64 3 (*.f64 z z) (*.f64 y x))","done",0.12109375],["(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","done",0.1171875],["(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","done",0.2393150879159781],["(+.f64 (*.f64 y x) (cbrt.f64 (*.f64 (pow.f64 z 6) 27)))","fresh",16.40690493446075],["(fma.f64 z (*.f64 z 3) (*.f64 x y))","done",0.10546875]],"compiler":[[13,10],[15,11],[11,7],[12,9],[17,11],[13,10],[11,7]],"count":[[141,7]],"kept":[{"done":[3,3],"fresh":[3,3],"new":[134,0],"picked":[1,1]}],"min-error":[0.00390625],"time":34.5,"type":"prune"},{"accuracy":[0.10546875],"baseline":[0.10546875],"branch":[["x",0.10546875,1],["y",0.10546875,1],["z",0.10546875,1],["(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))",0.10546875,1],["(*.f64 x y)",0.10546875,1],["(*.f64 z z)",0.10546875,1],["(*.f64 z z)",0.10546875,1]],"compiler":[[4,3],[4,3],[4,3],[18,8],[6,4],[6,4],[6,4],[111,56]],"count":[[10,1]],"inputs":[["(+.f64 (*.f64 y x) (pow.f64 (*.f64 z (sqrt.f64 3)) 2))","(+.f64 (*.f64 y x) (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 z z))) 3))","(fma.f64 (*.f64 (cbrt.f64 z) z) (*.f64 (pow.f64 (cbrt.f64 z) 2) 3) (*.f64 y x))","(+.f64 (*.f64 y x) (cbrt.f64 (*.f64 (pow.f64 z 6) 27)))","(pow.f64 (cbrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 3)","(fma.f64 3 (*.f64 z z) (*.f64 y x))","(pow.f64 (sqrt.f64 (fma.f64 z (*.f64 z 3) (*.f64 x y))) 2)","(+.f64 (*.f64 y x) (*.f64 3 (pow.f64 z 2)))","(fma.f64 z (*.f64 z 3) (*.f64 x y))","(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, A"],"oracle":[36.21918760052428],"outputs":[["(fma.f64 z (*.f64 z 3) (*.f64 x y))"]],"time":32.09619140625,"times":[["x",4.803955078125],["y",4.992919921875],["z",4.593994140625],["(+.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 z z)) (*.f64 z z)) (*.f64 z z))",4.7568359375],["(*.f64 x y)",4.4189453125],["(*.f64 z z)",3.010009765625],["(*.f64 z z)",3.259033203125]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[1,10,11,2.9167e-5],[0,8,11,1.7375e-5]],"inputs":[["(fma.f64 z (*.f64 z 3) (*.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 z (*.f64 z 3) (*.f64 x y))"]],"stop":[["fuel",1],["saturated",1]],"time":8.531005859375,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[11,7],[11,7],[11,7]],"remove-preprocessing":[["(sort x y)"]],"time":8.9609375,"type":"end"}]
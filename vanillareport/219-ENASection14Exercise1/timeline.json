[{"compiler":[[17,12]],"method":["search"],"sampling":[[1,3.6621093750000304e-6,0.0,0.999996337890625],[0,0.0,3.6621093750000304e-6,0.999996337890625]],"time":0.18798828125,"type":"analyze"},{"outcomes":[["body",256,"valid",448.3740234375,8256]],"time":456.240966796875,"type":"sample"},{"compiler":[[10,7]],"egraph":[[0,1,1,1.75e-6],[11,5811,14,0.041892707],[10,4654,14,0.028898373999999998],[9,4114,14,0.021033666],[8,3800,14,0.015590416],[7,1495,14,0.010735083],[6,840,14,0.004474083],[5,282,14,0.002088167],[4,109,14,0.000886625],[3,48,14,0.00043775],[2,25,14,0.00023745800000000002],[1,14,14,0.000121917],[0,8,14,5.25e-5]],"inputs":[["0"],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":64.703857421875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,5811,14,0.041654291999999996],[10,4654,14,0.028823083],[9,4114,14,0.020998166],[8,3800,14,0.015564333],[7,1495,14,0.010676833],[6,840,14,0.004433332999999999],[5,282,14,0.002077125],[4,109,14,0.000883667],[3,48,14,0.00042683399999999996],[2,25,14,0.000228792],[1,14,14,0.00011845899999999999],[0,8,14,5.1209e-5]],"inputs":[["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))"]],"stop":[["node limit",1]],"time":53.529052734375,"type":"simplify"},{"compiler":[[19,12]],"time":0.41796875,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","next",2.0825536454117612],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","fresh",3.579024396718685]],"compiler":[[10,7],[10,7],[10,7],[10,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[1.9333285272787448],"time":1.315185546875,"type":"prune"},{"compiler":[[26,13]],"locations":[["(cos.f64 x)",0.0234375,true],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))",0.31478500976844204,true],["(pow.f64 (pow.f64 (exp.f64 x) 10) x)",0.40234375,true],["(pow.f64 (exp.f64 x) 10)",1.6422263120004126,true]],"time":16.087890625,"type":"localize"},{"count":[[4,32]],"series":[["(cos.f64 x)","x","-inf",0.1328125],["(cos.f64 x)","x","inf",0.1640625],["(cos.f64 x)","x","0",0.18115234375],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","x","-inf",0.345947265625],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","x","inf",0.3330078125],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","x","0",0.2421875],["(pow.f64 (pow.f64 (exp.f64 x) 10) x)","x","-inf",0.23388671875],["(pow.f64 (pow.f64 (exp.f64 x) 10) x)","x","inf",0.22607421875],["(pow.f64 (pow.f64 (exp.f64 x) 10) x)","x","0",0.85986328125],["(pow.f64 (exp.f64 x) 10)","x","-inf",0.79296875],["(pow.f64 (exp.f64 x) 10)","x","inf",0.94287109375],["(pow.f64 (exp.f64 x) 10)","x","0",0.387939453125]],"time":5.01806640625,"type":"series"},{"count":[[4,61]],"egraph":[[2,1967,32,0.018825375],[1,167,32,0.002861916],[0,8,32,0.000236]],"inputs":[["(pow.f64 (exp.f64 x) 10)","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","(cos.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 x) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) (cbrt.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 5) (pow.f64 (exp.f64 x) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 10) (pow.f64 (cbrt.f64 (exp.f64 x)) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 10) (pow.f64 (sqrt.f64 (exp.f64 x)) 10))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 x) 20))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 10))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) (*.f64 x 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 x) (*.f64 x 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (*.f64 x 10)) (pow.f64 (exp.f64 x) (*.f64 x 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 10)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 10)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) 5) x) (pow.f64 (pow.f64 (exp.f64 x) 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x (*.f64 x 10)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 x)) (pow.f64 (exp.f64 x) (*.f64 x 10))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) 3) (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cos.f64 x)) (*.f64 x (*.f64 x 10))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 x)))))))"]],"rules":[["egg-rr",16],["egg-rr",13],["egg-rr",18],["egg-rr",14]],"stop":[["node limit",1]],"time":43.95703125,"type":"rewrite"},{"count":[[93,90]],"egraph":[[6,7217,363,0.033772333],[5,4592,363,0.022146208],[4,2238,363,0.012674708],[3,1171,363,0.00620325],[2,363,363,0.0026541250000000002],[1,148,371,0.0009430409999999999],[0,60,381,0.000274]],"inputs":[["1","(+.f64 1 (*.f64 10 x))","(+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2))))","(+.f64 (*.f64 500/3 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2)))))","1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","1","(+.f64 1 (*.f64 19/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (*.f64 19/2 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (+.f64 (*.f64 19/2 (pow.f64 x 2)) (*.f64 102299/720 (pow.f64 x 6)))))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 10 x))","(fma.f64 10 x 1)","(+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2))))","(+.f64 1 (fma.f64 10 x (*.f64 50 (*.f64 x x))))","(+.f64 (fma.f64 10 x 1) (*.f64 x (*.f64 x 50)))","(fma.f64 10 x (fma.f64 x (*.f64 x 50) 1))","(+.f64 (*.f64 500/3 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 10 x) (*.f64 50 (pow.f64 x 2)))))","(fma.f64 500/3 (pow.f64 x 3) (+.f64 1 (fma.f64 10 x (*.f64 50 (*.f64 x x)))))","(+.f64 (fma.f64 10 x (*.f64 x (*.f64 x 50))) (fma.f64 500/3 (pow.f64 x 3) 1))","(fma.f64 500/3 (pow.f64 x 3) (fma.f64 10 x (fma.f64 x (*.f64 x 50) 1)))","1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(fma.f64 10 (*.f64 x x) 1)","(fma.f64 x (*.f64 10 x) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(fma.f64 10 (*.f64 x x) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(fma.f64 10 (*.f64 x x) (fma.f64 50 (pow.f64 x 4) 1))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 500/3 (pow.f64 x 6) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 500/3 (pow.f64 x 6) (fma.f64 50 (pow.f64 x 4) 1)))","(fma.f64 10 (*.f64 x x) (fma.f64 50 (pow.f64 x 4) (fma.f64 500/3 (pow.f64 x 6) 1)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x))","(pow.f64 (pow.f64 (exp.f64 x) 10) x)","(pow.f64 (exp.f64 x) (*.f64 10 x))","(pow.f64 (exp.f64 10) (*.f64 x x))","1","(+.f64 1 (*.f64 19/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) 19/2))","(fma.f64 (*.f64 x x) 19/2 1)","(fma.f64 x (*.f64 x 19/2) 1)","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (*.f64 19/2 (pow.f64 x 2))))","(+.f64 1 (fma.f64 1081/24 (pow.f64 x 4) (*.f64 (*.f64 x x) 19/2)))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1081/24 (*.f64 (*.f64 19/2 x) x)))","(fma.f64 x (*.f64 x 19/2) (fma.f64 (pow.f64 x 4) 1081/24 1))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (+.f64 (*.f64 19/2 (pow.f64 x 2)) (*.f64 102299/720 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 1081/24 (pow.f64 x 4) (fma.f64 19/2 (*.f64 x x) (*.f64 (pow.f64 x 6) 102299/720))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1081/24 (fma.f64 (pow.f64 x 6) 102299/720 (*.f64 (*.f64 19/2 x) x))))","(fma.f64 (pow.f64 x 4) 1081/24 (+.f64 1 (fma.f64 (pow.f64 x 6) 102299/720 (*.f64 x (*.f64 x 19/2)))))","(fma.f64 (pow.f64 x 4) 1081/24 (+.f64 (*.f64 x (*.f64 x 19/2)) (fma.f64 (pow.f64 x 6) 102299/720 1)))","(+.f64 1 (fma.f64 x (*.f64 x 19/2) (fma.f64 (pow.f64 x 4) 1081/24 (*.f64 (pow.f64 x 6) 102299/720))))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 x) (*.f64 10 x)) (cos.f64 x))","(*.f64 (pow.f64 (exp.f64 10) (*.f64 x x)) (cos.f64 x))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) -1/2))","(fma.f64 (*.f64 x x) -1/2 1)","(fma.f64 x (*.f64 x -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 (pow.f64 x 4) 1/24)))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/24 (*.f64 x (*.f64 x -1/2))))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 1/24 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 4) (*.f64 (pow.f64 x 6) -1/720))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 (pow.f64 x 4) 1/24 (*.f64 (pow.f64 x 6) -1/720)))","(+.f64 1 (fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 1/24 (*.f64 (pow.f64 x 6) -1/720))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/24 (fma.f64 x (*.f64 x -1/2) (*.f64 (pow.f64 x 6) -1/720))))","(+.f64 1 (fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 6) -1/720 (*.f64 (pow.f64 x 4) 1/24))))"]],"stop":[["node limit",1]],"time":50.77685546875,"type":"simplify"},{"compiler":[[1200,716]],"time":16.27099609375,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))","fresh",2.1571165798456553],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cos.f64 x) (pow.f64 (expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 10))) x))","fresh",3.3297027347375514],["(*.f64 (log1p.f64 (expm1.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.1118450874510106],["(*.f64 (expm1.f64 (log1p.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.076127186721949],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","next",2.047568946648206],["(*.f64 (log.f64 (exp.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.069608678855838],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x)))","fresh",2.110743527322528],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 10) (pow.f64 (cbrt.f64 (exp.f64 x)) 10)) x))","fresh",3.372596402486229],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 10)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 10))))","fresh",3.581109884024221],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 5) (pow.f64 (exp.f64 x) 5)) x))","fresh",2.1362262052815892],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 3) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.133331669903529],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 10)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 10))))","fresh",3.8158427571435043],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) (cbrt.f64 (pow.f64 (exp.f64 x) 20))) x))","fresh",2.0750077801365556],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","fresh",3.579024396718685],["(pow.f64 (cbrt.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x))) 3)","fresh",3.31543420344161],["(*.f64 (cos.f64 x) (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)))))","fresh",3.308019944244189],["(*.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.105324863609965],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x 10)) x))","fresh",3.2355554065162533],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) 5) x) (pow.f64 (pow.f64 (exp.f64 x) 5) x)))","fresh",2.148522455671154],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 10) (pow.f64 (sqrt.f64 (exp.f64 x)) 10)) x))","fresh",3.382033060352381]],"compiler":[[19,13],[10,7],[12,9],[12,9],[12,9],[11,8],[12,9],[19,13],[19,13],[19,12],[15,10],[13,10],[21,14],[17,12],[10,7],[13,10],[19,13],[17,11],[10,7],[17,11],[17,11],[19,13],[10,7],[12,9],[12,9],[12,9],[11,8],[12,9],[19,13],[19,13],[19,12],[15,10],[13,10],[21,14],[17,12],[10,7],[13,10],[19,13],[17,11],[10,7],[17,11],[17,11]],"count":[[92,21]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[90,20],"picked":[1,0]}],"min-error":[0.8066867931055066],"time":20.631103515625,"type":"prune"},{"compiler":[[34,18]],"locations":[["(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))",0.140625,true],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))",0.31478500976844204,true],["(pow.f64 (pow.f64 (exp.f64 x) 20) x)",0.4889450195368841,true],["(pow.f64 (exp.f64 x) 20)",2.2112841674370145,true]],"time":24.321044921875,"type":"localize"},{"count":[[4,40]],"series":[["(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","x","-inf",0.182861328125],["(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","x","inf",0.158935546875],["(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","x","0",0.178955078125],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","x","-inf",0.416015625],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","x","inf",0.471923828125],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","x","0",0.218017578125],["(pow.f64 (pow.f64 (exp.f64 x) 20) x)","x","-inf",0.2099609375],["(pow.f64 (pow.f64 (exp.f64 x) 20) x)","x","inf",0.239013671875],["(pow.f64 (pow.f64 (exp.f64 x) 20) x)","x","0",0.4609375],["(pow.f64 (exp.f64 x) 20)","x","-inf",1.083984375],["(pow.f64 (exp.f64 x) 20)","x","inf",0.696044921875],["(pow.f64 (exp.f64 x) 20)","x","0",0.2861328125]],"time":4.788818359375,"type":"series"},{"count":[[4,77]],"egraph":[[2,2172,42,0.019527001],[1,186,42,0.003306542],[0,9,42,0.000253084]],"inputs":[["(pow.f64 (exp.f64 x) 20)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 20) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 x) 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) (cbrt.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 10) (pow.f64 (exp.f64 x) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 x) 40))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 20))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) (*.f64 x 20))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 x) (*.f64 x 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (*.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x)) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4)) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (*.f64 x 20)) (pow.f64 (exp.f64 x) (*.f64 x 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 20)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 x) (pow.f64 (exp.f64 x) (*.f64 x 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x (*.f64 x 20)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 x)) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2) (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 x 20) (*.f64 x 1/2)) (log.f64 (cos.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))) (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (*.f64 x 1/2)) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) (*.f64 x 1/2)) (pow.f64 (pow.f64 (exp.f64 x) 10) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x)) 1/2) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 20 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (*.f64 (*.f64 x 20) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) (/.f64 (*.f64 x 20) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 20) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 20) (*.f64 (*.f64 x 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 x 20) (*.f64 x 1/2)))))))"]],"rules":[["egg-rr",28],["egg-rr",13],["egg-rr",22],["egg-rr",14]],"stop":[["node limit",1]],"time":44.77001953125,"type":"rewrite"},{"count":[[117,108]],"egraph":[[6,7126,435,0.034489333],[5,4937,435,0.023043583],[4,2276,435,0.013478707999999999],[3,1202,467,0.006427041],[2,377,467,0.002755249],[1,155,471,0.000986416],[0,62,483,0.000289208]],"inputs":[["1","(+.f64 (*.f64 20 x) 1)","(+.f64 (*.f64 20 x) (+.f64 1 (*.f64 200 (pow.f64 x 2))))","(+.f64 (*.f64 20 x) (+.f64 (*.f64 4000/3 (pow.f64 x 3)) (+.f64 1 (*.f64 200 (pow.f64 x 2)))))","1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","1","(+.f64 1 (*.f64 19/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (*.f64 19/2 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (+.f64 (*.f64 19/2 (pow.f64 x 2)) (*.f64 102299/720 (pow.f64 x 6)))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 20 x) 1)","(fma.f64 20 x 1)","(+.f64 (*.f64 20 x) (+.f64 1 (*.f64 200 (pow.f64 x 2))))","(+.f64 (fma.f64 20 x 1) (*.f64 200 (*.f64 x x)))","(fma.f64 20 x (fma.f64 200 (*.f64 x x) 1))","(fma.f64 20 x (fma.f64 x (*.f64 x 200) 1))","(+.f64 (*.f64 20 x) (+.f64 (*.f64 4000/3 (pow.f64 x 3)) (+.f64 1 (*.f64 200 (pow.f64 x 2)))))","(fma.f64 20 x (fma.f64 4000/3 (pow.f64 x 3) (+.f64 1 (*.f64 200 (*.f64 x x)))))","(fma.f64 20 x (fma.f64 4000/3 (pow.f64 x 3) (fma.f64 200 (*.f64 x x) 1)))","(fma.f64 20 x (fma.f64 x (*.f64 x 200) (fma.f64 4000/3 (pow.f64 x 3) 1)))","(+.f64 1 (*.f64 x (+.f64 20 (*.f64 x (+.f64 200 (*.f64 x 4000/3))))))","1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(+.f64 1 (*.f64 20 (*.f64 x x)))","(fma.f64 20 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (*.f64 20 (*.f64 x x))))","(+.f64 1 (fma.f64 20 (*.f64 x x) (*.f64 200 (pow.f64 x 4))))","(fma.f64 20 (*.f64 x x) (fma.f64 200 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (fma.f64 20 (*.f64 x x) (*.f64 4000/3 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 20 (*.f64 x x) (fma.f64 200 (pow.f64 x 4) (*.f64 4000/3 (pow.f64 x 6)))))","(+.f64 (fma.f64 200 (pow.f64 x 4) (*.f64 20 (*.f64 x x))) (fma.f64 4000/3 (pow.f64 x 6) 1))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 20 x))","1","(+.f64 1 (*.f64 19/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) 19/2))","(fma.f64 (*.f64 x x) 19/2 1)","(fma.f64 x (*.f64 x 19/2) 1)","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (*.f64 19/2 (pow.f64 x 2))))","(+.f64 1 (fma.f64 1081/24 (pow.f64 x 4) (*.f64 (*.f64 x x) 19/2)))","(+.f64 1 (fma.f64 (*.f64 x x) 19/2 (*.f64 (pow.f64 x 4) 1081/24)))","(fma.f64 x (*.f64 x 19/2) (fma.f64 (pow.f64 x 4) 1081/24 1))","(+.f64 1 (+.f64 (*.f64 1081/24 (pow.f64 x 4)) (+.f64 (*.f64 19/2 (pow.f64 x 2)) (*.f64 102299/720 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 1081/24 (pow.f64 x 4) (fma.f64 19/2 (*.f64 x x) (*.f64 (pow.f64 x 6) 102299/720))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1081/24 (fma.f64 (*.f64 x x) 19/2 (*.f64 (pow.f64 x 6) 102299/720))))","(+.f64 1 (fma.f64 x (*.f64 x 19/2) (fma.f64 (pow.f64 x 4) 1081/24 (*.f64 (pow.f64 x 6) 102299/720))))","(+.f64 (fma.f64 x (*.f64 x 19/2) 1) (fma.f64 (pow.f64 x 6) 102299/720 (*.f64 (pow.f64 x 4) 1081/24)))","(fma.f64 (pow.f64 x 4) 1081/24 (+.f64 (*.f64 (*.f64 x x) 19/2) (fma.f64 (pow.f64 x 6) 102299/720 1)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","(*.f64 (cos.f64 x) (sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 x) (*.f64 x 10)))","1","(+.f64 (*.f64 10 (pow.f64 x 2)) 1)","(fma.f64 10 (*.f64 x x) 1)","(fma.f64 (*.f64 x x) 10 1)","(fma.f64 x (*.f64 x 10) 1)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 1 (*.f64 50 (pow.f64 x 4))))","(+.f64 (fma.f64 10 (*.f64 x x) 1) (*.f64 (pow.f64 x 4) 50))","(fma.f64 (*.f64 x x) 10 (fma.f64 (pow.f64 x 4) 50 1))","(fma.f64 x (*.f64 x 10) (fma.f64 (pow.f64 x 4) 50 1))","(fma.f64 (pow.f64 x 4) 50 (fma.f64 x (*.f64 x 10) 1))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 500/3 (pow.f64 x 6)) (+.f64 1 (*.f64 50 (pow.f64 x 4)))))","(fma.f64 10 (*.f64 x x) (fma.f64 500/3 (pow.f64 x 6) (+.f64 1 (*.f64 (pow.f64 x 4) 50))))","(fma.f64 (*.f64 x x) 10 (fma.f64 (pow.f64 x 6) 500/3 (fma.f64 (pow.f64 x 4) 50 1)))","(fma.f64 (pow.f64 x 6) 500/3 (fma.f64 x (*.f64 x 10) (fma.f64 (pow.f64 x 4) 50 1)))","(fma.f64 (pow.f64 x 6) 500/3 (fma.f64 (pow.f64 x 4) 50 (fma.f64 x (*.f64 x 10) 1)))","(fma.f64 x (*.f64 x 10) (fma.f64 (pow.f64 x 4) 50 (fma.f64 (pow.f64 x 6) 500/3 1)))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))","(sqrt.f64 (exp.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 x) 20)) x)))","(sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))","(sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 20 x)))","(pow.f64 (exp.f64 x) (*.f64 x 10))"]],"stop":[["node limit",1]],"time":53.22314453125,"type":"simplify"},{"compiler":[[1571,971]],"time":20.48486328125,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))","fresh",2.1571165798456553],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","next",2.0478720342635066],["(*.f64 (cos.f64 x) (pow.f64 (expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 10))) x))","fresh",3.3297027347375514],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 (*.f64 x 20)) x)))","fresh",3.2420190207613007],["(*.f64 (log1p.f64 (expm1.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.1118450874510106],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","fresh",2.0507152576647116],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) 5) x) (pow.f64 (pow.f64 (exp.f64 x) 5) x)))","fresh",2.148522455671154],["(*.f64 (log.f64 (exp.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.069608678855838],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x)))","fresh",2.110743527322528],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 10) (pow.f64 (sqrt.f64 (exp.f64 x)) 10)) x))","fresh",3.382033060352381],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)))))","fresh",3.5627765030768486],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 10) (pow.f64 (cbrt.f64 (exp.f64 x)) 10)) x))","fresh",3.372596402486229],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 20)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 20)))))","fresh",3.8216573407195704],["(*.f64 (cos.f64 x) (*.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))) (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","fresh",2.162826628361998],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 5) (pow.f64 (exp.f64 x) 5)) x))","fresh",2.1362262052815892],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20)) x)))","fresh",3.3369740808551187],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 10)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 10))))","fresh",3.8158427571435043],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20)) x)))","fresh",3.3423176218673576],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) 2))","fresh",3.2971950053745154],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) (cbrt.f64 (pow.f64 (exp.f64 x) 20))) x))","fresh",2.0750077801365556],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","fresh",3.579024396718685],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 10) (pow.f64 (exp.f64 x) 10)) x)))","fresh",2.08357039114216],["(*.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 3))","fresh",3.2958473736937246],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x)) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","fresh",2.1977395812509246],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2) 1/3))","fresh",3.661228291798697],["(*.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.105324863609965],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x 10)) x))","fresh",3.2355554065162533],["(*.f64 (cos.f64 x) (sqrt.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))))","fresh",2.051030835928176],["(cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2)))","fresh",3.307866190899212]],"compiler":[[19,13],[10,7],[18,13],[12,9],[11,8],[12,9],[20,14],[17,11],[12,9],[19,13],[17,11],[20,13],[19,13],[22,15],[21,15],[15,10],[18,12],[21,14],[20,14],[14,11],[17,12],[10,7],[16,11],[14,11],[20,14],[14,11],[17,11],[10,7],[12,9],[15,12],[19,13],[10,7],[18,13],[12,9],[11,8],[12,9],[20,14],[17,11],[12,9],[19,13],[17,11],[20,13],[19,13],[22,15],[21,15],[15,10],[18,12],[21,14],[20,14],[14,11],[17,12],[10,7],[16,11],[14,11],[20,14],[14,11],[17,11],[10,7],[12,9],[15,12]],"count":[[129,30]],"kept":[{"done":[0,0],"fresh":[20,15],"new":[108,15],"picked":[1,0]}],"min-error":[0.6363566661157601],"time":28.68310546875,"type":"prune"},{"compiler":[[81,49]],"locations":[["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))",0.3873825195368841,true],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)",0.4889450195368841,true],["(pow.f64 (exp.f64 x) 20)",2.2112841674370145,false],["(pow.f64 (exp.f64 x) 40)",2.8729968420834573,true]],"time":42.114013671875,"type":"localize"},{"count":[[3,28]],"series":[["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))","x","-inf",0.239990234375],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))","x","inf",1.1669921875],["(*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))","x","0",0.177978515625],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)","x","-inf",0.2470703125],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)","x","inf",0.31494140625],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)","x","0",0.447998046875],["(pow.f64 (exp.f64 x) 40)","x","-inf",0.675048828125],["(pow.f64 (exp.f64 x) 40)","x","inf",0.735107421875],["(pow.f64 (exp.f64 x) 40)","x","0",0.2900390625]],"time":4.424072265625,"type":"series"},{"count":[[3,50]],"egraph":[[2,2627,21,0.019737249],[1,230,21,0.003843582],[0,11,41,0.000336666]],"inputs":[["(pow.f64 (exp.f64 x) 40)","(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)","(*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) 40)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 40) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) (cbrt.f64 (pow.f64 (exp.f64 x) 80)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 20) (pow.f64 (exp.f64 x) 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 x) 40))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 10) (*.f64 (pow.f64 (exp.f64 x) 10) (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 40) (pow.f64 (cbrt.f64 (exp.f64 x)) 40))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 40) (pow.f64 (sqrt.f64 (exp.f64 x)) 40))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 x) 20) (pow.f64 (exp.f64 x) 10)) (pow.f64 (exp.f64 x) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (exp.f64 x) 20) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) (cbrt.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) 1) (cbrt.f64 (pow.f64 (exp.f64 x) 40)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)))) (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) (cbrt.f64 (pow.f64 (exp.f64 x) 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 x) 80))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) 40)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 40)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) 40)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 40))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (pow.f64 (exp.f64 x) 20) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 x) (pow.f64 (pow.f64 (exp.f64 x) 20) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) 10) x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x (*.f64 x 20)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 x) 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) 20)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 40) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 20) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 2) 10)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 10) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 x) 60) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 x) 40))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (exp.f64 x) 20))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 x) 60))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 x) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 20))))))"]],"rules":[["egg-rr",15],["egg-rr",14],["egg-rr",21]],"stop":[["node limit",1]],"time":41.23681640625,"type":"rewrite"},{"count":[[78,71]],"egraph":[[5,6679,228,0.028762168],[4,3556,228,0.016089043],[3,962,228,0.007023001000000001],[2,324,242,0.002285501],[1,131,248,0.000845126],[0,49,280,0.000266292]],"inputs":[["1","(+.f64 1 (*.f64 40 x))","(+.f64 1 (+.f64 (*.f64 40 x) (*.f64 800 (pow.f64 x 2))))","(+.f64 (*.f64 32000/3 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 40 x) (*.f64 800 (pow.f64 x 2)))))","1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","1","(+.f64 (*.f64 20 x) 1)","(+.f64 (*.f64 20 x) (+.f64 1 (*.f64 200 (pow.f64 x 2))))","(+.f64 (*.f64 20 x) (+.f64 (*.f64 4000/3 (pow.f64 x 3)) (+.f64 1 (*.f64 200 (pow.f64 x 2)))))","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 40 x))","(fma.f64 40 x 1)","(+.f64 1 (+.f64 (*.f64 40 x) (*.f64 800 (pow.f64 x 2))))","(+.f64 1 (fma.f64 40 x (*.f64 800 (*.f64 x x))))","(+.f64 (fma.f64 40 x 1) (*.f64 x (*.f64 x 800)))","(fma.f64 40 x (fma.f64 x (*.f64 x 800) 1))","(fma.f64 x (fma.f64 x 800 40) 1)","(+.f64 (*.f64 32000/3 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 40 x) (*.f64 800 (pow.f64 x 2)))))","(fma.f64 32000/3 (pow.f64 x 3) (+.f64 1 (fma.f64 40 x (*.f64 800 (*.f64 x x)))))","(+.f64 (fma.f64 40 x (*.f64 x (*.f64 x 800))) (fma.f64 32000/3 (pow.f64 x 3) 1))","(fma.f64 32000/3 (pow.f64 x 3) (fma.f64 40 x (fma.f64 x (*.f64 x 800) 1)))","(fma.f64 x (fma.f64 x 800 40) (fma.f64 32000/3 (pow.f64 x 3) 1))","1","(+.f64 1 (*.f64 20 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) 20))","(fma.f64 (*.f64 x x) 20 1)","(fma.f64 x (*.f64 x 20) 1)","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (*.f64 20 (pow.f64 x 2))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (*.f64 (*.f64 x x) 20)))","(+.f64 1 (fma.f64 (*.f64 x x) 20 (*.f64 200 (pow.f64 x 4))))","(fma.f64 x (*.f64 x 20) (fma.f64 200 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 200 (pow.f64 x 4)) (+.f64 (*.f64 20 (pow.f64 x 2)) (*.f64 4000/3 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (fma.f64 20 (*.f64 x x) (*.f64 4000/3 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 200 (pow.f64 x 4) (fma.f64 (*.f64 x x) 20 (*.f64 4000/3 (pow.f64 x 6)))))","(fma.f64 x (*.f64 x 20) (fma.f64 200 (pow.f64 x 4) (fma.f64 4000/3 (pow.f64 x 6) 1)))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 1 1/3) (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (*.f64 1 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (pow.f64 (exp.f64 x) 20) x)","(pow.f64 (exp.f64 x) (*.f64 x 20))","1","(+.f64 (*.f64 20 x) 1)","(fma.f64 20 x 1)","(fma.f64 x 20 1)","(+.f64 (*.f64 20 x) (+.f64 1 (*.f64 200 (pow.f64 x 2))))","(+.f64 (fma.f64 20 x 1) (*.f64 (*.f64 x x) 200))","(fma.f64 x 20 (fma.f64 (*.f64 x x) 200 1))","(fma.f64 x 20 (fma.f64 x (*.f64 x 200) 1))","(fma.f64 x (fma.f64 x 200 20) 1)","(+.f64 (*.f64 20 x) (+.f64 (*.f64 4000/3 (pow.f64 x 3)) (+.f64 1 (*.f64 200 (pow.f64 x 2)))))","(fma.f64 20 x (fma.f64 4000/3 (pow.f64 x 3) (+.f64 1 (*.f64 (*.f64 x x) 200))))","(fma.f64 x 20 (fma.f64 (pow.f64 x 3) 4000/3 (fma.f64 (*.f64 x x) 200 1)))","(fma.f64 x 20 (fma.f64 x (*.f64 x 200) (fma.f64 (pow.f64 x 3) 4000/3 1)))","(fma.f64 x 20 (fma.f64 x (*.f64 x (fma.f64 x 4000/3 200)) 1))","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)","(pow.f64 (exp.f64 x) 20)"]],"stop":[["node limit",1]],"time":43.526123046875,"type":"simplify"},{"compiler":[[1668,1056]],"time":21.4208984375,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","done",2.0478720342635066],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 40) (pow.f64 (cbrt.f64 (exp.f64 x)) 40)))) x)))","fresh",2.949570048832032],["(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))","fresh",2.1571165798456553],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","fresh",2.3404635614913873],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","fresh",2.324576257935645],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) 2) 10) x)))","fresh",2.1824144236845937],["(*.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.105324863609965],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x 10)) x))","fresh",3.2355554065162533],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (exp.f64 (*.f64 x 40)))) x)))","fresh",2.8248186529415342],["(cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2)))","fresh",3.307866190899212],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","fresh",2.0759739579842114],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 (*.f64 x 20)) x)))","fresh",3.2420190207613007],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","next",2.0507152576647116],["(*.f64 (log.f64 (exp.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.069608678855838],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x)))","fresh",2.110743527322528],["(*.f64 (cos.f64 x) (*.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))) (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","fresh",2.162826628361998],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 5) (pow.f64 (exp.f64 x) 5)) x))","fresh",2.1362262052815892],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20)) x)))","fresh",3.3369740808551187],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 10)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 10))))","fresh",3.8158427571435043],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20)) x)))","fresh",3.3423176218673576],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) 2))","fresh",3.2971950053745154],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) (cbrt.f64 (pow.f64 (exp.f64 x) 20))) x))","fresh",2.0750077801365556],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))","fresh",3.579024396718685],["(*.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 3))","fresh",3.2958473736937246],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x)) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","fresh",2.1977395812509246],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 40) (pow.f64 (sqrt.f64 (exp.f64 x)) 40)))) x)))","fresh",2.8736771409795487],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2) 1/3))","fresh",3.661228291798697],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) 3) x)))","fresh",2.1034504717107745],["(*.f64 (cos.f64 x) (pow.f64 (expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 10))) x))","fresh",3.3297027347375514],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)))))","fresh",3.5627765030768486],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 10) (pow.f64 (cbrt.f64 (exp.f64 x)) 10)) x))","fresh",3.372596402486229]],"compiler":[[18,13],[27,19],[19,13],[27,19],[10,7],[25,17],[13,10],[17,11],[10,7],[18,14],[15,12],[18,14],[11,8],[20,14],[12,9],[19,13],[21,15],[15,10],[18,12],[21,14],[20,14],[14,11],[17,12],[10,7],[14,11],[20,14],[25,17],[14,11],[14,11],[12,9],[20,13],[19,13],[27,19],[19,13],[27,19],[10,7],[25,17],[13,10],[17,11],[10,7],[18,14],[15,12],[18,14],[11,8],[20,14],[12,9],[19,13],[21,15],[15,10],[18,12],[21,14],[20,14],[14,11],[17,12],[10,7],[14,11],[20,14],[25,17],[14,11],[14,11],[12,9],[20,13],[19,13]],"count":[[122,32]],"kept":[{"done":[0,0],"fresh":[29,22],"new":[92,9],"picked":[1,1]}],"min-error":[0.48966770171716667],"time":29.024169921875,"type":"prune"},{"compiler":[[90,53]],"locations":[["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)",0.5397262695368841,true],["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)",0.5527725586106521,true],["(pow.f64 (exp.f64 x) 20)",2.2112841674370145,false],["(pow.f64 (exp.f64 x) 40)",2.8729968420834573,false]],"time":52.419921875,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","x","-inf",0.244873046875],["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","x","inf",0.294921875],["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","x","0",1.676025390625],["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","x","-inf",0.280029296875],["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","x","inf",0.3349609375],["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","x","0",0.633056640625]],"time":3.555908203125,"type":"series"},{"count":[[2,38]],"egraph":[[2,2525,22,0.020912792],[1,228,22,0.003810125],[0,11,22,0.000329125]],"inputs":[["(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) x))) (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80))) (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40))) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) (/.f64 (*.f64 x 1/2) 2)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) (/.f64 (*.f64 x 1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x (*.f64 1/3 (*.f64 x 20))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) x)) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))) (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80))) x) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 80)) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x (*.f64 1/3 (*.f64 x 40))))))))"]],"rules":[["egg-rr",18],["egg-rr",20]],"stop":[["node limit",1]],"time":41.7919921875,"type":"rewrite"},{"count":[[62,55]],"egraph":[[4,3398,236,0.017247584],[3,783,236,0.006334834],[2,256,236,0.001919251],[1,110,274,0.0007282510000000001],[0,44,280,0.000226417]],"inputs":[["1","(+.f64 1 (*.f64 20/3 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 200/9 (pow.f64 x 4)) (*.f64 20/3 (pow.f64 x 2))))","(+.f64 (*.f64 4000/81 (pow.f64 x 6)) (+.f64 1 (+.f64 (*.f64 200/9 (pow.f64 x 4)) (*.f64 20/3 (pow.f64 x 2)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","1","(+.f64 1 (*.f64 40/3 (pow.f64 x 2)))","(+.f64 (*.f64 800/9 (pow.f64 x 4)) (+.f64 1 (*.f64 40/3 (pow.f64 x 2))))","(+.f64 (*.f64 800/9 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 40/3 (pow.f64 x 2)) (*.f64 32000/81 (pow.f64 x 6)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 20/3 (pow.f64 x 2)))","(+.f64 1 (*.f64 20/3 (*.f64 x x)))","(fma.f64 20/3 (*.f64 x x) 1)","(fma.f64 x (*.f64 20/3 x) 1)","(+.f64 1 (+.f64 (*.f64 200/9 (pow.f64 x 4)) (*.f64 20/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 200/9 (pow.f64 x 4) (*.f64 20/3 (*.f64 x x))))","(+.f64 (fma.f64 20/3 (*.f64 x x) 1) (*.f64 200/9 (pow.f64 x 4)))","(fma.f64 20/3 (*.f64 x x) (fma.f64 200/9 (pow.f64 x 4) 1))","(+.f64 (*.f64 4000/81 (pow.f64 x 6)) (+.f64 1 (+.f64 (*.f64 200/9 (pow.f64 x 4)) (*.f64 20/3 (pow.f64 x 2)))))","(fma.f64 4000/81 (pow.f64 x 6) (+.f64 1 (fma.f64 200/9 (pow.f64 x 4) (*.f64 20/3 (*.f64 x x)))))","(+.f64 (fma.f64 20/3 (*.f64 x x) (*.f64 200/9 (pow.f64 x 4))) (fma.f64 4000/81 (pow.f64 x 6) 1))","(fma.f64 4000/81 (pow.f64 x 6) (fma.f64 20/3 (*.f64 x x) (fma.f64 200/9 (pow.f64 x 4) 1)))","(fma.f64 200/9 (pow.f64 x 4) (fma.f64 4000/81 (pow.f64 x 6) (fma.f64 x (*.f64 20/3 x) 1)))","(fma.f64 20/3 (*.f64 x x) (fma.f64 200/9 (pow.f64 x 4) (fma.f64 4000/81 (pow.f64 x 6) 1)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)","(pow.f64 (exp.f64 x) (*.f64 20/3 x))","1","(+.f64 1 (*.f64 40/3 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) 40/3))","(fma.f64 (*.f64 x x) 40/3 1)","(fma.f64 x (*.f64 x 40/3) 1)","(+.f64 (*.f64 800/9 (pow.f64 x 4)) (+.f64 1 (*.f64 40/3 (pow.f64 x 2))))","(fma.f64 800/9 (pow.f64 x 4) (+.f64 1 (*.f64 (*.f64 x x) 40/3)))","(fma.f64 (pow.f64 x 4) 800/9 (fma.f64 (*.f64 x x) 40/3 1))","(fma.f64 x (*.f64 x 40/3) (fma.f64 (pow.f64 x 4) 800/9 1))","(+.f64 (*.f64 800/9 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 40/3 (pow.f64 x 2)) (*.f64 32000/81 (pow.f64 x 6)))))","(fma.f64 800/9 (pow.f64 x 4) (+.f64 1 (fma.f64 40/3 (*.f64 x x) (*.f64 (pow.f64 x 6) 32000/81))))","(+.f64 (fma.f64 (pow.f64 x 6) 32000/81 (*.f64 x (*.f64 x 40/3))) (fma.f64 (pow.f64 x 4) 800/9 1))","(fma.f64 (pow.f64 x 4) 800/9 (fma.f64 x (*.f64 x 40/3) (fma.f64 (pow.f64 x 6) 32000/81 1)))","(fma.f64 (*.f64 x x) 40/3 (fma.f64 (pow.f64 x 4) 800/9 (fma.f64 (pow.f64 x 6) 32000/81 1)))","(fma.f64 x (*.f64 x 40/3) (fma.f64 (pow.f64 x 4) 800/9 (fma.f64 (pow.f64 x 6) 32000/81 1)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) 1/3)) x))","(pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)","(pow.f64 (exp.f64 x) (*.f64 x 40/3))","(pow.f64 (exp.f64 40/3) (*.f64 x x))"]],"stop":[["node limit",1]],"time":32.822021484375,"type":"simplify"},{"compiler":[[2536,1606]],"time":31.4111328125,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))","fresh",2.1571165798456553],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","fresh",2.3404635614913873],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","fresh",3.073475518667646],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 40) (pow.f64 (cbrt.f64 (exp.f64 x)) 40)))) x)))","fresh",2.949570048832032],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20))) x))))","fresh",2.3264050379655603],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) 2) 10) x)))","fresh",2.1824144236845937],["(*.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","fresh",2.105324863609965],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (exp.f64 x) (*.f64 20/3 x)))))","fresh",2.364282227394937],["(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x 10)) x))","fresh",3.2355554065162533],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (exp.f64 (*.f64 x 40)))) x)))","fresh",2.8248186529415342],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","fresh",2.646938038099566],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (exp.f64 (*.f64 x (*.f64 1/3 (*.f64 x 20)))))))","fresh",2.5321999002660305],["(*.f64 (cos.f64 x) (pow.f64 (expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 10))) x))","fresh",3.3297027347375514],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x 20))) x))))","fresh",2.071350824360883],["(cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2)))","fresh",3.307866190899212],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","fresh",2.0759739579842114],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))))","fresh",2.102317629947012],["(*.f64 (cos.f64 x) (*.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))) (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","fresh",2.162826628361998],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20)) x)))","fresh",3.3369740808551187],["(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 10)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 10))))","fresh",3.8158427571435043],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20)) x)))","fresh",3.3423176218673576],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x)))))","fresh",2.069503499157296],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) 2))","fresh",3.2971950053745154],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x)) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","fresh",2.1977395812509246],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 40) (pow.f64 (sqrt.f64 (exp.f64 x)) 40)))) x)))","fresh",2.8736771409795487],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","fresh",2.089440927198632],["(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2) 1/3))","fresh",3.661228291798697],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","fresh",2.0879906631790304],["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 (*.f64 x 20)) x)))","fresh",3.2420190207613007],["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (exp.f64 40/3) (*.f64 x x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","fresh",2.9634249398221604],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 10) (pow.f64 (cbrt.f64 (exp.f64 x)) 10)) x))","fresh",3.372596402486229],["(*.f64 (cos.f64 x) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) (cbrt.f64 (pow.f64 (exp.f64 x) 20))) x))","fresh",2.0750077801365556]],"compiler":[[19,13],[27,19],[10,7],[27,19],[27,18],[13,10],[17,11],[19,13],[10,7],[18,14],[22,16],[21,16],[12,9],[20,15],[15,12],[18,14],[22,16],[21,15],[18,12],[21,14],[20,14],[28,19],[14,11],[20,14],[25,17],[38,26],[14,11],[28,19],[11,8],[19,14],[19,13],[17,12]],"count":[[136,32]],"kept":[{"done":[1,0],"fresh":[30,22],"new":[104,10],"picked":[1,0]}],"min-error":[0.356802648841958],"time":21.61181640625,"type":"prune"},{"accuracy":[2.047568946648205],"baseline":[2.047568946648206],"branch":[["x",2.0475689466482065,1],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))",2.047568946648205,1]],"compiler":[[2,1],[10,7],[946,535]],"count":[[56,1]],"inputs":[["(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20))) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (exp.f64 x) (*.f64 20/3 x)))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (exp.f64 (*.f64 x (*.f64 1/3 (*.f64 x 20)))))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x 20))) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x)))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (exp.f64 40/3) (*.f64 x x)) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 40) (pow.f64 (cbrt.f64 (exp.f64 x)) 40)))) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) 2) 10) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (exp.f64 (*.f64 x 40)))) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 x 20))) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 (*.f64 x 20)) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 40) (pow.f64 (sqrt.f64 (exp.f64 x)) 40)))) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) 3) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) (cbrt.f64 (pow.f64 (exp.f64 x) 40))) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (exp.f64 (*.f64 x 20)) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 40)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 20)))))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 20)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 20)))))","(*.f64 (cos.f64 x) (*.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))) (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 20) (pow.f64 (sqrt.f64 (exp.f64 x)) 20)) x)))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 20) (pow.f64 (cbrt.f64 (exp.f64 x)) 20)) x)))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 1/4) 2))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 10) (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)))) 3))","(*.f64 (cos.f64 x) (sqrt.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x)) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 20))))))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2) 1/3))","(*.f64 (cos.f64 x) (sqrt.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 40) x))))","(cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 (pow.f64 (exp.f64 x) (*.f64 x 20)) 3/2)))","(*.f64 (cos.f64 x) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x))))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 10) (*.f64 x x)))","(*.f64 (cos.f64 x) (pow.f64 (expm1.f64 (log1p.f64 (pow.f64 (exp.f64 x) 10))) x))","(*.f64 (log1p.f64 (expm1.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","(*.f64 (expm1.f64 (log1p.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))","(*.f64 (log.f64 (exp.f64 (cos.f64 x))) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","(*.f64 (cos.f64 x) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 20)) x) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) x)))","(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) 10) (pow.f64 (cbrt.f64 (exp.f64 x)) 10)) x))","(*.f64 (cos.f64 x) (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 10)) (pow.f64 (sqrt.f64 (exp.f64 x)) (*.f64 x 10))))","(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 5) (pow.f64 (exp.f64 x) 5)) x))","(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 3) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 2) (*.f64 x 10)) (pow.f64 (cbrt.f64 (exp.f64 x)) (*.f64 x 10))))","(*.f64 (cos.f64 x) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 10)) (cbrt.f64 (pow.f64 (exp.f64 x) 20))) x))","(pow.f64 (cbrt.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)) (cos.f64 x))) 3)","(*.f64 (cos.f64 x) (*.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10))) (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 x 10)))))","(*.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2)) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","(*.f64 (cos.f64 x) (pow.f64 (exp.f64 (*.f64 x 10)) x))","(*.f64 (cos.f64 x) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) 5) x) (pow.f64 (pow.f64 (exp.f64 x) 5) x)))","(*.f64 (cos.f64 x) (pow.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 x)) 10) (pow.f64 (sqrt.f64 (exp.f64 x)) 10)) x))","(*.f64 (cos.f64 x) (pow.f64 (pow.f64 (exp.f64 x) 10) x))","(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))"]],"link":["."],"name":["ENA, Section 1.4, Exercise 1"],"oracle":[4.831791934796166],"outputs":[["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))"]],"time":46.340087890625,"times":[["x",15.205078125],["(*.f64 (cos.f64 x) (exp.f64 (*.f64 10 (*.f64 x x))))",15.31591796875]],"type":"regimes"},{"compiler":[[11,8]],"egraph":[[1,10,16,3.0917e-5],[0,9,16,1.85e-5]],"inputs":[["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 x) (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) 20) x)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.419921875,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[11,8]],"remove-preprocessing":[[]],"time":9.76806640625,"type":"end"}]
[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.360107421875,"type":"analyze"},{"outcomes":[["body",256,"valid",246.86181640625,8256]],"time":255.431884765625,"type":"sample"},{"compiler":[[8,5]],"egraph":[[0,1,1,1.584e-6],[1,10,8,8.1833e-5],[0,6,8,4.5292e-5]],"inputs":[["0"],["(/.f64 x (+.f64 (*.f64 x x) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 x (+.f64 (*.f64 x x) 1))","(/.f64 x (fma.f64 x x 1))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.80908203125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[1,10,8,7.937499999999999e-5],[0,6,8,4.3375e-5]],"inputs":[["(/.f64 x (+.f64 (*.f64 x x) 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (+.f64 (*.f64 x x) 1))","(/.f64 x (fma.f64 x x 1))"]],"stop":[["saturated",1]],"time":11.177978515625,"type":"simplify"},{"compiler":[[14,8]],"time":0.324951171875,"type":"eval"},{"alts":[["(/.f64 x (fma.f64 x x 1))","next",13.932598847809244]],"compiler":[[7,4],[7,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[13.932598847809244],"time":0.77294921875,"type":"prune"},{"compiler":[[13,7]],"locations":[["(/.f64 x (fma.f64 x x 1))",13.932598847809246,true]],"time":3.461181640625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 x (fma.f64 x x 1))","x","-inf",0.346923828125],["(/.f64 x (fma.f64 x x 1))","x","inf",0.406982421875],["(/.f64 x (fma.f64 x x 1))","x","0",0.38818359375]],"time":1.19091796875,"type":"series"},{"count":[[1,30]],"egraph":[[2,1214,8,0.014009958000000001],[1,98,8,0.00169875],[0,5,8,0.000152625]],"inputs":[["(/.f64 x (fma.f64 x x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) 2) (cbrt.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (fma.f64 x x 1))) (sqrt.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2)) (/.f64 x (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2)) (cbrt.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (fma.f64 x x 1))) (/.f64 (cbrt.f64 x) (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (fma.f64 x x 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x 1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (fma.f64 x x 1))))))))"]],"rules":[["egg-rr",30]],"stop":[["node limit",1]],"time":31.25390625,"type":"rewrite"},{"count":[[42,44]],"egraph":[[5,4021,180,0.028915958],[4,1462,180,0.011529833],[3,547,180,0.003825583],[2,197,180,0.001471875],[1,75,180,0.000534459],[0,27,184,0.000154167]],"inputs":[["x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) (+.f64 (*.f64 -1 (pow.f64 x 7)) x)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(fma.f64 -1 (pow.f64 x 3) x)","(-.f64 x (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(fma.f64 -1 (pow.f64 x 3) (+.f64 x (pow.f64 x 5)))","(+.f64 (-.f64 x (pow.f64 x 3)) (pow.f64 x 5))","(+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) (+.f64 (*.f64 -1 (pow.f64 x 7)) x)))","(fma.f64 -1 (pow.f64 x 3) (+.f64 (pow.f64 x 5) (fma.f64 -1 (pow.f64 x 7) x)))","(+.f64 (-.f64 (pow.f64 x 5) (pow.f64 x 7)) (-.f64 x (pow.f64 x 3)))","(+.f64 (-.f64 x (pow.f64 x 3)) (-.f64 (pow.f64 x 5) (pow.f64 x 7)))","(+.f64 (pow.f64 x 5) (-.f64 x (+.f64 (pow.f64 x 3) (pow.f64 x 7))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 3))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 5))) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7)))))","(+.f64 (/.f64 1 x) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7))) (/.f64 -1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 -1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7)))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (pow.f64 x 3)) (/.f64 -1 (pow.f64 x 7)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 3))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 5))) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7)))))","(+.f64 (/.f64 1 x) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7))) (/.f64 -1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 -1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7)))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (pow.f64 x 3)) (/.f64 -1 (pow.f64 x 7)))))"]],"stop":[["node limit",1]],"time":43.157958984375,"type":"simplify"},{"compiler":[[502,337]],"time":7.509033203125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (fma.f64 x x 1))))","fresh",39.50642444439764],["(/.f64 x (fma.f64 x x 1))","done",13.932598847809244],["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))","next",13.88867262711457],["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","fresh",31.626819748790457]],"compiler":[[13,8],[7,4],[16,11],[10,8],[13,8],[16,11],[10,8]],"count":[[45,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[44,3],"picked":[1,1]}],"min-error":[0],"time":7.447998046875,"type":"prune"},{"compiler":[[41,26]],"locations":[["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))",0.0078125,true],["(/.f64 x (sqrt.f64 (fma.f64 x x 1)))",0.01171875,true],["(/.f64 1 (sqrt.f64 (fma.f64 x x 1)))",0.015625,true],["(sqrt.f64 (fma.f64 x x 1))",13.865152940409493,true]],"time":11.052001953125,"type":"localize"},{"count":[[4,48]],"series":[["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))","x","-inf",0.192138671875],["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))","x","inf",0.22705078125],["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))","x","0",0.1630859375],["(/.f64 x (sqrt.f64 (fma.f64 x x 1)))","x","-inf",0.2900390625],["(/.f64 x (sqrt.f64 (fma.f64 x x 1)))","x","inf",0.299072265625],["(/.f64 x (sqrt.f64 (fma.f64 x x 1)))","x","0",0.26904296875],["(/.f64 1 (sqrt.f64 (fma.f64 x x 1)))","x","-inf",0.257080078125],["(/.f64 1 (sqrt.f64 (fma.f64 x x 1)))","x","inf",0.23291015625],["(/.f64 1 (sqrt.f64 (fma.f64 x x 1)))","x","0",0.307861328125],["(sqrt.f64 (fma.f64 x x 1))","x","-inf",0.224853515625],["(sqrt.f64 (fma.f64 x x 1))","x","inf",0.258056640625],["(sqrt.f64 (fma.f64 x x 1))","x","0",0.364990234375]],"time":3.255126953125,"type":"series"},{"count":[[4,132]],"egraph":[[2,2168,33,0.020570083],[1,166,33,0.0031385830000000003],[0,8,35,0.0002395]],"inputs":[["(sqrt.f64 (fma.f64 x x 1))","(/.f64 1 (sqrt.f64 (fma.f64 x x 1)))","(/.f64 x (sqrt.f64 (fma.f64 x x 1)))","(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))) (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x 1)) (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) 1/4) (pow.f64 (fma.f64 x x 1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (fma.f64 x x 1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x x 1)) (cbrt.f64 (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x 1) 1/4) (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (fma.f64 x x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x 1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x 1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 x x 1))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (fma.f64 x x 1) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 x x 1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x 1) -1/2)) (cbrt.f64 (/.f64 1 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2) (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -1) (pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 x x 1) 1/4) -1) (pow.f64 (pow.f64 (fma.f64 x x 1) 1/4) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x 1) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x 1) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (fma.f64 x x 1) -1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x 1) -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (fma.f64 x x 1) -1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (fma.f64 x x 1) -1/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 (fma.f64 x x 1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (fma.f64 x x 1))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x 1) -1/2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) (cbrt.f64 (/.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x x) (fma.f64 x x 1))) (cbrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2) (/.f64 x (pow.f64 (fma.f64 x x 1) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2) (*.f64 (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) (sqrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (sqrt.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (fma.f64 x x 1))) (/.f64 (sqrt.f64 x) (cbrt.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (fma.f64 x x 1))) (cbrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (fma.f64 x x 1) 1/4)) (/.f64 (cbrt.f64 x) (pow.f64 (fma.f64 x x 1) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2) (sqrt.f64 x)) (*.f64 (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x 1) -1/2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x 1) -1/2) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 1 (fma.f64 x x 1)))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2)) (pow.f64 (sqrt.f64 (fma.f64 x x 1)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (fma.f64 x x 1)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 x x) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x x 1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (fma.f64 x x 1) -1/2) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (pow.f64 (fma.f64 x x 1) -1/2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (fma.f64 x x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (sqrt.f64 (fma.f64 x x 1)) (pow.f64 (fma.f64 x x 1) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (sqrt.f64 (fma.f64 x x 1)) (/.f64 (sqrt.f64 (fma.f64 x x 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (sqrt.f64 (fma.f64 x x 1)) x) (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 (fma.f64 x x 1)) (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x 1) -1/2) (/.f64 (sqrt.f64 (fma.f64 x x 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) (sqrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 (fma.f64 x x 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x x) (fma.f64 x x 1))) (/.f64 (sqrt.f64 (fma.f64 x x 1)) (cbrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 (fma.f64 x x 1) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) (/.f64 (sqrt.f64 (fma.f64 x x 1)) (sqrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 x x 1))) (/.f64 (sqrt.f64 (fma.f64 x x 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 (sqrt.f64 (fma.f64 x x 1)) x) (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 x x 1))) (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (sqrt.f64 (fma.f64 x x 1)) (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) (neg.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 x x 1))) (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 x x 1))) (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1) (*.f64 (sqrt.f64 (fma.f64 x x 1)) (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) -1) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 x x 1))) (neg.f64 (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x 1) (fma.f64 x x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) (pow.f64 (fma.f64 x x 1) 1/4)) (pow.f64 (fma.f64 x x 1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2)) (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 1) (sqrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) (cbrt.f64 (fma.f64 x x 1))) (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) (neg.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (pow.f64 (fma.f64 x x 1) -1/2)) (neg.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x 1) -1/2) (neg.f64 x)) (neg.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) -1) (neg.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (fma.f64 x x 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x x 1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 3) (pow.f64 (fma.f64 x x 1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (fma.f64 x x 1) -1/2) 3) (pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 3) (pow.f64 (pow.f64 (fma.f64 x x 1) -1/2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (fma.f64 x x 1))))))))"]],"rules":[["egg-rr",46],["egg-rr",40],["egg-rr",21],["egg-rr",25]],"stop":[["node limit",1]],"time":48.989013671875,"type":"rewrite"},{"count":[[180,205]],"egraph":[[3,2621,676,0.020495125],[2,907,676,0.006642667],[1,326,683,0.0021065],[0,106,696,0.000544042]],"inputs":[["1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","x","(+.f64 (*.f64 1/2 (/.f64 1 x)) x)","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) x) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(*.f64 -1 x)","(-.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/16 (/.f64 1 (pow.f64 x 5)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 3/8 (pow.f64 x 4))))","(+.f64 (*.f64 -5/16 (pow.f64 x 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 3/8 (pow.f64 x 4)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 7))) (*.f64 1/2 (/.f64 1 (pow.f64 x 3)))))","(/.f64 -1 x)","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 7))) (*.f64 1/2 (/.f64 1 (pow.f64 x 3)))) (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))))","x","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) (+.f64 (*.f64 -5/16 (pow.f64 x 7)) x)))","1","(-.f64 1 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","-1","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) 1)","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) (+.f64 (*.f64 -1 (pow.f64 x 7)) x)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 1/2 (*.f64 x x)))","(fma.f64 1/2 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (*.f64 -1/8 (pow.f64 x 4))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/8 (pow.f64 x 4) 1))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (fma.f64 1/16 (pow.f64 x 6) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (fma.f64 -1/8 (pow.f64 x 4) (*.f64 1/16 (pow.f64 x 6)))))","(+.f64 (fma.f64 1/2 (*.f64 x x) 1) (fma.f64 -1/8 (pow.f64 x 4) (*.f64 1/16 (pow.f64 x 6))))","x","(+.f64 (*.f64 1/2 (/.f64 1 x)) x)","(+.f64 x (/.f64 1/2 x))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) x) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1/2 x) (-.f64 x (/.f64 1/8 (pow.f64 x 3))))","(+.f64 x (+.f64 (/.f64 1/2 x) (/.f64 -1/8 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1/2 x) (-.f64 (+.f64 x (/.f64 1/16 (pow.f64 x 5))) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (+.f64 x (/.f64 1/16 (pow.f64 x 5))) (+.f64 (/.f64 1/2 x) (/.f64 -1/8 (pow.f64 x 3))))","(+.f64 (+.f64 x (/.f64 1/2 x)) (-.f64 (/.f64 1/16 (pow.f64 x 5)) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (+.f64 x (/.f64 1/2 x)) (+.f64 (/.f64 1/16 (pow.f64 x 5)) (/.f64 -1/8 (pow.f64 x 3))))","(*.f64 -1 x)","(neg.f64 x)","(-.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (neg.f64 x) (/.f64 1/2 x))","(fma.f64 x -1 (/.f64 -1/2 x))","(-.f64 (/.f64 -1/2 x) x)","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (-.f64 (neg.f64 x) (/.f64 1/2 x)))","(+.f64 (-.f64 (/.f64 1/8 (pow.f64 x 3)) x) (/.f64 -1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (-.f64 (/.f64 -1/2 x) x))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/16 (/.f64 1 (pow.f64 x 5)))))","(-.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (-.f64 (neg.f64 x) (/.f64 1/2 x))) (/.f64 1/16 (pow.f64 x 5)))","(+.f64 (-.f64 (/.f64 1/8 (pow.f64 x 3)) x) (-.f64 (/.f64 -1/2 x) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (-.f64 (/.f64 -1/2 x) x) (/.f64 -1/16 (pow.f64 x 5))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) -1/2))","(fma.f64 (*.f64 x x) -1/2 1)","(fma.f64 x (*.f64 x -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 3/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 (pow.f64 x 4) 3/8)))","(+.f64 1 (fma.f64 (pow.f64 x 4) 3/8 (*.f64 (*.f64 -1/2 x) x)))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 3/8 1))","(+.f64 (*.f64 -5/16 (pow.f64 x 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 3/8 (pow.f64 x 4)))))","(fma.f64 -5/16 (pow.f64 x 6) (+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 (pow.f64 x 4) 3/8))))","(+.f64 (fma.f64 (pow.f64 x 4) 3/8 (*.f64 (*.f64 -1/2 x) x)) (fma.f64 (pow.f64 x 6) -5/16 1))","(fma.f64 (pow.f64 x 6) -5/16 (fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 3/8 1)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 3))))","(-.f64 (/.f64 1 x) (/.f64 1/2 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1/2 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 3/8 (pow.f64 x 5)) (/.f64 1/2 (pow.f64 x 3))))","(-.f64 (+.f64 (/.f64 1 x) (/.f64 3/8 (pow.f64 x 5))) (/.f64 1/2 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (pow.f64 x 3)) (/.f64 -3/8 (pow.f64 x 5))))","(-.f64 (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 7))) (*.f64 1/2 (/.f64 1 (pow.f64 x 3)))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 3/8 (pow.f64 x 5)) (+.f64 (/.f64 1/2 (pow.f64 x 3)) (/.f64 5/16 (pow.f64 x 7)))))","(+.f64 (/.f64 1 x) (+.f64 (-.f64 (/.f64 3/8 (pow.f64 x 5)) (/.f64 1/2 (pow.f64 x 3))) (/.f64 -5/16 (pow.f64 x 7))))","(-.f64 (/.f64 -5/16 (pow.f64 x 7)) (+.f64 (/.f64 1/2 (pow.f64 x 3)) (+.f64 (/.f64 -1 x) (/.f64 -3/8 (pow.f64 x 5)))))","(/.f64 -1 x)","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))","(-.f64 (/.f64 1/2 (pow.f64 x 3)) (/.f64 1 x))","(+.f64 (/.f64 1/2 (pow.f64 x 3)) (/.f64 -1 x))","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))))","(-.f64 (/.f64 1/2 (pow.f64 x 3)) (+.f64 (/.f64 1 x) (/.f64 3/8 (pow.f64 x 5))))","(+.f64 (/.f64 1/2 (pow.f64 x 3)) (+.f64 (/.f64 -1 x) (/.f64 -3/8 (pow.f64 x 5))))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 7))) (*.f64 1/2 (/.f64 1 (pow.f64 x 3)))) (+.f64 (/.f64 1 x) (*.f64 3/8 (/.f64 1 (pow.f64 x 5)))))","(+.f64 (/.f64 5/16 (pow.f64 x 7)) (-.f64 (/.f64 1/2 (pow.f64 x 3)) (+.f64 (/.f64 1 x) (/.f64 3/8 (pow.f64 x 5)))))","(+.f64 (/.f64 1/2 (pow.f64 x 3)) (-.f64 (/.f64 5/16 (pow.f64 x 7)) (+.f64 (/.f64 1 x) (/.f64 3/8 (pow.f64 x 5)))))","(+.f64 (/.f64 5/16 (pow.f64 x 7)) (+.f64 (/.f64 1/2 (pow.f64 x 3)) (+.f64 (/.f64 -1 x) (/.f64 -3/8 (pow.f64 x 5)))))","x","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) x)","(fma.f64 -1/2 (pow.f64 x 3) x)","(fma.f64 (pow.f64 x 3) -1/2 x)","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) x))","(fma.f64 -1/2 (pow.f64 x 3) (fma.f64 3/8 (pow.f64 x 5) x))","(fma.f64 (pow.f64 x 3) -1/2 (fma.f64 (pow.f64 x 5) 3/8 x))","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) (+.f64 (*.f64 -5/16 (pow.f64 x 7)) x)))","(fma.f64 -1/2 (pow.f64 x 3) (fma.f64 3/8 (pow.f64 x 5) (fma.f64 -5/16 (pow.f64 x 7) x)))","(fma.f64 (pow.f64 x 3) -1/2 (fma.f64 (pow.f64 x 5) 3/8 (fma.f64 -5/16 (pow.f64 x 7) x)))","(fma.f64 (pow.f64 x 3) -1/2 (fma.f64 -5/16 (pow.f64 x 7) (fma.f64 (pow.f64 x 5) 3/8 x)))","1","(-.f64 1 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 1 (/.f64 1/2 (*.f64 x x)))","(+.f64 1 (/.f64 -1/2 (*.f64 x x)))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 1 (/.f64 3/8 (pow.f64 x 4))) (/.f64 1/2 (*.f64 x x)))","(+.f64 (/.f64 3/8 (pow.f64 x 4)) (+.f64 1 (/.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (/.f64 3/8 (pow.f64 x 4)) (/.f64 -1/2 (*.f64 x x))))","(+.f64 (+.f64 1 (/.f64 -1/2 (*.f64 x x))) (/.f64 3/8 (pow.f64 x 4)))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 1 (-.f64 (/.f64 3/8 (pow.f64 x 4)) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 5/16 (pow.f64 x 6)))))","(-.f64 (+.f64 1 (/.f64 3/8 (pow.f64 x 4))) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 5/16 (pow.f64 x 6))))","(+.f64 (/.f64 3/8 (pow.f64 x 4)) (+.f64 (+.f64 1 (/.f64 -1/2 (*.f64 x x))) (/.f64 -5/16 (pow.f64 x 6))))","(+.f64 1 (+.f64 (/.f64 -1/2 (*.f64 x x)) (+.f64 (/.f64 3/8 (pow.f64 x 4)) (/.f64 -5/16 (pow.f64 x 6)))))","-1","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) 1)","(+.f64 (/.f64 1/2 (*.f64 x x)) -1)","(+.f64 -1 (/.f64 1/2 (*.f64 x x)))","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","(-.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 1 (/.f64 3/8 (pow.f64 x 4))))","(+.f64 (/.f64 1/2 (*.f64 x x)) (-.f64 -1 (/.f64 3/8 (pow.f64 x 4))))","(+.f64 -1 (-.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 3/8 (pow.f64 x 4))))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 5/16 (pow.f64 x 6)) (-.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 1 (/.f64 3/8 (pow.f64 x 4)))))","(+.f64 (/.f64 5/16 (pow.f64 x 6)) (+.f64 (/.f64 1/2 (*.f64 x x)) (-.f64 -1 (/.f64 3/8 (pow.f64 x 4)))))","(-.f64 (+.f64 -1 (/.f64 1/2 (*.f64 x x))) (+.f64 (/.f64 3/8 (pow.f64 x 4)) (/.f64 -5/16 (pow.f64 x 6))))","(+.f64 -1 (-.f64 (-.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 -5/16 (pow.f64 x 6))) (/.f64 3/8 (pow.f64 x 4))))","x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(fma.f64 -1 (pow.f64 x 3) x)","(-.f64 x (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(fma.f64 -1 (pow.f64 x 3) (+.f64 x (pow.f64 x 5)))","(-.f64 (+.f64 x (pow.f64 x 5)) (pow.f64 x 3))","(-.f64 x (-.f64 (pow.f64 x 3) (pow.f64 x 5)))","(+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) (+.f64 (*.f64 -1 (pow.f64 x 7)) x)))","(fma.f64 -1 (pow.f64 x 3) (+.f64 (pow.f64 x 5) (fma.f64 -1 (pow.f64 x 7) x)))","(+.f64 (-.f64 (pow.f64 x 5) (pow.f64 x 7)) (-.f64 x (pow.f64 x 3)))","(+.f64 x (-.f64 (-.f64 (pow.f64 x 5) (pow.f64 x 7)) (pow.f64 x 3)))","(+.f64 x (-.f64 (pow.f64 x 5) (+.f64 (pow.f64 x 3) (pow.f64 x 7))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 5))) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 3))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 1 (pow.f64 x 7)))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7)))))","(+.f64 (/.f64 1 x) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7))) (/.f64 -1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 -1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 5))) (/.f64 -1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 3))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))) (/.f64 1 (pow.f64 x 7)))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7)))))","(+.f64 (/.f64 1 x) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7))) (/.f64 -1 (pow.f64 x 3))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 -1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 7)))))"]],"stop":[["node limit",1]],"time":40.533935546875,"type":"simplify"},{"compiler":[[4726,3364]],"time":64.77294921875,"type":"eval"},{"alts":[["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","fresh",31.626819748790457],["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))))))","next",13.965840156419898],["(+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))","fresh",31.928833882398063]],"compiler":[[10,8],[25,18],[10,7],[10,8],[25,18],[10,7]],"count":[[256,3]],"kept":[{"done":[1,0],"fresh":[2,1],"new":[252,2],"picked":[1,0]}],"min-error":[0],"time":72.369140625,"type":"prune"},{"compiler":[[85,57]],"locations":[["(/.f64 1 (cbrt.f64 (fma.f64 x x 1)))",0.1484375,true],["(*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1)))))",0.1484375,true],["(sqrt.f64 (fma.f64 x x 1))",13.865152940409493,false],["(cbrt.f64 (fma.f64 x x 1))",14.30579075911801,true]],"time":23.923828125,"type":"localize"},{"count":[[3,20]],"series":[["(/.f64 1 (cbrt.f64 (fma.f64 x x 1)))","x","-inf",0.2919921875],["(/.f64 1 (cbrt.f64 (fma.f64 x x 1)))","x","inf",0.363037109375],["(/.f64 1 (cbrt.f64 (fma.f64 x x 1)))","x","0",0.306884765625],["(*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1)))))","x","-inf",0.197998046875],["(*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1)))))","x","inf",0.18896484375],["(*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1)))))","x","0",0.38818359375],["(cbrt.f64 (fma.f64 x x 1))","x","-inf",0.282958984375],["(cbrt.f64 (fma.f64 x x 1))","x","inf",0.39990234375],["(cbrt.f64 (fma.f64 x x 1))","x","0",0.52001953125]],"time":3.087158203125,"type":"series"},{"count":[[3,99]],"egraph":[[2,2667,27,0.023107666],[1,204,27,0.004039874],[0,10,38,0.000257291]],"inputs":[["(cbrt.f64 (fma.f64 x x 1))","(*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1)))))","(/.f64 1 (cbrt.f64 (fma.f64 x x 1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (fma.f64 x x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) 1/6) (pow.f64 (fma.f64 x x 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x 1) 1/6)) (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 x x 1) 1/6)) (*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x 1) 1/6)) (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) 1/4) (sqrt.f64 (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x 1) 1/6) (cbrt.f64 (cbrt.f64 (fma.f64 x x 1)))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x 1) 1/6) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) 2) (/.f64 1 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x 1)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x 1) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 x x 1))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (sqrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (cbrt.f64 (fma.f64 x x 1)) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (cbrt.f64 (fma.f64 x x 1)) (/.f64 (pow.f64 (fma.f64 x x 1) 1/6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (pow.f64 (fma.f64 x x 1) 1/6) x) (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 (fma.f64 x x 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 (fma.f64 x x 1)) (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (fma.f64 x x 1) 1/6) (/.f64 x (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 (pow.f64 (fma.f64 x x 1) 1/6) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 (sqrt.f64 (fma.f64 x x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 x x) (cbrt.f64 (fma.f64 x x 1)))) (/.f64 (cbrt.f64 (fma.f64 x x 1)) (cbrt.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 (sqrt.f64 (fma.f64 x x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6))) (/.f64 (cbrt.f64 (fma.f64 x x 1)) (sqrt.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (/.f64 (pow.f64 (fma.f64 x x 1) 1/6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 (pow.f64 (fma.f64 x x 1) 1/6) x) (neg.f64 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (sqrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (cbrt.f64 (fma.f64 x x 1)) (neg.f64 (pow.f64 (fma.f64 x x 1) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (fma.f64 x x 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6))) (neg.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1)))) (neg.f64 (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 (pow.f64 (fma.f64 x x 1) 1/6)) (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (neg.f64 (pow.f64 (fma.f64 x x 1) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1) (*.f64 (pow.f64 (fma.f64 x x 1) 1/6) (neg.f64 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) -1) (*.f64 (neg.f64 (pow.f64 (fma.f64 x x 1) 1/6)) (neg.f64 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) (pow.f64 (fma.f64 x x 1) 1/6)) (pow.f64 (fma.f64 x x 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) 1) (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) 1) (pow.f64 (fma.f64 x x 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (cbrt.f64 (cbrt.f64 (fma.f64 x x 1)))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (sqrt.f64 (pow.f64 (fma.f64 x x 1) 1/6))) (sqrt.f64 (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6))) (neg.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 1 (cbrt.f64 (fma.f64 x x 1)))) (neg.f64 (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (neg.f64 x)) (neg.f64 (pow.f64 (fma.f64 x x 1) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) -1) (neg.f64 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 x x) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) 3) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) 3) (pow.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x (pow.f64 (fma.f64 x x 1) 1/6)) 3) (pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (sqrt.f64 (fma.f64 x x 1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1)))) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -2)) (/.f64 1 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -1/2) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) 2) -1) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x 1) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (cbrt.f64 (fma.f64 x x 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (cbrt.f64 (fma.f64 x x 1)))))))))"]],"rules":[["egg-rr",21],["egg-rr",50],["egg-rr",28]],"stop":[["node limit",1]],"time":48.208984375,"type":"rewrite"},{"count":[[119,132]],"egraph":[[4,5411,254,0.021288915999999998],[3,1358,254,0.0104455],[2,465,256,0.0033059170000000002],[1,184,260,0.001206209],[0,68,264,0.000339667]],"inputs":[["1","(+.f64 1 (*.f64 1/3 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 x 4)) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 x 4)) (+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 5/81 (pow.f64 x 6)))))","x","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) (+.f64 (*.f64 -5/16 (pow.f64 x 7)) x)))","1","(-.f64 1 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","-1","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) 1)","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 2/9 (pow.f64 x 4))))","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -14/81 (pow.f64 x 6)) (*.f64 2/9 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/3 (pow.f64 x 2)))","(+.f64 1 (*.f64 1/3 (*.f64 x x)))","(fma.f64 1/3 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 x 4)) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (fma.f64 -1/9 (pow.f64 x 4) (*.f64 1/3 (*.f64 x x))))","(+.f64 (fma.f64 1/3 (*.f64 x x) 1) (*.f64 -1/9 (pow.f64 x 4)))","(fma.f64 1/3 (*.f64 x x) (fma.f64 -1/9 (pow.f64 x 4) 1))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -1/9 1/3) 1)","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 x 4)) (+.f64 (*.f64 1/3 (pow.f64 x 2)) (*.f64 5/81 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 -1/9 (pow.f64 x 4) (fma.f64 1/3 (*.f64 x x) (*.f64 5/81 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 1/3 (*.f64 x x) (fma.f64 5/81 (pow.f64 x 6) (*.f64 -1/9 (pow.f64 x 4)))))","(fma.f64 1/3 (*.f64 x x) (fma.f64 -1/9 (pow.f64 x 4) (fma.f64 5/81 (pow.f64 x 6) 1)))","(fma.f64 5/81 (pow.f64 x 6) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -1/9 1/3) 1))","x","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) x)","(fma.f64 -1/2 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) x))","(fma.f64 -1/2 (pow.f64 x 3) (fma.f64 3/8 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/2 (pow.f64 x 3)) (+.f64 (*.f64 3/8 (pow.f64 x 5)) (+.f64 (*.f64 -5/16 (pow.f64 x 7)) x)))","(fma.f64 -1/2 (pow.f64 x 3) (fma.f64 3/8 (pow.f64 x 5) (fma.f64 -5/16 (pow.f64 x 7) x)))","1","(-.f64 1 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 1 (/.f64 1/2 (*.f64 x x)))","(+.f64 1 (/.f64 -1/2 (*.f64 x x)))","(-.f64 1 (/.f64 (/.f64 1/2 x) x))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 1 (-.f64 (/.f64 3/8 (pow.f64 x 4)) (/.f64 1/2 (*.f64 x x))))","(+.f64 (/.f64 3/8 (pow.f64 x 4)) (+.f64 1 (/.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (/.f64 3/8 (pow.f64 x 4)) (/.f64 -1/2 (*.f64 x x))))","(-.f64 (-.f64 1 (/.f64 (/.f64 1/2 x) x)) (/.f64 -3/8 (pow.f64 x 4)))","(+.f64 (+.f64 1 (/.f64 -1/2 (*.f64 x x))) (/.f64 3/8 (pow.f64 x 4)))","(-.f64 (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))) (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 1 (-.f64 (/.f64 3/8 (pow.f64 x 4)) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 5/16 (pow.f64 x 6)))))","(+.f64 1 (+.f64 (+.f64 (/.f64 3/8 (pow.f64 x 4)) (/.f64 -1/2 (*.f64 x x))) (/.f64 -5/16 (pow.f64 x 6))))","(+.f64 (/.f64 3/8 (pow.f64 x 4)) (+.f64 (-.f64 1 (/.f64 (/.f64 1/2 x) x)) (/.f64 -5/16 (pow.f64 x 6))))","(+.f64 (/.f64 3/8 (pow.f64 x 4)) (+.f64 (+.f64 1 (/.f64 -1/2 (*.f64 x x))) (/.f64 -5/16 (pow.f64 x 6))))","-1","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) 1)","(+.f64 (/.f64 1/2 (*.f64 x x)) -1)","(+.f64 (/.f64 (/.f64 1/2 x) x) -1)","(-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","(-.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 1 (/.f64 3/8 (pow.f64 x 4))))","(+.f64 (/.f64 1/2 (*.f64 x x)) (-.f64 -1 (/.f64 3/8 (pow.f64 x 4))))","(+.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 -1 (/.f64 -3/8 (pow.f64 x 4))))","(+.f64 (/.f64 (/.f64 1/2 x) x) (+.f64 -1 (/.f64 -3/8 (pow.f64 x 4))))","(+.f64 (+.f64 (/.f64 (/.f64 1/2 x) x) -1) (/.f64 -3/8 (pow.f64 x 4)))","(-.f64 (+.f64 (*.f64 5/16 (/.f64 1 (pow.f64 x 6))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))) (+.f64 1 (*.f64 3/8 (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 5/16 (pow.f64 x 6)) (-.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 1 (/.f64 3/8 (pow.f64 x 4)))))","(+.f64 (/.f64 1/2 (*.f64 x x)) (-.f64 (/.f64 5/16 (pow.f64 x 6)) (+.f64 1 (/.f64 3/8 (pow.f64 x 4)))))","(+.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 (/.f64 5/16 (pow.f64 x 6)) (+.f64 -1 (/.f64 -3/8 (pow.f64 x 4)))))","(+.f64 (/.f64 (/.f64 1/2 x) x) (+.f64 (/.f64 5/16 (pow.f64 x 6)) (+.f64 -1 (/.f64 -3/8 (pow.f64 x 4)))))","(-.f64 (/.f64 -3/8 (pow.f64 x 4)) (+.f64 (+.f64 1 (/.f64 -1/2 (*.f64 x x))) (/.f64 -5/16 (pow.f64 x 6))))","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(fma.f64 -1/3 (*.f64 x x) 1)","(fma.f64 (*.f64 x x) -1/3 1)","(fma.f64 x (*.f64 x -1/3) 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 2/9 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/3 (*.f64 x x) 1) (*.f64 (pow.f64 x 4) 2/9))","(fma.f64 (*.f64 x x) -1/3 (fma.f64 (pow.f64 x 4) 2/9 1))","(fma.f64 x (*.f64 x -1/3) (fma.f64 (pow.f64 x 4) 2/9 1))","(fma.f64 (pow.f64 x 4) 2/9 (fma.f64 x (*.f64 x -1/3) 1))","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -14/81 (pow.f64 x 6)) (*.f64 2/9 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/3 (*.f64 x x) 1) (fma.f64 -14/81 (pow.f64 x 6) (*.f64 (pow.f64 x 4) 2/9)))","(+.f64 (fma.f64 (*.f64 x x) -1/3 1) (fma.f64 (pow.f64 x 6) -14/81 (*.f64 (pow.f64 x 4) 2/9)))","(fma.f64 x (*.f64 x -1/3) (fma.f64 (pow.f64 x 4) 2/9 (fma.f64 (pow.f64 x 6) -14/81 1)))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x 2/9) -1/3) (fma.f64 (pow.f64 x 6) -14/81 1))"]],"stop":[["node limit",1]],"time":37.055908203125,"type":"simplify"},{"compiler":[[6102,4470]],"time":78.716064453125,"type":"eval"},{"alts":[["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","next",31.626819748790457],["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))))))","done",13.965840156419898],["(+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))","fresh",31.928833882398063]],"compiler":[[10,8],[25,18],[10,7],[10,8],[10,7]],"count":[[229,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[226,0],"picked":[1,1]}],"min-error":[0],"time":60.263916015625,"type":"prune"},{"compiler":[[25,19]],"locations":[["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))",0.01171875,true],["(/.f64 -1 (pow.f64 x 3))",0.125968466849389,true]],"time":6.7880859375,"type":"localize"},{"count":[[2,12]],"series":[["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","x","-inf",0.241943359375],["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","x","inf",0.384033203125],["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","x","0",0.27099609375],["(/.f64 -1 (pow.f64 x 3))","x","-inf",0.1689453125],["(/.f64 -1 (pow.f64 x 3))","x","inf",0.239990234375],["(/.f64 -1 (pow.f64 x 3))","x","0",0.60595703125]],"time":1.995849609375,"type":"series"},{"count":[[2,72]],"egraph":[[2,2651,17,0.021670040999999998],[1,201,17,0.003664583],[0,9,20,0.000308417]],"inputs":[["(/.f64 -1 (pow.f64 x 3))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (neg.f64 (pow.f64 x -3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (pow.f64 (/.f64 -1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -1 x) 2) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (pow.f64 x -3))) (sqrt.f64 (neg.f64 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (pow.f64 x -3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 x 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (pow.f64 x -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (neg.f64 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (neg.f64 (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (neg.f64 (pow.f64 x -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (neg.f64 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (neg.f64 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (neg.f64 (pow.f64 x -3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x -2) (+.f64 (/.f64 1 x) (pow.f64 x -3))) (/.f64 (/.f64 1 (pow.f64 x 6)) (+.f64 (/.f64 1 x) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))) (pow.f64 (cbrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))) 2) (cbrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))) (sqrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (neg.f64 x)) (/.f64 1 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x -3) (pow.f64 (neg.f64 (pow.f64 x -3)) 3)) (/.f64 1 (+.f64 (pow.f64 x -2) (-.f64 (/.f64 1 (pow.f64 x 6)) (/.f64 -1 (pow.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x -2) (/.f64 1 (pow.f64 x 6))) (/.f64 1 (+.f64 (/.f64 1 x) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 x 4) (+.f64 (pow.f64 x 3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 x -2) (-.f64 (/.f64 1 (pow.f64 x 6)) (/.f64 -1 (pow.f64 x 4)))) (+.f64 (pow.f64 x -3) (pow.f64 (neg.f64 (pow.f64 x -3)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 1 x) (pow.f64 x -3)) (-.f64 (pow.f64 x -2) (/.f64 1 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (neg.f64 x)) (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x -3) (pow.f64 (neg.f64 (pow.f64 x -3)) 3)) (+.f64 (pow.f64 x -2) (-.f64 (/.f64 1 (pow.f64 x 6)) (/.f64 -1 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x -3) (pow.f64 (neg.f64 (pow.f64 x -3)) 3)) (+.f64 (/.f64 1 (pow.f64 x 6)) (-.f64 (pow.f64 x -2) (/.f64 -1 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -2) (/.f64 1 (pow.f64 x 6))) (+.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (neg.f64 x))) (neg.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x -3) (pow.f64 (neg.f64 (pow.f64 x -3)) 3))) (neg.f64 (+.f64 (pow.f64 x -2) (-.f64 (/.f64 1 (pow.f64 x 6)) (/.f64 -1 (pow.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x -2) (/.f64 1 (pow.f64 x 6)))) (neg.f64 (+.f64 (/.f64 1 x) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 x 3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) (*.f64 (neg.f64 (pow.f64 x 3)) -1)) (*.f64 (neg.f64 (pow.f64 x 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 (pow.f64 x 3) -1) -1)) (*.f64 (*.f64 (pow.f64 x 3) -1) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (neg.f64 (pow.f64 x 3)) 1)) (*.f64 (neg.f64 (pow.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (*.f64 (pow.f64 x 3) -1) 1)) (*.f64 (*.f64 (pow.f64 x 3) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x 3)) (*.f64 (neg.f64 x) -1)) (*.f64 (neg.f64 x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (neg.f64 (pow.f64 x 3))) (*.f64 (neg.f64 x) 1)) (*.f64 (neg.f64 x) (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x 3)) x) (*.f64 x (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 x 3) -1)) (*.f64 (neg.f64 x) 1)) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) -1) x) (*.f64 x (*.f64 (pow.f64 x 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1 (pow.f64 x 6)) (pow.f64 x -2)) (-.f64 (neg.f64 (pow.f64 x -3)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 3) (neg.f64 x)) x) (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 x -3)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 1 (cbrt.f64 x)) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 -1 x) 2) (/.f64 -1 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (pow.f64 x -1/2) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (pow.f64 x -3))) (sqrt.f64 (neg.f64 (pow.f64 x -3))) (/.f64 1 x))))))"]],"rules":[["egg-rr",50],["egg-rr",22]],"stop":[["node limit",1]],"time":43.003173828125,"type":"rewrite"},{"count":[[84,76]],"egraph":[[9,7770,132,0.043873289999999995],[8,5839,132,0.032985624],[7,4145,132,0.019040583],[6,2037,132,0.010690417],[5,501,132,0.0042896670000000005],[4,172,132,0.001402375],[3,82,132,0.000646208],[2,42,132,0.000338208],[1,22,132,0.000176583],[0,10,132,7.3958e-5]],"inputs":[["(/.f64 -1 (pow.f64 x 3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 (pow.f64 x 3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))"]],"stop":[["node limit",1]],"time":59.364013671875,"type":"simplify"},{"compiler":[[1029,795]],"time":15.554931640625,"type":"eval"},{"alts":[["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","done",31.626819748790457],["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))))))","done",13.965840156419898],["(+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))","fresh",31.928833882398063]],"compiler":[[10,8],[25,18],[10,7]],"count":[[79,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[76,0],"picked":[1,1]}],"min-error":[0],"time":10.322021484375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[13.88867262711457],"branch":[["x",0.00390625,3],["(/.f64 x (+.f64 (*.f64 x x) 1))",0.030292529305326048,3]],"compiler":[[2,1],[8,5],[83,55]],"count":[[7,3]],"inputs":[["(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (*.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x 1))) (/.f64 x (cbrt.f64 (sqrt.f64 (fma.f64 x x 1))))))","(+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))","(*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (fma.f64 x x 1))))","(*.f64 (/.f64 1 (sqrt.f64 (fma.f64 x x 1))) (/.f64 x (sqrt.f64 (fma.f64 x x 1))))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(/.f64 x (fma.f64 x x 1))","(/.f64 x (+.f64 (*.f64 x x) 1))"]],"link":["."],"name":["x / (x^2 + 1)"],"oracle":[63.760266283562316],"outputs":[["(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))","(+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))","(+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))"]],"time":23.282958984375,"times":[["x",11.447021484375],["(/.f64 x (+.f64 (*.f64 x x) 1))",9.968017578125]],"type":"regimes"},{"bstep":[[9.544882123799739e-5,210355.99389088576,6.74609375],[-6040261615.299245,-0.0004592680025136355,6.98388671875]],"compiler":[[10,7],[2,1]],"method":["binary-search","binary-search"],"time":13.8359375,"type":"bsearch"},{"compiler":[[36,27]],"egraph":[[4,32,51,0.00019191599999999998],[3,31,51,0.000155583],[2,29,51,0.000119208],[1,26,51,8.3291e-5],[0,20,51,4.0541e-5]],"inputs":[["(if (<=.f64 x -6333673363524021/1048576) (+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3))) (if (<=.f64 x 7042879910058363/73786976294838206464) (+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3))) (+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -6333673363524021/1048576) (+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3))) (if (<=.f64 x 7042879910058363/73786976294838206464) (+.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3))) (+.f64 (/.f64 1 x) (/.f64 -1 (pow.f64 x 3)))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.195068359375,"type":"simplify"},{"time":0.02490234375,"type":"soundness"},{"compiler":[[36,27]],"remove-preprocessing":[[]],"time":16.300048828125,"type":"end"}]
[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":77.0458984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",46.145263671875,1271],["body",256,"valid",302.65673828125,8256]],"time":357.05712890625,"type":"sample"},{"compiler":[[10,6]],"egraph":[[1,3,3,6.1669999999999996e-6],[0,3,3,5.209e-6],[2,47,28,0.000290166],[1,31,28,0.00018154100000000002],[0,14,28,7.0666e-5]],"inputs":[["0","1","2"],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d2 d3))","(+.f64 (*.f64 d3 d2) (*.f64 d3 d1))","(+.f64 (*.f64 d1 d3) (*.f64 d1 d2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","1"],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d3 d2))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d2 d3))","(*.f64 d2 (+.f64 d1 d3))","(+.f64 (*.f64 d3 d2) (*.f64 d3 d1))","(*.f64 d3 (+.f64 d2 d1))","(*.f64 d3 (+.f64 d1 d2))","(+.f64 (*.f64 d1 d3) (*.f64 d1 d2))","(*.f64 d1 (+.f64 d3 d2))","(*.f64 d1 (+.f64 d2 d3))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort d2 d3)"]],"time":23.5458984375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,19,7,0.000142583],[1,13,7,9.1625e-5],[0,7,7,3.8e-5]],"inputs":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))"]],"stop":[["saturated",1]],"time":10.322021484375,"type":"simplify"},{"compiler":[[15,8]],"time":0.302001953125,"type":"eval"},{"alts":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","next",0.0078125]],"compiler":[[10,6],[10,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.7890625,"type":"prune"},{"compiler":[[19,6]],"locations":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))",0.0078125,true]],"time":3.927978515625,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d3","-inf",0.205078125],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d3","inf",0.2451171875],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d3","0",0.25],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d2","-inf",0.260009765625],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d2","inf",0.5400390625],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d2","0",0.30615234375],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d1","-inf",0.59619140625],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d1","inf",0.5849609375],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))","d1","0",0.5439453125]],"time":3.64794921875,"type":"series"},{"count":[[1,41]],"egraph":[[2,2106,7,0.019579166],[1,151,7,0.002777583],[0,7,7,0.000164958]],"inputs":[["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 d1 (+.f64 d2 d3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 d1 d2) 2) (*.f64 d1 (-.f64 d2 d3))) (/.f64 (pow.f64 (*.f64 d1 d3) 2) (*.f64 d1 (-.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 d2 d3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 d1) 2) (*.f64 (cbrt.f64 d1) (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 2) (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 d1) (*.f64 (sqrt.f64 d1) (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 d3))) (sqrt.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 d3) 3)) (/.f64 1 (+.f64 (pow.f64 (*.f64 d1 d2) 2) (*.f64 (*.f64 d1 d3) (-.f64 (*.f64 d1 d3) (*.f64 d1 d2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 d1 d2) 2) (pow.f64 (*.f64 d1 d3) 2)) (/.f64 1 (*.f64 d1 (-.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 d2 d3) d1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 2) (*.f64 (*.f64 d1 d3) (-.f64 (*.f64 d1 d3) (*.f64 d1 d2)))) (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 d3) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 d1 (-.f64 d2 d3)) (-.f64 (pow.f64 (*.f64 d1 d2) 2) (pow.f64 (*.f64 d1 d3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 d3) 3)) (+.f64 (pow.f64 (*.f64 d1 d2) 2) (*.f64 (*.f64 d1 d3) (-.f64 (*.f64 d1 d3) (*.f64 d1 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 d3) 3)) (+.f64 (pow.f64 (*.f64 d1 d3) 2) (-.f64 (pow.f64 (*.f64 d1 d2) 2) (*.f64 d1 (*.f64 d2 (*.f64 d1 d3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 d1 d2) 2) (pow.f64 (*.f64 d1 d3) 2)) (*.f64 d1 (-.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 d3) 3))) (neg.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 2) (*.f64 (*.f64 d1 d3) (-.f64 (*.f64 d1 d3) (*.f64 d1 d2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 d1 d2) 2) (pow.f64 (*.f64 d1 d3) 2))) (neg.f64 (*.f64 d1 (-.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 d1 d3) 2) (pow.f64 (*.f64 d1 d2) 2)) (-.f64 (*.f64 d1 d3) (*.f64 d1 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 d3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 d1) (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d2 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d3 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d2 d1 (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d3 d1 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 d2) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 d1 d3)) 2) (cbrt.f64 (*.f64 d1 d3)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 d1 d2)) 2) (cbrt.f64 (*.f64 d1 d2)) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 d1 d3)) (sqrt.f64 (*.f64 d1 d3)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 d1 d2)) (sqrt.f64 (*.f64 d1 d2)) (*.f64 d1 d3))))))"]],"rules":[["egg-rr",41]],"stop":[["node limit",1]],"time":37.80712890625,"type":"rewrite"},{"count":[[77,46]],"egraph":[[7,589,234,0.00863125],[6,584,234,0.0071185],[5,528,234,0.005607],[4,391,234,0.003760041],[3,208,234,0.001948708],[2,109,234,0.000781666],[1,42,234,0.00030199999999999997],[0,15,234,9.475e-5]],"inputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))"]],"stop":[["saturated",1]],"time":23.552001953125,"type":"simplify"},{"compiler":[[563,191]],"time":5.23095703125,"type":"eval"},{"alts":[["(fma.f64 d1 d2 (*.f64 d1 d3))","next",0.00390625]],"compiler":[[9,5],[9,5]],"count":[[47,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[46,1],"picked":[1,0]}],"min-error":[0.00390625],"time":7.212890625,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 d1 d2 (*.f64 d1 d3))",0.00390625,true]],"time":3.35693359375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 d1 d2 (*.f64 d1 d3))","d3","-inf",0.155029296875],["(fma.f64 d1 d2 (*.f64 d1 d3))","d3","inf",0.155029296875],["(fma.f64 d1 d2 (*.f64 d1 d3))","d3","0",0.2099609375],["(fma.f64 d1 d2 (*.f64 d1 d3))","d2","-inf",0.282958984375],["(fma.f64 d1 d2 (*.f64 d1 d3))","d2","inf",0.260986328125],["(fma.f64 d1 d2 (*.f64 d1 d3))","d2","0",0.197021484375],["(fma.f64 d1 d2 (*.f64 d1 d3))","d1","-inf",0.68603515625],["(fma.f64 d1 d2 (*.f64 d1 d3))","d1","inf",0.378173828125],["(fma.f64 d1 d2 (*.f64 d1 d3))","d1","0",0.3759765625]],"time":2.799072265625,"type":"series"},{"count":[[1,22]],"egraph":[[2,1414,7,0.015015208],[1,118,7,0.001877042],[0,6,8,0.0001345]],"inputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d3) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 d2) 1) (*.f64 d1 d3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 d1 (+.f64 d2 d3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 d2 d3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 d2 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 2) (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 d3))) (sqrt.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 d1 d2) 3) (pow.f64 (*.f64 d1 d3) 3)) (+.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d2)) (-.f64 (pow.f64 (*.f64 d1 d3) 2) (*.f64 (*.f64 d1 d2) (*.f64 d1 d3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 d1 d2) (*.f64 d1 d2)) (pow.f64 (*.f64 d1 d3) 2)) (-.f64 (*.f64 d1 d2) (*.f64 d1 d3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 d2 d3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 d2 d3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 d1 (+.f64 d2 d3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 d2 d3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 d1 (+.f64 d2 d3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 d1 (+.f64 d2 d3))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":31.948974609375,"type":"rewrite"},{"count":[[58,27]],"egraph":[[7,589,234,0.008636250000000002],[6,584,234,0.007135458000000001],[5,528,234,0.005611499000000001],[4,391,234,0.0037616660000000003],[3,208,234,0.001950916],[2,109,234,0.000771041],[1,42,234,0.000300624],[0,15,234,9.3958e-5]],"inputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 d3) (*.f64 -1 d2))))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d2 d1)","(*.f64 d1 d2)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(*.f64 d1 d3)","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))","(+.f64 (*.f64 d2 d1) (*.f64 d1 d3))","(*.f64 d1 (+.f64 d2 d3))"]],"stop":[["saturated",1]],"time":23.072021484375,"type":"simplify"},{"compiler":[[254,80]],"time":2.593994140625,"type":"eval"},{"alts":[["(fma.f64 d1 d2 (*.f64 d1 d3))","done",0.00390625]],"compiler":[[9,5]],"count":[[28,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[27,0],"picked":[1,1]}],"min-error":[0.00390625],"time":3.699951171875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["d1",0.00390625,1],["d2",0.00390625,1],["d3",0.00390625,1],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[16,7]],"count":[[2,1]],"inputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))","(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))"]],"link":["."],"name":["FastMath dist"],"oracle":[0.0078125],"outputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))"]],"time":10.26318359375,"times":[["d1",2.376953125],["d2",2.302001953125],["d3",2.4111328125],["(+.f64 (*.f64 d1 d2) (*.f64 d1 d3))",2.669921875]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[1,7,8,2.2916999999999998e-5],[0,6,8,1.3375e-5]],"inputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 d1 d2 (*.f64 d1 d3))"]],"stop":[["done",1],["saturated",1]],"time":7.989013671875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[9,5],[9,5],[9,5]],"remove-preprocessing":[["(sort d2 d3)"]],"time":8.985107421875,"type":"end"}]
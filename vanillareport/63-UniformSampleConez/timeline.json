[{"compiler":[[33,24]],"method":["search"],"sampling":[[1,1.5243887901117388e-5,0.0,0.9999847561120989],[0,0.0,1.5243887901117388e-5,0.9999847561120989]],"time":0.217041015625,"type":"analyze"},{"outcomes":[["body",512,"valid",2.828857421875,32],["body",1024,"valid",8.46728515625,66],["body",256,"valid",393.141845703125,8158]],"time":412.177001953125,"type":"sample"},{"compiler":[[10,7]],"egraph":[[0,3,3,2.334e-6],[9,2409,32,0.034840166],[8,2398,32,0.029043916],[7,2318,32,0.023115708],[6,1980,32,0.017035374],[5,1152,32,0.010530166],[4,540,32,0.004172458],[3,222,32,0.0015105000000000001],[2,106,32,0.000598833],[1,40,32,0.00022783299999999999],[0,16,40,7.9458e-5]],"inputs":[["0","1","2"],["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))","(+.f64 (-.f64 1 uy) (*.f64 uy maxCos))","(+.f64 (-.f64 1 maxCos) (*.f64 maxCos ux))","(+.f64 (-.f64 1 ux) (*.f64 ux uy))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))","(fma.f64 ux maxCos (-.f64 1 ux))","(+.f64 (-.f64 1 uy) (*.f64 uy maxCos))","(+.f64 (-.f64 1 uy) (*.f64 maxCos uy))","(fma.f64 maxCos uy (-.f64 1 uy))","(-.f64 (fma.f64 maxCos uy 1) uy)","(+.f64 (-.f64 1 maxCos) (*.f64 maxCos ux))","(+.f64 (*.f64 ux maxCos) (-.f64 1 maxCos))","(fma.f64 ux maxCos (-.f64 1 maxCos))","(-.f64 (fma.f64 ux maxCos 1) maxCos)","(fma.f64 maxCos (+.f64 ux -1) 1)","(+.f64 (-.f64 1 ux) (*.f64 ux uy))","(fma.f64 ux uy (-.f64 1 ux))","(-.f64 (fma.f64 ux uy 1) ux)","(fma.f64 ux (-.f64 uy 1) 1)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":57.844970703125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[9,805,8,0.011738418],[8,800,8,0.009770209],[7,768,8,0.007764167000000001],[6,626,8,0.005653876],[5,363,8,0.003344542],[4,167,8,0.0014252919999999999],[3,72,8,0.000578542],[2,35,8,0.000247501],[1,15,8,0.00011133399999999999],[0,7,10,4.6834e-5]],"inputs":[["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))","(fma.f64 ux maxCos (-.f64 1 ux))","(-.f64 (fma.f64 ux maxCos 1) ux)"]],"stop":[["saturated",1]],"time":22.64599609375,"type":"simplify"},{"compiler":[[16,10]],"time":0.321044921875,"type":"eval"},{"alts":[["(-.f64 (fma.f64 ux maxCos 1) ux)","next",0.01953125],["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))","fresh",0.02734375]],"compiler":[[9,6],[10,7],[9,6],[10,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.015625],"time":1.156982421875,"type":"prune"},{"compiler":[[16,9]],"locations":[["(-.f64 (fma.f64 ux maxCos 1) ux)",0.00390625,true]],"time":3.9599609375,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (fma.f64 ux maxCos 1) ux)","maxCos","-inf",0.299072265625],["(-.f64 (fma.f64 ux maxCos 1) ux)","maxCos","inf",0.296875],["(-.f64 (fma.f64 ux maxCos 1) ux)","maxCos","0",0.263916015625],["(-.f64 (fma.f64 ux maxCos 1) ux)","ux","-inf",0.39697265625],["(-.f64 (fma.f64 ux maxCos 1) ux)","ux","inf",0.320068359375],["(-.f64 (fma.f64 ux maxCos 1) ux)","ux","0",0.323974609375]],"time":1.97705078125,"type":"series"},{"count":[[1,37]],"egraph":[[2,1637,8,0.016360042],[1,124,8,0.002189792],[0,6,8,0.000172917]],"inputs":[["(-.f64 (fma.f64 ux maxCos 1) ux)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (*.f64 (neg.f64 ux) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (cbrt.f64 ux)) (pow.f64 (cbrt.f64 ux) 2) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 ux maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 ux maxCos) (+.f64 1 (neg.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 ux) (fma.f64 ux maxCos 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (fma.f64 ux maxCos 1) ux))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (pow.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 2) (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (/.f64 1 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux)) (/.f64 1 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux (+.f64 ux (fma.f64 ux maxCos 1)))) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux)) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))) (neg.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux))) (neg.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 (neg.f64 ux) 3)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (-.f64 (*.f64 (neg.f64 ux) (neg.f64 ux)) (*.f64 (fma.f64 ux maxCos 1) (neg.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 (neg.f64 ux) (neg.f64 ux))) (-.f64 (fma.f64 ux maxCos 1) (neg.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 ux maxCos 1) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) 2) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 ux))))))"]],"rules":[["egg-rr",37]],"stop":[["node limit",1]],"time":34.078125,"type":"rewrite"},{"count":[[61,47]],"egraph":[[7,790,171,0.010297667],[6,772,171,0.008283792],[5,664,171,0.006101417],[4,465,171,0.0037762919999999997],[3,230,171,0.001998875],[2,111,171,0.0008045],[1,45,171,0.00029958299999999997],[0,17,207,0.00010575]],"inputs":[["1","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(*.f64 (-.f64 maxCos 1) ux)","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos))))","(+.f64 1 (*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos)))))","(+.f64 1 (*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos)))))","(+.f64 1 (*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos)))))","(-.f64 1 ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(*.f64 maxCos ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(*.f64 maxCos ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(*.f64 (-.f64 maxCos 1) ux)","(*.f64 (+.f64 maxCos -1) ux)","(-.f64 (*.f64 maxCos ux) ux)","(*.f64 ux (+.f64 maxCos -1))","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(+.f64 1 (*.f64 (-.f64 maxCos 1) ux))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos))))","(*.f64 (+.f64 maxCos -1) ux)","(-.f64 (*.f64 maxCos ux) ux)","(*.f64 ux (+.f64 maxCos -1))","(+.f64 1 (*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos)))))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(+.f64 1 (*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos)))))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(+.f64 1 (*.f64 -1 (*.f64 ux (+.f64 1 (*.f64 -1 maxCos)))))","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(-.f64 1 ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(*.f64 maxCos ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(*.f64 maxCos ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)","(-.f64 (+.f64 1 (*.f64 maxCos ux)) ux)","(+.f64 1 (*.f64 (+.f64 maxCos -1) ux))","(-.f64 (fma.f64 maxCos ux 1) ux)"]],"stop":[["saturated",1]],"time":23.871826171875,"type":"simplify"},{"compiler":[[580,351]],"time":7.93115234375,"type":"eval"},{"alts":[["(-.f64 (fma.f64 ux maxCos 1) ux)","done",0.01953125],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","next",0.47103500976844204],["(pow.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 3)","fresh",0.6960526367581884]],"compiler":[[9,6],[20,13],[12,9],[20,13],[12,9]],"count":[[49,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[47,2],"picked":[1,1]}],"min-error":[0.00390625],"time":8.343994140625,"type":"prune"},{"compiler":[[50,27]],"locations":[["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))",0.04296875,true],["(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))",0.07259750976844201,true],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))",0.44921875,true]],"time":21.532958984375,"type":"localize"},{"count":[[3,16]],"series":[["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","maxCos","-inf",0.26708984375],["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","maxCos","inf",0.864013671875],["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","maxCos","0",0.203857421875],["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","ux","-inf",0.426025390625],["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","ux","inf",0.394775390625],["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","ux","0",0.22802734375],["(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","maxCos","-inf",0.328857421875],["(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","maxCos","inf",0.3369140625],["(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","maxCos","0",0.22607421875],["(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","ux","-inf",0.432861328125],["(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","ux","inf",0.422119140625],["(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","ux","0",0.232177734375],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","maxCos","-inf",0.72509765625],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","maxCos","inf",1.73486328125],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","maxCos","0",0.65283203125],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","ux","-inf",1.86181640625],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","ux","inf",2.22900390625],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","ux","0",0.904052734375]],"time":12.72705078125,"type":"series"},{"count":[[3,352]],"egraph":[[2,2802,32,0.025301417],[1,207,32,0.003770667],[0,10,50,0.000241625]],"inputs":[["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","(-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))","(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (fma.f64 ux maxCos 1) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 ux maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 -1 ux ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (neg.f64 (sqrt.f64 ux)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (neg.f64 (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 ux)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (fma.f64 ux maxCos 1) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 ux maxCos 1) 1 (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux))) (cbrt.f64 ux) (*.f64 (*.f64 (pow.f64 ux 1/6) (sqrt.f64 ux)) (cbrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (fma.f64 ux maxCos 1) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 ux maxCos 1) 1 (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (neg.f64 (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4)))) (fma.f64 (neg.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux))) (pow.f64 ux 1/4) (*.f64 (*.f64 (pow.f64 ux 1/4) (sqrt.f64 ux)) (pow.f64 ux 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (fma.f64 ux maxCos 1) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 ux maxCos 1) 1 (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (neg.f64 (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4)))) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 3/4) (*.f64 (pow.f64 ux 1/4) (pow.f64 ux 3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (fma.f64 ux maxCos 1) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 ux maxCos 1) 1 (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (neg.f64 (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux))))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)) (*.f64 (pow.f64 ux 1/6) (*.f64 (sqrt.f64 ux) (cbrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 ux maxCos 1) ux))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 ux maxCos 1) ux)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (fma.f64 ux maxCos 1) ux))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2) (-.f64 (fma.f64 ux maxCos 1) ux))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (-.f64 (fma.f64 ux maxCos 1) ux)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (-.f64 (fma.f64 ux maxCos 1) ux)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (*.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (*.f64 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (fma.f64 ux maxCos 1) ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (fma.f64 ux maxCos 1) ux)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (fma.f64 ux ux (*.f64 (fma.f64 ux maxCos 1) ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux)) (+.f64 (fma.f64 ux maxCos 1) ux))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (fma.f64 ux maxCos 1) ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (fma.f64 ux maxCos 1))) (exp.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (fma.f64 ux maxCos 1)) (+.f64 1 (expm1.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (fma.f64 ux maxCos 1))) (+.f64 1 (expm1.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 ux maxCos (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 maxCos ux (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 ux maxCos 1) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 ux maxCos 1) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 ux maxCos 1) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 ux maxCos 1) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 ux maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos 1) 1 (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos 1) 1 (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos 1) 1 (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos 1) 1 (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (*.f64 (neg.f64 (sqrt.f64 ux)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (*.f64 (sqrt.f64 ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 ux) (*.f64 (sqrt.f64 ux) maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (neg.f64 (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 ux) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (*.f64 (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (*.f64 (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (*.f64 (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 ux maxCos 1) 2)) (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 ux ux)) (*.f64 (cbrt.f64 ux) maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (*.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1 (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1 (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1 (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 ux maxCos)) 2) (cbrt.f64 (*.f64 ux maxCos)) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 ux maxCos)) (sqrt.f64 (*.f64 ux maxCos)) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 ux) (sqrt.f64 maxCos)) (*.f64 (sqrt.f64 ux) (sqrt.f64 maxCos)) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 ux (cbrt.f64 (*.f64 maxCos maxCos))) (cbrt.f64 maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 ux (sqrt.f64 maxCos)) (sqrt.f64 maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (*.f64 (neg.f64 (cbrt.f64 (*.f64 ux ux))) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (*.f64 ux ux)) ux))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (sqrt.f64 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 -1 (sqrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (cbrt.f64 ux)) (pow.f64 ux 1/6) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (pow.f64 1 1/2) (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) 1 (neg.f64 (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (pow.f64 1 1/2) (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (neg.f64 (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (pow.f64 1 1/2) (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (pow.f64 1 1/2) (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (pow.f64 1 1/2) (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) (pow.f64 1 1/2) (*.f64 (sqrt.f64 ux) (pow.f64 1 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (/.f64 1 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (/.f64 1 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (neg.f64 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 (neg.f64 (sqrt.f64 ux)) 3)) (+.f64 (fma.f64 ux maxCos 1) (-.f64 (pow.f64 (neg.f64 (sqrt.f64 ux)) 2) (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 ux maxCos 1) (pow.f64 (neg.f64 (sqrt.f64 ux)) 2)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (fma.f64 ux maxCos 1) ux)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))) (exp.f64 (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (fma.f64 ux maxCos 1))) (+.f64 1 (expm1.f64 (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))) (+.f64 1 (expm1.f64 (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))) (exp.f64 (neg.f64 (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))) (/.f64 1 (exp.f64 (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (sqrt.f64 ux))) (exp.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (sqrt.f64 ux))) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (sqrt.f64 ux))) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (sqrt.f64 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) 1 (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) 1 (*.f64 (neg.f64 (sqrt.f64 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1 (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1 (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1 (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (*.f64 (neg.f64 (sqrt.f64 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 ux) (neg.f64 (pow.f64 ux 1/6)) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (sqrt.f64 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (neg.f64 (sqrt.f64 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 ux 1/4) (neg.f64 (pow.f64 ux 1/4)) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (/.f64 1 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (/.f64 1 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (/.f64 1 (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (/.f64 1 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (/.f64 1 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (/.f64 1 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (sqrt.f64 ux))) 2) (cbrt.f64 (neg.f64 (sqrt.f64 ux))) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (sqrt.f64 ux))) (sqrt.f64 (neg.f64 (sqrt.f64 ux))) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 1/4) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 ux)) (pow.f64 ux 1/6) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (sqrt.f64 ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sqrt.f64 ux) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (fma.f64 (neg.f64 (pow.f64 ux 1/6)) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (+.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 ux maxCos 1) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (/.f64 ux (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2)) (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (/.f64 1 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (/.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 ux (-.f64 (fma.f64 ux maxCos 1) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (neg.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 ux (fma.f64 ux maxCos 1)) (-.f64 (sqrt.f64 ux) (sqrt.f64 (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (fma.f64 ux maxCos 1) ux)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))) (exp.f64 (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 (fma.f64 ux maxCos 1))) (+.f64 1 (expm1.f64 (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))) (+.f64 1 (expm1.f64 (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 ux))) (exp.f64 (sqrt.f64 (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 ux)) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 ux))) (+.f64 1 (expm1.f64 (sqrt.f64 (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 ux) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) 1 (sqrt.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 ux) 1 (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (pow.f64 (fma.f64 ux maxCos 1) 1/6) (sqrt.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 ux) (pow.f64 ux 1/6) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/6) (cbrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 ux 1/6) (cbrt.f64 ux) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 ux 1/4) (pow.f64 ux 1/4) (sqrt.f64 (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 ux) (sqrt.f64 (fma.f64 ux maxCos 1)))))))"]],"rules":[["egg-rr",54],["egg-rr",107],["egg-rr",191]],"stop":[["node limit",1]],"time":71.4599609375,"type":"rewrite"},{"count":[[368,378]],"egraph":[[4,7661,361,0.036672709],[3,4795,361,0.020721958999999998],[2,871,388,0.007848834],[1,217,420,0.001581376],[0,67,451,0.000321167]],"inputs":[["1","(+.f64 1 (*.f64 maxCos ux))","(*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)))","(+.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 (+.f64 1 (sqrt.f64 ux)) ux)) (*.f64 1/2 (*.f64 (-.f64 1 (sqrt.f64 ux)) ux))) maxCos) (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))))","(+.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 (+.f64 1 (sqrt.f64 ux)) ux)) (*.f64 1/2 (*.f64 (-.f64 1 (sqrt.f64 ux)) ux))) maxCos) (+.f64 (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))) (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/4 (pow.f64 ux 2)) (+.f64 (*.f64 -1/8 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2))) (*.f64 -1/8 (*.f64 (-.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2))))))))","(+.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 (+.f64 1 (sqrt.f64 ux)) ux)) (*.f64 1/2 (*.f64 (-.f64 1 (sqrt.f64 ux)) ux))) maxCos) (+.f64 (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 1/16 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 3))) (+.f64 (*.f64 1/16 (*.f64 (-.f64 1 (sqrt.f64 ux)) (pow.f64 ux 3))) (*.f64 -1/8 (pow.f64 ux 3))))) (+.f64 (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))) (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/4 (pow.f64 ux 2)) (+.f64 (*.f64 -1/8 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2))) (*.f64 -1/8 (*.f64 (-.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2)))))))))","1","(-.f64 1 (sqrt.f64 ux))","(-.f64 (+.f64 1 (*.f64 1/2 (*.f64 maxCos ux))) (sqrt.f64 ux))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (sqrt.f64 ux))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3))) (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))))) (sqrt.f64 ux))","1","(+.f64 (sqrt.f64 ux) 1)","(+.f64 1 (+.f64 (sqrt.f64 ux) (*.f64 1/2 (*.f64 maxCos ux))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3))) (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 maxCos ux))","(fma.f64 maxCos ux 1)","(*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)))","(+.f64 (-.f64 1 (sqrt.f64 ux)) (-.f64 (sqrt.f64 ux) ux))","(+.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 (+.f64 1 (sqrt.f64 ux)) ux)) (*.f64 1/2 (*.f64 (-.f64 1 (sqrt.f64 ux)) ux))) maxCos) (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))))","(fma.f64 (*.f64 1/2 (+.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (*.f64 ux (-.f64 1 (sqrt.f64 ux))))) maxCos (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))))","(fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 1/2 (*.f64 (*.f64 ux (+.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (sqrt.f64 ux)))) maxCos)))","(fma.f64 maxCos (*.f64 ux (fma.f64 (-.f64 1 (sqrt.f64 ux)) 1/2 (fma.f64 (sqrt.f64 ux) 1/2 1/2))) (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))))","(fma.f64 maxCos (*.f64 ux (*.f64 1/2 (+.f64 (sqrt.f64 ux) (-.f64 2 (sqrt.f64 ux))))) (+.f64 (-.f64 1 (sqrt.f64 ux)) (-.f64 (sqrt.f64 ux) ux)))","(+.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 (+.f64 1 (sqrt.f64 ux)) ux)) (*.f64 1/2 (*.f64 (-.f64 1 (sqrt.f64 ux)) ux))) maxCos) (+.f64 (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))) (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/4 (pow.f64 ux 2)) (+.f64 (*.f64 -1/8 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2))) (*.f64 -1/8 (*.f64 (-.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2))))))))","(fma.f64 (*.f64 1/2 (+.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (*.f64 ux (-.f64 1 (sqrt.f64 ux))))) maxCos (fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 maxCos maxCos) (fma.f64 1/4 (*.f64 ux ux) (*.f64 -1/8 (+.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (*.f64 ux ux)) (*.f64 (-.f64 1 (sqrt.f64 ux)) (*.f64 ux ux))))))))","(fma.f64 maxCos (*.f64 1/2 (*.f64 ux (+.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (sqrt.f64 ux))))) (fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 maxCos maxCos) (fma.f64 1/4 (*.f64 ux ux) (*.f64 -1/8 (*.f64 (*.f64 ux ux) (+.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (sqrt.f64 ux)))))))))","(fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 maxCos (+.f64 (*.f64 maxCos (*.f64 (*.f64 ux ux) (+.f64 1/4 (fma.f64 (-.f64 1 (sqrt.f64 ux)) -1/8 (fma.f64 (sqrt.f64 ux) -1/8 -1/8))))) (*.f64 ux (fma.f64 (-.f64 1 (sqrt.f64 ux)) 1/2 (fma.f64 (sqrt.f64 ux) 1/2 1/2))))))","(+.f64 (fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 ux (*.f64 ux (*.f64 maxCos (*.f64 maxCos 1/4))))) (*.f64 (+.f64 (sqrt.f64 ux) (-.f64 2 (sqrt.f64 ux))) (*.f64 (*.f64 maxCos ux) (+.f64 1/2 (*.f64 -1/8 (*.f64 maxCos ux))))))","(+.f64 (*.f64 (+.f64 (*.f64 1/2 (*.f64 (+.f64 1 (sqrt.f64 ux)) ux)) (*.f64 1/2 (*.f64 (-.f64 1 (sqrt.f64 ux)) ux))) maxCos) (+.f64 (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 1/16 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 3))) (+.f64 (*.f64 1/16 (*.f64 (-.f64 1 (sqrt.f64 ux)) (pow.f64 ux 3))) (*.f64 -1/8 (pow.f64 ux 3))))) (+.f64 (*.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux))) (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/4 (pow.f64 ux 2)) (+.f64 (*.f64 -1/8 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2))) (*.f64 -1/8 (*.f64 (-.f64 1 (sqrt.f64 ux)) (pow.f64 ux 2)))))))))","(fma.f64 (*.f64 1/2 (+.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (*.f64 ux (-.f64 1 (sqrt.f64 ux))))) maxCos (fma.f64 (pow.f64 maxCos 3) (fma.f64 1/16 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 3)) (fma.f64 1/16 (*.f64 (-.f64 1 (sqrt.f64 ux)) (pow.f64 ux 3)) (*.f64 -1/8 (pow.f64 ux 3)))) (fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 maxCos maxCos) (fma.f64 1/4 (*.f64 ux ux) (*.f64 -1/8 (+.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (*.f64 ux ux)) (*.f64 (-.f64 1 (sqrt.f64 ux)) (*.f64 ux ux)))))))))","(fma.f64 maxCos (*.f64 1/2 (*.f64 ux (+.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (sqrt.f64 ux))))) (fma.f64 (pow.f64 maxCos 3) (fma.f64 1/16 (*.f64 (+.f64 1 (sqrt.f64 ux)) (pow.f64 ux 3)) (*.f64 (pow.f64 ux 3) (+.f64 (*.f64 (-.f64 1 (sqrt.f64 ux)) 1/16) -1/8))) (fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 maxCos maxCos) (fma.f64 1/4 (*.f64 ux ux) (*.f64 -1/8 (*.f64 (*.f64 ux ux) (+.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (sqrt.f64 ux))))))))))","(fma.f64 (pow.f64 maxCos 3) (*.f64 (pow.f64 ux 3) (+.f64 (fma.f64 (sqrt.f64 ux) 1/16 1/16) (+.f64 -1/16 (*.f64 -1/16 (sqrt.f64 ux))))) (fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 maxCos (+.f64 (*.f64 maxCos (*.f64 (*.f64 ux ux) (+.f64 1/4 (fma.f64 (-.f64 1 (sqrt.f64 ux)) -1/8 (fma.f64 (sqrt.f64 ux) -1/8 -1/8))))) (*.f64 ux (fma.f64 (-.f64 1 (sqrt.f64 ux)) 1/2 (fma.f64 (sqrt.f64 ux) 1/2 1/2)))))))","(fma.f64 (pow.f64 maxCos 3) (*.f64 (pow.f64 ux 3) (+.f64 -1/8 (*.f64 1/16 (+.f64 (sqrt.f64 ux) (-.f64 2 (sqrt.f64 ux)))))) (+.f64 (fma.f64 (-.f64 1 (sqrt.f64 ux)) (+.f64 1 (sqrt.f64 ux)) (*.f64 ux (*.f64 ux (*.f64 maxCos (*.f64 maxCos 1/4))))) (*.f64 (+.f64 (sqrt.f64 ux) (-.f64 2 (sqrt.f64 ux))) (*.f64 (*.f64 maxCos ux) (+.f64 1/2 (*.f64 -1/8 (*.f64 maxCos ux)))))))","1","(-.f64 1 (sqrt.f64 ux))","(-.f64 (+.f64 1 (*.f64 1/2 (*.f64 maxCos ux))) (sqrt.f64 ux))","(+.f64 1 (-.f64 (*.f64 (*.f64 maxCos ux) 1/2) (sqrt.f64 ux)))","(-.f64 (fma.f64 (*.f64 maxCos ux) 1/2 1) (sqrt.f64 ux))","(-.f64 (fma.f64 ux (*.f64 maxCos 1/2) 1) (sqrt.f64 ux))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))) (sqrt.f64 ux))","(+.f64 1 (-.f64 (fma.f64 1/2 (*.f64 maxCos ux) (*.f64 (*.f64 -1/8 (*.f64 maxCos maxCos)) (*.f64 ux ux))) (sqrt.f64 ux)))","(+.f64 1 (-.f64 (fma.f64 (*.f64 maxCos ux) 1/2 (*.f64 (*.f64 ux ux) (*.f64 (*.f64 maxCos maxCos) -1/8))) (sqrt.f64 ux)))","(-.f64 (fma.f64 (*.f64 maxCos maxCos) (*.f64 ux (*.f64 ux -1/8)) (fma.f64 ux (*.f64 maxCos 1/2) 1)) (sqrt.f64 ux))","(+.f64 (-.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 maxCos ux) (+.f64 1/2 (*.f64 -1/8 (*.f64 maxCos ux)))))","(-.f64 (+.f64 1 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3))) (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))))) (sqrt.f64 ux))","(+.f64 1 (-.f64 (fma.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3)) (fma.f64 1/2 (*.f64 maxCos ux) (*.f64 (*.f64 -1/8 (*.f64 maxCos maxCos)) (*.f64 ux ux)))) (sqrt.f64 ux)))","(+.f64 1 (-.f64 (fma.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3)) (fma.f64 (*.f64 maxCos ux) 1/2 (*.f64 (*.f64 ux ux) (*.f64 (*.f64 maxCos maxCos) -1/8)))) (sqrt.f64 ux)))","(-.f64 (fma.f64 (pow.f64 maxCos 3) (*.f64 1/16 (pow.f64 ux 3)) (fma.f64 (*.f64 maxCos maxCos) (*.f64 ux (*.f64 ux -1/8)) (fma.f64 ux (*.f64 maxCos 1/2) 1))) (sqrt.f64 ux))","(+.f64 (-.f64 1 (sqrt.f64 ux)) (fma.f64 (pow.f64 maxCos 3) (*.f64 1/16 (pow.f64 ux 3)) (*.f64 (*.f64 maxCos ux) (+.f64 1/2 (*.f64 -1/8 (*.f64 maxCos ux))))))","1","(+.f64 (sqrt.f64 ux) 1)","(+.f64 1 (sqrt.f64 ux))","(+.f64 1 (+.f64 (sqrt.f64 ux) (*.f64 1/2 (*.f64 maxCos ux))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (*.f64 (*.f64 maxCos ux) 1/2)))","(+.f64 1 (fma.f64 (*.f64 maxCos ux) 1/2 (sqrt.f64 ux)))","(+.f64 (sqrt.f64 ux) (fma.f64 ux (*.f64 maxCos 1/2) 1))","(+.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (fma.f64 1/2 (*.f64 maxCos ux) (*.f64 (*.f64 -1/8 (*.f64 maxCos maxCos)) (*.f64 ux ux)))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (fma.f64 (*.f64 maxCos ux) 1/2 (*.f64 (*.f64 ux ux) (*.f64 (*.f64 maxCos maxCos) -1/8)))))","(+.f64 (sqrt.f64 ux) (fma.f64 (*.f64 maxCos maxCos) (*.f64 ux (*.f64 ux -1/8)) (fma.f64 ux (*.f64 maxCos 1/2) 1)))","(+.f64 1 (+.f64 (sqrt.f64 ux) (*.f64 (*.f64 maxCos ux) (+.f64 1/2 (*.f64 -1/8 (*.f64 maxCos ux))))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3))) (+.f64 (*.f64 1/2 (*.f64 maxCos ux)) (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))))))","(+.f64 (+.f64 1 (sqrt.f64 ux)) (fma.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3)) (fma.f64 1/2 (*.f64 maxCos ux) (*.f64 (*.f64 -1/8 (*.f64 maxCos maxCos)) (*.f64 ux ux)))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (fma.f64 1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 3)) (fma.f64 (*.f64 maxCos ux) 1/2 (*.f64 (*.f64 ux ux) (*.f64 (*.f64 maxCos maxCos) -1/8))))))","(+.f64 (fma.f64 (*.f64 maxCos maxCos) (*.f64 ux (*.f64 ux -1/8)) (fma.f64 ux (*.f64 maxCos 1/2) 1)) (fma.f64 (pow.f64 maxCos 3) (*.f64 1/16 (pow.f64 ux 3)) (sqrt.f64 ux)))","(+.f64 (*.f64 (*.f64 maxCos ux) (+.f64 1/2 (*.f64 -1/8 (*.f64 maxCos ux)))) (+.f64 1 (fma.f64 (pow.f64 ux 3) (*.f64 (pow.f64 maxCos 3) 1/16) (sqrt.f64 ux))))"]],"stop":[["node limit",1]],"time":57.843017578125,"type":"simplify"},{"compiler":[[9896,5594]],"time":105.537841796875,"type":"eval"},{"alts":[["(-.f64 (fma.f64 ux maxCos 1) ux)","done",0.01953125],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","fresh",0.49580004884221013],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","done",0.47103500976844204],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","next",0.2578125]],"compiler":[[9,6],[37,25],[20,13],[25,17],[37,25],[25,17]],"count":[[381,4]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[378,2],"picked":[1,1]}],"min-error":[0],"time":193.959228515625,"type":"prune"},{"compiler":[[70,41]],"locations":[["(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))",0.10546875,true],["(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))",0.1328125,true],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))",0.296875,true],["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)",0.4296875,true]],"time":17.618896484375,"type":"localize"},{"count":[[4,50]],"series":[["(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))","maxCos","-inf",0.17919921875],["(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))","maxCos","inf",0.1689453125],["(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))","maxCos","0",0.43896484375],["(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))","ux","-inf",0.18505859375],["(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))","ux","inf",0.1669921875],["(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))","ux","0",0.2509765625],["(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))","maxCos","-inf",0.22314453125],["(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))","maxCos","inf",0.239990234375],["(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))","maxCos","0",0.487060546875],["(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))","ux","-inf",0.22509765625],["(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))","ux","inf",0.2431640625],["(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))","ux","0",0.299072265625],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","maxCos","-inf",0.326904296875],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","maxCos","inf",0.373046875],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","maxCos","0",2.2060546875],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","ux","-inf",0.43212890625],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","ux","inf",1.223876953125],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","ux","0",1.013916015625],["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)","maxCos","-inf",0.291015625],["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)","maxCos","inf",0.278076171875],["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)","maxCos","0",0.301025390625],["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)","ux","-inf",0.33203125],["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)","ux","inf",0.2587890625],["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)","ux","0",0.37109375]],"time":10.904052734375,"type":"series"},{"count":[[4,133]],"egraph":[[2,3338,42,0.023274083],[1,266,42,0.004591292],[0,13,66,0.000358708]],"inputs":[["(pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)","(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","(cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))","(cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (fma.f64 ux ux (*.f64 ux ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (+.f64 ux ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 (+.f64 ux ux) (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 ux maxCos 1) (+.f64 ux (fma.f64 ux maxCos 1))) (*.f64 ux (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (fma.f64 ux maxCos 1)) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) ux))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)) (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)) 1) (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))) (*.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) 3) (pow.f64 (*.f64 ux ux) 3)) (+.f64 (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (pow.f64 (fma.f64 ux maxCos 1) 2)) (+.f64 (*.f64 (*.f64 ux ux) (*.f64 ux ux)) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (pow.f64 (fma.f64 ux maxCos 1) 2)) (*.f64 (*.f64 ux ux) (*.f64 ux ux))) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (+.f64 ux (fma.f64 ux maxCos 1))) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos 1) (fma.f64 ux maxCos 1) (*.f64 ux ux))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 ux (fma.f64 ux maxCos 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) ux)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (+.f64 ux ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (fma.f64 (neg.f64 (cbrt.f64 ux)) (pow.f64 (cbrt.f64 ux) 2) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 ux ux) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 ux maxCos) (+.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 ux maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 ux (fma.f64 ux maxCos 1)) ux) ux)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 ux maxCos 1) ux)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))) (/.f64 (pow.f64 ux 3) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (+.f64 ux (fma.f64 ux maxCos 1))) (/.f64 (*.f64 ux ux) (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 ux maxCos 1) 0) ux)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (/.f64 1 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) (*.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (/.f64 1 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) (*.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (cbrt.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6)) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (-.f64 (*.f64 ux ux) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))) (neg.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)) (neg.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (+.f64 ux ux) 3)) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (-.f64 (pow.f64 (+.f64 ux ux) 2) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (+.f64 ux ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (pow.f64 (+.f64 ux ux) 2)) (-.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (+.f64 ux ux)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) (*.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)) 1/3) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (cbrt.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2)) (cbrt.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 4)))) (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 1/3) (pow.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3))) (cbrt.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1)))))))))"]],"rules":[["egg-rr",24],["egg-rr",23],["egg-rr",50],["egg-rr",36]],"stop":[["node limit",1]],"time":52.89892578125,"type":"rewrite"},{"count":[[183,201]],"egraph":[[2,3110,2164,0.020008791999999997],[1,794,2248,0.006254417],[0,237,2393,0.001256458]],"inputs":[["1","(+.f64 1 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))","(+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2)))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(pow.f64 (-.f64 1 ux) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (pow.f64 (-.f64 1 ux) 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","1","(+.f64 1 (*.f64 (+.f64 (*.f64 1/3 (-.f64 maxCos 1)) (*.f64 1/3 (-.f64 (*.f64 2 maxCos) 2))) ux))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2)))) (+.f64 (*.f64 -1/9 (pow.f64 (-.f64 maxCos 1) 2)) (*.f64 1/9 (*.f64 (-.f64 maxCos 1) (-.f64 (*.f64 2 maxCos) 2))))) (pow.f64 ux 2)) (+.f64 1 (*.f64 (+.f64 (*.f64 1/3 (-.f64 maxCos 1)) (*.f64 1/3 (-.f64 (*.f64 2 maxCos) 2))) ux)))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2)))) (+.f64 (*.f64 -1/9 (pow.f64 (-.f64 maxCos 1) 2)) (*.f64 1/9 (*.f64 (-.f64 maxCos 1) (-.f64 (*.f64 2 maxCos) 2))))) (pow.f64 ux 2)) (+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (-.f64 (*.f64 2 maxCos) 2))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 1/27 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 3)) (*.f64 2/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (-.f64 (*.f64 2 maxCos) 2))))) (+.f64 (*.f64 1/9 (*.f64 (-.f64 maxCos 1) (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))))) (*.f64 -1/3 (+.f64 (*.f64 1/27 (pow.f64 (-.f64 maxCos 1) 3)) (*.f64 -2/9 (pow.f64 (-.f64 maxCos 1) 3))))))) (pow.f64 ux 3)) (*.f64 (+.f64 (*.f64 1/3 (-.f64 maxCos 1)) (*.f64 1/3 (-.f64 (*.f64 2 maxCos) 2))) ux))))","(+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 (*.f64 -1 ux) ux))","(+.f64 (*.f64 -1 ux) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 ux (*.f64 maxCos (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/9) ux)) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 8)) 1/9) ux)))))))","(+.f64 (*.f64 -1 ux) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 ux (+.f64 (*.f64 maxCos (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/9) ux)) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 8)) 1/9) ux)))) (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))) (-.f64 1 ux)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (pow.f64 ux 2))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (-.f64 1 ux) 1/3) (pow.f64 ux 2)))))))))))","(+.f64 (*.f64 -1 ux) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 ux (+.f64 (*.f64 maxCos (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/9) ux)) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 8)) 1/9) ux)))) (+.f64 (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))) (-.f64 1 ux)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (pow.f64 ux 2))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (-.f64 1 ux) 1/3) (pow.f64 ux 2))))))) (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3)))))) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/9) (*.f64 ux (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2))))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (+.f64 (*.f64 8/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/3) (pow.f64 ux 3))) (*.f64 4/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (*.f64 ux (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))))))) (-.f64 1 ux)))) (*.f64 -2/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (pow.f64 ux 3)))))) (pow.f64 maxCos 3)))))))","(+.f64 (*.f64 -1 ux) ux)","(+.f64 (*.f64 -1 ux) ux)","1","(+.f64 1 (*.f64 1/3 (*.f64 ux (-.f64 (*.f64 2 maxCos) 2))))","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 ux (-.f64 (*.f64 2 maxCos) 2))) (*.f64 1/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (pow.f64 ux 2)))))","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 ux (-.f64 (*.f64 2 maxCos) 2))) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (pow.f64 ux 2))) (*.f64 -1/3 (*.f64 (pow.f64 ux 3) (+.f64 (*.f64 1/27 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 3)) (*.f64 2/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (-.f64 (*.f64 2 maxCos) 2)))))))))","(pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3)","(+.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/9) (*.f64 maxCos ux))))","(+.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/9) (*.f64 maxCos ux))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/3) (*.f64 (pow.f64 maxCos 2) (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))))))))","(+.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/9) (*.f64 maxCos ux))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/3) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 8/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/3) (pow.f64 ux 3))) (*.f64 4/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (*.f64 ux (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2))))))))))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/3) (*.f64 (pow.f64 maxCos 2) (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2))))))))))","1","(+.f64 1 (*.f64 1/3 (*.f64 (-.f64 maxCos 1) ux)))","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 (-.f64 maxCos 1) ux)) (*.f64 -1/9 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 (-.f64 maxCos 1) ux)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 ux 3) (+.f64 (*.f64 1/27 (pow.f64 (-.f64 maxCos 1) 3)) (*.f64 -2/9 (pow.f64 (-.f64 maxCos 1) 3))))) (*.f64 -1/9 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(pow.f64 (-.f64 1 ux) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (*.f64 maxCos ux))) (pow.f64 (-.f64 1 ux) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (*.f64 maxCos ux))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/9) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))) (pow.f64 (-.f64 1 ux) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (*.f64 maxCos ux))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3))))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/9) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))) (pow.f64 (-.f64 1 ux) 1/3))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux))","(+.f64 1 (*.f64 (fma.f64 2 maxCos -2) ux))","(fma.f64 (fma.f64 2 maxCos -2) ux 1)","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 (fma.f64 2 maxCos -2) ux (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux))))","(+.f64 1 (*.f64 ux (+.f64 (*.f64 ux (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 2 maxCos -2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 (fma.f64 2 maxCos -2) ux (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux))))","(+.f64 1 (*.f64 ux (+.f64 (*.f64 ux (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 2 maxCos -2))))","(*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))","(*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux))","(*.f64 ux (*.f64 ux (pow.f64 (+.f64 maxCos -1) 2)))","(+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))","(fma.f64 (fma.f64 2 maxCos -2) ux (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux)))","(*.f64 ux (+.f64 (*.f64 ux (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 2 maxCos -2)))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 (fma.f64 2 maxCos -2) ux (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux))))","(+.f64 1 (*.f64 ux (+.f64 (*.f64 ux (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 2 maxCos -2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (*.f64 2 maxCos) 2) ux) (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))","(+.f64 1 (fma.f64 (fma.f64 2 maxCos -2) ux (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux))))","(+.f64 1 (*.f64 ux (+.f64 (*.f64 ux (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 2 maxCos -2))))","(*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))","(*.f64 (*.f64 ux ux) (pow.f64 (+.f64 1 (neg.f64 maxCos)) 2))","(*.f64 (*.f64 ux ux) (pow.f64 (-.f64 1 maxCos) 2))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2)))","(fma.f64 -1 (*.f64 ux (fma.f64 -2 maxCos 2)) (*.f64 (*.f64 ux ux) (pow.f64 (+.f64 1 (neg.f64 maxCos)) 2)))","(fma.f64 (*.f64 ux ux) (pow.f64 (-.f64 1 maxCos) 2) (*.f64 (fma.f64 maxCos -2 2) (neg.f64 ux)))","(*.f64 ux (-.f64 (*.f64 (pow.f64 (-.f64 1 maxCos) 2) ux) (fma.f64 maxCos -2 2)))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 1 (fma.f64 -1 (*.f64 ux (fma.f64 -2 maxCos 2)) (*.f64 (*.f64 ux ux) (pow.f64 (+.f64 1 (neg.f64 maxCos)) 2))))","(+.f64 1 (fma.f64 (*.f64 ux ux) (pow.f64 (-.f64 1 maxCos) 2) (*.f64 (fma.f64 maxCos -2 2) (neg.f64 ux))))","(+.f64 1 (*.f64 ux (-.f64 (*.f64 (pow.f64 (-.f64 1 maxCos) 2) ux) (fma.f64 maxCos -2 2))))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -2 maxCos) 2) ux)) (*.f64 (pow.f64 ux 2) (pow.f64 (+.f64 1 (*.f64 -1 maxCos)) 2))))","(+.f64 1 (fma.f64 -1 (*.f64 ux (fma.f64 -2 maxCos 2)) (*.f64 (*.f64 ux ux) (pow.f64 (+.f64 1 (neg.f64 maxCos)) 2))))","(+.f64 1 (fma.f64 (*.f64 ux ux) (pow.f64 (-.f64 1 maxCos) 2) (*.f64 (fma.f64 maxCos -2 2) (neg.f64 ux))))","(+.f64 1 (*.f64 ux (-.f64 (*.f64 (pow.f64 (-.f64 1 maxCos) 2) ux) (fma.f64 maxCos -2 2))))","(pow.f64 (-.f64 1 ux) 2)","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (pow.f64 (-.f64 1 ux) 2))","(fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (pow.f64 (-.f64 1 ux) 2))","(fma.f64 2 (*.f64 maxCos (*.f64 ux (-.f64 1 ux))) (pow.f64 (-.f64 1 ux) 2))","(*.f64 (-.f64 1 ux) (+.f64 (-.f64 1 ux) (*.f64 2 (*.f64 maxCos ux))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (pow.f64 (-.f64 1 ux) 2)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (fma.f64 (*.f64 ux ux) (*.f64 maxCos maxCos) (pow.f64 (-.f64 1 ux) 2)))","(+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (pow.f64 (-.f64 1 ux) 2)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (fma.f64 (*.f64 ux ux) (*.f64 maxCos maxCos) (pow.f64 (-.f64 1 ux) 2)))","(+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux))))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos))","(*.f64 maxCos (*.f64 maxCos (*.f64 ux ux)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 2 (*.f64 maxCos (*.f64 ux (-.f64 1 ux))) (*.f64 maxCos (*.f64 maxCos (*.f64 ux ux))))","(*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (pow.f64 (-.f64 1 ux) 2)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (fma.f64 (*.f64 ux ux) (*.f64 maxCos maxCos) (pow.f64 (-.f64 1 ux) 2)))","(+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (pow.f64 (-.f64 1 ux) 2)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (fma.f64 (*.f64 ux ux) (*.f64 maxCos maxCos) (pow.f64 (-.f64 1 ux) 2)))","(+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux))))","(*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))","(*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos))","(*.f64 maxCos (*.f64 maxCos (*.f64 ux ux)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))","(fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 2 (*.f64 maxCos (*.f64 ux (-.f64 1 ux))) (*.f64 maxCos (*.f64 maxCos (*.f64 ux ux))))","(*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux)))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (pow.f64 (-.f64 1 ux) 2)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (fma.f64 (*.f64 ux ux) (*.f64 maxCos maxCos) (pow.f64 (-.f64 1 ux) 2)))","(+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux))))","(+.f64 (*.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux))) (+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2))))","(+.f64 (fma.f64 2 (*.f64 (-.f64 1 ux) (*.f64 maxCos ux)) (pow.f64 (-.f64 1 ux) 2)) (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)))","(fma.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux) (fma.f64 (*.f64 ux ux) (*.f64 maxCos maxCos) (pow.f64 (-.f64 1 ux) 2)))","(+.f64 (pow.f64 (-.f64 1 ux) 2) (*.f64 (*.f64 maxCos ux) (+.f64 (*.f64 2 (-.f64 1 ux)) (*.f64 maxCos ux))))","1","(+.f64 1 (*.f64 (+.f64 (*.f64 1/3 (-.f64 maxCos 1)) (*.f64 1/3 (-.f64 (*.f64 2 maxCos) 2))) ux))","(+.f64 1 (*.f64 ux (*.f64 1/3 (+.f64 (+.f64 maxCos -1) (fma.f64 2 maxCos -2)))))","(fma.f64 ux (*.f64 1/3 (+.f64 maxCos (+.f64 -1 (fma.f64 2 maxCos -2)))) 1)","(fma.f64 ux (*.f64 1/3 (+.f64 maxCos (+.f64 -3 (*.f64 2 maxCos)))) 1)","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2)))) (+.f64 (*.f64 -1/9 (pow.f64 (-.f64 maxCos 1) 2)) (*.f64 1/9 (*.f64 (-.f64 maxCos 1) (-.f64 (*.f64 2 maxCos) 2))))) (pow.f64 ux 2)) (+.f64 1 (*.f64 (+.f64 (*.f64 1/3 (-.f64 maxCos 1)) (*.f64 1/3 (-.f64 (*.f64 2 maxCos) 2))) ux)))","(fma.f64 (fma.f64 1/3 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 -1/3 (pow.f64 (fma.f64 2 maxCos -2) 2))) (fma.f64 -1/9 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 1/9 (*.f64 (fma.f64 2 maxCos -2) (+.f64 maxCos -1))))) (*.f64 ux ux) (+.f64 1 (*.f64 ux (*.f64 1/3 (+.f64 (+.f64 maxCos -1) (fma.f64 2 maxCos -2))))))","(fma.f64 (*.f64 ux ux) (fma.f64 1/3 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (fma.f64 (pow.f64 (+.f64 maxCos -1) 2) -1/9 (*.f64 (fma.f64 2 maxCos -2) (+.f64 (*.f64 maxCos 1/9) -1/9)))) (fma.f64 ux (*.f64 1/3 (+.f64 maxCos (+.f64 -1 (fma.f64 2 maxCos -2)))) 1))","(fma.f64 (*.f64 ux ux) (fma.f64 1/3 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (*.f64 (+.f64 maxCos -1) (+.f64 (+.f64 1/9 (*.f64 maxCos -1/9)) (*.f64 1/9 (fma.f64 2 maxCos -2))))) (fma.f64 ux (*.f64 1/3 (+.f64 maxCos (+.f64 -3 (*.f64 2 maxCos)))) 1))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2)))) (+.f64 (*.f64 -1/9 (pow.f64 (-.f64 maxCos 1) 2)) (*.f64 1/9 (*.f64 (-.f64 maxCos 1) (-.f64 (*.f64 2 maxCos) 2))))) (pow.f64 ux 2)) (+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 -1/27 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (-.f64 (*.f64 2 maxCos) 2))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 1/27 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 3)) (*.f64 2/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (-.f64 (*.f64 2 maxCos) 2))))) (+.f64 (*.f64 1/9 (*.f64 (-.f64 maxCos 1) (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))))) (*.f64 -1/3 (+.f64 (*.f64 1/27 (pow.f64 (-.f64 maxCos 1) 3)) (*.f64 -2/9 (pow.f64 (-.f64 maxCos 1) 3))))))) (pow.f64 ux 3)) (*.f64 (+.f64 (*.f64 1/3 (-.f64 maxCos 1)) (*.f64 1/3 (-.f64 (*.f64 2 maxCos) 2))) ux))))","(fma.f64 (fma.f64 1/3 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 -1/3 (pow.f64 (fma.f64 2 maxCos -2) 2))) (fma.f64 -1/9 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 1/9 (*.f64 (fma.f64 2 maxCos -2) (+.f64 maxCos -1))))) (*.f64 ux ux) (+.f64 1 (fma.f64 (fma.f64 -1/27 (*.f64 (fma.f64 2 maxCos -2) (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 -1/3 (fma.f64 1/27 (pow.f64 (fma.f64 2 maxCos -2) 3) (*.f64 2/3 (*.f64 (fma.f64 2 maxCos -2) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 -1/3 (pow.f64 (fma.f64 2 maxCos -2) 2)))))) (fma.f64 1/9 (*.f64 (+.f64 maxCos -1) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 -1/3 (pow.f64 (fma.f64 2 maxCos -2) 2)))) (*.f64 -1/3 (*.f64 (pow.f64 (+.f64 maxCos -1) 3) -5/27))))) (pow.f64 ux 3) (*.f64 ux (*.f64 1/3 (+.f64 (+.f64 maxCos -1) (fma.f64 2 maxCos -2)))))))","(+.f64 (fma.f64 (*.f64 ux ux) (fma.f64 1/3 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (fma.f64 (pow.f64 (+.f64 maxCos -1) 2) -1/9 (*.f64 (fma.f64 2 maxCos -2) (+.f64 (*.f64 maxCos 1/9) -1/9)))) (fma.f64 ux (*.f64 1/3 (+.f64 maxCos (+.f64 -1 (fma.f64 2 maxCos -2)))) 1)) (*.f64 (fma.f64 -1/27 (*.f64 (fma.f64 2 maxCos -2) (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 -1/3 (fma.f64 1/27 (pow.f64 (fma.f64 2 maxCos -2) 3) (*.f64 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (*.f64 (fma.f64 2 maxCos -2) 2/3))) (fma.f64 (+.f64 (*.f64 maxCos 1/9) -1/9) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (*.f64 (pow.f64 (+.f64 maxCos -1) 3) 5/81)))) (pow.f64 ux 3)))","(+.f64 (fma.f64 (*.f64 ux ux) (fma.f64 1/3 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (*.f64 (+.f64 maxCos -1) (+.f64 (+.f64 1/9 (*.f64 maxCos -1/9)) (*.f64 1/9 (fma.f64 2 maxCos -2))))) (fma.f64 ux (*.f64 1/3 (+.f64 maxCos (+.f64 -3 (*.f64 2 maxCos)))) 1)) (*.f64 (fma.f64 -1/27 (*.f64 (fma.f64 2 maxCos -2) (pow.f64 (+.f64 maxCos -1) 2)) (fma.f64 -1/3 (fma.f64 1/27 (pow.f64 (fma.f64 2 maxCos -2) 3) (*.f64 (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (*.f64 (fma.f64 2 maxCos -2) 2/3))) (fma.f64 (+.f64 -1/9 (*.f64 maxCos 1/9)) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)) (*.f64 (pow.f64 (+.f64 maxCos -1) 3) 5/81)))) (pow.f64 ux 3)))","(+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 (*.f64 -1 ux) ux))","(fma.f64 1 (-.f64 1 ux) (*.f64 0 ux))","(+.f64 (-.f64 1 ux) 0)","(-.f64 1 ux)","(+.f64 (*.f64 -1 ux) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 ux (*.f64 maxCos (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/9) ux)) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 8)) 1/9) ux)))))))","(fma.f64 -1 ux (fma.f64 1 (-.f64 1 ux) (+.f64 ux (*.f64 maxCos (fma.f64 1/3 (*.f64 ux (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 2/3 (*.f64 ux (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18)))))))))","(+.f64 (+.f64 (-.f64 1 ux) 0) (*.f64 maxCos (*.f64 ux (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 (*.f64 2/3 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18)) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18))))))","(+.f64 1 (-.f64 (*.f64 maxCos (*.f64 ux (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 2/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18)))))) ux))","(+.f64 (*.f64 -1 ux) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 ux (+.f64 (*.f64 maxCos (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/9) ux)) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 8)) 1/9) ux)))) (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))) (-.f64 1 ux)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (pow.f64 ux 2))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (-.f64 1 ux) 1/3) (pow.f64 ux 2)))))))))))","(fma.f64 -1 ux (fma.f64 1 (-.f64 1 ux) (+.f64 ux (fma.f64 maxCos (fma.f64 1/3 (*.f64 ux (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 2/3 (*.f64 ux (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18))))) (*.f64 (*.f64 maxCos maxCos) (+.f64 (*.f64 1/3 (/.f64 (+.f64 (*.f64 ux ux) (*.f64 -4/3 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))))) (-.f64 1 ux))) (fma.f64 -1/9 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18))) (*.f64 2/9 (*.f64 (*.f64 ux ux) (cbrt.f64 (-.f64 1 ux)))))))))))","(+.f64 (+.f64 (-.f64 1 ux) 0) (fma.f64 maxCos (*.f64 ux (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 (*.f64 2/3 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18)) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18)))) (*.f64 (*.f64 maxCos maxCos) (fma.f64 1/3 (/.f64 (fma.f64 ux ux (*.f64 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))) -4/3)) (-.f64 1 ux)) (fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (*.f64 ux ux))) (*.f64 2/9 (*.f64 ux (*.f64 ux (cbrt.f64 (-.f64 1 ux))))))))))","(+.f64 1 (-.f64 (*.f64 maxCos (+.f64 (*.f64 ux (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 2/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18))))) (*.f64 (fma.f64 1/3 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)) -4/3) 1) (*.f64 ux ux)) (-.f64 1 ux)) (*.f64 (*.f64 ux ux) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18))) (*.f64 2/9 (cbrt.f64 (-.f64 1 ux)))))) maxCos))) ux))","(+.f64 (*.f64 -1 ux) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 1 ux)) (+.f64 ux (+.f64 (*.f64 maxCos (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/9) ux)) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 8)) 1/9) ux)))) (+.f64 (*.f64 (pow.f64 maxCos 2) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))) (-.f64 1 ux)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (pow.f64 ux 2))) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (-.f64 1 ux) 1/3) (pow.f64 ux 2))))))) (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3)))))) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/9) (*.f64 ux (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2))))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (/.f64 (+.f64 (*.f64 8/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/3) (pow.f64 ux 3))) (*.f64 4/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (*.f64 ux (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))))))) (-.f64 1 ux)))) (*.f64 -2/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (pow.f64 ux 3)))))) (pow.f64 maxCos 3)))))))","(fma.f64 -1 ux (fma.f64 1 (-.f64 1 ux) (+.f64 ux (fma.f64 maxCos (fma.f64 1/3 (*.f64 ux (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 2/3 (*.f64 ux (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18))))) (fma.f64 (*.f64 maxCos maxCos) (+.f64 (*.f64 1/3 (/.f64 (+.f64 (*.f64 ux ux) (*.f64 -4/3 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))))) (-.f64 1 ux))) (fma.f64 -1/9 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18))) (*.f64 2/9 (*.f64 (*.f64 ux ux) (cbrt.f64 (-.f64 1 ux)))))) (*.f64 (+.f64 (*.f64 -1/3 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2))))) (*.f64 1/27 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2))))))) (fma.f64 1/9 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/18)) (*.f64 ux (+.f64 (*.f64 ux ux) (*.f64 -4/3 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))))))) (+.f64 (*.f64 -1/3 (/.f64 (fma.f64 8/27 (*.f64 (pow.f64 ux 3) (cbrt.f64 (pow.f64 (-.f64 1 ux) 5))) (*.f64 4/3 (*.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18)) ux) (+.f64 (*.f64 ux ux) (*.f64 -4/3 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)))))))) (-.f64 1 ux))) (*.f64 -2/27 (*.f64 (pow.f64 ux 3) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18))))))) (pow.f64 maxCos 3)))))))","(+.f64 (+.f64 (-.f64 1 ux) 0) (fma.f64 maxCos (*.f64 ux (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 (*.f64 2/3 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18)) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18)))) (fma.f64 (*.f64 maxCos maxCos) (fma.f64 1/3 (/.f64 (fma.f64 ux ux (*.f64 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))) -4/3)) (-.f64 1 ux)) (fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (*.f64 ux ux))) (*.f64 2/9 (*.f64 ux (*.f64 ux (cbrt.f64 (-.f64 1 ux))))))) (*.f64 (fma.f64 -1/3 (*.f64 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)))) -5/27) (fma.f64 1/9 (*.f64 ux (*.f64 (fma.f64 ux ux (*.f64 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))) -4/3)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/18)))) (fma.f64 -1/3 (/.f64 (fma.f64 4/3 (*.f64 ux (*.f64 (fma.f64 ux ux (*.f64 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))) -4/3)) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18)))) (*.f64 (pow.f64 ux 3) (*.f64 8/27 (cbrt.f64 (pow.f64 (-.f64 1 ux) 5))))) (-.f64 1 ux)) (*.f64 (pow.f64 ux 3) (*.f64 -2/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18))))))) (pow.f64 maxCos 3)))))","(+.f64 (-.f64 1 ux) (fma.f64 maxCos (*.f64 ux (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 4) 1/18))) (*.f64 2/3 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 8) 1/18))))) (*.f64 (*.f64 maxCos maxCos) (+.f64 (fma.f64 1/3 (/.f64 (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)) -4/3) 1) (*.f64 ux ux)) (-.f64 1 ux)) (*.f64 (*.f64 ux ux) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18))) (*.f64 2/9 (cbrt.f64 (-.f64 1 ux)))))) (*.f64 (fma.f64 -1/3 (*.f64 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)))) -5/27) (fma.f64 1/9 (*.f64 ux (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)) -4/3) 1) (*.f64 ux ux)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 14)) 1/18)))) (fma.f64 -1/3 (/.f64 (fma.f64 8/27 (*.f64 (pow.f64 ux 3) (cbrt.f64 (pow.f64 (-.f64 1 ux) 5))) (*.f64 (*.f64 4/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) ux))) (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)) -4/3) 1) (*.f64 ux ux)))) (-.f64 1 ux)) (*.f64 (pow.f64 ux 3) (*.f64 -2/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18))))))) maxCos)))))","(+.f64 (*.f64 -1 ux) ux)","(*.f64 0 ux)","0","(+.f64 (*.f64 -1 ux) ux)","(*.f64 0 ux)","0","1","(+.f64 1 (*.f64 1/3 (*.f64 ux (-.f64 (*.f64 2 maxCos) 2))))","(+.f64 1 (*.f64 (*.f64 1/3 ux) (fma.f64 2 maxCos -2)))","(fma.f64 (*.f64 ux 1/3) (fma.f64 2 maxCos -2) 1)","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 ux (-.f64 (*.f64 2 maxCos) 2))) (*.f64 1/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (pow.f64 ux 2)))))","(+.f64 1 (*.f64 1/3 (+.f64 (*.f64 (fma.f64 2 maxCos -2) ux) (*.f64 (*.f64 ux ux) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 -1/3 (pow.f64 (fma.f64 2 maxCos -2) 2)))))))","(fma.f64 1/3 (fma.f64 (fma.f64 2 maxCos -2) ux (*.f64 (*.f64 ux ux) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)))) 1)","(fma.f64 1/3 (*.f64 ux (+.f64 (fma.f64 2 maxCos -2) (*.f64 ux (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3))))) 1)","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 ux (-.f64 (*.f64 2 maxCos) 2))) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (pow.f64 ux 2))) (*.f64 -1/3 (*.f64 (pow.f64 ux 3) (+.f64 (*.f64 1/27 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 3)) (*.f64 2/3 (*.f64 (-.f64 (pow.f64 (-.f64 maxCos 1) 2) (*.f64 1/3 (pow.f64 (-.f64 (*.f64 2 maxCos) 2) 2))) (-.f64 (*.f64 2 maxCos) 2)))))))))","(+.f64 1 (fma.f64 1/3 (*.f64 (fma.f64 2 maxCos -2) ux) (fma.f64 1/3 (*.f64 (*.f64 ux ux) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 -1/3 (pow.f64 (fma.f64 2 maxCos -2) 2)))) (*.f64 -1/3 (*.f64 (fma.f64 1/27 (pow.f64 (fma.f64 2 maxCos -2) 3) (*.f64 2/3 (*.f64 (fma.f64 2 maxCos -2) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 -1/3 (pow.f64 (fma.f64 2 maxCos -2) 2)))))) (pow.f64 ux 3))))))","(+.f64 1 (fma.f64 1/3 (fma.f64 (fma.f64 2 maxCos -2) ux (*.f64 (*.f64 ux ux) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3)))) (*.f64 (+.f64 (*.f64 (*.f64 (fma.f64 2 maxCos -2) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3))) -2/9) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 3) -1/81)) (pow.f64 ux 3))))","(+.f64 1 (fma.f64 1/3 (*.f64 ux (+.f64 (fma.f64 2 maxCos -2) (*.f64 ux (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3))))) (*.f64 (+.f64 (*.f64 (*.f64 (fma.f64 2 maxCos -2) (+.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 2) -1/3))) -2/9) (*.f64 (pow.f64 (fma.f64 2 maxCos -2) 3) -1/81)) (pow.f64 ux 3))))","(pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3)","(cbrt.f64 (pow.f64 (-.f64 1 ux) 2))","(+.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/9) (*.f64 maxCos ux))))","(+.f64 (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)) (*.f64 2/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18)))))","(fma.f64 (*.f64 (*.f64 2/3 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18)) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18)) (*.f64 maxCos ux) (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)))","(fma.f64 2/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18))) (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)))","(+.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/9) (*.f64 maxCos ux))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/3) (*.f64 (pow.f64 maxCos 2) (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2)))))))))","(+.f64 (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)) (fma.f64 2/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18))) (*.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))) (*.f64 (*.f64 maxCos maxCos) (+.f64 (*.f64 ux ux) (*.f64 -4/3 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))))))))))","(+.f64 (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)) (fma.f64 1/3 (*.f64 (*.f64 maxCos maxCos) (*.f64 (fma.f64 ux ux (*.f64 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))) -4/3)) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))))) (*.f64 (*.f64 maxCos ux) (*.f64 (*.f64 2/3 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18)) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18)))))","(+.f64 (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)) (fma.f64 1/3 (*.f64 (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)) -4/3) 1) (*.f64 ux ux)) (*.f64 (*.f64 maxCos maxCos) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))))) (*.f64 2/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18))))))","(+.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 2) 1/3) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/9) (*.f64 maxCos ux))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/3) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 8/27 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 5)) 1/3) (pow.f64 ux 3))) (*.f64 4/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/9) (*.f64 ux (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2))))))))))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4)) 1/3) (*.f64 (pow.f64 maxCos 2) (-.f64 (pow.f64 ux 2) (*.f64 4/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 ux) 16)) 1/9) (pow.f64 ux 2))))))))))","(+.f64 (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)) (fma.f64 2/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))) (*.f64 (fma.f64 8/27 (*.f64 (pow.f64 ux 3) (cbrt.f64 (pow.f64 (-.f64 1 ux) 5))) (*.f64 4/3 (*.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18)) ux) (+.f64 (*.f64 ux ux) (*.f64 -4/3 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)))))))) (pow.f64 maxCos 3))) (*.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))) (*.f64 (*.f64 maxCos maxCos) (+.f64 (*.f64 ux ux) (*.f64 -4/3 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)))))))))))","(+.f64 (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)) (fma.f64 2/3 (*.f64 maxCos (*.f64 ux (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18)))) (fma.f64 1/3 (*.f64 (*.f64 maxCos maxCos) (*.f64 (fma.f64 ux ux (*.f64 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))) -4/3)) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))))) (*.f64 (*.f64 -1/3 (*.f64 (pow.f64 maxCos 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))))) (fma.f64 4/3 (*.f64 ux (*.f64 (fma.f64 ux ux (*.f64 (*.f64 (*.f64 ux ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18))) -4/3)) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18)))) (*.f64 (pow.f64 ux 3) (*.f64 8/27 (cbrt.f64 (pow.f64 (-.f64 1 ux) 5)))))))))","(+.f64 (cbrt.f64 (pow.f64 (-.f64 1 ux) 2)) (fma.f64 2/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 5) 1/18))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 4))) (+.f64 (*.f64 1/3 (*.f64 maxCos (*.f64 maxCos (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)) -4/3) 1) (*.f64 ux ux))))) (*.f64 -1/3 (*.f64 (fma.f64 8/27 (*.f64 (pow.f64 ux 3) (cbrt.f64 (pow.f64 (-.f64 1 ux) 5))) (*.f64 (*.f64 4/3 (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) (*.f64 (pow.f64 (/.f64 1 (-.f64 1 ux)) 1/18) ux))) (*.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18) (pow.f64 (pow.f64 (-.f64 1 ux) 16) 1/18)) -4/3) 1) (*.f64 ux ux)))) (pow.f64 maxCos 3)))))))","1","(+.f64 1 (*.f64 1/3 (*.f64 (-.f64 maxCos 1) ux)))","(+.f64 1 (*.f64 1/3 (*.f64 ux (+.f64 maxCos -1))))","(fma.f64 (+.f64 (*.f64 maxCos 1/3) -1/3) ux 1)","(fma.f64 (+.f64 -1/3 (*.f64 maxCos 1/3)) ux 1)","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 (-.f64 maxCos 1) ux)) (*.f64 -1/9 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2)))))","(+.f64 1 (fma.f64 1/3 (*.f64 ux (+.f64 maxCos -1)) (*.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux)) -1/9)))","(+.f64 1 (fma.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux)) -1/9 (*.f64 ux (+.f64 (*.f64 maxCos 1/3) -1/3))))","(+.f64 1 (*.f64 ux (+.f64 (+.f64 -1/3 (*.f64 maxCos 1/3)) (*.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 2) -1/9) ux))))","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 (-.f64 maxCos 1) ux)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 ux 3) (+.f64 (*.f64 1/27 (pow.f64 (-.f64 maxCos 1) 3)) (*.f64 -2/9 (pow.f64 (-.f64 maxCos 1) 3))))) (*.f64 -1/9 (*.f64 (pow.f64 (-.f64 maxCos 1) 2) (pow.f64 ux 2))))))","(+.f64 1 (fma.f64 1/3 (*.f64 ux (+.f64 maxCos -1)) (fma.f64 -1/3 (*.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 3) -5/27) (pow.f64 ux 3)) (*.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux)) -1/9))))","(+.f64 1 (fma.f64 1/3 (*.f64 ux (+.f64 maxCos -1)) (fma.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 2) (*.f64 ux ux)) -1/9 (*.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 3) 5/81) (pow.f64 ux 3)))))","(+.f64 1 (fma.f64 1/3 (-.f64 (*.f64 maxCos ux) ux) (fma.f64 (*.f64 ux (*.f64 ux (pow.f64 (+.f64 maxCos -1) 2))) -1/9 (*.f64 (*.f64 (pow.f64 (+.f64 maxCos -1) 3) 5/81) (pow.f64 ux 3)))))","(pow.f64 (-.f64 1 ux) 1/3)","(cbrt.f64 (-.f64 1 ux))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (*.f64 maxCos ux))) (pow.f64 (-.f64 1 ux) 1/3))","(fma.f64 1/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18))) (cbrt.f64 (-.f64 1 ux)))","(fma.f64 1/3 (*.f64 ux (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) maxCos))) (cbrt.f64 (-.f64 1 ux)))","(fma.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18))) (*.f64 maxCos ux) (cbrt.f64 (-.f64 1 ux)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (*.f64 maxCos ux))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/9) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))) (pow.f64 (-.f64 1 ux) 1/3)))","(fma.f64 1/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18))) (fma.f64 -1/9 (*.f64 (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18))) (cbrt.f64 (-.f64 1 ux))))","(fma.f64 1/3 (*.f64 ux (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) maxCos))) (fma.f64 -1/9 (*.f64 (*.f64 maxCos (*.f64 maxCos (*.f64 ux ux))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18))) (cbrt.f64 (-.f64 1 ux))))","(fma.f64 1/3 (*.f64 maxCos (*.f64 ux (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18)))) (fma.f64 -1/9 (*.f64 (*.f64 ux ux) (*.f64 (*.f64 maxCos maxCos) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18)))) (cbrt.f64 (-.f64 1 ux))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/9) (*.f64 maxCos ux))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (*.f64 (pow.f64 maxCos 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/3) (pow.f64 ux 3))))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/9) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 2)))) (pow.f64 (-.f64 1 ux) 1/3))))","(fma.f64 1/3 (*.f64 (*.f64 maxCos ux) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2))) (pow.f64 maxCos 3)) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2))))) (*.f64 1/27 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2))))))) (fma.f64 -1/9 (*.f64 (*.f64 (*.f64 ux ux) (*.f64 maxCos maxCos)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18))) (cbrt.f64 (-.f64 1 ux)))))","(fma.f64 1/3 (*.f64 ux (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) maxCos))) (fma.f64 -1/3 (*.f64 (*.f64 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)))) -5/27) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2))) (pow.f64 maxCos 3))) (fma.f64 -1/9 (*.f64 (*.f64 maxCos (*.f64 maxCos (*.f64 ux ux))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18))) (cbrt.f64 (-.f64 1 ux)))))","(fma.f64 1/3 (*.f64 maxCos (*.f64 ux (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)) 1/18)))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2))) (*.f64 (*.f64 (*.f64 (pow.f64 ux 3) (cbrt.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 2)))) -5/27) (pow.f64 maxCos 3))) (fma.f64 -1/9 (*.f64 (*.f64 ux ux) (*.f64 (*.f64 maxCos maxCos) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 (-.f64 1 ux) 7)) 1/18)))) (cbrt.f64 (-.f64 1 ux)))))"]],"stop":[["node limit",1]],"time":48.887939453125,"type":"simplify"},{"compiler":[[6767,4671]],"time":80.0380859375,"type":"eval"},{"alts":[["(-.f64 (fma.f64 ux maxCos 1) ux)","done",0.01953125],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","next",0.49580004884221013],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","done",0.47103500976844204],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","done",0.2578125]],"compiler":[[9,6],[37,25],[20,13],[25,17],[37,25]],"count":[[205,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[201,0],"picked":[1,1]}],"min-error":[0],"time":23.447998046875,"type":"prune"},{"compiler":[[137,83]],"locations":[["(+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))",0.04296875,false],["(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))",0.2265625,true],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))",0.44921875,true],["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))",0.5254288086106521,true]],"time":43.2490234375,"type":"localize"},{"count":[[3,27]],"series":[["(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))","maxCos","-inf",0.27099609375],["(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))","maxCos","inf",0.305908203125],["(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))","maxCos","0",0.2548828125],["(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))","ux","-inf",0.35205078125],["(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))","ux","inf",0.2919921875],["(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))","ux","0",0.238037109375],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","maxCos","-inf",8.29296875],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","maxCos","inf",5.001953125],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","maxCos","0",2.669921875],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","ux","-inf",10.7060546875],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","ux","inf",5.64208984375],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","ux","0",1.440185546875],["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))","maxCos","-inf",2.846923828125],["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))","maxCos","inf",2.946044921875],["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))","maxCos","0",2.128173828125],["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))","ux","-inf",5.501953125],["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))","ux","inf",3.801025390625],["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))","ux","0",2.514892578125]],"time":55.786865234375,"type":"series"},{"count":[[3,175]],"egraph":[[2,6361,40,0.039917041],[1,413,40,0.008703708000000001],[0,18,106,0.000485208]],"inputs":[["(/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux))))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","(+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 -1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (cbrt.f64 ux)) (cbrt.f64 (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (sqrt.f64 ux)) 1 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 ux))) (cbrt.f64 ux) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (neg.f64 (pow.f64 ux 1/4)) (pow.f64 ux 1/4) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (/.f64 1 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) 2)) (*.f64 (cbrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (/.f64 1 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (*.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (/.f64 1 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (/.f64 1 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) 2)) 1) (/.f64 (cbrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) 1) (/.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) 2)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (/.f64 (sqrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) 2)) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (/.f64 (cbrt.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 ux 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 3/2))) (-.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (fma.f64 ux maxCos 1))) (exp.f64 (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) 3) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (/.f64 1 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) 1 (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (fma.f64 ux maxCos 1))) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (sqrt.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) 1/2) (neg.f64 (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 ux maxCos 1) 1) (/.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) 1) (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 ux maxCos 1) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (/.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 ux maxCos 1) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (/.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 3/2))) (-.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (/.f64 (pow.f64 ux 3/2) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (*.f64 -1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (*.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 ux maxCos 1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 ux) 2)) (cbrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 ux maxCos) (-.f64 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 ux) 1 ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (sqrt.f64 ux)) (sqrt.f64 ux) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (fma.f64 (neg.f64 (cbrt.f64 ux)) (pow.f64 (cbrt.f64 ux) 2) ux))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 ux)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (sqrt.f64 (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 ux maxCos 1) ux)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (fma.f64 ux maxCos 1) ux))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (*.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 ux 3)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (+.f64 (*.f64 ux ux) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (*.f64 (/.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (*.f64 (/.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 ux ux)) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (-.f64 (fma.f64 ux maxCos 1) ux)) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (-.f64 (fma.f64 ux maxCos 1) ux)) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) 1) (*.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (/.f64 1 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)))) (*.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) 1) (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))) (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (fma.f64 ux maxCos 1) ux) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux))) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (fma.f64 ux maxCos 1) ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (neg.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (fma.f64 ux maxCos 1) ux))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (fma.f64 ux maxCos 1)) (exp.f64 ux)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 ux maxCos 1) ux)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 ux maxCos 1) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 ux maxCos 1) 1 (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (pow.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) 2) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 ux maxCos 1))) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) 2) (cbrt.f64 (fma.f64 ux maxCos 1)) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (*.f64 (pow.f64 (fma.f64 ux maxCos 1) 1/4) (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/4) (pow.f64 (fma.f64 ux maxCos 1) 1/4) (neg.f64 ux))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (cbrt.f64 (fma.f64 ux maxCos 1))) (cbrt.f64 (sqrt.f64 (fma.f64 ux maxCos 1))) (neg.f64 ux))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))) (/.f64 (*.f64 ux (fma.f64 ux maxCos 1)) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 3/2)) (/.f64 1 (-.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (/.f64 1 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 3/2)) (-.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 3/2)) (+.f64 (*.f64 ux (fma.f64 ux maxCos 1)) (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 3) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 3/2))) (neg.f64 (-.f64 (+.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1))) (*.f64 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2) (*.f64 ux (fma.f64 ux maxCos 1)))) (neg.f64 (+.f64 (fma.f64 ux maxCos 1) (-.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 3) (pow.f64 (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))) 3)) (+.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (-.f64 (*.f64 (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))) (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))) (*.f64 (fma.f64 ux maxCos 1) (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 2) (*.f64 (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))) (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))) (-.f64 (fma.f64 ux maxCos 1) (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 ux (fma.f64 ux maxCos 1)) (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)) (-.f64 (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))) (+.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 ux maxCos 1) (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 ux (fma.f64 ux maxCos 1)) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 (fma.f64 ux maxCos 1)) (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))) (cbrt.f64 (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 ux maxCos 1)) 2) (cbrt.f64 (fma.f64 ux maxCos 1)) (+.f64 ux (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 ux (fma.f64 ux maxCos 1)) 2)) (cbrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 1/4) (pow.f64 (*.f64 ux (fma.f64 ux maxCos 1)) 1/4) (+.f64 ux (fma.f64 ux maxCos 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (sqrt.f64 (+.f64 ux (fma.f64 ux maxCos 1))) (sqrt.f64 (*.f64 ux (fma.f64 ux maxCos 1))))))))"]],"rules":[["egg-rr",41],["egg-rr",65],["egg-rr",69]],"stop":[["node limit",1]],"time":76.4990234375,"type":"rewrite"},{"count":[[202,223]],"egraph":[[2,4503,3655,0.022531583],[1,1206,4030,0.007947083],[0,340,4253,0.001712125]],"inputs":[["(-.f64 1 (pow.f64 ux 3/2))","(/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux))","(-.f64 (+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 maxCos (pow.f64 ux 2))))) (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux))) (+.f64 (*.f64 (/.f64 1 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))) (sqrt.f64 (/.f64 ux (pow.f64 1 3)))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 2))))))","(-.f64 (+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 maxCos (pow.f64 ux 2))))) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 3))))) (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux)))) (+.f64 (*.f64 (/.f64 1 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))) (sqrt.f64 (/.f64 ux (pow.f64 1 3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (pow.f64 ux 2))))))))","(-.f64 (+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 maxCos (pow.f64 ux 2))))) (+.f64 (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 4))))) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 3))))) (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (+.f64 (*.f64 (/.f64 1 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))) (sqrt.f64 (/.f64 ux (pow.f64 1 3)))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (pow.f64 maxCos 2)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))))) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 4))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 4)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 4))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (pow.f64 ux 2)))))))))))","(/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) maxCos) (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (*.f64 (pow.f64 1 3) (pow.f64 ux 3)))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) maxCos) (+.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (*.f64 (pow.f64 maxCos 2) (-.f64 (+.f64 (*.f64 9/8 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 -3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))))))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (*.f64 (pow.f64 1 3) (pow.f64 ux 3)))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) maxCos) (+.f64 (*.f64 (pow.f64 maxCos 3) (-.f64 (+.f64 (*.f64 -9/8 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 9/16 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))))) (+.f64 (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 9/8 (/.f64 (pow.f64 ux 2) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 -3/4 (/.f64 (pow.f64 ux 2) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 7)))) (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (pow.f64 ux 5)))))))) (+.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (*.f64 (pow.f64 maxCos 2) (-.f64 (+.f64 (*.f64 9/8 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 -3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))))))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (*.f64 (pow.f64 1 3) (pow.f64 ux 3)))))","(/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 maxCos))) (log.f64 ux)))) (pow.f64 ux 3/2)) (*.f64 maxCos ux))","(/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 maxCos))) (log.f64 (*.f64 -1 ux))))) (pow.f64 ux 3/2)) (*.f64 maxCos ux))","(-.f64 1 (pow.f64 ux 3/2))","(/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))","(+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (*.f64 maxCos (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))))","(+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 maxCos (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (*.f64 (-.f64 (+.f64 (*.f64 3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 ux 2) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 3/2 (/.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (pow.f64 maxCos 2))))","(+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 maxCos (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (*.f64 (pow.f64 maxCos 3) (-.f64 (+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (+.f64 (*.f64 -9/8 (pow.f64 ux 3)) (+.f64 (*.f64 9/16 (pow.f64 ux 3)) (*.f64 1/2 (pow.f64 ux 3))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 ux 3) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 -3/16 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 7)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 3/2 (/.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))) (+.f64 (*.f64 3/4 (/.f64 (pow.f64 ux 2) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 ux 2) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))))) (*.f64 (-.f64 (+.f64 (*.f64 3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 ux 2) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 3/2 (/.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (pow.f64 maxCos 2)))))","1","(*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux)","(+.f64 1 (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux)))","(+.f64 1 (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 1 ux))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))) (/.f64 1 (pow.f64 ux 2)))) (+.f64 1 (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 1 ux))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux)))))","(+.f64 1 (+.f64 (sqrt.f64 ux) ux))","(+.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 ux (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) maxCos))))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (sqrt.f64 (pow.f64 ux 5)))) (+.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 ux (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) maxCos)))))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (sqrt.f64 (pow.f64 ux 5)))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 maxCos 3) (sqrt.f64 (pow.f64 ux 7)))) (+.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 ux (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) maxCos))))))","(*.f64 maxCos ux)","(*.f64 maxCos ux)"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (pow.f64 ux 3/2))","(/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux))","(/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))","(/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) ux)","(-.f64 (+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 maxCos (pow.f64 ux 2))))) (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux))) (+.f64 (*.f64 (/.f64 1 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))) (sqrt.f64 (/.f64 ux (pow.f64 1 3)))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 2))))))","(-.f64 (fma.f64 3/2 (/.f64 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 maxCos (*.f64 ux ux))) (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (*.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (fma.f64 (/.f64 1 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (sqrt.f64 ux) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux))))))","(-.f64 (fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux)))) (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))) (fma.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux))) (/.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))))","(fma.f64 3/2 (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (*.f64 maxCos (*.f64 ux (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux))))) (-.f64 (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux))) (fma.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (*.f64 ux (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))) (/.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))))","(-.f64 (+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 maxCos (pow.f64 ux 2))))) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 3))))) (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux)))) (+.f64 (*.f64 (/.f64 1 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))) (sqrt.f64 (/.f64 ux (pow.f64 1 3)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (pow.f64 ux 2))))))))","(-.f64 (fma.f64 3/2 (/.f64 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 maxCos (*.f64 ux ux))) (fma.f64 3/8 (/.f64 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 (*.f64 maxCos maxCos) (pow.f64 ux 3))) (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (*.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))))) (fma.f64 (/.f64 1 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (sqrt.f64 ux) (fma.f64 -1/8 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (+.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux)))) (*.f64 (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (-.f64 (*.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (*.f64 maxCos (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (pow.f64 ux 3)))))))","(-.f64 (fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux)))) (fma.f64 3/8 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 maxCos (*.f64 maxCos (pow.f64 ux 3))))) (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux))))) (+.f64 (/.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (fma.f64 -1/8 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (fma.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux))) (*.f64 (/.f64 (-.f64 (*.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))) (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (pow.f64 ux 3)))))))","(+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 (/.f64 3/2 (*.f64 maxCos (*.f64 ux ux))) (/.f64 3/8 (*.f64 maxCos (*.f64 maxCos (pow.f64 ux 3)))))) (-.f64 (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux))) (+.f64 (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (*.f64 ux (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))) (/.f64 (fma.f64 (/.f64 3/2 maxCos) (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (neg.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1)))) (pow.f64 ux 3)))) (fma.f64 -1/8 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (pow.f64 ux 3)) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (/.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))))))","(-.f64 (+.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 maxCos (pow.f64 ux 2))))) (+.f64 (*.f64 -1/16 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 4))))) (+.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (pow.f64 maxCos 2) (pow.f64 ux 3))))) (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (+.f64 (*.f64 (/.f64 1 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))) (sqrt.f64 (/.f64 ux (pow.f64 1 3)))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/8 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (pow.f64 maxCos 2)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))))) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 4))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 4)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 4))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (-.f64 (*.f64 3/2 (/.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) maxCos))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (pow.f64 ux 3))) (/.f64 (*.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 ux))) (log.f64 maxCos)))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))))) (*.f64 (+.f64 1 (+.f64 (sqrt.f64 maxCos) maxCos)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (pow.f64 ux 2)))))))))))","(-.f64 (fma.f64 3/2 (/.f64 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 maxCos (*.f64 ux ux))) (fma.f64 -1/16 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 4)))) (fma.f64 3/8 (/.f64 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 (*.f64 maxCos maxCos) (pow.f64 ux 3))) (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (*.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))))) (fma.f64 -1/8 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (fma.f64 (/.f64 1 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (sqrt.f64 ux) (+.f64 (*.f64 (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (-.f64 (/.f64 (*.f64 3/8 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos)))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 maxCos maxCos))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (/.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (-.f64 (/.f64 (*.f64 3/2 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos)))) (*.f64 maxCos (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))))))) (pow.f64 ux 4))) (fma.f64 1/16 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 4)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5)))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 (-.f64 (*.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (*.f64 maxCos (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 4)))) (+.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux)))) (*.f64 (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (-.f64 (*.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (*.f64 maxCos (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 ux)) (log.f64 maxCos))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))) (/.f64 (+.f64 1 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (pow.f64 ux 3))))))))))","(-.f64 (fma.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux)))) (fma.f64 -1/16 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 4)))) (fma.f64 3/8 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 maxCos (*.f64 maxCos (pow.f64 ux 3))))) (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))))) (+.f64 (fma.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (-.f64 (*.f64 3/8 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (*.f64 maxCos (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (-.f64 (*.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))) (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1)))))) (pow.f64 ux 4)) (fma.f64 1/16 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))) (/.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))) (pow.f64 ux 4))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 (-.f64 (*.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))) (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 4)))) (fma.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 ux ux))) (*.f64 (/.f64 (-.f64 (*.f64 3/2 (/.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (*.f64 maxCos (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))) (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))) (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (pow.f64 ux 3))))))) (fma.f64 -1/8 (*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 (/.f64 1 ux) -3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 3)))) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (/.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))))))","(+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 (/.f64 3/2 (*.f64 maxCos (*.f64 ux ux))) (/.f64 -1/16 (*.f64 (pow.f64 maxCos 3) (pow.f64 ux 4))))) (-.f64 (fma.f64 3/8 (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 maxCos (*.f64 maxCos (pow.f64 ux 3))))) (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))) (+.f64 (fma.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (-.f64 (fma.f64 3/8 (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (*.f64 maxCos (+.f64 maxCos (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) maxCos)))) (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) 1/8))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (fma.f64 (/.f64 3/2 maxCos) (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (neg.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1)))))) (pow.f64 ux 4)) (fma.f64 1/16 (*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (/.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))) (pow.f64 ux 4))) (fma.f64 -1/8 (/.f64 (fma.f64 (/.f64 3/2 maxCos) (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (neg.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1)))) (/.f64 (*.f64 (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (pow.f64 ux 4)) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (*.f64 ux (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))) (/.f64 (fma.f64 (/.f64 3/2 maxCos) (/.f64 (*.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2)) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (*.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (neg.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1)))) (pow.f64 ux 3))))))) (fma.f64 -1/8 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos)))) (pow.f64 ux 3)) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (/.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))))))))","(/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))","(/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) maxCos) (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (*.f64 (pow.f64 1 3) (pow.f64 ux 3)))))","(-.f64 (fma.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) maxCos (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (sqrt.f64 (pow.f64 ux 3))))","(-.f64 (fma.f64 maxCos (-.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux)) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (sqrt.f64 (pow.f64 ux 3)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))","(fma.f64 maxCos (fma.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) maxCos) (+.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (*.f64 (pow.f64 maxCos 2) (-.f64 (+.f64 (*.f64 9/8 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 -3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))))))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (*.f64 (pow.f64 1 3) (pow.f64 ux 3)))))","(-.f64 (+.f64 (fma.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) maxCos (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (*.f64 maxCos maxCos) (-.f64 (*.f64 (/.f64 (*.f64 ux ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) 3/8) (fma.f64 -1/8 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))))))))) (*.f64 (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (sqrt.f64 (pow.f64 ux 3))))","(-.f64 (fma.f64 maxCos (-.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux)) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 (*.f64 maxCos maxCos) (-.f64 (*.f64 3/8 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux))) (fma.f64 -1/8 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux)) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))))) (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (/.f64 (sqrt.f64 (pow.f64 ux 3)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))","(fma.f64 maxCos (fma.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (+.f64 (*.f64 (*.f64 maxCos maxCos) (-.f64 (fma.f64 3/8 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (pow.f64 ux 5/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) 1/8)) (*.f64 (-.f64 (*.f64 (/.f64 3/2 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 (pow.f64 ux 3/2) 1/2 ux)) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3))) (fma.f64 (pow.f64 ux 3/2) 1/2 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) maxCos) (+.f64 (*.f64 (pow.f64 maxCos 3) (-.f64 (+.f64 (*.f64 -9/8 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 9/16 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))))) (+.f64 (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 9/8 (/.f64 (pow.f64 ux 2) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 -3/4 (/.f64 (pow.f64 ux 2) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 7)))) (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (pow.f64 ux 5)))))))) (+.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (*.f64 (pow.f64 maxCos 2) (-.f64 (+.f64 (*.f64 9/8 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 -3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))))))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (*.f64 (pow.f64 1 3) (pow.f64 ux 3)))))","(-.f64 (fma.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) maxCos (fma.f64 (pow.f64 maxCos 3) (-.f64 (fma.f64 -9/8 (/.f64 (pow.f64 ux 3) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (/.f64 (pow.f64 ux 3) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) 17/16)) (+.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (*.f64 (/.f64 (*.f64 ux ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) 3/8) (fma.f64 -1/8 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))))))))) (fma.f64 1/16 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 7))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 ux 5)) (/.f64 (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))))) (+.f64 (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (*.f64 maxCos maxCos) (-.f64 (*.f64 (/.f64 (*.f64 ux ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) 3/8) (fma.f64 -1/8 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (*.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))))))))))) (*.f64 (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (sqrt.f64 (pow.f64 ux 3))))","(-.f64 (fma.f64 maxCos (-.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux)) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 (pow.f64 maxCos 3) (-.f64 (*.f64 (/.f64 (pow.f64 ux 3) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) -1/16) (+.f64 (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (*.f64 3/8 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux))) (fma.f64 -1/8 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux)) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 ux 5)) (/.f64 (-.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux)) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 1/16 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 7))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))))) (fma.f64 (*.f64 maxCos maxCos) (-.f64 (*.f64 3/8 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux))) (fma.f64 -1/8 (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux)) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))))) (/.f64 1 (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (/.f64 (sqrt.f64 (pow.f64 ux 3)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))","(+.f64 (fma.f64 maxCos (fma.f64 3/2 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (neg.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (*.f64 (pow.f64 maxCos 3) (-.f64 (-.f64 (/.f64 (*.f64 (pow.f64 ux 3) -1/16) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (fma.f64 3/8 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (pow.f64 ux 5/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) 1/8)) (*.f64 (-.f64 (*.f64 (/.f64 3/2 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 (pow.f64 ux 3/2) 1/2 ux)) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3))) (fma.f64 (pow.f64 ux 3/2) 1/2 ux))))) (fma.f64 -1/8 (*.f64 (pow.f64 ux 5/2) (-.f64 (*.f64 (/.f64 3/2 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 (pow.f64 ux 3/2) 1/2 ux)) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3)))) (*.f64 1/16 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (pow.f64 ux 7/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))))))) (+.f64 (*.f64 (*.f64 maxCos maxCos) (-.f64 (fma.f64 3/8 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (pow.f64 ux 5/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) 1/8)) (*.f64 (-.f64 (*.f64 (/.f64 3/2 (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (fma.f64 (pow.f64 ux 3/2) 1/2 ux)) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3))) (fma.f64 (pow.f64 ux 3/2) 1/2 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))","(/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 maxCos))) (log.f64 ux)))) (pow.f64 ux 3/2)) (*.f64 maxCos ux))","(/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (neg.f64 (log.f64 maxCos)) (log.f64 ux))) (pow.f64 ux 3/2)) (*.f64 ux maxCos))","(/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 maxCos) (log.f64 ux))) (pow.f64 ux 3/2)) (*.f64 ux maxCos))","(/.f64 (fma.f64 (pow.f64 ux 3/2) (pow.f64 maxCos 3/2) (neg.f64 (pow.f64 ux 3/2))) (*.f64 ux maxCos))","(/.f64 (-.f64 (exp.f64 (*.f64 3/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 maxCos))) (log.f64 (*.f64 -1 ux))))) (pow.f64 ux 3/2)) (*.f64 maxCos ux))","(/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (fma.f64 -1 (log.f64 (/.f64 -1 maxCos)) (log.f64 (neg.f64 ux)))) (pow.f64 ux 3/2)) (*.f64 ux maxCos))","(/.f64 (-.f64 (pow.f64 (exp.f64 3/2) (-.f64 (log.f64 (neg.f64 ux)) (log.f64 (/.f64 -1 maxCos)))) (pow.f64 ux 3/2)) (*.f64 ux maxCos))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 -1 maxCos) -3/2) (pow.f64 (neg.f64 ux) 3/2)) (pow.f64 ux 3/2)) (*.f64 ux maxCos))","(-.f64 1 (pow.f64 ux 3/2))","(/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))","(/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2))))","(*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2)))","(*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux)))","(+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (*.f64 maxCos (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))))","(+.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 maxCos (-.f64 (fma.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 3/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2))))))))","(fma.f64 maxCos (-.f64 (fma.f64 3/2 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (/.f64 (*.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2))))","(fma.f64 maxCos (fma.f64 1/2 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2))) (-.f64 (*.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))))","(+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 maxCos (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (*.f64 (-.f64 (+.f64 (*.f64 3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 ux 2) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 3/2 (/.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (pow.f64 maxCos 2))))","(+.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (fma.f64 maxCos (-.f64 (fma.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 3/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (*.f64 maxCos maxCos) (-.f64 (fma.f64 3/4 (/.f64 (*.f64 ux ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (fma.f64 -1/8 (/.f64 (*.f64 ux ux) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 ux ux) 3/8)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (sqrt.f64 ux))) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (fma.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 3/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))))))))))","(+.f64 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2))) (fma.f64 maxCos (-.f64 (fma.f64 3/2 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (/.f64 (*.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (*.f64 (*.f64 maxCos maxCos) (-.f64 (fma.f64 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux)) 3/4 (fma.f64 -1/8 (*.f64 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 ux (*.f64 ux 3/8))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 ux 5)) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (/.f64 (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (fma.f64 3/2 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (/.f64 (*.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))))))))","(+.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 maxCos (+.f64 (fma.f64 1/2 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2))) (-.f64 (*.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (*.f64 maxCos (-.f64 (fma.f64 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) 3/4 (fma.f64 -1/8 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (*.f64 ux ux))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (*.f64 ux (*.f64 ux 3/8)))))) (fma.f64 -1/8 (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (/.f64 (pow.f64 ux 5/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (-.f64 (/.f64 (fma.f64 3/2 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 (/.f64 (*.f64 ux 1/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (sqrt.f64 ux)))) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3))) (fma.f64 (pow.f64 ux 3/2) 1/2 ux))))))))","(+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 maxCos (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (*.f64 (pow.f64 maxCos 3) (-.f64 (+.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (+.f64 (*.f64 -9/8 (pow.f64 ux 3)) (+.f64 (*.f64 9/16 (pow.f64 ux 3)) (*.f64 1/2 (pow.f64 ux 3))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 ux 3) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 -3/16 (/.f64 (pow.f64 ux 3) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 7)))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 3/2 (/.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))) (+.f64 (*.f64 3/4 (/.f64 (pow.f64 ux 2) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 ux 2) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (*.f64 3/2 (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) ux) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))))) (*.f64 (-.f64 (+.f64 (*.f64 3/4 (/.f64 (pow.f64 ux 2) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 ux 2) (-.f64 1 (pow.f64 ux 3/2))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux)))) (/.f64 (*.f64 (+.f64 (sqrt.f64 ux) 1) (+.f64 (*.f64 -3/4 (pow.f64 ux 2)) (*.f64 9/8 (pow.f64 ux 2)))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (sqrt.f64 (pow.f64 ux 5)))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (-.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 ux (-.f64 1 (pow.f64 ux 3/2))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))) (*.f64 3/2 (/.f64 (*.f64 ux (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 (sqrt.f64 ux) ux))))) (/.f64 (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (*.f64 (+.f64 (sqrt.f64 ux) 1) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 (+.f64 (sqrt.f64 ux) (+.f64 1 ux)) (+.f64 1 (+.f64 (sqrt.f64 ux) ux)))))) (+.f64 (sqrt.f64 ux) (+.f64 1 ux))))) (pow.f64 maxCos 2)))))","(+.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (fma.f64 maxCos (-.f64 (fma.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 3/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (fma.f64 (pow.f64 maxCos 3) (-.f64 (+.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (fma.f64 -9/8 (pow.f64 ux 3) (*.f64 (pow.f64 ux 3) 17/16)))) (fma.f64 1/2 (/.f64 (*.f64 ux (*.f64 (*.f64 ux ux) 3/8)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (fma.f64 1/16 (/.f64 (pow.f64 ux 3) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (/.f64 (*.f64 -3/16 (pow.f64 ux 3)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (fma.f64 1/16 (*.f64 (sqrt.f64 (pow.f64 ux 7)) (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 -1/8 (/.f64 (*.f64 (-.f64 (fma.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 3/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (sqrt.f64 (pow.f64 ux 5))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (fma.f64 3/4 (/.f64 (*.f64 ux ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (fma.f64 -1/8 (/.f64 (*.f64 ux ux) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 ux ux) 3/8)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (sqrt.f64 ux))) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (fma.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 3/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2))))))))))))))) (*.f64 (*.f64 maxCos maxCos) (-.f64 (fma.f64 3/4 (/.f64 (*.f64 ux ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (fma.f64 -1/8 (/.f64 (*.f64 ux ux) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (/.f64 (*.f64 (+.f64 1 (sqrt.f64 ux)) (*.f64 (*.f64 ux ux) 3/8)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (sqrt.f64 ux))) (sqrt.f64 (pow.f64 ux 5))) (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 (fma.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (*.f64 3/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (sqrt.f64 ux)))))) (*.f64 (/.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2))))))))))))))","(+.f64 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2))) (fma.f64 maxCos (-.f64 (fma.f64 3/2 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (/.f64 (*.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 (*.f64 maxCos maxCos) (-.f64 (fma.f64 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux)) 3/4 (fma.f64 -1/8 (*.f64 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 ux (*.f64 ux 3/8))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 ux 5)) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (/.f64 (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (fma.f64 3/2 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (/.f64 (*.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))))) (*.f64 (pow.f64 maxCos 3) (-.f64 (+.f64 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (pow.f64 ux 3) -1/16)) (fma.f64 1/2 (/.f64 (*.f64 (pow.f64 ux 3) 3/8) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (fma.f64 1/16 (/.f64 (pow.f64 ux 3) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))) (/.f64 (*.f64 (pow.f64 ux 3) -3/16) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (fma.f64 1/16 (/.f64 (*.f64 (sqrt.f64 (pow.f64 ux 7)) (+.f64 1 (sqrt.f64 ux))) (/.f64 (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2)))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 ux 5)) (/.f64 (-.f64 (fma.f64 3/2 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (/.f64 (*.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (fma.f64 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux)) 3/4 (fma.f64 -1/8 (*.f64 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) ux)) (-.f64 1 (pow.f64 ux 3/2))) (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 ux (*.f64 ux 3/8))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 ux 5)) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (/.f64 (*.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))))) (*.f64 (/.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (fma.f64 3/2 (*.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) (*.f64 1/2 (/.f64 ux (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (-.f64 1 (pow.f64 ux 3/2)))))) (*.f64 (/.f64 (*.f64 (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) (+.f64 1 (sqrt.f64 ux))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))))))))))))))","(+.f64 (fma.f64 maxCos (fma.f64 1/2 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2))) (-.f64 (*.f64 (/.f64 (*.f64 ux 3/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))))) (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux)))) (*.f64 (*.f64 maxCos maxCos) (+.f64 (-.f64 (fma.f64 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) 3/4 (fma.f64 -1/8 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (*.f64 ux ux))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (*.f64 ux (*.f64 ux 3/8)))))) (fma.f64 -1/8 (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (/.f64 (pow.f64 ux 5/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (-.f64 (/.f64 (fma.f64 3/2 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 (/.f64 (*.f64 ux 1/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (sqrt.f64 ux)))) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3))) (fma.f64 (pow.f64 ux 3/2) 1/2 ux)))) (*.f64 (-.f64 (+.f64 (fma.f64 1/2 (/.f64 (*.f64 (pow.f64 ux 3) 3/8) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (fma.f64 1/16 (*.f64 (/.f64 (pow.f64 ux 3) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2))) (/.f64 (*.f64 (pow.f64 ux 3) -3/16) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))) (fma.f64 (/.f64 (+.f64 1 (sqrt.f64 ux)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (*.f64 (pow.f64 ux 3) -1/16) (*.f64 -1/16 (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (/.f64 (pow.f64 ux 7/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))))))) (fma.f64 -1/8 (*.f64 (pow.f64 ux 5/2) (-.f64 (/.f64 (fma.f64 3/2 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 (/.f64 (*.f64 ux 1/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (sqrt.f64 ux)))) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3)))) (*.f64 (/.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 (fma.f64 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) ux) 3/4 (fma.f64 -1/8 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (*.f64 ux ux))) (/.f64 (+.f64 1 (sqrt.f64 ux)) (/.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) (*.f64 ux (*.f64 ux 3/8)))))) (fma.f64 -1/8 (*.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 ux 3/2)) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (/.f64 (pow.f64 ux 5/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux))))) (*.f64 (-.f64 (/.f64 (fma.f64 3/2 (*.f64 (/.f64 ux (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (+.f64 1 (sqrt.f64 ux))) (*.f64 (/.f64 (*.f64 ux 1/2) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (-.f64 1 (pow.f64 ux 3/2)))) (+.f64 1 (+.f64 ux (sqrt.f64 ux)))) (/.f64 (*.f64 (-.f64 1 (pow.f64 ux 3/2)) (*.f64 (fma.f64 (pow.f64 ux 3/2) 1/2 ux) (+.f64 1 (sqrt.f64 ux)))) (pow.f64 (+.f64 1 (+.f64 ux (sqrt.f64 ux))) 3))) (fma.f64 (pow.f64 ux 3/2) 1/2 ux))))))) maxCos))))","1","(*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux)","(*.f64 ux (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)))","(+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux))","(+.f64 1 (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux)))","(+.f64 1 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) (*.f64 ux (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)))))","(+.f64 1 (fma.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)))))","(+.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (+.f64 ux (*.f64 (+.f64 maxCos (sqrt.f64 maxCos)) ux)))","(+.f64 1 (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 1 ux))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux))))","(+.f64 1 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) (fma.f64 -1/8 (*.f64 (/.f64 1 ux) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (*.f64 ux (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos))))))","(+.f64 1 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) (fma.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 -1/8 (/.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) ux)))))","(+.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) 1) (fma.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 -1/8 ux))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))) (/.f64 1 (pow.f64 ux 2)))) (+.f64 1 (+.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 maxCos))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 1 ux))) (*.f64 (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)) ux)))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))) (/.f64 1 (*.f64 ux ux))) (+.f64 1 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) (fma.f64 -1/8 (*.f64 (/.f64 1 ux) (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3)))) (*.f64 ux (+.f64 (sqrt.f64 maxCos) (+.f64 1 maxCos)))))))","(+.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) (fma.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 -1/8 (/.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) ux)))) (fma.f64 1/16 (/.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))) (*.f64 ux ux)) 1))","(+.f64 (fma.f64 1/2 (sqrt.f64 (/.f64 1 maxCos)) (fma.f64 ux (+.f64 1 (+.f64 maxCos (sqrt.f64 maxCos))) (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 3))) (/.f64 -1/8 ux)))) (fma.f64 1/16 (/.f64 (sqrt.f64 (/.f64 1 (pow.f64 maxCos 5))) (*.f64 ux ux)) 1))","(+.f64 1 (+.f64 (sqrt.f64 ux) ux))","(+.f64 1 (+.f64 ux (sqrt.f64 ux)))","(+.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 ux (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) maxCos))))","(+.f64 (sqrt.f64 ux) (+.f64 (+.f64 1 ux) (*.f64 maxCos (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))))))","(+.f64 1 (+.f64 (sqrt.f64 ux) (fma.f64 maxCos (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) ux)))","(+.f64 1 (+.f64 (sqrt.f64 ux) (fma.f64 maxCos (fma.f64 (pow.f64 ux 3/2) 1/2 ux) ux)))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (sqrt.f64 (pow.f64 ux 5)))) (+.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 ux (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) maxCos)))))","(fma.f64 -1/8 (*.f64 (*.f64 maxCos maxCos) (sqrt.f64 (pow.f64 ux 5))) (+.f64 (sqrt.f64 ux) (+.f64 (+.f64 1 ux) (*.f64 maxCos (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3))))))))","(+.f64 (+.f64 1 (fma.f64 maxCos (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) ux)) (fma.f64 (*.f64 (*.f64 maxCos maxCos) -1/8) (sqrt.f64 (pow.f64 ux 5)) (sqrt.f64 ux)))","(+.f64 (+.f64 (fma.f64 -1/8 (*.f64 maxCos (*.f64 maxCos (pow.f64 ux 5/2))) (sqrt.f64 ux)) 1) (fma.f64 maxCos (fma.f64 (pow.f64 ux 3/2) 1/2 ux) ux))","(+.f64 (*.f64 -1/8 (*.f64 (pow.f64 maxCos 2) (sqrt.f64 (pow.f64 ux 5)))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 maxCos 3) (sqrt.f64 (pow.f64 ux 7)))) (+.f64 (sqrt.f64 ux) (+.f64 1 (+.f64 ux (*.f64 (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))) maxCos))))))","(fma.f64 -1/8 (*.f64 (*.f64 maxCos maxCos) (sqrt.f64 (pow.f64 ux 5))) (fma.f64 1/16 (*.f64 (pow.f64 maxCos 3) (sqrt.f64 (pow.f64 ux 7))) (+.f64 (sqrt.f64 ux) (+.f64 (+.f64 1 ux) (*.f64 maxCos (+.f64 ux (*.f64 1/2 (sqrt.f64 (pow.f64 ux 3)))))))))","(fma.f64 -1/8 (*.f64 maxCos (*.f64 maxCos (sqrt.f64 (pow.f64 ux 5)))) (+.f64 (+.f64 1 (fma.f64 maxCos (fma.f64 1/2 (sqrt.f64 (pow.f64 ux 3)) ux) ux)) (fma.f64 (*.f64 (pow.f64 maxCos 3) 1/16) (sqrt.f64 (pow.f64 ux 7)) (sqrt.f64 ux))))","(fma.f64 -1/8 (*.f64 maxCos (*.f64 maxCos (pow.f64 ux 5/2))) (+.f64 (+.f64 (fma.f64 (*.f64 (pow.f64 maxCos 3) 1/16) (pow.f64 ux 7/2) (sqrt.f64 ux)) 1) (fma.f64 maxCos (fma.f64 (pow.f64 ux 3/2) 1/2 ux) ux)))","(*.f64 maxCos ux)","(*.f64 ux maxCos)","(*.f64 maxCos ux)","(*.f64 ux maxCos)"]],"stop":[["node limit",1]],"time":63.361083984375,"type":"simplify"},{"compiler":[[14556,9121]],"time":146.305908203125,"type":"eval"},{"alts":[["(-.f64 (fma.f64 ux maxCos 1) ux)","done",0.01953125],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","done",0.49580004884221013],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","done",0.47103500976844204],["(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","done",0.2578125]],"compiler":[[9,6],[37,25],[20,13],[25,17]],"count":[[289,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[285,0],"picked":[1,1]}],"min-error":[0],"time":92.703125,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["ux",0.01953125,1],["uy",0.01953125,1],["maxCos",0.01953125,1],["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))",0.01953125,1]],"compiler":[[4,3],[4,3],[4,3],[10,7],[98,61]],"count":[[6,1]],"inputs":[["(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (/.f64 (-.f64 (pow.f64 (fma.f64 ux maxCos 1) 3/2) (pow.f64 ux 3/2)) (+.f64 (+.f64 (fma.f64 ux maxCos 1) ux) (sqrt.f64 (*.f64 (fma.f64 ux maxCos 1) ux)))))","(fma.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) (cbrt.f64 (pow.f64 (-.f64 (fma.f64 ux maxCos 1) ux) 2)) (fma.f64 (neg.f64 ux) 1 ux))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)) (-.f64 (sqrt.f64 (fma.f64 ux maxCos 1)) (sqrt.f64 ux)))","(pow.f64 (cbrt.f64 (-.f64 (fma.f64 ux maxCos 1) ux)) 3)","(-.f64 (fma.f64 ux maxCos 1) ux)","(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))"]],"link":["."],"name":["UniformSampleCone, z"],"oracle":[0.9792939453688406],"outputs":[["(-.f64 (fma.f64 ux maxCos 1) ux)"]],"time":17.514892578125,"times":[["ux",3.9150390625],["uy",3.85205078125],["maxCos",3.9560546875],["(+.f64 (-.f64 1 ux) (*.f64 ux maxCos))",3.906982421875]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[4,17,8,0.000103417],[3,16,8,8.3125e-5],[2,14,8,6.2375e-5],[1,10,8,4.225e-5],[0,6,8,2.25e-5]],"inputs":[["(-.f64 (fma.f64 ux maxCos 1) ux)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (fma.f64 ux maxCos 1) ux)"]],"stop":[["done",1],["saturated",1]],"time":8.451171875,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.511962890625,"type":"end"}]
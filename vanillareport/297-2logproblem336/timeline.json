[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.4992678165435791,0.00048804283142089844,0.500244140625],[11,0.4987797737121582,0.0009760856628417969,0.500244140625],[10,0.4978036880493164,0.0019521713256835938,0.500244140625],[9,0.4958515167236328,0.0039043426513671875,0.500244140625],[8,0.4919471740722656,0.007808685302734375,0.500244140625],[7,0.48413848876953125,0.01561737060546875,0.500244140625],[6,0.4685211181640625,0.0312347412109375,0.500244140625],[5,0.437286376953125,0.062469482421875,0.500244140625],[4,0.37481689453125,0.12493896484375,0.500244140625],[3,0.2498779296875,0.499755859375,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.239990234375,"type":"analyze"},{"outcomes":[["body",512,"valid",98.254638671875,1026],["body",1024,"valid",326.980224609375,2004],["body",2048,"valid",69.73681640625,255],["body",256,"valid",285.011474609375,4971]],"time":788.30712890625,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.417e-6],[11,234,8,0.003549334],[10,232,8,0.003051876],[9,206,8,0.002529376],[8,170,8,0.0019321669999999998],[7,123,8,0.001387417],[6,87,8,0.000960792],[5,50,8,0.00056],[4,33,8,0.000338958],[3,24,8,0.00022600000000000002],[2,17,8,0.000139375],[1,12,8,8.366600000000001e-5],[0,7,11,4.3833e-5]],"inputs":[["0"],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":26.179931640625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,234,8,0.0035593740000000006],[10,232,8,0.0030608320000000003],[9,206,8,0.002532082],[8,170,8,0.001938166],[7,123,8,0.001392708],[6,87,8,0.000955999],[5,50,8,0.000547749],[4,33,8,0.000330583],[3,24,8,0.00021870800000000002],[2,17,8,0.000133167],[1,12,8,7.8625e-5],[0,7,11,3.9625e-5]],"inputs":[["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"stop":[["saturated",1]],"time":13.924072265625,"type":"simplify"},{"compiler":[[13,8]],"time":0.31103515625,"type":"eval"},{"alts":[["(-.f64 (log1p.f64 N) (log.f64 N))","next",29.64113548263881]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[29.64113548263881],"time":0.765869140625,"type":"prune"},{"compiler":[[11,4]],"locations":[["(-.f64 (log1p.f64 N) (log.f64 N))",3.2539147096013927,true]],"time":3.8291015625,"type":"localize"},{"count":[[1,12]],"series":[["(-.f64 (log1p.f64 N) (log.f64 N))","N","-inf",0.416015625],["(-.f64 (log1p.f64 N) (log.f64 N))","N","inf",0.44287109375],["(-.f64 (log1p.f64 N) (log.f64 N))","N","0",0.43798828125]],"time":1.348876953125,"type":"series"},{"count":[[1,35]],"egraph":[[2,1453,8,0.015303583],[1,106,8,0.001979292],[0,5,8,0.000134625]],"inputs":[["(-.f64 (log1p.f64 N) (log.f64 N))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 N) (*.f64 (neg.f64 (log.f64 N)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (neg.f64 (log.f64 N)) 1 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 N))) (pow.f64 (cbrt.f64 (log.f64 N)) 2) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (neg.f64 (sqrt.f64 (log.f64 N))) (sqrt.f64 (log.f64 N)) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) 2) (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) (sqrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 N) 3) (pow.f64 (log.f64 N) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 N) 2) (*.f64 (log.f64 N) (+.f64 (log1p.f64 N) (log.f64 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 N) 2) (pow.f64 (log.f64 N) 2)) (/.f64 1 (+.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log.f64 N))) (-.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log1p.f64 N) 2) (*.f64 (log.f64 N) (+.f64 (log1p.f64 N) (log.f64 N)))) (-.f64 (pow.f64 (log1p.f64 N) 3) (pow.f64 (log.f64 N) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (log1p.f64 N) (log.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) 2) (pow.f64 (log.f64 N) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 N) 3) (pow.f64 (log.f64 N) 3)) (+.f64 (pow.f64 (log1p.f64 N) 2) (*.f64 (log.f64 N) (+.f64 (log1p.f64 N) (log.f64 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 N) 2) (pow.f64 (log.f64 N) 2)) (+.f64 (log1p.f64 N) (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) 3) (pow.f64 (log.f64 N) 3))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 N) 2) (*.f64 (log.f64 N) (+.f64 (log1p.f64 N) (log.f64 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) 2) (pow.f64 (log.f64 N) 2))) (neg.f64 (+.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 N) 3) (pow.f64 (neg.f64 (log.f64 N)) 3)) (+.f64 (pow.f64 (log1p.f64 N) 2) (-.f64 (*.f64 (neg.f64 (log.f64 N)) (neg.f64 (log.f64 N))) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 N) 2) (*.f64 (neg.f64 (log.f64 N)) (neg.f64 (log.f64 N)))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log1p.f64 N) (log.f64 N))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 N 1) N))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log1p.f64 N) (log.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 N) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 N)) 2) (cbrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))))))"]],"rules":[["egg-rr",35]],"stop":[["node limit",1]],"time":33.68896484375,"type":"rewrite"},{"count":[[47,50]],"egraph":[[4,2107,181,0.016902625],[3,646,181,0.0048816250000000005],[2,237,185,0.001671291],[1,95,188,0.000640333],[0,36,192,0.00019175]],"inputs":[["(*.f64 -1 (log.f64 N))","(+.f64 N (*.f64 -1 (log.f64 N)))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (*.f64 -1/2 (pow.f64 N 2))))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (+.f64 (*.f64 1/3 (pow.f64 N 3)) (*.f64 -1/2 (pow.f64 N 2)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (log.f64 N))","(neg.f64 (log.f64 N))","(+.f64 N (*.f64 -1 (log.f64 N)))","(+.f64 N (neg.f64 (log.f64 N)))","(-.f64 N (log.f64 N))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (*.f64 -1/2 (pow.f64 N 2))))","(+.f64 N (fma.f64 -1 (log.f64 N) (*.f64 -1/2 (*.f64 N N))))","(+.f64 N (-.f64 (*.f64 -1/2 (*.f64 N N)) (log.f64 N)))","(-.f64 (fma.f64 -1/2 (*.f64 N N) N) (log.f64 N))","(-.f64 (*.f64 N (fma.f64 N -1/2 1)) (log.f64 N))","(+.f64 N (+.f64 (*.f64 -1 (log.f64 N)) (+.f64 (*.f64 1/3 (pow.f64 N 3)) (*.f64 -1/2 (pow.f64 N 2)))))","(+.f64 N (fma.f64 -1 (log.f64 N) (fma.f64 1/3 (pow.f64 N 3) (*.f64 -1/2 (*.f64 N N)))))","(+.f64 N (-.f64 (fma.f64 -1/2 (*.f64 N N) (*.f64 1/3 (pow.f64 N 3))) (log.f64 N)))","(+.f64 (-.f64 N (log.f64 N)) (*.f64 (*.f64 N N) (+.f64 -1/2 (*.f64 N 1/3))))","(fma.f64 (*.f64 N N) (fma.f64 N 1/3 -1/2) (-.f64 N (log.f64 N)))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (/.f64 1/2 (*.f64 N N)))","(+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N)))","(-.f64 (/.f64 1 N) (/.f64 (/.f64 1/2 N) N))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (/.f64 1/3 (pow.f64 N 3))) (/.f64 1/2 (*.f64 N N)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N))))","(+.f64 (+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N))) (/.f64 1/3 (pow.f64 N 3)))","(+.f64 (/.f64 1 N) (-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 (/.f64 1/2 N) N)))","(+.f64 (/.f64 1 N) (*.f64 (/.f64 1 (*.f64 N N)) (-.f64 (/.f64 1/3 N) 1/2)))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(-.f64 (+.f64 (/.f64 1 N) (/.f64 1/3 (pow.f64 N 3))) (+.f64 (/.f64 1/2 (*.f64 N N)) (/.f64 1/4 (pow.f64 N 4))))","(+.f64 (+.f64 (/.f64 1/3 (pow.f64 N 3)) (-.f64 (/.f64 1 N) (/.f64 1/4 (pow.f64 N 4)))) (/.f64 -1/2 (*.f64 N N)))","(+.f64 (+.f64 (+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N))) (/.f64 1/3 (pow.f64 N 3))) (/.f64 -1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1 N) (+.f64 (/.f64 1/3 (pow.f64 N 3)) (-.f64 (/.f64 -1/4 (pow.f64 N 4)) (/.f64 (/.f64 1/2 N) N))))","(+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))))","(/.f64 1 N)","(-.f64 (/.f64 1 N) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (/.f64 1 N) (/.f64 1/2 (*.f64 N N)))","(+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N)))","(-.f64 (/.f64 1 N) (/.f64 (/.f64 1/2 N) N))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2))))","(-.f64 (+.f64 (/.f64 1 N) (/.f64 1/3 (pow.f64 N 3))) (/.f64 1/2 (*.f64 N N)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N))))","(+.f64 (+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N))) (/.f64 1/3 (pow.f64 N 3)))","(+.f64 (/.f64 1 N) (-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 (/.f64 1/2 N) N)))","(+.f64 (/.f64 1 N) (*.f64 (/.f64 1 (*.f64 N N)) (-.f64 (/.f64 1/3 N) 1/2)))","(-.f64 (+.f64 (/.f64 1 N) (*.f64 1/3 (/.f64 1 (pow.f64 N 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 N 4))) (*.f64 1/2 (/.f64 1 (pow.f64 N 2)))))","(-.f64 (+.f64 (/.f64 1 N) (/.f64 1/3 (pow.f64 N 3))) (+.f64 (/.f64 1/2 (*.f64 N N)) (/.f64 1/4 (pow.f64 N 4))))","(+.f64 (+.f64 (/.f64 1/3 (pow.f64 N 3)) (-.f64 (/.f64 1 N) (/.f64 1/4 (pow.f64 N 4)))) (/.f64 -1/2 (*.f64 N N)))","(+.f64 (+.f64 (+.f64 (/.f64 1 N) (/.f64 -1/2 (*.f64 N N))) (/.f64 1/3 (pow.f64 N 3))) (/.f64 -1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1 N) (+.f64 (/.f64 1/3 (pow.f64 N 3)) (-.f64 (/.f64 -1/4 (pow.f64 N 4)) (/.f64 (/.f64 1/2 N) N))))","(+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))))"]],"stop":[["node limit",1]],"time":30.2841796875,"type":"simplify"},{"compiler":[[630,282]],"time":7.059814453125,"type":"eval"},{"alts":[["(+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))))","next",31.924108411600688],["(-.f64 (log1p.f64 N) (log.f64 N))","done",29.64113548263881]],"compiler":[[22,17],[6,4],[22,17]],"count":[[51,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[50,1],"picked":[1,1]}],"min-error":[0.01171875],"time":6.80322265625,"type":"prune"},{"compiler":[[83,59]],"locations":[["(-.f64 1/3 (/.f64 1/4 N))",0.01953125,true],["(*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))",0.1171875,true],["(/.f64 1 (pow.f64 N 3))",0.27699799376765843,true],["(/.f64 -1/2 (*.f64 N N))",0.4365141566250833,true]],"time":20.0068359375,"type":"localize"},{"count":[[4,36]],"series":[["(-.f64 1/3 (/.f64 1/4 N))","N","-inf",0.14599609375],["(-.f64 1/3 (/.f64 1/4 N))","N","inf",0.168212890625],["(-.f64 1/3 (/.f64 1/4 N))","N","0",0.18115234375],["(*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))","N","-inf",0.35693359375],["(*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))","N","inf",0.5439453125],["(*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))","N","0",0.424072265625],["(/.f64 1 (pow.f64 N 3))","N","-inf",0.26708984375],["(/.f64 1 (pow.f64 N 3))","N","inf",0.14990234375],["(/.f64 1 (pow.f64 N 3))","N","0",0.453857421875],["(/.f64 -1/2 (*.f64 N N))","N","-inf",0.148193359375],["(/.f64 -1/2 (*.f64 N N))","N","inf",0.27197265625],["(/.f64 -1/2 (*.f64 N N))","N","0",0.531005859375]],"time":3.79296875,"type":"series"},{"count":[[4,159]],"egraph":[[2,3821,31,0.029786458000000002],[1,319,31,0.005956583],[0,14,31,0.000538166]],"inputs":[["(/.f64 -1/2 (*.f64 N N))","(/.f64 1 (pow.f64 N 3))","(*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))","(-.f64 1/3 (/.f64 1/4 N))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 -1/2 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 -1/2) (pow.f64 N -2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 -1/2) (pow.f64 N -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -1/2) (pow.f64 N -2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -1/2) (pow.f64 N -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 -1/2 (pow.f64 N -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (pow.f64 N -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -1/2 (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/2 (pow.f64 N -2))) (cbrt.f64 (/.f64 1/4 (pow.f64 N 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/4 (pow.f64 N 4))) (cbrt.f64 (*.f64 -1/2 (pow.f64 N -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 1 (*.f64 N (neg.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 -1/2) N) (/.f64 (sqrt.f64 -1/2) N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/2 N) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/2 (pow.f64 N -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/4 (pow.f64 N 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sqrt.f64 -1/2) N) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -1/2 (pow.f64 N -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 -1/2) N) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 N N) -2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 N N) -2) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1/4 (pow.f64 N 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -1/2) (pow.f64 N -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 -1/2 (pow.f64 N -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 -1/2) N) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -1/2 (pow.f64 N -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -1/2 (pow.f64 N -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -1/2 (pow.f64 N -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 -1/2 (pow.f64 N -2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 N -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 N -3))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 N -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 N -3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 N -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 N -3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 N -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -2) (/.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 N -3/2) (pow.f64 N -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (pow.f64 N 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 N) (pow.f64 N -2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 N -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 N N) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N 9) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -6) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -9) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 N) -9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N -3/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 N) -6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 N) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 N 3/2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (pow.f64 N 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 N -6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 N -3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 N -9))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -3 (log.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 N) -3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 N)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -3 (log.f64 N)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 N -3) (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (pow.f64 N -3)) (*.f64 (/.f64 -1/4 N) (pow.f64 N -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 N -3) 1/3) (*.f64 (pow.f64 N -3) (/.f64 -1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 N -3)) (+.f64 1/3 (/.f64 -1/4 N)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 N -3)) (+.f64 1/3 (/.f64 -1/4 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 N -3)) (+.f64 1/3 (/.f64 -1/4 N))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 N -3)) (+.f64 1/3 (/.f64 -1/4 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 N -3) (+.f64 1/3 (/.f64 -1/4 N))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 (/.f64 1/4 N) (pow.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 N 3) (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/3 (/.f64 -1/4 N)) (pow.f64 N 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) 2) (/.f64 (pow.f64 N 3) (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) (/.f64 (pow.f64 N 3) (sqrt.f64 (+.f64 1/3 (/.f64 -1/4 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3))) (*.f64 (pow.f64 N 3) (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2))) (*.f64 (pow.f64 N 3) (+.f64 1/3 (/.f64 1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1/3 (/.f64 -1/4 N))) (neg.f64 (pow.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3)))) (*.f64 (neg.f64 (pow.f64 N 3)) (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2)))) (*.f64 (neg.f64 (pow.f64 N 3)) (+.f64 1/3 (/.f64 1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3))) 1) (*.f64 (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9) (pow.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2))) 1) (*.f64 (+.f64 1/3 (/.f64 1/4 N)) (pow.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3))) -1) (*.f64 (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9) (neg.f64 (pow.f64 N 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2))) -1) (*.f64 (+.f64 1/3 (/.f64 1/4 N)) (neg.f64 (pow.f64 N 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1/3 (/.f64 -1/4 N)) (*.f64 N N)) N)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1/3 (/.f64 -1/4 N)) N) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1/3 (/.f64 -1/4 N)) (pow.f64 N 3/2)) (pow.f64 N 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1/3 (/.f64 -1/4 N)) 1) (pow.f64 N 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 1/3 (/.f64 -1/4 N))) (neg.f64 (pow.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3))) (pow.f64 N -3)) (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2))) (pow.f64 N -3)) (+.f64 1/3 (/.f64 1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 N -3) (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3)))) (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 N -3) (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2)))) (+.f64 1/3 (/.f64 1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1/3 (/.f64 -1/4 N)) -1) (neg.f64 (pow.f64 N 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 N -3) (+.f64 1/3 (/.f64 -1/4 N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) N) 6) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) N) 9) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) N) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 N -3/2) (sqrt.f64 (+.f64 1/3 (/.f64 -1/4 N)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3) (pow.f64 N 9)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 N -9) (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3) (pow.f64 N -9)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 N 3) (+.f64 1/3 (/.f64 -1/4 N))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) N) 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 N -3)) (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 N -3) (+.f64 1/3 (/.f64 -1/4 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) N) 9))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3) (pow.f64 N 9)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 N -9) (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3) (pow.f64 N -9)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 N -3) (+.f64 1/3 (/.f64 -1/4 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 N -3) (+.f64 1/3 (/.f64 -1/4 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 -3 (log.f64 N) (log.f64 (+.f64 1/3 (/.f64 -1/4 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 -3 (log.f64 N) (log.f64 (+.f64 1/3 (/.f64 -1/4 N)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 N -3) 1/3 (*.f64 (pow.f64 N -3) (/.f64 -1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (pow.f64 N -3) (*.f64 (/.f64 -1/4 N) (pow.f64 N -3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/3 (/.f64 -1/4 N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/3 (*.f64 (/.f64 -1/4 N) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 1/3 (/.f64 -1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/4 N) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 1/3 (/.f64 -1/4 N)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 1/3 (/.f64 -1/4 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 1/3 (/.f64 -1/4 N))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 1/3 (/.f64 -1/4 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1/3 (/.f64 -1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/3 (/.f64 -1/4 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) (pow.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) 2) (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) (sqrt.f64 (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3))) (/.f64 1 (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2))) (/.f64 1 (+.f64 1/3 (/.f64 1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9) (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1/3 (/.f64 1/4 N)) (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3))) (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2))) (+.f64 1/3 (/.f64 1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3)))) (neg.f64 (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2)))) (neg.f64 (+.f64 1/3 (/.f64 1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/27 (pow.f64 (/.f64 -1/4 N) 3)) (+.f64 1/9 (-.f64 (pow.f64 (/.f64 -1/4 N) 2) (*.f64 1/3 (/.f64 -1/4 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (pow.f64 (/.f64 -1/4 N) 2)) (-.f64 1/3 (/.f64 -1/4 N)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1/3 (/.f64 -1/4 N))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 1/4 N) (+.f64 1/3 (/.f64 1/4 N)) 1/9) (-.f64 1/27 (*.f64 1/64 (pow.f64 N -3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1/3 (/.f64 1/4 N)) (-.f64 1/9 (*.f64 1/16 (pow.f64 N -2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 1/3 (/.f64 -1/4 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1/3 (/.f64 -1/4 N)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 1/3 (/.f64 -1/4 N))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 1/3 (/.f64 -1/4 N))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1/4 N) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/4 (neg.f64 (/.f64 1 N)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/16 (pow.f64 N -2))) (neg.f64 (cbrt.f64 (/.f64 1/4 N))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (sqrt.f64 N)) (neg.f64 (/.f64 1/2 (sqrt.f64 N))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1/4 N) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/4 (/.f64 1 N) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 -1/4 N)) 2) (cbrt.f64 (/.f64 -1/4 N)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 -1/4 N)) (sqrt.f64 (/.f64 -1/4 N)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (*.f64 1/16 (pow.f64 N -2)))) (cbrt.f64 (/.f64 1/4 N)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 1/2 (sqrt.f64 N))) (/.f64 1/2 (sqrt.f64 N)) 1/3)))))"]],"rules":[["egg-rr",46],["egg-rr",52],["egg-rr",33],["egg-rr",28]],"stop":[["node limit",1]],"time":57.068115234375,"type":"rewrite"},{"count":[[195,168]],"egraph":[[6,6069,318,0.026928874],[5,4288,318,0.015852166],[4,991,318,0.0075280830000000005],[3,248,318,0.002233291],[2,112,318,0.0008991660000000001],[1,57,318,0.000459624],[0,25,318,0.000179333]],"inputs":[["(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/4 (pow.f64 N 4))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(/.f64 1/3 (pow.f64 N 3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(/.f64 1/3 (pow.f64 N 3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(/.f64 -1/4 N)","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","1/3","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","1/3","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/2 (pow.f64 N 2))","(/.f64 -1/2 (*.f64 N N))","(/.f64 -1/4 (pow.f64 N 4))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(/.f64 1/3 (pow.f64 N 3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(/.f64 1/3 (pow.f64 N 3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 N 3))) (*.f64 1/4 (/.f64 1 (pow.f64 N 4))))","(-.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 1/4 (pow.f64 N 4)))","(+.f64 (/.f64 1/3 (pow.f64 N 3)) (/.f64 -1/4 (pow.f64 N 4)))","(*.f64 (/.f64 -1 (pow.f64 N 3)) (+.f64 (/.f64 1/4 N) -1/3))","(/.f64 -1/4 N)","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","1/3","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","1/3","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))","(-.f64 1/3 (*.f64 1/4 (/.f64 1 N)))","(-.f64 1/3 (/.f64 1/4 N))","(+.f64 1/3 (/.f64 -1/4 N))"]],"stop":[["node limit",1]],"time":44.6259765625,"type":"simplify"},{"compiler":[[4124,3086]],"time":48.071044921875,"type":"eval"},{"alts":[["(+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))))","done",31.924108411600688],["(-.f64 (log1p.f64 N) (log.f64 N))","done",29.64113548263881]],"compiler":[[22,17],[6,4]],"count":[[170,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[168,0],"picked":[1,1]}],"min-error":[0.01171875],"time":39.239990234375,"type":"prune"},{"accuracy":[0.01171875],"baseline":[29.64113548263881],"branch":[["N",0.01171875,2],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))",0.01171875,2]],"compiler":[[2,1],[8,6],[34,24]],"count":[[3,2]],"inputs":[["(+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))"]],"link":["."],"name":["2log (problem 3.3.6)"],"oracle":[61.55352514423948],"outputs":[["(+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N)))))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"time":10.1298828125,"times":[["N",5.64013671875],["(-.f64 (log.f64 (+.f64 N 1)) (log.f64 N))",3.65380859375]],"type":"regimes"},{"bstep":[[3.1358257277958046e-5,1.7135645235516355,0.074951171875]],"compiler":[[4,3],[8,6]],"method":["left-value"],"time":0.135009765625,"type":"bsearch"},{"compiler":[[37,27]],"egraph":[[4,55,55,0.000276334],[3,53,55,0.000220959],[2,49,55,0.000166126],[1,38,55,0.000111668],[0,27,55,5.1334e-5]],"inputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N 1)) (log.f64 N)) 7378697629483821/147573952589676412928) (+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N))))) (-.f64 (log1p.f64 N) (log.f64 N)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N 1)) (log.f64 N)) 7378697629483821/147573952589676412928) (+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (-.f64 1/3 (/.f64 1/4 N))))) (-.f64 (log1p.f64 N) (log.f64 N)))","(if (<=.f64 (-.f64 (log.f64 (+.f64 N 1)) (log.f64 N)) 7378697629483821/147573952589676412928) (+.f64 (/.f64 1 N) (+.f64 (/.f64 -1/2 (*.f64 N N)) (*.f64 (/.f64 1 (pow.f64 N 3)) (+.f64 1/3 (/.f64 -1/4 N))))) (-.f64 (log1p.f64 N) (log.f64 N)))"]],"stop":[["done",1],["saturated",1]],"time":9.468017578125,"type":"simplify"},{"time":0.02001953125,"type":"soundness"},{"compiler":[[37,27]],"remove-preprocessing":[[]],"time":14.862060546875,"type":"end"}]
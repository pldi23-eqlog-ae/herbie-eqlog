[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.1793368048129298,0.7933704299876351,0.02729276519943513],[11,0.13255329051390463,0.8576977621487947,0.009748947337300695],[10,0.10916153336439205,0.8888867716814781,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":137.235107421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",108.83935546875,2442],["body",256,"valid",372.640625,8256]],"time":491.291015625,"type":"sample"},{"compiler":[[13,8]],"egraph":[[0,4,4,2.584e-6],[7,7823,77,0.042817749],[6,4032,77,0.031302583],[5,2234,77,0.014577583000000002],[4,1050,77,0.006562166],[3,506,77,0.002623958],[2,205,77,0.001121875],[1,76,77,0.000394],[0,31,77,0.000114]],"inputs":[["0","1","2","3"],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","(+.f64 (*.f64 (/.f64 y x) (-.f64 z t)) t)","(+.f64 (*.f64 (/.f64 z y) (-.f64 x t)) t)","(+.f64 (*.f64 (/.f64 t y) (-.f64 z x)) x)","(+.f64 (*.f64 (/.f64 x z) (-.f64 y t)) t)","(+.f64 (*.f64 (/.f64 x t) (-.f64 z y)) y)","(+.f64 (*.f64 (/.f64 x y) (-.f64 t z)) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","(fma.f64 (/.f64 x y) (-.f64 z t) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (/.f64 y x) (-.f64 z t)) t)","(fma.f64 (/.f64 y x) (-.f64 z t) t)","(fma.f64 (-.f64 z t) (/.f64 y x) t)","(+.f64 (*.f64 (/.f64 z y) (-.f64 x t)) t)","(fma.f64 (/.f64 z y) (-.f64 x t) t)","(+.f64 (*.f64 (/.f64 t y) (-.f64 z x)) x)","(fma.f64 (/.f64 t y) (-.f64 z x) x)","(+.f64 (*.f64 (/.f64 x z) (-.f64 y t)) t)","(fma.f64 (/.f64 x z) (-.f64 y t) t)","(fma.f64 (/.f64 (-.f64 y t) z) x t)","(+.f64 (*.f64 (/.f64 x t) (-.f64 z y)) y)","(fma.f64 (/.f64 x t) (-.f64 z y) y)","(+.f64 (*.f64 (/.f64 x y) (-.f64 t z)) z)","(fma.f64 (/.f64 x y) (-.f64 t z) z)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":67.344970703125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[14,3730,11,0.057551917],[13,3730,11,0.050164459],[12,3725,11,0.043853625],[11,3695,11,0.037505834],[10,3657,11,0.030884625],[9,3006,11,0.02446525],[8,2007,11,0.016156708],[7,1031,11,0.008749333],[6,546,11,0.004066875],[5,318,11,0.00210975],[4,178,11,0.001117458],[3,84,11,0.000544958],[2,38,11,0.000252375],[1,16,11,0.00011062499999999999],[0,9,11,4.0375e-5]],"inputs":[["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","(fma.f64 (/.f64 x y) (-.f64 z t) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)"]],"stop":[["saturated",1]],"time":68.72705078125,"type":"simplify"},{"compiler":[[21,10]],"time":0.306884765625,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 (-.f64 z t) y) t)","fresh",6.590068228811646],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","next",2.3253742467294547]],"compiler":[[12,7],[13,8],[12,7],[13,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0546875],"time":1.56103515625,"type":"prune"},{"compiler":[[30,8]],"locations":[["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)",0.00390625,true],["(*.f64 (/.f64 x y) (-.f64 z t))",7.399909749386931,true]],"time":5.368896484375,"type":"localize"},{"count":[[2,96]],"series":[["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","t","-inf",0.212890625],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","t","inf",0.180908203125],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","t","0",0.200927734375],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","z","-inf",0.1728515625],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","z","inf",0.18310546875],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","z","0",0.2021484375],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","y","-inf",0.158203125],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","y","inf",0.197998046875],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","y","0",0.156982421875],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","x","-inf",0.18701171875],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","x","inf",0.368896484375],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","x","0",0.204833984375],["(*.f64 (/.f64 x y) (-.f64 z t))","t","-inf",0.338134765625],["(*.f64 (/.f64 x y) (-.f64 z t))","t","inf",0.39306640625],["(*.f64 (/.f64 x y) (-.f64 z t))","t","0",0.343994140625],["(*.f64 (/.f64 x y) (-.f64 z t))","z","-inf",0.77978515625],["(*.f64 (/.f64 x y) (-.f64 z t))","z","inf",0.442138671875],["(*.f64 (/.f64 x y) (-.f64 z t))","z","0",0.3740234375],["(*.f64 (/.f64 x y) (-.f64 z t))","y","-inf",0.328125],["(*.f64 (/.f64 x y) (-.f64 z t))","y","inf",0.59716796875],["(*.f64 (/.f64 x y) (-.f64 z t))","y","0",0.461181640625],["(*.f64 (/.f64 x y) (-.f64 z t))","x","-inf",0.39892578125],["(*.f64 (/.f64 x y) (-.f64 z t))","x","inf",0.39501953125],["(*.f64 (/.f64 x y) (-.f64 z t))","x","0",0.572998046875]],"time":8.13720703125,"type":"series"},{"count":[[2,111]],"egraph":[[2,3146,21,0.026242085],[1,206,21,0.0038130010000000003],[0,9,21,0.000206209]],"inputs":[["(*.f64 (/.f64 x y) (-.f64 z t))","(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 x y) (-.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (/.f64 x y)) (*.f64 (neg.f64 t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) z) (*.f64 (/.f64 x y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 z t)) (/.f64 x y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 z t)) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 z t)) (/.f64 x y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 z t)) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 x y) (-.f64 z t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y (-.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z t) (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 x (-.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 z 3) (pow.f64 t 3)) (*.f64 (/.f64 y x) (fma.f64 t (+.f64 z t) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z z) (*.f64 t t)) (*.f64 (/.f64 y x) (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 z t)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 z t))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 (pow.f64 z 3) (pow.f64 t 3))) (*.f64 y (fma.f64 t (+.f64 z t) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 (pow.f64 z 3) (pow.f64 t 3))) (*.f64 (neg.f64 y) (fma.f64 t (+.f64 z t) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 (*.f64 z z) (*.f64 t t))) (*.f64 y (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 (*.f64 z z) (*.f64 t t))) (*.f64 (neg.f64 y) (+.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z 3) (pow.f64 t 3)) x) (*.f64 (fma.f64 t (+.f64 z t) (*.f64 z z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 z z) (*.f64 t t)) x) (*.f64 (+.f64 z t) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z 3) (pow.f64 t 3)) 1) (*.f64 (fma.f64 t (+.f64 z t) (*.f64 z z)) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 z z) (*.f64 t t)) 1) (*.f64 (+.f64 z t) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z 3) (pow.f64 t 3)) (neg.f64 x)) (*.f64 (fma.f64 t (+.f64 z t) (*.f64 z z)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 z z) (*.f64 t t)) (neg.f64 x)) (*.f64 (+.f64 z t) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 z t)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 z t)) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 z t)) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 z t)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z 3) (pow.f64 t 3)) (/.f64 x y)) (fma.f64 t (+.f64 z t) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 z z) (*.f64 t t)) (/.f64 x y)) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (-.f64 (pow.f64 z 3) (pow.f64 t 3))) (fma.f64 t (+.f64 z t) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) (-.f64 (*.f64 z z) (*.f64 t t))) (+.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z t) (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 x (-.f64 z t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 z t)) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) (-.f64 z t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x y) (-.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x y) (-.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x y) (-.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x y) (-.f64 z t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) z (*.f64 (/.f64 x y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 x y) (*.f64 (neg.f64 t) (/.f64 x y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) (fma.f64 (/.f64 x y) (-.f64 z t) (neg.f64 t))) (/.f64 (*.f64 t t) (fma.f64 (/.f64 x y) (-.f64 z t) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 x y) (-.f64 z t) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)) 2) (cbrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)) (sqrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3)) (/.f64 1 (fma.f64 t (-.f64 t (*.f64 (/.f64 x y) (-.f64 z t))) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) (*.f64 t t)) (/.f64 1 (fma.f64 (/.f64 x y) (-.f64 z t) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 t (-.f64 t (*.f64 (/.f64 x y) (-.f64 z t))) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2)) (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 x y) (-.f64 z t) (neg.f64 t)) (-.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3)) (fma.f64 t (-.f64 t (*.f64 (/.f64 x y) (-.f64 z t))) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3)) (fma.f64 t t (-.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) (*.f64 (/.f64 x y) (*.f64 (-.f64 z t) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) (*.f64 t t)) (fma.f64 (/.f64 x y) (-.f64 z t) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3))) (neg.f64 (fma.f64 t (-.f64 t (*.f64 (/.f64 x y) (-.f64 z t))) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) (*.f64 t t))) (neg.f64 (fma.f64 (/.f64 x y) (-.f64 z t) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 t t) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2)) (-.f64 t (*.f64 (/.f64 x y) (-.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 t (-.f64 t (*.f64 (/.f64 x y) (-.f64 z t))) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2)) (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 x y) (-.f64 z t) (neg.f64 t)) (-.f64 (pow.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 2) (*.f64 t t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 t)) (pow.f64 (exp.f64 (-.f64 z t)) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 t) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) (-.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 t)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) (-.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) (-.f64 z t)))) (exp.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (-.f64 z t)) (/.f64 x y)) (+.f64 1 (expm1.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x y) (-.f64 z t)))) (+.f64 1 (expm1.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 x y) (-.f64 z t) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (/.f64 1 y) (-.f64 z t)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (-.f64 z t) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t 1 (*.f64 (/.f64 x y) (-.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z t) (/.f64 x y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x y) (-.f64 z t)) 1 t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 t (*.f64 (/.f64 x y) (-.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 x y) (-.f64 z t)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) 2) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) 2) (cbrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (pow.f64 (cbrt.f64 t) 2) (*.f64 (/.f64 x y) (-.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 t) (*.f64 (/.f64 x y) (-.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) (*.f64 (cbrt.f64 (-.f64 z t)) (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (*.f64 (cbrt.f64 (/.f64 x y)) (-.f64 z t)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) (sqrt.f64 (*.f64 (/.f64 x y) (-.f64 z t))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (sqrt.f64 t) (*.f64 (/.f64 x y) (-.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 z t)) (*.f64 (sqrt.f64 (-.f64 z t)) (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (*.f64 (sqrt.f64 (/.f64 x y)) (-.f64 z t)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (-.f64 z t)) (/.f64 1 y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 y)) (/.f64 (-.f64 z t) (sqrt.f64 y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 (-.f64 z t) y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (/.f64 (-.f64 z t) (cbrt.f64 y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x y) (cbrt.f64 (pow.f64 (-.f64 z t) 2))) (cbrt.f64 (-.f64 z t)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x y) (sqrt.f64 (-.f64 z t))) (sqrt.f64 (-.f64 z t)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z t) (cbrt.f64 (pow.f64 (/.f64 x y) 2))) (cbrt.f64 (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z t) (sqrt.f64 (/.f64 x y))) (sqrt.f64 (/.f64 x y)) t)))))"]],"rules":[["egg-rr",63],["egg-rr",48]],"stop":[["node limit",1]],"time":49.409912109375,"type":"rewrite"},{"count":[[207,130]],"egraph":[[11,3797,948,0.056089001],[10,3797,948,0.048552876],[9,3789,948,0.042432459],[8,3763,948,0.036259459],[7,3665,948,0.029651084],[6,2960,948,0.023058625],[5,1553,948,0.014659542000000001],[4,744,948,0.006694542],[3,407,948,0.0030725830000000003],[2,193,948,0.001384583],[1,81,1056,0.000580083],[0,33,1062,0.000214167]],"inputs":[["(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","t","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(/.f64 (*.f64 z x) y)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(/.f64 (*.f64 z x) y)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1)))","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(neg.f64 (/.f64 t (/.f64 y x)))","(/.f64 (*.f64 (neg.f64 t) x) y)","(*.f64 x (/.f64 (neg.f64 t) y))","(*.f64 (/.f64 t y) (neg.f64 x))","(*.f64 t (/.f64 (neg.f64 x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 z (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 z (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 z (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(neg.f64 (/.f64 t (/.f64 y x)))","(/.f64 (*.f64 (neg.f64 t) x) y)","(*.f64 x (/.f64 (neg.f64 t) y))","(*.f64 (/.f64 t y) (neg.f64 x))","(*.f64 t (/.f64 (neg.f64 x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(neg.f64 (/.f64 t (/.f64 y x)))","(/.f64 (*.f64 (neg.f64 t) x) y)","(*.f64 x (/.f64 (neg.f64 t) y))","(*.f64 (/.f64 t y) (neg.f64 x))","(*.f64 t (/.f64 (neg.f64 x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","t","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 (-.f64 z t) (/.f64 x y))","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (neg.f64 (/.f64 t (/.f64 y x))))","(-.f64 t (*.f64 (/.f64 t y) x))","(-.f64 t (*.f64 x (/.f64 t y)))","(fma.f64 t (/.f64 (neg.f64 x) y) t)","(-.f64 t (/.f64 (*.f64 t x) y))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 z x) y)","(*.f64 z (/.f64 x y))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 z x) y)","(*.f64 z (/.f64 x y))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 z x) y)","(*.f64 z (/.f64 x y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 t (neg.f64 (/.f64 t (/.f64 y x))))","(-.f64 t (*.f64 (/.f64 t y) x))","(-.f64 t (*.f64 x (/.f64 t y)))","(fma.f64 t (/.f64 (neg.f64 x) y) t)","(-.f64 t (/.f64 (*.f64 t x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1)))","(+.f64 t (neg.f64 (/.f64 t (/.f64 y x))))","(-.f64 t (*.f64 (/.f64 t y) x))","(-.f64 t (*.f64 x (/.f64 t y)))","(fma.f64 t (/.f64 (neg.f64 x) y) t)","(-.f64 t (/.f64 (*.f64 t x) y))","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(fma.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)"]],"stop":[["saturated",1]],"time":89.39990234375,"type":"simplify"},{"compiler":[[1957,552]],"time":14.7041015625,"type":"eval"},{"alts":[["(fma.f64 (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (/.f64 (-.f64 z t) (cbrt.f64 y)) t)","fresh",3.308716155903548],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","done",2.3253742467294547],["(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","fresh",6.586161978811646],["(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","fresh",4.690017531413629],["(+.f64 (/.f64 (/.f64 (*.f64 x (-.f64 z t)) (sqrt.f64 y)) (sqrt.f64 y)) t)","fresh",32.80748856579188],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","next",2.3019367467294547]],"compiler":[[18,11],[13,8],[15,9],[19,13],[17,10],[13,8],[18,11],[15,9],[19,13],[17,10],[13,8]],"count":[[132,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[130,5],"picked":[1,1]}],"min-error":[0],"time":31.5390625,"type":"prune"},{"compiler":[[30,8]],"locations":[["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)",0.00390625,true],["(/.f64 (-.f64 z t) (/.f64 y x))",7.842333379465191,true]],"time":5.31884765625,"type":"localize"},{"count":[[2,96]],"series":[["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","x","-inf",0.15087890625],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","x","inf",0.1708984375],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","x","0",0.14794921875],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","y","-inf",0.172119140625],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","y","inf",0.156982421875],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","y","0",0.14990234375],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","t","-inf",0.177001953125],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","t","inf",0.163818359375],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","t","0",0.174072265625],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","z","-inf",0.162109375],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","z","inf",0.161865234375],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","z","0",0.180908203125],["(/.f64 (-.f64 z t) (/.f64 y x))","x","-inf",0.155029296875],["(/.f64 (-.f64 z t) (/.f64 y x))","x","inf",0.172119140625],["(/.f64 (-.f64 z t) (/.f64 y x))","x","0",0.14501953125],["(/.f64 (-.f64 z t) (/.f64 y x))","y","-inf",0.24609375],["(/.f64 (-.f64 z t) (/.f64 y x))","y","inf",0.369873046875],["(/.f64 (-.f64 z t) (/.f64 y x))","y","0",0.1650390625],["(/.f64 (-.f64 z t) (/.f64 y x))","t","-inf",0.1630859375],["(/.f64 (-.f64 z t) (/.f64 y x))","t","inf",0.166015625],["(/.f64 (-.f64 z t) (/.f64 y x))","t","0",0.175048828125],["(/.f64 (-.f64 z t) (/.f64 y x))","z","-inf",0.16796875],["(/.f64 (-.f64 z t) (/.f64 y x))","z","inf",0.18798828125],["(/.f64 (-.f64 z t) (/.f64 y x))","z","0",0.2109375]],"time":4.56103515625,"type":"series"},{"count":[[2,157]],"egraph":[[2,3543,21,0.027605833],[1,214,21,0.004106958],[0,9,23,0.00021]],"inputs":[["(/.f64 (-.f64 z t) (/.f64 y x))","(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (/.f64 x y)) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 z t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (-.f64 z t) y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (-.f64 z t) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (-.f64 z t) y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (-.f64 z t) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z (/.f64 x y)) (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 z t) (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z t) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (-.f64 z t) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 z t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) 2) (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) (*.f64 (cbrt.f64 (-.f64 z t)) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) (sqrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 z t)) (*.f64 (sqrt.f64 (-.f64 z t)) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 z t)) (/.f64 1 (/.f64 (neg.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (-.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z t) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (-.f64 z t) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (-.f64 z t) (cbrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 y x))) (/.f64 (-.f64 z t) (sqrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) 1) (/.f64 (cbrt.f64 (-.f64 z t)) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 z t)) 1) (/.f64 (sqrt.f64 (-.f64 z t)) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 z t)) y) (/.f64 (sqrt.f64 (-.f64 z t)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) y) (/.f64 (cbrt.f64 (-.f64 z t)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 z t)) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (sqrt.f64 (-.f64 z t)) (cbrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) (sqrt.f64 (/.f64 y x))) (/.f64 (cbrt.f64 (-.f64 z t)) (sqrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z t) 1) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z t) (neg.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 z t) y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 z t) y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 z t) y) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y x) (-.f64 z t)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (/.f64 y x) (-.f64 z t)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 z t) (/.f64 (neg.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 (-.f64 z t) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 z t) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 z t) (/.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 x y) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (/.f64 x y)) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 x y))) 2) (cbrt.f64 (*.f64 z (/.f64 x y))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (/.f64 x y))) (sqrt.f64 (*.f64 z (/.f64 x y))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (/.f64 z (/.f64 1 x)) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 z (cbrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (/.f64 y x))) (/.f64 z (sqrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) y) (/.f64 (cbrt.f64 z) (/.f64 1 x)) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) y) (/.f64 (sqrt.f64 z) (/.f64 1 x)) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) (/.f64 y x)) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) (/.f64 y x)) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (cbrt.f64 z) (cbrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 y x))) (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 (/.f64 y x))) (/.f64 (sqrt.f64 z) (sqrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) x (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z 1) (/.f64 x y) (neg.f64 (*.f64 t (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z (neg.f64 y)) (neg.f64 x) (neg.f64 (*.f64 t (/.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z (/.f64 x y)) (-.f64 (*.f64 t (/.f64 x y)) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) (-.f64 (*.f64 (-.f64 z t) (/.f64 x y)) t)) (/.f64 (*.f64 t t) (-.f64 (*.f64 (-.f64 z t) (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 t (*.f64 z (/.f64 x y))) (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 z t) (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)) 2) (cbrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)) (sqrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3)) (/.f64 1 (fma.f64 t (-.f64 t (*.f64 (-.f64 z t) (/.f64 x y))) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) (*.f64 t t)) (/.f64 1 (-.f64 (*.f64 (-.f64 z t) (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 t (-.f64 t (*.f64 (-.f64 z t) (/.f64 x y))) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2)) (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 (-.f64 z t) (/.f64 x y)) t) (-.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3)) (fma.f64 t (-.f64 t (*.f64 (-.f64 z t) (/.f64 x y))) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3)) (fma.f64 t t (-.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) (/.f64 t (/.f64 (/.f64 y x) (-.f64 z t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) (*.f64 t t)) (-.f64 (*.f64 (-.f64 z t) (/.f64 x y)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3))) (neg.f64 (fma.f64 t (-.f64 t (*.f64 (-.f64 z t) (/.f64 x y))) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) (*.f64 t t))) (neg.f64 (-.f64 (*.f64 (-.f64 z t) (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 t t) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2)) (-.f64 t (*.f64 (-.f64 z t) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 t (-.f64 t (*.f64 (-.f64 z t) (/.f64 x y))) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2)) (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 (-.f64 z t) (/.f64 x y)) t) (-.f64 (pow.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 2) (*.f64 t t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 t)) (pow.f64 (exp.f64 x) (/.f64 (-.f64 z t) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 t) (+.f64 1 (expm1.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 t)) (+.f64 1 (expm1.f64 (*.f64 (-.f64 z t) (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 z t) (/.f64 x y)))) (exp.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (/.f64 (-.f64 z t) y)) (+.f64 1 (expm1.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 z t) (/.f64 x y)))) (+.f64 1 (expm1.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (-.f64 z t) (/.f64 x y) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 x y) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t 1 (*.f64 (-.f64 z t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z t) (/.f64 x y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 (-.f64 z t) y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z t) (/.f64 x y)) 1 t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 t (*.f64 (-.f64 z t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 z t) (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (/.f64 x y)) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) 2) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) 2) (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (pow.f64 (cbrt.f64 t) 2) (*.f64 (-.f64 z t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 t) (*.f64 (-.f64 z t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) (*.f64 (cbrt.f64 (-.f64 z t)) (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) (sqrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (sqrt.f64 t) (*.f64 (-.f64 z t) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 z t)) (*.f64 (sqrt.f64 (-.f64 z t)) (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (-.f64 z t)) (/.f64 1 (/.f64 (neg.f64 y) x)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (-.f64 z t) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z t) y) x t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (/.f64 x y))) 2) (cbrt.f64 (*.f64 z (/.f64 x y))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (/.f64 x y))) (sqrt.f64 (*.f64 z (/.f64 x y))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (/.f64 (-.f64 z t) (/.f64 1 x)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (/.f64 z (/.f64 1 x)) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (-.f64 z t) (cbrt.f64 (/.f64 y x))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 z (cbrt.f64 (/.f64 y x))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (/.f64 y x))) (/.f64 (-.f64 z t) (sqrt.f64 (/.f64 y x))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (/.f64 y x))) (/.f64 z (sqrt.f64 (/.f64 y x))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) 1) (/.f64 (cbrt.f64 (-.f64 z t)) (/.f64 y x)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 z t)) 1) (/.f64 (sqrt.f64 (-.f64 z t)) (/.f64 y x)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 z t)) y) (/.f64 (sqrt.f64 (-.f64 z t)) (/.f64 1 x)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) y) (/.f64 (cbrt.f64 (-.f64 z t)) (/.f64 1 x)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (cbrt.f64 (*.f64 (-.f64 z t) (/.f64 x y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (-.f64 z t)) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (sqrt.f64 (-.f64 z t)) (cbrt.f64 (/.f64 y x))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z t) 2)) (sqrt.f64 (/.f64 y x))) (/.f64 (cbrt.f64 (-.f64 z t)) (sqrt.f64 (/.f64 y x))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) y) (/.f64 (cbrt.f64 z) (/.f64 1 x)) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) y) (/.f64 (sqrt.f64 z) (/.f64 1 x)) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) (/.f64 y x)) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) (/.f64 y x)) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (cbrt.f64 z) (cbrt.f64 (/.f64 y x))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 (sqrt.f64 z) (cbrt.f64 (/.f64 y x))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 (/.f64 y x))) (/.f64 (cbrt.f64 z) (sqrt.f64 (/.f64 y x))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 (/.f64 y x))) (/.f64 (sqrt.f64 z) (sqrt.f64 (/.f64 y x))) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) x (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z t) 1) (/.f64 x y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z t) (neg.f64 y)) (neg.f64 x) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z 1) (/.f64 x y) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z (neg.f64 y)) (neg.f64 x) (neg.f64 (-.f64 (*.f64 t (/.f64 x y)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 z t) y) 1) x t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 z t) y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 z t) y) (sqrt.f64 x)) (sqrt.f64 x) t)))))"]],"rules":[["egg-rr",90],["egg-rr",67]],"stop":[["node limit",1]],"time":53.909912109375,"type":"rewrite"},{"count":[[253,174]],"egraph":[[11,3761,948,0.056220416],[10,3761,948,0.048678208],[9,3753,948,0.042566875],[8,3727,948,0.036466291],[7,3629,948,0.029896916],[6,2926,948,0.023268958],[5,1553,948,0.014737249],[4,740,948,0.006770999],[3,407,948,0.003085833],[2,193,948,0.001372416],[1,81,1020,0.0005779579999999999],[0,33,1674,0.000215458]],"inputs":[["(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(/.f64 (*.f64 z x) y)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(/.f64 (*.f64 z x) y)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1)))","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","t","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (*.f64 t x) y))","(neg.f64 (/.f64 (*.f64 t x) y))","(*.f64 t (/.f64 (neg.f64 x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(neg.f64 (/.f64 (*.f64 t x) y))","(*.f64 t (/.f64 (neg.f64 x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(neg.f64 (/.f64 (*.f64 t x) y))","(*.f64 t (/.f64 (neg.f64 x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (neg.f64 (/.f64 (*.f64 t x) y)))","(-.f64 t (/.f64 (*.f64 t x) y))","(-.f64 t (*.f64 t (/.f64 x y)))","(fma.f64 t (/.f64 (neg.f64 x) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 t (neg.f64 (/.f64 (*.f64 t x) y)))","(-.f64 t (/.f64 (*.f64 t x) y))","(-.f64 t (*.f64 t (/.f64 x y)))","(fma.f64 t (/.f64 (neg.f64 x) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1)))","(+.f64 t (neg.f64 (/.f64 (*.f64 t x) y)))","(-.f64 t (/.f64 (*.f64 t x) y))","(-.f64 t (*.f64 t (/.f64 x y)))","(fma.f64 t (/.f64 (neg.f64 x) y) t)","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","t","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","t","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 (-.f64 z t) x) y)","(+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x)))","(*.f64 (/.f64 (-.f64 z t) y) x)","(*.f64 (/.f64 x y) (-.f64 z t))","(/.f64 x (/.f64 y (-.f64 z t)))","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (/.f64 (*.f64 (-.f64 z t) x) y) t)","(+.f64 t (+.f64 (neg.f64 (/.f64 (*.f64 t x) y)) (/.f64 z (/.f64 y x))))","(+.f64 t (*.f64 (/.f64 (-.f64 z t) y) x))","(fma.f64 x (/.f64 (-.f64 z t) y) t)"]],"stop":[["saturated",1]],"time":92.947998046875,"type":"simplify"},{"compiler":[[2776,736]],"time":20.39501953125,"type":"eval"},{"alts":[["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","next",4.690017531413629],["(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","fresh",6.586161978811646],["(+.f64 (fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 z (cbrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y)))) t)","fresh",9.713393937198708],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","done",2.3253742467294547],["(+.f64 (/.f64 (/.f64 (*.f64 x (-.f64 z t)) (sqrt.f64 y)) (sqrt.f64 y)) t)","fresh",32.80748856579188],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","done",2.3019367467294547]],"compiler":[[19,13],[15,9],[27,17],[13,8],[17,10],[13,8],[19,13],[15,9],[27,17],[17,10]],"count":[[180,6]],"kept":[{"done":[1,1],"fresh":[4,2],"new":[174,2],"picked":[1,1]}],"min-error":[0],"time":50.815185546875,"type":"prune"},{"compiler":[[57,26]],"locations":[["(+.f64 1 (*.f64 -1 (/.f64 x y)))",0.00390625,true],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))",0.0078125,true],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))",0.8007016974802115,true],["(/.f64 (*.f64 z x) y)",7.245592730494496,true]],"time":10.69482421875,"type":"localize"},{"count":[[4,60]],"series":[["(+.f64 1 (*.f64 -1 (/.f64 x y)))","y","-inf",0.14501953125],["(+.f64 1 (*.f64 -1 (/.f64 x y)))","y","inf",0.16015625],["(+.f64 1 (*.f64 -1 (/.f64 x y)))","y","0",0.14501953125],["(+.f64 1 (*.f64 -1 (/.f64 x y)))","x","-inf",0.1728515625],["(+.f64 1 (*.f64 -1 (/.f64 x y)))","x","inf",0.14306640625],["(+.f64 1 (*.f64 -1 (/.f64 x y)))","x","0",0.14599609375],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","t","-inf",0.2041015625],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","t","inf",0.335205078125],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","t","0",0.281005859375],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","y","-inf",0.216064453125],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","y","inf",0.183837890625],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","y","0",0.218994140625],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","x","-inf",0.197998046875],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","x","inf",0.204833984375],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","x","0",0.215087890625],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","z","-inf",0.178955078125],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","z","inf",0.199951171875],["(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","z","0",0.343994140625],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","y","-inf",0.23291015625],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","y","inf",0.302978515625],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","y","0",0.369873046875],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","x","-inf",0.256103515625],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","x","inf",0.342041015625],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","x","0",0.404052734375],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","t","-inf",0.285888671875],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","t","inf",0.31005859375],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","t","0",0.568115234375],["(/.f64 (*.f64 z x) y)","y","-inf",0.283203125],["(/.f64 (*.f64 z x) y)","y","inf",0.339111328125],["(/.f64 (*.f64 z x) y)","y","0",0.60498046875],["(/.f64 (*.f64 z x) y)","x","-inf",0.30810546875],["(/.f64 (*.f64 z x) y)","x","inf",0.205810546875],["(/.f64 (*.f64 z x) y)","x","0",1.078125],["(/.f64 (*.f64 z x) y)","z","-inf",0.30615234375],["(/.f64 (*.f64 z x) y)","z","inf",0.371826171875],["(/.f64 (*.f64 z x) y)","z","0",0.441162109375]],"time":11.0771484375,"type":"series"},{"count":[[4,253]],"egraph":[[2,4497,37,0.0309185],[1,303,41,0.005778833],[0,14,49,0.000353208]],"inputs":[["(/.f64 (*.f64 z x) y)","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 1 (*.f64 -1 (/.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 z y) x))) (cbrt.f64 (exp.f64 (*.f64 (/.f64 z y) x))))) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 z y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 z y) x)))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 z y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 z y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 z (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 2) (cbrt.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 z y) x)) (sqrt.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z x)) (*.f64 (sqrt.f64 (*.f64 z x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (neg.f64 x)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 y)) (/.f64 z (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z 1) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 z x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 z x)) 1) (/.f64 (sqrt.f64 (*.f64 z x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 y y))) (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 y y))) (/.f64 (*.f64 z x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (*.f64 z x) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 z y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 z y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 z x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 z y) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 t (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 t (/.f64 x y) t))) (cbrt.f64 (exp.f64 (fma.f64 t (/.f64 x y) t))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 t (/.f64 x y) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (/.f64 x y) t)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 t (/.f64 x y) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 t (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 t (/.f64 x y) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 t 3) (pow.f64 (*.f64 t (/.f64 x y)) 3)) (fma.f64 t t (-.f64 (*.f64 (*.f64 t (/.f64 x y)) (*.f64 t (/.f64 x y))) (*.f64 t (*.f64 t (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 t t) (*.f64 (*.f64 t (/.f64 x y)) (*.f64 t (/.f64 x y)))) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 x y) 3)) t) (fma.f64 (/.f64 x y) (-.f64 (/.f64 x y) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 x y) 2)) t) (+.f64 1 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 t (+.f64 1 (pow.f64 (/.f64 x y) 3))) (fma.f64 (/.f64 x y) (-.f64 (/.f64 x y) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 t (+.f64 1 (pow.f64 (/.f64 x y) 2))) (+.f64 1 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 t (/.f64 x y) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 t (/.f64 x y) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 t (/.f64 x y) t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 t (/.f64 x y) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 t (/.f64 x y) t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 t (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 t) (exp.f64 (*.f64 t (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 t)) (exp.f64 (*.f64 t (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 t)) (exp.f64 (*.f64 t (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 t (/.f64 x y))) (exp.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 t (/.f64 x y))) (+.f64 1 (expm1.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 t (/.f64 x y) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 t (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 t (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 t (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 t (/.f64 x y) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t 1 (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t 1 (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (/.f64 x y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 t (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 t (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 t (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 t (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) t t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (*.f64 -1 t) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (cbrt.f64 (/.f64 x y)) t) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (pow.f64 (cbrt.f64 t) 2) (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (pow.f64 (cbrt.f64 t) 2) (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 t) (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 t) (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (*.f64 (cbrt.f64 t) 1) (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (*.f64 (cbrt.f64 t) 1) (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (*.f64 (cbrt.f64 t) (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (*.f64 (sqrt.f64 (/.f64 x y)) t) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (sqrt.f64 t) (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (sqrt.f64 t) (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) 1) (*.f64 t (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) 1) (*.f64 (*.f64 t (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (/.f64 x y)) -1 t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 t (/.f64 x y))) (cbrt.f64 (*.f64 t (/.f64 x y)))) (cbrt.f64 (*.f64 t (/.f64 x y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 t (/.f64 x y))) (sqrt.f64 (*.f64 t (/.f64 x y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 t) (sqrt.f64 (/.f64 x y))) (*.f64 (sqrt.f64 t) (sqrt.f64 (/.f64 x y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 t)) (*.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 t)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t -1) (/.f64 x y) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (cbrt.f64 (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (sqrt.f64 (/.f64 x y))) (sqrt.f64 (/.f64 x y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t) t)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x y) (sqrt.f64 t)) (sqrt.f64 t) t)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2) (-.f64 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t))) (/.f64 (pow.f64 (fma.f64 t (/.f64 x y) t) 2) (-.f64 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))) (pow.f64 (cbrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))) 2) (cbrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))) (sqrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3) (pow.f64 (fma.f64 t (/.f64 x y) t) 3)) (/.f64 1 (fma.f64 (fma.f64 t (/.f64 x y) t) (-.f64 (fma.f64 t (/.f64 x y) t) (*.f64 (/.f64 z y) x)) (pow.f64 (*.f64 (/.f64 z y) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2) (pow.f64 (fma.f64 t (/.f64 x y) t) 2)) (/.f64 1 (-.f64 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 t (/.f64 x y) t) (-.f64 (fma.f64 t (/.f64 x y) t) (*.f64 (/.f64 z y) x)) (pow.f64 (*.f64 (/.f64 z y) x) 2)) (+.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3) (pow.f64 (fma.f64 t (/.f64 x y) t) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t)) (-.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2) (pow.f64 (fma.f64 t (/.f64 x y) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3) (pow.f64 (fma.f64 t (/.f64 x y) t) 3)) (fma.f64 (fma.f64 t (/.f64 x y) t) (-.f64 (fma.f64 t (/.f64 x y) t) (*.f64 (/.f64 z y) x)) (pow.f64 (*.f64 (/.f64 z y) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3) (pow.f64 (fma.f64 t (/.f64 x y) t) 3)) (+.f64 (pow.f64 (fma.f64 t (/.f64 x y) t) 2) (-.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2) (*.f64 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2) (pow.f64 (fma.f64 t (/.f64 x y) t) 2)) (-.f64 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3) (pow.f64 (fma.f64 t (/.f64 x y) t) 3))) (neg.f64 (fma.f64 (fma.f64 t (/.f64 x y) t) (-.f64 (fma.f64 t (/.f64 x y) t) (*.f64 (/.f64 z y) x)) (pow.f64 (*.f64 (/.f64 z y) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2) (pow.f64 (fma.f64 t (/.f64 x y) t) 2))) (neg.f64 (-.f64 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 t (/.f64 x y) t) 2) (pow.f64 (*.f64 (/.f64 z y) x) 2)) (-.f64 (fma.f64 t (/.f64 x y) t) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 z y) x))) (exp.f64 (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 z y) x)) (+.f64 1 (expm1.f64 (fma.f64 t (/.f64 x y) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 z y) x))) (+.f64 1 (expm1.f64 (fma.f64 t (/.f64 x y) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 t (/.f64 x y) t))) (exp.f64 (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 t (/.f64 x y) t)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 z y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 t (/.f64 x y) t))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 z y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 x y) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 z (/.f64 1 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) (/.f64 1 y) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 z y) x) 1 (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t 1 (fma.f64 t (/.f64 x y) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (+.f64 1 (/.f64 x y)) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 z y) x) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 t (fma.f64 t (/.f64 x y) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 t (/.f64 x y) t) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (/.f64 x y)) t (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 t (/.f64 x y) t) 1 (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 x y))) 2) (*.f64 (cbrt.f64 (+.f64 1 (/.f64 x y))) t) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 2) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 2) (cbrt.f64 (*.f64 (/.f64 z y) x)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 t (/.f64 x y) t)) (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 x y) t)) 2) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 t (/.f64 x y) t)) 2) (cbrt.f64 (fma.f64 t (/.f64 x y) t)) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (pow.f64 (cbrt.f64 t) 2) (fma.f64 t (/.f64 x y) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (cbrt.f64 t) (fma.f64 t (/.f64 x y) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (*.f64 (cbrt.f64 t) 1) (fma.f64 t (/.f64 x y) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) 2) (*.f64 (cbrt.f64 t) (+.f64 1 (/.f64 x y))) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 1 (/.f64 x y))) (*.f64 (sqrt.f64 (+.f64 1 (/.f64 x y))) t) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 z y) x)) (sqrt.f64 (*.f64 (/.f64 z y) x)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 t (/.f64 x y) t)) (sqrt.f64 (fma.f64 t (/.f64 x y) t)) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (sqrt.f64 t) (fma.f64 t (/.f64 x y) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) 1) (fma.f64 t (/.f64 x y) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 t) (*.f64 (sqrt.f64 t) (+.f64 1 (/.f64 x y))) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (*.f64 (sqrt.f64 (*.f64 z x)) (/.f64 1 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (neg.f64 x)) (/.f64 1 (neg.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (*.f64 z x) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 y)) (/.f64 z (sqrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z 1) (/.f64 x y) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 z y) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) x (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 z x)) y) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 z x)) 1) (/.f64 (sqrt.f64 (*.f64 z x)) y) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (cbrt.f64 (*.f64 y y))) (/.f64 z (cbrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (*.f64 y y))) (/.f64 (*.f64 z x) (cbrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (*.f64 (/.f64 z y) x)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (*.f64 z x) (sqrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (fma.f64 t (/.f64 x y) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 x y))) 2)) (cbrt.f64 (+.f64 1 (/.f64 x y))) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t (sqrt.f64 (+.f64 1 (/.f64 x y)))) (sqrt.f64 (+.f64 1 (/.f64 x y))) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 1 (/.f64 x y)) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 t) (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 1 (/.f64 x y)) (sqrt.f64 t)) (sqrt.f64 t) (*.f64 (/.f64 z y) x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 1 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (/.f64 x y))) (/.f64 (pow.f64 (/.f64 x y) 2) (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (/.f64 x y))) (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 x y))) 2) (cbrt.f64 (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 (/.f64 x y))) (sqrt.f64 (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 x y) 3)) (/.f64 1 (fma.f64 (/.f64 x y) (-.f64 (/.f64 x y) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 x y) 2)) (/.f64 1 (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 x y) (-.f64 (/.f64 x y) 1) 1) (+.f64 1 (pow.f64 (/.f64 x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (/.f64 x y)) (+.f64 1 (pow.f64 (/.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 x y) 3)) (fma.f64 (/.f64 x y) (-.f64 (/.f64 x y) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 x y) 3)) (+.f64 (pow.f64 (/.f64 x y) 2) (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 x y) 2)) (+.f64 1 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (/.f64 x y) 3))) (neg.f64 (fma.f64 (/.f64 x y) (-.f64 (/.f64 x y) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (/.f64 x y) 2))) (neg.f64 (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (fma.f64 (/.f64 x y) (-.f64 (/.f64 x y) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x y) 2) 1) (-.f64 (/.f64 x y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1 (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1 (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 1 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 1 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (/.f64 1 y) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) -1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (neg.f64 (cbrt.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (neg.f64 (sqrt.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (*.f64 (sqrt.f64 (/.f64 x y)) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (neg.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) x 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 x y))) (sqrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 y y))) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 x) (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (cbrt.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (sqrt.f64 (/.f64 x y))) (sqrt.f64 (/.f64 x y)) 1)))))"]],"rules":[["egg-rr",62],["egg-rr",83],["egg-rr",64],["egg-rr",44]],"stop":[["node limit",1]],"time":64.10888671875,"type":"rewrite"},{"count":[[313,274]],"egraph":[[10,3748,513,0.05253545799999999],[9,3748,513,0.045000082999999996],[8,3743,513,0.038689417],[7,3702,513,0.032373583],[6,3276,513,0.025564625],[5,2138,513,0.017553125],[4,1159,513,0.00867975],[3,580,549,0.00406225],[2,247,549,0.001690333],[1,101,576,0.000625041],[0,39,639,0.000197625]],"inputs":[["t","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 -1 (/.f64 (*.f64 t x) y))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","t","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","t","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","t","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x) t)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x) t)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x) t)","(*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x)","(+.f64 t (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x))","(+.f64 t (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x))","(+.f64 t (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x))","(*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x)) t)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x)) t)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x)) t)","(/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (*.f64 t x))) y)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","t","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","t","(+.f64 t (*.f64 -1 (/.f64 (+.f64 (*.f64 t x) (*.f64 -1 (*.f64 z x))) y)))","(+.f64 t (*.f64 -1 (/.f64 (+.f64 (*.f64 t x) (*.f64 -1 (*.f64 z x))) y)))","(+.f64 t (*.f64 -1 (/.f64 (+.f64 (*.f64 t x) (*.f64 -1 (*.f64 z x))) y)))","(/.f64 (*.f64 z x) y)","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","1","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","(*.f64 -1 (/.f64 x y))","1","1"]],"method":["egg-herbie"],"outputs":[["t","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(*.f64 -1 (/.f64 (*.f64 t x) y))","(/.f64 (neg.f64 (*.f64 t x)) y)","(/.f64 (*.f64 t (neg.f64 x)) y)","(/.f64 (*.f64 x (neg.f64 t)) y)","(*.f64 (/.f64 x y) (neg.f64 t))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(*.f64 -1 (/.f64 (*.f64 t x) y))","(/.f64 (neg.f64 (*.f64 t x)) y)","(/.f64 (*.f64 t (neg.f64 x)) y)","(/.f64 (*.f64 x (neg.f64 t)) y)","(*.f64 (/.f64 x y) (neg.f64 t))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(*.f64 -1 (/.f64 (*.f64 t x) y))","(/.f64 (neg.f64 (*.f64 t x)) y)","(/.f64 (*.f64 t (neg.f64 x)) y)","(/.f64 (*.f64 x (neg.f64 t)) y)","(*.f64 (/.f64 x y) (neg.f64 t))","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","t","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","t","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(+.f64 t (*.f64 -1 (/.f64 (*.f64 t x) y)))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","t","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x) t)","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x) t)","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x) t)","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x)","(*.f64 x (fma.f64 -1 (/.f64 t y) (/.f64 z y)))","(*.f64 x (-.f64 (/.f64 z y) (/.f64 t y)))","(/.f64 (*.f64 x (-.f64 z t)) y)","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 t (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (*.f64 (+.f64 (*.f64 -1 (/.f64 t y)) (/.f64 z y)) x))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x))","(*.f64 x (fma.f64 -1 (/.f64 t y) (/.f64 z y)))","(*.f64 x (-.f64 (/.f64 z y) (/.f64 t y)))","(/.f64 (*.f64 x (-.f64 z t)) y)","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x)) t)","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x)) t)","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (/.f64 t y) (*.f64 -1 (/.f64 z y))) x)) t)","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (*.f64 t x))) y)","(*.f64 x (fma.f64 -1 (/.f64 t y) (/.f64 z y)))","(*.f64 x (-.f64 (/.f64 z y) (/.f64 t y)))","(/.f64 (*.f64 x (-.f64 z t)) y)","(*.f64 x (/.f64 (-.f64 z t) y))","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","t","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (*.f64 t x) y))))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","t","(+.f64 t (*.f64 -1 (/.f64 (+.f64 (*.f64 t x) (*.f64 -1 (*.f64 z x))) y)))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (*.f64 -1 (/.f64 (+.f64 (*.f64 t x) (*.f64 -1 (*.f64 z x))) y)))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 t (*.f64 -1 (/.f64 (+.f64 (*.f64 t x) (*.f64 -1 (*.f64 z x))) y)))","(fma.f64 (fma.f64 -1 (/.f64 t y) (/.f64 z y)) x t)","(fma.f64 x (-.f64 (/.f64 z y) (/.f64 t y)) t)","(+.f64 t (/.f64 (*.f64 x (-.f64 z t)) y))","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 t (/.f64 (neg.f64 (*.f64 t x)) y))","(-.f64 t (/.f64 t (/.f64 y x)))","(fma.f64 t (neg.f64 (/.f64 x y)) t)","1","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(/.f64 (neg.f64 x) y)","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(/.f64 (neg.f64 x) y)","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(/.f64 (neg.f64 x) y)","1","1"]],"stop":[["saturated",1]],"time":78.554931640625,"type":"simplify"},{"compiler":[[5079,1580]],"time":37.43505859375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","fresh",6.586161978811646],["(+.f64 (fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 z (cbrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y)))) t)","fresh",9.713393937198708],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y))) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","next",4.8378675985846895],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","done",2.3253742467294547],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","done",2.3019367467294547]],"compiler":[[15,9],[27,17],[29,19],[13,8],[13,8],[15,9],[27,17],[29,19]],"count":[[280,5]],"kept":[{"done":[2,2],"fresh":[3,2],"new":[274,1],"picked":[1,0]}],"min-error":[0],"time":100.277099609375,"type":"prune"},{"compiler":[[99,46]],"locations":[["(pow.f64 (cbrt.f64 (*.f64 z x)) 2)",0.47951127930532605,true],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))",0.7098035413750173,true],["(*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y))))",0.8007016974802115,false],["(cbrt.f64 (*.f64 z x))",12.516520896328075,true]],"time":18.974853515625,"type":"localize"},{"count":[[3,36]],"series":[["(pow.f64 (cbrt.f64 (*.f64 z x)) 2)","x","-inf",0.362060546875],["(pow.f64 (cbrt.f64 (*.f64 z x)) 2)","x","inf",0.319091796875],["(pow.f64 (cbrt.f64 (*.f64 z x)) 2)","x","0",0.303955078125],["(pow.f64 (cbrt.f64 (*.f64 z x)) 2)","z","-inf",0.431884765625],["(pow.f64 (cbrt.f64 (*.f64 z x)) 2)","z","inf",0.4169921875],["(pow.f64 (cbrt.f64 (*.f64 z x)) 2)","z","0",0.371826171875],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","y","-inf",0.243896484375],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","y","inf",0.27294921875],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","y","0",0.33203125],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","x","-inf",1.380126953125],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","x","inf",0.4130859375],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","x","0",0.402099609375],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","z","-inf",3.155029296875],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","z","inf",0.345947265625],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","z","0",0.43115234375],["(cbrt.f64 (*.f64 z x))","x","-inf",0.3671875],["(cbrt.f64 (*.f64 z x))","x","inf",0.33203125],["(cbrt.f64 (*.f64 z x))","x","0",0.26806640625],["(cbrt.f64 (*.f64 z x))","z","-inf",0.462158203125],["(cbrt.f64 (*.f64 z x))","z","inf",0.337890625],["(cbrt.f64 (*.f64 z x))","z","0",0.464111328125]],"time":11.712158203125,"type":"series"},{"count":[[3,102]],"egraph":[[2,2803,22,0.025373708],[1,244,22,0.004101958],[0,12,25,0.000322333]],"inputs":[["(cbrt.f64 (*.f64 z x))","(*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))","(pow.f64 (cbrt.f64 (*.f64 z x)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 z x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 z x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 z x))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 z x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 z x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 2) (cbrt.f64 (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z x) 1/6) (pow.f64 (*.f64 z x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z x) 1/6) (*.f64 (pow.f64 (*.f64 z x) 1/6) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 4)) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z x) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z x) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z x) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z x)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 z x)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 z x))))) (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 z x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (*.f64 z x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z x)) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z x)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 z x))) 1) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 z x) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 z x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 z x) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 z x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (*.f64 z x) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 z x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 z x) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 z x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 z x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 z x) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y -3) (pow.f64 (*.f64 z x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y -1/2) (sqrt.f64 (*.f64 z x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (*.f64 z x) y))) 2)) (cbrt.f64 (log.f64 (/.f64 (*.f64 z x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (*.f64 z x) y)))) (sqrt.f64 (log.f64 (/.f64 (*.f64 z x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 z x) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 z x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 z x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 z x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (*.f64 z x) y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (*.f64 z x) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (*.f64 z x) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (*.f64 z x) y)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (*.f64 z x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 z x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z x) 1/6) (sqrt.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z x)) (pow.f64 (*.f64 z x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z x))) 5) (cbrt.f64 (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 z x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 z x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (*.f64 z x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z x)) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z x)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z x))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 z x))) 1) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",28],["egg-rr",44]],"stop":[["node limit",1]],"time":49.971923828125,"type":"rewrite"},{"count":[[138,103]],"egraph":[[4,17,252,0.000277625],[3,16,252,0.000219334],[2,13,252,0.0001605],[1,9,252,0.00010375],[0,6,252,5.3917e-5]],"inputs":[["(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))"]],"stop":[["saturated",1]],"time":14.4208984375,"type":"simplify"},{"compiler":[[5968,2772]],"time":48.521240234375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","fresh",6.586161978811646],["(+.f64 (fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 z (cbrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y)))) t)","fresh",9.713393937198708],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y))) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","done",4.8378675985846895],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)","done",2.3253742467294547],["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","done",2.3019367467294547]],"compiler":[[15,9],[27,17],[29,19],[13,8],[13,8]],"count":[[221,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[216,0],"picked":[1,1]}],"min-error":[0],"time":62.102783203125,"type":"prune"},{"accuracy":[0.8221194673505163],"baseline":[2.3019367467294547],"branch":[["x",1.0746277121861774,2],["y",2.3019367467294547,1],["z",2.3019367467294547,1],["t",0.8221194673505163,3],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)",1.090068228811646,3],["(/.f64 x y)",0.86328125,3]],"compiler":[[5,4],[5,4],[5,4],[5,4],[13,8],[7,5],[146,67]],"count":[[10,3]],"inputs":[["(+.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y))) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 t (+.f64 1 (*.f64 -1 (/.f64 x y)))))","(+.f64 (fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (/.f64 y x) 2))) (/.f64 z (cbrt.f64 (/.f64 y x))) (neg.f64 (*.f64 t (/.f64 x y)))) t)","(fma.f64 (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (/.f64 (-.f64 z t) (cbrt.f64 y)) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (*.f64 -1 (*.f64 t (-.f64 (/.f64 x y) 1))) (/.f64 (*.f64 z x) y))","(+.f64 (/.f64 (/.f64 (*.f64 x (-.f64 z t)) (sqrt.f64 y)) (sqrt.f64 y)) t)","(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","(fma.f64 x (/.f64 (-.f64 z t) y) t)","(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)"]],"link":["."],"name":["Numeric.Signal.Multichannel:$cget from hsignal-0.2.7.1"],"oracle":[40.69149982026603],"outputs":[["(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)","(+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t)","(+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)"]],"time":58.260009765625,"times":[["x",8.637939453125],["y",4.68896484375],["z",4.8408203125],["t",13.02001953125],["(+.f64 (*.f64 (/.f64 x y) (-.f64 z t)) t)",13.01611328125],["(/.f64 x y)",11.52001953125]],"type":"regimes"},{"bstep":[[1.9438689082974852e-115,4.496771560806777e-105,9.148193359375],[-1.12022160803714e-251,-8.444588281377612e-252,9.38916015625]],"compiler":[[15,10],[5,4]],"method":["binary-search","binary-search"],"time":18.675048828125,"type":"bsearch"},{"compiler":[[41,19]],"egraph":[[4,43,54,0.00025704199999999997],[3,41,54,0.000197625],[2,37,54,0.000146625],[1,28,54,9.7584e-5],[0,21,54,4e-5]],"inputs":[["(if (<=.f64 t -5779364738144745/515912628062173092140956821207535748553561841832149923953086629908861232965551620580485601452790222553392963860602664725471042538576841344971229471155214430574596371092778402508526872730885196340843977449424988675925808879640197010584371971452184059071815020407947264) (+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t) (if (<=.f64 t 8623530258208241/44362715105933037753254626946289339254982993206013065202727673289833940924890009968639590497666233249558259375382457149263586525184) (+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t) (+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 t -5779364738144745/515912628062173092140956821207535748553561841832149923953086629908861232965551620580485601452790222553392963860602664725471042538576841344971229471155214430574596371092778402508526872730885196340843977449424988675925808879640197010584371971452184059071815020407947264) (+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t) (if (<=.f64 t 8623530258208241/44362715105933037753254626946289339254982993206013065202727673289833940924890009968639590497666233249558259375382457149263586525184) (+.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 t y)) x) t) (+.f64 (/.f64 (-.f64 z t) (/.f64 y x)) t)))","(if (<=.f64 t -5779364738144745/515912628062173092140956821207535748553561841832149923953086629908861232965551620580485601452790222553392963860602664725471042538576841344971229471155214430574596371092778402508526872730885196340843977449424988675925808879640197010584371971452184059071815020407947264) (+.f64 t (/.f64 (-.f64 z t) (/.f64 y x))) (if (<=.f64 t 8623530258208241/44362715105933037753254626946289339254982993206013065202727673289833940924890009968639590497666233249558259375382457149263586525184) (+.f64 t (*.f64 x (-.f64 (/.f64 z y) (/.f64 t y)))) (+.f64 t (/.f64 (-.f64 z t) (/.f64 y x)))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.39599609375,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[41,19]],"remove-preprocessing":[[]],"time":11.89599609375,"type":"end"}]
[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.6656904220581055,0.0009760856628417969,0.33333349227905273],[11,0.6656904220581055,0.0019521713256835938,0.33235740661621094],[10,0.6637382507324219,0.0039043426513671875,0.33235740661621094],[9,0.6637382507324219,0.007808685302734375,0.32845306396484375],[8,0.6559295654296875,0.01561737060546875,0.32845306396484375],[7,0.6559295654296875,0.0312347412109375,0.312835693359375],[6,0.62469482421875,0.062469482421875,0.312835693359375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.406005859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.271728515625,9],["body",256,"valid",258.42626953125,8256]],"time":266.14501953125,"type":"sample"},{"compiler":[[10,7]],"egraph":[[0,1,1,1.542e-6],[16,7675,11,0.080192541],[15,6561,11,0.069016957],[14,6260,11,0.058764332],[13,6032,11,0.050270873],[12,5593,11,0.042589123],[11,4668,11,0.03475929],[10,3484,11,0.024969331999999997],[9,2569,11,0.016762957],[8,1700,11,0.011407707],[7,807,11,0.007336624],[6,475,11,0.003848624],[5,320,11,0.002401374],[4,241,11,0.001497499],[3,116,11,0.000773874],[2,45,11,0.000341083],[1,17,13,0.000136083],[0,8,13,4.7708e-5]],"inputs":[["0"],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","(*.f64 x (*.f64 x (-.f64 3 (*.f64 x 2))))","(*.f64 x (*.f64 x (+.f64 3 (*.f64 x -2))))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":103.385986328125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[16,7675,11,0.079463084],[15,6561,11,0.068290459],[14,6260,11,0.058127709],[13,6032,11,0.049683333999999996],[12,5593,11,0.042064041999999996],[11,4668,11,0.034339626],[10,3484,11,0.024735708999999998],[9,2569,11,0.016655708999999998],[8,1700,11,0.011340043],[7,807,11,0.007326668],[6,475,11,0.003823584],[5,320,11,0.002382959],[4,241,11,0.001482376],[3,116,11,0.000770918],[2,45,11,0.000340584],[1,17,13,0.000133084],[0,8,13,4.525e-5]],"inputs":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","(*.f64 x (*.f64 x (-.f64 3 (*.f64 x 2))))","(*.f64 x (*.f64 x (+.f64 3 (*.f64 x -2))))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))"]],"stop":[["node limit",1]],"time":92.155029296875,"type":"simplify"},{"compiler":[[18,12]],"time":0.383056640625,"type":"eval"},{"alts":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","next",0.171875],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","fresh",0.203125]],"compiler":[[10,7],[9,6],[10,7],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.09765625],"time":1.23291015625,"type":"prune"},{"compiler":[[24,15]],"locations":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))",0.171875,true]],"time":5.35107421875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","x","-inf",0.3310546875],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","x","inf",0.507080078125],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))","x","0",0.52001953125]],"time":1.4111328125,"type":"series"},{"count":[[1,19]],"egraph":[[2,2201,13,0.020012083],[1,176,13,0.003147708],[0,8,13,0.000266375]],"inputs":[["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x x)) (*.f64 (*.f64 x -2) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 3) (*.f64 (*.f64 x x) (*.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (*.f64 8 (pow.f64 x 3))) (*.f64 x x)) (+.f64 9 (+.f64 (*.f64 (*.f64 x x) 4) (*.f64 6 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 9 (*.f64 (*.f64 x x) 4)) (*.f64 x x)) (+.f64 3 (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (-.f64 27 (*.f64 8 (pow.f64 x 3)))) (+.f64 9 (+.f64 (*.f64 (*.f64 x x) 4) (*.f64 6 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x x) (-.f64 9 (*.f64 (*.f64 x x) 4))) (+.f64 3 (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 (+.f64 3 (*.f64 x -2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) (pow.f64 (+.f64 3 (*.f64 x -2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 x (+.f64 3 (*.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x x) 3) (pow.f64 (+.f64 3 (*.f64 x -2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 3 (*.f64 x -2)) 3) (pow.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))))))))"]],"rules":[["egg-rr",19]],"stop":[["node limit",1]],"time":38.102783203125,"type":"rewrite"},{"count":[[31,24]],"egraph":[[18,7898,120,0.11836533499999999],[17,7806,120,0.10737933499999999],[16,7638,120,0.098108793],[15,7364,120,0.089140001],[14,7045,120,0.08044971],[13,6578,120,0.07131396],[12,5870,120,0.06098521],[11,5248,120,0.050760168],[10,4692,120,0.04129821],[9,4313,120,0.032777251],[8,4026,120,0.025611293],[7,3775,120,0.019074793],[6,3419,120,0.013366584],[5,1670,120,0.007978334],[4,418,120,0.003230543],[3,152,120,0.0010938340000000001],[2,58,138,0.000489126],[1,26,147,0.00023012599999999999],[0,10,147,7.8834e-5]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))"]],"stop":[["node limit",1]],"time":133.55517578125,"type":"simplify"},{"compiler":[[296,195]],"time":3.7568359375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 x x) (-.f64 9 (*.f64 (*.f64 x x) 4))) (+.f64 3 (*.f64 x 2)))","fresh",5.231132519536884],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","next",0.12109375],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","fresh",0.203125],["(sqrt.f64 (*.f64 (pow.f64 x 4) (pow.f64 (+.f64 3 (*.f64 x -2)) 2)))","fresh",24.89284258165546],["(pow.f64 (*.f64 x (sqrt.f64 (+.f64 3 (*.f64 x -2)))) 2)","fresh",7.629058984442606],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))) 3)","fresh",0.5261689453688406]],"compiler":[[18,12],[12,10],[9,6],[13,11],[11,9],[13,10],[18,12],[12,10],[9,6],[13,11],[11,9],[13,10]],"count":[[26,6]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[24,5],"picked":[1,0]}],"min-error":[0.0078125],"time":5.980224609375,"type":"prune"},{"compiler":[[32,25]],"locations":[["(pow.f64 x 2)",0.00390625,true],["(*.f64 -2 (pow.f64 x 3))",0.00390625,true],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))",0.0234375,true],["(*.f64 3 (pow.f64 x 2))",0.15234375,true]],"time":8.4169921875,"type":"localize"},{"count":[[4,3]],"series":[["(pow.f64 x 2)","x","-inf",0.4208984375],["(pow.f64 x 2)","x","inf",0.2890625],["(pow.f64 x 2)","x","0",0.137939453125],["(*.f64 -2 (pow.f64 x 3))","x","-inf",0.30615234375],["(*.f64 -2 (pow.f64 x 3))","x","inf",0.29296875],["(*.f64 -2 (pow.f64 x 3))","x","0",0.256103515625],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","x","-inf",0.198974609375],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","x","inf",0.366943359375],["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","x","0",0.245849609375],["(*.f64 3 (pow.f64 x 2))","x","-inf",0.1669921875],["(*.f64 3 (pow.f64 x 2))","x","inf",0.48095703125],["(*.f64 3 (pow.f64 x 2))","x","0",0.3271484375]],"time":3.621826171875,"type":"series"},{"count":[[4,79]],"egraph":[[2,2573,32,0.021504958],[1,222,32,0.0037945830000000002],[0,10,32,0.0003475]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(pow.f64 x 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 3 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) 9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 3) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) 27))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 3 (*.f64 x x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (pow.f64 x 4) 9) (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 2 (pow.f64 x 3)))) (/.f64 (*.f64 (pow.f64 x 6) 4) (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2) (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x 6) 27) (*.f64 (pow.f64 (pow.f64 x 3) 3) -8)) (/.f64 1 (+.f64 (*.f64 (pow.f64 x 4) 9) (-.f64 (*.f64 (pow.f64 x 6) 4) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (pow.f64 x 4) 9) (*.f64 (pow.f64 x 6) 4)) (/.f64 1 (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 (pow.f64 x 4) 9) (-.f64 (*.f64 (pow.f64 x 6) 4) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3))))) (+.f64 (*.f64 (pow.f64 x 6) 27) (*.f64 (pow.f64 (pow.f64 x 3) 3) -8))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 2 (pow.f64 x 3))) (-.f64 (*.f64 (pow.f64 x 4) 9) (*.f64 (pow.f64 x 6) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 6) 27) (*.f64 (pow.f64 (pow.f64 x 3) 3) -8)) (+.f64 (*.f64 (pow.f64 x 4) 9) (-.f64 (*.f64 (pow.f64 x 6) 4) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 6) 27) (*.f64 (pow.f64 (pow.f64 x 3) 3) -8)) (+.f64 (*.f64 (pow.f64 x 6) 4) (-.f64 (*.f64 (pow.f64 x 4) 9) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 4) 9) (*.f64 (pow.f64 x 6) 4)) (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x 6) 27) (*.f64 (pow.f64 (pow.f64 x 3) 3) -8))) (neg.f64 (+.f64 (*.f64 (pow.f64 x 4) 9) (-.f64 (*.f64 (pow.f64 x 6) 4) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x 4) 9) (*.f64 (pow.f64 x 6) 4))) (neg.f64 (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 6) 4) (*.f64 (pow.f64 x 4) 9)) (-.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -2 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -2 (pow.f64 x 3)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (cbrt.f64 -2)) 2) (*.f64 x (cbrt.f64 -2)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 9)) (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 -2) (pow.f64 x 3/2)) (*.f64 (sqrt.f64 -2) (pow.f64 x 3/2)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 -2 (pow.f64 x 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -2 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 -2) (pow.f64 x 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 x 3) 3) -8) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 6) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -2) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 x 3) 3) -8))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -2 (pow.f64 x 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3/2) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 x)))))))"]],"rules":[["egg-rr",17],["egg-rr",12],["egg-rr",38],["egg-rr",12]],"stop":[["node limit",1]],"time":46.927001953125,"type":"rewrite"},{"count":[[82,82]],"egraph":[[19,7443,21,0.11130258399999998],[18,6766,21,0.09830258399999998],[17,6672,21,0.08746958399999999],[16,6500,21,0.079794042],[15,6230,21,0.072209042],[14,5909,21,0.06481279200000001],[13,5442,21,0.05695879200000001],[12,4732,21,0.04835729200000001],[11,4134,21,0.039805042000000006],[10,3626,21,0.031978084000000004],[9,3247,21,0.024942584],[8,2960,21,0.019149042],[7,2709,21,0.014274042],[6,2543,21,0.010097417000000001],[5,1355,21,0.006303709],[4,327,21,0.0026897500000000003],[3,114,21,0.000902],[2,52,21,0.000397209],[1,23,21,0.000190042],[0,9,21,6.8334e-5]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))"]],"stop":[["node limit",1]],"time":123.652099609375,"type":"simplify"},{"compiler":[[1303,968]],"time":18.837890625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 x x) (-.f64 9 (*.f64 (*.f64 x x) 4))) (+.f64 3 (*.f64 x 2)))","fresh",5.231132519536884],["(+.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 2) (*.f64 -2 (pow.f64 x 3)))","fresh",0.33704770513728244],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3360138672213042],["(pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2)","fresh",7.537811328147536],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","next",0.203125],["(sqrt.f64 (*.f64 (pow.f64 x 4) (pow.f64 (+.f64 3 (*.f64 x -2)) 2)))","fresh",24.89284258165546]],"compiler":[[18,12],[13,11],[15,12],[14,11],[9,6],[13,11],[18,12],[13,11],[15,12],[14,11],[9,6],[13,11]],"count":[[88,6]],"kept":[{"done":[0,0],"fresh":[5,3],"new":[82,3],"picked":[1,0]}],"min-error":[0.00390625],"time":17.008056640625,"type":"prune"},{"compiler":[[22,15]],"locations":[["(*.f64 x (fma.f64 x -2 3))",0.03515625,true],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))",0.1953125,true]],"time":5.364990234375,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 x (fma.f64 x -2 3))","x","-inf",0.281005859375],["(*.f64 x (fma.f64 x -2 3))","x","inf",0.2099609375],["(*.f64 x (fma.f64 x -2 3))","x","0",0.2490234375],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","x","-inf",0.2939453125],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","x","inf",0.61279296875],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","x","0",0.341064453125]],"time":2.06494140625,"type":"series"},{"count":[[2,26]],"egraph":[[2,1613,19,0.016799333],[1,143,19,0.002319208],[0,7,19,0.000235958]],"inputs":[["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(*.f64 x (fma.f64 x -2 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -2) (*.f64 x x)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (*.f64 x -2)) (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 x (fma.f64 x -2 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 (fma.f64 x -2 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (*.f64 x x)) (fma.f64 x -2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 x (fma.f64 x -2 3)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x -2) x) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x -2)) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (fma.f64 x -2 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 x -2 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 x -2 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 x -2 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (fma.f64 x -2 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (fma.f64 x -2 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 x -2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 x -2 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (fma.f64 x -2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (fma.f64 x -2 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (fma.f64 x -2 3))))))))"]],"rules":[["egg-rr",13],["egg-rr",13]],"stop":[["node limit",1]],"time":35.902099609375,"type":"rewrite"},{"count":[[50,36]],"egraph":[[18,7864,210,0.118698709],[17,7772,210,0.107696501],[16,7606,210,0.098454917],[15,7338,210,0.08948220800000001],[14,7019,210,0.08074100000000001],[13,6548,210,0.07160662500000001],[12,5838,210,0.061851208000000005],[11,5216,210,0.051650292],[10,4658,210,0.04215175],[9,4279,210,0.033491792],[8,3992,210,0.026173458],[7,3741,210,0.01961],[6,3423,210,0.013792875],[5,1724,210,0.00843175],[4,446,210,0.003518833],[3,158,210,0.001257167],[2,66,246,0.000578167],[1,33,264,0.000277959],[0,13,264,9.8e-5]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(*.f64 -2 (pow.f64 x 2))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(*.f64 -2 (pow.f64 x 2))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(*.f64 -2 (pow.f64 x 3))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 (*.f64 x -2) 3))","(*.f64 (*.f64 x x) (fma.f64 x -2 3))","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(*.f64 -2 (pow.f64 x 2))","(*.f64 (*.f64 x x) -2)","(*.f64 x (*.f64 x -2))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(*.f64 -2 (pow.f64 x 2))","(*.f64 (*.f64 x x) -2)","(*.f64 x (*.f64 x -2))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))","(+.f64 (*.f64 3 x) (*.f64 -2 (pow.f64 x 2)))","(fma.f64 3 x (*.f64 (*.f64 x x) -2))","(*.f64 x (+.f64 3 (*.f64 x -2)))","(*.f64 x (fma.f64 x -2 3))"]],"stop":[["node limit",1]],"time":137.383056640625,"type":"simplify"},{"compiler":[[355,245]],"time":5.490966796875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 x x) (-.f64 9 (*.f64 (*.f64 x x) 4))) (+.f64 3 (*.f64 x 2)))","fresh",5.231132519536884],["(+.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 2) (*.f64 -2 (pow.f64 x 3)))","fresh",0.33704770513728244],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","next",0.3360138672213042],["(pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2)","fresh",7.537811328147536],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","done",0.203125],["(sqrt.f64 (*.f64 (pow.f64 x 4) (pow.f64 (+.f64 3 (*.f64 x -2)) 2)))","fresh",24.89284258165546]],"compiler":[[18,12],[13,11],[15,12],[14,11],[9,6],[13,11],[18,12],[13,11],[15,12],[14,11],[13,11]],"count":[[42,6]],"kept":[{"done":[0,0],"fresh":[5,5],"new":[36,0],"picked":[1,1]}],"min-error":[0.00390625],"time":7.949951171875,"type":"prune"},{"compiler":[[48,30]],"locations":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))",0.0234375,true],["(*.f64 3 (*.f64 x x))",0.15234375,true],["(pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)",0.46329887698974637,true],["(cbrt.f64 (*.f64 3 (*.f64 x x)))",21.887571401592076,true]],"time":11.739990234375,"type":"localize"},{"count":[[4,15]],"series":[["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","x","-inf",0.322998046875],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","x","inf",0.363037109375],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","x","0",0.285888671875],["(*.f64 3 (*.f64 x x))","x","-inf",0.1630859375],["(*.f64 3 (*.f64 x x))","x","inf",0.136962890625],["(*.f64 3 (*.f64 x x))","x","0",0.14013671875],["(pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)","x","-inf",0.465087890625],["(pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)","x","inf",0.635986328125],["(pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)","x","0",0.86181640625],["(cbrt.f64 (*.f64 3 (*.f64 x x)))","x","-inf",0.310791015625],["(cbrt.f64 (*.f64 3 (*.f64 x x)))","x","inf",0.344970703125],["(cbrt.f64 (*.f64 3 (*.f64 x x)))","x","0",0.64404296875]],"time":4.81494140625,"type":"series"},{"count":[[4,191]],"egraph":[[2,2806,37,0.02510975],[1,246,37,0.0042015839999999995],[0,11,39,0.000337917]],"inputs":[["(cbrt.f64 (*.f64 3 (*.f64 x x)))","(pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)","(*.f64 3 (*.f64 x x))","(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (cbrt.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9 (pow.f64 x 4)) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (pow.f64 x 6)) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))) (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 3 x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 3 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (cbrt.f64 (*.f64 9 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) (cbrt.f64 (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (pow.f64 (*.f64 3 (*.f64 x x)) 5/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 x x)) 5/6) (cbrt.f64 (*.f64 x (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 (cbrt.f64 x) x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) 1) (cbrt.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 3)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))))) (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 27 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 27 (pow.f64 x 6))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (sqrt.f64 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 3/2) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (exp.f64 x) (+.f64 x x))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 3 x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 3 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 3) (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9 (pow.f64 x 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 3 (*.f64 x x)))) 2)) (cbrt.f64 (log.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 3 (*.f64 x x))))) (sqrt.f64 (log.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 27 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 27 (pow.f64 x 6))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (sqrt.f64 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 3 (*.f64 x x))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) 3/2) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 9 (pow.f64 x 4)) (fma.f64 3 (*.f64 x x) (*.f64 2 (pow.f64 x 3)))) (/.f64 (*.f64 4 (pow.f64 x 6)) (fma.f64 3 (*.f64 x x) (*.f64 2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2) (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -8 (pow.f64 x 9) (*.f64 27 (pow.f64 x 6))) (/.f64 1 (-.f64 (fma.f64 9 (pow.f64 x 4) (*.f64 4 (pow.f64 x 6))) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 4 (pow.f64 x 6))) (/.f64 1 (fma.f64 3 (*.f64 x x) (*.f64 2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 9 (pow.f64 x 4) (*.f64 4 (pow.f64 x 6))) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))) (fma.f64 -8 (pow.f64 x 9) (*.f64 27 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 3 (*.f64 x x) (*.f64 2 (pow.f64 x 3))) (-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 4 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -8 (pow.f64 x 9) (*.f64 27 (pow.f64 x 6))) (-.f64 (fma.f64 9 (pow.f64 x 4) (*.f64 4 (pow.f64 x 6))) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -8 (pow.f64 x 9) (*.f64 27 (pow.f64 x 6))) (fma.f64 4 (pow.f64 x 6) (-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 4 (pow.f64 x 6))) (fma.f64 3 (*.f64 x x) (*.f64 2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -8 (pow.f64 x 9) (*.f64 27 (pow.f64 x 6)))) (neg.f64 (-.f64 (fma.f64 9 (pow.f64 x 4) (*.f64 4 (pow.f64 x 6))) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 4 (pow.f64 x 6)))) (neg.f64 (fma.f64 3 (*.f64 x x) (*.f64 2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 4 (pow.f64 x 6)) (*.f64 9 (pow.f64 x 4))) (-.f64 (*.f64 -2 (pow.f64 x 3)) (*.f64 3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 9 (pow.f64 x 4) (*.f64 4 (pow.f64 x 6))) (*.f64 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))) (fma.f64 -8 (pow.f64 x 9) (*.f64 27 (pow.f64 x 6)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 3 (*.f64 x x) (*.f64 2 (pow.f64 x 3))) (-.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 4 (pow.f64 x 6)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))) 2)) (cbrt.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))) (sqrt.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 x x)))) (pow.f64 (exp.f64 -2) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 3 x)) (+.f64 1 (expm1.f64 (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 x x)))) (+.f64 1 (expm1.f64 (*.f64 -2 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -2 (pow.f64 x 3)))) (pow.f64 (exp.f64 x) (*.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -2) (pow.f64 x 3)) (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -2 (pow.f64 x 3)))) (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (*.f64 x x) -2) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 3 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 x -2) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 x x)) 1 (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -2 (pow.f64 x 3) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -2 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (pow.f64 x 3)) 1 (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 x x)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -2 (pow.f64 x 3)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (*.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) (cbrt.f64 (*.f64 9 (pow.f64 x 4)))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -2)) (cbrt.f64 (*.f64 4 (pow.f64 x 6))) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 4 (pow.f64 x 6))) (*.f64 x (cbrt.f64 -2)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 3) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (sqrt.f64 3))) (pow.f64 (*.f64 3 (*.f64 x x)) 5/6) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 -2) (pow.f64 x 3/2)) (*.f64 (sqrt.f64 -2) (pow.f64 x 3/2)) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (*.f64 (pow.f64 x 3/2) -2) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 x) x (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 3 (*.f64 x x)) 5/6) (cbrt.f64 (*.f64 x (sqrt.f64 3))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 (cbrt.f64 x) x)) (pow.f64 (cbrt.f64 x) 2) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) 1) (cbrt.f64 (*.f64 3 (*.f64 x x))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 3)) (pow.f64 (cbrt.f64 x) 2) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))))) (cbrt.f64 (cbrt.f64 (*.f64 3 (*.f64 x x)))) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3 x) 1) x (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3 x) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 3 x) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 -2 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 x) (*.f64 x x) (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (*.f64 x x)) x (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (pow.f64 x 3/2)) (pow.f64 x 3/2) (*.f64 3 (*.f64 x x)))))))"]],"rules":[["egg-rr",79],["egg-rr",32],["egg-rr",41],["egg-rr",39]],"stop":[["node limit",1]],"time":55.400146484375,"type":"rewrite"},{"count":[[206,173]],"egraph":[[19,7443,105,0.111525916],[18,6766,105,0.098519916],[17,6672,105,0.087621624],[16,6500,105,0.079928874],[15,6230,105,0.072338499],[14,5909,105,0.064953457],[13,5442,105,0.057073457],[12,4732,105,0.048432249000000004],[11,4134,105,0.039811416],[10,3626,105,0.031991957],[9,3247,105,0.024982416],[8,2960,105,0.019207791000000002],[7,2709,105,0.014384916000000001],[6,2543,105,0.010205458],[5,1355,105,0.006394375],[4,327,105,0.00275175],[3,114,105,0.000926916],[2,52,105,0.000414125],[1,23,105,0.000200875],[0,9,105,7.175e-5]],"inputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (pow.f64 x 2))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 3 (pow.f64 x 2))","(*.f64 3 (*.f64 x x))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))","(*.f64 -2 (pow.f64 x 3))"]],"stop":[["node limit",1]],"time":128.345947265625,"type":"simplify"},{"compiler":[[3007,2230]],"time":40.955078125,"type":"eval"},{"alts":[["(fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))","fresh",0.3393327149057245],["(/.f64 (*.f64 (*.f64 x x) (-.f64 9 (*.f64 (*.f64 x x) 4))) (+.f64 3 (*.f64 x 2)))","fresh",5.231132519536884],["(fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 3) (*.f64 -2 (pow.f64 x 3)))","fresh",0.334028918378842],["(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","fresh",0.1484375],["(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","fresh",0.13671875],["(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","done",0.3360138672213042],["(fma.f64 (*.f64 x x) (*.f64 x -2) (*.f64 3 (*.f64 x x)))","fresh",0.1640625],["(*.f64 x (*.f64 x (fma.f64 x -2 3)))","done",0.203125]],"compiler":[[15,12],[18,12],[17,12],[11,8],[11,8],[15,12],[13,7],[9,6]],"count":[[179,8]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[173,5],"picked":[1,1]}],"min-error":[0.00390625],"time":45.0009765625,"type":"prune"},{"accuracy":[0.12109375],"baseline":[0.12109375],"branch":[["x",0.12109375,1],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))",0.12109375,1]],"compiler":[[2,1],[10,7],[181,126]],"count":[[15,1]],"inputs":[["(fma.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) 3) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 x (*.f64 3 x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))","(fma.f64 (*.f64 x x) (*.f64 x -2) (*.f64 3 (*.f64 x x)))","(+.f64 (pow.f64 (*.f64 x (sqrt.f64 3)) 2) (*.f64 -2 (pow.f64 x 3)))","(+.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x x))) 3) (*.f64 -2 (pow.f64 x 3)))","(pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 x x) (*.f64 -2 (pow.f64 x 3)))) 2)","(/.f64 (*.f64 (*.f64 x x) (-.f64 9 (*.f64 (*.f64 x x) 4))) (+.f64 3 (*.f64 x 2)))","(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))","(sqrt.f64 (*.f64 (pow.f64 x 4) (pow.f64 (+.f64 3 (*.f64 x -2)) 2)))","(pow.f64 (*.f64 x (sqrt.f64 (+.f64 3 (*.f64 x -2)))) 2)","(pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) (+.f64 3 (*.f64 x -2)))) 3)","(*.f64 x (*.f64 x (fma.f64 x -2 3)))","(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))"]],"link":["."],"name":["Data.Spline.Key:interpolateKeys from smoothie-0.4.0.2"],"oracle":[25.186775827019314],"outputs":[["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"time":13.267822265625,"times":[["x",5.991943359375],["(*.f64 (*.f64 x x) (-.f64 3 (*.f64 x 2)))",4.036865234375]],"type":"regimes"},{"compiler":[[12,10]],"egraph":[[1,13,16,3.1667e-5],[0,10,16,1.85e-5]],"inputs":[["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 3 (pow.f64 x 2)) (*.f64 -2 (pow.f64 x 3)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.420166015625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[12,10]],"remove-preprocessing":[[]],"time":9.503173828125,"type":"end"}]
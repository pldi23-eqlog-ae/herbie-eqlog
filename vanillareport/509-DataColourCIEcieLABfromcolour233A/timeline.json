[{"compiler":[[12,10]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09170725150033832,0.11024453863501549],[11,0.7687799381092191,0.12097552325576544,0.11024453863501549],[10,0.7258531395345926,0.17951206676661968,0.09463479369878769],[9,0.6712190322577953,0.23414617404341698,0.09463479369878769],[8,0.5931703075766563,0.34341438859701157,0.06341530382633209],[7,0.49951183795928955,0.43707285821437836,0.06341530382633209],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":26.08203125,"type":"analyze"},{"outcomes":[["body",256,"invalid",5.824462890625,156],["body",256,"valid",307.482666015625,8256]],"time":321.150146484375,"type":"sample"},{"compiler":[[11,9]],"egraph":[[0,2,2,1.375e-6],[5,180,16,0.001176584],[4,168,16,0.000903792],[3,97,16,0.000608751],[2,49,16,0.000321834],[1,26,20,0.000174],[0,14,20,6.6792e-5]],"inputs":[["0","1"],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","(*.f64 (*.f64 (-.f64 y (/.f64 16 116)) 3) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","(*.f64 (*.f64 (+.f64 x -4/29) 3) y)","(*.f64 3 (*.f64 (+.f64 x -4/29) y))","(*.f64 (fma.f64 x 3 -12/29) y)","(*.f64 (*.f64 (-.f64 y (/.f64 16 116)) 3) x)","(*.f64 (+.f64 y -4/29) (*.f64 3 x))","(*.f64 (+.f64 y -4/29) (*.f64 x 3))","(*.f64 x (fma.f64 3 y -12/29))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":24.5439453125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,110,8,0.000752833],[4,104,8,0.000591124],[3,65,8,0.000410208],[2,33,8,0.000234416],[1,18,10,0.000133916],[0,11,10,5.5333e-5]],"inputs":[["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","(*.f64 (*.f64 (+.f64 x -4/29) 3) y)","(*.f64 (+.f64 (*.f64 x 3) -12/29) y)","(*.f64 (fma.f64 x 3 -12/29) y)"]],"stop":[["saturated",1]],"time":11.380859375,"type":"simplify"},{"compiler":[[17,13]],"time":0.380126953125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","fresh",0.421875],["(*.f64 (fma.f64 x 3 -12/29) y)","next",0.40625]],"compiler":[[11,9],[8,6],[11,9],[8,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.38671875],"time":1.25390625,"type":"prune"},{"compiler":[[16,11]],"locations":[["(fma.f64 x 3 -12/29)",0.0390625,true],["(*.f64 (fma.f64 x 3 -12/29) y)",0.3920088945863437,true]],"time":3.920166015625,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 x 3 -12/29)","x","-inf",0.138916015625],["(fma.f64 x 3 -12/29)","x","inf",0.157958984375],["(fma.f64 x 3 -12/29)","x","0",0.140869140625],["(*.f64 (fma.f64 x 3 -12/29) y)","y","-inf",0.31298828125],["(*.f64 (fma.f64 x 3 -12/29) y)","y","inf",0.322998046875],["(*.f64 (fma.f64 x 3 -12/29) y)","y","0",0.5439453125],["(*.f64 (fma.f64 x 3 -12/29) y)","x","-inf",0.39599609375],["(*.f64 (fma.f64 x 3 -12/29) y)","x","inf",0.4169921875],["(*.f64 (fma.f64 x 3 -12/29) y)","x","0",0.399169921875]],"time":2.94189453125,"type":"series"},{"count":[[2,34]],"egraph":[[2,1551,13,0.017109001],[1,141,13,0.002434584],[0,7,13,0.000270167]],"inputs":[["(*.f64 (fma.f64 x 3 -12/29) y)","(fma.f64 x 3 -12/29)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3) y) (*.f64 -12/29 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 x 3)) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (fma.f64 x 3 -12/29) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x 3 -12/29) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 x 3 -12/29) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 x 3 -12/29) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 x 3 -12/29) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -12/29 (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3) -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3) 1) -12/29)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x 3 -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 3 -12/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 3 -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) (pow.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) 2) (cbrt.f64 (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 3 -12/29)) (sqrt.f64 (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) (+.f64 (*.f64 (*.f64 x 3) (*.f64 x 3)) (-.f64 144/841 (*.f64 (*.f64 x 3) -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 3) (*.f64 x 3)) 144/841) (-.f64 (*.f64 x 3) -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 3 -12/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 3 -12/29) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 3 -12/29)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 3 -12/29) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 3 -12/29) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 3 -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 3 -12/29)))))))"]],"rules":[["egg-rr",21],["egg-rr",13]],"stop":[["node limit",1]],"time":36.571044921875,"type":"rewrite"},{"count":[[70,44]],"egraph":[[3,41,240,0.000487667],[2,38,240,0.000361959],[1,25,240,0.00022725000000000002],[0,13,303,0.00010225]],"inputs":[["(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","-12/29","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)","(-.f64 (*.f64 3 x) 12/29)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 3 (*.f64 y x))","(*.f64 y (*.f64 3 x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 3 (*.f64 y x))","(*.f64 y (*.f64 3 x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(fma.f64 3 (*.f64 y x) (*.f64 -12/29 y))","(*.f64 y (fma.f64 3 x -12/29))","-12/29","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(*.f64 3 x)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)","(-.f64 (*.f64 3 x) 12/29)","(fma.f64 3 x -12/29)"]],"stop":[["saturated",1]],"time":13.4599609375,"type":"simplify"},{"compiler":[[392,294]],"time":7.842041015625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)","fresh",0.421875],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","next",0.1796875],["(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) (+.f64 (*.f64 (*.f64 x 3) (*.f64 x 3)) (-.f64 144/841 (*.f64 (*.f64 x 3) -12/29)))) y)","fresh",16.64195253907377],["(pow.f64 (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) 3)","fresh",0.9848978028217029],["(*.f64 (*.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) (pow.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) 2)) y)","fresh",0.748901562590145]],"compiler":[[11,9],[11,8],[27,22],[11,9],[17,14],[11,9],[11,8],[27,22],[11,9],[17,14]],"count":[[46,5]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[44,4],"picked":[1,0]}],"min-error":[0.03125],"time":8.7548828125,"type":"prune"},{"compiler":[[26,14]],"locations":[["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))",0.03125,true],["(*.f64 -12/29 y)",0.09375,true],["(*.f64 3 (*.f64 y x))",0.25,true]],"time":5.6689453125,"type":"localize"},{"count":[[3,15]],"series":[["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","x","-inf",0.18505859375],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","x","inf",0.156982421875],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","x","0",0.18896484375],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","y","-inf",0.198974609375],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","y","inf",0.405029296875],["(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","y","0",0.1591796875],["(*.f64 -12/29 y)","y","-inf",0.296875],["(*.f64 -12/29 y)","y","inf",0.302978515625],["(*.f64 -12/29 y)","y","0",0.227783203125],["(*.f64 3 (*.f64 y x))","x","-inf",0.260009765625],["(*.f64 3 (*.f64 y x))","x","inf",0.4072265625],["(*.f64 3 (*.f64 y x))","x","0",0.404052734375],["(*.f64 3 (*.f64 y x))","y","-inf",0.248046875],["(*.f64 3 (*.f64 y x))","y","inf",0.7431640625],["(*.f64 3 (*.f64 y x))","y","0",0.511962890625]],"time":4.84521484375,"type":"series"},{"count":[[3,63]],"egraph":[[2,2486,22,0.021918458000000002],[1,193,22,0.0036342909999999996],[0,9,22,0.000304583]],"inputs":[["(*.f64 3 (*.f64 y x))","(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 3 (*.f64 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 3 (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 y x) 3) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 3) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 3 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 y x) 3) 27))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 3 (*.f64 y x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y -12/29))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y -12/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y -12/29)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y -12/29)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) -1728/24389) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 y y) 144/841))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -12/29) y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) -1728/24389))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y -12/29)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (+.f64 (*.f64 3 (*.f64 y x)) (*.f64 12/29 y))) (/.f64 (*.f64 (*.f64 y y) 144/841) (+.f64 (*.f64 3 (*.f64 y x)) (*.f64 12/29 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) 2) (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) (sqrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 (*.f64 y x) 3) 27) (*.f64 (pow.f64 y 3) -1728/24389)) (/.f64 1 (+.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y -12/29) (-.f64 (*.f64 y -12/29) (*.f64 3 (*.f64 y x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y y) 144/841)) (/.f64 1 (+.f64 (*.f64 3 (*.f64 y x)) (*.f64 12/29 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y -12/29) (-.f64 (*.f64 y -12/29) (*.f64 3 (*.f64 y x))))) (+.f64 (*.f64 (pow.f64 (*.f64 y x) 3) 27) (*.f64 (pow.f64 y 3) -1728/24389))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 3 (*.f64 y x)) (*.f64 12/29 y)) (-.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y y) 144/841))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (*.f64 y x) 3) 27) (*.f64 (pow.f64 y 3) -1728/24389)) (+.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y -12/29) (-.f64 (*.f64 y -12/29) (*.f64 3 (*.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (*.f64 y x) 3) 27) (*.f64 (pow.f64 y 3) -1728/24389)) (+.f64 (*.f64 (*.f64 y y) 144/841) (-.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 3 (*.f64 (*.f64 y x) (*.f64 y -12/29))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y y) 144/841)) (+.f64 (*.f64 3 (*.f64 y x)) (*.f64 12/29 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 (*.f64 y x) 3) 27) (*.f64 (pow.f64 y 3) -1728/24389))) (neg.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y -12/29) (-.f64 (*.f64 y -12/29) (*.f64 3 (*.f64 y x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2) (*.f64 (*.f64 y y) 144/841))) (neg.f64 (+.f64 (*.f64 3 (*.f64 y x)) (*.f64 12/29 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y y) 144/841) (pow.f64 (*.f64 3 (*.f64 y x)) 2)) (-.f64 (*.f64 y -12/29) (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 y x) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -12/29 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -12/29 y (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 (*.f64 y x)) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y -12/29) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) 144/841)) (cbrt.f64 (*.f64 y -12/29)) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) 2) (cbrt.f64 (*.f64 3 (*.f64 y x))) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y -12/29)) (sqrt.f64 (*.f64 y -12/29)) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 3 (*.f64 y x))) (sqrt.f64 (*.f64 3 (*.f64 y x))) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))))"]],"rules":[["egg-rr",39],["egg-rr",12],["egg-rr",12]],"stop":[["node limit",1]],"time":44.388916015625,"type":"rewrite"},{"count":[[78,70]],"egraph":[[9,995,114,0.012706875],[8,989,114,0.010498083],[7,892,114,0.0082305],[6,650,114,0.00571175],[5,398,114,0.00331375],[4,262,114,0.0019252079999999999],[3,202,114,0.0012408749999999998],[2,105,114,0.0006733329999999999],[1,41,114,0.000289958],[0,18,114,0.000100958]],"inputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 -12/29 y)","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 12/29 (*.f64 -3 x))))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 x y))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 x y))"]],"stop":[["saturated",1]],"time":26.405029296875,"type":"simplify"},{"compiler":[[996,628]],"time":12.712890625,"type":"eval"},{"alts":[["(+.f64 (*.f64 3 (*.f64 y x)) (pow.f64 (cbrt.f64 (*.f64 y -12/29)) 3))","fresh",0.5124588867581883],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","next",0.16796875],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","fresh",0.19140625],["(+.f64 (*.f64 3 (*.f64 y x)) (cbrt.f64 (*.f64 (pow.f64 y 3) -1728/24389)))","fresh",26.435616737732996],["(*.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) 2))","fresh",0.7635690918954711],["(*.f64 y (fma.f64 3 x -12/29))","fresh",0.40625]],"compiler":[[14,11],[10,7],[10,7],[14,11],[23,16],[8,6],[14,11],[10,7],[10,7],[14,11],[23,16],[8,6]],"count":[[75,6]],"kept":[{"done":[0,0],"fresh":[4,0],"new":[70,6],"picked":[1,0]}],"min-error":[0.01171875],"time":14.10009765625,"type":"prune"},{"compiler":[[20,13]],"locations":[["(*.f64 y -12/29)",0.09375,true],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))",0.1328125,true]],"time":4.875,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 y -12/29)","y","-inf",0.131103515625],["(*.f64 y -12/29)","y","inf",0.1611328125],["(*.f64 y -12/29)","y","0",0.134033203125],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","x","-inf",0.948974609375],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","x","inf",0.213134765625],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","x","0",0.274169921875],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","y","-inf",0.41015625],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","y","inf",0.411865234375],["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","y","0",0.458984375]],"time":3.2490234375,"type":"series"},{"count":[[2,32]],"egraph":[[2,1792,15,0.018143333],[1,161,15,0.0027190829999999997],[0,8,15,0.000285583]],"inputs":[["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","(*.f64 y -12/29)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -12/29) (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 y x)) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 y x)) 1) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 2) (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) (sqrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 3) (pow.f64 (*.f64 y -12/29) 3)) (+.f64 (*.f64 (*.f64 3 (*.f64 y x)) (*.f64 3 (*.f64 y x))) (-.f64 (*.f64 144/841 (*.f64 y y)) (*.f64 (*.f64 3 (*.f64 y x)) (*.f64 y -12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 3 (*.f64 y x)) (*.f64 3 (*.f64 y x))) (*.f64 144/841 (*.f64 y y))) (-.f64 (*.f64 3 (*.f64 y x)) (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y -12/29) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y -12/29) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y -12/29)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y -12/29)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 144/841 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -12/29) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y -12/29) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y -12/29)))))))"]],"rules":[["egg-rr",11],["egg-rr",21]],"stop":[["node limit",1]],"time":37.68603515625,"type":"rewrite"},{"count":[[68,40]],"egraph":[[9,994,234,0.012857083],[8,988,234,0.010641833],[7,891,234,0.008372207999999999],[6,650,234,0.005838375],[5,401,234,0.003428416],[4,265,234,0.002039083],[3,208,234,0.0013391660000000001],[2,112,234,0.0007505000000000001],[1,45,234,0.00034475],[0,19,234,0.000121375]],"inputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)","(*.f64 -12/29 y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -12/29 y)","(*.f64 y -12/29)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 x y))","(*.f64 x (*.f64 3 y))","(*.f64 y (*.f64 3 x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 x y))","(*.f64 x (*.f64 3 y))","(*.f64 y (*.f64 3 x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)","(*.f64 -12/29 y)","(*.f64 y -12/29)"]],"stop":[["saturated",1]],"time":28.52001953125,"type":"simplify"},{"compiler":[[463,314]],"time":6.843994140625,"type":"eval"},{"alts":[["(+.f64 (*.f64 3 (*.f64 y x)) (cbrt.f64 (*.f64 (pow.f64 y 3) -1728/24389)))","fresh",26.435616737732996],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 2) (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))","fresh",0.7681391114323551],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","next",0.19140625],["(fma.f64 (*.f64 3 y) x (pow.f64 (cbrt.f64 (*.f64 y -12/29)) 3))","fresh",0.5007401367581883],["(*.f64 y (fma.f64 3 x -12/29))","fresh",0.40625]],"compiler":[[14,11],[23,17],[10,7],[13,10],[8,6],[14,11],[23,17],[10,7],[13,10],[8,6]],"count":[[46,5]],"kept":[{"done":[0,0],"fresh":[5,3],"new":[40,2],"picked":[1,0]}],"min-error":[0.01171875],"time":8.011962890625,"type":"prune"},{"compiler":[[20,11]],"locations":[["(*.f64 y -12/29)",0.09375,false],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))",0.15625,true]],"time":4.802001953125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","x","-inf",0.284912109375],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","x","inf",0.19189453125],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","x","0",0.238037109375],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","y","-inf",0.371826171875],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","y","inf",0.2421875],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","y","0",0.330810546875]],"time":1.740966796875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1794,11,0.018078542],[1,161,11,0.002729209],[0,8,11,0.000284792]],"inputs":[["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -12/29) (*.f64 y (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 x 3)) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (*.f64 x 3)) 1) (*.f64 y -12/29))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))) 2) (cbrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))) (sqrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (*.f64 x 3)) 3) (pow.f64 (*.f64 y -12/29) 3)) (+.f64 (*.f64 (*.f64 y (*.f64 x 3)) (*.f64 y (*.f64 x 3))) (-.f64 (*.f64 (*.f64 y y) 144/841) (*.f64 (*.f64 y (*.f64 x 3)) (*.f64 y -12/29)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (*.f64 x 3)) (*.f64 y (*.f64 x 3))) (*.f64 (*.f64 y y) 144/841)) (-.f64 (*.f64 y (*.f64 x 3)) (*.f64 y -12/29)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":35.425048828125,"type":"rewrite"},{"count":[[45,29]],"egraph":[[9,994,186,0.012959248999999999],[8,988,186,0.010736583],[7,891,186,0.008441915999999999],[6,650,186,0.0058938739999999995],[5,401,186,0.0034370829999999996],[4,265,186,0.002035749],[3,208,186,0.0013180409999999998],[2,112,186,0.0007305829999999999],[1,45,186,0.000333416],[0,19,186,0.000117291]],"inputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 -12/29 y)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 3 (*.f64 y x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 (-.f64 (*.f64 3 x) 12/29) y)","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -3 x) 12/29)))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 -12/29 y)","(*.f64 y -12/29)","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 x y))","(*.f64 x (*.f64 3 y))","(*.f64 y (*.f64 3 x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 x y))","(*.f64 x (*.f64 3 y))","(*.f64 y (*.f64 3 x))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (fma.f64 3 x -12/29) y)","(*.f64 y (fma.f64 3 x -12/29))"]],"stop":[["saturated",1]],"time":27.7978515625,"type":"simplify"},{"compiler":[[463,294]],"time":6.4150390625,"type":"eval"},{"alts":[["(+.f64 (*.f64 3 (*.f64 y x)) (cbrt.f64 (*.f64 (pow.f64 y 3) -1728/24389)))","fresh",26.435616737732996],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 2) (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))","fresh",0.7681391114323551],["(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","done",0.19140625],["(fma.f64 (*.f64 3 y) x (pow.f64 (cbrt.f64 (*.f64 y -12/29)) 3))","fresh",0.5007401367581883],["(fma.f64 (*.f64 y x) 3 (sqrt.f64 (*.f64 144/841 (*.f64 y y))))","fresh",28.205203503203794],["(*.f64 y (fma.f64 3 x -12/29))","fresh",0.40625]],"compiler":[[14,11],[23,17],[10,7],[13,10],[13,9],[8,6]],"count":[[45,6]],"kept":[{"done":[0,0],"fresh":[4,4],"new":[40,1],"picked":[1,1]}],"min-error":[0.0078125],"time":7.10009765625,"type":"prune"},{"accuracy":[0.16796875],"baseline":[0.16796875],"branch":[["x",0.16796875,1],["y",0.16796875,1],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)",0.16796875,1],["(*.f64 (-.f64 x (/.f64 16 116)) 3)",0.16796875,1],["(-.f64 x (/.f64 16 116))",0.16796875,1]],"compiler":[[3,2],[3,2],[11,9],[9,8],[7,6],[185,129]],"count":[[15,1]],"inputs":[["(fma.f64 (*.f64 y x) 3 (sqrt.f64 (*.f64 144/841 (*.f64 y y))))","(*.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))) 2) (cbrt.f64 (fma.f64 (*.f64 3 y) x (*.f64 y -12/29))))","(fma.f64 (*.f64 3 y) x (pow.f64 (cbrt.f64 (*.f64 y -12/29)) 3))","(+.f64 (*.f64 3 (*.f64 y x)) (pow.f64 (cbrt.f64 (*.f64 y -12/29)) 3))","(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))","(fma.f64 (*.f64 y x) 3 (*.f64 y -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (cbrt.f64 (*.f64 (pow.f64 y 3) -1728/24389)))","(*.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) (pow.f64 (cbrt.f64 (fma.f64 3 (*.f64 y x) (*.f64 y -12/29))) 2))","(*.f64 y (fma.f64 3 x -12/29))","(+.f64 (*.f64 3 (*.f64 y x)) (*.f64 -12/29 y))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) -1728/24389) (+.f64 (*.f64 (*.f64 x 3) (*.f64 x 3)) (-.f64 144/841 (*.f64 (*.f64 x 3) -12/29)))) y)","(pow.f64 (cbrt.f64 (*.f64 (fma.f64 x 3 -12/29) y)) 3)","(*.f64 (*.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) (pow.f64 (cbrt.f64 (fma.f64 x 3 -12/29)) 2)) y)","(*.f64 (fma.f64 x 3 -12/29) y)","(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)"]],"link":["."],"name":["Data.Colour.CIE:cieLAB from colour-2.3.3, A"],"oracle":[49.17654520839246],"outputs":[["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))"]],"time":29.8388671875,"times":[["x",6.089111328125],["y",5.81787109375],["(*.f64 (*.f64 (-.f64 x (/.f64 16 116)) 3) y)",6.054931640625],["(*.f64 (-.f64 x (/.f64 16 116)) 3)",4.18994140625],["(-.f64 x (/.f64 16 116))",3.968994140625]],"type":"regimes"},{"compiler":[[10,7]],"egraph":[[1,10,11,3.1624e-5],[0,8,11,1.8333e-5]],"inputs":[["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (*.f64 3 y) x (*.f64 y -12/29))"]],"stop":[["fuel",1],["saturated",1]],"time":8.402099609375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[10,7]],"remove-preprocessing":[[]],"time":8.486083984375,"type":"end"}]
[{"compiler":[[14,12]],"method":["search"],"sampling":[[12,0.4987797737121582,0.0009760856628417969,0.500244140625],[11,0.4978036880493164,0.0019521713256835938,0.500244140625],[10,0.4958515167236328,0.0039043426513671875,0.500244140625],[9,0.4919471740722656,0.007808685302734375,0.500244140625],[8,0.48413848876953125,0.01561737060546875,0.500244140625],[7,0.4685211181640625,0.0312347412109375,0.500244140625],[6,0.437286376953125,0.062469482421875,0.500244140625],[5,0.37481689453125,0.12493896484375,0.500244140625],[4,0.2498779296875,0.2498779296875,0.500244140625],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.26904296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.075927734375,2],["body",512,"valid",269.594482421875,2045],["body",1024,"valid",1046.9208984375,4227],["body",2048,"valid",158.984375,417],["body",256,"valid",93.874267578125,1567]],"time":1578.342041015625,"type":"sample"},{"compiler":[[13,11]],"egraph":[[0,1,1,1.459e-6],[31,7971,13,0.213746999],[30,7611,13,0.20410729],[29,7611,13,0.189597456],[28,7611,13,0.17861379],[27,7603,13,0.169273498],[26,7583,13,0.15998354],[25,7535,13,0.150715498],[24,7427,13,0.140066873],[23,7127,13,0.129674332],[22,6685,13,0.11694183200000001],[21,6261,13,0.10752612400000001],[20,6223,13,0.09709212400000002],[19,6103,13,0.08824833300000001],[18,6007,13,0.07973445800000001],[17,5726,13,0.069920333],[16,4951,13,0.05969854100000001],[15,3712,13,0.04962433300000001],[14,2569,13,0.039172875],[13,2223,13,0.030400875],[12,2081,13,0.024257292],[11,1877,13,0.018976667],[10,1481,13,0.013861875],[9,1042,13,0.008821625],[8,591,13,0.005096458],[7,272,13,0.002747833],[6,153,13,0.001534625],[5,109,13,0.000975542],[4,73,13,0.000626542],[3,43,13,0.000369542],[2,28,13,0.000198],[1,20,13,0.000108083],[0,11,15,5.3875e-5]],"inputs":[["0"],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","(*.f64 1/2 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":239.2080078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[31,7971,13,0.21236750100000001],[30,7611,13,0.202846667],[29,7611,13,0.18835295900000001],[28,7611,13,0.177396042],[27,7603,13,0.16813187500000001],[26,7583,13,0.15886925000000002],[25,7535,13,0.149632125],[24,7427,13,0.138948833],[23,7127,13,0.128609167],[22,6685,13,0.116098625],[21,6261,13,0.10678837499999999],[20,6223,13,0.09658283299999999],[19,6103,13,0.087721917],[18,6007,13,0.079116834],[17,5726,13,0.069390917],[16,4951,13,0.059448375],[15,3712,13,0.049493292],[14,2569,13,0.03902],[13,2223,13,0.03019225],[12,2081,13,0.024080125],[11,1877,13,0.018787375000000002],[10,1481,13,0.013718750000000002],[9,1042,13,0.008671292],[8,591,13,0.0050199170000000005],[7,272,13,0.002716792],[6,153,13,0.001495292],[5,109,13,0.0009390420000000001],[4,73,13,0.000600833],[3,43,13,0.00035970800000000003],[2,28,13,0.00019575000000000001],[1,20,13,0.00010670800000000001],[0,11,15,5.1e-5]],"inputs":[["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","(*.f64 1/2 (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))","(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))"]],"stop":[["node limit",1]],"time":224.921875,"type":"simplify"},{"compiler":[[21,17]],"time":0.483154296875,"type":"eval"},{"alts":[["(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","next",0.0078125]],"compiler":[[9,7],[9,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.871826171875,"type":"prune"},{"compiler":[[24,8]],"locations":[["(-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))",0.0078125,true]],"time":5.297119140625,"type":"localize"},{"count":[[1,12]],"series":[["(-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","x","-inf",0.3369140625],["(-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","x","inf",0.455078125],["(-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))","x","0",0.971923828125]],"time":1.81787109375,"type":"series"},{"count":[[1,35]],"egraph":[[2,1865,8,0.013921416999999998],[1,130,8,0.002454917],[0,6,10,0.00016475]],"inputs":[["(-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 x) (neg.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 x) (*.f64 (neg.f64 (log1p.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) (fma.f64 (neg.f64 (log1p.f64 x)) 1 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (log1p.f64 x))) (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 (log1p.f64 x))) (sqrt.f64 (log1p.f64 x)) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 x) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))) 2) (cbrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))) (sqrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log1p.f64 x) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log1p.f64 x) (+.f64 (log1p.f64 x) (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log1p.f64 x) 2)) (/.f64 1 (+.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x))) (-.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log1p.f64 x) (+.f64 (log1p.f64 x) (log1p.f64 x)))) (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log1p.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (log1p.f64 x) (log1p.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log1p.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log1p.f64 x) 3)) (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log1p.f64 x) (+.f64 (log1p.f64 x) (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log1p.f64 x) 2)) (+.f64 (log1p.f64 x) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log1p.f64 x) 3))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log1p.f64 x) (+.f64 (log1p.f64 x) (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log1p.f64 x) 2))) (neg.f64 (+.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (neg.f64 (log1p.f64 x)) 3)) (+.f64 (pow.f64 (log1p.f64 x) 2) (-.f64 (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x))) (*.f64 (log1p.f64 x) (neg.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))) (-.f64 (log1p.f64 x) (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 x 1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 x) (log1p.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 x) (neg.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) (cbrt.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))))))"]],"rules":[["egg-rr",35]],"stop":[["node limit",1]],"time":32.1181640625,"type":"rewrite"},{"count":[[47,57]],"egraph":[[6,7369,174,0.030358792],[5,2767,174,0.019084709],[4,1163,174,0.007822043],[3,593,174,0.0035962090000000004],[2,258,174,0.001677667],[1,109,174,0.0006939170000000001],[0,40,177,0.000210167]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 2/3 (pow.f64 x 3)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))","(*.f64 -1 (log.f64 -1))","(+.f64 (*.f64 -1 (log.f64 -1)) (*.f64 2 (/.f64 1 x)))","(+.f64 (*.f64 -1 (log.f64 -1)) (+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (*.f64 2 (/.f64 1 x))))","(+.f64 (*.f64 -1 (log.f64 -1)) (+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))","(log.f64 -1)","(+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x)))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x))))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 2 x (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2 x))","(*.f64 x (fma.f64 x (*.f64 x 2/3) 2))","(*.f64 x (fma.f64 2/3 (*.f64 x x) 2))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2 x (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2 x (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 x (fma.f64 2/3 (*.f64 x x) 2) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2 x) (+.f64 (*.f64 2/3 (pow.f64 x 3)) (*.f64 2/5 (pow.f64 x 5)))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2 x (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","(fma.f64 2 x (fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (fma.f64 2/7 (pow.f64 x 7) (*.f64 2 x))))","(fma.f64 2 x (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))","(*.f64 -1 (log.f64 -1))","(neg.f64 (log.f64 -1))","(+.f64 (*.f64 -1 (log.f64 -1)) (*.f64 2 (/.f64 1 x)))","(fma.f64 -1 (log.f64 -1) (/.f64 2 x))","(-.f64 (/.f64 2 x) (log.f64 -1))","(+.f64 (*.f64 -1 (log.f64 -1)) (+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (*.f64 2 (/.f64 1 x))))","(fma.f64 -1 (log.f64 -1) (+.f64 (/.f64 2 x) (/.f64 2/3 (pow.f64 x 3))))","(+.f64 (-.f64 (/.f64 2 x) (log.f64 -1)) (/.f64 2/3 (pow.f64 x 3)))","(+.f64 (/.f64 2 x) (-.f64 (/.f64 2/3 (pow.f64 x 3)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 -1)) (+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))","(fma.f64 -1 (log.f64 -1) (+.f64 (/.f64 2/3 (pow.f64 x 3)) (+.f64 (/.f64 2 x) (/.f64 2/5 (pow.f64 x 5)))))","(+.f64 (+.f64 (-.f64 (/.f64 2 x) (log.f64 -1)) (/.f64 2/3 (pow.f64 x 3))) (/.f64 2/5 (pow.f64 x 5)))","(+.f64 (/.f64 2/3 (pow.f64 x 3)) (+.f64 (/.f64 2 x) (-.f64 (/.f64 2/5 (pow.f64 x 5)) (log.f64 -1))))","(-.f64 (/.f64 2 x) (-.f64 (-.f64 (log.f64 -1) (/.f64 2/3 (pow.f64 x 3))) (/.f64 2/5 (pow.f64 x 5))))","(+.f64 (-.f64 (/.f64 2 x) (log.f64 -1)) (+.f64 (/.f64 2/3 (pow.f64 x 3)) (/.f64 2/5 (pow.f64 x 5))))","(+.f64 (/.f64 2 x) (-.f64 (-.f64 (/.f64 2/3 (pow.f64 x 3)) (log.f64 -1)) (/.f64 -2/5 (pow.f64 x 5))))","(log.f64 -1)","(+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x)))","(+.f64 (log.f64 -1) (/.f64 2 x))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (*.f64 2 (/.f64 1 x))))","(+.f64 (/.f64 2/3 (pow.f64 x 3)) (+.f64 (log.f64 -1) (/.f64 2 x)))","(+.f64 (log.f64 -1) (+.f64 (/.f64 2 x) (/.f64 2/3 (pow.f64 x 3))))","(+.f64 (/.f64 2 x) (+.f64 (log.f64 -1) (/.f64 2/3 (pow.f64 x 3))))","(+.f64 (*.f64 2/3 (/.f64 1 (pow.f64 x 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 2 (/.f64 1 x)) (*.f64 2/5 (/.f64 1 (pow.f64 x 5))))))","(+.f64 (/.f64 2/3 (pow.f64 x 3)) (+.f64 (log.f64 -1) (+.f64 (/.f64 2 x) (/.f64 2/5 (pow.f64 x 5)))))","(+.f64 (/.f64 2 x) (+.f64 (/.f64 2/3 (pow.f64 x 3)) (+.f64 (log.f64 -1) (/.f64 2/5 (pow.f64 x 5)))))","(+.f64 (log.f64 -1) (+.f64 (/.f64 2/3 (pow.f64 x 3)) (+.f64 (/.f64 2 x) (/.f64 2/5 (pow.f64 x 5)))))","(+.f64 (log.f64 -1) (+.f64 (+.f64 (/.f64 2 x) (/.f64 2/3 (pow.f64 x 3))) (/.f64 2/5 (pow.f64 x 5))))","(+.f64 (/.f64 2/5 (pow.f64 x 5)) (+.f64 (log.f64 -1) (+.f64 (/.f64 2 x) (/.f64 2/3 (pow.f64 x 3)))))","(+.f64 (/.f64 2/3 (pow.f64 x 3)) (-.f64 (+.f64 (log.f64 -1) (/.f64 2 x)) (/.f64 -2/5 (pow.f64 x 5))))"]],"stop":[["node limit",1]],"time":44.2099609375,"type":"simplify"},{"compiler":[[843,501]],"time":9.77587890625,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))","next",0.06505924734522824],["(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","done",0.0078125]],"compiler":[[21,17],[9,7],[21,17]],"count":[[58,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[57,1],"picked":[1,1]}],"min-error":[0.00390625],"time":5.261962890625,"type":"prune"},{"compiler":[[87,69]],"locations":[["(*.f64 2/7 (pow.f64 x 7))",0.05078125,true],["(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))",0.08203125,true],["(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))",0.08203125,true]],"time":21.258056640625,"type":"localize"},{"count":[[3,24]],"series":[["(*.f64 2/7 (pow.f64 x 7))","x","-inf",0.2080078125],["(*.f64 2/7 (pow.f64 x 7))","x","inf",0.194091796875],["(*.f64 2/7 (pow.f64 x 7))","x","0",0.33203125],["(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","x","-inf",0.336181640625],["(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","x","inf",0.35107421875],["(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","x","0",0.366943359375],["(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","x","-inf",0.4638671875],["(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","x","inf",0.51904296875],["(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","x","0",0.59814453125]],"time":3.489990234375,"type":"series"},{"count":[[3,90]],"egraph":[[2,3155,42,0.026784292],[1,305,42,0.005261792],[0,14,42,0.000591042]],"inputs":[["(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(*.f64 2/7 (pow.f64 x 7))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) (*.f64 2/3 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (pow.f64 x 3)) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/3 (pow.f64 x 3)) 1) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))) (*.f64 2/7 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) (pow.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 2) (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) (sqrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 2/3 (pow.f64 x 3)) 3) (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 3)) (+.f64 (pow.f64 (*.f64 2/3 (pow.f64 x 3)) 2) (-.f64 (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 2) (*.f64 (*.f64 2/3 (pow.f64 x 3)) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 2/3 (pow.f64 x 3)) 2) (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 2)) (-.f64 (*.f64 2/3 (pow.f64 x 3)) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) (exp.f64 (*.f64 2/3 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) (exp.f64 (*.f64 2/3 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 2/3 (pow.f64 x 3))) (+.f64 1 (expm1.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/7 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/5 (pow.f64 x 5)) 1) (*.f64 2/7 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) (cbrt.f64 (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 2)) (cbrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) (sqrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 2/5 (pow.f64 x 5)) 3) (pow.f64 (*.f64 2/7 (pow.f64 x 7)) 3)) (+.f64 (pow.f64 (*.f64 2/5 (pow.f64 x 5)) 2) (-.f64 (*.f64 (pow.f64 x 14) 4/49) (*.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 2/5 (pow.f64 x 5)) 2) (*.f64 (pow.f64 x 14) 4/49)) (-.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/7 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 2/7) (pow.f64 x 7)) (exp.f64 (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 2/7 (pow.f64 x 7)))) (exp.f64 (*.f64 2/5 (pow.f64 x 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 2/5 (pow.f64 x 5))) (+.f64 1 (expm1.f64 (*.f64 2/7 (pow.f64 x 7))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 2/7 (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 2/7) (pow.f64 x 7))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 2/7) (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 2/7) (pow.f64 x 7)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 2/7) (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 2/7 (pow.f64 x 7)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/7 (pow.f64 x 7)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 14) 4/49) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2/7 (pow.f64 x 7)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/7 (pow.f64 x 7))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2/7) (pow.f64 x 7/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 14) 4/49))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 2/7) (pow.f64 x 7)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 2/7 (pow.f64 x 7)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2/7 (pow.f64 x 7)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2/7 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2/7 (pow.f64 x 7))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 7 (log.f64 x) (log.f64 2/7)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 7 (log.f64 x) (log.f64 2/7)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (fma.f64 7 (log.f64 x) (log.f64 2/7))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 2/7 (pow.f64 x 7)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 2/7) (pow.f64 x 7/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (fma.f64 7 (log.f64 x) (log.f64 2/7)) 1) 1))))))"]],"rules":[["egg-rr",21],["egg-rr",34],["egg-rr",35]],"stop":[["node limit",1]],"time":51.406005859375,"type":"rewrite"},{"count":[[114,98]],"egraph":[[18,7476,336,0.09756275100000002],[17,7262,336,0.08671354300000002],[16,6885,336,0.07685487600000002],[15,6484,336,0.06843133400000001],[14,5977,336,0.060120376],[13,5335,336,0.051855251000000005],[12,4441,336,0.043258084],[11,3762,336,0.034583209000000004],[10,3281,336,0.027350084],[9,2966,336,0.021085126],[8,2719,336,0.016221792999999998],[7,2565,336,0.012202458999999999],[6,1616,336,0.008591666999999999],[5,1102,336,0.0053117089999999995],[4,411,336,0.003047834],[3,212,336,0.001440917],[2,91,336,0.0007715],[1,43,336,0.000368875],[0,17,336,0.000134875]],"inputs":[["(*.f64 2/3 (pow.f64 x 3))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(*.f64 2/5 (pow.f64 x 5))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 (pow.f64 x 3))","(+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3)))","(fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","(fma.f64 2/5 (pow.f64 x 5) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/7 (pow.f64 x 7))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","(fma.f64 2/5 (pow.f64 x 5) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/7 (pow.f64 x 7))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","(fma.f64 2/5 (pow.f64 x 5) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/7 (pow.f64 x 7))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","(fma.f64 2/5 (pow.f64 x 5) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/7 (pow.f64 x 7))))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","(fma.f64 2/5 (pow.f64 x 5) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/7 (pow.f64 x 7))))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (+.f64 (*.f64 2/5 (pow.f64 x 5)) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/3 (pow.f64 x 3))))","(fma.f64 2/7 (pow.f64 x 7) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/5 (pow.f64 x 5))))","(fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))","(fma.f64 2/5 (pow.f64 x 5) (fma.f64 2/3 (pow.f64 x 3) (*.f64 2/7 (pow.f64 x 7))))","(*.f64 2/5 (pow.f64 x 5))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(*.f64 2/7 (pow.f64 x 7))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))","(+.f64 (*.f64 2/7 (pow.f64 x 7)) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/7 (pow.f64 x 7) (*.f64 2/5 (pow.f64 x 5)))","(fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7)))"]],"stop":[["node limit",1]],"time":120.196044921875,"type":"simplify"},{"compiler":[[2484,2056]],"time":38.0439453125,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))","done",0.06505924734522824],["(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","done",0.0078125]],"compiler":[[21,17],[9,7]],"count":[[100,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[98,0],"picked":[1,1]}],"min-error":[0.00390625],"time":24.1181640625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))",0.0078125,1],["(log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))",0.0078125,1],["(/.f64 (+.f64 1 x) (-.f64 1 x))",0.0078125,1]],"compiler":[[2,1],[13,11],[9,7],[8,6],[41,33]],"count":[[3,1]],"inputs":[["(*.f64 1/2 (fma.f64 2 x (fma.f64 2/3 (pow.f64 x 3) (fma.f64 2/5 (pow.f64 x 5) (*.f64 2/7 (pow.f64 x 7))))))","(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))"]],"link":["."],"name":["Hyperbolic arc-(co)tangent"],"oracle":[58.96769912890966],"outputs":[["(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))"]],"time":10.11279296875,"times":[["x",2.9169921875],["(*.f64 (/.f64 1 2) (log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x))))",2.083984375],["(log.f64 (/.f64 (+.f64 1 x) (-.f64 1 x)))",2.0048828125],["(/.f64 (+.f64 1 x) (-.f64 1 x))",2.004150390625]],"type":"regimes"},{"compiler":[[9,7]],"egraph":[[4,24,13,0.00014970899999999999],[3,23,13,0.00011883399999999998],[2,20,13,8.712499999999999e-5],[1,15,13,5.6667e-5],[0,8,13,2.9542e-5]],"inputs":[["(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (-.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))"]],"stop":[["done",1],["saturated",1]],"time":8.39306640625,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.294189453125,"type":"end"}]
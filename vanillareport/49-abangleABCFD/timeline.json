[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.6497556329704821,0.09170725150033832,0.2585371155291796],[11,0.620487361215055,0.12097552325576544,0.2585371155291796],[10,0.5853654351085424,0.17951206676661968,0.23512249812483788],[9,0.5307313278317451,0.23414617404341698,0.23512249812483788],[8,0.46829234808683395,0.34341438859701157,0.18829326331615448],[7,0.37463387846946716,0.43707285821437836,0.18829326331615448],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.075927734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",9.47607421875,279],["body",256,"valid",280.872802734375,8256]],"time":297.818115234375,"type":"sample"},{"compiler":[[10,6]],"egraph":[[1,2,2,5.833e-6],[0,2,2,5.25e-6],[8,665,24,0.0057441260000000004],[7,410,24,0.004845084],[6,351,24,0.0032999170000000003],[5,306,24,0.002499751],[4,212,24,0.001840959],[3,147,24,0.001007917],[2,100,24,0.000556167],[1,35,24,0.000232626],[0,11,24,7.1417e-5]],"inputs":[["0","1"],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","(neg.f64 (*.f64 (*.f64 (*.f64 b b) a) a))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0"],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","(*.f64 (*.f64 a (*.f64 a b)) (neg.f64 b))","(*.f64 a (*.f64 a (neg.f64 (*.f64 b b))))","(*.f64 a (*.f64 a (*.f64 b (neg.f64 b))))","(*.f64 b (neg.f64 (*.f64 a (*.f64 a b))))","(neg.f64 (*.f64 (*.f64 (*.f64 b b) a) a))","(*.f64 (*.f64 a (*.f64 a b)) (neg.f64 b))","(*.f64 a (*.f64 a (neg.f64 (*.f64 b b))))","(*.f64 a (*.f64 a (*.f64 b (neg.f64 b))))","(*.f64 b (neg.f64 (*.f64 a (*.f64 a b))))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort a b)"]],"time":28.87109375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[9,601,12,0.006135458],[8,517,12,0.005262416],[7,372,12,0.004131833],[6,323,12,0.002943916],[5,260,12,0.00219125],[4,192,12,0.00147],[3,125,12,0.000810917],[2,59,12,0.000395125],[1,21,12,0.000148209],[0,7,12,5.0917e-5]],"inputs":[["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","(*.f64 (*.f64 (*.f64 a a) b) (neg.f64 b))","(*.f64 (*.f64 a a) (neg.f64 (*.f64 b b)))","(*.f64 a (*.f64 (*.f64 a (neg.f64 b)) b))","(*.f64 a (*.f64 (*.f64 b b) (neg.f64 a)))","(*.f64 (*.f64 a a) (*.f64 b (neg.f64 b)))"]],"stop":[["saturated",1]],"time":16.54296875,"type":"simplify"},{"compiler":[[18,9]],"time":0.2939453125,"type":"eval"},{"alts":[["(*.f64 (*.f64 a a) (*.f64 b (neg.f64 b)))","fresh",18.117086821179942],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","next",13.908286539221722]],"compiler":[[10,6],[10,6],[10,6],[10,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[13.875415298990164],"time":1.133056640625,"type":"prune"},{"compiler":[[27,6]],"locations":[["(*.f64 (*.f64 (*.f64 a a) b) b)",2.9093683708394886,true],["(*.f64 (*.f64 a a) b)",10.403304241106502,true]],"time":4.408935546875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 (*.f64 a a) b) b)","b","-inf",0.1669921875],["(*.f64 (*.f64 (*.f64 a a) b) b)","b","inf",0.2880859375],["(*.f64 (*.f64 (*.f64 a a) b) b)","b","0",0.320068359375],["(*.f64 (*.f64 (*.f64 a a) b) b)","a","-inf",0.15087890625],["(*.f64 (*.f64 (*.f64 a a) b) b)","a","inf",0.324951171875],["(*.f64 (*.f64 (*.f64 a a) b) b)","a","0",0.409912109375],["(*.f64 (*.f64 a a) b)","b","-inf",0.2958984375],["(*.f64 (*.f64 a a) b)","b","inf",0.47705078125],["(*.f64 (*.f64 a a) b)","b","0",0.451171875],["(*.f64 (*.f64 a a) b)","a","-inf",0.176025390625],["(*.f64 (*.f64 a a) b)","a","inf",0.430908203125],["(*.f64 (*.f64 a a) b)","a","0",0.51904296875]],"time":4.15185546875,"type":"series"},{"count":[[2,22]],"egraph":[[2,1489,14,0.014969333],[1,121,14,0.002069708],[0,6,17,0.000139583]],"inputs":[["(*.f64 (*.f64 a a) b)","(*.f64 (*.f64 (*.f64 a a) b) b)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (*.f64 a a) b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 a a) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 a a) b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 a a) b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a (sqrt.f64 b)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 a 4) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 a) a) b))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 a a) b) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 a a) b)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 a a) b)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (*.f64 a b) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (*.f64 a b) 2)))))))"]],"rules":[["egg-rr",11],["egg-rr",11]],"stop":[["node limit",1]],"time":33.111083984375,"type":"rewrite"},{"count":[[70,26]],"egraph":[[19,3815,408,0.0660425],[18,3501,408,0.053578167],[17,3201,408,0.046825667],[16,2922,408,0.040618875],[15,2657,408,0.035090666],[14,2413,408,0.029975125000000002],[13,2183,408,0.025469625000000003],[12,1968,408,0.02148575],[11,1779,408,0.017943375],[10,1615,408,0.014849167],[9,1468,408,0.01191825],[8,1346,408,0.009345375],[7,1226,408,0.007307542],[6,1126,408,0.005535833],[5,1060,408,0.004029042],[4,483,408,0.0024059169999999996],[3,108,408,0.0010145829999999999],[2,39,408,0.000397042],[1,18,408,0.000194958],[0,8,408,7.6542e-5]],"inputs":[["(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) b)","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) b)","(*.f64 (*.f64 a a) b)","(*.f64 a (*.f64 a b))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 a (*.f64 a (*.f64 b b)))"]],"stop":[["node limit",1]],"time":91.865966796875,"type":"simplify"},{"compiler":[[243,139]],"time":3.318115234375,"type":"eval"},{"alts":[["(neg.f64 (pow.f64 (*.f64 a b) 2))","next",0.30697250976844204],["(neg.f64 (*.f64 a (*.f64 a (*.f64 b b))))","fresh",14.233206049392749],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","done",13.908286539221722],["(neg.f64 (*.f64 (*.f64 a (*.f64 a b)) b))","fresh",3.091184794326354],["(neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3))","fresh",0.4897615235163767]],"compiler":[[8,6],[10,6],[10,6],[10,6],[11,9],[8,6],[10,6],[10,6],[11,9]],"count":[[28,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[26,4],"picked":[1,1]}],"min-error":[0.03515625],"time":5.077880859375,"type":"prune"},{"compiler":[[19,9]],"locations":[["(pow.f64 (*.f64 a b) 2)",0.30697250976844204,true]],"time":4.287109375,"type":"localize"},{"count":[[1,24]],"series":[["(pow.f64 (*.f64 a b) 2)","b","-inf",0.412841796875],["(pow.f64 (*.f64 a b) 2)","b","inf",0.39794921875],["(pow.f64 (*.f64 a b) 2)","b","0",0.68603515625],["(pow.f64 (*.f64 a b) 2)","a","-inf",0.431884765625],["(pow.f64 (*.f64 a b) 2)","a","inf",0.362060546875],["(pow.f64 (*.f64 a b) 2)","a","0",0.44384765625]],"time":2.81201171875,"type":"series"},{"count":[[1,22]],"egraph":[[2,1380,7,0.013847624999999999],[1,125,7,0.0019415419999999999],[0,6,7,0.000179292]],"inputs":[["(pow.f64 (*.f64 a b) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (*.f64 a b) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 b (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a a) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)) (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (cbrt.f64 (pow.f64 (*.f64 a b) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 a b)) (*.f64 (sqrt.f64 (*.f64 a b)) (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) (sqrt.f64 (*.f64 a b))) (sqrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) a) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 a b) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (*.f64 a b))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":30.510986328125,"type":"rewrite"},{"count":[[46,24]],"egraph":[[19,7414,240,0.110781708],[18,7382,240,0.09971179100000001],[17,7284,240,0.09138066600000001],[16,6958,240,0.08303858300000001],[15,6614,240,0.07456770800000001],[14,6053,240,0.066308583],[13,5315,240,0.057032666],[12,4665,240,0.047732333],[11,4173,240,0.039317041000000004],[10,3525,240,0.032210041],[9,3208,240,0.024659833000000003],[8,2966,240,0.019361333],[7,2768,240,0.014854625],[6,2555,240,0.0109],[5,2463,240,0.007352833],[4,440,240,0.003827125],[3,105,240,0.0008952909999999999],[2,37,240,0.000341041],[1,16,240,0.000160708],[0,7,240,6.1708e-5]],"inputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))"]],"stop":[["node limit",1]],"time":130.01806640625,"type":"simplify"},{"compiler":[[236,111]],"time":3.2119140625,"type":"eval"},{"alts":[["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","done",13.908286539221722],["(neg.f64 (*.f64 a (*.f64 a (*.f64 b b))))","fresh",14.233206049392749],["(neg.f64 (*.f64 b (*.f64 a (*.f64 a b))))","fresh",3.091184794326354],["(neg.f64 (pow.f64 (*.f64 a b) 2))","done",0.30697250976844204],["(neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3))","next",0.4897615235163767],["(neg.f64 (*.f64 (*.f64 (*.f64 a b) b) a))","fresh",6.008786893456529],["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))))","fresh",0.5414302367579364],["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (cbrt.f64 (pow.f64 (*.f64 a b) 4))))","fresh",17.090450110173922]],"compiler":[[10,6],[10,6],[10,6],[8,6],[11,9],[10,6],[18,9],[16,11],[10,6],[10,6],[11,9],[10,6],[18,9],[16,11]],"count":[[29,8]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[24,5],"picked":[1,1]}],"min-error":[0.01171875],"time":6.114990234375,"type":"prune"},{"compiler":[[37,21]],"locations":[["(pow.f64 (*.f64 a b) 2)",0.30697250976844204,false],["(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)",0.43175517583195644,true],["(cbrt.f64 (pow.f64 (*.f64 a b) 2))",21.163229809159493,true]],"time":8.943115234375,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)","b","-inf",0.39013671875],["(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)","b","inf",0.466064453125],["(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)","b","0",0.3798828125],["(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)","a","-inf",0.3740234375],["(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)","a","inf",0.51904296875],["(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)","a","0",0.572998046875],["(cbrt.f64 (pow.f64 (*.f64 a b) 2))","b","-inf",0.260009765625],["(cbrt.f64 (pow.f64 (*.f64 a b) 2))","b","inf",0.294921875],["(cbrt.f64 (pow.f64 (*.f64 a b) 2))","b","0",0.257080078125],["(cbrt.f64 (pow.f64 (*.f64 a b) 2))","a","-inf",0.310791015625],["(cbrt.f64 (pow.f64 (*.f64 a b) 2))","a","inf",0.291015625],["(cbrt.f64 (pow.f64 (*.f64 a b) 2))","a","0",0.4521484375]],"time":4.704833984375,"type":"series"},{"count":[[2,48]],"egraph":[[2,1889,16,0.017032501000000002],[1,192,16,0.002910293],[0,9,16,0.000274459]],"inputs":[["(cbrt.f64 (pow.f64 (*.f64 a b) 2))","(pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 a) 2) (pow.f64 (cbrt.f64 b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) (pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)) 1/3) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a a) 1/3) (pow.f64 (*.f64 b b) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (*.f64 a b) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (*.f64 b (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (*.f64 a (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (cbrt.f64 (pow.f64 (*.f64 a b) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a a) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)) (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) (cbrt.f64 (pow.f64 (*.f64 a b) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a b) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (*.f64 (cbrt.f64 (*.f64 a b)) (cbrt.f64 (pow.f64 (*.f64 a b) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 a b)) (*.f64 (sqrt.f64 (*.f64 a b)) (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))) 3) (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) (sqrt.f64 (*.f64 a b))) (sqrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) a) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) b) a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 a b) (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)) 1) (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4)) (cbrt.f64 (*.f64 a b))) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 a b) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (*.f64 a b))))))))"]],"rules":[["egg-rr",27],["egg-rr",21]],"stop":[["node limit",1]],"time":36.68115234375,"type":"rewrite"},{"count":[[48,48]],"egraph":[[0,0,0,2.0583e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.5478515625,"type":"simplify"},{"compiler":[[887,481]],"time":10.512939453125,"type":"eval"},{"alts":[["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))) 3) (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))","fresh",17.171600256700554],["(neg.f64 (pow.f64 (*.f64 a b) 2))","done",0.30697250976844204],["(neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3))","done",0.4897615235163767],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","done",13.908286539221722],["(neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) (cbrt.f64 (pow.f64 (*.f64 a b) 4)))))","fresh",17.044524290080357],["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))))","next",0.5414302367579364],["(neg.f64 (*.f64 b (*.f64 a (*.f64 a b))))","fresh",3.091184794326354],["(neg.f64 (*.f64 (*.f64 (*.f64 a b) b) a))","fresh",6.008786893456529]],"compiler":[[19,14],[8,6],[11,9],[10,6],[25,17],[18,9],[10,6],[10,6],[19,14],[25,17],[18,9],[10,6],[10,6]],"count":[[80,8]],"kept":[{"done":[2,2],"fresh":[5,1],"new":[72,4],"picked":[1,1]}],"min-error":[0.00390625],"time":15.10205078125,"type":"prune"},{"compiler":[[57,15]],"locations":[["(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))",0.244472509768442,true],["(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))",0.28125,true],["(pow.f64 (cbrt.f64 (*.f64 a b)) 2)",0.5029487793053261,true],["(cbrt.f64 (*.f64 a b))",11.42552050727512,true]],"time":9.614990234375,"type":"localize"},{"count":[[4,24]],"series":[["(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))","b","-inf",1.48095703125],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))","b","inf",0.342041015625],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))","b","0",0.25],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))","a","-inf",1.833984375],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))","a","inf",0.340087890625],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))","a","0",0.223876953125],["(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))","b","-inf",0.282958984375],["(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))","b","inf",0.244140625],["(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))","b","0",0.31494140625],["(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))","a","-inf",0.31591796875],["(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))","a","inf",0.25390625],["(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))","a","0",0.31591796875],["(pow.f64 (cbrt.f64 (*.f64 a b)) 2)","b","-inf",0.3818359375],["(pow.f64 (cbrt.f64 (*.f64 a b)) 2)","b","inf",0.4638671875],["(pow.f64 (cbrt.f64 (*.f64 a b)) 2)","b","0",0.255126953125],["(pow.f64 (cbrt.f64 (*.f64 a b)) 2)","a","-inf",1.047119140625],["(pow.f64 (cbrt.f64 (*.f64 a b)) 2)","a","inf",0.31494140625],["(pow.f64 (cbrt.f64 (*.f64 a b)) 2)","a","0",0.2939453125],["(cbrt.f64 (*.f64 a b))","b","-inf",0.320068359375],["(cbrt.f64 (*.f64 a b))","b","inf",0.200927734375],["(cbrt.f64 (*.f64 a b))","b","0",0.185791015625],["(cbrt.f64 (*.f64 a b))","a","-inf",0.407958984375],["(cbrt.f64 (*.f64 a b))","a","inf",0.19189453125],["(cbrt.f64 (*.f64 a b))","a","0",0.278076171875]],"time":10.81103515625,"type":"series"},{"count":[[4,68]],"egraph":[[2,2090,31,0.0187225],[1,185,31,0.003096208],[0,9,37,0.000229833]],"inputs":[["(cbrt.f64 (*.f64 a b))","(pow.f64 (cbrt.f64 (*.f64 a b)) 2)","(*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))","(*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 b) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 2) (cbrt.f64 (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 1/6) (pow.f64 (*.f64 a b) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 a b)) 1/3) (pow.f64 (sqrt.f64 (*.f64 a b)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 a b))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a b)) (cbrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 b) (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 a) 2) (pow.f64 (cbrt.f64 b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 1/6) (sqrt.f64 (*.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a b) 1/6) (*.f64 (pow.f64 (*.f64 a b) 1/6) (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 a b)) (pow.f64 (*.f64 a b) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)) 2)) (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 a (cbrt.f64 (*.f64 a b)))) (sqrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 a b)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a b))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 a b)) (cbrt.f64 a)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a b) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (*.f64 a b)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a b)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (*.f64 a b) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a b) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a b) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 a b) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 a b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (*.f64 a b) 2)))))))"]],"rules":[["egg-rr",11],["egg-rr",13],["egg-rr",22],["egg-rr",22]],"stop":[["node limit",1]],"time":43.39892578125,"type":"rewrite"},{"count":[[92,70]],"egraph":[[19,7414,240,0.11083787499999999],[18,7382,240,0.09976949999999998],[17,7284,240,0.09143916699999999],[16,6958,240,0.08308708399999999],[15,6614,240,0.074604125],[14,6053,240,0.06634245899999999],[13,5315,240,0.057079542],[12,4665,240,0.04775858399999999],[11,4173,240,0.039321208999999996],[10,3525,240,0.032221042],[9,3208,240,0.024682584],[8,2966,240,0.019385042],[7,2768,240,0.014867750000000002],[6,2555,240,0.010912000000000002],[5,2463,240,0.0073628750000000005],[4,440,240,0.0038334170000000004],[3,105,240,0.000899625],[2,37,240,0.000345625],[1,16,240,0.000163],[0,7,240,6.175e-5]],"inputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))","(*.f64 (pow.f64 a 2) (pow.f64 b 2))","(*.f64 (*.f64 a a) (*.f64 b b))","(*.f64 (*.f64 a b) (*.f64 a b))","(*.f64 a (*.f64 a (*.f64 b b)))"]],"stop":[["node limit",1]],"time":130.56103515625,"type":"simplify"},{"compiler":[[1644,635]],"time":13.740966796875,"type":"eval"},{"alts":[["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))","done",13.908286539221722],["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)) 3)))","fresh",0.7934146518211541],["(neg.f64 (pow.f64 (*.f64 a b) 2))","done",0.30697250976844204],["(neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3))","done",0.4897615235163767],["(neg.f64 (*.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 b) (cbrt.f64 (*.f64 a b)))) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))))","fresh",0.4779727660632624],["(neg.f64 (*.f64 b (*.f64 a (*.f64 a b))))","fresh",3.091184794326354],["(neg.f64 (*.f64 a (*.f64 a (*.f64 b b))))","fresh",14.233206049392749],["(neg.f64 (*.f64 (*.f64 (*.f64 a b) b) a))","fresh",6.008786893456529]],"compiler":[[10,6],[19,13],[8,6],[11,9],[22,11],[10,6],[10,6],[10,6]],"count":[[100,8]],"kept":[{"done":[3,3],"fresh":[4,2],"new":[92,3],"picked":[1,0]}],"min-error":[0.00390625],"time":18.38916015625,"type":"prune"},{"accuracy":[0.30697250976844204],"baseline":[0.30697250976844204],"branch":[["a",0.30697250976844204,1],["b",0.30697250976844204,1],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))",0.30697250976844204,1],["(*.f64 (*.f64 (*.f64 a a) b) b)",0.30697250976844204,1],["(*.f64 a a)",0.30697250976844204,1],["(*.f64 a a)",0.30697250976844204,1]],"compiler":[[3,2],[3,2],[10,6],[9,5],[5,3],[5,3],[204,82]],"count":[[18,1]],"inputs":[["(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 4)) 3)))","(neg.f64 (*.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 b) (cbrt.f64 (*.f64 a b)))) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))))","(neg.f64 (*.f64 a (*.f64 a (*.f64 b b))))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))) 3) (pow.f64 (cbrt.f64 (*.f64 a b)) 2)))","(neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 4))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2)) (cbrt.f64 (pow.f64 (*.f64 a b) 4)))))","(neg.f64 (*.f64 b (*.f64 a (*.f64 a b))))","(neg.f64 (*.f64 (*.f64 (*.f64 a b) b) a))","(neg.f64 (*.f64 a (*.f64 a (*.f64 b b))))","(neg.f64 (*.f64 b (*.f64 a (*.f64 a b))))","(neg.f64 (*.f64 (*.f64 (*.f64 a b) b) a))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (*.f64 (cbrt.f64 (*.f64 a b)) (*.f64 a b))))","(neg.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 a b)) 2) (cbrt.f64 (pow.f64 (*.f64 a b) 4))))","(neg.f64 (pow.f64 (*.f64 a b) 2))","(neg.f64 (*.f64 a (*.f64 a (*.f64 b b))))","(neg.f64 (*.f64 (*.f64 a (*.f64 a b)) b))","(neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (*.f64 a b) 2)) 3))","(*.f64 (*.f64 a a) (*.f64 b (neg.f64 b)))","(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))"]],"link":["."],"name":["ab-angle->ABCF D"],"oracle":[27.64772011051829],"outputs":[["(neg.f64 (pow.f64 (*.f64 a b) 2))"]],"time":31.758056640625,"times":[["a",6.466064453125],["b",6.2900390625],["(neg.f64 (*.f64 (*.f64 (*.f64 a a) b) b))",4.27197265625],["(*.f64 (*.f64 (*.f64 a a) b) b)",3.198974609375],["(*.f64 a a)",3.969970703125],["(*.f64 a a)",4.18701171875]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[3,15,9,7.45e-5],[2,14,9,5.7208e-5],[1,12,9,3.9333e-5],[0,7,9,2.2916e-5]],"inputs":[["(neg.f64 (pow.f64 (*.f64 a b) 2))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (pow.f64 (*.f64 a b) 2))"]],"stop":[["fuel",1],["saturated",1]],"time":8.268798828125,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[8,6],[8,6],[8,6]],"remove-preprocessing":[["(sort a b)"]],"time":8.50390625,"type":"end"}]
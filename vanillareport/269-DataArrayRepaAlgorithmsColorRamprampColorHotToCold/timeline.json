[{"compiler":[[17,13]],"method":["search"],"sampling":[[12,0.39200334013526117,0.5158451913720228,0.09215146849271605],[11,0.25353449859494503,0.6981950038230025,0.048270497582052485],[10,0.2106286603711851,0.745001372794377,0.044369966834437946],[9,0.15602122990458156,0.8191114569990532,0.02486731309636525],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":123.968994140625,"type":"analyze"},{"outcomes":[["body",256,"invalid",56.6962890625,1245],["body",256,"valid",379.501708984375,8256]],"time":445.06787109375,"type":"sample"},{"compiler":[[16,12]],"egraph":[[0,3,3,2.166e-6],[6,7035,52,0.033992958],[5,2921,52,0.020443207999999997],[4,1218,56,0.007659958],[3,497,60,0.002892042],[2,179,60,0.001043417],[1,70,68,0.000339792],[0,30,76,0.000115625]],"inputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 1/4)) z)) x))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 1/4)) x)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 1/4)) y)) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))","(+.f64 1 (*.f64 (/.f64 4 y) (-.f64 (fma.f64 y 1/4 x) z)))","(fma.f64 (/.f64 4 y) (-.f64 (fma.f64 y 1/4 x) z) 1)","(fma.f64 (-.f64 (fma.f64 y 1/4 x) z) (/.f64 4 y) 1)","(+.f64 1 (/.f64 (fma.f64 4 (-.f64 x z) y) y))","(+.f64 (*.f64 (-.f64 z x) (/.f64 -4 y)) 2)","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 1/4)) z)) x))","(+.f64 1 (/.f64 4 (/.f64 x (-.f64 (+.f64 y (*.f64 x 1/4)) z))))","(+.f64 1 (*.f64 (/.f64 4 x) (-.f64 (fma.f64 x 1/4 y) z)))","(fma.f64 (/.f64 4 x) (-.f64 (fma.f64 x 1/4 y) z) 1)","(fma.f64 (-.f64 (fma.f64 x 1/4 y) z) (/.f64 4 x) 1)","(+.f64 1 (/.f64 (fma.f64 4 (-.f64 y z) x) x))","(+.f64 (*.f64 (/.f64 4 x) (-.f64 y z)) 2)","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 1/4)) x)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 (*.f64 y 1/4) z) x)) y))","(+.f64 1 (*.f64 (/.f64 4 y) (-.f64 (fma.f64 y 1/4 z) x)))","(fma.f64 (/.f64 4 y) (-.f64 (fma.f64 y 1/4 z) x) 1)","(fma.f64 (-.f64 (fma.f64 y 1/4 z) x) (/.f64 4 y) 1)","(+.f64 1 (/.f64 (fma.f64 4 (-.f64 z x) y) y))","(+.f64 (*.f64 4 (/.f64 (-.f64 z x) y)) 2)","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 1/4)) y)) z))","(+.f64 1 (/.f64 4 (/.f64 z (-.f64 (+.f64 x (*.f64 1/4 z)) y))))","(+.f64 1 (*.f64 (/.f64 4 z) (-.f64 (fma.f64 1/4 z x) y)))","(fma.f64 (/.f64 4 z) (fma.f64 1/4 z (-.f64 x y)) 1)","(fma.f64 (-.f64 (fma.f64 1/4 z x) y) (/.f64 4 z) 1)","(+.f64 1 (/.f64 (fma.f64 4 (-.f64 x y) z) z))","(+.f64 (*.f64 (/.f64 4 z) (-.f64 x y)) 2)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":57.47998046875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[7,7691,11,0.02984375],[6,2136,11,0.018738499999999998],[5,770,11,0.005935459000000001],[4,346,14,0.002153125],[3,140,15,0.000938166],[2,55,15,0.00037370800000000005],[1,25,17,0.00014579100000000001],[0,13,19,5.6125e-5]],"inputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))","(+.f64 1 (/.f64 4 (/.f64 y (+.f64 x (-.f64 (*.f64 y 1/4) z)))))","(+.f64 1 (*.f64 (/.f64 4 y) (-.f64 (fma.f64 y 1/4 x) z)))","(fma.f64 (/.f64 4 y) (-.f64 (fma.f64 y 1/4 x) z) 1)","(fma.f64 (-.f64 (fma.f64 y 1/4 x) z) (/.f64 4 y) 1)","(+.f64 1 (/.f64 (fma.f64 4 (-.f64 x z) y) y))","(fma.f64 (/.f64 4 y) (-.f64 x z) 2)","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)"]],"stop":[["node limit",1]],"time":40.965087890625,"type":"simplify"},{"compiler":[[24,17]],"time":0.4189453125,"type":"eval"},{"alts":[["(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","next",0.01171875]],"compiler":[[11,8],[11,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01171875],"time":1.237060546875,"type":"prune"},{"compiler":[[24,10]],"locations":[["(/.f64 (-.f64 x z) y)",0.015625,true]],"time":4.714111328125,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (-.f64 x z) y)","y","-inf",0.30908203125],["(/.f64 (-.f64 x z) y)","y","inf",0.320068359375],["(/.f64 (-.f64 x z) y)","y","0",0.333984375],["(/.f64 (-.f64 x z) y)","z","-inf",0.410888671875],["(/.f64 (-.f64 x z) y)","z","inf",0.326904296875],["(/.f64 (-.f64 x z) y)","z","0",0.26708984375],["(/.f64 (-.f64 x z) y)","x","-inf",0.43603515625],["(/.f64 (-.f64 x z) y)","x","inf",0.404052734375],["(/.f64 (-.f64 x z) y)","x","0",0.370849609375]],"time":3.27978515625,"type":"series"},{"count":[[1,33]],"egraph":[[2,2130,7,0.019560416],[1,138,7,0.0026232499999999997],[0,6,7,0.000142458]],"inputs":[["(/.f64 (-.f64 x z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x y) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (-.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (cbrt.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x z)) 2) (*.f64 (cbrt.f64 (-.f64 x z)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) (sqrt.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x z)) (*.f64 (sqrt.f64 (-.f64 x z)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 x z)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x z)) 2) 1) (/.f64 (cbrt.f64 (-.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x z)) 1) (/.f64 (sqrt.f64 (-.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (-.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x z)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x z)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (-.f64 x z)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (-.f64 x z) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x z)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (-.f64 x z)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (-.f64 x z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 x z) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 x z) y)))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":36.97216796875,"type":"rewrite"},{"count":[[57,38]],"egraph":[[13,1036,156,0.012646000000000001],[12,983,156,0.010838417000000001],[11,922,156,0.008794334000000001],[10,637,156,0.006707042],[9,381,210,0.004356542],[8,249,210,0.002858542],[7,173,210,0.001896584],[6,119,210,0.001274709],[5,71,210,0.0007844589999999999],[4,47,210,0.0005007919999999999],[3,34,210,0.00032633399999999996],[2,24,210,0.00020395899999999998],[1,14,210,0.00012016699999999999],[0,9,246,5.325e-5]],"inputs":[["(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(/.f64 (neg.f64 z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(/.f64 (neg.f64 z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(/.f64 (neg.f64 z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 z y))","(/.f64 (-.f64 x z) y)"]],"stop":[["saturated",1]],"time":28.5888671875,"type":"simplify"},{"compiler":[[479,244]],"time":5.468994140625,"type":"eval"},{"alts":[["(fma.f64 4 (-.f64 (/.f64 x y) (/.f64 z y)) 2)","next",0.00390625],["(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","done",0.01171875]],"compiler":[[13,9],[11,8],[13,9]],"count":[[39,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[38,1],"picked":[1,1]}],"min-error":[0],"time":6.760986328125,"type":"prune"},{"compiler":[[31,11]],"locations":[["(-.f64 (/.f64 x y) (/.f64 z y))",0.0078125,true]],"time":5.710205078125,"type":"localize"},{"count":[[1,36]],"series":[["(-.f64 (/.f64 x y) (/.f64 z y))","z","-inf",0.18896484375],["(-.f64 (/.f64 x y) (/.f64 z y))","z","inf",0.254150390625],["(-.f64 (/.f64 x y) (/.f64 z y))","z","0",0.30419921875],["(-.f64 (/.f64 x y) (/.f64 z y))","y","-inf",0.47802734375],["(-.f64 (/.f64 x y) (/.f64 z y))","y","inf",0.47802734375],["(-.f64 (/.f64 x y) (/.f64 z y))","y","0",0.43798828125],["(-.f64 (/.f64 x y) (/.f64 z y))","x","-inf",0.196044921875],["(-.f64 (/.f64 x y) (/.f64 z y))","x","inf",0.68701171875],["(-.f64 (/.f64 x y) (/.f64 z y))","x","0",0.389892578125]],"time":3.52490234375,"type":"series"},{"count":[[1,165]],"egraph":[[2,2731,7,0.024467374],[1,165,7,0.003218124],[0,7,7,0.000164791]],"inputs":[["(-.f64 (/.f64 x y) (/.f64 z y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x z) y) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x z) y) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x z) y) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x z) y) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 x z) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 x z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 x z) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 x z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (cbrt.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) (sqrt.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3)) (/.f64 1 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2)) (/.f64 1 (+.f64 (/.f64 x y) (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (-.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y y) (-.f64 (*.f64 x y) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2)) (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 x y) (/.f64 z y)) (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3)) (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2)) (+.f64 (/.f64 x y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x y) (*.f64 y z))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3))) (neg.f64 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2))) (neg.f64 (+.f64 (/.f64 x y) (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (*.f64 (/.f64 y x) z)) (*.f64 (/.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) y) (*.f64 (neg.f64 y) z)) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (/.f64 y z)) y) (*.f64 y (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 y z) (*.f64 (/.f64 y x) 1)) (*.f64 (/.f64 y x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (/.f64 y z)) (*.f64 (neg.f64 y) 1)) (*.f64 (neg.f64 y) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (neg.f64 y)) (*.f64 y (neg.f64 z))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 y) (*.f64 (/.f64 y x) (neg.f64 z))) (*.f64 (/.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 y)) (*.f64 (neg.f64 y) (neg.f64 z))) (pow.f64 (neg.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 (neg.f64 z) y) 3)) (+.f64 (pow.f64 (/.f64 x y) 2) (-.f64 (pow.f64 (/.f64 (neg.f64 z) y) 2) (*.f64 (/.f64 x y) (/.f64 (neg.f64 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 (neg.f64 z) y) 2)) (-.f64 (/.f64 x y) (/.f64 (neg.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 y z)) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) (-.f64 (*.f64 x y) (*.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (-.f64 x z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2)) (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (/.f64 x y) (/.f64 z y)) (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (-.f64 x z) y))) 2)) (cbrt.f64 (log.f64 (/.f64 (-.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (-.f64 x z) y)))) (sqrt.f64 (log.f64 (/.f64 (-.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 x y))) (exp.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (/.f64 x y)) (+.f64 1 (expm1.f64 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (/.f64 x y))) (+.f64 1 (expm1.f64 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 x y))) (exp.f64 (/.f64 (neg.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (neg.f64 z) y)) (+.f64 1 (expm1.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 x z) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (-.f64 x z) y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (-.f64 x z) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (-.f64 x z) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (-.f64 x z) y)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) 1 (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) 1 (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 (/.f64 1 y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 x z) y) 1 (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 x z) y) 1 (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 x z) y) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 x z) y) 1 (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x y) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x y) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 x z) y) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 x z) y) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 x z) y) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 x z) y) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (neg.f64 z) y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (neg.f64 (cbrt.f64 (/.f64 z y))) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (cbrt.f64 (/.f64 (-.f64 x z) y)) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (cbrt.f64 (/.f64 (-.f64 x z) y)) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (cbrt.f64 (/.f64 (-.f64 x z) y)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 2) (cbrt.f64 (/.f64 (-.f64 x z) y)) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (cbrt.f64 (/.f64 x y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (cbrt.f64 (/.f64 x y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 z y)) (neg.f64 (sqrt.f64 (/.f64 z y))) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) (sqrt.f64 (/.f64 (-.f64 x z) y)) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) (sqrt.f64 (/.f64 (-.f64 x z) y)) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) (sqrt.f64 (/.f64 (-.f64 x z) y)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (-.f64 x z) y)) (sqrt.f64 (/.f64 (-.f64 x z) y)) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 x y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 x y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (neg.f64 y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (neg.f64 y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (pow.f64 y -2) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (pow.f64 y -2) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (pow.f64 y -2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (pow.f64 y -2) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x z) (/.f64 1 y) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x z) (/.f64 1 y) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x z) (/.f64 1 y) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x z) (/.f64 1 y) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3)) (/.f64 1 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2))) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3)) (/.f64 1 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2))) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3)) (/.f64 1 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 (/.f64 y z) -3)) (/.f64 1 (fma.f64 (/.f64 z y) (+.f64 (/.f64 x y) (/.f64 z y)) (pow.f64 (/.f64 x y) 2))) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) x (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) x (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (-.f64 x z) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (-.f64 x z) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (-.f64 x z) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (-.f64 x z) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2)) (/.f64 1 (+.f64 (/.f64 x y) (/.f64 z y))) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2)) (/.f64 1 (+.f64 (/.f64 x y) (/.f64 z y))) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2)) (/.f64 1 (+.f64 (/.f64 x y) (/.f64 z y))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x y) 2) (pow.f64 (/.f64 z y) 2)) (/.f64 1 (+.f64 (/.f64 x y) (/.f64 z y))) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (neg.f64 z) y)) 2) (cbrt.f64 (/.f64 (neg.f64 z) y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (neg.f64 z) y)) (sqrt.f64 (/.f64 (neg.f64 z) y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 z y))) (sqrt.f64 (/.f64 z y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 z y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 x (cbrt.f64 y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 x (cbrt.f64 y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/2) (/.f64 x (sqrt.f64 y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/2) (/.f64 x (sqrt.f64 y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) y) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) y) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) y) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) y) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 x y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 x y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 x) (sqrt.f64 y)) (/.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 x) (sqrt.f64 y)) (*.f64 (/.f64 (neg.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (-.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (fma.f64 (neg.f64 (/.f64 1 y)) z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (-.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (fma.f64 (/.f64 (neg.f64 z) y) 1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (-.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 z y))) (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (-.f64 (sqrt.f64 (/.f64 x y)) (sqrt.f64 (/.f64 z y))) (+.f64 (/.f64 (neg.f64 z) y) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (cbrt.f64 (/.f64 z y)) (/.f64 x y))))))"]],"rules":[["egg-rr",165]],"stop":[["node limit",1]],"time":49.52001953125,"type":"rewrite"},{"count":[[201,170]],"egraph":[[9,957,240,0.013754126000000002],[8,952,240,0.011958792000000001],[7,921,240,0.0101355],[6,895,240,0.008044125000000001],[5,746,240,0.006273334],[4,411,240,0.003805875],[3,207,240,0.001800458],[2,92,240,0.0007437920000000001],[1,42,240,0.000301417],[0,16,390,0.000106917]],"inputs":[["(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 z y))","(/.f64 (neg.f64 z) y)","(neg.f64 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 z y))","(/.f64 (neg.f64 z) y)","(neg.f64 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 z y))","(/.f64 (neg.f64 z) y)","(neg.f64 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 (neg.f64 z) y) (/.f64 x y))","(/.f64 (-.f64 x z) y)"]],"stop":[["saturated",1]],"time":31.031982421875,"type":"simplify"},{"compiler":[[3241,1317]],"time":30.75390625,"type":"eval"},{"alts":[["(fma.f64 4 (-.f64 (/.f64 x y) (/.f64 z y)) 2)","done",0.00390625],["(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","done",0.01171875]],"compiler":[[13,9],[11,8]],"count":[[172,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[170,0],"picked":[1,1]}],"min-error":[0],"time":49.47802734375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))",0.00390625,1],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y)",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[16,12],[14,10],[34,23]],"count":[[3,1]],"inputs":[["(fma.f64 4 (-.f64 (/.f64 x y) (/.f64 z y)) 2)","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))"]],"link":["."],"name":["Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, C"],"oracle":[0.2734375],"outputs":[["(fma.f64 4 (-.f64 (/.f64 x y) (/.f64 z y)) 2)"]],"time":15.03515625,"times":[["x",2.780029296875],["y",2.85498046875],["z",3.0791015625],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))",2.708984375],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y)",2.66796875]],"type":"regimes"},{"compiler":[[13,9]],"egraph":[[5,27,14,0.000158083],[4,26,14,0.000128],[3,23,14,9.6917e-5],[2,19,14,6.7876e-5],[1,12,14,4.2751e-5],[0,10,14,1.8084e-5]],"inputs":[["(fma.f64 4 (-.f64 (/.f64 x y) (/.f64 z y)) 2)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 4 (-.f64 (/.f64 x y) (/.f64 z y)) 2)"]],"stop":[["done",1],["saturated",1]],"time":8.501953125,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":8.64111328125,"type":"end"}]
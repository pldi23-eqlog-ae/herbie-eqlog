[{"compiler":[[19,14]],"method":["search"],"sampling":[[12,0.23521141843441742,0.0019687809519375165,0.7628198006136451],[11,0.2350956077901858,0.002084591596169135,0.7628198006136451],[10,0.23486398650172255,0.0023162128846323723,0.7628198006136451],[9,0.2344007439247961,0.002779455461558847,0.762819800613645],[8,0.23347425877094313,0.0037059406154117958,0.7628198006136451],[7,0.23347425877094313,0.0037059406154117958,0.7628198006136451],[6,0.22976831815553134,0.0074118812308235915,0.7628198006136451],[5,0.22235643692470775,0.014823762461647183,0.7628198006136451],[4,0.20753267446306056,0.029647524923294366,0.7628198006136451],[3,0.1778851495397662,0.05929504984658873,0.7628198006136451],[2,0.11859009969317746,0.11859009969317746,0.7628198006136451],[1,0.0,0.23718019938635493,0.7628198006136451],[0,0.0,0.23718019938635493,0.7628198006136451]],"time":3.2490234375,"type":"analyze"},{"outcomes":[["body",1024,"valid",874.077880859375,4313],["body",512,"valid",271.07421875,2218],["body",2048,"valid",143.15625,441],["body",256,"valid",79.238525390625,1284]],"time":1375.85107421875,"type":"sample"},{"compiler":[[16,12]],"egraph":[[0,1,1,1.375e-6],[22,6680,17,0.172210082],[21,6680,17,0.15419762399999998],[20,6680,17,0.14182045699999998],[19,6674,17,0.13296978999999998],[18,6668,17,0.12414470699999998],[17,6652,17,0.11518133199999998],[16,6396,17,0.10525724799999998],[15,6178,17,0.09375170699999999],[14,6178,17,0.07944024899999999],[13,6170,17,0.070016207],[12,6144,17,0.060983707],[11,5856,17,0.051569874],[10,5133,17,0.042535666],[9,3161,17,0.033749416],[8,2734,17,0.025105165999999998],[7,2051,17,0.017833083],[6,1178,17,0.010225499999999998],[5,679,17,0.004808208],[4,332,17,0.002324833],[3,145,18,0.0010231239999999998],[2,62,18,0.000448374],[1,26,18,0.000186166],[0,10,23,7.0833e-5]],"inputs":[["0"],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)","(-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (+.f64 (*.f64 n (log.f64 n)) 1))","(-.f64 (*.f64 (+.f64 n 1) (log1p.f64 n)) (fma.f64 n (log.f64 n) 1))","(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":196.392822265625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[22,6680,17,0.17207745799999996],[21,6680,17,0.15448108299999996],[20,6680,17,0.14207516599999997],[19,6674,17,0.13305974999999998],[18,6668,17,0.12417316599999999],[17,6652,17,0.11520987399999999],[16,6396,17,0.10560779099999999],[15,6178,17,0.094079083],[14,6178,17,0.079624291],[13,6170,17,0.070301708],[12,6144,17,0.061236791],[11,5856,17,0.051683166],[10,5133,17,0.042673875],[9,3161,17,0.03382725],[8,2734,17,0.024940584000000002],[7,2051,17,0.017713584],[6,1178,17,0.010146959],[5,679,17,0.0047905840000000005],[4,332,17,0.002310417],[3,145,18,0.001014584],[2,62,18,0.000446584],[1,26,18,0.000177209],[0,10,23,6.6292e-5]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)","(-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (+.f64 (*.f64 n (log.f64 n)) 1))","(-.f64 (*.f64 (+.f64 n 1) (log1p.f64 n)) (fma.f64 n (log.f64 n) 1))","(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))"]],"stop":[["node limit",1]],"time":185.574951171875,"type":"simplify"},{"compiler":[[27,17]],"time":0.482177734375,"type":"eval"},{"alts":[["(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))","next",44.18874025210856]],"compiler":[[12,7],[12,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[44.18874025210856],"time":0.849853515625,"type":"prune"},{"compiler":[[31,10]],"locations":[["(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))",0.01171875,true],["(fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)",0.6632050655817239,true],["(-.f64 (log1p.f64 n) (log.f64 n))",3.6252946417379395,true]],"time":7.34814453125,"type":"localize"},{"count":[[3,36]],"series":[["(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))","n","-inf",0.285888671875],["(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))","n","inf",0.233154296875],["(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))","n","0",0.235107421875],["(fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)","n","-inf",0.278076171875],["(fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)","n","inf",0.35595703125],["(fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)","n","0",0.260009765625],["(-.f64 (log1p.f64 n) (log.f64 n))","n","-inf",0.427001953125],["(-.f64 (log1p.f64 n) (log.f64 n))","n","inf",0.43603515625],["(-.f64 (log1p.f64 n) (log.f64 n))","n","0",0.4619140625]],"time":3.158935546875,"type":"series"},{"count":[[3,193]],"egraph":[[2,2418,37,0.022270584],[1,171,37,0.0030740840000000004],[0,8,37,0.000216209]],"inputs":[["(-.f64 (log1p.f64 n) (log.f64 n))","(fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)","(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 n) (neg.f64 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 n) (*.f64 (neg.f64 (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 n) (log.f64 n)) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 n) (log.f64 n)) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 n) (log.f64 n)) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 n) (log.f64 n)) (fma.f64 -1 (log.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 n) (log.f64 n)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 n)) 2)) (cbrt.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 n)) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log1p.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 n 1) n)) 2)) (log.f64 (cbrt.f64 (/.f64 (+.f64 n 1) n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (+.f64 n 1) n))) (log.f64 (sqrt.f64 (/.f64 (+.f64 n 1) n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)) (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3)) (/.f64 1 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3)) (pow.f64 (/.f64 1 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2)) (/.f64 1 (+.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2)) (pow.f64 (/.f64 1 (+.f64 (log1p.f64 n) (log.f64 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) (-.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (-.f64 (log1p.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) 1) (pow.f64 (-.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2) (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2))) 1/3) (cbrt.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))) 1/3) (cbrt.f64 (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))) 2) 3) (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2)) (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (log1p.f64 n) (log.f64 n)) (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3)) (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2)) (+.f64 (log1p.f64 n) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3))) (neg.f64 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2))) (neg.f64 (+.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (neg.f64 (log.f64 n)) 3)) (+.f64 (pow.f64 (log1p.f64 n) 2) (-.f64 (pow.f64 (neg.f64 (log.f64 n)) 2) (*.f64 (log1p.f64 n) (neg.f64 (log.f64 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (neg.f64 (log.f64 n)) 2)) (-.f64 (log1p.f64 n) (neg.f64 (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2)) (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (log1p.f64 n) (log.f64 n)) (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 n 1) n))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (/.f64 (+.f64 n 1) n) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 n 1) (+.f64 1 (-.f64 n 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 n 1) (/.f64 1 n)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (log.f64 n))) (+.f64 n 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 n) (+.f64 n 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 (+.f64 n 1) n) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 n) (log.f64 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 n) 1 (neg.f64 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 n) 1 (*.f64 (neg.f64 (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 1 (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 1 (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 1 (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 n) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 n) (neg.f64 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 n) (*.f64 (neg.f64 (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log1p.f64 n) (log.f64 n)) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log1p.f64 n) (log.f64 n)) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (log1p.f64 n) (log.f64 n)) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (log.f64 n)) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)) (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)) (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2)) (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 n)) (pow.f64 (cbrt.f64 (log1p.f64 n)) 2) (neg.f64 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 n)) (pow.f64 (cbrt.f64 (log1p.f64 n)) 2) (*.f64 (neg.f64 (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 n)) 2) (cbrt.f64 (log1p.f64 n)) (neg.f64 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 n)) 2) (cbrt.f64 (log1p.f64 n)) (*.f64 (neg.f64 (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 n)) 2) (neg.f64 (cbrt.f64 (log.f64 n))) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log1p.f64 n)) (neg.f64 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log1p.f64 n)) (*.f64 (neg.f64 (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 n)) (neg.f64 (sqrt.f64 (log.f64 n))) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3)) (/.f64 1 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2))) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3)) (/.f64 1 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (log.f64 n) 3)) (/.f64 1 (fma.f64 (log.f64 n) (+.f64 (log1p.f64 n) (log.f64 n)) (pow.f64 (log1p.f64 n) 2))) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2)) (/.f64 1 (+.f64 (log1p.f64 n) (log.f64 n))) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2)) (/.f64 1 (+.f64 (log1p.f64 n) (log.f64 n))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (log.f64 n) 2)) (/.f64 1 (+.f64 (log1p.f64 n) (log.f64 n))) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 n))) 2) (cbrt.f64 (neg.f64 (log.f64 n))) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (log.f64 n))) (sqrt.f64 (neg.f64 (log.f64 n))) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (log.f64 n))) (sqrt.f64 (log.f64 n)) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) (-.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) (fma.f64 (neg.f64 (log.f64 n)) 1 (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) (-.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 n))) (pow.f64 (cbrt.f64 (log.f64 n)) 2) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) (-.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log.f64 n))) (+.f64 (neg.f64 (log.f64 n)) (log.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 n)) 2)) (cbrt.f64 (log.f64 n)) (log1p.f64 n))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (pow.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2) (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (sqrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 2) 3) (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3/2) 1/3) (pow.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3/2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2) (pow.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2)) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2) (sqrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 1/3) (cbrt.f64 (sqrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))) 3) -1) (+.f64 (pow.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))) 2) (-.f64 1 (*.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))) 2) 1) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (log1p.f64 n) 2) (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) (/.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2) (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) (cbrt.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2)) (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) (sqrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3)) (/.f64 1 (fma.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (-.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n)) (pow.f64 (log1p.f64 n) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3)) (pow.f64 (/.f64 1 (fma.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (-.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n)) (pow.f64 (log1p.f64 n) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2)) (/.f64 1 (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2)) (pow.f64 (/.f64 1 (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2) (cbrt.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2))) 1/3) (cbrt.f64 (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2) (sqrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))) 1/3) (cbrt.f64 (sqrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))) 2) 3) (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (-.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n)) (pow.f64 (log1p.f64 n) 2)) (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3)) (fma.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (-.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n)) (pow.f64 (log1p.f64 n) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3)) (+.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2) (-.f64 (pow.f64 (log1p.f64 n) 2) (*.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2)) (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3))) (neg.f64 (fma.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (-.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n)) (pow.f64 (log1p.f64 n) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2))) (neg.f64 (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2) (pow.f64 (log1p.f64 n) 2)) (-.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (-.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n)) (pow.f64 (log1p.f64 n) 2)) (+.f64 (pow.f64 (log1p.f64 n) 3) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (-.f64 (pow.f64 (log1p.f64 n) 2) (pow.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 n 1) (+.f64 1 (expm1.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) (+.f64 n 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 n) 1 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) 1 (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n))) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 n n)) (*.f64 (cbrt.f64 n) (-.f64 (log1p.f64 n) (log.f64 n))) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log1p.f64 n)) (pow.f64 (cbrt.f64 (log1p.f64 n)) 2) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 n)) 2) (cbrt.f64 (log1p.f64 n)) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (pow.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) 2) (cbrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 n) (*.f64 (sqrt.f64 n) (-.f64 (log1p.f64 n) (log.f64 n))) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 n)) (sqrt.f64 (log1p.f64 n)) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (sqrt.f64 (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1)) (log1p.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n)))) 2) (cbrt.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n)))) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n)))) (sqrt.f64 (*.f64 n (-.f64 (log1p.f64 n) (log.f64 n)))) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 n) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))) (*.f64 (sqrt.f64 n) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 n (cbrt.f64 (pow.f64 (-.f64 (log1p.f64 n) (log.f64 n)) 2))) (cbrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (+.f64 -1 (log1p.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 n (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n)))) (sqrt.f64 (-.f64 (log1p.f64 n) (log.f64 n))) (+.f64 -1 (log1p.f64 n)))))))"]],"rules":[["egg-rr",62],["egg-rr",34],["egg-rr",97]],"stop":[["node limit",1]],"time":55.8740234375,"type":"rewrite"},{"count":[[229,240]],"egraph":[[4,7387,525,0.032535083],[3,2435,525,0.018145583],[2,747,531,0.005688123999999999],[1,260,535,0.001709041],[0,85,589,0.0004505]],"inputs":[["(*.f64 -1 (log.f64 n))","(+.f64 n (*.f64 -1 (log.f64 n)))","(+.f64 (*.f64 -1/2 (pow.f64 n 2)) (+.f64 n (*.f64 -1 (log.f64 n))))","(+.f64 (*.f64 1/3 (pow.f64 n 3)) (+.f64 (*.f64 -1/2 (pow.f64 n 2)) (+.f64 n (*.f64 -1 (log.f64 n)))))","(/.f64 1 n)","(-.f64 (/.f64 1 n) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 4))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2)))))","(/.f64 1 n)","(-.f64 (/.f64 1 n) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 4))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2)))))","-1","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(-.f64 (+.f64 (pow.f64 n 2) (*.f64 -1 (*.f64 n (log.f64 n)))) 1)","(-.f64 (+.f64 (pow.f64 n 2) (+.f64 (*.f64 -1/2 (pow.f64 n 3)) (*.f64 -1 (*.f64 n (log.f64 n))))) 1)","(/.f64 -1/2 n)","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/5 (/.f64 1 (pow.f64 n 4)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","(/.f64 -1/2 n)","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/5 (/.f64 1 (pow.f64 n 4)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","-1","(-.f64 (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))) 1)","(-.f64 (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n))))) 1)","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 n 3)) (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))))) 1)","(*.f64 -1 (log.f64 (/.f64 1 n)))","(+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (log.f64 (/.f64 1 n))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (log.f64 (/.f64 1 n)))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(-.f64 (+.f64 (*.f64 1/12 (/.f64 1 (pow.f64 n 3))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (log.f64 (/.f64 1 n))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))","(+.f64 (*.f64 1/2 (/.f64 1 n)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (*.f64 1/2 (/.f64 1 n)))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(-.f64 (+.f64 (*.f64 1/12 (/.f64 1 (pow.f64 n 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (*.f64 1/2 (/.f64 1 n))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (log.f64 n))","(neg.f64 (log.f64 n))","(+.f64 n (*.f64 -1 (log.f64 n)))","(+.f64 n (neg.f64 (log.f64 n)))","(-.f64 n (log.f64 n))","(+.f64 (*.f64 -1/2 (pow.f64 n 2)) (+.f64 n (*.f64 -1 (log.f64 n))))","(fma.f64 -1/2 (*.f64 n n) (+.f64 n (neg.f64 (log.f64 n))))","(-.f64 (fma.f64 -1/2 (*.f64 n n) n) (log.f64 n))","(fma.f64 -1/2 (*.f64 n n) (-.f64 n (log.f64 n)))","(fma.f64 n (*.f64 n -1/2) (-.f64 n (log.f64 n)))","(+.f64 (*.f64 1/3 (pow.f64 n 3)) (+.f64 (*.f64 -1/2 (pow.f64 n 2)) (+.f64 n (*.f64 -1 (log.f64 n)))))","(fma.f64 1/3 (pow.f64 n 3) (fma.f64 -1/2 (*.f64 n n) (+.f64 n (neg.f64 (log.f64 n)))))","(fma.f64 1/3 (pow.f64 n 3) (-.f64 (fma.f64 -1/2 (*.f64 n n) n) (log.f64 n)))","(fma.f64 1/3 (pow.f64 n 3) (fma.f64 -1/2 (*.f64 n n) (-.f64 n (log.f64 n))))","(fma.f64 n (*.f64 n -1/2) (fma.f64 1/3 (pow.f64 n 3) (-.f64 n (log.f64 n))))","(/.f64 1 n)","(-.f64 (/.f64 1 n) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(-.f64 (/.f64 1 n) (/.f64 1/2 (*.f64 n n)))","(-.f64 (/.f64 1 n) (/.f64 (/.f64 1/2 n) n))","(+.f64 (/.f64 1 n) (/.f64 -1/2 (*.f64 n n)))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(+.f64 (/.f64 1 n) (-.f64 (/.f64 1/3 (pow.f64 n 3)) (/.f64 1/2 (*.f64 n n))))","(+.f64 (/.f64 1/3 (pow.f64 n 3)) (-.f64 (/.f64 1 n) (/.f64 (/.f64 1/2 n) n)))","(+.f64 (/.f64 1 n) (+.f64 (/.f64 1/3 (pow.f64 n 3)) (/.f64 -1/2 (*.f64 n n))))","(+.f64 (/.f64 1 n) (*.f64 (/.f64 1 (*.f64 n n)) (-.f64 (/.f64 1/3 n) 1/2)))","(+.f64 (/.f64 1 n) (*.f64 (/.f64 1 (*.f64 n n)) (+.f64 (/.f64 1/3 n) -1/2)))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 4))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2)))))","(+.f64 (/.f64 1 n) (-.f64 (/.f64 1/3 (pow.f64 n 3)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/4 (pow.f64 n 4)))))","(-.f64 (+.f64 (/.f64 1 n) (/.f64 1/3 (pow.f64 n 3))) (+.f64 (/.f64 (/.f64 1/2 n) n) (/.f64 1/4 (pow.f64 n 4))))","(+.f64 (/.f64 1 n) (+.f64 (/.f64 1/3 (pow.f64 n 3)) (+.f64 (/.f64 -1/2 (*.f64 n n)) (/.f64 -1/4 (pow.f64 n 4)))))","(/.f64 1 n)","(-.f64 (/.f64 1 n) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(-.f64 (/.f64 1 n) (/.f64 1/2 (*.f64 n n)))","(-.f64 (/.f64 1 n) (/.f64 (/.f64 1/2 n) n))","(+.f64 (/.f64 1 n) (/.f64 -1/2 (*.f64 n n)))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))","(+.f64 (/.f64 1 n) (-.f64 (/.f64 1/3 (pow.f64 n 3)) (/.f64 1/2 (*.f64 n n))))","(+.f64 (/.f64 1/3 (pow.f64 n 3)) (-.f64 (/.f64 1 n) (/.f64 (/.f64 1/2 n) n)))","(+.f64 (/.f64 1 n) (+.f64 (/.f64 1/3 (pow.f64 n 3)) (/.f64 -1/2 (*.f64 n n))))","(+.f64 (/.f64 1 n) (*.f64 (/.f64 1 (*.f64 n n)) (-.f64 (/.f64 1/3 n) 1/2)))","(+.f64 (/.f64 1 n) (*.f64 (/.f64 1 (*.f64 n n)) (+.f64 (/.f64 1/3 n) -1/2)))","(-.f64 (+.f64 (/.f64 1 n) (*.f64 1/3 (/.f64 1 (pow.f64 n 3)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 4))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2)))))","(+.f64 (/.f64 1 n) (-.f64 (/.f64 1/3 (pow.f64 n 3)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/4 (pow.f64 n 4)))))","(-.f64 (+.f64 (/.f64 1 n) (/.f64 1/3 (pow.f64 n 3))) (+.f64 (/.f64 (/.f64 1/2 n) n) (/.f64 1/4 (pow.f64 n 4))))","(+.f64 (/.f64 1 n) (+.f64 (/.f64 1/3 (pow.f64 n 3)) (+.f64 (/.f64 -1/2 (*.f64 n n)) (/.f64 -1/4 (pow.f64 n 4)))))","-1","(-.f64 (*.f64 -1 (*.f64 n (log.f64 n))) 1)","(fma.f64 -1 (*.f64 n (log.f64 n)) -1)","(fma.f64 (neg.f64 n) (log.f64 n) -1)","(-.f64 -1 (*.f64 n (log.f64 n)))","(-.f64 (+.f64 (pow.f64 n 2) (*.f64 -1 (*.f64 n (log.f64 n)))) 1)","(+.f64 (*.f64 n n) (fma.f64 -1 (*.f64 n (log.f64 n)) -1))","(fma.f64 n n (fma.f64 (neg.f64 n) (log.f64 n) -1))","(+.f64 -1 (*.f64 n (-.f64 n (log.f64 n))))","(fma.f64 n (-.f64 n (log.f64 n)) -1)","(-.f64 (+.f64 (pow.f64 n 2) (+.f64 (*.f64 -1/2 (pow.f64 n 3)) (*.f64 -1 (*.f64 n (log.f64 n))))) 1)","(+.f64 (*.f64 n n) (-.f64 (fma.f64 -1/2 (pow.f64 n 3) (neg.f64 (*.f64 n (log.f64 n)))) 1))","(+.f64 -1 (-.f64 (fma.f64 n n (*.f64 -1/2 (pow.f64 n 3))) (*.f64 n (log.f64 n))))","(+.f64 -1 (fma.f64 -1/2 (pow.f64 n 3) (*.f64 n (-.f64 n (log.f64 n)))))","(fma.f64 -1/2 (pow.f64 n 3) (fma.f64 n (-.f64 n (log.f64 n)) -1))","(/.f64 -1/2 n)","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))","(-.f64 (/.f64 1/3 (*.f64 n n)) (/.f64 1/2 n))","(+.f64 (/.f64 1/3 (*.f64 n n)) (/.f64 -1/2 n))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","(-.f64 (/.f64 1/3 (*.f64 n n)) (+.f64 (/.f64 1/2 n) (/.f64 1/4 (pow.f64 n 3))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (+.f64 (/.f64 -1/2 n) (/.f64 -1/4 (pow.f64 n 3))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/5 (/.f64 1 (pow.f64 n 4)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (-.f64 (/.f64 1/5 (pow.f64 n 4)) (+.f64 (/.f64 1/2 n) (/.f64 1/4 (pow.f64 n 3)))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (+.f64 (/.f64 1/5 (pow.f64 n 4)) (+.f64 (/.f64 -1/2 n) (/.f64 -1/4 (pow.f64 n 3)))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (-.f64 (/.f64 1/5 (pow.f64 n 4)) (-.f64 (/.f64 1/2 n) (/.f64 -1/4 (pow.f64 n 3)))))","(/.f64 -1/2 n)","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))","(-.f64 (/.f64 1/3 (*.f64 n n)) (/.f64 1/2 n))","(+.f64 (/.f64 1/3 (*.f64 n n)) (/.f64 -1/2 n))","(-.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","(-.f64 (/.f64 1/3 (*.f64 n n)) (+.f64 (/.f64 1/2 n) (/.f64 1/4 (pow.f64 n 3))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (+.f64 (/.f64 -1/2 n) (/.f64 -1/4 (pow.f64 n 3))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 n 2))) (*.f64 1/5 (/.f64 1 (pow.f64 n 4)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/2 (/.f64 1 n))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (-.f64 (/.f64 1/5 (pow.f64 n 4)) (+.f64 (/.f64 1/2 n) (/.f64 1/4 (pow.f64 n 3)))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (+.f64 (/.f64 1/5 (pow.f64 n 4)) (+.f64 (/.f64 -1/2 n) (/.f64 -1/4 (pow.f64 n 3)))))","(+.f64 (/.f64 1/3 (*.f64 n n)) (-.f64 (/.f64 1/5 (pow.f64 n 4)) (-.f64 (/.f64 1/2 n) (/.f64 -1/4 (pow.f64 n 3)))))","-1","(-.f64 (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))) 1)","(fma.f64 n (+.f64 (neg.f64 (log.f64 n)) 1) -1)","(fma.f64 n (-.f64 1 (log.f64 n)) -1)","(-.f64 (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n))))) 1)","(+.f64 (*.f64 (*.f64 n n) 1/2) (fma.f64 n (+.f64 (neg.f64 (log.f64 n)) 1) -1))","(fma.f64 (*.f64 n n) 1/2 (fma.f64 n (-.f64 1 (log.f64 n)) -1))","(fma.f64 n (-.f64 1 (log.f64 n)) (fma.f64 n (*.f64 n 1/2) -1))","(fma.f64 n (+.f64 (-.f64 1 (log.f64 n)) (*.f64 n 1/2)) -1)","(-.f64 (+.f64 (*.f64 -1/6 (pow.f64 n 3)) (+.f64 (*.f64 1/2 (pow.f64 n 2)) (*.f64 n (+.f64 1 (*.f64 -1 (log.f64 n)))))) 1)","(+.f64 (fma.f64 -1/6 (pow.f64 n 3) (fma.f64 1/2 (*.f64 n n) (*.f64 n (+.f64 (neg.f64 (log.f64 n)) 1)))) -1)","(fma.f64 (pow.f64 n 3) -1/6 (fma.f64 (*.f64 n n) 1/2 (fma.f64 n (-.f64 1 (log.f64 n)) -1)))","(fma.f64 (pow.f64 n 3) -1/6 (fma.f64 n (-.f64 1 (log.f64 n)) (fma.f64 n (*.f64 n 1/2) -1)))","(fma.f64 (pow.f64 n 3) -1/6 (fma.f64 n (+.f64 (-.f64 1 (log.f64 n)) (*.f64 n 1/2)) -1))","(*.f64 -1 (log.f64 (/.f64 1 n)))","(neg.f64 (neg.f64 (log.f64 n)))","(log.f64 n)","(+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (log.f64 (/.f64 1 n))))","(+.f64 (/.f64 1/2 n) (neg.f64 (neg.f64 (log.f64 n))))","(+.f64 (log.f64 n) (/.f64 1/2 n))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (log.f64 (/.f64 1 n)))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(+.f64 (/.f64 1/2 n) (-.f64 (neg.f64 (neg.f64 (log.f64 n))) (/.f64 1/6 (*.f64 n n))))","(-.f64 (+.f64 (log.f64 n) (/.f64 1/2 n)) (/.f64 1/6 (*.f64 n n)))","(-.f64 (log.f64 n) (-.f64 (/.f64 1/6 (*.f64 n n)) (/.f64 1/2 n)))","(-.f64 (/.f64 1/2 n) (-.f64 (/.f64 1/6 (*.f64 n n)) (log.f64 n)))","(-.f64 (+.f64 (*.f64 1/12 (/.f64 1 (pow.f64 n 3))) (+.f64 (*.f64 1/2 (/.f64 1 n)) (*.f64 -1 (log.f64 (/.f64 1 n))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(+.f64 (/.f64 1/12 (pow.f64 n 3)) (+.f64 (/.f64 1/2 n) (-.f64 (neg.f64 (neg.f64 (log.f64 n))) (/.f64 1/6 (*.f64 n n)))))","(+.f64 (-.f64 (+.f64 (log.f64 n) (/.f64 1/2 n)) (/.f64 1/6 (*.f64 n n))) (/.f64 1/12 (pow.f64 n 3)))","(+.f64 (+.f64 (log.f64 n) (/.f64 1/2 n)) (+.f64 (/.f64 1/12 (pow.f64 n 3)) (/.f64 -1/6 (*.f64 n n))))","(+.f64 (-.f64 (/.f64 1/2 n) (-.f64 (/.f64 1/6 (*.f64 n n)) (log.f64 n))) (/.f64 1/12 (pow.f64 n 3)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (log.f64 -1))","(neg.f64 (neg.f64 (log.f64 n)))","(log.f64 n)","(+.f64 (*.f64 1/2 (/.f64 1 n)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 n)))))","(+.f64 (/.f64 1/2 n) (neg.f64 (neg.f64 (log.f64 n))))","(+.f64 (log.f64 n) (/.f64 1/2 n))","(-.f64 (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (*.f64 1/2 (/.f64 1 n)))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(+.f64 (/.f64 1/2 n) (-.f64 (neg.f64 (neg.f64 (log.f64 n))) (/.f64 1/6 (*.f64 n n))))","(-.f64 (+.f64 (log.f64 n) (/.f64 1/2 n)) (/.f64 1/6 (*.f64 n n)))","(-.f64 (log.f64 n) (-.f64 (/.f64 1/6 (*.f64 n n)) (/.f64 1/2 n)))","(-.f64 (/.f64 1/2 n) (-.f64 (/.f64 1/6 (*.f64 n n)) (log.f64 n)))","(-.f64 (+.f64 (*.f64 1/12 (/.f64 1 (pow.f64 n 3))) (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 n))) (*.f64 1/2 (/.f64 1 n))))) (*.f64 1/6 (/.f64 1 (pow.f64 n 2))))","(+.f64 (/.f64 1/12 (pow.f64 n 3)) (+.f64 (/.f64 1/2 n) (-.f64 (neg.f64 (neg.f64 (log.f64 n))) (/.f64 1/6 (*.f64 n n)))))","(+.f64 (-.f64 (+.f64 (log.f64 n) (/.f64 1/2 n)) (/.f64 1/6 (*.f64 n n))) (/.f64 1/12 (pow.f64 n 3)))","(+.f64 (+.f64 (log.f64 n) (/.f64 1/2 n)) (+.f64 (/.f64 1/12 (pow.f64 n 3)) (/.f64 -1/6 (*.f64 n n))))","(+.f64 (-.f64 (/.f64 1/2 n) (-.f64 (/.f64 1/6 (*.f64 n n)) (log.f64 n))) (/.f64 1/12 (pow.f64 n 3)))"]],"stop":[["node limit",1]],"time":52.033935546875,"type":"simplify"},{"compiler":[[4884,2160]],"time":46.845947265625,"type":"eval"},{"alts":[["(log.f64 n)","next",0]],"compiler":[[3,2],[3,2]],"count":[[241,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[240,1],"picked":[1,0]}],"min-error":[0],"time":17.238037109375,"type":"prune"},{"compiler":[[4,2]],"time":1.762939453125,"type":"localize"},{"compiler":[[1,1]],"time":0.084228515625,"type":"eval"},{"alts":[["(log.f64 n)","done",0]],"compiler":[[3,2]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.39794921875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["n",0,1],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)",0,1],["(-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n)))",0,1]],"compiler":[[2,1],[16,12],[14,10],[29,17]],"count":[[3,1]],"inputs":[["(log.f64 n)","(+.f64 (log1p.f64 n) (fma.f64 n (-.f64 (log1p.f64 n) (log.f64 n)) -1))","(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)"]],"link":["."],"name":["logs (example 3.8)"],"oracle":[62.98030791109286],"outputs":[["(log.f64 n)"]],"time":7.032958984375,"times":[["n",2.784912109375],["(-.f64 (-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n))) 1)",1.744140625],["(-.f64 (*.f64 (+.f64 n 1) (log.f64 (+.f64 n 1))) (*.f64 n (log.f64 n)))",1.73193359375]],"type":"regimes"},{"compiler":[[3,2]],"egraph":[[0,3,3,9.25e-6]],"inputs":[["(log.f64 n)"]],"method":["egg-herbie"],"outputs":[["(log.f64 n)"]],"stop":[["done",1],["saturated",1]],"time":8.10986328125,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[3,2]],"remove-preprocessing":[[]],"time":6.4619140625,"type":"end"}]
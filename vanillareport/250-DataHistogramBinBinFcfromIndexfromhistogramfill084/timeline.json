[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.5031684664422755,0.43393404567211746,0.062897487885607],[11,0.44466050522805745,0.5129197933113119,0.04241970146063068],[10,0.37445095177099574,0.5967812043850245,0.02876784384397979],[9,0.2496339678473305,0.7254987190563043,0.02486731309636525],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":86.02490234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",22.428955078125,569],["body",512,"valid",0.068115234375,1],["body",1024,"valid",0.097900390625,1],["body",256,"valid",328.802001953125,8254]],"time":359.037109375,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,1.667e-6],[3,97,44,0.000568458],[2,81,44,0.000377624],[1,40,44,0.000194041],[0,20,52,8.0458e-5]],"inputs":[["0","1","2"],["(+.f64 (+.f64 (/.f64 x 2) (*.f64 y x)) z)","(+.f64 (+.f64 (/.f64 y 2) (*.f64 x y)) z)","(+.f64 (+.f64 (/.f64 z 2) (*.f64 y z)) x)","(+.f64 (+.f64 (/.f64 x 2) (*.f64 z x)) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (+.f64 (/.f64 x 2) (*.f64 y x)) z)","(+.f64 (/.f64 x 2) (+.f64 (*.f64 x y) z))","(+.f64 (/.f64 x 2) (fma.f64 x y z))","(+.f64 (+.f64 (/.f64 y 2) (*.f64 x y)) z)","(+.f64 z (+.f64 (*.f64 x y) (/.f64 y 2)))","(+.f64 z (fma.f64 x y (/.f64 y 2)))","(+.f64 (+.f64 (/.f64 z 2) (*.f64 y z)) x)","(+.f64 x (+.f64 (/.f64 z 2) (*.f64 y z)))","(+.f64 x (fma.f64 y z (/.f64 z 2)))","(+.f64 (+.f64 (/.f64 x 2) (*.f64 z x)) y)","(+.f64 (/.f64 x 2) (+.f64 (*.f64 x z) y))","(+.f64 (/.f64 x 2) (fma.f64 x z y))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.486083984375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,29,11,0.000220625],[2,25,11,0.000153875],[1,14,11,8.608300000000001e-5],[0,9,13,3.775e-5]],"inputs":[["(+.f64 (+.f64 (/.f64 x 2) (*.f64 y x)) z)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (/.f64 x 2) (*.f64 y x)) z)","(+.f64 (/.f64 x 2) (+.f64 (*.f64 x y) z))","(+.f64 (/.f64 x 2) (fma.f64 x y z))"]],"stop":[["saturated",1]],"time":10.322021484375,"type":"simplify"},{"compiler":[[20,12]],"time":0.3388671875,"type":"eval"},{"alts":[["(+.f64 (/.f64 x 2) (fma.f64 x y z))","next",0.00390625]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.81396484375,"type":"prune"},{"compiler":[[22,10]],"locations":[["(+.f64 (/.f64 x 2) (fma.f64 x y z))",0.00390625,true]],"time":4.8349609375,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (/.f64 x 2) (fma.f64 x y z))","z","-inf",0.22802734375],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","z","inf",0.243896484375],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","z","0",0.27392578125],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","y","-inf",0.303955078125],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","y","inf",0.2900390625],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","y","0",0.4228515625],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","x","-inf",0.3701171875],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","x","inf",0.43310546875],["(+.f64 (/.f64 x 2) (fma.f64 x y z))","x","0",0.381103515625]],"time":3.06005859375,"type":"series"},{"count":[[1,35]],"egraph":[[2,2380,9,0.020730084],[1,178,9,0.003260125],[0,8,11,0.000237792]],"inputs":[["(+.f64 (/.f64 x 2) (fma.f64 x y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x 1/2 (fma.f64 x y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 x x) 1/4) (-.f64 (*.f64 x 1/2) (fma.f64 x y z))) (/.f64 (pow.f64 (fma.f64 x y z) 2) (-.f64 (*.f64 x 1/2) (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 1/2 (fma.f64 x y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 1/2 (fma.f64 x y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))) (pow.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))) 2) (cbrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))) (sqrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x 3) 1/8) (pow.f64 (fma.f64 x y z) 3)) (/.f64 1 (+.f64 (*.f64 (*.f64 x x) 1/4) (*.f64 (fma.f64 x y z) (-.f64 (fma.f64 x y z) (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 x x) 1/4) (pow.f64 (fma.f64 x y z) 2)) (/.f64 1 (-.f64 (*.f64 x 1/2) (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 (*.f64 x x) 1/4) (*.f64 (fma.f64 x y z) (-.f64 (fma.f64 x y z) (*.f64 x 1/2)))) (+.f64 (*.f64 (pow.f64 x 3) 1/8) (pow.f64 (fma.f64 x y z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x 1/2) (fma.f64 x y z)) (-.f64 (*.f64 (*.f64 x x) 1/4) (pow.f64 (fma.f64 x y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) 1/8) (pow.f64 (fma.f64 x y z) 3)) (+.f64 (*.f64 (*.f64 x x) 1/4) (*.f64 (fma.f64 x y z) (-.f64 (fma.f64 x y z) (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) 1/8) (pow.f64 (fma.f64 x y z) 3)) (+.f64 (pow.f64 (fma.f64 x y z) 2) (-.f64 (*.f64 (*.f64 x x) 1/4) (*.f64 x (*.f64 1/2 (fma.f64 x y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) 1/4) (pow.f64 (fma.f64 x y z) 2)) (-.f64 (*.f64 x 1/2) (fma.f64 x y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x 3) 1/8) (pow.f64 (fma.f64 x y z) 3))) (neg.f64 (+.f64 (*.f64 (*.f64 x x) 1/4) (*.f64 (fma.f64 x y z) (-.f64 (fma.f64 x y z) (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (*.f64 x x) 1/4) (pow.f64 (fma.f64 x y z) 2))) (neg.f64 (-.f64 (*.f64 x 1/2) (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x y z) 2) (*.f64 (*.f64 x x) 1/4)) (-.f64 (fma.f64 x y z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 1/2 (fma.f64 x y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 x y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 1/2 (fma.f64 x y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 x y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 1/2 (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x 1/2 (fma.f64 x y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 1/2 (fma.f64 x y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 1/2 (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 1/2 (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 1/2 (fma.f64 x y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/2 (fma.f64 x y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 1/2) (fma.f64 x y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x y z) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x y z)) 2) (cbrt.f64 (fma.f64 x y z)) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 1/2)) 2) (cbrt.f64 (*.f64 x 1/2)) (fma.f64 x y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x y z)) (sqrt.f64 (fma.f64 x y z)) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 1/2)) (sqrt.f64 (*.f64 x 1/2)) (fma.f64 x y z))))))"]],"rules":[["egg-rr",35]],"stop":[["node limit",1]],"time":38.7451171875,"type":"rewrite"},{"count":[[71,47]],"egraph":[[9,1106,253,0.01535075],[8,1094,253,0.012812209],[7,1018,253,0.010211458999999999],[6,812,253,0.007525334],[5,513,253,0.004728917],[4,311,253,0.002485417],[3,176,253,0.001334625],[2,88,253,0.0007014580000000001],[1,47,253,0.000322333],[0,20,280,0.0001185]],"inputs":[["z","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(*.f64 (+.f64 1/2 y) x)","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2)))","(+.f64 (*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2))) z)","(+.f64 (*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2))) z)","(+.f64 (*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2))) z)","(+.f64 (*.f64 1/2 x) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(*.f64 y x)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(*.f64 y x)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (*.f64 y x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","z","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","z","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))"]],"method":["egg-herbie"],"outputs":[["z","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(*.f64 (+.f64 1/2 y) x)","(*.f64 x (+.f64 1/2 y))","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 z (*.f64 (+.f64 1/2 y) x))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2)))","(*.f64 (+.f64 1/2 y) x)","(*.f64 x (+.f64 1/2 y))","(+.f64 (*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2))) z)","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2))) z)","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 -1 (*.f64 x (-.f64 (*.f64 -1 y) 1/2))) z)","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) z)","(fma.f64 1/2 x z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(*.f64 y x)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(*.f64 y x)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (*.f64 y x))","(*.f64 (+.f64 1/2 y) x)","(*.f64 x (+.f64 1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","z","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","z","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y x) z))","(fma.f64 1/2 x (fma.f64 y x z))","(fma.f64 (+.f64 1/2 y) x z)","(fma.f64 x (+.f64 1/2 y) z)"]],"stop":[["saturated",1]],"time":31.10302734375,"type":"simplify"},{"compiler":[[658,320]],"time":7.1259765625,"type":"eval"},{"alts":[["(fma.f64 x (+.f64 1/2 y) z)","next",0]],"compiler":[[9,6],[9,6]],"count":[[48,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[47,1],"picked":[1,0]}],"min-error":[0],"time":7.573974609375,"type":"prune"},{"compiler":[[16,9]],"time":3.905029296875,"type":"localize"},{"compiler":[[3,3]],"time":0.08984375,"type":"eval"},{"alts":[["(fma.f64 x (+.f64 1/2 y) z)","done",0]],"compiler":[[9,6]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.47412109375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(+.f64 (+.f64 (/.f64 x 2) (*.f64 y x)) z)",0,1],["(+.f64 (/.f64 x 2) (*.f64 y x))",0,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[10,7],[26,15]],"count":[[3,1]],"inputs":[["(fma.f64 x (+.f64 1/2 y) z)","(+.f64 (/.f64 x 2) (fma.f64 x y z))","(+.f64 (+.f64 (/.f64 x 2) (*.f64 y x)) z)"]],"link":["."],"name":["Data.Histogram.Bin.BinF:$cfromIndex from histogram-fill-0.8.4.1"],"oracle":[0.01171875],"outputs":[["(fma.f64 x (+.f64 1/2 y) z)"]],"time":14.245849609375,"times":[["x",2.7568359375],["y",2.919189453125],["z",2.666015625],["(+.f64 (+.f64 (/.f64 x 2) (*.f64 y x)) z)",2.594970703125],["(+.f64 (/.f64 x 2) (*.f64 y x))",2.511962890625]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[1,8,8,2.5834e-5],[0,7,8,1.5959e-5]],"inputs":[["(fma.f64 x (+.f64 1/2 y) z)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (+.f64 1/2 y) z)"]],"stop":[["done",1],["saturated",1]],"time":8.147216796875,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.882080078125,"type":"end"}]
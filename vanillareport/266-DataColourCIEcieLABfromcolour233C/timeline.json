[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.531982421875,"type":"analyze"},{"outcomes":[["body",256,"valid",255.240966796875,8256]],"time":263.123046875,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,2,2,1.334e-6],[1,10,14,6.5417e-5],[0,8,14,3.8125e-5]],"inputs":[["0","1"],["(+.f64 x (/.f64 y 500))","(+.f64 y (/.f64 x 500))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (/.f64 y 500))","(+.f64 y (/.f64 x 500))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.658935546875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,7,7,5.2626e-5],[0,6,7,3.0334e-5]],"inputs":[["(+.f64 x (/.f64 y 500))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 y 500))"]],"stop":[["saturated",1]],"time":10.9140625,"type":"simplify"},{"compiler":[[7,5]],"time":0.19287109375,"type":"eval"},{"alts":[["(+.f64 x (/.f64 y 500))","next",0.00390625]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.652099609375,"type":"prune"},{"compiler":[[13,8]],"locations":[["(+.f64 x (/.f64 y 500))",0.00390625,true]],"time":3.118896484375,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 x (/.f64 y 500))","y","-inf",0.1708984375],["(+.f64 x (/.f64 y 500))","y","inf",0.328857421875],["(+.f64 x (/.f64 y 500))","y","0",0.234130859375],["(+.f64 x (/.f64 y 500))","x","-inf",0.168212890625],["(+.f64 x (/.f64 y 500))","x","inf",0.281982421875],["(+.f64 x (/.f64 y 500))","x","0",0.277099609375]],"time":1.531982421875,"type":"series"},{"count":[[1,34]],"egraph":[[2,1889,5,0.018895958],[1,138,5,0.002704958],[0,6,7,0.00021]],"inputs":[["(+.f64 x (/.f64 y 500))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y 1/500 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 y 1/500))) (/.f64 (*.f64 (*.f64 y y) 1/250000) (-.f64 x (*.f64 y 1/500))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y 1/500 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y 1/500 x)) (pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 2) (cbrt.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y 1/500 x)) (sqrt.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/125000000)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 y 1/500) (-.f64 (*.f64 y 1/500) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/250000)) (/.f64 1 (-.f64 x (*.f64 y 1/500))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 y 1/500) (-.f64 (*.f64 y 1/500) x))) (+.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/125000000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (*.f64 y 1/500)) (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/250000))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/125000000)) (fma.f64 x x (*.f64 (*.f64 y 1/500) (-.f64 (*.f64 y 1/500) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/125000000)) (+.f64 (*.f64 (*.f64 y y) 1/250000) (-.f64 (*.f64 x x) (*.f64 x (*.f64 y 1/500)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/250000)) (-.f64 x (*.f64 y 1/500)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (*.f64 (pow.f64 y 3) 1/125000000))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 y 1/500) (-.f64 (*.f64 y 1/500) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 1/250000))) (neg.f64 (-.f64 x (*.f64 y 1/500))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y y) 1/250000) (*.f64 x x)) (-.f64 (*.f64 y 1/500) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y 1/500 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y 1/500 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y 1/500 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y 1/500 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1/500 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y 1/500)) 2) (cbrt.f64 (*.f64 y 1/500)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y 1/500)) (sqrt.f64 (*.f64 y 1/500)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 y 1/500))))))"]],"rules":[["egg-rr",34]],"stop":[["node limit",1]],"time":36.939208984375,"type":"rewrite"},{"count":[[58,38]],"egraph":[[2,10,105,0.000138583],[1,9,105,9.2958e-5],[0,6,105,4.55e-5]],"inputs":[["(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)"]],"stop":[["saturated",1]],"time":11.602783203125,"type":"simplify"},{"compiler":[[415,265]],"time":5.718994140625,"type":"eval"},{"alts":[["(+.f64 x (/.f64 y 500))","done",0.00390625],["(fma.f64 y 1/500 x)","next",0.07421875]],"compiler":[[7,5],[6,4],[6,4]],"count":[[39,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[38,1],"picked":[1,1]}],"min-error":[0],"time":5.3740234375,"type":"prune"},{"compiler":[[9,5]],"locations":[["(fma.f64 y 1/500 x)",0.07421875,true]],"time":2.274169921875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y 1/500 x)","x","-inf",0.197021484375],["(fma.f64 y 1/500 x)","x","inf",0.164794921875],["(fma.f64 y 1/500 x)","x","0",0.31298828125],["(fma.f64 y 1/500 x)","y","-inf",0.2978515625],["(fma.f64 y 1/500 x)","y","inf",0.2099609375],["(fma.f64 y 1/500 x)","y","0",0.255126953125]],"time":1.5029296875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1106,5,0.013148958],[1,100,5,0.0016286660000000002],[0,5,5,0.000169833]],"inputs":[["(fma.f64 y 1/500 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y 1/500) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y 1/500 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y 1/500 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y 1/500 x)) (pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 2) (cbrt.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y 1/500 x)) (sqrt.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y 1/500) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 y 1/500) (*.f64 y 1/500)) (-.f64 (*.f64 x x) (*.f64 (*.f64 y 1/500) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y 1/500) (*.f64 y 1/500)) (*.f64 x x)) (-.f64 (*.f64 y 1/500) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y 1/500 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y 1/500 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y 1/500 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y 1/500 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y 1/500 x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":29.4580078125,"type":"rewrite"},{"count":[[45,25]],"egraph":[[2,10,105,0.000138875],[1,9,105,9.3208e-5],[0,6,105,4.575e-5]],"inputs":[["x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)"]],"stop":[["saturated",1]],"time":11.847900390625,"type":"simplify"},{"compiler":[[199,134]],"time":3.299072265625,"type":"eval"},{"alts":[["(+.f64 x (/.f64 y 500))","done",0.00390625],["(fma.f64 y 1/500 x)","done",0.07421875]],"compiler":[[7,5],[6,4]],"count":[[27,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[25,0],"picked":[1,1]}],"min-error":[0],"time":3.3359375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(+.f64 x (/.f64 y 500))",0.00390625,1],["(/.f64 y 500)",0.00390625,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[11,7]],"count":[[2,1]],"inputs":[["(fma.f64 y 1/500 x)","(+.f64 x (/.f64 y 500))"]],"link":["."],"name":["Data.Colour.CIE:cieLAB from colour-2.3.3, C"],"oracle":[0.078125],"outputs":[["(+.f64 x (/.f64 y 500))"]],"time":11.614990234375,"times":[["x",2.695068359375],["y",2.671875],["(+.f64 x (/.f64 y 500))",2.968017578125],["(/.f64 y 500)",2.76220703125]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,7,7,1.9915999999999997e-5],[0,6,7,1.1791e-5]],"inputs":[["(+.f64 x (/.f64 y 500))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 y 500))"]],"stop":[["done",1],["saturated",1]],"time":7.93798828125,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.240966796875,"type":"end"}]
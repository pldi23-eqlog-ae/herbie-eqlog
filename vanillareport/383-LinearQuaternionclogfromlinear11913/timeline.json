[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.6731702503748238,0.10634138737805188,0.22048836224712431],[11,0.6360971061512828,0.15024379501119256,0.21365909883752465],[10,0.6009751800447702,0.20682912040501833,0.19219569955021143],[9,0.5307313278317451,0.28878028132021427,0.18048839084804058],[8,0.46829234808683395,0.39024362340569496,0.14146402850747108],[7,0.34341438859701157,0.5307313278317451,0.1258542835712433],[6,0.24975591897964478,0.6868287771940231,0.06341530382633209],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":27.907958984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",10.247314453125,342],["body",256,"valid",287.3505859375,8256]],"time":305.38916015625,"type":"sample"},{"compiler":[[8,5]],"egraph":[[0,2,2,1.583e-6],[1,13,14,9.1166e-5],[0,9,14,4.4916e-5]],"inputs":[["0","1"],["(sqrt.f64 (+.f64 (*.f64 x x) y))","(sqrt.f64 (+.f64 (*.f64 y y) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(sqrt.f64 (+.f64 (*.f64 x x) y))","(sqrt.f64 (fma.f64 x x y))","(sqrt.f64 (+.f64 (*.f64 y y) x))","(sqrt.f64 (fma.f64 y y x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.930908203125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[1,8,7,6.6917e-5],[0,6,7,3.4417e-5]],"inputs":[["(sqrt.f64 (+.f64 (*.f64 x x) y))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (*.f64 x x) y))","(sqrt.f64 (fma.f64 x x y))"]],"stop":[["saturated",1]],"time":10.77294921875,"type":"simplify"},{"compiler":[[13,7]],"time":0.274169921875,"type":"eval"},{"alts":[["(sqrt.f64 (fma.f64 x x y))","next",24.2578125]],"compiler":[[7,4],[7,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[24.2578125],"time":0.739990234375,"type":"prune"},{"compiler":[[13,4]],"locations":[["(sqrt.f64 (fma.f64 x x y))",22.647089709685215,true]],"time":2.9169921875,"type":"localize"},{"count":[[1,16]],"series":[["(sqrt.f64 (fma.f64 x x y))","y","-inf",0.35888671875],["(sqrt.f64 (fma.f64 x x y))","y","inf",0.508056640625],["(sqrt.f64 (fma.f64 x x y))","y","0",0.36083984375],["(sqrt.f64 (fma.f64 x x y))","x","-inf",0.3310546875],["(sqrt.f64 (fma.f64 x x y))","x","inf",0.469970703125],["(sqrt.f64 (fma.f64 x x y))","x","0",0.5859375]],"time":2.701904296875,"type":"series"},{"count":[[1,25]],"egraph":[[2,1121,6,0.013737375],[1,98,6,0.001633916],[0,5,7,0.00013]],"inputs":[["(sqrt.f64 (fma.f64 x x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (hypot.f64 x (sqrt.f64 y)))) (cbrt.f64 (exp.f64 (hypot.f64 x (sqrt.f64 y)))))) (log.f64 (cbrt.f64 (exp.f64 (hypot.f64 x (sqrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 x (sqrt.f64 y))))) (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 x (sqrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (hypot.f64 x (sqrt.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 x (sqrt.f64 y))) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x y)) (cbrt.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/4) (pow.f64 (fma.f64 x x y) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (hypot.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 x x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 x (sqrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x y) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 x (sqrt.f64 y))))))))"]],"rules":[["egg-rr",25]],"stop":[["node limit",1]],"time":30.7080078125,"type":"rewrite"},{"count":[[41,47]],"egraph":[[4,5737,309,0.022236123],[3,1580,309,0.011224207],[2,440,311,0.003213749],[1,159,311,0.000995457],[0,59,313,0.000259916]],"inputs":[["(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y)))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (*.f64 -1/8 (pow.f64 x 4)) (sqrt.f64 y)))","(fma.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 1/2 (*.f64 x x)) (fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (*.f64 -1/8 (pow.f64 x 4)) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4)) (fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 1/16 (pow.f64 x 6)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))))","(fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (*.f64 -1/8 (pow.f64 x 4)) (fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 1/16 (pow.f64 x 6)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (*.f64 x x)) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (/.f64 y (pow.f64 x 3)) y) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (*.f64 (/.f64 y (pow.f64 x 3)) y) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (*.f64 (/.f64 y x) -1/2) x)","(fma.f64 (/.f64 y x) -1/2 (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(fma.f64 -1/2 (/.f64 y x) (fma.f64 -1 x (*.f64 (/.f64 (*.f64 y y) (pow.f64 x 3)) 1/8)))","(fma.f64 (/.f64 y x) -1/2 (-.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 x 3)) 1/8) x))","(-.f64 (fma.f64 (/.f64 y x) -1/2 (*.f64 (*.f64 (/.f64 y (pow.f64 x 3)) y) 1/8)) x)","(-.f64 (*.f64 (/.f64 y x) (+.f64 -1/2 (/.f64 1/8 (/.f64 x (/.f64 y x))))) x)","(fma.f64 (/.f64 y x) (+.f64 -1/2 (/.f64 1/8 (/.f64 x (/.f64 y x)))) (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","(fma.f64 -1/2 (/.f64 y x) (fma.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1 x (*.f64 (/.f64 (*.f64 y y) (pow.f64 x 3)) 1/8))))","(fma.f64 (/.f64 y x) -1/2 (fma.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) -1/16 (-.f64 (*.f64 (/.f64 (*.f64 y y) (pow.f64 x 3)) 1/8) x)))","(fma.f64 (/.f64 y x) -1/2 (-.f64 (fma.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) -1/16 (*.f64 (*.f64 (/.f64 y (pow.f64 x 3)) y) 1/8)) x))","(fma.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) -1/16 (-.f64 (*.f64 (/.f64 y x) (+.f64 -1/2 (/.f64 1/8 (/.f64 x (/.f64 y x))))) x))","(fma.f64 (pow.f64 y 3) (/.f64 -1/16 (pow.f64 x 5)) (fma.f64 (/.f64 y x) (+.f64 -1/2 (/.f64 1/8 (/.f64 x (/.f64 y x)))) (neg.f64 x)))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 (/.f64 y (pow.f64 x 3)) y) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (*.f64 (/.f64 y (pow.f64 x 3)) y) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x)))"]],"stop":[["node limit",1]],"time":37.381103515625,"type":"simplify"},{"compiler":[[576,305]],"time":6.760009765625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","next",24.543632519536885],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","fresh",40.76114324794199],["(fma.f64 (/.f64 y x) -1/2 (neg.f64 x))","fresh",42.57440799941526]],"compiler":[[17,9],[7,4],[8,5],[9,6],[17,9],[8,5],[9,6]],"count":[[48,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[47,3],"picked":[1,1]}],"min-error":[0],"time":7.505859375,"type":"prune"},{"compiler":[[50,15]],"locations":[["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))",0.3125,true],["(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)",0.37109375,true],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))",10.534286849294713,true],["(cbrt.f64 (fma.f64 x x y))",23.181386581319494,true]],"time":9.491943359375,"type":"localize"},{"count":[[4,40]],"series":[["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","y","-inf",0.22509765625],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","y","inf",0.241943359375],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","y","0",0.1669921875],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","x","-inf",0.21484375],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","x","inf",0.194091796875],["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","x","0",0.220947265625],["(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)","y","-inf",0.275146484375],["(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)","y","inf",0.316162109375],["(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)","y","0",0.638916015625],["(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)","x","-inf",0.284912109375],["(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)","x","inf",0.506103515625],["(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)","x","0",0.656982421875],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))","y","-inf",0.22021484375],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))","y","inf",0.23291015625],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))","y","0",0.23095703125],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))","x","-inf",0.237060546875],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))","x","inf",0.223876953125],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))","x","0",0.2900390625],["(cbrt.f64 (fma.f64 x x y))","y","-inf",0.2978515625],["(cbrt.f64 (fma.f64 x x y))","y","inf",0.283935546875],["(cbrt.f64 (fma.f64 x x y))","y","0",0.839111328125],["(cbrt.f64 (fma.f64 x x y))","x","-inf",0.275146484375],["(cbrt.f64 (fma.f64 x x y))","x","inf",0.364990234375],["(cbrt.f64 (fma.f64 x x y))","x","0",0.927001953125]],"time":8.981201171875,"type":"series"},{"count":[[4,81]],"egraph":[[2,1849,30,0.017666834],[1,203,30,0.002891209],[0,10,31,0.000255334]],"inputs":[["(cbrt.f64 (fma.f64 x x y))","(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))","(pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)","(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (fma.f64 x x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/6) (pow.f64 (fma.f64 x x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/6)) (pow.f64 (fma.f64 x x y) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 1/4) (sqrt.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 x (sqrt.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 x x y)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 4)) 1/2) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/6) (cbrt.f64 (cbrt.f64 (fma.f64 x x y)))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 x x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (fma.f64 x x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/6) (pow.f64 (fma.f64 x x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/6)) (pow.f64 (fma.f64 x x y) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 1/4) (sqrt.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 x (sqrt.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 x x y)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 4)) 1/2) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x y) 1/6) (cbrt.f64 (cbrt.f64 (fma.f64 x x y)))) (cbrt.f64 (pow.f64 (fma.f64 x x y) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 x x y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 x x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x y)) (cbrt.f64 (fma.f64 x x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x y) 1/6) (hypot.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x (sqrt.f64 y)) (pow.f64 (fma.f64 x x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 x x y)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x y))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 x x y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (fma.f64 x x y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (hypot.f64 x (sqrt.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x y)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x y) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x (sqrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x (sqrt.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 x (sqrt.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 x x y))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 x (sqrt.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 x (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 x (sqrt.f64 y))))))))"]],"rules":[["egg-rr",15],["egg-rr",16],["egg-rr",25],["egg-rr",25]],"stop":[["node limit",1]],"time":42.218017578125,"type":"rewrite"},{"count":[[121,111]],"egraph":[[3,4531,1271,0.022912541],[2,1571,1273,0.010567749],[1,489,1277,0.0033338329999999996],[0,168,1334,0.00079725]],"inputs":[["(pow.f64 y 1/3)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4)))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (pow.f64 x 6))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4))))))","(pow.f64 (pow.f64 x 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (pow.f64 (pow.f64 x 2) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3)))))))))","(pow.f64 y 1/3)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4)))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (pow.f64 x 6))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4))))))","(pow.f64 (pow.f64 x 2) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (pow.f64 (pow.f64 x 2) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3)))))))))","(pow.f64 (pow.f64 y 2) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (pow.f64 x 2))) (pow.f64 (pow.f64 y 2) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3))) (pow.f64 x 4)) (pow.f64 (pow.f64 y 2) 1/3)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3))) (pow.f64 x 4)) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 (+.f64 (*.f64 -2/27 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/3)) (*.f64 10/81 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/3))) (pow.f64 x 6)))))","(pow.f64 (pow.f64 x 4) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/9) y)) (pow.f64 (pow.f64 x 4) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/9) y)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9))) (pow.f64 y 2)) (pow.f64 (pow.f64 x 4) 1/3)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/9) y)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9))) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (pow.f64 x 2)))))) (pow.f64 (pow.f64 x 4) 1/3))))","(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 1/3)","(cbrt.f64 y)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))))","(+.f64 (cbrt.f64 y) (*.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x)))","(fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x) (cbrt.f64 y))","(fma.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 1/3 (*.f64 x x)) (cbrt.f64 y))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4)))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 x x)) (*.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x) (cbrt.f64 y)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 (pow.f64 x 4) -1/9)))","(fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 x x)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 -1/9 (pow.f64 x 4)) (cbrt.f64 y)))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (pow.f64 x 6))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4))))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 x x)) (fma.f64 5/81 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 8))) (pow.f64 x 6)) (*.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 4))))))","(+.f64 (fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x) (cbrt.f64 y)) (fma.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 4)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 8))) (*.f64 (pow.f64 x 6) 5/81))))","(+.f64 (cbrt.f64 y) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 1/3 (*.f64 x x)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 -1/9 (pow.f64 x 4)) (*.f64 (pow.f64 x 6) (*.f64 5/81 (cbrt.f64 (/.f64 1 (pow.f64 y 8))))))))","(+.f64 (cbrt.f64 y) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 -1/9 (pow.f64 x 4)) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 1/3 (*.f64 x x)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 8))) (*.f64 5/81 (pow.f64 x 6))))))","(pow.f64 (pow.f64 x 2) 1/3)","(cbrt.f64 (*.f64 x x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x)))","(fma.f64 1/3 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (cbrt.f64 (*.f64 x x)))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x)))","(fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (pow.f64 (pow.f64 x 2) 1/3)))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))))","(fma.f64 1/3 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (fma.f64 -1/9 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18)) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))))","(fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3)))))))))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (+.f64 (fma.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))) (*.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (cbrt.f64 (/.f64 1 (pow.f64 x 4)))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) 1/27)))))))","(fma.f64 1/3 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (fma.f64 -1/9 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18)) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) -5/27) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (pow.f64 y 3))) (cbrt.f64 (*.f64 x x)))))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 -1/3 (*.f64 (pow.f64 y 3) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) -5/27))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x)))))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 (pow.f64 y 3) -5/27))) (cbrt.f64 (*.f64 x x)))))","(pow.f64 y 1/3)","(cbrt.f64 y)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))))","(+.f64 (cbrt.f64 y) (*.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x)))","(fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x) (cbrt.f64 y))","(fma.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 1/3 (*.f64 x x)) (cbrt.f64 y))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4)))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 x x)) (*.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x) (cbrt.f64 y)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 (pow.f64 x 4) -1/9)))","(fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 x x)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 -1/9 (pow.f64 x 4)) (cbrt.f64 y)))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 5/81 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 8)) 1/3) (pow.f64 x 6))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 5)) 1/3) (pow.f64 x 4))))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 x x)) (fma.f64 5/81 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 8))) (pow.f64 x 6)) (*.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 4))))))","(+.f64 (fma.f64 (*.f64 1/3 (cbrt.f64 (/.f64 1 (*.f64 y y)))) (*.f64 x x) (cbrt.f64 y)) (fma.f64 -1/9 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 4)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 8))) (*.f64 (pow.f64 x 6) 5/81))))","(+.f64 (cbrt.f64 y) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 1/3 (*.f64 x x)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 -1/9 (pow.f64 x 4)) (*.f64 (pow.f64 x 6) (*.f64 5/81 (cbrt.f64 (/.f64 1 (pow.f64 y 8))))))))","(+.f64 (cbrt.f64 y) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 5))) (*.f64 -1/9 (pow.f64 x 4)) (fma.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 1/3 (*.f64 x x)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 8))) (*.f64 5/81 (pow.f64 x 6))))))","(pow.f64 (pow.f64 x 2) 1/3)","(cbrt.f64 (*.f64 x x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x)))","(fma.f64 1/3 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (cbrt.f64 (*.f64 x x)))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x)))","(fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (pow.f64 (pow.f64 x 2) 1/3)))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))))","(fma.f64 1/3 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (fma.f64 -1/9 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18)) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))))","(fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (cbrt.f64 (*.f64 x x))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9) y)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3)))))))))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (+.f64 (fma.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x))) (*.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (cbrt.f64 (/.f64 1 (pow.f64 x 4)))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) 1/27)))))))","(fma.f64 1/3 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) (fma.f64 -1/9 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18)) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) -5/27) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (pow.f64 y 3))) (cbrt.f64 (*.f64 x x)))))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 -1/3 (*.f64 (pow.f64 y 3) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) -5/27))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (cbrt.f64 (*.f64 x x)))))","(fma.f64 y (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 14)) 1/18))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) (*.f64 (pow.f64 y 3) -5/27))) (cbrt.f64 (*.f64 x x)))))","(pow.f64 (pow.f64 y 2) 1/3)","(cbrt.f64 (*.f64 y y))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (pow.f64 x 2))) (pow.f64 (pow.f64 y 2) 1/3))","(fma.f64 2/3 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 y))) (cbrt.f64 (*.f64 y y)))","(fma.f64 2/3 (*.f64 x (*.f64 x (cbrt.f64 (/.f64 1 y)))) (cbrt.f64 (*.f64 y y)))","(fma.f64 (*.f64 x x) (*.f64 2/3 (cbrt.f64 (/.f64 1 y))) (cbrt.f64 (*.f64 y y)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3))) (pow.f64 x 4)) (pow.f64 (pow.f64 y 2) 1/3)))","(fma.f64 2/3 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 y))) (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 4))) -1/9) (pow.f64 x 4) (cbrt.f64 (*.f64 y y))))","(fma.f64 2/3 (*.f64 x (*.f64 x (cbrt.f64 (/.f64 1 y)))) (fma.f64 (pow.f64 x 4) (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 y 4)))) (cbrt.f64 (*.f64 y y))))","(fma.f64 (*.f64 x x) (*.f64 2/3 (cbrt.f64 (/.f64 1 y))) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 4))) (*.f64 -1/9 (pow.f64 x 4)) (cbrt.f64 (*.f64 y y))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 y) 1/3) (pow.f64 x 2))) (+.f64 (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3)) (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3))) (pow.f64 x 4)) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 (+.f64 (*.f64 -2/27 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/3)) (*.f64 10/81 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/3))) (pow.f64 x 6)))))","(fma.f64 2/3 (*.f64 (*.f64 x x) (cbrt.f64 (/.f64 1 y))) (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 4))) -1/9) (pow.f64 x 4) (+.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (pow.f64 x 6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 7))) 4/81)))))","(fma.f64 2/3 (*.f64 x (*.f64 x (cbrt.f64 (/.f64 1 y)))) (fma.f64 (pow.f64 x 4) (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 y 4)))) (fma.f64 (pow.f64 x 6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 7))) 4/81) (cbrt.f64 (*.f64 y y)))))","(fma.f64 (*.f64 x x) (*.f64 2/3 (cbrt.f64 (/.f64 1 y))) (fma.f64 (pow.f64 x 6) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 7))) 4/81) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 4))) (*.f64 -1/9 (pow.f64 x 4)) (cbrt.f64 (*.f64 y y)))))","(fma.f64 (*.f64 x x) (*.f64 2/3 (cbrt.f64 (/.f64 1 y))) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 7))) (*.f64 (pow.f64 x 6) 4/81) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 y 4))) (*.f64 -1/9 (pow.f64 x 4)) (cbrt.f64 (*.f64 y y)))))","(pow.f64 (pow.f64 x 4) 1/3)","(cbrt.f64 (pow.f64 x 4))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/9) y)) (pow.f64 (pow.f64 x 4) 1/3))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (cbrt.f64 (pow.f64 x 4)))","(fma.f64 y (*.f64 2/3 (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (cbrt.f64 (pow.f64 x 4)))","(fma.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (*.f64 2/3 (pow.f64 (*.f64 x x) 1/18))) (cbrt.f64 (pow.f64 x 4)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/9) y)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9))) (pow.f64 y 2)) (pow.f64 (pow.f64 x 4) 1/3)))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18)) -1/9) (*.f64 y y) (cbrt.f64 (pow.f64 x 4))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18))) (cbrt.f64 (pow.f64 x 4))))","(fma.f64 y (*.f64 2/3 (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (fma.f64 y (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (*.f64 -1/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18)))) (cbrt.f64 (pow.f64 x 4))))","(fma.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (*.f64 2/3 (pow.f64 (*.f64 x x) 1/18))) (fma.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18)) (*.f64 (*.f64 y y) -1/9) (cbrt.f64 (pow.f64 x 4))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/9) y)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/9))) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))) (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (pow.f64 x 2)))))) (pow.f64 (pow.f64 x 4) 1/3))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18)) -1/9) (*.f64 y y) (fma.f64 (pow.f64 y 3) (fma.f64 -2/3 (*.f64 (+.f64 (*.f64 -2/9 (cbrt.f64 (/.f64 1 (pow.f64 x 4)))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) 1/27)) (cbrt.f64 (/.f64 1 (*.f64 x x)))) (*.f64 -2/27 (/.f64 1 (*.f64 x x)))) (cbrt.f64 (pow.f64 x 4)))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18))) (fma.f64 (pow.f64 y 3) (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 (/.f64 1 x) x))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) -5/27) (/.f64 -2/27 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))","(fma.f64 y (*.f64 2/3 (*.f64 (pow.f64 (*.f64 x x) 1/18) (pow.f64 (*.f64 x x) 1/18))) (fma.f64 y (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (*.f64 -1/9 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18)))) (fma.f64 (pow.f64 y 3) (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) -5/27) (*.f64 -2/3 (cbrt.f64 (/.f64 1 (*.f64 x x)))) (/.f64 -2/27 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))","(fma.f64 (*.f64 y y) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 8)) 1/18))) (fma.f64 y (*.f64 (pow.f64 (*.f64 x x) 1/18) (*.f64 2/3 (pow.f64 (*.f64 x x) 1/18))) (fma.f64 (pow.f64 y 3) (fma.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 x 4))) -5/27) (*.f64 -2/3 (cbrt.f64 (/.f64 1 (*.f64 x x)))) (/.f64 -2/27 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))","(sqrt.f64 y)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))","(fma.f64 1/2 (*.f64 (*.f64 x x) (sqrt.f64 (/.f64 1 y))) (sqrt.f64 y))","(fma.f64 1/2 (*.f64 x (*.f64 x (sqrt.f64 (/.f64 1 y)))) (sqrt.f64 y))","(fma.f64 (*.f64 x x) (*.f64 1/2 (sqrt.f64 (/.f64 1 y))) (sqrt.f64 y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y)))","(fma.f64 -1/8 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (pow.f64 y 3)))) (fma.f64 1/2 (*.f64 (*.f64 x x) (sqrt.f64 (/.f64 1 y))) (sqrt.f64 y)))","(fma.f64 -1/8 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (pow.f64 y 3)))) (fma.f64 1/2 (*.f64 x (*.f64 x (sqrt.f64 (/.f64 1 y)))) (sqrt.f64 y)))","(fma.f64 (*.f64 x x) (*.f64 1/2 (sqrt.f64 (/.f64 1 y))) (fma.f64 (pow.f64 x 4) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 y 3)))) (sqrt.f64 y)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 5))) (pow.f64 x 6))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 y 3))) (pow.f64 x 4))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 y)) (pow.f64 x 2))) (sqrt.f64 y))))","(fma.f64 1/16 (*.f64 (pow.f64 x 6) (sqrt.f64 (/.f64 1 (pow.f64 y 5)))) (fma.f64 -1/8 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (pow.f64 y 3)))) (fma.f64 1/2 (*.f64 (*.f64 x x) (sqrt.f64 (/.f64 1 y))) (sqrt.f64 y))))","(fma.f64 1/16 (*.f64 (pow.f64 x 6) (sqrt.f64 (/.f64 1 (pow.f64 y 5)))) (fma.f64 -1/8 (*.f64 (pow.f64 x 4) (sqrt.f64 (/.f64 1 (pow.f64 y 3)))) (fma.f64 1/2 (*.f64 x (*.f64 x (sqrt.f64 (/.f64 1 y)))) (sqrt.f64 y))))","(fma.f64 (pow.f64 x 6) (*.f64 1/16 (sqrt.f64 (/.f64 1 (pow.f64 y 5)))) (fma.f64 (*.f64 x x) (*.f64 1/2 (sqrt.f64 (/.f64 1 y))) (fma.f64 (pow.f64 x 4) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 y 3)))) (sqrt.f64 y))))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 y (/.f64 (pow.f64 x 3) y)) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x)))","(fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 y (/.f64 (pow.f64 x 3) y)) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (/.f64 y (/.f64 (pow.f64 x 3) y)) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (*.f64 (/.f64 y x) -1/2) x)","(-.f64 (/.f64 (*.f64 y -1/2) x) x)","(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3)))))","(fma.f64 -1/2 (/.f64 y x) (fma.f64 -1 x (*.f64 (/.f64 (*.f64 y y) (pow.f64 x 3)) 1/8)))","(fma.f64 (/.f64 y x) -1/2 (-.f64 (*.f64 (/.f64 y (/.f64 (pow.f64 x 3) y)) 1/8) x))","(-.f64 (fma.f64 (/.f64 y (/.f64 (pow.f64 x 3) y)) 1/8 (/.f64 (*.f64 y -1/2) x)) x)","(-.f64 (*.f64 (/.f64 y x) (+.f64 -1/2 (*.f64 (/.f64 y x) (/.f64 1/8 x)))) x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))))))","(fma.f64 -1/2 (/.f64 y x) (fma.f64 -1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1 x (*.f64 (/.f64 (*.f64 y y) (pow.f64 x 3)) 1/8))))","(fma.f64 (/.f64 y x) -1/2 (fma.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) -1/16 (-.f64 (*.f64 (/.f64 y (/.f64 (pow.f64 x 3) y)) 1/8) x)))","(fma.f64 (/.f64 y x) -1/2 (-.f64 (fma.f64 (/.f64 y (/.f64 (pow.f64 x 3) y)) 1/8 (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) -1/16)) x))","(fma.f64 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) -1/16 (-.f64 (*.f64 (/.f64 y x) (+.f64 -1/2 (*.f64 (/.f64 y x) (/.f64 1/8 x)))) x))","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 y (/.f64 (pow.f64 x 3) y)) x))","(fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x))","(+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5))) (+.f64 (*.f64 1/2 (/.f64 y x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) x)))","(fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 (*.f64 y y) (pow.f64 x 3)) x)))","(fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 1/2 (/.f64 y x) (fma.f64 -1/8 (/.f64 y (/.f64 (pow.f64 x 3) y)) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (/.f64 y (/.f64 (pow.f64 x 3) y)) x)))","(fma.f64 1/2 (/.f64 y x) (fma.f64 1/16 (/.f64 (pow.f64 y 3) (pow.f64 x 5)) (fma.f64 -1/8 (*.f64 y (/.f64 y (pow.f64 x 3))) x)))"]],"stop":[["node limit",1]],"time":46.18701171875,"type":"simplify"},{"compiler":[[3644,1994]],"time":36.664794921875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","done",24.543632519536885],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","next",40.76114324794199],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","fresh",42.57440799941526]],"compiler":[[17,9],[7,4],[8,5],[9,6],[8,5],[9,6]],"count":[[156,4]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[152,2],"picked":[1,1]}],"min-error":[0],"time":24.2861328125,"type":"prune"},{"compiler":[[14,6]],"locations":[["(fma.f64 1/2 (/.f64 y x) x)",0.00390625,true]],"time":3.27001953125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 1/2 (/.f64 y x) x)","x","-inf",0.37109375],["(fma.f64 1/2 (/.f64 y x) x)","x","inf",0.3359375],["(fma.f64 1/2 (/.f64 y x) x)","x","0",0.333984375],["(fma.f64 1/2 (/.f64 y x) x)","y","-inf",0.7548828125],["(fma.f64 1/2 (/.f64 y x) x)","y","inf",0.3798828125],["(fma.f64 1/2 (/.f64 y x) x)","y","0",0.35302734375]],"time":2.60791015625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1576,8,0.016940041],[1,126,8,0.002194916],[0,6,8,0.000189041]],"inputs":[["(fma.f64 1/2 (/.f64 y x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 1/2 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (/.f64 y x)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 1/2 (/.f64 y x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 (/.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/2 (/.f64 y x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)) (pow.f64 (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)) 2) (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 1/2 (/.f64 y x) x)) (sqrt.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 1/2 (/.f64 y x)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 1/2 (/.f64 y x)) (*.f64 1/2 (/.f64 y x))) (-.f64 (*.f64 x x) (*.f64 (*.f64 1/2 (/.f64 y x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 1/2 (/.f64 y x)) (*.f64 1/2 (/.f64 y x))) (*.f64 x x)) (-.f64 (*.f64 1/2 (/.f64 y x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/2 (/.f64 y x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/2 (/.f64 y x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/2 (/.f64 y x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 1/2 (/.f64 y x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 1/2 (/.f64 y x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/2 (/.f64 y x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 1/2 (/.f64 y x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 1/2 (/.f64 y x) x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":34.14599609375,"type":"rewrite"},{"count":[[45,24]],"egraph":[[5,24,168,0.000388958],[4,23,168,0.000320292],[3,21,168,0.000248584],[2,17,168,0.000181126],[1,12,168,0.000116667],[0,7,168,5.4917e-5]],"inputs":[["x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(*.f64 1/2 (/.f64 y x))","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","x","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)","(+.f64 (*.f64 1/2 (/.f64 y x)) x)","(fma.f64 1/2 (/.f64 y x) x)"]],"stop":[["saturated",1]],"time":13.123046875,"type":"simplify"},{"compiler":[[256,132]],"time":3.2119140625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","done",24.543632519536885],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","done",40.76114324794199],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","next",42.57440799941526]],"compiler":[[17,9],[7,4],[8,5],[9,6],[9,6]],"count":[[28,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[24,0],"picked":[1,1]}],"min-error":[0],"time":3.5419921875,"type":"prune"},{"compiler":[[20,12]],"locations":[["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)",0.00390625,true],["(*.f64 y (/.f64 -1/2 x))",0.2421875,true]],"time":4.947021484375,"type":"localize"},{"count":[[2,48]],"series":[["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","x","-inf",0.149169921875],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","x","inf",0.16015625],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","x","0",0.171142578125],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","y","-inf",0.1591796875],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","y","inf",0.18212890625],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","y","0",0.1748046875],["(*.f64 y (/.f64 -1/2 x))","x","-inf",0.199951171875],["(*.f64 y (/.f64 -1/2 x))","x","inf",0.344970703125],["(*.f64 y (/.f64 -1/2 x))","x","0",0.317138671875],["(*.f64 y (/.f64 -1/2 x))","y","-inf",0.32080078125],["(*.f64 y (/.f64 -1/2 x))","y","inf",0.39306640625],["(*.f64 y (/.f64 -1/2 x))","y","0",0.3759765625]],"time":3.08203125,"type":"series"},{"count":[[2,57]],"egraph":[[2,2174,17,0.020265542],[1,160,17,0.0030094170000000003],[0,7,17,0.000219167]],"inputs":[["(*.f64 y (/.f64 -1/2 x))","(-.f64 (*.f64 y (/.f64 -1/2 x)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (*.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y -1/2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y -1/2) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y -1/2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y -1/2) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y 1/2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (/.f64 -1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (/.f64 -1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (/.f64 -1/2 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 -1/2 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 -1/2 x)) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 y (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 y (/.f64 -1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)) 2) (cbrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)) (sqrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x (fma.f64 y (/.f64 -1/2 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x x)) (/.f64 1 (fma.f64 y (/.f64 -1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 y (/.f64 -1/2 x))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (*.f64 y (/.f64 -1/2 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x (fma.f64 y (/.f64 -1/2 x) x))) (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y (/.f64 -1/2 x) x) (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x (fma.f64 y (/.f64 -1/2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x x)) (fma.f64 y (/.f64 -1/2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x (fma.f64 y (/.f64 -1/2 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 x x))) (neg.f64 (fma.f64 y (/.f64 -1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 3) (pow.f64 (neg.f64 x) 3)) (+.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 y (/.f64 -1/2 x)) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 -1/2 x)) 2) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 y (/.f64 -1/2 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 y (/.f64 -1/2 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 -1/2 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/2 x) y (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (/.f64 -1/2 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 -1/2 x))) 2) (cbrt.f64 (*.f64 y (/.f64 -1/2 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (/.f64 -1/2 x))) (sqrt.f64 (*.f64 y (/.f64 -1/2 x))) (neg.f64 x))))))"]],"rules":[["egg-rr",37],["egg-rr",20]],"stop":[["node limit",1]],"time":40.987060546875,"type":"rewrite"},{"count":[[105,63]],"egraph":[[17,3942,378,0.05070437400000001],[16,3942,378,0.04475662400000001],[15,3918,378,0.039352499000000006],[14,3886,378,0.035292499000000005],[13,3789,378,0.031269916],[12,3589,378,0.027301749],[11,3050,378,0.022638416],[10,1832,378,0.0163045],[9,835,378,0.009508875],[8,542,378,0.005585875],[7,352,378,0.0036123329999999997],[6,197,378,0.002078833],[5,102,378,0.001130083],[4,58,378,0.00068375],[3,35,378,0.000452417],[2,26,378,0.00029475],[1,16,378,0.00018275],[0,9,378,7.9417e-5]],"inputs":[["(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1/2 (/.f64 y x))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(*.f64 -1/2 (/.f64 y x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(*.f64 -1/2 (/.f64 y x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(*.f64 -1/2 (/.f64 y x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(*.f64 -1/2 (/.f64 y x))","(/.f64 (*.f64 -1/2 y) x)","(/.f64 y (/.f64 x -1/2))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 (/.f64 y x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 y x) (neg.f64 x))","(-.f64 (/.f64 (*.f64 -1/2 y) x) x)","(-.f64 (/.f64 y (/.f64 x -1/2)) x)","(fma.f64 y (/.f64 -1/2 x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (/.f64 y x)) x)","(neg.f64 (fma.f64 y (/.f64 1/2 x) x))"]],"stop":[["saturated",1]],"time":75.243896484375,"type":"simplify"},{"compiler":[[792,498]],"time":10.005126953125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","done",24.543632519536885],["(sqrt.f64 (fma.f64 x x y))","done",24.2578125],["(fma.f64 1/2 (/.f64 y x) x)","done",40.76114324794199],["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","done",42.57440799941526]],"compiler":[[17,9],[7,4],[8,5],[9,6]],"count":[[67,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[63,0],"picked":[1,1]}],"min-error":[0],"time":8.140869140625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[24.2578125],"branch":[["x",0.0078125,3],["y",19.967649875978662,4],["(sqrt.f64 (+.f64 (*.f64 x x) y))",11.9693207518519,2],["(+.f64 (*.f64 x x) y)",11.9693207518519,2],["(*.f64 x x)",11.9693207518519,2]],"compiler":[[3,2],[3,2],[8,5],[7,4],[5,3],[54,25]],"count":[[7,3]],"inputs":[["(fma.f64 1/2 (/.f64 y x) x)","(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","(*.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x y)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x y))))","(fma.f64 1/2 (/.f64 y x) x)","(fma.f64 (/.f64 y x) -1/2 (neg.f64 x))","(sqrt.f64 (fma.f64 x x y))","(sqrt.f64 (+.f64 (*.f64 x x) y))"]],"link":["."],"name":["Linear.Quaternion:$clog from linear-1.19.1.3"],"oracle":[63.536983732745206],"outputs":[["(-.f64 (*.f64 y (/.f64 -1/2 x)) x)","(sqrt.f64 (fma.f64 x x y))","(fma.f64 1/2 (/.f64 y x) x)"]],"time":47.7080078125,"times":[["x",11.31201171875],["y",14.985107421875],["(sqrt.f64 (+.f64 (*.f64 x x) y))",7.158203125],["(+.f64 (*.f64 x x) y)",7.008056640625],["(*.f64 x x)",5.866943359375]],"type":"regimes"},{"bstep":[[4.3388556039437286e+102,7.838174516571009e+105,7.425048828125],[-1.7526032698725896e+154,-3.323693225808415e+143,7.68408203125]],"compiler":[[10,7],[3,2]],"method":["binary-search","binary-search"],"time":15.193115234375,"type":"bsearch"},{"compiler":[[28,17]],"egraph":[[4,30,37,0.00017825],[3,29,37,0.000142875],[2,27,37,0.000107],[1,22,37,7.0083e-5],[0,19,37,3.5208e-5]],"inputs":[["(if (<=.f64 x -17526032698725895689256700331510663718745933188587571832323457144617864567579075647197785906737820459631244513836087368854631503511046326019909316050419712) (-.f64 (*.f64 y (/.f64 -1/2 x)) x) (if (<=.f64 x 4338855603943728557618490933942675751155321317402715674300524728367996200285463672238227240618731503616) (sqrt.f64 (fma.f64 x x y)) (fma.f64 1/2 (/.f64 y x) x)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -17526032698725895689256700331510663718745933188587571832323457144617864567579075647197785906737820459631244513836087368854631503511046326019909316050419712) (-.f64 (*.f64 y (/.f64 -1/2 x)) x) (if (<=.f64 x 4338855603943728557618490933942675751155321317402715674300524728367996200285463672238227240618731503616) (sqrt.f64 (fma.f64 x x y)) (fma.f64 1/2 (/.f64 y x) x)))"]],"stop":[["done",1],["saturated",1]],"time":9.10205078125,"type":"simplify"},{"time":0.02490234375,"type":"soundness"},{"compiler":[[28,17]],"remove-preprocessing":[[]],"time":12.114013671875,"type":"end"}]
[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.2493898868560791,0.2513420581817627,0.4992680549621582],[11,0.2489018440246582,0.2528061866760254,0.4982919692993164],[10,0.2479257583618164,0.2557344436645508,0.4963397979736328],[9,0.2459735870361328,0.26159095764160156,0.4924354553222656],[8,0.24206924438476563,0.2733039855957031,0.48462677001953125],[7,0.23426055908203125,0.29673004150390625,0.4690093994140625],[6,0.2186431884765625,0.3435821533203125,0.437774658203125],[5,0.187408447265625,0.437286376953125,0.37530517578125],[4,0.12493896484375,0.62469482421875,0.2503662109375],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":43.976806640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",338.15966796875,8568],["body",256,"valid",381.4033203125,8256]],"time":735.027099609375,"type":"sample"},{"compiler":[[10,7]],"egraph":[[0,1,1,1.542e-6],[15,7558,12,0.094595876],[14,7214,12,0.080973876],[13,7082,12,0.06908887600000001],[12,6885,12,0.058693001],[11,6580,12,0.048724335],[10,5842,12,0.038731335],[9,4494,12,0.027648543],[8,2542,12,0.016588127],[7,756,12,0.007818752],[6,359,12,0.00280071],[5,152,12,0.001227793],[4,76,12,0.000608918],[3,37,12,0.00034841799999999997],[2,22,12,0.00019908399999999998],[1,18,12,0.000127292],[0,8,12,6.925e-5]],"inputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":120.2529296875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[15,7558,12,0.091254793],[14,7214,12,0.077451501],[13,7082,12,0.065669085],[12,6885,12,0.055370876],[11,6580,12,0.045666168],[10,5842,12,0.035990376],[9,4494,12,0.025479125999999998],[8,2542,12,0.015515542],[7,756,12,0.007419459],[6,359,12,0.002644459],[5,152,12,0.0012185009999999999],[4,76,12,0.000618459],[3,37,12,0.000336542],[2,22,12,0.000180917],[1,18,12,0.00011095899999999999],[0,8,12,5.6167e-5]],"inputs":[["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))"]],"stop":[["node limit",1]],"time":102.736083984375,"type":"simplify"},{"compiler":[[18,12]],"time":0.4189453125,"type":"eval"},{"alts":[["(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","next",35.25]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[35.25],"time":0.89501953125,"type":"prune"},{"compiler":[[27,16]],"locations":[["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))",0.01953125,true],["(sqrt.f64 (fma.f64 x x -1))",32.88606936715139,true]],"time":8.172119140625,"type":"localize"},{"count":[[2,16]],"series":[["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))","x","-inf",0.364013671875],["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))","x","inf",0.193115234375],["(+.f64 x (sqrt.f64 (fma.f64 x x -1)))","x","0",0.2568359375],["(sqrt.f64 (fma.f64 x x -1))","x","-inf",0.31396484375],["(sqrt.f64 (fma.f64 x x -1))","x","inf",0.416015625],["(sqrt.f64 (fma.f64 x x -1))","x","0",0.579833984375]],"time":2.216796875,"type":"series"},{"count":[[2,53]],"egraph":[[2,1668,17,0.015624625999999999],[1,125,17,0.002314792],[0,6,17,0.000179792]],"inputs":[["(sqrt.f64 (fma.f64 x x -1))","(+.f64 x (sqrt.f64 (fma.f64 x x -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) 1/4) (pow.f64 (fma.f64 x x -1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) 1/2) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x -1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x -1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (fma.f64 x x -1))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (sqrt.f64 (fma.f64 x x -1)))) (/.f64 (fma.f64 x x -1) (-.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) (pow.f64 (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) 2) (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) (sqrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x x -1) 3/2)) (/.f64 1 (fma.f64 x x (-.f64 (fma.f64 x x -1) (*.f64 x (sqrt.f64 (fma.f64 x x -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (fma.f64 x x -1)) (/.f64 1 (-.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (-.f64 (fma.f64 x x -1) (*.f64 x (sqrt.f64 (fma.f64 x x -1))))) (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x x -1) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (sqrt.f64 (fma.f64 x x -1))) (-.f64 (*.f64 x x) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x x -1) 3/2)) (fma.f64 x x (-.f64 (fma.f64 x x -1) (*.f64 x (sqrt.f64 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x x -1) 3/2)) (+.f64 (fma.f64 x x -1) (-.f64 (*.f64 x x) (*.f64 x (sqrt.f64 (fma.f64 x x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (fma.f64 x x -1)) (-.f64 x (sqrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (fma.f64 x x -1) 3/2))) (neg.f64 (fma.f64 x x (-.f64 (fma.f64 x x -1) (*.f64 x (sqrt.f64 (fma.f64 x x -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (fma.f64 x x -1))) (neg.f64 (-.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 x x -1) (*.f64 x x)) (-.f64 (sqrt.f64 (fma.f64 x x -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (fma.f64 x x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (sqrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (sqrt.f64 (fma.f64 x x -1))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x x -1) 1/4) (pow.f64 (fma.f64 x x -1) 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (sqrt.f64 (fma.f64 x x -1)))))))"]],"rules":[["egg-rr",33],["egg-rr",20]],"stop":[["node limit",1]],"time":35.22802734375,"type":"rewrite"},{"count":[[69,83]],"egraph":[[6,7532,225,0.037171542],[5,4750,225,0.026876001000000004],[4,1887,225,0.013938751000000001],[3,740,225,0.005367167000000001],[2,312,225,0.002107292],[1,131,225,0.000847251],[0,45,236,0.000253292]],"inputs":[["x","(-.f64 x (*.f64 1/2 (/.f64 1 x)))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x))))","(*.f64 2 x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x))))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 5/128 (/.f64 1 (pow.f64 x 7))))))"]],"method":["egg-herbie"],"outputs":[["x","(-.f64 x (*.f64 1/2 (/.f64 1 x)))","(-.f64 x (/.f64 1/2 x))","(+.f64 x (/.f64 -1/2 x))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 x (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(-.f64 (+.f64 x (/.f64 -1/2 x)) (/.f64 1/8 (pow.f64 x 3)))","(+.f64 x (+.f64 (/.f64 -1/2 x) (/.f64 -1/8 (pow.f64 x 3))))","(-.f64 (/.f64 -1/2 x) (-.f64 (/.f64 1/8 (pow.f64 x 3)) x))","(-.f64 x (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(-.f64 x (+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/16 (pow.f64 x 5)))))","(-.f64 (+.f64 x (/.f64 -1/2 x)) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (+.f64 (/.f64 -1/2 x) (/.f64 -1/8 (pow.f64 x 3))) (-.f64 x (/.f64 1/16 (pow.f64 x 5))))","(+.f64 x (-.f64 (+.f64 (/.f64 -1/2 x) (/.f64 -1/8 (pow.f64 x 3))) (/.f64 1/16 (pow.f64 x 5))))","(-.f64 (-.f64 (/.f64 -1/2 x) (-.f64 (/.f64 1/8 (pow.f64 x 3)) x)) (/.f64 1/16 (pow.f64 x 5)))","(+.f64 x (+.f64 (+.f64 (/.f64 -1/2 x) (/.f64 -1/8 (pow.f64 x 3))) (/.f64 -1/16 (pow.f64 x 5))))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 -1 x (/.f64 1/2 x))","(-.f64 (/.f64 1/2 x) x)","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)))","(+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (neg.f64 x)))","(+.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/8 (pow.f64 x 3)) x))","(+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x))))","(+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/16 (pow.f64 x 5)) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (neg.f64 x))))","(+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/16 (pow.f64 x 5)) (-.f64 (/.f64 1/8 (pow.f64 x 3)) x)))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (/.f64 1/16 (pow.f64 x 5)) (-.f64 (/.f64 1/2 x) x)))","(*.f64 2 x)","(*.f64 x 2)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 x 2) (/.f64 1/2 x))","(fma.f64 x 2 (/.f64 -1/2 x))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(-.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 1/8 (pow.f64 x 3)))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/16 (pow.f64 x 5)))))","(-.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (/.f64 -1/2 x) (-.f64 (fma.f64 x 2 (/.f64 -1/8 (pow.f64 x 3))) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3))) (/.f64 -1/16 (pow.f64 x 5)))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (+.f64 (/.f64 -1/8 (pow.f64 x 3)) (/.f64 -1/16 (pow.f64 x 5))))","(/.f64 1/2 x)","(+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3)))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x))))","(+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))) (/.f64 1/16 (pow.f64 x 5)))","(+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 5/128 (/.f64 1 (pow.f64 x 7))))))","(+.f64 (/.f64 1/16 (pow.f64 x 5)) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (/.f64 1/2 x) (/.f64 5/128 (pow.f64 x 7)))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (+.f64 (/.f64 1/2 x) (/.f64 5/128 (pow.f64 x 7))) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/16 (pow.f64 x 5)) (/.f64 5/128 (pow.f64 x 7)))))","(+.f64 (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))) (+.f64 (/.f64 1/16 (pow.f64 x 5)) (/.f64 5/128 (pow.f64 x 7))))","(+.f64 (/.f64 1/2 x) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (/.f64 1/16 (pow.f64 x 5)) (/.f64 5/128 (pow.f64 x 7)))))"]],"stop":[["node limit",1]],"time":52.447998046875,"type":"simplify"},{"compiler":[[1197,850]],"time":16.375,"type":"eval"},{"alts":[["(log.f64 (+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3))))","next",0.06315267529745984],["(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","done",35.25]],"compiler":[[14,11],[9,6],[14,11]],"count":[[84,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[83,1],"picked":[1,1]}],"min-error":[0],"time":11.071044921875,"type":"prune"},{"compiler":[[48,36]],"locations":[["(pow.f64 x 3)",0.00390625,true],["(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))",0.0078125,true],["(/.f64 -1/8 (pow.f64 x 3))",0.18359021270677411,true]],"time":14.3310546875,"type":"localize"},{"count":[[3,12]],"series":[["(pow.f64 x 3)","x","-inf",0.4921875],["(pow.f64 x 3)","x","inf",0.650146484375],["(pow.f64 x 3)","x","0",0.14306640625],["(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","x","-inf",0.324951171875],["(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","x","inf",0.255126953125],["(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","x","0",0.366943359375],["(/.f64 -1/8 (pow.f64 x 3))","x","-inf",0.248046875],["(/.f64 -1/8 (pow.f64 x 3))","x","inf",0.26708984375],["(/.f64 -1/8 (pow.f64 x 3))","x","0",0.593017578125]],"time":3.486083984375,"type":"series"},{"count":[[3,115]],"egraph":[[2,3061,26,0.02517125],[1,251,26,0.004636375],[0,11,28,0.000437708]],"inputs":[["(/.f64 -1/8 (pow.f64 x 3))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(pow.f64 x 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 -1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 -1/8) (pow.f64 x -3))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 -1/8) (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -1/8) (pow.f64 x -3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -1/8) (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (/.f64 -1/2 x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/8 (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -1/2 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/2 x) (/.f64 1/4 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 -1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 -1/8) (pow.f64 x 3/2)) (/.f64 (sqrt.f64 -1/8) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/8 (/.f64 1 (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -3) -1/8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) -1/2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) 1) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) (cbrt.f64 (/.f64 1/4 (*.f64 x x)))) (cbrt.f64 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) (sqrt.f64 (/.f64 -1/2 x))) (sqrt.f64 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1/2 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1/2 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/64 (pow.f64 x 6)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 -1/8) (pow.f64 x 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (/.f64 -1/2 x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) -8) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (pow.f64 x 3) -8) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1/64 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -1/8) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (/.f64 -1/2 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (/.f64 -1/2 x) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log.f64 (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 -1/2 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2) (fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))) (/.f64 (/.f64 1/64 (pow.f64 x 6)) (fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))) (pow.f64 (cbrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))) 2) (cbrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))) (sqrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/512 (pow.f64 (pow.f64 x -3) 3) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 3)) (/.f64 1 (fma.f64 (pow.f64 (/.f64 -1/2 x) 3) (-.f64 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2) (/.f64 1/64 (pow.f64 x 6))) (/.f64 1 (fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (pow.f64 (/.f64 -1/2 x) 3) (-.f64 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2)) (fma.f64 -1/512 (pow.f64 (pow.f64 x -3) 3) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3))) (-.f64 (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2) (/.f64 1/64 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/512 (pow.f64 (pow.f64 x -3) 3) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 3)) (fma.f64 (pow.f64 (/.f64 -1/2 x) 3) (-.f64 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/512 (pow.f64 (pow.f64 x -3) 3) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 3)) (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2) (*.f64 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2) (/.f64 1/64 (pow.f64 x 6))) (fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -1/512 (pow.f64 (pow.f64 x -3) 3) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 3))) (neg.f64 (fma.f64 (pow.f64 (/.f64 -1/2 x) 3) (-.f64 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2) (/.f64 1/64 (pow.f64 x 6)))) (neg.f64 (fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1/64 (pow.f64 x 6)) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2)) (-.f64 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 -1/2 x) 3) (-.f64 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2)) (fma.f64 -1/512 (pow.f64 (pow.f64 x -3) 3) (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x 2 (-.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3))) (-.f64 (pow.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 2) (/.f64 1/64 (pow.f64 x 6)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (/.f64 -1/2 x) 3))) (exp.f64 (fma.f64 x 2 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -1/8) (pow.f64 x -3)) (+.f64 1 (expm1.f64 (fma.f64 x 2 (/.f64 -1/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (/.f64 -1/2 x) 3))) (+.f64 1 (expm1.f64 (fma.f64 x 2 (/.f64 -1/2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x 2 (/.f64 -1/2 x)))) (pow.f64 (exp.f64 -1/8) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 x 2 (/.f64 -1/2 x))) (+.f64 1 (expm1.f64 (pow.f64 (/.f64 -1/2 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x 2 (/.f64 -1/2 x)))) (+.f64 1 (expm1.f64 (pow.f64 (/.f64 -1/2 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/8 (pow.f64 x -3) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (+.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 -1/2 x) 3) 1 (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (+.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/2 x) (/.f64 1/4 (*.f64 x x)) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x 2 (/.f64 -1/2 x)) 1 (pow.f64 (/.f64 -1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (/.f64 -1/2 x) 3) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x 2 (/.f64 -1/2 x)) (pow.f64 (/.f64 -1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 2) (+.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 2) (+.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (cbrt.f64 (fma.f64 x 2 (/.f64 -1/2 x))) 2) (pow.f64 (/.f64 -1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x 2 (/.f64 -1/2 x))) 2) (cbrt.f64 (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (/.f64 -1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 -1/8) (pow.f64 x 3/2)) (/.f64 (sqrt.f64 -1/8) (pow.f64 x 3/2)) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2) (+.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x 2 (/.f64 -1/2 x))) (sqrt.f64 (fma.f64 x 2 (/.f64 -1/2 x))) (pow.f64 (/.f64 -1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/8 (/.f64 1 (neg.f64 (pow.f64 x 3))) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -3) -1/8 (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x 2)) 2) (cbrt.f64 (*.f64 x 2)) (+.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 2)) (sqrt.f64 (*.f64 x 2)) (+.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 -1/2 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) -1/2) (/.f64 1 x) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) 1) (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) (cbrt.f64 (/.f64 1/4 (*.f64 x x)))) (cbrt.f64 (/.f64 -1/2 x)) (fma.f64 x 2 (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/4 (*.f64 x x)) (sqrt.f64 (/.f64 -1/2 x))) (sqrt.f64 (/.f64 -1/2 x)) (fma.f64 x 2 (/.f64 -1/2 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 x 3))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 x 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3/2) (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 x 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 x)) 1))))))"]],"rules":[["egg-rr",22],["egg-rr",62],["egg-rr",31]],"stop":[["node limit",1]],"time":50.7978515625,"type":"rewrite"},{"count":[[127,124]],"egraph":[[6,6257,146,0.025291334999999998],[5,1905,146,0.01470946],[4,677,146,0.005020543000000001],[3,265,146,0.001999293],[2,118,146,0.000897668],[1,52,146,0.00039087599999999996],[0,19,164,0.000130459]],"inputs":[["(/.f64 -1/8 (pow.f64 x 3))","(neg.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(*.f64 2 x)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/8 (pow.f64 x 3))","(neg.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(neg.f64 (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (/.f64 -1/2 x) (/.f64 -1/8 (pow.f64 x 3)))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(+.f64 (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/8 (pow.f64 x 3))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(+.f64 (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/8 (pow.f64 x 3))))","(*.f64 2 x)","(*.f64 x 2)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 x 2) (/.f64 1/2 x))","(fma.f64 x 2 (/.f64 -1/2 x))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(+.f64 (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/8 (pow.f64 x 3))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(+.f64 (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/8 (pow.f64 x 3))))","(*.f64 2 x)","(*.f64 x 2)","(-.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 x 2) (/.f64 1/2 x))","(fma.f64 x 2 (/.f64 -1/2 x))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(+.f64 (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/8 (pow.f64 x 3))))","(-.f64 (*.f64 2 x) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3)))))","(-.f64 (*.f64 x 2) (+.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(+.f64 (/.f64 -1/2 x) (fma.f64 x 2 (/.f64 -1/8 (pow.f64 x 3))))"]],"stop":[["node limit",1]],"time":39.80615234375,"type":"simplify"},{"compiler":[[2324,1797]],"time":32.61181640625,"type":"eval"},{"alts":[["(log.f64 (+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3))))","done",0.06315267529745984],["(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","done",35.25]],"compiler":[[14,11],[9,6]],"count":[[126,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[124,0],"picked":[1,1]}],"min-error":[0],"time":26.9931640625,"type":"prune"},{"accuracy":[0.06315267529745984],"baseline":[0.06315267529745984],"branch":[["x",0.06315267529745984,1],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))",0.06315267529745984,1],["(+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1)))",0.06315267529745984,1]],"compiler":[[2,1],[10,7],[9,6],[31,22]],"count":[[3,1]],"inputs":[["(log.f64 (+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x -1))))","(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))"]],"link":["."],"name":["Hyperbolic arc-cosine"],"oracle":[35.31315267529746],"outputs":[["(log.f64 (+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3))))"]],"time":12.01904296875,"times":[["x",3.5810546875],["(log.f64 (+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1))))",4.382080078125],["(+.f64 x (sqrt.f64 (-.f64 (*.f64 x x) 1)))",3.18408203125]],"type":"regimes"},{"compiler":[[14,11]],"egraph":[[1,13,19,3.2624e-5],[0,12,19,1.9416e-5]],"inputs":[["(log.f64 (+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 (fma.f64 x 2 (/.f64 -1/2 x)) (/.f64 -1/8 (pow.f64 x 3))))"]],"stop":[["done",1],["saturated",1]],"time":8.31396484375,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[14,11]],"remove-preprocessing":[[]],"time":10.112060546875,"type":"end"}]
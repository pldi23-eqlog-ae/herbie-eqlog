[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.446044921875,"type":"analyze"},{"outcomes":[["body",512,"valid",58.69677734375,1020],["body",1024,"valid",172.545654296875,2013],["body",256,"valid",156.846923828125,4995],["body",2048,"valid",26.24169921875,228]],"time":422.359130859375,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.041e-6],[11,232,11,0.0035287910000000003],[10,230,11,0.0030123320000000004],[9,204,11,0.002485207],[8,168,11,0.0018994570000000002],[7,122,11,0.0013538320000000001],[6,86,11,0.0009209160000000001],[5,49,11,0.0005258750000000001],[4,32,11,0.000309416],[3,23,11,0.000202666],[2,16,11,0.00012454099999999999],[1,12,11,7.741599999999999e-5],[0,7,11,4.0916e-5]],"inputs":[["0"],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":25.408935546875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,232,11,0.00346825],[10,230,11,0.002975208],[9,204,11,0.002467042],[8,168,11,0.0018769999999999998],[7,122,11,0.001339],[6,86,11,0.000907959],[5,49,11,0.0005175],[4,32,11,0.0003015],[3,23,11,0.00019625000000000003],[2,16,11,0.00011891700000000001],[1,12,11,7.2292e-5],[0,7,11,3.6958e-5]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"stop":[["saturated",1]],"time":13.823974609375,"type":"simplify"},{"compiler":[[8,6]],"time":0.240966796875,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","next",30.197137076704923]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[30.197137076704923],"time":1.071044921875,"type":"prune"},{"compiler":[[19,12]],"locations":[["(cbrt.f64 (+.f64 x 1))",0.04296875,true],["(cbrt.f64 x)",0.09765625,true],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",3.396311816542589,true]],"time":5.06591796875,"type":"localize"},{"count":[[3,7]],"series":[["(cbrt.f64 (+.f64 x 1))","x","-inf",0.239013671875],["(cbrt.f64 (+.f64 x 1))","x","inf",0.1630859375],["(cbrt.f64 (+.f64 x 1))","x","0",0.18896484375],["(cbrt.f64 x)","x","-inf",0.27392578125],["(cbrt.f64 x)","x","inf",0.26806640625],["(cbrt.f64 x)","x","0",0.234130859375],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","x","-inf",0.701904296875],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","x","inf",2.603759765625],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","x","0",0.4169921875]],"time":5.197021484375,"type":"series"},{"count":[[3,73]],"egraph":[[2,1996,20,0.019826876],[1,149,20,0.002792126],[0,7,20,0.000196417]],"inputs":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))","(cbrt.f64 x)","(cbrt.f64 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (neg.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (cbrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 x)) 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/6)) (pow.f64 x 1/6) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 2) (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) (sqrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 1) x) (/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 x) 2)) (/.f64 1 (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)) (-.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))) (-.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) x) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 x) 2)) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (+.f64 x 1) x)) (neg.f64 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 x) 2))) (neg.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 x 1) (pow.f64 (neg.f64 (cbrt.f64 x)) 3)) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (-.f64 (*.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 x))) (*.f64 (cbrt.f64 (+.f64 x 1)) (neg.f64 (cbrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (neg.f64 (cbrt.f64 x)) (neg.f64 (cbrt.f64 x)))) (-.f64 (cbrt.f64 (+.f64 x 1)) (neg.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (+.f64 x 1)) (neg.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 (+.f64 x 1) 1/6) (neg.f64 (cbrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 1/3) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) 1/3) (pow.f64 (sqrt.f64 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 (+.f64 x 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) 1/3) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (+.f64 x 1)) 1/3) (pow.f64 (sqrt.f64 (+.f64 x 1)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x x -1)) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) 1/3))))))"]],"rules":[["egg-rr",20],["egg-rr",18],["egg-rr",35]],"stop":[["node limit",1]],"time":44.069091796875,"type":"rewrite"},{"count":[[80,81]],"egraph":[[10,6011,37,0.053814959],[9,5014,37,0.040285709],[8,4475,37,0.030868459],[7,4176,37,0.023293501],[6,3938,37,0.016767668],[5,2312,37,0.010571334],[4,709,37,0.0049214589999999996],[3,275,38,0.001798542],[2,107,44,0.000767584],[1,47,46,0.000318625],[0,19,52,0.000100708]],"inputs":[["1","(+.f64 1 (*.f64 1/3 x))","0","1","(+.f64 1 (*.f64 1/3 x))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 1/3 x)))","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 5/81 (pow.f64 x 3)) (*.f64 1/3 x))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 1/3 x 1)","0","1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 1/3 x 1)","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 1/3 x)))","(fma.f64 -1/9 (*.f64 x x) (+.f64 1 (*.f64 1/3 x)))","(fma.f64 -1/9 (*.f64 x x) (fma.f64 1/3 x 1))","(fma.f64 1/3 x (fma.f64 x (*.f64 x -1/9) 1))","(fma.f64 x (fma.f64 x -1/9 1/3) 1)","(+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 5/81 (pow.f64 x 3)) (*.f64 1/3 x))))","(fma.f64 -1/9 (*.f64 x x) (+.f64 1 (fma.f64 5/81 (pow.f64 x 3) (*.f64 1/3 x))))","(+.f64 (fma.f64 -1/9 (*.f64 x x) (fma.f64 1/3 x 1)) (*.f64 5/81 (pow.f64 x 3)))","(fma.f64 x (*.f64 x -1/9) (fma.f64 1/3 x (fma.f64 5/81 (pow.f64 x 3) 1)))","(fma.f64 x (fma.f64 x -1/9 1/3) (fma.f64 5/81 (pow.f64 x 3) 1))","(fma.f64 x (+.f64 1/3 (*.f64 x (fma.f64 x 5/81 -1/9))) 1)"]],"stop":[["node limit",1]],"time":66.197021484375,"type":"simplify"},{"compiler":[[1035,690]],"time":14.458984375,"type":"eval"},{"alts":[["(-.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (+.f64 1 (cbrt.f64 x)) 1))","fresh",30.212762076704923],["(+.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 x)))","fresh",30.350189754393778],["1","fresh",32.61266442759412],["(fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 x)))","fresh",30.456700864377446],["(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","next",29.26786213088143],["(/.f64 1 (/.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 x) 2))))","fresh",30.237214658370746]],"compiler":[[12,10],[21,12],[2,2],[17,14],[24,17],[22,17],[12,10],[21,12],[2,2],[17,14],[24,17],[22,17]],"count":[[82,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[81,6],"picked":[1,0]}],"min-error":[28.584714017575575],"time":16.036865234375,"type":"prune"},{"compiler":[[81,52]],"locations":[["(+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))",0.15234375,true],["(pow.f64 (cbrt.f64 (+.f64 x 1)) 2)",0.278007519536884,true],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))",0.293632519536884,true],["(-.f64 (+.f64 x 1) x)",2.433538688661927,true]],"time":19.35400390625,"type":"localize"},{"count":[[4,18]],"series":[["(+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))","x","-inf",0.68212890625],["(+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))","x","inf",0.470947265625],["(+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))","x","0",0.2109375],["(pow.f64 (cbrt.f64 (+.f64 x 1)) 2)","x","-inf",0.31201171875],["(pow.f64 (cbrt.f64 (+.f64 x 1)) 2)","x","inf",0.345947265625],["(pow.f64 (cbrt.f64 (+.f64 x 1)) 2)","x","0",0.43896484375],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))","x","-inf",0.85302734375],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))","x","inf",0.7958984375],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))","x","0",0.47802734375],["(-.f64 (+.f64 x 1) x)","x","-inf",0.153076171875],["(-.f64 (+.f64 x 1) x)","x","inf",0.135009765625],["(-.f64 (+.f64 x 1) x)","x","0",0.166015625]],"time":5.238037109375,"type":"series"},{"count":[[4,281]],"egraph":[[2,4057,55,0.029925208],[1,277,57,0.005543375],[0,12,59,0.000350917]],"inputs":[["(-.f64 (+.f64 x 1) x)","(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))","(pow.f64 (cbrt.f64 (+.f64 x 1)) 2)","(+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (-.f64 1 x)) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (+.f64 x (-.f64 1 x)))) (cbrt.f64 (exp.f64 (+.f64 x (-.f64 1 x)))))) (log.f64 (cbrt.f64 (exp.f64 (+.f64 x (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 x (-.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 x (-.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2)) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (+.f64 x 1)) (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x)) (+.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) (neg.f64 (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x))) (neg.f64 (+.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (fma.f64 x x (-.f64 (*.f64 (-.f64 1 x) (-.f64 1 x)) (*.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 (neg.f64 x) 3)) (+.f64 (pow.f64 (+.f64 x 1) 2) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (+.f64 x 1) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (-.f64 1 x) (-.f64 1 x))) (-.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (+.f64 x 1) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2)) (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x (+.f64 x 1)) (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (+.f64 x 1)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 x 1)) (/.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (/.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 x)) (exp.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 x)) (+.f64 1 (expm1.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 x)) (+.f64 1 (expm1.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 1 x)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 1 x)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (-.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (-.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x 1) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (-.f64 1 x)) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) 1 (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) 1 (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) 1 (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) 1 (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (exp.f64 (*.f64 2/3 (log1p.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (cbrt.f64 (+.f64 x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (cbrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (neg.f64 (cbrt.f64 x)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (*.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (cbrt.f64 (+.f64 x 1))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (*.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (cbrt.f64 (+.f64 x 1))) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1) (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 (+.f64 x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2))) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2))) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 x (+.f64 x 1)) (pow.f64 (+.f64 x 1) 2))) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (-.f64 (fma.f64 x x 1) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (-.f64 (fma.f64 x x 1) x)) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (+.f64 x 1))) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (+.f64 x 1))) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (+.f64 x 1))) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1) (/.f64 1 (+.f64 x -1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1) (/.f64 1 (+.f64 x -1)) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (-.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 x)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 x)) (sqrt.f64 (-.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (neg.f64 x)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 3/2) (pow.f64 (cbrt.f64 x) 3/2) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 3/2) (pow.f64 (cbrt.f64 x) 3/2) (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 3/2) (pow.f64 (cbrt.f64 (+.f64 x 1)) 3/2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 3/2) (pow.f64 (cbrt.f64 (+.f64 x 1)) 3/2) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) 1) (cbrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) 1) (cbrt.f64 x) (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (pow.f64 (+.f64 x 1) 1/6)) (pow.f64 (+.f64 x 1) 1/6) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (pow.f64 (+.f64 x 1) 1/6)) (pow.f64 (+.f64 x 1) 1/6) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (*.f64 (-.f64 1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 x 1/6)) (pow.f64 x 1/6) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 x 1/6)) (pow.f64 x 1/6) (*.f64 (-.f64 1 x) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) 1) (*.f64 (pow.f64 (cbrt.f64 x) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x))) (cbrt.f64 (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 x (+.f64 x 1))) (fma.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (cbrt.f64 (*.f64 x (+.f64 x 1))) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 x) 2)) (*.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (cbrt.f64 (*.f64 x (+.f64 x 1))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 x) 2)))) (-.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (+.f64 x (+.f64 x 1))) (fma.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (pow.f64 (cbrt.f64 x) 2))) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (pow.f64 (cbrt.f64 x) 2)) (exp.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (*.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 1/6) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (cbrt.f64 x)) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/6) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) 1 (*.f64 (pow.f64 (cbrt.f64 x) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (cbrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))))) (cbrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (*.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 x 1/6)) (pow.f64 x 1/6) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (pow.f64 (+.f64 x 1) 1/6)) (pow.f64 (+.f64 x 1) 1/6) (pow.f64 (cbrt.f64 x) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (log.f64 (cbrt.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) (log.f64 (sqrt.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1) 1/6) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 1)) (pow.f64 (+.f64 x 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log1p.f64 x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4) (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (/.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2) (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 2) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (cbrt.f64 (+.f64 x 1)) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))))) (hypot.f64 (cbrt.f64 (+.f64 x 1)) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) (pow.f64 (+.f64 x 1) 2)) (/.f64 1 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2)) (/.f64 1 (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) (pow.f64 (+.f64 x 1) 2)) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) (pow.f64 (+.f64 x 1) 2)) (+.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2) (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4) (*.f64 (*.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2)) (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) (pow.f64 (+.f64 x 1) 2))) (neg.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2))) (neg.f64 (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2) (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (cbrt.f64 (+.f64 x 1)) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) (pow.f64 (+.f64 x 1) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x)) (+.f64 1 (expm1.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (+.f64 1 (expm1.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (exp.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (*.f64 x (+.f64 x 1))) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 x) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 1 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) 1 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 x)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 4)) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2)) (*.f64 (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 2) (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (*.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 x 1))) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (*.f64 (hypot.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))))) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (cbrt.f64 (+.f64 x 1))) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/6) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (cbrt.f64 (+.f64 x 1))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/6) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (cbrt.f64 x)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) (pow.f64 (+.f64 x 1) 1/6) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (cbrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))))) (cbrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (sqrt.f64 (cbrt.f64 (*.f64 x (+.f64 x 1)))) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (*.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 2))) (cbrt.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (hypot.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6))) (hypot.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (pow.f64 x 1/6)) (pow.f64 x 1/6) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 x 1/6)) (pow.f64 x 1/6) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (pow.f64 (+.f64 x 1) 1/6)) (pow.f64 (+.f64 x 1) 1/6) (+.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))"]],"rules":[["egg-rr",76],["egg-rr",21],["egg-rr",49],["egg-rr",135]],"stop":[["node limit",1]],"time":69.427978515625,"type":"rewrite"},{"count":[[299,288]],"egraph":[[10,6042,46,0.054428707],[9,5045,46,0.04090779],[8,4506,46,0.031350915],[7,4207,46,0.023750498999999998],[6,3979,46,0.017140415],[5,2338,46,0.010895123999999999],[4,759,46,0.005162874],[3,299,49,0.001921499],[2,108,55,0.000826416],[1,50,55,0.000345708],[0,19,57,0.000105958]],"inputs":[["1","1","1","1","1","1","1","1","1","1","1","1","1","(+.f64 (*.f64 2/3 x) 1)","(+.f64 (*.f64 2/3 x) (+.f64 (*.f64 -1/9 (pow.f64 x 2)) 1))","(+.f64 (*.f64 2/3 x) (+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 4/81 (pow.f64 x 3)))))","1","(+.f64 (*.f64 2/3 x) 1)"]],"method":["egg-herbie"],"outputs":[["1","1","1","1","1","1","1","1","1","1","1","1","1","(+.f64 (*.f64 2/3 x) 1)","(fma.f64 2/3 x 1)","(+.f64 (*.f64 2/3 x) (+.f64 (*.f64 -1/9 (pow.f64 x 2)) 1))","(fma.f64 2/3 x (fma.f64 -1/9 (*.f64 x x) 1))","(fma.f64 2/3 x (fma.f64 x (*.f64 x -1/9) 1))","(fma.f64 x (fma.f64 x -1/9 2/3) 1)","(+.f64 (*.f64 2/3 x) (+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 1 (*.f64 4/81 (pow.f64 x 3)))))","(fma.f64 2/3 x (+.f64 (fma.f64 -1/9 (*.f64 x x) 1) (*.f64 4/81 (pow.f64 x 3))))","(fma.f64 2/3 x (fma.f64 -1/9 (*.f64 x x) (fma.f64 4/81 (pow.f64 x 3) 1)))","(fma.f64 2/3 x (fma.f64 x (*.f64 x -1/9) (fma.f64 4/81 (pow.f64 x 3) 1)))","(fma.f64 x (fma.f64 x -1/9 2/3) (fma.f64 4/81 (pow.f64 x 3) 1))","(fma.f64 x (fma.f64 x (fma.f64 x 4/81 -1/9) 2/3) 1)","1","(+.f64 (*.f64 2/3 x) 1)","(fma.f64 2/3 x 1)"]],"stop":[["node limit",1]],"time":70.05712890625,"type":"simplify"},{"compiler":[[8984,5889]],"time":91.876953125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 x (+.f64 x 1))))))","fresh",29.26395588088143],["(-.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (+.f64 1 (cbrt.f64 x)) 1))","fresh",30.212762076704923],["(+.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 x)))","fresh",30.350189754393778],["(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","fresh",29.257764621112987],["(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (cbrt.f64 (*.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3)))))","fresh",29.26395588088143],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","next",0.3640213867581883]],"compiler":[[25,19],[12,10],[21,12],[24,17],[26,20],[20,15],[25,19],[12,10],[21,12],[24,17],[26,20],[20,15]],"count":[[294,6]],"kept":[{"done":[0,0],"fresh":[5,2],"new":[288,4],"picked":[1,0]}],"min-error":[0.31486137698974626],"time":93.2958984375,"type":"prune"},{"compiler":[[72,47]],"locations":[["(+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))))",0.15234375,false],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))",0.16796875,true],["(pow.f64 (cbrt.f64 (+.f64 x 1)) 2)",0.278007519536884,false],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))",0.293632519536884,false]],"time":17.01416015625,"type":"localize"},{"count":[[1,2]],"series":[["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","x","-inf",2.994873046875],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","x","inf",2.325927734375],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","x","0",0.373046875]],"time":5.75,"type":"series"},{"count":[[1,29]],"egraph":[[2,3753,27,0.028726584],[1,271,28,0.005144459],[0,12,30,0.000353292]],"inputs":[["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)) (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1/2) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) 3) (pow.f64 (+.f64 1 x) 2))) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 1 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) 4) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x))) 2))) (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2))) (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) 1))))))"]],"rules":[["egg-rr",29]],"stop":[["node limit",1]],"time":47.79296875,"type":"rewrite"},{"count":[[31,32]],"egraph":[[2,12,6,0.000108916],[1,10,6,7.1333e-5],[0,6,8,3.9208e-5]],"inputs":[["1","(+.f64 1 (*.f64 -2/3 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2/3 x))","(fma.f64 -2/3 x 1)"]],"stop":[["saturated",1]],"time":10.739990234375,"type":"simplify"},{"compiler":[[4800,3249]],"time":54.85107421875,"type":"eval"},{"alts":[["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (/.f64 (*.f64 x (+.f64 x (+.f64 x 1))) (fma.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (cbrt.f64 (*.f64 x (+.f64 x 1))) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 x) 2)) (*.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2)))))))","fresh",15.149101269536885],["(*.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)))","fresh",20.538956252087946],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (*.f64 x (+.f64 x 1))))))","fresh",14.445793156861813],["(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","fresh",29.257764621112987],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))","fresh",2.3513729560696133],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))","fresh",0.37935268560039836],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 3)))","fresh",0.4503289551372825],["(*.f64 (/.f64 1 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) 3) (pow.f64 (+.f64 1 x) 2))) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 1 x)) 4)))","fresh",24.230139488189476],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","next",0.3532601074528622]],"compiler":[[52,37],[38,26],[21,15],[24,17],[22,17],[28,20],[23,18],[53,37],[22,16],[52,37],[38,26],[21,15],[24,17],[22,17],[28,20],[23,18],[53,37],[22,16]],"count":[[190,9]],"kept":[{"done":[0,0],"fresh":[5,1],"new":[184,8],"picked":[1,0]}],"min-error":[0.1676750488422101],"time":49.705810546875,"type":"prune"},{"compiler":[[69,43]],"locations":[["(cbrt.f64 x)",0.09765625,false],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))",0.1484375,true],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))",0.16796875,true],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))",0.293632519536884,true]],"time":16.044189453125,"type":"localize"},{"count":[[3,4]],"series":[["(fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))","x","-inf",0.3740234375],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))","x","inf",0.3720703125],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))","x","0",0.166015625],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","x","-inf",1.179931640625],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","x","inf",2.89501953125],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","x","0",0.241943359375],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))","x","-inf",0.323974609375],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))","x","inf",0.23388671875],["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))","x","0",0.27294921875]],"time":6.218017578125,"type":"series"},{"count":[[3,118]],"egraph":[[2,2934,67,0.025338333],[1,217,73,0.004094625],[0,10,79,0.00028375]],"inputs":[["(*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","(fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x x) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 3)) (+.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 2) (*.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 (+.f64 x 1) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 2) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 2)) (-.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 (+.f64 x 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (cbrt.f64 x)) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (+.f64 x (+.f64 x 1))) (fma.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (-.f64 (pow.f64 (cbrt.f64 x) 2) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))) (exp.f64 (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (*.f64 (+.f64 x 1) x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) 1 (*.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) 2)) (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 x)) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) 2)) (*.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 1/6) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/6) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (cbrt.f64 x)) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/6) (*.f64 (pow.f64 x 1/6) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) 2)) 2) (cbrt.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))) 2) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))) (sqrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)) (*.f64 (pow.f64 (+.f64 x 1) 1/6) (pow.f64 x 1/6)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (*.f64 (pow.f64 x 1/6) (pow.f64 (+.f64 x 1) 1/6)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (pow.f64 (cbrt.f64 x) 2))) (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (pow.f64 (cbrt.f64 x) 2))) (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 x 1/6)) (pow.f64 x 1/6) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) (pow.f64 (+.f64 x 1) 1/6)) (pow.f64 (+.f64 x 1) 1/6) (pow.f64 (cbrt.f64 x) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)) (cbrt.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1/2) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2))) (cbrt.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) 1) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2)) (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (cbrt.f64 (+.f64 x 1)) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))))) (hypot.f64 (cbrt.f64 (+.f64 x 1)) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2)) (cbrt.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 (cbrt.f64 (+.f64 x 1)) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))))) (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x 1) 2) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 3)) (+.f64 (pow.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) 2) (-.f64 (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2) (*.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) 2) (pow.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) 2)) (-.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (cbrt.f64 (+.f64 x 1)) (hypot.f64 (cbrt.f64 x) (sqrt.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (cbrt.f64 x)) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))) (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1)))))) (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x)))) (+.f64 1 (expm1.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x))))) 1))))))"]],"rules":[["egg-rr",37],["egg-rr",27],["egg-rr",54]],"stop":[["node limit",1]],"time":54.497802734375,"type":"rewrite"},{"count":[[122,123]],"egraph":[[2,19,12,0.00015424999999999998],[1,16,12,0.00010125],[0,9,14,4.9542e-5]],"inputs":[["1","(+.f64 1 (*.f64 -2/3 x))","1","(+.f64 (*.f64 2/3 x) 1)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2/3 x))","(fma.f64 -2/3 x 1)","1","(+.f64 (*.f64 2/3 x) 1)","(fma.f64 2/3 x 1)","(fma.f64 x 2/3 1)"]],"stop":[["saturated",1]],"time":11.318115234375,"type":"simplify"},{"compiler":[[3951,2680]],"time":44.6240234375,"type":"eval"},{"alts":[["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))","fresh",2.3513729560696133],["(*.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)) (cbrt.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))","fresh",20.53582524104947],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (/.f64 (+.f64 (*.f64 x x) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 3)) (+.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 2) (*.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 (+.f64 x 1) x))))))))","fresh",15.149101269536885],["(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","fresh",29.257764621112987],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 3)))","fresh",0.4571839844426086],["(*.f64 (/.f64 1 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) 3) (pow.f64 (+.f64 1 x) 2))) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 1 x)) 4)))","fresh",24.230139488189476],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))","fresh",14.421691887324927],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","done",0.3532601074528622],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (/.f64 (*.f64 (cbrt.f64 x) (+.f64 x (+.f64 x 1))) (fma.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2)))))","fresh",8.245833892633243],["(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))","fresh",0.37935268560039836],["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (+.f64 x 1))))))","fresh",0.35687265629507237]],"compiler":[[22,17],[38,26],[52,39],[24,17],[25,19],[53,37],[23,16],[22,16],[37,26],[28,20],[29,20]],"count":[[168,11]],"kept":[{"done":[0,0],"fresh":[8,4],"new":[159,6],"picked":[1,1]}],"min-error":[0.11851503907376808],"time":40.530029296875,"type":"prune"},{"accuracy":[0.3532601074528622],"baseline":[0.3532601074528622],"branch":[["x",0.3532601074528622,1],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",0.3532601074528622,1],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",0.3532601074528622,1]],"compiler":[[2,1],[8,6],[8,6],[640,430]],"count":[[25,1]],"inputs":[["(*.f64 (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)) (cbrt.f64 (/.f64 1 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (/.f64 (+.f64 (*.f64 x x) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 3)) (+.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x 1) x)) 2) (*.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 (+.f64 x 1) x))))))))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 3)))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (*.f64 (+.f64 x 1) x)))))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (/.f64 (*.f64 (cbrt.f64 x) (+.f64 x (+.f64 x 1))) (fma.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2)))))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (+.f64 x 1))))))","(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (/.f64 (*.f64 x (+.f64 x (+.f64 x 1))) (fma.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (cbrt.f64 (*.f64 x (+.f64 x 1))) (-.f64 (*.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 x) 2)) (*.f64 (cbrt.f64 (*.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 x) 2)))))))","(*.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (exp.f64 (*.f64 2/3 (log1p.f64 x)))) -2)))","(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (fma.f64 (cbrt.f64 x) (cbrt.f64 x) (cbrt.f64 (*.f64 x (+.f64 x 1))))))","(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (expm1.f64 (log1p.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))))","(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (fma.f64 (*.f64 (cbrt.f64 (+.f64 x 1)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2))))","(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))) 3)))","(*.f64 (/.f64 1 (fma.f64 x (pow.f64 (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) 3) (pow.f64 (+.f64 1 x) 2))) (fma.f64 (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x))) (fma.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)) (neg.f64 (exp.f64 (*.f64 2/3 (log1p.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 1 x)) 4)))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (*.f64 x (+.f64 x 1))))))","(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (cbrt.f64 (*.f64 x (pow.f64 (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))) 3)))))","(/.f64 1 (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","(-.f64 (cbrt.f64 (+.f64 x 1)) (-.f64 (+.f64 1 (cbrt.f64 x)) 1))","(+.f64 (-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (cbrt.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 x)))","1","(fma.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) (cbrt.f64 (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 x)))","(/.f64 (-.f64 (+.f64 x 1) x) (+.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)))))","(/.f64 1 (/.f64 (+.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x)) (-.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (pow.f64 (cbrt.f64 x) 2))))","(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))"]],"link":["."],"name":["2cbrt (problem 3.3.4)"],"oracle":[34.417730977765714],"outputs":[["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))"]],"time":23.200927734375,"times":[["x",8.072021484375],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",2.614013671875],["(-.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 x))",2.68798828125]],"type":"regimes"},{"compiler":[[22,16]],"egraph":[[1,15,33,4.2333e-5],[0,10,33,2.6167e-5]],"inputs":[["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x 1))))))","(/.f64 1 (fma.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 (+.f64 1 x)) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 (+.f64 1 x)) (cbrt.f64 x)))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.616943359375,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[22,16]],"remove-preprocessing":[[]],"time":11.373046875,"type":"end"}]
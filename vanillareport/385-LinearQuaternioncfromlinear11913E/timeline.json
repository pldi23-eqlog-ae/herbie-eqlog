[{"compiler":[[18,8]],"method":["search"],"sampling":[[12,0.4936581836082041,0.06829263409599662,0.43804918229579926],[11,0.4721947843208909,0.08975603338330984,0.43804918229579926],[10,0.42926798574626446,0.1326828319579363,0.43804918229579926],[9,0.39024362340569496,0.17170719429850578,0.43804918229579926],[8,0.31219489872455597,0.24975591897964478,0.43804918229579926],[7,0.24975591897964478,0.31219489872455597,0.43804918229579926],[6,0.24975591897964478,0.49951183795928955,0.2507322430610657],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":19.6640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.248046875,7],["body",256,"valid",306.72802734375,8256]],"time":314.723876953125,"type":"sample"},{"compiler":[[17,7]],"egraph":[[0,2,2,1.417e-6],[5,137,22,0.001294375],[4,125,22,0.000994209],[3,91,22,0.0006891250000000001],[2,52,22,0.00039808400000000005],[1,25,30,0.000170542],[0,11,40,6.0625e-5]],"inputs":[["0","1"],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (fma.f64 x x (*.f64 y y)) (+.f64 (*.f64 y y) (*.f64 y y)))","(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(fma.f64 x x (*.f64 (*.f64 y y) 3))","(+.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 x x)) (*.f64 x x))","(+.f64 (fma.f64 x x (*.f64 y y)) (+.f64 (*.f64 x x) (*.f64 x x)))","(fma.f64 x x (fma.f64 y y (*.f64 x (+.f64 x x))))","(fma.f64 y y (*.f64 3 (*.f64 x x)))","(fma.f64 y y (*.f64 x (*.f64 3 x)))","(fma.f64 y y (*.f64 x (*.f64 x 3)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.526123046875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,75,11,0.000784834],[4,69,11,0.000612292],[3,51,11,0.00043337599999999997],[2,30,11,0.000254042],[1,15,15,0.00012087600000000001],[0,8,20,4.5042e-5]],"inputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (*.f64 y y) (+.f64 (*.f64 y y) (fma.f64 x x (*.f64 y y))))","(fma.f64 y y (fma.f64 x x (*.f64 y (+.f64 y y))))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(fma.f64 y (*.f64 3 y) (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))"]],"stop":[["saturated",1]],"time":11.623046875,"type":"simplify"},{"compiler":[[25,10]],"time":0.3369140625,"type":"eval"},{"alts":[["(fma.f64 y (*.f64 y 3) (*.f64 x x))","fresh",0.125],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","next",0.1171875]],"compiler":[[10,6],[17,7],[10,6],[17,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.05078125],"time":1.181884765625,"type":"prune"},{"compiler":[[43,7]],"locations":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))",0.0078125,true],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))",0.109375,true]],"time":5.87109375,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","y","-inf",0.177001953125],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","y","inf",0.156982421875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","y","0",0.171875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","x","-inf",0.14501953125],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","x","inf",0.159912109375],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))","x","0",0.18701171875],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","y","-inf",0.18115234375],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","y","inf",0.343994140625],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","y","0",0.35498046875],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","x","-inf",0.19091796875],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","x","inf",0.407958984375],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","x","0",0.568115234375]],"time":3.205078125,"type":"series"},{"count":[[2,188]],"egraph":[[2,2994,23,0.025980875],[1,190,23,0.0039505],[0,8,34,0.000211]],"inputs":[["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))","(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y))) (/.f64 (pow.f64 y 4) (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y)))) 2) (cbrt.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 4)) (pow.f64 (cbrt.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) (hypot.f64 y (hypot.f64 x (hypot.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6)) (/.f64 1 (+.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x (hypot.f64 y y)) y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (pow.f64 y 4)) (/.f64 1 (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x (hypot.f64 y y)) y) 2))) (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y)) (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6)) (+.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x (hypot.f64 y y)) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6)) (+.f64 (pow.f64 y 4) (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (pow.f64 (*.f64 (hypot.f64 x (hypot.f64 y y)) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (pow.f64 y 4)) (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6))) (neg.f64 (+.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x (hypot.f64 y y)) y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (pow.f64 y 4))) (neg.f64 (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (hypot.f64 x y) 6) (pow.f64 (*.f64 (*.f64 y y) 2) 3)) (+.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 (*.f64 (*.f64 y y) 2) 2) (*.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 (*.f64 y y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y 4) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4)) (-.f64 (*.f64 y y) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 (*.f64 (*.f64 y y) 2) 2)) (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y)))) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x (hypot.f64 y y)) y) 2))) (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y)) (-.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) (pow.f64 y 4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y y))) (exp.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) y) (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y y))) (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2))) (exp.f64 (*.f64 (*.f64 y y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2))) (pow.f64 (pow.f64 (exp.f64 y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))) (pow.f64 (exp.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)) (+.f64 1 (expm1.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))) (+.f64 1 (expm1.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (*.f64 y y) 2)) (exp.f64 (pow.f64 (hypot.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (*.f64 y y) 2)) (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 y) y) 2) (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y))) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y)))) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 y (hypot.f64 x (hypot.f64 y y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (fma.f64 y (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 y y) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 2 (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 x y) 2) 1 (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 x y) 2) 1 (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (fma.f64 y (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 x y) 2) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 x y) 2) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y y) 2) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) y) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (+.f64 (*.f64 (cbrt.f64 y) y) (*.f64 (cbrt.f64 y) y)) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 y) y) (pow.f64 (cbrt.f64 y) 2) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 y) y) (+.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)) (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)) (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (fma.f64 y (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) (fma.f64 y (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)) (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4)) (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 3/2) (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 3/2) (fma.f64 y (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x y) (hypot.f64 x y) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x y) (hypot.f64 x y) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x (hypot.f64 y y)) (hypot.f64 x (hypot.f64 y y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (pow.f64 y 3/2) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 y y) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 6) (pow.f64 y 6)) (/.f64 1 (+.f64 (pow.f64 x 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 y x) 2)))) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 6) (pow.f64 y 6)) (/.f64 1 (+.f64 (pow.f64 x 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 y x) 2)))) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x y) 6)) (/.f64 1 (+.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x y) y) 2)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 4) (pow.f64 y 4)) (/.f64 1 (-.f64 (*.f64 x x) (*.f64 y y))) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 4) (pow.f64 y 4)) (/.f64 1 (-.f64 (*.f64 x x) (*.f64 y y))) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 y 4)) (/.f64 1 (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 3/2) (sqrt.f64 y) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (sqrt.f64 x) (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (sqrt.f64 x) (fma.f64 y (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 y y) 2)) 2) (cbrt.f64 (*.f64 (*.f64 y y) 2)) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 5) (cbrt.f64 y) (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x) (fma.f64 y y (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x) (fma.f64 y (+.f64 y y) (*.f64 y y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y))) (/.f64 (pow.f64 y 4) (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)) (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4)) (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x (hypot.f64 y y)) (hypot.f64 x (hypot.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x y) 6)) (/.f64 1 (+.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x y) y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 y 4)) (/.f64 1 (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x y) y) 2))) (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x y) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y)) (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x y) 6)) (+.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x y) 6)) (+.f64 (pow.f64 y 4) (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 (*.f64 (hypot.f64 x y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 y 4)) (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x y) 6))) (neg.f64 (+.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x y) y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 y 4))) (neg.f64 (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 (*.f64 y y) 2) 3)) (+.f64 (pow.f64 x 4) (-.f64 (pow.f64 (*.f64 (*.f64 y y) 2) 2) (*.f64 (*.f64 x x) (*.f64 (*.f64 y y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 (*.f64 y y) 2) 2)) (-.f64 (*.f64 x x) (*.f64 (*.f64 y y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y 4) (pow.f64 (hypot.f64 x y) 4)) (-.f64 (*.f64 y y) (pow.f64 (hypot.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (pow.f64 (hypot.f64 x y) 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 (hypot.f64 x y) y) 2))) (+.f64 (pow.f64 y 6) (pow.f64 (hypot.f64 x y) 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y)) (-.f64 (pow.f64 (hypot.f64 x y) 4) (pow.f64 y 4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (exp.f64 (*.f64 (*.f64 y y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (pow.f64 (pow.f64 (exp.f64 y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y y))) (exp.f64 (pow.f64 (hypot.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) y) (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y y))) (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2))) (pow.f64 (exp.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (pow.f64 (hypot.f64 x y) 2)) (+.f64 1 (expm1.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (pow.f64 (hypot.f64 x y) 2))) (+.f64 1 (expm1.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (*.f64 y y) 2)) (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (*.f64 y y) 2)) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 y) y) 2) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (hypot.f64 x (hypot.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (hypot.f64 x (hypot.f64 y y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 x (hypot.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (hypot.f64 x (hypot.f64 y y)) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 2 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 x y) 2) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (hypot.f64 x y) 2) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y y) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) y) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (+.f64 (*.f64 (cbrt.f64 y) y) (*.f64 (cbrt.f64 y) y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 y) y) (pow.f64 (cbrt.f64 y) 2) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 y) y) (+.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 y) 2)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)) (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 3/2) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 3/2) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x y) (hypot.f64 x y) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (pow.f64 y 3/2) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 6) (pow.f64 y 6)) (/.f64 1 (+.f64 (pow.f64 x 4) (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 y x) 2)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 4) (pow.f64 y 4)) (/.f64 1 (-.f64 (*.f64 x x) (*.f64 y y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 3/2) (sqrt.f64 y) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (sqrt.f64 x) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (sqrt.f64 x) (*.f64 (*.f64 (*.f64 y y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 y y) 2)) 2) (cbrt.f64 (*.f64 (*.f64 y y) 2)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 y y) (hypot.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 5) (cbrt.f64 y) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x) (*.f64 (*.f64 y y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x) (*.f64 (*.f64 (*.f64 y y) 2) 1))))))"]],"rules":[["egg-rr",87],["egg-rr",101]],"stop":[["node limit",1]],"time":54.572021484375,"type":"rewrite"},{"count":[[236,200]],"egraph":[[19,7784,462,0.105624958],[18,7716,462,0.094518208],[17,7560,462,0.085528666],[16,7129,462,0.076409875],[15,6670,462,0.066608375],[14,5970,462,0.0581755],[13,5074,462,0.049098625],[12,4355,462,0.040559167],[11,3748,462,0.033125042],[10,3274,462,0.026684166999999998],[9,2940,462,0.020761125],[8,2694,462,0.016019875],[7,2346,462,0.011958292],[6,1427,462,0.007770792],[5,836,462,0.004464959],[4,303,462,0.002291584],[3,128,462,0.0010575839999999999],[2,68,462,0.0005530839999999999],[1,33,462,0.00029341699999999997],[0,14,498,0.000113625]],"inputs":[["(+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 3 (pow.f64 y 2))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(*.f64 2 (pow.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (pow.f64 y 2) (*.f64 2 (pow.f64 y 2)))","(*.f64 (*.f64 y y) 3)","(*.f64 y (*.f64 y 3))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (*.f64 2 (pow.f64 y 2)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(*.f64 3 (pow.f64 y 2))","(*.f64 (*.f64 y y) 3)","(*.f64 y (*.f64 y 3))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(*.f64 3 (pow.f64 y 2))","(*.f64 (*.f64 y y) 3)","(*.f64 y (*.f64 y 3))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (pow.f64 x 2) (*.f64 3 (pow.f64 y 2)))","(+.f64 (*.f64 x x) (*.f64 (*.f64 y y) 3))","(fma.f64 (*.f64 y y) 3 (*.f64 x x))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(*.f64 2 (pow.f64 y 2))","(*.f64 2 (*.f64 y y))","(*.f64 y (*.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(*.f64 2 (pow.f64 y 2))","(*.f64 2 (*.f64 y y))","(*.f64 y (*.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(*.f64 2 (pow.f64 y 2))","(*.f64 2 (*.f64 y y))","(*.f64 y (*.f64 y 2))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))","(+.f64 (*.f64 2 (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y y) (*.f64 x x))","(fma.f64 y (*.f64 y 2) (*.f64 x x))","(fma.f64 x x (*.f64 2 (*.f64 y y)))"]],"stop":[["node limit",1]],"time":135.02197265625,"type":"simplify"},{"compiler":[[3434,1453]],"time":32.972900390625,"type":"eval"},{"alts":[["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","fresh",0.18425751953688402],["(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))","next",0.046875],["(fma.f64 y (*.f64 y 3) (*.f64 x x))","fresh",0.125],["(fma.f64 (*.f64 (cbrt.f64 y) y) (+.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 (hypot.f64 x y) 2))","fresh",0.21064379884221007]],"compiler":[[14,7],[13,6],[10,6],[21,13],[14,7],[13,6],[10,6],[21,13]],"count":[[202,4]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[200,3],"picked":[1,0]}],"min-error":[0],"time":56.699951171875,"type":"prune"},{"compiler":[[29,6]],"locations":[["(fma.f64 y (+.f64 y y) (*.f64 y y))",0.09765625,true]],"time":5.465087890625,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 y (+.f64 y y) (*.f64 y y))","y","-inf",0.458984375],["(fma.f64 y (+.f64 y y) (*.f64 y y))","y","inf",0.52001953125],["(fma.f64 y (+.f64 y y) (*.f64 y y))","y","0",0.696044921875]],"time":1.72607421875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1585,10,0.014244917000000001],[1,108,10,0.002218084],[0,5,11,0.000141542]],"inputs":[["(fma.f64 y (+.f64 y y) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y y) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (+.f64 y y) (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (+.f64 (+.f64 y y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 y y) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (+.f64 y y) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))) 2) (cbrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))) (sqrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 y y) (pow.f64 (*.f64 y y) 3)) (+.f64 (+.f64 y y) (-.f64 (pow.f64 y 4) (*.f64 (+.f64 y y) (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 y y) (pow.f64 y 4)) (fma.f64 y y 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (+.f64 y y) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (+.f64 y y) (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (+.f64 y y) (*.f64 y y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (+.f64 y y) (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (+.f64 y y) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (+.f64 y y) (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (+.f64 y y) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (+.f64 y y) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (+.f64 y y) (*.f64 y y))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":31.40283203125,"type":"rewrite"},{"count":[[33,23]],"egraph":[[22,7938,84,0.11968712399999999],[21,6997,84,0.10800062399999999],[20,6961,84,0.09448270799999998],[19,6887,84,0.08436883299999999],[18,6609,84,0.075986375],[17,6321,84,0.067750541],[16,5925,84,0.060019666],[15,5092,84,0.0518695],[14,4404,84,0.042908166],[13,3838,84,0.035648833],[12,3357,84,0.029571916],[11,2964,84,0.023852458],[10,2665,84,0.019120125],[9,2457,84,0.015184625],[8,2273,84,0.011666292],[7,2109,84,0.00862275],[6,1232,84,0.005437667],[5,318,84,0.0026667920000000003],[4,104,84,0.000904417],[3,44,84,0.000401917],[2,23,84,0.000217334],[1,12,84,0.000119792],[0,6,84,4.9334e-5]],"inputs":[["(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))"]],"stop":[["node limit",1]],"time":134.875,"type":"simplify"},{"compiler":[[319,94]],"time":2.899169921875,"type":"eval"},{"alts":[["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","fresh",0.18425751953688402],["(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))","done",0.046875],["(fma.f64 (*.f64 (cbrt.f64 y) y) (+.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 (hypot.f64 x y) 2))","fresh",0.21064379884221007],["(fma.f64 x x (*.f64 y (*.f64 3 y)))","next",0.125]],"compiler":[[14,7],[13,6],[21,13],[10,6],[14,7],[21,13],[10,6]],"count":[[27,4]],"kept":[{"done":[0,0],"fresh":[3,2],"new":[23,1],"picked":[1,1]}],"min-error":[0],"time":4.64404296875,"type":"prune"},{"compiler":[[21,12]],"locations":[["(*.f64 y (*.f64 3 y))",0.171875,true]],"time":5.10693359375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 y (*.f64 3 y))","y","-inf",0.177978515625],["(*.f64 y (*.f64 3 y))","y","inf",0.641845703125],["(*.f64 y (*.f64 3 y))","y","0",0.48095703125]],"time":1.343994140625,"type":"series"},{"count":[[1,14]],"egraph":[[2,1132,7,0.013539541999999998],[1,101,7,0.0016398749999999998],[0,5,7,0.000161917]],"inputs":[["(*.f64 y (*.f64 3 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (*.f64 y 3))) (cbrt.f64 (pow.f64 (exp.f64 y) (*.f64 y 3))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 y) (*.f64 y 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (*.f64 y 3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 y) (*.f64 y 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (*.f64 y 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 y 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 y 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 y 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (*.f64 y 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (*.f64 y 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 y 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (*.f64 y 3))))))))"]],"rules":[["egg-rr",14]],"stop":[["node limit",1]],"time":29.924072265625,"type":"rewrite"},{"count":[[26,16]],"egraph":[[22,7938,84,0.11960116500000001],[21,6997,84,0.10792079],[20,6961,84,0.09445479],[19,6887,84,0.084255624],[18,6609,84,0.075900207],[17,6321,84,0.067727332],[16,5925,84,0.059985540000000004],[15,5092,84,0.051800623000000004],[14,4404,84,0.04289304],[13,3838,84,0.03568304],[12,3357,84,0.029584122999999997],[11,2964,84,0.023866039999999998],[10,2665,84,0.019144249],[9,2457,84,0.015222331999999998],[8,2273,84,0.011701831999999999],[7,2109,84,0.008654749],[6,1232,84,0.005472665999999999],[5,318,84,0.002698249],[4,104,84,0.000922333],[3,44,84,0.000401166],[2,23,84,0.000216333],[1,12,84,0.000118708],[0,6,84,4.8291e-5]],"inputs":[["(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))","(*.f64 3 (pow.f64 y 2))","(*.f64 3 (*.f64 y y))","(*.f64 y (*.f64 3 y))"]],"stop":[["node limit",1]],"time":134.365966796875,"type":"simplify"},{"compiler":[[194,120]],"time":2.848876953125,"type":"eval"},{"alts":[["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","next",0.18425751953688402],["(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))","done",0.046875],["(fma.f64 (*.f64 (cbrt.f64 y) y) (+.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 (hypot.f64 x y) 2))","fresh",0.21064379884221007],["(fma.f64 x x (*.f64 y (*.f64 3 y)))","done",0.125]],"compiler":[[14,7],[13,6],[21,13],[10,6],[14,7],[21,13]],"count":[[20,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[16,0],"picked":[1,1]}],"min-error":[0],"time":3.616943359375,"type":"prune"},{"compiler":[[28,10]],"locations":[["(pow.f64 (hypot.f64 x y) 2)",0.00390625,true],["(hypot.f64 y y)",0.12109375,true],["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))",0.18359375,true]],"time":6.235107421875,"type":"localize"},{"count":[[3,60]],"series":[["(pow.f64 (hypot.f64 x y) 2)","y","-inf",0.196044921875],["(pow.f64 (hypot.f64 x y) 2)","y","inf",0.197021484375],["(pow.f64 (hypot.f64 x y) 2)","y","0",0.23583984375],["(pow.f64 (hypot.f64 x y) 2)","x","-inf",0.176025390625],["(pow.f64 (hypot.f64 x y) 2)","x","inf",0.223876953125],["(pow.f64 (hypot.f64 x y) 2)","x","0",0.203857421875],["(hypot.f64 y y)","y","-inf",0.3671875],["(hypot.f64 y y)","y","inf",0.705810546875],["(hypot.f64 y y)","y","0",0.366943359375],["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","x","-inf",0.302001953125],["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","x","inf",0.807861328125],["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","x","0",2.783935546875],["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","y","-inf",0.362060546875],["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","y","inf",0.69091796875],["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","y","0",1.596923828125]],"time":9.458984375,"type":"series"},{"count":[[3,59]],"egraph":[[2,1793,24,0.0168705],[1,164,24,0.0025657920000000003],[0,8,28,0.00023175]],"inputs":[["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","(hypot.f64 y y)","(pow.f64 (hypot.f64 x y) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 y y)) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 y y)) 1) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)) (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)) 2) (cbrt.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (+.f64 y y)) 3) (pow.f64 (pow.f64 (hypot.f64 x y) 2) 3)) (+.f64 (*.f64 (*.f64 y (+.f64 y y)) (*.f64 y (+.f64 y y))) (-.f64 (pow.f64 (hypot.f64 x y) 4) (*.f64 (*.f64 y (+.f64 y y)) (pow.f64 (hypot.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (+.f64 y y)) (*.f64 y (+.f64 y y))) (pow.f64 (hypot.f64 x y) 4)) (-.f64 (*.f64 y (+.f64 y y)) (pow.f64 (hypot.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (hypot.f64 (hypot.f64 y y) (hypot.f64 x y)) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (hypot.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 y y)) (pow.f64 (cbrt.f64 (hypot.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (hypot.f64 y y)) 2) (cbrt.f64 (hypot.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 y y)) (sqrt.f64 (hypot.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 y y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 y y)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 y y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 y y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 y y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (hypot.f64 x y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x y) (hypot.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2) (*.f64 (cbrt.f64 (hypot.f64 x y)) (hypot.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 x y) 4)) (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 x y)) (*.f64 (sqrt.f64 (hypot.f64 x y)) (hypot.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 x y) (sqrt.f64 (hypot.f64 x y))) (sqrt.f64 (hypot.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 x y) (pow.f64 (cbrt.f64 (hypot.f64 x y)) 2)) (cbrt.f64 (hypot.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x x) 3) (pow.f64 (*.f64 y y) 3)) (+.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (-.f64 (*.f64 (*.f64 y y) (*.f64 y y)) (*.f64 (*.f64 x x) (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 y y) (*.f64 y y))) (-.f64 (*.f64 x x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 x y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (hypot.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (hypot.f64 x y) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (hypot.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (hypot.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (hypot.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 y y))))))"]],"rules":[["egg-rr",21],["egg-rr",17],["egg-rr",21]],"stop":[["node limit",1]],"time":39.049072265625,"type":"rewrite"},{"count":[[119,92]],"egraph":[[3,6604,755,0.026113875],[2,1764,755,0.01235725],[1,482,791,0.0035005],[0,147,1012,0.000758167]],"inputs":[["(pow.f64 x 2)","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 y 8) (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 x 6))) (*.f64 -1 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 x 6))))))) (pow.f64 x 2)))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 y 10) (-.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 x 6)))) (pow.f64 x 2))) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 6))) (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2)) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 y 8) (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 x 6))) (*.f64 -1 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 x 6))))))) (pow.f64 x 2))))","(*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (pow.f64 x 2))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (pow.f64 x 2))))))","(*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (pow.f64 x 2))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (pow.f64 x 2))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (pow.f64 x 2))))))","(+.f64 (pow.f64 y 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)))","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 y 6))) (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8)) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/8 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 4))) (+.f64 (pow.f64 (/.f64 1/16 (pow.f64 y 5)) 2) (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 y 8))) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 2)))) (pow.f64 y 2)))))) (+.f64 (*.f64 1/8 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 4))) (+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 y 10))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 y 8))) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 2)))) (pow.f64 y 2)))))) (pow.f64 x 12)) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 y 6))) (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8)) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4)))))))))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4)))))))))","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 y 6))) (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8))))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))))))))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))))))))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 (pow.f64 y 8) (+.f64 (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 6))) (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2))) (*.f64 5/64 (/.f64 1 (pow.f64 x 6))))) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 y 8) (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 x 6))) (*.f64 -1 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 x 6))))))) (pow.f64 x 2)))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (fma.f64 (pow.f64 y 8) (fma.f64 -1 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (/.f64 1/16 (pow.f64 x 6))) (/.f64 5/64 (pow.f64 x 6))) (*.f64 x x)))","(fma.f64 3 (*.f64 y y) (fma.f64 (pow.f64 y 8) (-.f64 (/.f64 5/64 (pow.f64 x 6)) (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (/.f64 1/16 (pow.f64 x 6)))) (*.f64 x x)))","(fma.f64 x x (fma.f64 (pow.f64 y 8) (-.f64 (*.f64 (/.f64 1 (pow.f64 x 6)) 1/64) (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2)) (*.f64 3 (*.f64 y y))))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 y 10) (-.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 x 6)))) (pow.f64 x 2))) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 6))) (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2)) (pow.f64 x 2))))) (+.f64 (*.f64 (pow.f64 y 8) (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 x 6))) (*.f64 -1 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (*.f64 1/16 (/.f64 1 (pow.f64 x 6))))))) (pow.f64 x 2))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (fma.f64 (pow.f64 y 8) (fma.f64 -1 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (/.f64 1/16 (pow.f64 x 6))) (/.f64 5/64 (pow.f64 x 6))) (*.f64 x x)))","(fma.f64 3 (*.f64 y y) (fma.f64 (pow.f64 y 8) (-.f64 (/.f64 5/64 (pow.f64 x 6)) (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (/.f64 1/16 (pow.f64 x 6)))) (*.f64 x x)))","(fma.f64 x x (fma.f64 (pow.f64 y 8) (-.f64 (*.f64 (/.f64 1 (pow.f64 x 6)) 1/64) (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2)) (*.f64 3 (*.f64 y y))))","(*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2))","(*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y))","(*.f64 3 (*.f64 y y))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (pow.f64 x 2))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (fma.f64 1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (*.f64 x x))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 3 (*.f64 y y) (fma.f64 x x (*.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y)))))","(fma.f64 3 (*.f64 y y) (fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y) (*.f64 x x))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (pow.f64 x 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (fma.f64 1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (*.f64 x x))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 3 (*.f64 y y) (fma.f64 x x (*.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y)))))","(fma.f64 3 (*.f64 y y) (fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y) (*.f64 x x))))","(*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2))","(*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y))","(*.f64 3 (*.f64 y y))","(+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (pow.f64 x 2))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (pow.f64 x 2))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (fma.f64 1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (*.f64 x x))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 3 (*.f64 y y) (fma.f64 x x (*.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y)))))","(fma.f64 3 (*.f64 y y) (fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y) (*.f64 x x))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (pow.f64 y 2)) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (pow.f64 x 2))))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (fma.f64 1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (*.f64 x x))))","(fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 3 (*.f64 y y) (fma.f64 x x (*.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y)))))","(fma.f64 3 (*.f64 y y) (fma.f64 -1/4 (/.f64 (pow.f64 x 4) (*.f64 y y)) (fma.f64 (/.f64 1/4 y) (/.f64 (pow.f64 x 4) y) (*.f64 x x))))","(+.f64 (pow.f64 y 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)))","(*.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y))","(*.f64 3 (*.f64 y y))","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 y 6))) (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8)) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)))))","(+.f64 (*.f64 y y) (+.f64 (*.f64 x x) (fma.f64 (+.f64 (/.f64 5/64 (pow.f64 y 6)) (neg.f64 (+.f64 (/.f64 1/16 (pow.f64 y 6)) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8) (*.f64 (pow.f64 (sqrt.f64 2) 2) (*.f64 y y)))))","(+.f64 (fma.f64 x x (*.f64 3 (*.f64 y y))) (*.f64 (-.f64 (/.f64 5/64 (pow.f64 y 6)) (+.f64 (/.f64 1/16 (pow.f64 y 6)) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2))) (pow.f64 x 8)))","(+.f64 (*.f64 3 (*.f64 y y)) (fma.f64 x x (*.f64 (-.f64 (*.f64 (/.f64 1 (pow.f64 y 6)) 1/64) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 x 8))))","(+.f64 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/8 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 4))) (+.f64 (pow.f64 (/.f64 1/16 (pow.f64 y 5)) 2) (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 y 8))) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 2)))) (pow.f64 y 2)))))) (+.f64 (*.f64 1/8 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 4))) (+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 y 10))) (*.f64 1/2 (/.f64 (-.f64 (*.f64 1/64 (/.f64 1 (pow.f64 y 8))) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 y 2)))) (pow.f64 y 2)))))) (pow.f64 x 12)) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 y 6))) (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8)) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))))","(+.f64 (*.f64 y y) (+.f64 (*.f64 x x) (fma.f64 (+.f64 (/.f64 5/64 (pow.f64 y 6)) (neg.f64 (+.f64 (/.f64 1/16 (pow.f64 y 6)) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8) (*.f64 (pow.f64 (sqrt.f64 2) 2) (*.f64 y y)))))","(+.f64 (fma.f64 x x (*.f64 3 (*.f64 y y))) (*.f64 (-.f64 (/.f64 5/64 (pow.f64 y 6)) (+.f64 (/.f64 1/16 (pow.f64 y 6)) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2))) (pow.f64 x 8)))","(+.f64 (*.f64 3 (*.f64 y y)) (fma.f64 x x (*.f64 (-.f64 (*.f64 (/.f64 1 (pow.f64 y 6)) 1/64) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 x 8))))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4)))))))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2))))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 y 2)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4)))))))))","(fma.f64 (+.f64 1 (pow.f64 (sqrt.f64 2) 2)) (*.f64 y y) (*.f64 x x))","(fma.f64 x x (*.f64 3 (*.f64 y y)))","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 (sqrt.f64 2) y)","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(neg.f64 (*.f64 (sqrt.f64 2) y))","(*.f64 (sqrt.f64 2) (neg.f64 y))","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(neg.f64 (*.f64 (sqrt.f64 2) y))","(*.f64 (sqrt.f64 2) (neg.f64 y))","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(neg.f64 (*.f64 (sqrt.f64 2) y))","(*.f64 (sqrt.f64 2) (neg.f64 y))","(*.f64 -1 (*.f64 (sqrt.f64 2) y))","(neg.f64 (*.f64 (sqrt.f64 2) y))","(*.f64 (sqrt.f64 2) (neg.f64 y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (*.f64 (+.f64 (*.f64 5/64 (/.f64 1 (pow.f64 y 6))) (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 y 6))) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8))))","(+.f64 (*.f64 y y) (+.f64 (*.f64 x x) (*.f64 (+.f64 (/.f64 5/64 (pow.f64 y 6)) (neg.f64 (+.f64 (/.f64 1/16 (pow.f64 y 6)) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)))) (pow.f64 x 8))))","(fma.f64 y y (fma.f64 x x (*.f64 (-.f64 (/.f64 5/64 (pow.f64 y 6)) (+.f64 (/.f64 1/16 (pow.f64 y 6)) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2))) (pow.f64 x 8))))","(fma.f64 (-.f64 (*.f64 (/.f64 1 (pow.f64 y 6)) 1/64) (pow.f64 (/.f64 -1/8 (pow.f64 y 3)) 2)) (pow.f64 x 8) (fma.f64 x x (*.f64 y y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))))))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 y 4) (pow.f64 x 2))) (+.f64 (pow.f64 y 2) (+.f64 (pow.f64 x 2) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))) (*.f64 -1/8 (/.f64 (pow.f64 y 6) (pow.f64 x 4))))))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 (pow.f64 y 8) (+.f64 (*.f64 -1 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 6))) (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2))) (*.f64 5/64 (/.f64 1 (pow.f64 x 6))))) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 (pow.f64 y 8) (fma.f64 -1 (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (/.f64 1/16 (pow.f64 x 6))) (/.f64 5/64 (pow.f64 x 6))) (+.f64 (*.f64 x x) (*.f64 y y)))","(fma.f64 (pow.f64 y 8) (-.f64 (/.f64 5/64 (pow.f64 x 6)) (+.f64 (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2) (/.f64 1/16 (pow.f64 x 6)))) (fma.f64 x x (*.f64 y y)))","(fma.f64 x x (fma.f64 y y (*.f64 (pow.f64 y 8) (-.f64 (*.f64 (/.f64 1 (pow.f64 x 6)) 1/64) (pow.f64 (/.f64 -1/8 (pow.f64 x 3)) 2)))))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 y 2))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 x 6) (pow.f64 y 4))) (+.f64 (pow.f64 y 2) (pow.f64 x 2))))))","(+.f64 (*.f64 x x) (*.f64 y y))","(fma.f64 x x (*.f64 y y))"]],"stop":[["node limit",1]],"time":47.81103515625,"type":"simplify"},{"compiler":[[2371,1228]],"time":24.537841796875,"type":"eval"},{"alts":[["(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","done",0.18425751953688402],["(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))","done",0.046875],["(fma.f64 (*.f64 (cbrt.f64 y) y) (+.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 (hypot.f64 x y) 2))","fresh",0.21064379884221007],["(fma.f64 x x (*.f64 y (*.f64 3 y)))","done",0.125]],"compiler":[[14,7],[13,6],[21,13],[10,6]],"count":[[116,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[112,0],"picked":[1,1]}],"min-error":[0],"time":22.548095703125,"type":"prune"},{"accuracy":[0.046875],"baseline":[0.046875],"branch":[["x",0.046875,1],["y",0.046875,1],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))",0.046875,1],["(*.f64 x x)",0.046875,1],["(*.f64 x x)",0.046875,1],["(*.f64 y y)",0.046875,1]],"compiler":[[3,2],[3,2],[17,7],[5,3],[5,3],[5,3],[75,32]],"count":[[6,1]],"inputs":[["(fma.f64 x x (*.f64 y (*.f64 3 y)))","(fma.f64 (hypot.f64 y y) (hypot.f64 y y) (pow.f64 (hypot.f64 x y) 2))","(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))","(fma.f64 (*.f64 (cbrt.f64 y) y) (+.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 (hypot.f64 x y) 2))","(fma.f64 y (*.f64 y 3) (*.f64 x x))","(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, E"],"oracle":[0.39490131837909415],"outputs":[["(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))"]],"time":20.5419921875,"times":[["x",3.712890625],["y",3.783935546875],["(+.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 y y)) (*.f64 y y))",3.36083984375],["(*.f64 x x)",2.56201171875],["(*.f64 x x)",2.955810546875],["(*.f64 y y)",2.7099609375]],"type":"regimes"},{"compiler":[[13,6]],"egraph":[[0,7,15,1.6375e-5]],"inputs":[["(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x x (fma.f64 y (+.f64 y y) (*.f64 y y)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.18701171875,"type":"simplify"},{"time":0.005859375,"type":"soundness"},{"compiler":[[13,6]],"remove-preprocessing":[[]],"time":8.027099609375,"type":"end"}]